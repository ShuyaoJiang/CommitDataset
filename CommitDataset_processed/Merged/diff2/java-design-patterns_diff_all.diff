[+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public class Hero {, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public class Hero {, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +public class AppManager {, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public class Hero {, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +public class AppManager {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public class Hero {, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +public class AppManager {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +public class DbManager {, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public class Hero {, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +public class AppManager {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +public class DbManager {, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public class Hero {, +++
[+++ b/.travis.yml, +sudo: required]
[+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentDatabase.java, + * Copyright (c) 2014-2017 Piyush Chaudhari, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java, + * Copyright (c) 2014-2017 Piyush Chaudhari,
[+++ b/pom.xml, + <!-- Tell maven to compile using Java 8 -->, + <source>1.8</source>, + <target>1.8</target>]
[+++ b/business-delegate/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/business-delegate/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * , + * <p>Some of the services the Business Delegate uses are instantiated directly, and some can be, + * , + * <p>In this example the client ({@link Client}) utilizes a business delegate (, + * Program entry point., + BusinessLookup businessLookup = new BusinessLookup();, + businessLookup.setEjbService(new EjbService());, + businessLookup.setJmsService(new JmsService());, +, + businessDelegate.setLookupService(businessLookup);, +++ b/business-delegate/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + *
[+++ b/half-sync-half-async/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/faq.md, +, +### Q7: What are the differences between FluentInterface and Builder patterns? {#Q7}, +, +Fluent interfaces are sometimes confused with the Builder pattern, because they share method chaining and a fluent usage. However, fluent interfaces are not primarily used to create shared (mutable) objects, but to configure complex objects without having to respecify the target object on every property change. , +++ /dev/null, +++ b/faq.md, +, +### Q7: What are the differences between FluentInterface and Builder patterns? {#Q7}, +, +Fluent interfaces are sometimes confused with the Builder pattern, because they share method chaining
[+++ b/api-gateway/price-microservice/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <relativePath>../../pom.xml</relativePath>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.10.0-SNAPSHOT</version>, + </parent>, +, + <modelVersion>4.0.0</modelVersion>, + <artifactId>price-microservice</artifactId>, + <packaging>jar</packaging>, +, + <properties>, + <spring.version>4.2.5.RELEASE</spring.version>, + <spring-boot.version>1.3.3.RELEASE</spring-boot.version>, + </properties>, +, + <dependencyManagement>, + <dependencies>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-dependencies</artifactId>, + <version>${spring-boot.version}</version>, + <type>pom</type>, + <scope>import</scope>, + </dependency>, + </dependencies>, + </dependencyManagement>, + <dependencies>, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-webmvc</artifactId>, + <version>${spring.version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-web</artifactId>, + <version>${spring-boot.version}</version>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-maven-plugin</artifactId>, +
[+++ b/data-mapper/pom.xml, + <relativePath>../pom.xml</relativePath>
[+++ b/.travis.yml, + - mvn clean test jacoco:report coveralls:report, +++ b/.travis.yml, + - mvn clean test jacoco:report coveralls:report, +++ b/pom.xml, + <jacoco.version>0.7.2.201409121644</jacoco.version>, +, + <pluginManagement>, + <plugins>, + <!-- , + This plugin's configuration is used to store Eclipse m2e settings only. , + It has no influence on the Maven build itself., + TODO: Remove when the m2e plugin can correctly bind to Maven lifecycle, + -->, + <plugin>, + <groupId>org.eclipse.m2e</groupId>, + <artifactId>lifecycle-mapping</artifactId>, + <version>1.0.0</version>, + <configuration>, + <lifecycleMappingMetadata>, + <pluginExecutions>, + <pluginExecution>, + <pluginExecutionFilter>, + <groupId>org.jacoco</groupId>, + <artifactId>, + jacoco-maven-plugin, + </artifactId>, + <versionRange>, + [0.6.2,), +
[+++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, + long count = CallsCount.getCount(tenantName);, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, + long count = CallsCount.getCount(tenantName);, +++ b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import java.util.concurrent.atomic.AtomicLong;, +, + private static final Logger LOGGER = LoggerFactory.getLogger(CallsCount.class);, + private static Map<String, AtomicLong> tenantCallsCount = new ConcurrentHashMap<>();, + tenantCallsCount.putIfAbsent(tenantName, new AtomicLong(0));, + tenantCallsCount.get(tenantName).incrementAndGet();, + public static Long getCount(String tenantName) {, + return tenantCallsCount.get(tenantName).get();, + LOGGER.debug("Resetting the map.");, + for (Entry<String, AtomicLong> e : tenantCallsCount.entrySet()) {, + tenantCallsCount.put(e.getKey(), new AtomicLong(0));, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, + long count = CallsCount.getCount(tenantName);, +++ b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import java.util.concurrent.atomic.AtomicLong;, +, + private static final Logger LOGGER = LoggerFactory.getLogger(CallsCount.class);, +
[+++ b/fluentinterface/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.5.0</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>fluentinterface</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/fluentinterface/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.5.0</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>fluentinterface</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java, +package com.iluwatar.fluentinterface;, +, +import com.iluwatar.fluentinterface.fluentiterable.FluentIterable;, +, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +import
[+++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/README.md, +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/execute-around/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>execute-around</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++
[+++ b/model-view-presenter/pom.xml, + <dependency>, + <groupId>net.java.dev.swing-layout</groupId>, + <artifactId>swing-layout</artifactId>, + <version>1.0.2</version>, + </dependency>]
[+++ b/repository/src/main/java/com/iluwatar/repository/AppConfig.java, +package com.iluwatar.repository;, +, +import java.sql.SQLException;, +import java.util.List;, +import java.util.Properties;, +, +import javax.sql.DataSource;, +, +import org.apache.commons.dbcp.BasicDataSource;, +import org.hibernate.jpa.HibernatePersistenceProvider;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.data.jpa.repository.config.EnableJpaRepositories;, +import org.springframework.orm.jpa.JpaTransactionManager;, +import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;, +, +/**, + * Annotations based configuration for Spring, + *, + */, +@EnableJpaRepositories, +public class AppConfig {, +, + /**, + * Creation of H2 db, + * , + * @return A new Instance of DataSource, + */, + @Bean(destroyMethod = "close"), + public DataSource dataSource() {, + BasicDataSource basicDataSource = new BasicDataSource();, + basicDataSource.setDriverClassName("org.h2.Driver");, + basicDataSource.setUrl("jdbc:h2:~/databases/person");, + basicDataSource.setUsername("sa");, + basicDataSource.setPassword("sa");, + return (DataSource) basicDataSource;, + }, +,
[+++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new Converter<>(, + userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive(),, + userDto.getEmail()),, + user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive(), user.getUserId()));, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new Converter<>(, + userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive(),, + userDto.getEmail()),, + user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive(), user.getUserId()));, +++ b/decorator/README.md, +Let's take the troll example. First of all we have a simple troll implementing the troll interface]
[+++ b/decorator/index.md, +![alt text](./etc/decorator.png "Decorator"), +++ b/decorator/index.md, +![alt text](./etc/decorator.png "Decorator"), +++ b/pom.xml, +++ b/decorator/index.md, +![alt text](./etc/decorator.png "Decorator"), +++ b/pom.xml, +++ /dev/null, +++ b/decorator/index.md, +![alt text](./etc/decorator.png "Decorator"), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/decorator/index.md, +![alt text](./etc/decorator.png "Decorator"), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/decorator/index.md, +![alt text](./etc/decorator.png "Decorator"), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/decorator/index.md, +![alt text](./etc/decorator.png "Decorator"), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/decorator/index.md, +![alt text](./etc/decorator.png "Decorator"), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/decorator/index.md, +![alt
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +++ b/dao/pom.xml, +, + <build>, +, + <!-- , + log4j.xml file will be copied both in ${project.build.outputDirectory} , + and ${project.build.directory}. Thanks to Sean Patrick Floyd , + (http://stackoverflow.com/questions/5637532/maven-how-to-place-resource-file-together-with-jar) , + -->, + , + <resources>, + <resource> <!-- regular processing for every resource file -->, + <directory>src/main/resources</directory>, + </resource>, + <resource> <!-- processing with a different output directory for log4j.xml -->, + <directory>src/main/resources</directory>, + <includes>, + <include>log4j.xml</include>, + </includes>, + <targetPath>..</targetPath> <!-- relative to target/classes i.e. ${project.build.directory} -->, + </resource>, + </resources>, +, + <plugins>, +, + <!-- , + This will exclude
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicket.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/App.java, + * <p>, + * In the example {@link LordBaelish}, {@link LordVarys} and {@link Scout} deliver events to, + * {@link KingsHand}. {@link KingsHand}, the event aggregator, then delivers the events, + * to {@link KingJoffrey}., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/App.java, + * <p>, + * In the example {@link LordBaelish}, {@link LordVarys} and {@link Scout} deliver events to, + * {@link KingsHand}. {@link KingsHand}, the event aggregator, then delivers the events, + * to {@link KingJoffrey}., + /**, + * Program entry point,
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +++ b/.travis.yml, +++ b/README.md, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.info("Constructing parts and car");, + LOGGER.info("Here is our car:");, + LOGGER.info("-> model: {}", car.getModel().get());, + LOGGER.info("-> price: {}", car.getPrice().get());, + LOGGER.info("-> parts: ");, + car.getParts().forEach(p -> LOGGER.info("\t{}/{}/{}", p.getType().get(), p.getModel().get(), p.getPrice().get()));, +++ b/.travis.yml, +++ b/README.md, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.info("Constructing parts and car");, + LOGGER.info("Here is our car:");, + LOGGER.info("-> model: {}", car.getModel().get());, + LOGGER.info("-> price: {}", car.getPrice().get());, + LOGGER.info("-> parts: ");,
[+++ b/dao/pom.xml, +, + <build>, +, + <!-- , + log4j.xml file will be copied both in ${project.build.outputDirectory} , + and ${project.build.outputDirectory}. Thanks to Sean Patrick Floyd , + (http://stackoverflow.com/questions/5637532/maven-how-to-place-resource-file-together-with-jar) , + -->, + , + <resources>, + <resource> <!-- regular resource processing for everything except logback.xml -->, + <directory>src/main/resources</directory>, + </resource>, + <resource> <!-- resource processing with a different output directory for log4j.xml -->, + <directory>src/main/resources</directory>, + <includes>, + <include>log4j.xml</include>, + </includes>, + <targetPath>..</targetPath> <!-- relative to target/classes i.e. ${project.build.outputDirectory} -->, + </resource>, + </resources>, +, + <plugins>, +, + <!-- , + This will exclude log4j.xml file
[+++ b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java, +import org.apache.camel.CamelContext;, +import org.apache.camel.builder.RouteBuilder;, +import org.springframework.context.ConfigurableApplicationContext;, + public static void main(String[] args) throws Exception{, + // Run Spring Boot application and obtain ApplicationContext, + ConfigurableApplicationContext context = SpringApplication.run(App.class, args);, +, + // Get CamelContext from ApplicationContext, + CamelContext camelContext = (CamelContext) context.getBean("camelContext");, +, + // Add a new routes that will handle endpoints form WireTapRoute class., + camelContext.addRoutes(new RouteBuilder() {, +, + @Override, + public void configure() throws Exception {, + from("{{endpoint}}").log("ENDPOINT: ${body}");, + from("{{wireTapEndpoint}}").log("WIRETAPPED ENDPOINT: ${body}");, + }, +, + });, +, + // Add producer that will send test message to an entry point in
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, + ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, + ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private static HashMap<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, + ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private static HashMap<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + HashMap<String, Node> cache = new HashMap<>();, + public ArrayList<UserAccount> getCacheDataInListForm() {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, + ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private static HashMap<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + HashMap<String, Node>
[+++ b/chain/README.md, +## Explanation, +, +Real world example, +, +> The Orc King gives loud orders to his army. The closest one to react is the commander, then officer and then soldier. The commander, officer and soldier here form a chain of responsibility., +, +In plain words, +, +> It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler., +, +Wikipedia says, +, +> In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series
[+++ b/pom.xml]
[+++ b/balking/README.md, +++ b/balking/README.md, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + expectedWeaponType, expectedWeaponType,, +++ b/balking/README.md, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + expectedWeaponType, expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, + private final P testedPrototype;, + public PrototypeTest(final P testedPrototype, final String expectedToString) {, +++ b/balking/README.md, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + expectedWeaponType, expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, + private final P testedPrototype;, + public PrototypeTest(final P testedPrototype, final String expectedToString) {, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, + long count = CallsCount.getCount(tenantName);, +++ b/balking/README.md, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + expectedWeaponType, expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java,
[+++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, + AudioInputStream audioStream = getPendingAudio()[headIndex].stream;, + clip.open(audioStream);]
[+++ b/facade/README.md, +![alt text](./etc/facade_1.png "Facade"), +++ b/facade/README.md, +![alt text](./etc/facade_1.png "Facade"), +++ b/facade/etc/facade.png, +++ b/facade/README.md, +![alt text](./etc/facade_1.png "Facade"), +++ b/facade/etc/facade.png, +++ b/facade/etc/facade.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.facade.DwarvenGoldmineFacade" project="facade" , + file="/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="160" width="376" x="50" y="263"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.facade.DwarvenMineWorker" project="facade" , +
[+++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>, +++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>, +++ b/serverless/README.md, +---, +layout: pattern, +title: serverless, +folder: serverless, +permalink: /patterns/serverless/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermittent, +---, +, +## Serverless, +, +Serverless eliminates the need to plan for infrastructure and let's you focus on your , +application. , +, +Following are optimization katas you should be aware of while building a serverless , +applications, +, +* The Lean function, + * Concise logic, + * Efficient/single purpose
[+++ b/bridge/pom.xml, + <scope>test</scope>, +++ b/bridge/pom.xml, + <scope>test</scope>, +++ b/decorator/pom.xml, + <scope>test</scope>, +++ b/bridge/pom.xml, + <scope>test</scope>, +++ b/decorator/pom.xml, + <scope>test</scope>, +++ b/facade/pom.xml, + <scope>test</scope>]
[+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +/**, + * <p>, + * This application demonstrates the async method invocation pattern. Key parts of the pattern are, + * <code>AsyncResult</code> which is an intermediate container for an asynchronously evaluated value,, + * <code>AsyncCallback</code> which can be provided to be executed on task completion and, + * <code>AsyncExecutor</code> that manages the execution of the async tasks., + * </p>, + * <p>, + * The main method shows example flow of async invocations. The main thread starts multiple tasks with, + * variable durations and then continues its own work. When the main thread has
[+++ b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/extension-objects/etc/extension_obj.png, +++ b/extension-objects/etc/extension_obj.png, +++ b/extension-objects/etc/extension_obj.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.2.0" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="concreteextensions.Soldier" project="extension-objects" , + file="/extension-objects/src/main/java/concreteextensions/Soldier.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="483" y="339"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="units.Unit" project="extension-objects" , + file="/extension-objects/src/main/java/units/Unit.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="192" y="115"/> , + <display autosize="true"
[+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java, +, + public void main() throws Exception {, +]
[+++ /dev/null, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, + throw new RuntimeException(e);, + throw new Exception(e.getMessage(), e);, + e.printStackTrace();, + ResultSet resultSet = statement.executeQuery();, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, + throw new RuntimeException(e);, + throw new Exception(e.getMessage(), e);, + e.printStackTrace();, + ResultSet resultSet = statement.executeQuery();, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll
[+++ b/eip-aggregator/etc/eip-aggregator.urm.puml, +@startuml, +package com.iluwatar.eip.aggregator {, + class App {, + + App(), + + main(args : String[]) {static}, + }, +}, +package com.iluwatar.eip.aggregator.routes {, + class MessageAggregationStrategy {, + + MessageAggregationStrategy(), + + aggregate(oldExchange : Exchange, newExchange : Exchange) : Exchange, + }, +}, +@enduml, +++ b/eip-aggregator/etc/eip-aggregator.urm.puml, +@startuml, +package com.iluwatar.eip.aggregator {, + class App {, + + App(), + + main(args : String[]) {static}, + }, +}, +package com.iluwatar.eip.aggregator.routes {, + class MessageAggregationStrategy {, + + MessageAggregationStrategy(), + + aggregate(oldExchange : Exchange, newExchange : Exchange) : Exchange, + }, +}, +@enduml, +++ b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/App.java, +/**, + * The MIT
[+++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories:, + - pattern_cat, + - creational, +tags: pattern_tag, +---, +, +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +**Applicability:** Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple
[+++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/command/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>command</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>command</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/command/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>command</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>command</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java, +import java.util.concurrent.TimeUnit;, + executorService.execute(() -> {, +, + executorService.shutdown();, + try {, + executorService.awaitTermination(5, TimeUnit.SECONDS);, + } catch (InterruptedException e) {, + System.out.println("Error waiting for ExecutorService shutdown");, + }, +++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java,
[+++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/pom.xml, + <module>producer-consumer</module>, +++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/pom.xml, + <module>producer-consumer</module>, +++ b/producer-consumer/etc/producer-consumer.png, +++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++
[+++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, + * This method stops the Update Method's thread. , +++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, + * This method stops the Update Method's thread. , +++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + factory = new HeroFactoryImpl(new ElfMage("cooking"), new ElfWarlord("cleaning"), new ElfBeast("protecting"));, + factory = new HeroFactoryImpl(new OrcMage("axe"), new OrcWarlord("sword"), new OrcBeast("laser"));, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, + * This method stops the Update Method's thread. , +++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + factory = new HeroFactoryImpl(new ElfMage("cooking"), new ElfWarlord("cleaning"), new ElfBeast("protecting"));, + factory = new HeroFactoryImpl(new OrcMage("axe"), new OrcWarlord("sword"), new OrcBeast("laser"));, +++ b/prototype/src/main/java/com/iluwatar/prototype/Beast.java, + public abstract Beast copy() throws CloneNotSupportedException;, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, + * This method stops the Update Method's
[+++ b/event-asynchronous/etc/event-asynchronous.png, +++ b/event-asynchronous/etc/event-asynchronous.png, +++ b/event-asynchronous/etc/event-asynchronous.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.10" icons="true" automaticImage="PNG" always-add-relationships="false" , + generalizations="true" realizations="true" associations="true" dependencies="false" nesting-relationships="true" , + router="FAN"> , + <class id="1" language="java" name="com.iluwatar.event.asynchronous.App" project="event-asynchronous" , + file="/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="629" y="221"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="false" package="false" protected="false" private="false" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.event.asynchronous.Event" project="event-asynchronous" , + file="/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1"
[+++ b/front-controller/index.md, +categories: Creational, +Introduce how to create objects which follow value semantics rather than reference semantics., +++ b/front-controller/index.md, +categories: Creational, +Introduce how to create objects which follow value semantics rather than reference semantics., +++ b/value-object/etc/value-object.png, +++ b/front-controller/index.md, +categories: Creational, +Introduce how to create objects which follow value semantics rather than reference semantics., +++ b/value-object/etc/value-object.png, +++ b/value-object/etc/value-object.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="true" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.value.object.HeroStat" project="value-object" , + file="/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="520" y="337"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false"
[+++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/AdvancedSorceress.java]
[+++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0, + http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0, + http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/extension-objects/etc/extension_obj.png, +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0, + http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/extension-objects/etc/extension_obj.png, +++ b/extension-objects/etc/extension_obj.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.2.0" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="concreteextensions.Soldier" project="extension-objects" , + file="/extension-objects/src/main/java/concreteextensions/Soldier.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="483" y="339"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , +
[+++ b/.travis.yml, +sudo: required, +++ b/.travis.yml, +sudo: required, +++ b/abstract-factory/README.md, +## Explanation, +Real world example, +, +> To create a kingdom we need objects with common theme. Elven kingdom needs an Elven king, Elven castle and Elven army whereas Orcish kingdom needs an Orcish king, Orcish castle and Orcish army. There is a dependency between the objects in the kingdom., +, +In plain words, +, +> A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes., +, +Wikipedia says, +, +> The abstract factory pattern provides a way to encapsulate
[+++ b/data-mapper/README.md, +---
[+++ b/message-channel/index.md, +tags: , + - Java, + - EIP, +++ b/message-channel/index.md, +tags: , + - Java, + - EIP, +++ b/pom.xml, + <module>publish-subscribe</module>, +++ b/message-channel/index.md, +tags: , + - Java, + - EIP, +++ b/pom.xml, + <module>publish-subscribe</module>, +++ b/publish-subscribe/.gitignore, +/target/, +++ b/message-channel/index.md, +tags: , + - Java, + - EIP, +++ b/pom.xml, + <module>publish-subscribe</module>, +++ b/publish-subscribe/.gitignore, +/target/, +++ b/publish-subscribe/etc/publish-subscribe.png, +++ b/message-channel/index.md, +tags: , + - Java, + - EIP, +++ b/pom.xml, + <module>publish-subscribe</module>, +++ b/publish-subscribe/.gitignore, +/target/, +++ b/publish-subscribe/etc/publish-subscribe.png, +++ b/publish-subscribe/etc/publish-subscribe.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1"
[+++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, +
[+++ b/README.md, +++ b/README.md, +++ b/interpreter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>interpreter</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>interpreter</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/README.md, +++ b/interpreter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>interpreter</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>interpreter</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/promise/etc/promise.png, +++ b/promise/etc/promise.png, +++ b/promise/etc/promise.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.10" icons="true" automaticImage="PNG" always-add-relationships="false" , + generalizations="true" realizations="true" associations="true" dependencies="false" nesting-relationships="true" , + router="FAN"> , + <class id="1" language="java" name="com.iluwatar.promise.Promise" project="promise" , + file="/promise/src/main/java/com/iluwatar/promise/Promise.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="524" y="541"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="false" static="true"/> , + <operations public="true" package="false" protected="true" private="false" static="true"/> , + </display> , + </class> , + <interface id="2" language="java" name="java.util.concurrent.Future" project="async-method-invocation" , + file="/usr/lib/java/jdk1.8.0_45/jre/lib/rt.jar" binary="true" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="527" y="94"/> , +
[+++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java]
[+++ b/visitor/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/visitor/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/visitor/src/test/java/com/iluwatar/visitor/CommanderTest.java, +package com.iluwatar.visitor;, +, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.verify;, +, +/**, + * Date: 12/30/15 - 19:45 PM, + *, + * @author Jeroen Meulemeester, + */, +public class CommanderTest extends UnitTest<Commander> {, +, + /**, + * Create a new test instance for the given {@link Commander}, + */, + public CommanderTest() {, + super(Commander::new);, + }, +, + @Override, + void verifyVisit(Commander unit, UnitVisitor mockedVisitor) {, + verify(mockedVisitor).visitCommander(eq(unit));, + }, +,
[+++ b/abstract-factory/README.md, +* the lifetime of the dependency is conceptually shorter than the lifetime of the consumer., +* you need a run-time value to construct a particular dependency, +* you want to decide which product to call from a family at runtime., +* you need to supply one or more parameters only known at run-time before you can resolve a dependency., +, +## Use Cases: , +, +* Selecting to call the appropriate implementation of FileSystemAcmeService or DatabaseAcmeService or NetworkAcmeService at runtime., +* Unit test case writing becomes much easier, +, +## Consequences:, +, +* Dependency injection in java
[+++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (!asyncResult.isCompleted()) {, + return asyncResult.getValue();, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (!asyncResult.isCompleted()) {, + return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package
[+++ b/strategy/src/main/java/com/iluwatar/strategy/App.java, + * The Strategy pattern (also known as the policy pattern) is a software design pattern that , + * enables an algorithm's behavior to be selected at runtime., + * <p>, + * In this example ({@link DragonSlayingStrategy}) encapsulates an algorithm. The containing]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + private static final List<PlayerDetails> PLAYERS;, + PLAYERS = new ArrayList<>();, + PLAYERS.add(PlayerDetails.create("john@google.com", "312-342", "+3242434242"));, + PLAYERS.add(PlayerDetails.create("mary@google.com", "234-987", "+23452346"));, + PLAYERS.add(PlayerDetails.create("steve@google.com", "833-836", "+63457543"));, + PLAYERS.add(PlayerDetails.create("wayne@google.com", "319-826", "+24626"));, + PLAYERS.add(PlayerDetails.create("johnie@google.com", "983-322", "+3635635"));, + PLAYERS.add(PlayerDetails.create("andy@google.com", "934-734", "+0898245"));, + PLAYERS.add(PlayerDetails.create("richard@google.com", "536-738", "+09845325"));, + PLAYERS.add(PlayerDetails.create("kevin@google.com", "453-936", "+2423532"));, + PLAYERS.add(PlayerDetails.create("arnold@google.com", "114-988", "+5646346524"));, + PLAYERS.add(PlayerDetails.create("ian@google.com", "663-765", "+928394235"));, + PLAYERS.add(PlayerDetails.create("robin@google.com", "334-763", "+35448"));, + PLAYERS.add(PlayerDetails.create("ted@google.com", "735-964", "+98752345"));, + PLAYERS.add(PlayerDetails.create("larry@google.com", "734-853", "+043842423"));, + PLAYERS.add(PlayerDetails.create("calvin@google.com", "334-746", "+73294135"));, + PLAYERS.add(PlayerDetails.create("jacob@google.com", "444-766", "+358042354"));, + PLAYERS.add(PlayerDetails.create("edwin@google.com", "895-345", "+9752435"));, + PLAYERS.add(PlayerDetails.create("mary@google.com", "760-009", "+34203542"));, + PLAYERS.add(PlayerDetails.create("lolita@google.com", "425-907", "+9872342"));, + PLAYERS.add(PlayerDetails.create("bruno@google.com", "023-638", "+673824122"));, + PLAYERS.add(PlayerDetails.create("peter@google.com", "335-886", "+5432503945"));, + PLAYERS.add(PlayerDetails.create("warren@google.com", "225-946", "+9872341324"));, + PLAYERS.add(PlayerDetails.create("monica@google.com",
[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, + * In this example the delegates are {@link EpsonPrinter}, {@link HpPrinter} and {@link CanonPrinter} they all implement, + * {@link Printer}. The {@link AbstractPrinterController} and through inheritance {@link PrinterController} also,
[+++ b/thread-pool/src/main/java/com/iluwatar/threadpool/App.java, + * <p>, + * wrapped into a {@link Worker} object that implements {@link Runnable}. We create an , + * {@link ExecutorService} with fixed number of threads (Thread Pool) and use them to execute , + * the {@link Worker}s., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/thread-pool/src/main/java/com/iluwatar/threadpool/App.java, + * <p>, + * wrapped into a {@link Worker} object that implements {@link Runnable}. We create an , + * {@link ExecutorService} with fixed number of threads (Thread Pool) and use them to execute , + *
[+++ b/dao/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>dao</artifactId>, + <dependencies>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-core</artifactId>, + </dependency>, + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency> , + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/dao/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>dao</artifactId>, + <dependencies>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-core</artifactId>, + </dependency>, + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency> ,
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system., +Design patterns can speed up the development process by providing tested, proven development paradigms., +Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns., +Creational design patterns abstract the instantiation process. They help make a system independent of how its objects are created, composed, and represented., +* [Step Builder](#step-builder), +Structural patterns are concerned
[+++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + - <a href="#contribute">How to contribute</a>, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +, +, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + - <a href="#contribute">How to contribute</a>, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +, +, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/README.md, +[![Build
[+++ b/abstract-document/pom.xml, + <version>1.14.0</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0</version>, +++ b/adapter/pom.xml, + <version>1.14.0</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0</version>, +++ b/adapter/pom.xml, + <version>1.14.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0</version>, +++ b/adapter/pom.xml, + <version>1.14.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0</version>, +++ b/adapter/pom.xml, + <version>1.14.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.14.0</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0</version>, +++ b/adapter/pom.xml, + <version>1.14.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify
[+++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/composite/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>composite</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>composite</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/composite/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>composite</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>composite</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/repository/etc/repository.png, +++ b/repository/etc/repository.png, +++ b/repository/etc/repository.ucls, + <position height="-1" width="-1" x="109" y="67"/> , + <interface id="2" language="java" name="com.iluwatar.repository.PersonRepository" project="repository" , + file="/repository/src/main/java/com/iluwatar/repository/PersonRepository.java" binary="false" corner="BOTTOM_RIGHT"> , +++ b/repository/etc/repository.png, +++ b/repository/etc/repository.ucls, + <position height="-1" width="-1" x="109" y="67"/> , + <interface id="2" language="java" name="com.iluwatar.repository.PersonRepository" project="repository" , + file="/repository/src/main/java/com/iluwatar/repository/PersonRepository.java" binary="false" corner="BOTTOM_RIGHT"> , +++ b/repository/src/main/java/com/iluwatar/repository/App.java, + PersonRepository repository = context.getBean(PersonRepository.class);, + repository.save(peter);, + repository.save(nasta);, + System.out.println("Count Person records: " + repository.count());, + List<Person> persons = (List<Person>) repository.findAll();, + System.out.println("Find by surname 'Sagan': " + repository.findBySurname("Sagan"));, + repository.save(nasta);, + System.out.println("Find by id 2: " + repository.findOne(2L));, + repository.delete(2L);, + System.out.println("Count Person records: " + repository.count());,
[+++ b/iterator/src/main/java/com/iluwatar/iterator/App.java, + * Iterator ({@link ItemIterator}) adds abstraction layer on top of a collection, + * ({@link TreasureChest}). This way the collection can change its internal, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/iterator/src/main/java/com/iluwatar/iterator/App.java, + * Iterator ({@link ItemIterator}) adds abstraction layer on top of a collection, + * ({@link TreasureChest}). This way the collection can change its internal, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/iterator/src/main/java/com/iluwatar/iterator/Item.java, +/**, + * , + * Item, + *, + */,
[+++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/App.java, + * This is an app that checks whether the order request is valid through pre-processing done via {@link Filter}., + * Each field has its own corresponding {@link Filter}, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/App.java, + * This is an app that checks whether the order request is valid through pre-processing done via {@link Filter}., + * Each field has its own corresponding {@link Filter}, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, +
[+++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + * In Prototype we have a factory class ({@link HeroFactoryImpl}) producing objects by, + * cloning the existing ones. In this example the factory's prototype objects are, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + * In Prototype we have a factory class ({@link HeroFactoryImpl}) producing objects by, + * cloning the existing ones. In this example the factory's prototype objects are, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/prototype/src/main/java/com/iluwatar/prototype/Beast.java, +/**, + * , +
[+++ b/pom.xml]
[+++ b/hexagonal/etc/hexagonal.png, +++ b/hexagonal/etc/hexagonal.png, +++ b/hexagonal/etc/hexagonal.ucls, +<class-diagram version="1.1.10" icons="true" automaticImage="PNG" always-add-relationships="false" , + generalizations="true" realizations="true" associations="true" dependencies="false" nesting-relationships="true" , + router="FAN"> , + <class id="1" language="java" name="com.iluwatar.hexagonal.notifications.StdOutNotifications" project="hexagonal" , + file="/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/StdOutNotifications.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="167" width="235" x="731" y="122"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.hexagonal.banking.InMemoryBank" project="hexagonal" , + file="/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/InMemoryBank.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="149" width="217" x="1006" y="122"/> ,
[+++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +<class-diagram version="1.1.11" icons="true" automaticImage="PNG" always-add-relationships="false", + generalizations="true" realizations="true" associations="true" dependencies="false" nesting-relationships="true", + router="FAN">, + <class id="1" language="java" name="com.iluwatar.caching.CacheStore" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/CacheStore.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="322" y="444"/>, + <class id="2" language="java" name="com.iluwatar.caching.LruCache" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/LruCache.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="700" y="446"/>, + <enumeration id="3" language="java" name="com.iluwatar.caching.CachingPolicy" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="943" y="122"/>, + <class id="4" language="java" name="com.iluwatar.caching.DbManager" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/DbManager.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="1011" y="426"/>, + <class id="5" language="java"
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/collection-pipeline/README.md, +---, +layout: pattern, +title: Collection Pipeline, +folder: collection-pipeline, +permalink: /patterns/collection-pipeline/, +categories: Functional, +tags:, + - Java, + - Difficulty-Beginner, + - Functional, +---, +, +## Intent, +Collection Pipeline introduces Function Composition and Collection Pipeline, two functional-style patterns that you can combine to iterate collections in your code. , +In functional programming, it's common to sequence complex operations through a series of smaller modular functions or operations. The series is called a composition of functions, or a function composition. When a collection of data flows through a function composition, it becomes a collection pipeline.
[+++ b/command/src/main/java/com/iluwatar/Goblin.java, + setSize(Size.NORMAL);
[+++ b/pom.xml, + <module>hexagonal</module>]
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/async-method-invocation/README.md, +++ b/async-method-invocation/README.md, +++ b/command/README.md, +++ b/async-method-invocation/README.md, +++ b/command/README.md, +++ b/event-aggregator/README.md, +++ b/async-method-invocation/README.md, +++ b/command/README.md, +++ b/event-aggregator/README.md, +++ b/event-driven-architecture/README.md, +++ b/async-method-invocation/README.md, +++ b/command/README.md, +++ b/event-aggregator/README.md, +++ b/event-driven-architecture/README.md, +++ b/monad/README.md, + - Difficulty-Advanced, +++ b/async-method-invocation/README.md, +++ b/command/README.md, +++ b/event-aggregator/README.md, +++ b/event-driven-architecture/README.md, +++ b/monad/README.md, + - Difficulty-Advanced, +++ b/mute-idiom/README.md, +Provide a template to supress any exceptions that either are declared but cannot occur or should only be logged;, +* an API declares some exception but can never throw that exception. Eg. ByteArrayOutputStream bulk write method., +++ b/async-method-invocation/README.md, +++ b/command/README.md, +++ b/event-aggregator/README.md, +++ b/event-driven-architecture/README.md, +++ b/monad/README.md, + - Difficulty-Advanced, +++ b/mute-idiom/README.md,
[+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * Decorator pattern is a more flexible alternative to subclassing. The decorator, + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * Decorator pattern is a more flexible alternative to subclassing. The decorator, + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java, + * SmartTroll is a decorator for {@link Hostile} objects., + * The calls to the {@link Hostile} interface are intercepted, + * to the decorated {@link Hostile} object.,
[+++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/adapter/etc/adapter.png, +++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.ucls, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.adapter.GnomeEngineeringManager" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="106" width="224" x="110" y="210"/> , + <interface id="2" language="java" name="com.iluwatar.adapter.Engineer" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/Engineer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="88" width="141" x="110" y="356"/> , + <class id="3" language="java" name="com.iluwatar.adapter.GnomeEngineer" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="106" width="141" x="374" y="210"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true"
[+++ b/factory-kit/index.md, +---, +layout: pattern, +title: Factory Kit, +folder: factory-kit, +permalink: /patterns/factory-kit/, +categories: Creational, +tags:, + - Java, + - Difficulty-Beginner, + - Functional, +---, +, +## Also known as, +Virtual Constructor, +, +## Intent, +Define factory of immutable content with separated builder and factory interfaces., +, +![alt text](./etc/factory-kit_1.png "Factory Kit"), +, +## Applicability, +Use the Factory Kit pattern when, +, +* a class can't anticipate the class of objects it must create, +* you just want a new instance of custom builder instead of global one, +* a class wants its subclasses to specify the objects it creates,
[+++ b/README.md, +, +, +, +, +++ b/README.md, +, +, +, +, +++ b/intercepting-filter/src/main/AddressFilter.java, + * This filter is responsible for checking/filtering the input in the address field, returns null if field is empty, +++ b/README.md, +, +, +, +, +++ b/intercepting-filter/src/main/AddressFilter.java, + * This filter is responsible for checking/filtering the input in the address field, returns null if field is empty, +++ b/intercepting-filter/src/main/Client.java, + private FilterManager filterManager;, + private JLabel jl;, + private JTextField[] jtFields;, + private JTextArea[] jtAreas;, + private JButton clearButton, processButton;, + String request = String.format("%s&%s&%s&%s&%s",jtFields[0].getText(),jtFields[1].getText(),jtAreas[0].getText(),jtFields[2].getText(),jtAreas[1].getText());, + , + jl.setText(sendRequest(request));, +++ b/README.md, +, +, +,
[+++ b/retry/src/main/java/com/iluwatar/retry/App.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/App.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/BusinessException.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/App.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/BusinessException.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/BusinessOperation.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/App.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/BusinessException.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/BusinessOperation.java, + * @since 1.18.0, + * @since 1.18.0, +++ b/retry/src/main/java/com/iluwatar/retry/CustomerNotFoundException.java, + * @since 1.18.0, + * @since
[+++ b/retry/src/main/java/com/iluwatar/retry/App.java, + errorWithRetryExponentialBackoff();, + , + private static void errorWithRetryExponentialBackoff() throws Exception {, + final RetryExponentialBackoff<String> retry = new RetryExponentialBackoff<>(, + new FindCustomer("123", new CustomerNotFoundException("not found")),, + 6, //6 attempts, + 30000, //30 s max delay between attempts, + e -> CustomerNotFoundException.class.isAssignableFrom(e.getClass()), + );, + op = retry;, + final String customerId = op.perform();, + LOG.info(String.format(, + "However, retrying the operation while ignoring a recoverable error will eventually yield ", + + "the result %s after a number of attempts %s", customerId, retry.attempts(), + ));, + }, +++ b/retry/src/main/java/com/iluwatar/retry/App.java, + errorWithRetryExponentialBackoff();, + , + private static void errorWithRetryExponentialBackoff()
[+++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.ucls, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.adapter.FishingBoat" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="656" y="355"/> , + <class id="2" language="java" name="com.iluwatar.adapter.Captain" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/Captain.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="228" y="185"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="3" language="java" name="com.iluwatar.adapter.BattleFishingBoat" project="adapter" ,
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfers.java, + * Interface to bank accounts., + void setFunds(String bankAccount, int amount);, + int getFunds(String bankAccount);, + boolean transferFunds(int amount, String sourceBackAccount, String destinationBankAccount);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfers.java, + * Interface to bank accounts., + void setFunds(String bankAccount, int amount);, + int getFunds(String bankAccount);, + boolean transferFunds(int amount, String sourceBackAccount, String destinationBankAccount);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + *
[+++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/adapter/pom.xml, + <version>1.7.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/adapter/pom.xml, + <version>1.7.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.7.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/adapter/pom.xml, + <version>1.7.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.7.0</version>, +++ b/bridge/pom.xml, + <version>1.7.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/adapter/pom.xml, + <version>1.7.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.7.0</version>, +++ b/bridge/pom.xml, + <version>1.7.0</version>, +++ b/builder/pom.xml, + <version>1.7.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/adapter/pom.xml, + <version>1.7.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.7.0</version>, +++ b/bridge/pom.xml, + <version>1.7.0</version>, +++ b/builder/pom.xml, + <version>1.7.0</version>, +++ b/business-delegate/pom.xml, + <version>1.7.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/adapter/pom.xml, + <version>1.7.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.7.0</version>, +++ b/bridge/pom.xml, +
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + try (Scanner scanner = new Scanner(System.in)) {, + if ("1".equals(cmd)) {, + } else if ("2".equals(cmd)) {, + } else if ("3".equals(cmd)) {, + } else if ("4".equals(cmd)) {, + }, + return scanner.next();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + try (Scanner scanner = new Scanner(System.in)) {, + if ("1".equals(cmd)) {, + } else if ("2".equals(cmd)) {, + } else if ("3".equals(cmd)) {, + } else if ("4".equals(cmd)) {, + }, + return scanner.next();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java, + if (!result) {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + try (Scanner scanner = new Scanner(System.in)) {, + if ("1".equals(cmd)) {, + } else if ("2".equals(cmd))
[+++ b/command/src/main/java/com/iluwatar/App.java, +
[+++ b/hexagonal/etc/hexagonal.ucls, + <class id="7" language="java" name="com.iluwatar.hexagonal.domain.LotteryService" project="hexagonal", + <interface id="11" language="java" name="com.iluwatar.hexagonal.domain.LotteryAdministration", + <class id="13" language="java" name="com.iluwatar.hexagonal.domain.LotteryAdministration" project="hexagonal", + <interface id="15" language="java" name="com.iluwatar.hexagonal.domain.LotteryService" project="hexagonal", +++ b/hexagonal/etc/hexagonal.ucls, + <class id="7" language="java" name="com.iluwatar.hexagonal.domain.LotteryService" project="hexagonal", + <interface id="11" language="java" name="com.iluwatar.hexagonal.domain.LotteryAdministration", + <class id="13" language="java" name="com.iluwatar.hexagonal.domain.LotteryAdministration" project="hexagonal", + <interface id="15" language="java" name="com.iluwatar.hexagonal.domain.LotteryService" project="hexagonal", +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import com.iluwatar.hexagonal.domain.LotteryAdministration;, +import com.iluwatar.hexagonal.domain.LotteryService;, +++ b/hexagonal/etc/hexagonal.ucls, + <class id="7" language="java" name="com.iluwatar.hexagonal.domain.LotteryService" project="hexagonal", + <interface id="11" language="java" name="com.iluwatar.hexagonal.domain.LotteryAdministration", + <class id="13" language="java" name="com.iluwatar.hexagonal.domain.LotteryAdministration" project="hexagonal", + <interface id="15" language="java" name="com.iluwatar.hexagonal.domain.LotteryService" project="hexagonal", +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import com.iluwatar.hexagonal.domain.LotteryAdministration;, +import com.iluwatar.hexagonal.domain.LotteryService;, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/LotteryModule.java, +++ b/hexagonal/etc/hexagonal.ucls, + <class id="7" language="java" name="com.iluwatar.hexagonal.domain.LotteryService" project="hexagonal", + <interface
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +++ b/.travis.yml, +++ b/README.md, +++ b/pom.xml]
[+++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/pom.xml, +--><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <module>queue-load-leveling</module>, + <ignore/>, +++ b/pom.xml, +--><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <module>queue-load-leveling</module>, + <ignore/>, +++ b/queue-load-leveling/README.md, +---, +layout: pattern, +title: Queue based load leveling, +folder: queue-load-leveling, +permalink: /patterns/queue-load-leveling/, +pumlid: , +categories: Other, +tags:, + - Java, + - Difficulty-Intermediate, + - Performance, +---, +, +## Intent, +Use a queue that acts as a buffer between a task and a service that it invokes in order to smooth , +intermittent heavy loads that may otherwise cause the service to fail or the task to time out. , +This pattern can help to
[+++ b/memento/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>memento</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>memento</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/memento/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>memento</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>memento</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014 Ilkka Seppälä, +++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014 Ilkka Seppälä, +++ b/abstract-document/etc/abstract-document.urm.puml, + class Part {, + + Part(properties : Map<String, Object>), + interface HasParts {, + + PROPERTY : String {static}, + + getParts() : Stream<Part>, + }, + class Car {, + + Car(properties : Map<String, Object>), + }, + interface HasModel {, + + PROPERTY : String {static}, + + getModel() : Optional<String>, + class App {, + + App(), + + main(args : String[]) {static}, + }, +AbstractDocument --+ Map, +AbstractDocument ..|> Document , +HasPrice --|> Document , +HasParts
[+++ b/adapter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>adapter</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>adapter</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/adapter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>adapter</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>adapter</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +++ b/dao/pom.xml, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +++ b/dao/pom.xml, +++ /dev/null, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +++ b/dao/pom.xml, +++ /dev/null, +++ b/dao/src/test/resources/log4j.xml, +<?xml version="1.0" encoding="UTF-8" ?>, +<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">, +<log4j:configuration debug="true", + xmlns:log4j='http://jakarta.apache.org/log4j/'>, +, + <appender name="console" class="org.apache.log4j.ConsoleAppender">, + <layout class="org.apache.log4j.PatternLayout">, + <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />, + </layout>, + </appender>, +, + <root>, + <level value="INFO" />, + <appender-ref ref="console" />, + </root>, +, +</log4j:configuration>, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +++ b/dao/pom.xml, +++ /dev/null, +++ b/dao/src/test/resources/log4j.xml, +<?xml version="1.0" encoding="UTF-8" ?>, +<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">, +<log4j:configuration debug="true", + xmlns:log4j='http://jakarta.apache.org/log4j/'>, +, + <appender name="console" class="org.apache.log4j.ConsoleAppender">, + <layout class="org.apache.log4j.PatternLayout">, + <param
[+++ b/abstract-factory/README.md, +Now, we can design a factory for our different kingdom factories. In this example, we created FactoryMaker, responsible for returning an instance of either ElfKingdomFactory or OrcKingdomFactory. , +The client can use FactoryMaker to create the desired concrete factory which, in turn, will produce different concrete objects (Army, King, Castle). , +In this example, we also used an enum to parameterize which type of kingdom factory the client will ask for., +, +```, +public static class FactoryMaker {, +, + public enum KingdomType {, + ELF, ORC, + }, +, + public static KingdomFactory makeFactory(KingdomType type) {,
[+++ b/PULL_REQUEST_TEMPLATE.md, +, +Pull request title, +, +- Clearly and concisely describes what it does, +- Refer to the issue that it solves, if available, +, +, +Pull request description, +, +- Describes the main changes that come with the pull request, +- Any relevant additional information is provided, +, +, +, +> For detailed contributing instructions see https://github.com/iluwatar/java-design-patterns/wiki/01.-How-to-contribute, +++ b/PULL_REQUEST_TEMPLATE.md, +, +Pull request title, +, +- Clearly and concisely describes what it does, +- Refer to the issue that it solves, if available, +, +, +Pull request description, +, +- Describes the main changes that come with the
[+++ b/data-bus/pom.xml, +++ b/data-bus/pom.xml, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, +import com.iluwatar.databus.data.StartingData;, +import com.iluwatar.databus.data.StoppingData;, +++ b/data-bus/pom.xml, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, +import com.iluwatar.databus.data.StartingData;, +import com.iluwatar.databus.data.StoppingData;, +++ b/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java, + public MessageData(String message) {, + this.message = message;, + }, +, +++ b/data-bus/pom.xml, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, +import com.iluwatar.databus.data.StartingData;, +import com.iluwatar.databus.data.StoppingData;, +++ b/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java, + public MessageData(String message) {, + this.message = message;, + }, +, +++ b/data-bus/src/main/java/com/iluwatar/databus/data/StartingData.java, + public StartingData(LocalDateTime when) {, + this.when = when;, + }, +, +++ b/data-bus/pom.xml, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, +import com.iluwatar.databus.data.StartingData;, +import com.iluwatar.databus.data.StoppingData;, +++ b/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java, + public MessageData(String message) {, + this.message = message;, + }, +, +++ b/data-bus/src/main/java/com/iluwatar/databus/data/StartingData.java, + public StartingData(LocalDateTime when) {, + this.when
[+++ b/event-sourcing/pom.xml, + <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->, + <dependency>, + <groupId>com.google.code.gson</groupId>, + <artifactId>gson</artifactId>, + <version>2.8.1</version>, + </dependency>, +, +++ b/event-sourcing/pom.xml, + <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->, + <dependency>, + <groupId>com.google.code.gson</groupId>, + <artifactId>gson</artifactId>, + <version>2.8.1</version>, + </dependency>, +, +++ b/event-sourcing/src/main/java/com/iluwatar/event/sourcing/api/DomainEvent.java, +package com.iluwatar.event.sourcing.api;, +, +import java.io.Serializable;, +, +/**, + * Created by serdarh on 06.08.2017., + */, +public abstract class DomainEvent implements Serializable {, + private final long sequenceId;, + private final long createdTime;, + private boolean replica = false;, + private final String eventClassName;, +, + public DomainEvent(long sequenceId, long createdTime, String eventClassName) {, + this.sequenceId = sequenceId;, + this.createdTime = createdTime;, +
[+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerDto.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2017 Gopinath Langote, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, +
[+++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderTest.java, +import org.junit.Ignore;, + @Ignore // intermittent failures when executed on CI, +++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderTest.java, +import org.junit.Ignore;, + @Ignore // intermittent failures when executed on CI, +++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/WriterTest.java, +import org.junit.Ignore;, + @Ignore // intermittent failures when executed on CI]
[+++ b/ambassador/src/main/java/com/iluwatar/ambassador/util/RandomProvider.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +++ b/servant/etc/servant-pattern.jpg, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +++ b/servant/etc/servant-pattern.jpg, +++ b/servant/etc/servant-pattern.png, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +++ b/servant/etc/servant-pattern.jpg, +++ b/servant/etc/servant-pattern.png, +++ b/servant/etc/servant-pattern.ucls, +<?xml version="1.0" encoding="UTF-8"?>
[+++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {, + // Do nothing, + }, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {, + // Do nothing, + }, +++ b/visitor/src/main/java/com/iluwatar/visitor/CommanderVisitor.java, + public void visitSoldier(Soldier soldier) {
[+++ b/.travis.yml, +# default install command is just "mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V", +install:, +- mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V -e, +]
[+++ b/eip-splitter/README.md, +---, +layout: pattern, +title: EIP Splitter, +folder: eip-splitter, +permalink: /patterns/eip-splitter/, +categories: Enterprise integration, +tags:, + - Java, + - Difficulty-Intermittent, + - Enterprise integration, +---, +, +## Intent, +It is very common in integration systems that incoming messages consists of many items bundled together. For example, +an invoice document contains multiple invoice lines describing transaction (quantity, name of provided, +service/sold goods, price etc.). Such bundled messages may not be accepted by other systems. This is where splitter, +pattern comes in handy. It will take the whole document, split it based on given criteria and send individual, +items
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/converter/etc/converter.png, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/converter/etc/converter.png, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + try (FileWriter writer = new FileWriter(filename)) {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/converter/etc/converter.png, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + try (FileWriter writer = new FileWriter(filename)) {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + LotteryAdministration administration = injector.getInstance(LotteryAdministration.class);, + ConsoleAdministrationSrv consoleAdministration = new ConsoleAdministrationSrvImpl(administration, LOGGER);, + consoleAdministration.getAllSubmittedTickets();, + consoleAdministration.performLottery();, + consoleAdministration.resetLottery();, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/converter/etc/converter.png, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + try (FileWriter writer = new FileWriter(filename)) {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + LotteryAdministration administration = injector.getInstance(LotteryAdministration.class);, + ConsoleAdministrationSrv consoleAdministration = new ConsoleAdministrationSrvImpl(administration, LOGGER);, + consoleAdministration.getAllSubmittedTickets();, + consoleAdministration.performLottery();, +
[+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, + * <code>AsyncResult</code> which is an intermediate container for an asynchronously evaluated, + * value, <code>AsyncCallback</code> which can be provided to be executed on task completion and, + * The main method shows example flow of async invocations. The main thread starts multiple tasks, + * with variable durations and then continues its own work. When the main thread has done it's job, + * it collects the results of the async tasks. Two of the tasks are handled with callbacks, meaning, + * the callbacks are executed immediately when the tasks complete., + * Noteworthy difference
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministrationSrv.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/dependency-injection/src/test/java/com/iluwatar/dependency/injection/AdvancedSorceressTest.java, +
[+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++
[+++ b/command/README.md, +++ b/command/README.md, +++ /dev/null, +++ b/command/README.md, +++ /dev/null, +++ /dev/null, +++ b/command/README.md, +++ /dev/null, +++ /dev/null, +++ b/command/src/test/java/com/iluwatar/command/CommandTest.java, + * @param expectedVisibility expected visibility of the goblin, + Visibility expectedVisibility) {, + assertEquals("Goblin's visibility must be same as expectedVisibility", expectedVisibility,, +++ b/command/README.md, +++ /dev/null, +++ /dev/null, +++ b/command/src/test/java/com/iluwatar/command/CommandTest.java, + * @param expectedVisibility expected visibility of the goblin, + Visibility expectedVisibility) {, + assertEquals("Goblin's visibility must be same as expectedVisibility", expectedVisibility,, +++ b/factory-method/README.md, +## Known uses, +++ b/command/README.md, +++ /dev/null, +++ /dev/null, +++ b/command/src/test/java/com/iluwatar/command/CommandTest.java, + * @param expectedVisibility expected visibility of the goblin, + Visibility expectedVisibility) {, +
[+++ b/acyclic-visitor/README.md, +---, +layout: pattern, +title: Acyclic Visitor, +folder: acyclic-visitor, +permalink: /patterns/acyclic-visitor/, +categories: Behavioral, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +![alt text](./etc/acyclic-visitor.png "Acyclic Visitor"), +, +## Intent, +Allow new functions to be added to existing class hierarchies without affecting those hierarchies, and without creating the troublesome dependency cycles that are inherent to the GOF VISITOR Pattern., +, +## Applicability, +This pattern can be used:, +* When you need to add a new function to an existing hierarchy without the need to alter or affect that hierarchy., +* When there are functions that operate upon a hierarchy,
[+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java, +++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java, +++ b/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java, + public void testHpPrinter() throws Exception {]
[+++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java, +import org.junit.jupiter.api.Disabled;, + @Disabled, +++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java, +import org.junit.jupiter.api.Disabled;, + @Disabled, +++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java, +import org.junit.jupiter.api.Disabled;, + @Disabled]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +* [Half-Sync/Half-Async](#half-sync-half-async), +## <a name="half-sync-half-async">Half-Sync/Half-Async</a> [&#8593;](#list-of-design-patterns), +**Intent:** The Half-Sync/Half-Async pattern decouples synchronous I/O from asynchronous I/O in a system to simplify concurrent programming effort without degrading execution efficiency., +![Half-Sync/Half-Async class diagram](./half-sync-half-async/etc/half-sync-half-async.png), +, +**Applicability:** Use Half-Sync/Half-Async pattern when, +* A system possesses following characteristics:, + * System must perform tasks in response to external events that occur asynchronously, like hardware interrupts in OS, + * It is inefficient to dedicate separate thread of control to perform synchronous I/O for each external source of event, + * The higher level tasks in the system can
[+++ b/dao/etc/dao.png, +++ b/dao/etc/dao.png, +++ b/dao/etc/dao.ucls, + <class id="1" language="java" name="com.iluwatar.dao.App" project="dao" , + file="/dao/src/main/java/com/iluwatar/dao/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="910" y="191"/> , + <attributes public="true" package="true" protected="true" private="false" static="true"/> , + <operations public="true" package="true" protected="true" private="false" static="true"/> , + <interface id="2" language="java" name="com.iluwatar.dao.CustomerDao" project="dao" , + file="/dao/src/main/java/com/iluwatar/dao/CustomerDao.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="536" y="187"/> , + <class id="3" language="java" name="com.iluwatar.dao.InMemoryCustomerDao" project="dao" , + file="/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="289" y="455"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="false" static="true"/>
[+++ b/CODE_COVERAGE.md, +> mvn clean verify jacoco:report, +++ b/CODE_COVERAGE.md, +> mvn clean verify jacoco:report, +++ /dev/null, +++ b/CODE_COVERAGE.md, +> mvn clean verify jacoco:report, +++ /dev/null, +++ /dev/null, +++ b/CODE_COVERAGE.md, +> mvn clean verify jacoco:report, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CODE_COVERAGE.md, +> mvn clean verify jacoco:report, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CODE_COVERAGE.md, +> mvn clean verify jacoco:report, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CODE_COVERAGE.md, +> mvn clean verify jacoco:report, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CODE_COVERAGE.md, +> mvn clean verify jacoco:report, +++
[+++ b/servant/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>servant</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>servant</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/servant/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>servant</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>servant</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/async-method-invocation/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/async-method-invocation/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +package com.iluwatar.async.method.invocation;, +, +import org.junit.Test;, +import org.mockito.ArgumentCaptor;, +import org.mockito.Matchers;, +, +import java.util.Optional;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.timeout;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.verifyZeroInteractions;, +import static org.mockito.Mockito.when;, +import static org.mockito.internal.verification.VerificationModeFactory.times;, +, +/**, + * Date: 12/6/15 - 10:49 AM, + *, + * @author
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ModemVisitor.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ /dev/null, +++ /dev/null, +++ b/mediator/src/main/java/com/iluwatar/mediator/PartyImpl.java, + if (!member.equals(actor)) {
[+++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/command/src/main/java/com/iluwatar/command/Size.java, + SMALL("small"), NORMAL("normal");
[+++ b/README.md, +++ b/README.md, +++ b/pom.xml, + <module>visitor</module>, +++ b/README.md, +++ b/pom.xml, + <module>visitor</module>, +++ b/visitor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>visitor</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>visitor</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/README.md, +++ b/pom.xml, + <module>visitor</module>, +++ b/visitor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>visitor</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>visitor</name>,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN]
[+++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, +, +, +/**, + * , + * The MonoState pattern ensures that all instances of the class will have the same state. This can, + * be used a direct replacement of the Singleton pattern., + * , + * <p>, + * In the following example, The {@link LoadBalancer} class represents the app's logic. It contains, + * a series of Servers, which can handle requests of type {@link Request}. Two instances of, + * LoadBalacer are created. When a request is made to a server via the first LoadBalancer the state, + * change
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/decorator/README.md, +* to add responsibilities to individual objects dynamically and transparently, that is, without affecting other objects, +* for responsibilities that can be withdrawn, +* when extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of subclasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +++ b/decorator/README.md, +* to add responsibilities to individual objects dynamically and transparently, that is, without affecting other objects, +* for responsibilities that can be withdrawn, +* when extension by subclassing is impractical. Sometimes a large
[+++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +++ /dev/null, +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +++ /dev/null, +++ /dev/null, +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/module/src/main/java/com/iluwatar/module/App.java, + * The Module pattern can be considered a Creational pattern and a Structural, + * pattern. It manages the creation and organization of other elements, and, + * groups them as the structural pattern does. An object that applies this, + * pattern can provide the equivalent of a namespace, providing the, + * initialization and finalization process of a static class or a class with, + * static members with cleaner, more concise syntax and semantics., + * The below example demonstrates a use case for testing two different modules:, + * File Logger and
[+++ b/balking/README.md, +---, +layout: pattern, +title: Balking, +folder: balking, +permalink: /patterns/balking/, +categories: Concurrency, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +Balking Pattern is used to prevent an object from executing certain code if it is an, +incomplete or inappropriate state, +, +![alt text](./etc/balking.png "Balking"), +, +## Applicability, +Use the Balking pattern when, +, +*you want to invoke an action on an object only when it is in a particular state, +*objects are generally only in a state that is prone to balking temporarily, +but for an unknown amount of time, +++ b/balking/README.md, +---, +layout: pattern,
[+++ b/dao/src/main/java/com/iluwatar/dao/CustomException.java, +/**
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import com.google.inject.Guice;, +import com.google.inject.Injector;, +, + Injector injector = Guice.createInjector(new LotteryModule());, +, + LotteryAdministration administartion = injector.getInstance(LotteryAdministration.class);, + LotteryService service = injector.getInstance(LotteryService.class);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import com.google.inject.Guice;, +import com.google.inject.Injector;, +, + Injector injector = Guice.createInjector(new LotteryModule());, +, + LotteryAdministration administartion = injector.getInstance(LotteryAdministration.class);, + LotteryService service = injector.getInstance(LotteryService.class);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/LotteryModule.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without
[+++ b/servant/src/main/java/com/iluwatar/servant/App.java, + , + /**, + * Program entry point, + * @param args, + */, +++ b/servant/src/main/java/com/iluwatar/servant/App.java, + , + /**, + * Program entry point, + * @param args, + */, +++ b/servant/src/main/java/com/iluwatar/servant/King.java, +/**, + * , + * King, + *, + */, + , +++ b/servant/src/main/java/com/iluwatar/servant/App.java, + , + /**, + * Program entry point, + * @param args, + */, +++ b/servant/src/main/java/com/iluwatar/servant/King.java, +/**, + * , + * King, + *, + */, + , +++ b/servant/src/main/java/com/iluwatar/servant/Queen.java, +/**, + * , + * Queen, + *, + */, + , +++ b/servant/src/main/java/com/iluwatar/servant/App.java, +
[+++ b/README.md, +* Control access to another object, +* Lazy initialization, +* When network hits are expensive and time consuming, +* When we want some objects to perform a common action and don't want to define this action as a method in every class., +* You want to avoid explicit null checks and keep the algorithm elegant and easy to read., +* Event Aggregator is a good choice when you have lots of objects that are potential event sources. Rather than have the observer deal with registering with them all, you can centralize the registration logic to the Event
[+++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns), +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +# Introduction {#intro}, +# How to contribute {#contribute}, +# Credits {#credits}, +# License {#license}, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns), +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +# Introduction {#intro}, +# How to contribute {#contribute}, +# Credits {#credits}, +# License {#license}, +++ b/faq.md, +---, +layout: page, +title: FAQ, +permalink: /faq/, +icon: fa-question, +page-index: 2, +---, +, +### Q1: What is the difference between State and Strategy patterns? {#Q1}, +, +While the implementation is similar they solve different problems. The State, +pattern deals with what state an object is in - it encapsulates
[+++ b/abstract-document/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ /dev/null, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + FileWriter writer = new FileWriter(filename);, + try {, + } finally {, + writer.close();, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ /dev/null, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + FileWriter writer = new FileWriter(filename);, + try {, + } finally {, + writer.close();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, +import com.iluwatar.hexagonal.domain.LotteryNumbers;, + LotteryAdministration administartion = injector.getInstance(LotteryAdministration.class);, + administartion.getAllSubmittedTickets().forEach((k, v) -> LOGGER.info("Key: {}, Value: {}", k, v));, + LotteryNumbers numbers = administartion.performLottery();, + LOGGER.info("The winning numbers: {}", numbers.getNumbersAsString());, + LOGGER.info("Time to reset the database for next round, eh?");, +
[+++ b/null-object/etc/test.png, +++ b/null-object/etc/test.png, +++ b/null-object/etc/test.ucls, +<?xml version="1.0" encoding="UTF-8"?>
[+++ b/pom.xml, + <module>service-locator</module>, +++ b/pom.xml, + <module>service-locator</module>, +++ b/service-locator/etc/model.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.7" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <interface id="1" language="java" name="com.iluwater.Service" project="service-locator" , + file="/service-locator/src/main/java/com/iluwater/Service.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="110" y="182"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </interface> , + <class id="2" language="java" name="com.iluwater.ServiceImpl" project="service-locator" , + file="/service-locator/src/main/java/com/iluwater/ServiceImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="342" y="374"/> ,
[+++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasParts {, + + PROPERTY : String {static}, + + getParts() : Stream<Part>, + }, + interface HasPrice {, + + PROPERTY : String {static}, + + getPrice() : Optional<Number>, + }, + interface HasType {, + + PROPERTY : String {static}, + + getType() : Optional<String>, + }, + class Part {, + + Part(properties : Map<String, Object>), + }, + class App {, + - LOGGER : Logger {static}, + + App(), + + main(args : String[])
[+++ b/state/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/state/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/state/src/test/java/com/iluwatar/state/AppTest.java, +import org.junit.Ignore;, + @Ignore, +++ b/state/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/state/src/test/java/com/iluwatar/state/AppTest.java, +import org.junit.Ignore;, + @Ignore, +++ b/state/src/test/java/com/iluwatar/state/MammothTest.java, +package com.iluwatar.state;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.Mockito;, +, +import java.io.PrintStream;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Mockito.mock;, +, +/**, + * Date: 12/29/15 - 8:27 PM, + *, + * @author Jeroen Meulemeester, + */, +public class MammothTest {, +,
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +/**, + * , + * Application test, + *, + */, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +/**, + * , + * Application test, + *, + */, +++ b/adapter/src/test/java/com/iluwatar/adapter/AppTest.java, +/**, + * , + * Application test, + *, + */, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +/**, + * , + * Application test, + *, + */, +++ b/adapter/src/test/java/com/iluwatar/adapter/AppTest.java, +/**, + * , + * Application test, + *, + */, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/AppTest.java, +/**, + * , + * Application test, + *, + */, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +/**, + * , + * Application test, + *, + */, +++
[+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java, + public void start() {, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java, + public void start() {, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java, + getJavaChannel().socket().bind(, + getJavaChannel().configureBlocking(false);]
[+++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/pom.xml, + <module>value-object</module>, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/pom.xml, + <module>value-object</module>, +++ b/value-object/etc/value-object.png, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/pom.xml, + <module>value-object</module>, +++ b/value-object/etc/value-object.png, +++ b/value-object/etc/value-object.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="true" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.value.object.HeroStat" project="value-object" , + file="/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="520" y="337"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true"
[+++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=, + , +- export DISPLAY=:99.0, +- sh -e /etc/init.d/xvfb start, +- bash update-ghpages.sh, +++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=, + , +- export DISPLAY=:99.0, +- sh -e /etc/init.d/xvfb start, +- bash update-ghpages.sh, +++ b/README.md, +# Getting started, +, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/). , +, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +, + -
[+++ b/README.md, +* the must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +##Servant, +**Intent:** Servant is used for providing some behavior to a group of classes. Instead of defining that behavior in each class - or when we cannot factor out this behavior in the common parent class - it is defined once in the Servant., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant.jpg "Servant"), +, +**Applicability:** Use the Servant pattern when, +* When we want some objects to perform a common action and don't want to define this action as a
[+++ b/factory-method/src/main/java/com/iluwatar/factory/method/App.java, + * In Factory Method we have an interface ({@link Blacksmith}) with a method for, + * creating objects ({@link Blacksmith#manufactureWeapon}). The concrete subclasses , + * ({@link OrcBlacksmith}, {@link ElfBlacksmith}) then override the method to produce , + * objects of their liking., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/factory-method/src/main/java/com/iluwatar/factory/method/App.java, + * In Factory Method we have an interface ({@link Blacksmith}) with a method for, + * creating objects ({@link Blacksmith#manufactureWeapon}). The concrete subclasses , + * ({@link OrcBlacksmith}, {@link ElfBlacksmith}) then override the method
[+++ b/double-checked-locking/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>double-checked-locking</artifactId>, +</project>, +++ b/double-checked-locking/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>double-checked-locking</artifactId>, +</project>, +++ b/double-checked-locking/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +, +/**, + * , + * In Inventory we store the items with a given size. However,, + * we do not store more items than the inventory size. To address, + * concurrent access problems we use double checked locking to add, + *
[+++ b/page-object/pom.xml, + <packaging>pom</packaging>, + <modules>, + <module>sample-application</module>, + <module>test-automation</module>, + </modules>, +++ b/page-object/pom.xml, + <packaging>pom</packaging>, + <modules>, + <module>sample-application</module>, + <module>test-automation</module>, + </modules>, +++ b/page-object/sample-application/etc/page-object.png, +++ b/page-object/pom.xml, + <packaging>pom</packaging>, + <modules>, + <module>sample-application</module>, + <module>test-automation</module>, + </modules>, +++ b/page-object/sample-application/etc/page-object.png, +++ b/page-object/sample-application/etc/page-object.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true"> , + <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </classifier-display> , + <association-display labels="true" multiplicity="true"/>, +</class-diagram>, +++ b/page-object/pom.xml, + <packaging>pom</packaging>, +
[+++ b/abstract-factory/pom.xml, + <version>1.11.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0</version>, +++ b/adapter/pom.xml, + <version>1.11.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0</version>, +++ b/adapter/pom.xml, + <version>1.11.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0</version>, +++ b/adapter/pom.xml, + <version>1.11.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0</version>, +++ b/bridge/pom.xml, + <version>1.11.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0</version>, +++ b/adapter/pom.xml, + <version>1.11.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0</version>, +++ b/bridge/pom.xml, + <version>1.11.0</version>, +++ b/builder/pom.xml, + <version>1.11.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0</version>, +++ b/adapter/pom.xml, + <version>1.11.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0</version>, +++ b/bridge/pom.xml, + <version>1.11.0</version>, +++ b/builder/pom.xml, + <version>1.11.0</version>, +++ b/business-delegate/pom.xml, + <version>1.11.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0</version>, +++ b/adapter/pom.xml, + <version>1.11.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0</version>, +++ b/bridge/pom.xml, +
[+++ b/chain/src/main/java/com/iluwatar/chain/OrcCommander.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/OrcCommander.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/OrcCommander.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/OrcCommander.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java, + req.markHandled();, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, +import java.util.Objects;, +, + /**, + * The type of this request, used by each item in the chain to see if they should or can handle, + * this particular request, + */, + private final RequestType requestType;, + /**, + * A description of the request, + */, + private final String requestDescription;, +, + /**, + * Indicates
[+++ b/pom.xml, + <module>reactor</module>]
[+++ b/mutex/README.md, +---, +layout: pattern, +title: Mutex, +folder: mutex, +permalink: /patterns/mutex/, +categories: Lock, +tags: , + - Java, + - Difficulty-Beginner, +---, +, +## Also known as, +Mutual Exclusion Lock, +Binary Semaphore, +, +## Intent, +Create a lock which only allows a single thread to access a resource at any one instant., +, +![alt text](./etc/mutex.png "Mutex"), +, +## Applicability, +Use a Mutex when, +, +* you need to prevent two threads accessing a critical section at the same time, +* concurrent access to a resource could lead to a race condition , +, +## Credits, +, +* [Lock (computer
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <module>object-mother</module>]
[+++ b/double-dispatch/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>double-dispatch</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/double-dispatch/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>double-dispatch</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/double-dispatch/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {, + , + public static void main( String[] args ) {, +
[+++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, +
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + Scanner scanner = new Scanner(System.in);, + if (cmd.equals("1")) {, + } else if (cmd.equals("2")) {, + } else if (cmd.equals("3")) {, + } else if (cmd.equals("4")) {, + String cmd = scanner.next();, + return cmd;, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + Scanner scanner = new Scanner(System.in);, + if (cmd.equals("1")) {, + } else if (cmd.equals("2")) {, + } else if (cmd.equals("3")) {, + } else if (cmd.equals("4")) {, + String cmd = scanner.next();, + return cmd;, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java, + if (result == false) {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + Scanner scanner = new Scanner(System.in);, + if (cmd.equals("1")) {, + } else
[+++ b/strategy/src/main/java/com/iluwatar/strategy/MeleeStrategy.java, + System.out.println("With your Excalibur you sever the dragon's head!");
[+++ b/pom.xml, + <param>singleton</param>]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java, +import com.google.common.base.Joiner;, +, + return Joiner.on(',').join(numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java, +import com.google.common.base.Joiner;, +, + return Joiner.on(',').join(numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java, +import java.util.concurrent.atomic.AtomicInteger;, +, + private static AtomicInteger numAllocated = new AtomicInteger(0);, + this.id = numAllocated.incrementAndGet();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java, +import com.google.common.base.Joiner;, +, + return Joiner.on(',').join(numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java, +import java.util.concurrent.atomic.AtomicInteger;, +, + private static AtomicInteger numAllocated = new AtomicInteger(0);, + this.id = numAllocated.incrementAndGet();, +++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/AppTest.java, +class AppTest {, + void testApp() {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java, +import com.google.common.base.Joiner;, +, + return Joiner.on(',').join(numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java, +import java.util.concurrent.atomic.AtomicInteger;, +, + private static AtomicInteger numAllocated = new AtomicInteger(0);, +
[+++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java, + System.out.println("Perform some important activity and after call the callback method.");]
[+++ b/factory-method/src/main/java/com/iluwatar/factory/method/App.java, + * @param blacksmith a non-null implementation of blacksmith]
[+++ b/state/src/main/java/com/iluwatar/state/App.java, + * In State pattern the container object has an internal state object that, + * This can be a cleaner way for an object to change its behavior at runtime , + * without resorting to large monolithic conditional statements and thus improves , + * maintainability., + * <p>]
[+++ b/dependency-injection/pom.xml, +++ b/dependency-injection/pom.xml, +++ b/pom.xml, +-->, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <guice.version>4.0</guice.version>, + <dependency>, + <groupId>com.google.inject</groupId>, + <artifactId>guice</artifactId>, + <version>${guice.version}</version>, + </dependency>]
[+++ b/abstract-factory/README.md, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java, +++ /dev/null, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java, +++ /dev/null, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *, + *, + *, + * ,
[+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java, + void start();, + void stop();, + void status();]
[+++ b/intercepting-filter/etc/Intercepting-filter.png, +++ b/intercepting-filter/etc/Intercepting-filter.png, +++ b/intercepting-filter/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + <packaging>pom</packaging>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, + <modules>, + <module>abstract-factory</module>, + <module>builder</module>, + <module>factory-method</module>, + <module>prototype</module>, + <module>singleton</module>, + <module>adapter</module>, + <module>bridge</module>, + <module>composite</module>, + <module>decorator</module>, + <module>facade</module>, + <module>flyweight</module>, + <module>proxy</module>, + <module>chain</module>, + <module>command</module>, + <module>interpreter</module>, + <module>iterator</module>, + <module>mediator</module>, + <module>memento</module>, + <module>model-view-presenter</module>, + <module>observer</module>, + <module>state</module>, + <module>strategy</module>, + <module>template-method</module>, + <module>visitor</module>, + <module>double-checked-locking</module>, + <module>servant</module>, + <module>service-locator</module>, + <module>null-object</module>, + <module>event-aggregator</module>, + <module>callback</module>, + <module>execute-around</module>, + <module>property</module>, +
[+++ b/pom.xml, + <module>template-method</module>, +++ b/pom.xml, + <module>template-method</module>, +++ b/template-method/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>template-method</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>template-method</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>template-method</module>, +++ b/template-method/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>template-method</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>template-method</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>,
[+++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/chain/etc/chain.png, +++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/chain/etc/chain.png, +++ b/chain/etc/chain.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.chain.Request" project="chain" , + file="/chain/src/main/java/com/iluwatar/chain/Request.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="196" width="228" x="168" y="182"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class
[+++ b/pom.xml, + <module>retry</module>]
[+++ b/abstract-factory/README.md, +* the lifetime of the dependency is conceptually shorter than the lifetime of the consumer., +* you need a run-time value to construct a particular dependency, +* you want to decide which product to call from a family at runtime., +* you need to supply one or more parameters only known at run-time before you can resolve a dependency., +, +## Use Cases: , +, +* Selecting to call the appropriate implementation of FileSystemAcmeService or DatabaseAcmeService or NetworkAcmeService at runtime., +* Unit test case writing becomes much easier, +, +## Consequences:, +, +* Dependency injection in java
[+++ b/README.md, +Behavioral patterns are concerned with algorithms and the assignment of responsibilities between objects., +* when extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of subclasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +**Applicability:** The service locator pattern is applicable whenever we want to locate/fetch various services using JNDI which, typically, is a redundant and expensive lookup. The service Locator pattern addresses this expensive lookup by making use of caching techniques ie. for the very first time a
[+++ b/mediator/src/main/java/com/iluwatar/mediator/App.java, + * Mediator encapsulates how a set of objects ({@link PartyMember}) interact. Instead of, + * referring to each other directly they use a mediator ({@link Party}) interface., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/mediator/src/main/java/com/iluwatar/mediator/App.java, + * Mediator encapsulates how a set of objects ({@link PartyMember}) interact. Instead of, + * referring to each other directly they use a mediator ({@link Party}) interface., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/mediator/src/main/java/com/iluwatar/mediator/PartyMember.java, + * Interface for party
[+++ b/flux/src/main/java/com/iluwatar/flux/app/App.java, + * <p>, + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, + , +++ b/flux/src/main/java/com/iluwatar/flux/app/App.java, + * <p>, + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, + , +++ b/flux/src/test/java/com/iluwatar/flux/app/AppTest.java, +/**, + * , + * Application test, + *, + */]
[+++ b/event-queue/etc/model.png, +++ b/event-queue/etc/model.png, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/App.java, + public static void main(String[] args) throws UnsupportedAudioFileException, IOException, InterruptedException {, + Audio audio = Audio.getInstance();, + audio.playSound(audio.getAudioStream("./etc/Bass-Drum-1.wav"), -10.0f);, + audio.playSound(audio.getAudioStream("./etc/Closed-Hi-Hat-1.wav"), -8.0f);, + try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {, + }, + audio.stopService();, +++ b/event-queue/etc/model.png, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/App.java, + public static void main(String[] args) throws UnsupportedAudioFileException, IOException, InterruptedException {, + Audio audio = Audio.getInstance();, + audio.playSound(audio.getAudioStream("./etc/Bass-Drum-1.wav"), -10.0f);, + audio.playSound(audio.getAudioStream("./etc/Closed-Hi-Hat-1.wav"), -8.0f);, + try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {, + }, + audio.stopService();, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + private static final Logger LOGGER = LoggerFactory.getLogger(Audio.class);, + private static final
[+++ b/partial-response/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.17.0-SNAPSHOT</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>partial-response</artifactId>, +, +, +</project>, +++ b/partial-response/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.17.0-SNAPSHOT</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>partial-response</artifactId>, +, +, +</project>, +++ b/pom.xml, + <module>partial-response</module>]
[+++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, + * <p>This example of the pattern implements a Synchronous Data-Bus, meaning that, + * when data is published to the Data-Bus, the publish method will not return until, + * all members have received the data and returned.</p>, + * <p>The {@link DataBus} class is a Singleton.</p>, + * <p>Members of the Data-Bus must implement the {@link Member} interface.</p>, + * <p>Data to be published via the Data-Bus must implement the {@link DataType} interface.</p>, + * <p>The {@code data} package contains example {@link DataType} implementations.</p>, + * <p>The {@code members} package contains example {@link Member} implementations.</p>,
[+++ b/checkstyle.xml, +<?xml version="1.0"?>, +<!DOCTYPE module PUBLIC, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN", + "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +, +<!--, +, + Source = https://github.com/checkstyle/checkstyle/tree/master/src/main/resources, +, + Checkstyle configurartion that checks the Google coding conventions from:, + , + - Google Java Style, + https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html, + , + Checkstyle is very configurable. Be sure to read the documentation at, + http://checkstyle.sf.net (or in your downloaded distribution)., +, + Most Checks are configurable, be sure to consult the documentation., +, + To completely disable a check, just comment it out or delete it from the file., +, + Authors: Max Vetrenko, Ruslan Diachenko,
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java, +import com.iluwatar.hexagonal.domain.LotteryTicketId;, + private Map<LotteryTicketId, LotteryTicket> tickets = new HashMap<>();, + public Optional<LotteryTicket> findById(LotteryTicketId id) {, + LotteryTicket ticket = tickets.get(id);, + public Optional<LotteryTicketId> save(LotteryTicket ticket) {, + LotteryTicketId id = new LotteryTicketId();, + tickets.put(id, ticket);, + return Optional.of(id);, + public Map<LotteryTicketId, LotteryTicket> findAll() {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java, +import com.iluwatar.hexagonal.domain.LotteryTicketId;, + private Map<LotteryTicketId, LotteryTicket> tickets = new HashMap<>();, + public Optional<LotteryTicket> findById(LotteryTicketId id) {, + LotteryTicket ticket = tickets.get(id);, + public Optional<LotteryTicketId> save(LotteryTicket ticket) {, + LotteryTicketId id = new LotteryTicketId();, + tickets.put(id, ticket);, + return Optional.of(id);, + public Map<LotteryTicketId, LotteryTicket> findAll() {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + LotteryNumbers performLottery();,
[+++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/abstract-document/pom.xml, + <version>1.20.0</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.20.0</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.20.0</version>, +++ b/adapter/pom.xml, + <version>1.20.0</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.20.0</version>, +++ b/adapter/pom.xml, + <version>1.20.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.20.0</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.20.0</version>, +++ b/adapter/pom.xml, + <version>1.20.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.20.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.20.0</version>, +++ b/abstract-document/pom.xml, + <version>1.20.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.20.0</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.20.0</version>, +++ b/adapter/pom.xml, +
[+++ b/master-worker-pattern/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for
[+++ b/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of
[+++ b/pom.xml, + <module>tolerant-reader</module>, +++ b/pom.xml, + <module>tolerant-reader</module>, +++ b/tolerant-reader/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>tolerant-reader</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>tolerant-reader</module>, +++ b/tolerant-reader/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>tolerant-reader</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/tolerant-reader/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App ,
[+++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInformationClientImpl.java, +import org.springframework.stereotype.Component;, +@Component, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInformationClientImpl.java, +import org.springframework.stereotype.Component;, +@Component, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java, +import org.springframework.stereotype.Component;, +@Component]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.info("Constructing parts and car");, + LOGGER.info("Here is our car:");, + LOGGER.info("-> model: {}", car.getModel().get());, + LOGGER.info("-> price: {}", car.getPrice().get());, + LOGGER.info("-> parts: ");, + car.getParts().forEach(p -> LOGGER.info("\t{}/{}/{}", p.getType().get(), p.getModel().get(), p.getPrice().get()));, +++ b/.travis.yml, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.info("Constructing parts and car");, + LOGGER.info("Here is our car:");, + LOGGER.info("-> model: {}", car.getModel().get());, + LOGGER.info("-> price: {}", car.getPrice().get());, + LOGGER.info("-> parts: ");, + car.getParts().forEach(p -> LOGGER.info("\t{}/{}/{}", p.getType().get(), p.getModel().get(), p.getPrice().get()));, +++
[+++ b/page-object/etc/page-object.ucls, + <class id="1" language="java" name="java.com.iluwatar.pageobject.pages.LoginPage" project="test-automation", + <class id="2" language="java" name="java.com.iluwatar.pageobject.pages.AlbumPage" project="test-automation", + <class id="3" language="java" name="java.com.iluwatar.pageobject.pages.AlbumListPage" project="test-automation", + <class id="4" language="java" name="java.com.iluwatar.pageobject.pages.Page" project="test-automation", +++ b/page-object/etc/page-object.ucls, + <class id="1" language="java" name="java.com.iluwatar.pageobject.pages.LoginPage" project="test-automation", + <class id="2" language="java" name="java.com.iluwatar.pageobject.pages.AlbumPage" project="test-automation", + <class id="3" language="java" name="java.com.iluwatar.pageobject.pages.AlbumListPage" project="test-automation", + <class id="4" language="java" name="java.com.iluwatar.pageobject.pages.Page" project="test-automation", +++ b/page-object/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>net.sourceforge.htmlunit</groupId>, + <artifactId>htmlunit</artifactId>, + <version>2.22</version>, + </dependency>, + </dependencies>, +++ b/page-object/etc/page-object.ucls, + <class id="1" language="java" name="java.com.iluwatar.pageobject.pages.LoginPage" project="test-automation", + <class id="2" language="java" name="java.com.iluwatar.pageobject.pages.AlbumPage" project="test-automation", + <class id="3" language="java" name="java.com.iluwatar.pageobject.pages.AlbumListPage" project="test-automation", +
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java, +import com.iluwatar.hexagonal.mongo.MongoConnectionProperties;, + public MongoBank(String dbName, String accountsCollectionName) {, + connect(dbName, accountsCollectionName);, + connect(DEFAULT_DB, DEFAULT_ACCOUNTS_COLLECTION);, + public void connect(String dbName, String accountsCollectionName) {, + MongoConnectionProperties properties = new MongoConnectionProperties().load();, + mongoClient = new MongoClient(properties.getHost(), properties.getPort());, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java, +import com.iluwatar.hexagonal.mongo.MongoConnectionProperties;, + public MongoBank(String dbName, String accountsCollectionName) {, + connect(dbName, accountsCollectionName);, + connect(DEFAULT_DB, DEFAULT_ACCOUNTS_COLLECTION);, + public void connect(String dbName, String accountsCollectionName) {, + MongoConnectionProperties properties = new MongoConnectionProperties().load();, + mongoClient = new MongoClient(properties.getHost(), properties.getPort());, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, +import com.iluwatar.hexagonal.mongo.MongoConnectionProperties;, + public MongoTicketRepository(String dbName, String ticketsCollectionName,, + connect(dbName, ticketsCollectionName, countersCollectionName);, + connect(DEFAULT_DB, DEFAULT_TICKETS_COLLECTION, DEFAULT_COUNTERS_COLLECTION);, + public void connect(String dbName, String ticketsCollectionName,,
[+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *, + *, + *, + * The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete, + * implementation but abstraction. It utilizes Dependency Injection pattern allowing its, + * {@link Tobacco} dependency to be injected through its constructor. This way, handling the, + * dependency is no longer the wizard's responsibility. It is resolved outside the wizard class., + * The third example takes the pattern a step further. It uses Guice framework for Dependency, +++ /dev/null, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *, + *, + *,
[+++ b/pom.xml, + <module>specification</module>, +++ b/pom.xml, + <module>specification</module>, +++ b/specification/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>specification</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>specification</module>, +++ b/specification/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>specification</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/specification/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {,
[+++ b/balking/README.md, +---, +layout: pattern, +title: Balking, +folder: balking, +permalink: /patterns/balking/, +categories: Concurrency, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +Balking Pattern is used to prevent an object from executing certain code if it is an, +incomplete or inappropriate state, +, +![alt text](./etc/balking.png "Balking"), +, +## Applicability, +Use the Balking pattern when, +, +*you want to invoke an action on an object only when it is in a particular state, +*objects are generally only in a state that is prone to balking temporarily, +but for an unknown amount of time, +, +## Related patterns, +*
[+++ /dev/null, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, + throw new RuntimeException(e);, + throw new Exception(e.getMessage(), e);, + e.printStackTrace();, + ResultSet resultSet = statement.executeQuery();, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, + throw new RuntimeException(e);, + throw new Exception(e.getMessage(), e);, + e.printStackTrace();, + ResultSet resultSet = statement.executeQuery();, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, + throw new Exception(ex.getMessage(), ex);, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, + private static final String DEFAULT_URL = "https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/promise/README.md";, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, + throw new
[+++ /dev/null, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of
[+++ b/.travis.yml, +sudo: false, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented,
[+++ b/converter/etc/converter.urm.puml, +@startuml, +package com.iluwatar.converter {, + class App {, + + App(), + + main(args : String[]) {static}, + }, + class Converter<T, U> {, + - fromDto : Function<T, U>, + - fromEntity : Function<U, T>, + + Converter<T, U>(fromDto : Function<T, U>, fromEntity : Function<U, T>), + + convertFromDto(userDto : T) : U, + + convertFromEntity(user : U) : T, + + createFromDtos(dtoUsers : Collection<T>) : List<U>, + + createFromEntities(users : Collection<U>) : List<T>, + }, + class User {, + - firstName : String, + - isActive : boolean, + - lastName : String, +
[+++ b/guarded-suspension/pom.xml]
[+++ b/proxy/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/proxy/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/proxy/src/test/java/com/iluwatar/proxy/StdOutTest.java, +package com.iluwatar.proxy;, +, +import org.junit.After;, +import org.junit.Before;, +, +import java.io.PrintStream;, +, +import static org.mockito.Mockito.mock;, +, +/**, + * Date: 12/10/15 - 8:37 PM, + *, + * @author Jeroen Meulemeester, + */, +public abstract class StdOutTest {, +, + /**, + * The mocked standard out {@link PrintStream}, required since some actions don't have any, + * influence on accessible objects, except for writing to std-out using {@link System#out}, + */, + private
[+++ b/dirty-flag/etc/dirty-flag.png, +++ b/dirty-flag/etc/dirty-flag.png, +++ b/dirty-flag/etc/dirty-flag.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.dirtyflag.App" project="dirty-flag" , + file="/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="266" y="188"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.dirtyflag.DataFetcher" project="dirty-flag" , + file="/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="153" width="125" x="66" y="291"/> , + <display autosize="true"
[+++ b/dependency-injection/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/dependency-injection/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/dependency-injection/src/test/java/com/iluwatar/dependency/injection/AdvancedWizardTest.java, +package com.iluwatar.dependency.injection;, +, +import org.junit.Test;, +, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +, +/**, + * Date: 12/10/15 - 8:40 PM, + *, + * @author Jeroen Meulemeester, + */, +public class AdvancedWizardTest extends StdOutTest {, +, + /**, + * Test if the {@link AdvancedWizard} smokes whatever instance of {@link Tobacco} is passed to him, + * through the constructor parameter, + */, + @Test, + public void testSmokeEveryThing()
[+++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <groupId>com.iluwatar.layers</groupId>, + <artifactId>layers</artifactId>, + <dependencies>, + <dependency>, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/module/README.md, +---, +layout: pattern, +title: Module, +folder: module, +permalink: /patterns/module/, +pumlid: JShB3OGm303HLg20nFVjnYGM1CN6ycTfVtFSsnjfzY5jPgUqkLqHwXy0mxUU8wuyqidQ8q4IjJqCO-QBWGOtVh5qyd5AKOmW4mT6Nu2-ZiAekapH_hkcSTNa-GC0, +categories: Persistence Tier, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +A layer of mappers that moves data between objects and a database while keeping them independent of each other and the mapper itself, +, +![alt text](./etc/module.png "Module"), +, +## Applicability, +The module pattern is a design pattern used to implement the concept of software modules, defined by modular programming, in a programming language with incomplete direct support for the concept., +, +The Module pattern can be considered a creational pattern and a
[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/abstract-factory/etc/abstract-factory.png, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/abstract-factory/etc/abstract-factory.png, +++ b/abstract-factory/etc/abstract-factory.ucls, +<?xml version="1.0"
[+++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java, +import static org.junit.jupiter.api.Assertions.assertTrue;, + assertTrue(document.toString().contains(KEY));, + assertTrue(document.toString().contains(VALUE));, +++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java, +import static org.junit.jupiter.api.Assertions.assertTrue;, + assertTrue(document.toString().contains(KEY));, + assertTrue(document.toString().contains(VALUE));, +++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java, +, +import org.junit.jupiter.api.AfterEach;, +import org.junit.jupiter.api.Test;, + private static final TestLogger LOGGER = TestLoggerFactory.getTestLogger(ConfigureForUnixVisitor.class);, + assertThat(LOGGER.getLoggingEvents()).extracting("level", "message").contains(, +++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java, +import static org.junit.jupiter.api.Assertions.assertTrue;, + assertTrue(document.toString().contains(KEY));, + assertTrue(document.toString().contains(VALUE));, +++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java, +, +import org.junit.jupiter.api.AfterEach;, +import org.junit.jupiter.api.Test;, + private static final TestLogger LOGGER = TestLoggerFactory.getTestLogger(ConfigureForUnixVisitor.class);, + assertThat(LOGGER.getLoggingEvents()).extracting("level", "message").contains(, +++ b/aggregator-microservices/inventory-microservice/src/test/java/com/iluwatar/inventory/microservice/InventoryControllerTest.java, + public void testGetProductInventories() {, +++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java, +import static org.junit.jupiter.api.Assertions.assertTrue;, + assertTrue(document.toString().contains(KEY));, + assertTrue(document.toString().contains(VALUE));, +++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java, +, +import org.junit.jupiter.api.AfterEach;, +import org.junit.jupiter.api.Test;, + private static final TestLogger LOGGER = TestLoggerFactory.getTestLogger(ConfigureForUnixVisitor.class);, + assertThat(LOGGER.getLoggingEvents()).extracting("level", "message").contains(, +++ b/aggregator-microservices/inventory-microservice/src/test/java/com/iluwatar/inventory/microservice/InventoryControllerTest.java,
[+++ b/.travis.yml, + secure: iHjLIy+dHku1o8PrjGhz1mMfM971nqmpjo2mzVNYqYrxlB8zoAqwlz9LoFJcUAKbxhHLJT/LgtYYj+uBspUMOITejaiyCDcM8edGwSXKJu+g+Fp0PVGZQXGziGInmUVT9b2lpAV8Nn2sRpAHgHrM9fKaAU3epG5LfVkQxSkGZp0=, + bucket: java-design-patterns.com, + acl: public_read]
[+++ b/dependency-injection/src/test/java/com/iluwatar/dependency/injection/AdvancedSorceressTest.java, +
[+++ b/promise/pom.xml, +++ b/promise/pom.xml, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, + * @throws ExecutionException , + public static void main(String[] args) throws InterruptedException, ExecutionException {, + ExecutorService executor = Executors.newSingleThreadExecutor();, + try {, + promiseUsage(executor);, + } finally {, + executor.shutdownNow();, + }, + }, + private static void promiseUsage(Executor executor), + throws InterruptedException, ExecutionException {, + System.out.println("Consumed transformed int value: " + value);, + consumedPromise.get();, + transformedPromise.get();, +++ b/promise/pom.xml, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, + * @throws ExecutionException , + public static void main(String[] args) throws InterruptedException, ExecutionException {,
[+++ b/README.md, +# Design pattern samples in Java., + - <a href="#list-of-design-patterns">List of Design Patterns</a>, + - <a href="#creational-patterns">Creational Patterns</a>, + - <a href="#structural-patterns">Structural Patterns</a>, + - <a href="#behavioral-patterns">Behavioral Patterns</a>, + - <a href="#concurrency-patterns">Concurrency Patterns</a>, + - <a href="#presentation-tier-patterns">Presentation Tier Patterns</a>, + - <a href="#business-tier-patterns">Business Tier Patterns</a>, + - <a href="#architectural-patterns">Architectural Patterns</a>, + - <a href="#integration-patterns">Integration Patterns</a>, + - <a href="#idioms">Idioms</a>, +## <a name="list-of-design-patterns">List of Design Patterns</a> [&#8593;](#top), +, +### <a name="creational-patterns">Creational Patterns</a> [&#8593;](#top), +, +Creational design patterns abstract the instantiation process. They help make a, +system independent of how its objects are created, composed, and represented., +, +*
[+++ b/poison-pill/src/main/java/com/iluwatar/poison/pill/App.java, + * One of the possible approaches to terminate Producer-Consumer pattern is using the Poison Pill idiom., + * If you use Poison Pill as the termination signal then Producer is responsible to notify Consumer that exchange is over, + * and reject any further messages. Consumer receiving Poison Pill will stop reading messages from the queue., + * You must also ensure that the Poison Pill will be the last message that will be read from the queue (if you have, + * prioritized queue then this can be tricky)., + * <p>, + * ,
[+++ b/facade/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/facade/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/facade/src/test/java/com/iluwatar/facade/DwarvenGoldmineFacadeTest.java, +package com.iluwatar.facade;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.PrintStream;, +, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.internal.verification.VerificationModeFactory.times;, +, +/**, + * Date: 12/9/15 - 9:40 PM, + *, + * @author Jeroen Meulemeester, + */, +public class DwarvenGoldmineFacadeTest {, +, + /**, + * The mocked standard out {@link PrintStream}, required since the actions on the gold mine facade, + * don't have any influence on
[+++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/pom.xml, + <module>monostate</module>]
[+++ b/README.md, +* [Async Method Invocation](#async-method-invocation), +## <a name="async-method-invocation">Async Method Invocation</a> [&#8593;](#list-of-design-patterns), +**Intent:** Asynchronous method invocation is pattern where the calling thread is not blocked while waiting results of tasks. The pattern provides parallel processing of multiple independent tasks and retrieving the results via callbacks or waiting until everything is done. , +, +**Applicability:** Use async method invocation pattern when, +* You have multiple independent tasks that can run in parallel, +* You need to improve performance of running a group of sequential tasks, +* You have limited number of processing capacity or long running tasks and the caller
[+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java, +package com.iluwatar.lazy.loading;, +, +import org.junit.Test;, +, +import static junit.framework.Assert.assertNotNull;, +import static junit.framework.Assert.assertSame;, +import static junit.framework.TestCase.assertNull;, +, +/**, + * Date: 12/19/15 - 11:58 AM, + *, + * @author Jeroen Meulemeester, + */, +public abstract class AbstractHolderTest {, +, + /**, + * Get the internal state of the holder value, + *, + * @return The internal value, + */, + abstract Heavy getInternalHeavyValue() throws Exception;, +, + /**, + * Request a lazy loaded {@link Heavy} object from the holder., + *, + * @return The lazy loaded {@link Heavy} object, + */, + abstract
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java, + public String getName() {, + return name;, + }, +, + public Integer getId() {, + return id;, + }, +, + public String getAddress() {, + return address;, + }, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java, + public String getName() {, + return name;, + }, +, + public Integer getId() {, + return id;, + }, +, + public String getAddress() {, + return address;, + }, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentManagementApp.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2017 Piyush Chaudhari, + *, + * Permission is hereby granted, free of charge, to any
[+++ b/layers/src/main/java/com/iluwatar/layers/App.java, + CakeBakingService service = new CakeBakingServiceImpl();, + service.saveNewLayer(new CakeLayerInfo("foo", 1));, + service.saveNewLayer(new CakeLayerInfo("bar", 2));, + service.getAllLayers().stream().forEach((layer) -> System.out.println(layer));, + service.saveNewTopping(new CakeToppingInfo("hoi", 11));, + service.getAllToppings().stream().forEach((topping) -> System.out.println(topping));, +, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, + CakeBakingService service = new CakeBakingServiceImpl();, + service.saveNewLayer(new CakeLayerInfo("foo", 1));, + service.saveNewLayer(new CakeLayerInfo("bar", 2));, + service.getAllLayers().stream().forEach((layer) -> System.out.println(layer));, + service.saveNewTopping(new CakeToppingInfo("hoi", 11));, + service.getAllToppings().stream().forEach((topping) -> System.out.println(topping));, +, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, + @OneToMany, + private List<CakeLayer> layers;, + , + setLayers(new ArrayList<>());, + }, +, + public Long getId() {, + return id;, + }, +, + public void setId(Long id) {, + this.id = id;, + }, +, +
[+++ b/factory-method/README.md, +## Explanation, +, +Real world example, +> Blacksmith manufactures weapons. Elves require Elvish weapons and orcs require Orcish weapons. Depending on the customer at hand the right type of blacksmith is summoned., +, +In plain words, +> It provides a way to delegate the instantiation logic to child classes., +, +Wikipedia says, +> In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by
[+++ b/event-asynchronous/README.md, +---, +layout: pattern, +title: Event-based Asynchronous, +folder: event-asynchronous, +permalink: /patterns/event-asynchronous/, +categories: Other, +tags:, + - Java, +---, +, +## Intent, +The Event-based Asynchronous Pattern makes available the advantages of multithreaded applications while hiding many, +of the complex issues inherent in multithreaded design. Using a class that supports this pattern can allow you to:-, +(1) Perform time-consuming tasks, such as downloads and database operations, "in the background," without interrupting your application. , +(2) Execute multiple operations simultaneously, receiving notifications when each completes. , +(3) Wait for resources to become available without stopping ("hanging") your application. , +(4) Communicate
[+++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ /dev/null, +++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <coveralls.version>4.0.0</coveralls.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ /dev/null, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ /dev/null, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ /dev/null, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/_scripts/postPumlsToServer.py, +#, +# The MIT License, +# Copyright (c) 2014-2016 Ilkka Seppälä, +#, +# Permission is hereby granted, free of charge, to any person obtaining a copy, +# of this software and associated documentation files (the "Software"), to deal, +# in the Software without
[+++ b/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java, + final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());, + final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());, + final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());, + final NodeImpl level3B = new NodeImpl("level3_b", NullNode.getInstance(), NullNode.getInstance());, + final NodeImpl level2A = new NodeImpl("level2_a", level3A, level3B);, + final NodeImpl level1A = new NodeImpl("level1_a", level2A, level2B);, + TREE_ROOT = new NodeImpl("root", level1A, level1B);, +++ b/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java, + final NodeImpl level1B = new NodeImpl("level1_b", NullNode.getInstance(), NullNode.getInstance());, + final NodeImpl level2B = new NodeImpl("level2_b", NullNode.getInstance(), NullNode.getInstance());, + final NodeImpl level3A = new NodeImpl("level3_a", NullNode.getInstance(), NullNode.getInstance());, + final NodeImpl level3B = new NodeImpl("level3_b",
[+++ b/.travis.yml, +sudo: required, +++ b/.travis.yml, +sudo: required, +++ /dev/null, +++ b/.travis.yml, +sudo: required, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +sudo: required, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +sudo: required, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +sudo: required, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +sudo: required, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +sudo: required, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +sudo: required, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/framework/EventDispatcher.java]
[+++ b/hexagonal/pom.xml, +<?xml version="1.0"?>, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice
[+++ b/converter/src/test/java/com/iluwatar/converter/ConverterTest.java]
[+++ b/double-checked-locking/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/double-checked-locking/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java, +import java.util.Collections;, +, + /**, + * Get all the items in the inventory, + *, + * @return All the items of the inventory, as an unmodifiable list, + */, + public final List<Item> getItems() {, + return Collections.unmodifiableList(items);, + }, +, +++ b/double-checked-locking/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java, +import java.util.Collections;, +, + /**, + * Get all the items in the inventory, + *,
[+++ b/balking/README.md, +++ b/balking/README.md, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, + verify(enchantment).apply();, + verify(enchantment).onActivate();, + verify(enchantment).onDeactivate();]
[+++ b/repository/src/main/java/com/iluwatar/repository/App.java, + repository.deleteAll();, + , +++ b/repository/src/main/java/com/iluwatar/repository/App.java, + repository.deleteAll();, + , +++ b/repository/src/main/resources/applicationContext.xml, + <entry key="hibernate.hbm2ddl.auto" value="create" />, + <entry key="hibernate.show_sql" value="false" />, +++ b/repository/src/main/java/com/iluwatar/repository/App.java, + repository.deleteAll();, + , +++ b/repository/src/main/resources/applicationContext.xml, + <entry key="hibernate.hbm2ddl.auto" value="create" />, + <entry key="hibernate.show_sql" value="false" />, +++ b/strategy/src/main/java/com/iluwatar/strategy/MeleeStrategy.java, + System.out.println("With your Excalibur you severe the dragon's head!");
[+++ b/pom.xml, + <module>reader-writer-lock</module>, +++ b/pom.xml, + <module>reader-writer-lock</module>, +++ b/reader-writer-lock/etc/reader-writer-lock.png, +++ b/pom.xml, + <module>reader-writer-lock</module>, +++ b/reader-writer-lock/etc/reader-writer-lock.png, +++ b/reader-writer-lock/etc/reader-writer-lock.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.reader.writer.lock.ReaderWriterLock.ReaderLock" , + project="reader-writer-lock" , + file="/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/ReaderWriterLock.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="305" y="511"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.reader.writer.lock.ReaderWriterLock" project="reader-writer-lock" ,
[+++ b/factory-kit/pom.xml, +<?xml version="1.0"?>, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice
[+++ b/message-channel/.gitignore]
[+++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java, +import org.junit.Ignore;, + @Ignore // intermittent failures when executed on CI]
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +--- # this is so called 'Yaml Front Matter', read up on it here: http://jekyllrb.com/docs/frontmatter/, +layout: pattern # layout must allways be pattern, +title: Data Bus # the properly formatted title, +folder: data-bus # the folder name in which this pattern lies, +permalink: /patterns/data-bus/ # the permalink to the pattern, to keep this uniform please stick to /patterns/FOLDER/, +, +# both categories and tags are Yaml Lists, +# you can either just pick one or write a list with '-'s, +# usable categories and tags are listed here: https://github.com/iluwatar/java-design-patterns/blob/gh-pages/_config.yml, +categories: Architectural
[+++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that, + * have a common theme without specifying their concrete classes. In normal usage, the client, + * software creates a concrete implementation of the abstract factory and then uses the generic, + * interface of the
[+++ b/CONTRIBUTING.MD, +This is great you have something to contribute! , +, +Before going any further please read the [wiki](https://github.com/iluwatar/java-design-patterns/wiki), +with cenventions and rules we used for this project., +++ b/CONTRIBUTING.MD, +This is great you have something to contribute! , +, +Before going any further please read the [wiki](https://github.com/iluwatar/java-design-patterns/wiki), +with cenventions and rules we used for this project., +++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns)., +++ b/CONTRIBUTING.MD, +This is great you have something
[+++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java, + * Double Checked Locking is a concurrency design pattern used to reduce the overhead of acquiring a, + * lock by first testing the locking criterion (the "lock hint") without actually acquiring the, + * lock. Only if the locking criterion check indicates that locking is required does the actual, + * locking logic proceed., + * In {@link Inventory} we store the items with a given size. However, we do not store more items, + * than the inventory size. To address concurrent access problems we use double checked locking to, + * add item
[+++ b/.gitignore, +*.log, +++ b/.gitignore, +*.log, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.info("Constructing parts and car");, + LOGGER.info("Here is our car:");, + LOGGER.info("-> model: {}", car.getModel().get());, + LOGGER.info("-> price: {}", car.getPrice().get());, + LOGGER.info("-> parts: ");, + car.getParts().forEach(p -> LOGGER.info("\t{}/{}/{}", p.getType().get(), p.getModel().get(), p.getPrice().get()));, +++ b/.gitignore, +*.log, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.info("Constructing parts and car");, + LOGGER.info("Here is our car:");, + LOGGER.info("-> model: {}", car.getModel().get());, + LOGGER.info("-> price: {}", car.getPrice().get());, + LOGGER.info("-> parts: ");, + car.getParts().forEach(p -> LOGGER.info("\t{}/{}/{}", p.getType().get(),
[+++ b/layers/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/layers/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, + List<CakeTopping> allToppings = getAvailableToppingEntities();, + List<CakeTopping> matchingToppings =, + allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name)), + CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());, +++ b/layers/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, + List<CakeTopping> allToppings = getAvailableToppingEntities();, + List<CakeTopping> matchingToppings =, + allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name)), + CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());, +++ b/layers/src/main/java/com/iluwatar/layers/CakeInfo.java, + return String.format("CakeInfo id=%d topping=%s layers=%s totalCalories=%d", id.orElse(-1L),, +++ b/layers/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++
[+++ b/decorator/etc/decorator.ucls, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <position height="-1" width="-1" x="554" y="188"/> , + <class id="2" language="java" name="com.iluwatar.decorator.App" project="decorator" , + file="/decorator/src/main/java/com/iluwatar/decorator/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="117" y="202"/> , + <position height="-1" width="-1" x="315" y="100"/> , + <class id="4" language="java" name="com.iluwatar.decorator.SmartHostile" project="decorator" , + file="/decorator/src/main/java/com/iluwatar/decorator/SmartHostile.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="318" y="315"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> ,
[+++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/AdvancedSorceress.java]
[+++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java, +package com.iluwatar.multiton;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertSame;, +, +/**, + * Date: 12/22/15 - 22:28 AM, + *, + * @author Jeroen Meulemeester, + */, +public class NazgulTest {, +, + /**, + * Verify if {@link Nazgul#getInstance(NazgulName)} returns the correct Nazgul multiton instance, + */, + @Test, + public void testGetInstance() {, + for (final NazgulName name : NazgulName.values()) {, + final Nazgul nazgul = Nazgul.getInstance(name);, + assertNotNull(nazgul);, + assertSame(nazgul, Nazgul.getInstance(name));, + assertEquals(name, nazgul.getName());, + }, + }, +, +}, +++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java, +package com.iluwatar.multiton;, +, +import org.junit.Test;, +,
[+++ /dev/null]
[+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, + private final Prototype testedPrototype;, + public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, + private final Prototype testedPrototype;, + public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, + long count = CallsCount.getCount(tenantName);, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, + private final Prototype testedPrototype;, + public PrototypeTest(final Prototype testedPrototype,
[+++ b/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java, +import java.time.LocalDateTime;, + private LocalDateTime started;, +, + private LocalDateTime stopped;, +, + started = data.getWhen();, + LOGGER.info(String.format("Receiver #%d sees application started at %s", id, started));, + stopped = data.getWhen();, + LOGGER.info(String.format("Receiver #%d sees application stopping at %s", id, stopped));, +, + public LocalDateTime getStarted() {, + return started;, + }, +, + public LocalDateTime getStopped() {, + return stopped;, + }]
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java, +import java.math.BigInteger;, +import java.util.List;, +, +import com.iluwatar.cqrs.commandes.CommandServiceImpl;, +import com.iluwatar.cqrs.commandes.ICommandService;, +import com.iluwatar.cqrs.dto.Author;, +import com.iluwatar.cqrs.dto.Book;, +import com.iluwatar.cqrs.queries.IQueryService;, +import com.iluwatar.cqrs.queries.QueryServiceImpl;, +import com.iluwatar.cqrs.util.HibernateUtil;, +, +/**, + * This is the entry of the application, + *, + */, + /**, + * Program entry point, + * , + * @param args, + * command line args, + */, + ICommandService commands = new CommandServiceImpl();, + // Create Authors and Books using CommandService, + commands.authorCreated("eEvans", "Eric Evans", "eEvans@email.com");, + commands.authorCreated("jBloch", "Joshua Bloch", "jBloch@email.com");, + commands.authorCreated("mFowler", "Martin Fowler", "mFowler@email.com");, +, + commands.bookAddedToAuthor("Domain-Driven Design", 60.08, "eEvans");, + commands.bookAddedToAuthor("Effective Java", 40.54, "jBloch");, + commands.bookAddedToAuthor("Java
[+++ b/pom.xml, + <consoleOutput>false</consoleOutput>]
[+++ b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java, +package com.iluwatar.callback;, +, +/**, + *, + * This example generates the exact same output as {@link App} however the callback has been, + * defined as a Lambdas expression., + *, + */, +public class LambdasApp {, +, + /**, + * Program entry point, + */, + public static void main(String[] args) {, + Task task = new SimpleTask();, + Callback c = () -> System.out.println("I'm done now.");, + task.executeWith(c);, + }, +}, +++ b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java, +package com.iluwatar.callback;, +, +/**, + *, + * This example generates the exact same output as {@link App} however the
[+++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.isEmpty()) {]
[+++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +* A Loan Application has been accepted/rejected (Commercial Business)., +* [Event-driven architecture definition](http://searchsoa.techtarget.com/definition/event-driven-architecture), +*, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +* A Loan Application has been accepted/rejected (Commercial Business)., +* [Event-driven architecture definition](http://searchsoa.techtarget.com/definition/event-driven-architecture), +*, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/App.java, +package com.iluwatar.eda;, +, +import com.iluwatar.eda.event.Event;, +import com.iluwatar.eda.event.UserCreatedEvent;, +import com.iluwatar.eda.event.UserUpdatedEvent;, +import com.iluwatar.eda.handler.UserCreatedEventHandler;, +import com.iluwatar.eda.handler.UserUpdatedEventHandler;, +, +/**, + * An event-driven architecture (EDA) is a framework that orchestrates behavior around the production,, + * detection and consumption of events as well as the responses they evoke., + * An event is any identifiable occurrence that has significance for system hardware or
[+++ b/README.md, +++ b/README.md, +++ b/abstract-factory/index.md, +## Also known as, +Kit, +## Intent, +Provide an interface for creating families of related or dependent, +## Applicability, +Use the Abstract Factory pattern when, +## Real world examples, +## Credits, +++ b/README.md, +++ b/abstract-factory/index.md, +## Also known as, +Kit, +## Intent, +Provide an interface for creating families of related or dependent, +## Applicability, +Use the Abstract Factory pattern when, +## Real world examples, +## Credits, +++ b/adapter/index.md, +## Also known as, +Wrapper, +## Intent, +Convert the interface of a class into another interface the clients, +## Applicability, +Use the Adapter pattern when,
[+++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +package com.iluwatar.interpreter;, +, +import org.junit.Test;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.function.BiFunction;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Date: 12/14/15 - 11:48 AM, + *, + * @author Jeroen Meulemeester, + */, +public abstract class ExpressionTest<E extends Expression> {, +, + /**, + * Generate inputs ranging from -10 to 10 for both input params and calculate the expected result, + *, + * @param resultCalc The function used to calculate the expected result, + * @return A data set with test entries, + */, + static List<Object[]> prepareParameters(final BiFunction<Integer, Integer, Integer>
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that, + * have a common theme without specifying their concrete classes. In normal usage, the client, + * software creates a concrete implementation of the abstract factory and then uses the generic, + * interface of the
[+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +, + String getWelcomeMessage(User user);, +, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +, + String getWelcomeMessage(User user);, +, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java, + return "You're amazing " + user.getName() + ". Thanks for paying for this awesome software.";, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +, + String getWelcomeMessage(User user);, +, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java, + return "You're amazing " + user.getName() + ". Thanks for paying for this awesome software.";, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java, +, + private String name;, +, + public User(String name) {, + this.name = name;, + }, +, + public String getName() {, + return name;, + }, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +, + String getWelcomeMessage(User user);, +, +++
[+++ b/abstract-factory/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/business-delegate/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.11.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, +
[+++ b/pom.xml, + <version>1.15.0-SNAPSHOT</version>, + <module>tls</module>, +, + Contact GitHub API Training Shop Blog About , +, + © 2017 GitHub, Inc. Terms Privacy Security Status Help , +]
[+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java]
[+++ b/.travis.yml, +
[+++ b/README.md, +* [Lazy Loading](#lazy-loading), +## <a name="lazy-loading">Lazy Loading</a> [&#8593;](#list-of-design-patterns), +**Intent:** Lazy loading is a design pattern commonly used to defer initialization of an object until the point at which it is needed. It can contribute to efficiency in the program's operation if properly and appropriately used., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/lazy-loading/etc/lazy-loading.png "Lazy Loading"), +, +**Applicability:** Use the Lazy Loading idiom when, +* eager loading is expensive or the object to be loaded might not be need at all, +, +**Real world examples:**, +* JPA annotations @OneToOne, @OneToMany, @ManyToOne, @ManyToMany and fetch = FetchType.LAZY, +, +, +, +++ b/README.md, +* [Lazy
[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when,
[+++ b/decorator/index.md, +![alt text](./etc/decorator_1.png "Decorator"), +++ b/decorator/index.md, +![alt text](./etc/decorator_1.png "Decorator"), +++ b/pom.xml, + <module>reader-writer-lock</module>, +++ b/decorator/index.md, +![alt text](./etc/decorator_1.png "Decorator"), +++ b/pom.xml, + <module>reader-writer-lock</module>, +++ b/reader-writer-lock/etc/reader-writer-lock.png, +++ b/decorator/index.md, +![alt text](./etc/decorator_1.png "Decorator"), +++ b/pom.xml, + <module>reader-writer-lock</module>, +++ b/reader-writer-lock/etc/reader-writer-lock.png, +++ b/reader-writer-lock/etc/reader-writer-lock.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.reader.writer.lock.Writer" project="reader-writer-lock" , + file="/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Writer.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="487" y="105"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true"
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();, +++ b/dao/pom.xml, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + , + <properties>, + , + </properties>, + , + <dependency>, + <groupId>log4j</groupId>, + <artifactId>log4j</artifactId>, + </dependency>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();, +++ b/dao/pom.xml, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + , + <properties>, + , + </properties>, + , + <dependency>, + <groupId>log4j</groupId>, + <artifactId>log4j</artifactId>, + </dependency>, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, +import org.apache.log4j.Logger;, +, + private static Logger LOGGER = Logger.getLogger(App.class);, +, + * Program entry point.,
[+++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.ucls, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.adapter.FishingBoat" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="656" y="355"/> , + <class id="2" language="java" name="com.iluwatar.adapter.Captain" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/Captain.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="228" y="185"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="3" language="java" name="com.iluwatar.adapter.BattleFishingBoat" project="adapter" ,
[+++ b/abstract-document/pom.xml, + <version>1.19.0</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0</version>, +++ b/adapter/pom.xml, + <version>1.19.0</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0</version>, +++ b/adapter/pom.xml, + <version>1.19.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.19.0</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0</version>, +++ b/adapter/pom.xml, + <version>1.19.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.19.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.19.0</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0</version>, +++ b/adapter/pom.xml, + <version>1.19.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.19.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.19.0</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.19.0</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0</version>, +++ b/adapter/pom.xml, + <version>1.19.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + , +, + /**, + * Program entry point, + * , + * @param args command line args, + */, + public static void main(String[] args) {, + , + App app = new App();, + , + System.out.println("Elf Kingdom");, + KingdomFactory elfKingdomFactory;, + elfKingdomFactory = app.getElfKingdomFactory();, + app.createKingdom(elfKingdomFactory);, + System.out.println(app.getArmy().getDescription());, + System.out.println(app.getCastle().getDescription());, + System.out.println(app.getKing().getDescription());, + , + System.out.println("\nOrc Kingdom");, + KingdomFactory orcKingdomFactory;, + orcKingdomFactory = app.getOrcKingdomFactory();, + app.createKingdom(orcKingdomFactory);, + System.out.println(app.getArmy().getDescription());, + System.out.println(app.getCastle().getDescription());, + System.out.println(app.getKing().getDescription());, + , + }, + , +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + , +, + /**, + * Program entry point,
[+++ b/hexagonal/pom.xml, + <dependency>, + <groupId>com.google.inject</groupId>, + <artifactId>guice</artifactId>, + </dependency>]
[+++ b/marker/.gitignore, +/target/]
[+++ b/dao/src/main/java/com/iluwatar/dao/App.java, + * , + /**, + * Program entry point, + * @param args command line args, + */, + /**, + * Generate customers, + * @return list of customers, + */, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + * , + /**, + * Program entry point, + * @param args command line args, + */, + /**, + * Generate customers, + * @return list of customers, + */, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, +/**, + * , + * Customer, + *, + */, + , +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + * , + /**, + * Program entry point, + *
[+++ b/page-object/README.md, +---, +layout: pattern, +title: Page Object, +folder: page-object, +permalink: /patterns/page-object/, +categories: Testing, +tags:, +- Testing, +- Web Development, +- Encapsulation, +---, +, +## Intent, +, +Page Object encapsulates the UI, hiding the underlying UI widgetry of an application (commonly a web application) and providing an application-specific API to allow the manipulation of UI components required for tests. In doing so, it allows the test class itself to focus on the test logic instead. , +, +, +![alt text](./etc/page-object.png "Page Object"), +, +, +## Applicability, +, +Use the Page Object pattern when, +, +* You are writing automated
[+++ b/flux/src/main/java/com/iluwatar/flux/dispatcher/Dispatcher.java, + stores.stream().forEach(store -> store.onAction(action));, +++ b/flux/src/main/java/com/iluwatar/flux/dispatcher/Dispatcher.java, + stores.stream().forEach(store -> store.onAction(action));, +++ b/flux/src/main/java/com/iluwatar/flux/store/Store.java, + views.stream().forEach(view -> view.storeChanged(this));, +++ b/flux/src/main/java/com/iluwatar/flux/dispatcher/Dispatcher.java, + stores.stream().forEach(store -> store.onAction(action));, +++ b/flux/src/main/java/com/iluwatar/flux/store/Store.java, + views.stream().forEach(view -> view.storeChanged(this));, +++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java, + return i * (i + 1) / 2;, +++ b/flux/src/main/java/com/iluwatar/flux/dispatcher/Dispatcher.java, + stores.stream().forEach(store -> store.onAction(action));, +++ b/flux/src/main/java/com/iluwatar/flux/store/Store.java, + views.stream().forEach(view -> view.storeChanged(this));, +++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java, + return i * (i + 1) / 2;, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, + allToppings.stream().filter(t -> t.getName().equals(cakeInfo.cakeToppingInfo.name)), + allLayers.stream().filter(layer -> layer.getName().equals(info.name)).findFirst();, +++ b/flux/src/main/java/com/iluwatar/flux/dispatcher/Dispatcher.java, + stores.stream().forEach(store -> store.onAction(action));, +++ b/flux/src/main/java/com/iluwatar/flux/store/Store.java, + views.stream().forEach(view -> view.storeChanged(this));, +++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java, + return i * (i + 1) / 2;, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java,
[+++ b/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/App.java, + * <p>, + * In this example we use Java serialization to write representations of {@link RainbowFish}, + * objects to file. {@link RainbowFish} is the initial version which we can easily read and, + * write using {@link RainbowFishSerializer} methods. {@link RainbowFish} then evolves to {@link RainbowFishV2}, + * pattern and does not break even though {@link RainbowFishV2} has new fields that are serialized., +++ b/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/App.java, + * <p>, + * In this example we use Java serialization to write representations of {@link RainbowFish}, + * objects to file. {@link RainbowFish} is the initial version
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + public static class FactoryMaker {, +, + private FactoryMaker() {, + }, +, + public enum KingdomType {, + ELF, ORC, + }, +, + * Program entry point., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + public static class FactoryMaker {, +, + private FactoryMaker() {, + }, +, + public enum KingdomType {, + ELF, ORC, + }, +, + * Program entry point., +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +import org.junit.Before;, +import org.junit.Test;, +]
[+++ b/README.md, +![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, +#### Browse and view all of the patterns on our Website: [iluwatar.github.io/java-design-patterns/](https://iluwatar.github.io/java-design-patterns/), +, + - <a href="#how-to-contribute">How to contribute</a>, + - <a href="#versioning">Versioning</a>, +## <a name="introduction">Introduction</a>, +, +# <a name="how-to-contribute">How to contribute</a> [&#8593;](#top), +, +**To work on a new pattern** you need to do the following steps:, +, +1. If there is no issue for the new pattern yet, raise new issue. Comment on, + the issue that you are working on it so that others don't start work on the, + same thing., +2. Fork the repository., +3. Create a
[+++ b/singleton/src/main/java/com/iluwatar/singleton/App.java, +/**, + * Singleton pattern., + */, +++ b/singleton/src/main/java/com/iluwatar/singleton/App.java, +/**, + * Singleton pattern., + */, +++ b/singleton/src/main/java/com/iluwatar/singleton/EnumIvoryTower.java, +/**, + * Enum Singleton class., + * Effective Java 2nd Edition (Joshua Bloch) p. 18, + */, + * Enum based singleton implementation., +++ b/singleton/src/main/java/com/iluwatar/singleton/App.java, +/**, + * Singleton pattern., + */, +++ b/singleton/src/main/java/com/iluwatar/singleton/EnumIvoryTower.java, +/**, + * Enum Singleton class., + * Effective Java 2nd Edition (Joshua Bloch) p. 18, + */, + * Enum based singleton implementation., +++ b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java, +/**, + * Singleton pattern., + */, + * <p/>, + private InitializingOnDemandHolderIdiom() {, + private static class
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create a new set of test entries with the expected result, + *, + * @return The list of parameters used during this test, + */, + public abstract Stream<Arguments> expressionProvider();, +, + /**, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create a new set of test entries with the expected result, + *, + * @return The list of parameters used during this test, + */, + public abstract Stream<Arguments> expressionProvider();, +, + /**, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, + @Override, + public Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create
[+++ b/event-asynchronous/src/main/java/config.properties, +INTERACTIVE_MODE=NO]
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that, + * have a common theme without specifying their concrete classes. In normal usage, the client, + * software creates a concrete implementation of the abstract factory and then uses the generic, + * interface of the factory to create the concrete objects that are part of the theme. The client, + * does not know (or care) which concrete objects it gets from each of these internal factories,, + * since it uses only the generic interfaces of
[+++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/adapter/pom.xml, + <version>1.6.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/adapter/pom.xml, + <version>1.6.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.6.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/adapter/pom.xml, + <version>1.6.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.6.0</version>, +++ b/bridge/pom.xml, + <version>1.6.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/adapter/pom.xml, + <version>1.6.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.6.0</version>, +++ b/bridge/pom.xml, + <version>1.6.0</version>, +++ b/builder/pom.xml, + <version>1.6.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/adapter/pom.xml, + <version>1.6.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.6.0</version>, +++ b/bridge/pom.xml, + <version>1.6.0</version>, +++ b/builder/pom.xml, + <version>1.6.0</version>, +++ b/business-delegate/pom.xml, + <version>1.6.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/adapter/pom.xml, + <version>1.6.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.6.0</version>, +++ b/bridge/pom.xml, +
[+++ b/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java, + private static void makeActions(Collection<DwarvenMineWorker> workers,
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java]
[+++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java]
[+++ b/abstract-factory/README.md, +## Explanation, +Real world example, +, +> To create a kingdom we need objects with common theme. Elven kingdom needs an Elven king, Elven castle and Elven army whereas Orcish kingdom needs an Orcish king, Orcish castle and Orcish army. There is a dependency between the objects in the kingdom., +, +In plain words, +, +> A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes., +, +Wikipedia says, +, +> The abstract factory pattern provides a way to encapsulate a group of individual factories that have a
[+++ b/event-asynchronous/etc/event-asynchronous.gif, +++ b/event-asynchronous/etc/event-asynchronous.gif, +++ /dev/null, +++ b/event-asynchronous/etc/event-asynchronous.gif, +++ /dev/null, +++ b/event-asynchronous/etc/event-asynchronous.ucls, +<class-diagram version="1.2.2" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <interface id="1" language="java" name="com.iluwatar.event.asynchronous.IEvent" project="java-design-patterns" , + file="/java-design-patterns/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java" , + binary="false" corner="BOTTOM_RIGHT"> , + <position height="117" width="151" x="42" y="15"/> , + <interface id="2" language="java" name="com.iluwatar.event.asynchronous.ThreadCompleteListener" , + project="java-design-patterns" , + file="/java-design-patterns/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/ThreadCompleteListener.java" , + binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="326" y="79"/> , + <class id="3" language="java" name="com.iluwatar.event.asynchronous.App" project="java-design-patterns" , + file="/java-design-patterns/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java" , + binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="554" y="119"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +
[+++ b/caching/.gitignore, +/target/, +++ b/caching/.gitignore, +/target/, +++ b/caching/etc/caching.png, +++ b/caching/.gitignore, +/target/, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="main.java.com.wssia.caching.App" project="CachingPatterns" , + file="/CachingPatterns/src/main/java/com/wssia/caching/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="249" y="150"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="main.java.com.wssia.caching.AppManager" project="CachingPatterns" , + file="/CachingPatterns/src/main/java/com/wssia/caching/AppManager.java" binary="false" corner="BOTTOM_RIGHT"> , + <position
[+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(" ");, + sb.append(hairType).append(" ");, + sb.append(".");, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(" ");, + sb.append(hairType).append(" ");, + sb.append(".");, +++ b/feature-toggle/etc/feature-toggle.png, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(" ");, + sb.append(hairType).append(" ");, + sb.append(".");, +++ b/feature-toggle/etc/feature-toggle.png, +++ b/feature-toggle/etc/feature-toggle.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="true" generalizations="true" , + realizations="true" associations="true" dependencies="true" nesting-relationships="true" router="FAN"> , + <interface id="1" language="java" name="com.iluwatar.featuretoggle.pattern.Service" project="feature-toggle" , + file="/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="238" y="187"/> , + <display autosize="true" stereotype="true" package="true" initial-value="true" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true"
[+++ b/pom.xml, + <module>promise</module>, +++ b/pom.xml, + <module>promise</module>, +++ b/promise/etc/promise.png, +++ b/pom.xml, + <module>promise</module>, +++ b/promise/etc/promise.png, +++ b/promise/etc/promise.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.10" icons="true" automaticImage="PNG" always-add-relationships="false" , + generalizations="true" realizations="true" associations="true" dependencies="false" nesting-relationships="true" , + router="FAN"> , + <class id="1" language="java" name="com.iluwatar.promise.Promise" project="promise" , + file="/promise/src/main/java/com/iluwatar/promise/Promise.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="524" y="541"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="false" static="true"/> , + <operations public="true" package="false" protected="true" private="false" static="true"/> , + </display> , + </class> , + <interface id="2" language="java" name="java.util.concurrent.Future" project="async-method-invocation" , +
[+++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java,
[+++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * mapping each of them with the conversion function, + * mapping each of them with the conversion function]
[+++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/business-delegate/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, +
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + /**, + * Program entry point, + */, + // submit some lottery tickets, + , + // perform lottery, + , + // check all the tickets, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + /**, + * Program entry point, + */, + // submit some lottery tickets, + , + // perform lottery, + , + // check all the tickets, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, +import java.util.Map;, + Map<LotteryTicketId, LotteryTicket> getAllSubmittedTickets();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + /**, + * Program entry point, + */, + // submit some lottery tickets, + , + // perform lottery, + , + // check all
[+++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +layout: pattern, +title: Event Driven Architecture, +folder: event-driven-architecture, +permalink: /patterns/event-driven-architecture, +, +, +**Intent:** Send and notify state changes of your objects to other applications using an Event-driven Architecture., +, +![alt text](./etc/class_diagram.png "Event Driven Architecture"), +, +**Applicability:** Use an Event-driven architecture when, +, +* you want to create a loosely coupled system, +* you want to build a more responsive system, +* you want a system that is easier to extend, +, +**Real world examples:**, +, +* SendGrid, an email API, sends events whenever an email is processed, delivered, opened etc... (https://sendgrid.com/docs/API_Reference/Webhooks/event.html), +* Chargify,
[+++ b/layers/index.md, +---, +layout: pattern, +title: Layers, +folder: layers, +permalink: /patterns/layers/, +categories: pattern_cat, +tags: pattern_tag, +---, +, +**Intent:** Layers is an architectural style where software responsibilities are, + divided among the different layers of the application., +, +![alt text](./etc/layers.png "Layers"), +, +**Applicability:** Use the Layers architecture when, +, +* you want clearly divide software responsibilities into differents parts of the program, +* you want to prevent a change from propagating throughout the application, +* you want to make your application more maintainable and testable, +++ b/layers/index.md, +---, +layout: pattern, +title: Layers, +folder: layers, +permalink: /patterns/layers/, +categories: pattern_cat, +tags: pattern_tag,
[+++ b/object-mother/README.md, +---, +layout: pattern, +title: Object Mother, +folder: object-mother, +permalink: /patterns/object-mother/, +pumlid: , +categories: Creational, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Object Mother, +Define a factory of immutable content with separated builder and factory interfaces., +, +![alt text](./etc/object-mother.png "Object Mother"), +, +## Applicability, +Use the Object Mother pattern when, +, +* You want consistent objects over several tests, +* you want to reduce code for creation of objects in tests, +* every test should run with fresh data, +, +## Credits, +, +* [Answer by David Brown](http://stackoverflow.com/questions/923319/what-is-an-objectmother) to the stackoverflow question: [What is an
[+++ b/event-driven-architecture/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +++ b/event-driven-architecture/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java, +, + /**, + * Returns a map of registered event handlers., + * @return {@Map} of registered event handlers., + */, + public Map<Class<? extends Event>, Channel<?>> getHandlers() {, + return handlers;, + }, +++ b/event-driven-architecture/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java, +, + /**, + * Returns a map of registered event handlers., + * @return {@Map} of registered
[+++ b/builder/src/main/java/com/iluwatar/builder/App.java, + * The intention of the Builder pattern is to find a solution to the telescoping constructor, + * anti-pattern. The telescoping constructor anti-pattern occurs when the increase of object, + * constructor parameter combination leads to an exponential list of constructors. Instead of using, + * numerous constructors, the builder pattern uses another object, a builder, that receives each, + * initialization parameter step by step and then returns the resulting constructed object at once., + * The Builder pattern has another benefit. It can be used for objects that contain flat data (html, + *
[+++ b/eip-message-channel/.gitignore, +/target/, +++ b/eip-message-channel/.gitignore, +/target/, +++ b/eip-message-channel/README.md, +---, +layout: pattern, +title: EIP Message Channel, +folder: eip-message-channel, +permalink: /patterns/eip-message-channel/, +categories: Integration, +tags:, + - Java, + - EIP, + - Apache Camel™, +---, +, +## Intent, +When two applications communicate using a messaging system they do it by using logical addresses, +of the system, so called Message Channels., +, +![alt text](./etc/message-channel.png "Message Channel"), +, +## Applicability, +Use the Message Channel pattern when, +, +* two or more applications need to communicate using a messaging system, +, +## Real world examples, +, +* [akka-camel](http://doc.akka.io/docs/akka/snapshot/scala/camel.html), +++ b/eip-message-channel/.gitignore, +/target/, +++ b/eip-message-channel/README.md, +---,
[+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java, + * The MIT License Copyright (c) 2014-2016 Ilkka Seppälä, + * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and, + * associated documentation files (the "Software"), to deal in the Software without restriction,, + * including without limitation the rights to use, copy, modify, merge, publish, distribute,, + * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is, + * The above copyright notice and this permission notice shall be included in all copies or, + * substantial portions of
[+++ /dev/null, +++ /dev/null, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +, + washingMachineState = WashingMachineState.ENABLED;, + try {, + Thread.sleep(50);, + } catch (InterruptedException ie) {, + ie.printStackTrace();, + }, + endOfWashing();, +++ /dev/null, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +, + washingMachineState = WashingMachineState.ENABLED;, + try {, + Thread.sleep(50);, + } catch (InterruptedException ie) {, + ie.printStackTrace();, + }, + endOfWashing();, +++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java, +import org.junit.jupiter.api.Disabled;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, + private volatile WashingMachineState machineStateGlobal;, + @Disabled, + public void wash() throws Exception {, + WashingMachine washingMachine = new WashingMachine();, + ExecutorService executorService = Executors.newFixedThreadPool(2);, + executorService.execute(washingMachine::wash);, + executorService.execute(() -> {, + machineStateGlobal = washingMachine.getWashingMachineState();, + });,
[+++ /dev/null, +++ /dev/null, +++ b/monostate/etc/MonoState.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.monostate.LoadBalancer" project="monostate" , + file="/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="187" width="158" x="100" y="66"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.monostate.Server" project="monostate" , + file="/monostate/src/main/java/com/iluwatar/monostate/Server.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="176" y="372"/> , + <display autosize="true" stereotype="true" package="true"
[+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTest.java, + // add funds to the test player's bank account, + wireTransfers.setFunds("123-12312", 100);]
[+++ b/module/.gitignore, +error.txt, +output.txt, +++ b/module/.gitignore, +error.txt, +output.txt, +++ /dev/null, +++ b/module/.gitignore, +error.txt, +output.txt, +++ /dev/null, +++ /dev/null]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, +import com.iluwatar.hexagonal.mongo.MongoConnectionPropertiesLoader;, + MongoConnectionPropertiesLoader.load();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, +import com.iluwatar.hexagonal.mongo.MongoConnectionPropertiesLoader;, + MongoConnectionPropertiesLoader.load();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java, + mongoClient = new MongoClient(System.getProperty("mongo-host"),, + Integer.parseInt(System.getProperty("mongo-port")));, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, +import com.iluwatar.hexagonal.mongo.MongoConnectionPropertiesLoader;, + MongoConnectionPropertiesLoader.load();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java, + mongoClient = new MongoClient(System.getProperty("mongo-host"),, + Integer.parseInt(System.getProperty("mongo-port")));, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, + mongoClient = new MongoClient(System.getProperty("mongo-host"),, + Integer.parseInt(System.getProperty("mongo-port")));, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, +import com.iluwatar.hexagonal.mongo.MongoConnectionPropertiesLoader;, + MongoConnectionPropertiesLoader.load();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java, + mongoClient = new MongoClient(System.getProperty("mongo-host"),, + Integer.parseInt(System.getProperty("mongo-port")));, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, + mongoClient = new MongoClient(System.getProperty("mongo-host"),, + Integer.parseInt(System.getProperty("mongo-port")));, +++ /dev/null, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, +import com.iluwatar.hexagonal.mongo.MongoConnectionPropertiesLoader;, + MongoConnectionPropertiesLoader.load();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java, + mongoClient = new MongoClient(System.getProperty("mongo-host"),, + Integer.parseInt(System.getProperty("mongo-port")));, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, + mongoClient = new MongoClient(System.getProperty("mongo-host"),, + Integer.parseInt(System.getProperty("mongo-port")));, +++ /dev/null, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/mongo/MongoConnectionPropertiesLoader.java,
[+++ b/extension-objects/etc/extension-objects.urm.puml, +@startuml, +@enduml, +++ b/extension-objects/etc/extension-objects.urm.puml, +@startuml, +@enduml, +++ b/extension-objects/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above
[+++ b/pom.xml]
[+++ b/business-delegate/etc/business-delegate.ucls, + <class id="1" language="java" name="com.iluwatar.business.delegate.BusinessDelegate" project="business-delegate" , + file="/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessDelegate.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <class id="2" language="java" name="com.iluwatar.business.delegate.Client" project="business-delegate" , + file="/business-delegate/src/main/java/com/iluwatar/business/delegate/Client.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <enumeration id="3" language="java" name="com.iluwatar.business.delegate.ServiceType" project="business-delegate" , + file="/business-delegate/src/main/java/com/iluwatar/business/delegate/ServiceType.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <interface id="4" language="java" name="com.iluwatar.business.delegate.BusinessService" project="business-delegate" , + file="/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessService.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <class id="5" language="java" name="com.iluwatar.business.delegate.JmsService" project="business-delegate" , + file="/business-delegate/src/main/java/com/iluwatar/business/delegate/JmsService.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <class id="6" language="java" name="com.iluwatar.business.delegate.BusinessLookup" project="business-delegate" , + file="/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessLookup.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <class id="7" language="java" name="com.iluwatar.business.delegate.EjbService" project="business-delegate" , + file="/business-delegate/src/main/java/com/iluwatar/business/delegate/EjbService.java" binary="false" , + corner="BOTTOM_RIGHT">
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, + AppManager.find("001");, + AppManager.find("001");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("003");, + AppManager.find("004");, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + AppManager.find("001");, + AppManager.find("001");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("003");, + AppManager.find("004");, +++ b/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java, + Map<String, String> map = (Map<String, String>) objIn.readObject();]
[+++ b/abstract-factory/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/dao/pom.xml, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + , + <properties>, + , + </properties>, + , + <dependency>, + <groupId>log4j</groupId>, + <artifactId>log4j</artifactId>, + </dependency>, +++ b/dao/pom.xml, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + , + <properties>, + , + </properties>, + , + <dependency>, + <groupId>log4j</groupId>, + <artifactId>log4j</artifactId>, + </dependency>, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, +import org.apache.log4j.Logger;, +, + private static Logger LOGGER = Logger.getLogger(App.class);, +, + * Program entry point., + * , + * @param args command line args., + public static void main(final String[] args) {, + final CustomerDaoImpl customerDao = new CustomerDaoImpl(generateSampleCustomers());, + LOGGER.info("customerDao.getAllCustomers():
[+++ b/flux/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/flux/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/flux/src/test/java/com/iluwatar/flux/action/ContentTest.java, +package com.iluwatar.flux.action;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Date: 12/12/15 - 10:11 PM, + *, + * @author Jeroen Meulemeester, + */, +public class ContentTest {, +, + @Test, + public void testToString() throws Exception {, + for (final Content content : Content.values()) {, + final String toString = content.toString();, + assertNotNull(toString);, + assertFalse(toString.trim().isEmpty());, + }, + }, +, +}, +++ b/flux/pom.xml, + <dependency>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <module>retry</module>, +++ b/pom.xml, + <module>retry</module>, +++ b/retry/README.md, +---, +layout: pattern, +title: Retry, +folder: retry, +permalink: /patterns/retry/, +categories: other, +tags:, + - java, + - difficulty-expert, + - performance, +---, +, +## Retry / resiliency, +Enables an application to handle transient failures from external resources., +, +## Intent, +Transparently retry certain operations that involve communication with external, +resources, particularly over the network, isolating calling code from the , +retry implementation details., +, +![alt text](./etc/retry.png "Retry"), +, +## Explanation, +The `Retry` pattern consists retrying operations on remote resources over the , +network a set number of times. It
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/observer/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/observer/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/observer/src/test/java/com/iluwatar/observer/HobbitsTest.java, +package com.iluwatar.observer;, +, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import java.util.ArrayList;, +import java.util.Collection;, +, +/**, + * Date: 12/27/15 - 12:07 PM, + *, + * @author Jeroen Meulemeester, + */, +@RunWith(Parameterized.class), +public class HobbitsTest extends WeatherObserverTest<Hobbits> {, +, + @Parameterized.Parameters, + public static Collection<Object[]> data() {, + final ArrayList<Object[]> testData = new ArrayList<>();, + testData.add(new Object[]{WeatherType.SUNNY, "The happy hobbits bade in the warm sun."});, + testData.add(new Object[]{WeatherType.RAINY, "The hobbits look for cover from
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled = false;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled = false;, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java, + public void registerObserver(EventObserver obs) {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache =
[+++ b/async-method-invocation/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.3.0</version>, + </parent>, + <artifactId>async-method-invocation</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/async-method-invocation/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.3.0</version>, + </parent>, + <artifactId>async-method-invocation</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +package com.iluwatar.async.method.invocation;, +, +import java.util.concurrent.Callable;, +, +public class App {, +, + public static void main(String[] args) throws Exception
[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/abstract-factory/etc/abstract-factory.png, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/abstract-factory/etc/abstract-factory.png, +++ b/abstract-factory/etc/abstract-factory.ucls, +<?xml version="1.0"
[+++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/README.md, +++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/README.md, +++ b/factory-method/index.md, +tags: , + - Java, + - Difficulty-Beginner, +++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/README.md, +++ b/factory-method/index.md, +tags: , + - Java, + - Difficulty-Beginner, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mutex/pom.xml, +<?xml version="1.0"?>, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Sepp�l�, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in
[+++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;,
[+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/App.java, +import com.iluwatar.eda.advanced.events.Event;, +import com.iluwatar.eda.advanced.events.UserCreatedEvent;, +import com.iluwatar.eda.advanced.events.UserUpdatedEvent;, +import com.iluwatar.eda.advanced.handler.UserCreatedEventHandler;, +import com.iluwatar.eda.advanced.handler.UserUpdatedEventHandler;, +, + dispatcher.registerChannel(UserCreatedEvent.class, new UserCreatedEventHandler());, + dispatcher.registerChannel(UserUpdatedEvent.class, new UserUpdatedEventHandler());, + dispatcher.dispatch(new UserCreatedEvent());, + dispatcher.dispatch(new UserUpdatedEvent());, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/App.java, +import com.iluwatar.eda.advanced.events.Event;, +import com.iluwatar.eda.advanced.events.UserCreatedEvent;, +import com.iluwatar.eda.advanced.events.UserUpdatedEvent;, +import com.iluwatar.eda.advanced.handler.UserCreatedEventHandler;, +import com.iluwatar.eda.advanced.handler.UserUpdatedEventHandler;, +, + dispatcher.registerChannel(UserCreatedEvent.class, new UserCreatedEventHandler());, + dispatcher.registerChannel(UserUpdatedEvent.class, new UserUpdatedEventHandler());, + dispatcher.dispatch(new UserCreatedEvent());, + dispatcher.dispatch(new UserUpdatedEvent());, +++ /dev/null, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/App.java, +import com.iluwatar.eda.advanced.events.Event;, +import com.iluwatar.eda.advanced.events.UserCreatedEvent;, +import com.iluwatar.eda.advanced.events.UserUpdatedEvent;, +import com.iluwatar.eda.advanced.handler.UserCreatedEventHandler;, +import com.iluwatar.eda.advanced.handler.UserUpdatedEventHandler;, +, + dispatcher.registerChannel(UserCreatedEvent.class, new UserCreatedEventHandler());, + dispatcher.registerChannel(UserUpdatedEvent.class, new UserUpdatedEventHandler());, + dispatcher.dispatch(new UserCreatedEvent());, + dispatcher.dispatch(new UserUpdatedEvent());, +++ /dev/null, +++ /dev/null, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/App.java, +import com.iluwatar.eda.advanced.events.Event;, +import com.iluwatar.eda.advanced.events.UserCreatedEvent;, +import com.iluwatar.eda.advanced.events.UserUpdatedEvent;, +import com.iluwatar.eda.advanced.handler.UserCreatedEventHandler;, +import com.iluwatar.eda.advanced.handler.UserUpdatedEventHandler;,
[+++ b/pom.xml, + <module>value-object</module>, +<<<<<<< HEAD, + </executions>, + </plugin>, +=======, +>>>>>>> upstream/master, +++ b/pom.xml, + <module>value-object</module>, +<<<<<<< HEAD, + </executions>, + </plugin>, +=======, +>>>>>>> upstream/master, +++ b/value-object/etc/value-object.png, +++ b/pom.xml, + <module>value-object</module>, +<<<<<<< HEAD, + </executions>, + </plugin>, +=======, +>>>>>>> upstream/master, +++ b/value-object/etc/value-object.png, +++ b/value-object/etc/value-object.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="true" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.value.object.HeroStat" project="value-object" , + file="/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="520" y="337"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true"
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +/**, + * Spring Boot EntryPoint Class, + */, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +/**, + * Spring Boot EntryPoint Class, + */, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +/**, + * Test Aggregation of domain objects, + */, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +/**, + * Spring Boot EntryPoint Class, + */, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import
[+++ b/dao/etc/dao.png, +++ b/dao/etc/dao.png, +++ b/dao/etc/dao.ucls, + <class id="1" language="java" name="com.iluwatar.dao.App" project="dao" , + file="/dao/src/main/java/com/iluwatar/dao/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="910" y="191"/> , + <attributes public="true" package="true" protected="true" private="false" static="true"/> , + <operations public="true" package="true" protected="true" private="false" static="true"/> , + <interface id="2" language="java" name="com.iluwatar.dao.CustomerDao" project="dao" , + file="/dao/src/main/java/com/iluwatar/dao/CustomerDao.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="536" y="187"/> , + <class id="3" language="java" name="com.iluwatar.dao.InMemoryCustomerDao" project="dao" , + file="/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="289" y="455"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="false" static="true"/>
[+++ b/serverless/README.md, + * Concise logic - Use functions to transform, not transport (utilize some of the , + integration available from the provider to transport), and make sure you read only, + what you need, + * Efficient/single purpose code - avoid conditional/routing logic and break down , + into individual functions, avoid "fat"/monolithic functions and control the , + dependencies in the function deployment package to reduce the load time for your , + function, + * ephemeral environment - Utilize container start for expensive initializations, + * Succinct payloads - Scrutinize the event as much as
[+++ b/pom.xml, + <hierarchical-junit-runner-version>4.12.1</hierarchical-junit-runner-version>, + <module>mute-idiom</module>, + <dependency>, + <groupId>de.bechte.junit</groupId>, + <artifactId>junit-hierarchicalcontextrunner</artifactId>, + <version>${hierarchical-junit-runner-version}</version>, + <scope>test</scope>, + </dependency>]
[+++ b/README.md, +++ b/README.md, +++ b/flyweight/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>flyweight</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>flyweight</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/README.md, +++ b/flyweight/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>flyweight</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>flyweight</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>,
[+++ b/data-bus/README.md, +--- # this is so called 'Yaml Front Matter', read up on it here: http://jekyllrb.com/docs/frontmatter/, +layout: pattern # layout must allways be pattern, +title: Data Bus # the properly formatted title, +folder: data-bus # the folder name in which this pattern lies, +permalink: /patterns/data-bus/ # the permalink to the pattern, to keep this uniform please stick to /patterns/FOLDER/, +, +# both categories and tags are Yaml Lists, +# you can either just pick one or write a list with '-'s, +# usable categories and tags are listed here: https://github.com/iluwatar/java-design-patterns/blob/gh-pages/_config.yml, +categories: creational # categories of the pattern, +tags:
[+++ /dev/null, +++ /dev/null, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +++ /dev/null, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +++ b/event-driven-architecture/etc/class_diagram.png, +++ /dev/null, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +layout: pattern, +title: Event Driven Architecture, +folder: event-driven-architecture, +permalink: /patterns/event-driven-architecture, +, +, +**Intent:** Send and notify state changes of your objects to other applications using an Event-driven Architecture., +, +![alt text](./etc/class_diagram.png "Event Driven Architecture"), +, +**Applicability:** Use an Event-driven architecture when, +, +* you want to create a loosely coupled system, +* you want to build a more responsive system, +* you want a system that is easier to extend, +, +**Real world examples:**, +, +* SendGrid, an email
[+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + virtualDB = new HashMap<>();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + virtualDB = new HashMap<>();, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + HashMap<String, Node> cache = new HashMap<>();, + ArrayList<UserAccount> listOfCacheData = new ArrayList<>();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + virtualDB = new HashMap<>();, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + HashMap<String, Node> cache = new HashMap<>();, + ArrayList<UserAccount> listOfCacheData = new ArrayList<>();, +++ b/composite/src/main/java/com/iluwatar/composite/LetterComposite.java, + private List<LetterComposite> children = new ArrayList<>();
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, +package com.iluwatar.cqrs.commandes;, +, +import org.hibernate.Query;, +import org.hibernate.Session;, +import org.hibernate.SessionFactory;, +, +import com.iluwatar.cqrs.domain.model.Author;, +import com.iluwatar.cqrs.domain.model.Book;, +import com.iluwatar.cqrs.util.HibernateUtil;, +, +public class CommandServiceImpl implements ICommandService {, +, + private SessionFactory sessionFactory = HibernateUtil.getSessionFactory();, +, + private Author getAuthorByUsername(String username) {, + Session session = sessionFactory.openSession();, + Query query = session.createQuery("from Author where username=:username");, + query.setParameter("username", username);, + Author author = (Author) query.uniqueResult();, + session.close();, + return author;, + }, +, + private Book getBookByTitle(String title) {, + Session session = sessionFactory.openSession();, + Query query = session.createQuery("from Book where title=:title");, + query.setParameter("title", title);, + Book book = (Book) query.uniqueResult();, + session.close();,
[+++ b/property/src/main/java/com/iluwatar/property/App.java, + * The Property pattern is also known as Prototype inheritance., + * <p>, + * In this example we demonstrate {@link Character} instantiation using the Property pattern.]
[+++ b/event-driven-architecture/etc/eda.png, +++ b/event-driven-architecture/etc/eda.png, +++ b/event-driven-architecture/etc/eda.ucls, + <position height="-1" width="-1" x="437" y="535"/> , + <position height="-1" width="-1" x="763" y="379"/> , + <position height="-1" width="-1" x="596" y="272"/> , + <interface id="4" language="java" name="com.iluwatar.eda.framework.Event" project="event-driven-architecture" , + file="/event-driven-architecture/src/main/java/com/iluwatar/eda/framework/Event.java" binary="false" , + <position height="-1" width="-1" x="188" y="121"/> , + <position height="-1" width="-1" x="755" y="58"/> , + <position height="-1" width="-1" x="499" y="122"/> , + <position height="-1" width="-1" x="102" y="380"/> , + <position height="-1" width="-1" x="320" y="382"/> , + <class id="9" language="java" name="com.iluwatar.eda.event.AbstractEvent" project="event-driven-architecture" , + file="/event-driven-architecture/src/main/java/com/iluwatar/eda/event/AbstractEvent.java" binary="false" , + <position height="-1" width="-1" x="188" y="240"/> , + <end type="SOURCE" refId="3"/> , + <end type="TARGET"
[+++ b/serverless/README.md, + - Difficulty-Intermediate, +++ b/serverless/README.md, + - Difficulty-Intermediate, +++ b/serverless/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/serverless/README.md, + - Difficulty-Intermediate, +++ b/serverless/pom.xml, + <version>1.20.0-SNAPSHOT</version>, +++ b/serverless/src/main/java/com/iluwatar/serverless/baas/api/AbstractDynamoDbHandler.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and
[+++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + - <a href="#contribute">How to contribute</a>, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +, +, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + - <a href="#contribute">How to contribute</a>, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +, +, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/README.md, +[![Build
[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java]
[+++ b/fluentinterface/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/fluentinterface/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + return fromIterator.hasNext() ? fromIterator.next() : null;, +++ b/fluentinterface/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + return fromIterator.hasNext() ? fromIterator.next() : null;, +++ b/fluentinterface/src/test/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterableTest.java, +package com.iluwatar.fluentinterface.fluentiterable;, +, +import org.junit.Test;, +, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.Optional;, +import java.util.Spliterator;, +import java.util.function.Consumer;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;,
[+++ b/README.md, + - <a href="#introduction">Introduction</a>, + - <a href="#list-of-design-patterns">List of Design Patterns</a>, + - <a href="#creational-patterns">Creational Patterns</a>, + - <a href="#structural-patterns">Structural Patterns</a>, + - <a href="#behavioral-patterns">Behavioral Patterns</a>, + - <a href="#concurrency-patterns">Concurreny Patterns</a>, + - <a href="#presentation-tier-patterns">Presentation Tier Patterns</a>, + - <a href="#business-tier-patterns">Business Tier Patterns</a>, + - <a href="#architectural-patterns">Architectural Patterns</a>, + - <a href="#integration-patterns">Integration Patterns</a>, + - <a href="#idioms">Idioms</a>, + - <a href="#faq">Frequently Asked Questions</a>, + - <a href="#how-to-contribute">How to contribute</a>, + - Contributing a new pattern, + - Working on non-pattern issue, + - <a href="#versioning">Versioning</a>, + - <a href="#credits">Credits</a>, + - <a href="#license">License</a>, + , +, +##
[+++ b/adapter/README.md, +## General usage of Adapter Pattern: , ++ Wrappers used to adopt 3rd parties libraries and frameworks - most of the applications using third party libraries use adapters as a middle layer between the application and the 3rd party library to decouple the application from the library. If another library has to be used only an adapter for the new library is required without having to change the application code., +, +## Consequences:, +Class and object adapters have different trade-offs. A class adapter, +, +* adapts Adaptee to Target by committing to a concrete Adaptee class. As
[+++ b/private-class-data/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/private-class-data/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/private-class-data/src/test/java/com/iluwatar/privateclassdata/ImmutableStewTest.java, +package com.iluwatar.privateclassdata;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.verify;, +, +/**, + * Date: 12/27/15 - 10:46 PM, + *, + * @author Jeroen Meulemeester, + */, +public class ImmutableStewTest extends StdOutTest {, +, + /**, + * Verify if mixing the stew doesn't change the internal state, + */, + @Test, + public void testMix() {, + final Stew stew = new Stew(1, 2, 3, 4);, +
[+++ b/business-delegate/README.md, +, +++ b/business-delegate/README.md, +, +++ /dev/null, +++ b/business-delegate/README.md, +, +++ /dev/null, +++ /dev/null, +++ b/business-delegate/README.md, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/business-delegate/README.md, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/business-delegate/README.md, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/business-delegate/README.md, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/business-delegate/README.md, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/business-delegate/README.md, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null,
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java, + private static volatile int numAllocated;, + private final int id;, + this.id = numAllocated + 1;, + numAllocated++;, + public LotteryTicketId(int id) {, + this.id = id;, + public int getId() {, + return String.format("%d", id);, + }, +, + @Override, + public boolean equals(Object o) {, + if (this == o) {, + return true;, + }, + if (o == null || getClass() != o.getClass()) {, + return false;, + }, +, + LotteryTicketId that = (LotteryTicketId) o;, +, + return id == that.id;, +, + }, +, + @Override, + public int hashCode()
[+++ b/event-queue/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <groupId>com.iluwatar</groupId>, +++ b/event-queue/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <groupId>com.iluwatar</groupId>, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, +++ b/event-queue/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <groupId>com.iluwatar</groupId>, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, +++ b/pom.xml]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + LotteryAdministration administration = injector.getInstance(LotteryAdministration.class);, + administration.resetLottery();, + administration.performLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + LotteryAdministration administration = injector.getInstance(LotteryAdministration.class);, + administration.resetLottery();, + administration.performLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/InMemoryBank.java, + accounts.put(LotteryConstants.SERVICE_BANK_ACCOUNT, LotteryConstants.SERVICE_BANK_ACCOUNT_BALANCE);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + LotteryAdministration administration = injector.getInstance(LotteryAdministration.class);, + administration.resetLottery();, + administration.performLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/InMemoryBank.java, + accounts.put(LotteryConstants.SERVICE_BANK_ACCOUNT, LotteryConstants.SERVICE_BANK_ACCOUNT_BALANCE);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java, + List<Document> results = accountsCollection.find(search).limit(1).into(new ArrayList<>());, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + LotteryAdministration administration = injector.getInstance(LotteryAdministration.class);, + administration.resetLottery();, + administration.performLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/InMemoryBank.java, + accounts.put(LotteryConstants.SERVICE_BANK_ACCOUNT, LotteryConstants.SERVICE_BANK_ACCOUNT_BALANCE);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java, + List<Document> results = accountsCollection.find(search).limit(1).into(new ArrayList<>());, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, +import java.util.stream.Collectors;, + List<Document> results = ticketsCollection.find(find).limit(1).into(new ArrayList<>());, + List<Document> docs = ticketsCollection.find(new Document()).into(new ArrayList<>());, + Set<Integer> numbers = Arrays.stream(doc.getString("numbers").split(",")), + .map(Integer::parseInt),
[+++ b/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishSerializerTest.java, +package com.iluwatar.tolerantreader;, +, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import java.io.File;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotSame;, +, +/**, + * Date: 12/30/15 - 18:39 PM, + *, + * @author Jeroen Meulemeester, + */, +public class RainbowFishSerializerTest {, +, + /**, + * Create a temporary folder, used to generate files in during this test, + */, + @Rule, + public final TemporaryFolder testFolder = new TemporaryFolder();, +, + /**, + * Rainbow fish version 1 used during the tests, + */, + private static final RainbowFish V1 = new RainbowFish("version1", 1, 2, 3);,
[+++ b/eip-aggregator/README.md, +---, +layout: pattern, +title: EIP Aggregator, +folder: eip-aggregator, +permalink: /patterns/eip-aggregator/, +categories: Enterprise integration, +tags:, + - Java, + - Difficulty-Intermittent, + - Enterprise integration, +---, +, +## Intent, +Sometimes in enterprise systems there is a need to group incoming data in order to process it as a whole. For example, +you may need to gather offers and after defined number of offers has been received you would like to choose the one with, +the best parameters. , +, +Aggregator allows you to merge messages based on defined criteria and parameters. It gathers original messages, , +applies aggregation
[+++ b/monitor-object/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.20.0-SNAPSHOT</version>, + </parent>, + <artifactId>monitor-object</artifactId>, + <name>monitor-object</name>, + <dependencies>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-engine</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/monitor-object/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.20.0-SNAPSHOT</version>, + </parent>, + <artifactId>monitor-object</artifactId>, + <name>monitor-object</name>, + <dependencies>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-engine</artifactId>, + <scope>test</scope>, + </dependency>,
[+++ b/dao/pom.xml, + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>de.bechte.junit</groupId>, + <artifactId>junit-hierarchicalcontextrunner</artifactId>, + </dependency>, +++ b/dao/pom.xml, + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>de.bechte.junit</groupId>, + <artifactId>junit-hierarchicalcontextrunner</artifactId>, + </dependency>, +++ b/dao/src/main/java/com/iluwatar/dao/DBCustomerDao.java, +import java.sql.Connection;, +import java.sql.DriverManager;, +import java.sql.PreparedStatement;, +import java.sql.ResultSet;, +import java.sql.SQLException;, +import java.util.Spliterator;, +import java.util.Spliterators;, +import java.util.function.Consumer;, +import java.util.stream.StreamSupport;, + private String dbUrl;, +, + public DBCustomerDao(String dbUrl) {, + this.dbUrl = dbUrl;, + }, +, + , + Connection connection;, + try {, + connection = getConnection();, + PreparedStatement statement = connection.prepareStatement("SELECT * FROM CUSTOMERS");, + ResultSet resultSet = statement.executeQuery();, +
[+++ b/.travis.yml, +# use latest java version available instead of travis default]
[+++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business, + * tiers. By using the pattern we gain loose coupling between the tiers. The Business Delegate, + * encapsulates knowledge about how to locate, connect to, and interact with the business objects, + * that make up the application., + * Some of the services the Business Delegate uses are instantiated directly, and some can be, + * retrieved through service lookups. The Business Delegate itself may contain business logic too, + * potentially tying together multiple service calls, exception handling,
[+++ b/guarded-suspension/pom.xml, + <version>1.15.0-SNAPSHOT</version>]
[+++ b/observer/src/test/java/com/iluwatar/observer/AppTest.java]
[+++ b/interpreter/src/main/java/com/iluwatar/interpreter/App.java, + * The Interpreter pattern is a design pattern that specifies how to evaluate sentences , + * in a language. The basic idea is to have a class for each symbol (terminal or nonterminal) , + * in a specialized computer language. The syntax tree of a sentence in the language is an , + * instance of the composite pattern and is used to evaluate (interpret) the sentence for a , + * client., + * <p>, + * In this example we use the Interpreter pattern to break sentences into expressions , + *
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java, +import java.lang.reflect.Field;, +, + public String toJson(Video video, String[] fields) throws Exception {, + StringBuilder json = new StringBuilder().append("{");, +, + for (int i = 0, fieldsLength = fields.length; i < fieldsLength; i++) {, + json.append(getString(video, Video.class.getDeclaredField(fields[i])));, + if (i != fieldsLength - 1) {, + json.append(",");, + }, + }, + json.append("}");, + return json.toString();, + }, +, + private String getString(Video video, Field declaredField) throws IllegalAccessException {, + declaredField.setAccessible(true);, + Object value = declaredField.get(video);, + if (declaredField.get(video) instanceof Integer) {, + return "\"" + declaredField.getName() + "\"" + ": " + value;, + }, +
[+++ b/double-checked-locking/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>]
[+++ b/dao/pom.xml]
[+++ b/data-bus/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>]
[+++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/template-method/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/template-method/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java, +package com.iluwatar.templatemethod;, +, +import org.junit.Test;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +, +/**, + * Date: 12/29/15 - 18:15 PM, + *, + * @author Jeroen Meulemeester, + */, +public class HalflingThiefTest {, +, + /**, + * Verify if the thief uses the provided stealing method, + */, + @Test, + public void testSteal() {, + final StealingMethod method = mock(StealingMethod.class);, + final HalflingThief thief = new HalflingThief(method);,
[+++ b/poison-pill/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/poison-pill/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/poison-pill/src/test/java/com/iluwatar/poison/pill/ConsumerTest.java, +package com.iluwatar.poison.pill;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import java.time.LocalDateTime;, +, +import static org.mockito.Mockito.inOrder;, +, +/**, + * Date: 12/27/15 - 9:45 PM, + *, + * @author Jeroen Meulemeester, + */, +public class ConsumerTest extends StdOutTest {, +, + @Test, + public void testConsume() throws Exception {, + final Message[] messages = new Message[]{, + createMessage("you", "Hello!"),, + createMessage("me", "Hi!"),, + Message.POISON_PILL,, + createMessage("late_for_the_party", "Hello? Anyone here?"),, + };, +, + final
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/faq.md, +page-index: 1, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/faq.md, +page-index: 1, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + private static List<PlayerDetails> allPlayerDetails;, + allPlayerDetails = new ArrayList<>();, + allPlayerDetails.add(PlayerDetails.create("john@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("mary@google.com", "234-987", "+23452346"));, + allPlayerDetails.add(PlayerDetails.create("steve@google.com", "833-836", "+63457543"));, + allPlayerDetails.add(PlayerDetails.create("wayne@google.com", "319-826", "+24626"));, + allPlayerDetails.add(PlayerDetails.create("johnie@google.com", "983-322", "+3635635"));, + allPlayerDetails.add(PlayerDetails.create("andy@google.com", "934-734", "+0898245"));, + allPlayerDetails.add(PlayerDetails.create("richard@google.com", "536-738", "+09845325"));, + allPlayerDetails.add(PlayerDetails.create("kevin@google.com", "453-936", "+2423532"));, + allPlayerDetails.add(PlayerDetails.create("arnold@google.com", "114-988", "+5646346524"));, + allPlayerDetails.add(PlayerDetails.create("ian@google.com", "663-765", "+928394235"));, + allPlayerDetails.add(PlayerDetails.create("robin@google.com", "334-763", "+35448"));, + allPlayerDetails.add(PlayerDetails.create("ted@google.com", "735-964", "+98752345"));, + allPlayerDetails.add(PlayerDetails.create("larry@google.com", "734-853", "+043842423"));, + allPlayerDetails.add(PlayerDetails.create("calvin@google.com", "334-746", "+73294135"));,
[+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Random;, +, +import com.iluwatar.hexagonal.administration.LotteryAdministration;, +import com.iluwatar.hexagonal.administration.LotteryAdministrationImpl;, +import com.iluwatar.hexagonal.domain.LotteryNumbers;, +import com.iluwatar.hexagonal.domain.LotteryTicket;, +import com.iluwatar.hexagonal.domain.PlayerDetails;, +import com.iluwatar.hexagonal.service.LotteryService;, +import com.iluwatar.hexagonal.service.LotteryServiceImpl;, +, + , + private static List<PlayerDetails> allPlayerDetails;, + , + static {, + allPlayerDetails = new ArrayList<>();, + allPlayerDetails.add(PlayerDetails.create("john@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("mary@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("steve@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("wayne@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("johnie@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("andy@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("richard@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("kevin@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("arnold@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("ian@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("robin@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("ted@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("larry@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("calvin@google.com", "312-342", "+3242434242"));, + allPlayerDetails.add(PlayerDetails.create("jacob@google.com",
[+++ b/service-layer/src/main/java/com/iluwatar/servicelayer/app/App.java, + * <p>, + * <p>, + * The example application demonstrates interactions between a client ({@link App}) and a service , + * ({@link MagicService}). The service is implemented with 3-layer architecture (entity, dao, service)., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/app/App.java, + * <p>, + * <p>, + * The example application demonstrates interactions between a client ({@link App}) and a service , + * ({@link MagicService}). The service is implemented with 3-layer architecture (entity, dao, service)., + /**, + * Program entry point,
[+++ b/layers/src/main/java/com/iluwatar/layers/App.java]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability,
[+++ b/abstract-factory/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ /dev/null, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ /dev/null, +++
[+++ b/abstract-factory/pom.xml, + <version>1.3.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.3.0</version>, +++ b/adapter/pom.xml, + <version>1.3.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.3.0</version>, +++ b/adapter/pom.xml, + <version>1.3.0</version>, +++ b/bridge/pom.xml, + <version>1.3.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.3.0</version>, +++ b/adapter/pom.xml, + <version>1.3.0</version>, +++ b/bridge/pom.xml, + <version>1.3.0</version>, +++ b/builder/pom.xml, + <version>1.3.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.3.0</version>, +++ b/adapter/pom.xml, + <version>1.3.0</version>, +++ b/bridge/pom.xml, + <version>1.3.0</version>, +++ b/builder/pom.xml, + <version>1.3.0</version>, +++ b/callback/pom.xml, + <version>1.3.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.3.0</version>, +++ b/adapter/pom.xml, + <version>1.3.0</version>, +++ b/bridge/pom.xml, + <version>1.3.0</version>, +++ b/builder/pom.xml, + <version>1.3.0</version>, +++ b/callback/pom.xml, + <version>1.3.0</version>, +++ b/chain/pom.xml, + <version>1.3.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.3.0</version>, +++ b/adapter/pom.xml, + <version>1.3.0</version>, +++ b/bridge/pom.xml, + <version>1.3.0</version>, +++ b/builder/pom.xml, +
[+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, + boolean isEnhanced();, +, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, + boolean isEnhanced();, +, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java, + private boolean isEnhanced;, + /**, + *, + * @param properties {@link Properties} used to configure the service and toggle features., + */, + if (properties == null) {, + throw new IllegalArgumentException("No Properties Provided.");, + } else {, + try {, + isEnhanced = (boolean) properties.get("enhancedWelcome");, + } catch (Exception e) {, + throw new IllegalArgumentException("Invalid Enhancement Settings Provided.");, + }, + }, + if (isEnhanced()) {, +, + @Override, + public boolean isEnhanced() {, + return isEnhanced;, + }, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +
[+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerDto.java, + private final String id;, + private final String firstName;, + private final String lastName;]
[+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java, +import static org.junit.jupiter.api.Assertions.assertEquals;, + // In order to assure that throttling limits will not be reset, we use an empty throttling implementation, + Throttler timer = () -> {};, + assertEquals(2, counter, "Counter limit must be reached");]
[+++ b/balking/README.md, +++ b/balking/README.md, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/balking/README.md, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/command/src/main/java/com/iluwatar/command/Size.java, + SMALL("small"), NORMAL("normal");
[+++ b/front-controller/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.2.0</version>, + </parent>, + <artifactId>front-controller</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/front-controller/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.2.0</version>, + </parent>, + <artifactId>front-controller</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/front-controller/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {, + public static void main(String[] args) {, + System.out.println("Hello World!");,
[+++ b/pom.xml, + <module>prototype</module>, +++ b/pom.xml, + <module>prototype</module>, +++ b/prototype/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>prototype</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>prototype</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>prototype</module>, +++ b/prototype/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>prototype</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>prototype</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>,
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +---, +layout: pattern, +title: Data Bus, +folder: data-bus, +permalink: /patterns/data-bus/, +, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +, +Allows send of messages/events between components of an application, +without them needing to know about each other. They only need to know, +about the type of the message/event being sent., +, +![data bus pattern uml diagram](./etc/data-bus.urm.png "Data Bus pattern"), +, +## Applicability, +Use Data Bus pattern when, +, +* you want your components to decide themselves which messages/events they want to receive, +* you want to
[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/event-sourcing/README.md, +---, +layout: pattern, +title: Event Sourcing, +folder: event-sourcing, +permalink: /patterns/event-sourcing/, +categories: Concurrency, +tags:, + - Java, + - Difficulty Intermediate, + - Performance, +---, +, +## Intent, +, +## Applicability, +Use the Event Sourcing pattern when, +, +* You have a limited accesibility resource and the asynchronous process is acceptable to reach that, +, +## Credits, +, +++ b/.travis.yml, +sudo: false # route the build
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java, + private static Map<LotteryTicketId, LotteryTicket> tickets = new HashMap<>();, +, + @Override, + public void deleteAll() {, + tickets.clear();, + }, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java, + private static Map<LotteryTicketId, LotteryTicket> tickets = new HashMap<>();, +, + @Override, + public void deleteAll() {, + tickets.clear();, + }, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + void resetLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java, + private static Map<LotteryTicketId, LotteryTicket> tickets = new HashMap<>();, +, + @Override, + public void deleteAll() {, + tickets.clear();, + }, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + void resetLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministrationImpl.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission
[+++ b/pom.xml, + <module>promise</module>, +++ b/pom.xml, + <module>promise</module>, +++ b/promise/pom.xml, +<?xml version="1.0"?>, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, +
[+++ b/singleton/src/main/java/com/iluwatar/singleton/App.java, + * Singleton pattern ensures that the class ({@link IvoryTower}) can have only one, + * existing instance per Java classloader instance and provides global access to it. , + * <p>, + *<p>, + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/singleton/src/main/java/com/iluwatar/singleton/App.java, + * Singleton pattern ensures that the class ({@link IvoryTower}) can have only one, + * existing instance per Java classloader instance and provides global access to it. , + * <p>, + *<p>, + * <p>, + /**, + * Program
[+++ b/pom.xml, + <module>thread-pool</module>, +++ b/pom.xml, + <module>thread-pool</module>, +++ b/thread-pool/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>thread-pool</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>thread-pool</module>, +++ b/thread-pool/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>thread-pool</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/thread-pool/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {,
[+++ b/half-sync-half-async/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <artifactId>half-sync-half-async</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-all</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, + <dependencyManagement>, + <dependencies>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-all</artifactId>, + <version>1.9.5</version>, + </dependency>, + </dependencies>, + </dependencyManagement>, +</project>, +++ b/half-sync-half-async/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <artifactId>half-sync-half-async</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>,
[+++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java, +/**, + * <p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>, + * on the returned Trampoline as long as the concrete instance returned is {@link #more(Trampoline)},, + * stopping once the returned instance is {@link #done(Object)}.</p>, + * <p>Essential we convert looping via recursion into iteration,, + * the key enabling mechanism is the fact that {@link #more(Trampoline)} is a lazy operation.</p>, + *, + * @param <T> is type for returning result., +++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java, +/**, + * <p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>, + * on the
[+++ b/object-pool/src/test/java/com/iluwatar/object/pool/OliphauntPoolTest.java, +package com.iluwatar.object.pool;, +, +import org.junit.Test;, +, +import java.util.Arrays;, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotSame;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +, +/**, + * Date: 12/27/15 - 1:05 AM, + *, + * @author Jeroen Meulemeester, + */, +public class OliphauntPoolTest {, +, + /**, + * Use the same object 100 times subsequently. This should not take much time since the heavy, + * object instantiation is done only once. Verify if we get the same object each time., + */, + @Test(timeout = 5000), + public void testSubsequentCheckinCheckout() {, + final OliphauntPool
[+++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/proxy/src/main/java/com/iluwatar/proxy/App.java, + * Proxy ({@link WizardTowerProxy}) controls access to the actual object ({@link WizardTower})., +++ b/proxy/src/main/java/com/iluwatar/proxy/App.java, + * Proxy ({@link WizardTowerProxy}) controls access to the actual object ({@link WizardTower})., +++ b/proxy/src/main/java/com/iluwatar/proxy/Wizard.java, +/**, + * , + * Wizard, + *, + */, +++ b/proxy/src/main/java/com/iluwatar/proxy/App.java, + * Proxy ({@link WizardTowerProxy}) controls access to the actual object ({@link WizardTower})., +++ b/proxy/src/main/java/com/iluwatar/proxy/Wizard.java, +/**, + * , + * Wizard, + *, + */, +++ b/proxy/src/main/java/com/iluwatar/proxy/WizardTowerProxy.java, + * The proxy controlling access to the {@link WizardTower}., +++ b/proxy/src/main/java/com/iluwatar/proxy/App.java, + * Proxy ({@link WizardTowerProxy}) controls access to the actual object ({@link WizardTower})., +++
[+++ b/observer/src/main/java/com/iluwatar/observer/App.java, + * The Observer pattern is a software design pattern in which an object, called , + * the subject, maintains a list of its dependents, called observers, and notifies , + * them automatically of any state changes, usually by calling one of their methods. , + * It is mainly used to implement distributed event handling systems. The Observer , + * pattern is also a key part in the familiar model–view–controller (MVC) architectural , + * pattern. The Observer pattern is implemented in numerous programming libraries and , + * systems, including almost all
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +---, +layout: pattern, +title: Data Bus, +folder: data-bus, +permalink: /patterns/data-bus/, +, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +, +Allows send of messages/events between components of an application, +without them needing to know about each other. They only need to know, +about the type of the message/event being sent., +, +![data bus pattern uml diagram](./etc/data-bus.urm.png "Data Bus pattern"), +, +## Applicability, +Use Data Bus pattern when, +, +* you want your components to decide themselves which messages/events they want to receive, +* you want to
[+++ b/mute-idiom/etc/mute-idiom.png, +++ b/mute-idiom/etc/mute-idiom.png, +++ b/mute-idiom/etc/mute-idiom.ucls, + <position height="-1" width="-1" x="168" y="234"/> , + <position height="115" width="203" x="70" y="375"/> , + <position height="-1" width="-1" x="407" y="432"/> , + <interface id="4" language="java" name="com.iluwatar.mute.Resource" project="mute-idiom" , + file="/mute-idiom/src/main/java/com/iluwatar/mute/Resource.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="383" y="235"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </interface> , + <interface id="5" language="java" name="java.io.Closeable" project="dao" , + file="/opt/Softwares/Eclipses/MARS/eclipse/jre/lib/rt.jar" binary="true" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="384" y="109"/>
[+++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, + verify(enchantment, times(1)).apply();, + verify(enchantment, times(1)).onActivate();, + verify(enchantment, times(1)).onDeactivate();, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, + verify(enchantment, times(1)).apply();, + verify(enchantment, times(1)).onActivate();, + verify(enchantment, times(1)).onDeactivate();, +++ b/command/src/main/java/com/iluwatar/command/Size.java, + SMALL("small"), NORMAL("normal"), LARGE("large"), UNDEFINED("");
[+++ b/pom.xml, + <module>throttling</module>, +++ b/pom.xml, + <module>throttling</module>, +++ b/throttling/README.md, +---, +layout: pattern, +title: Throttling pattern, +folder: throttling, +permalink: /patterns/throttling/, +tags:, + - Java, + - Difficulty-Beginner, + - Throttling, +---, +, +## Intent, +Ensure that a given client is not able to access service resources more than the assigned limit., +![alt text](./etc/throttling-patern.png "Throttling pattern"), +, +## Applicability, +The Throttling pattern should be used:, +, +* when a service access needs to be restricted to not have high impacts on the performance of the service., +* when multiple clients are consuming the same service resources and restriction has to
[+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ /dev/null, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId,
[+++ b/cqrs/README.md, +++ b/cqrs/README.md, +++ b/cqrs/etc/cqrs.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.2.0" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="true" nesting-relationships="true" router="FAN"> , + <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </classifier-display> , + <association-display labels="true" multiplicity="true"/>, +</class-diagram>, +++ b/cqrs/README.md, +++ b/cqrs/etc/cqrs.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.2.0" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="true" nesting-relationships="true" router="FAN"> , + <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/>
[+++ /dev/null]
[+++ b/api-gateway/price-microservice/pom.xml, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/api-gateway/price-microservice/pom.xml, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceControllerTest.java, +package com.iluwatar.price.microservice;, +, +import org.junit.Assert;, +import org.junit.Test;, +, +public class PriceControllerTest {, + @Test, + public void testgetPrice() {, + PriceController priceController = new PriceController();, +, + String price = priceController.getPrice();, +, + Assert.assertEquals("20", price);, + }, +}]
[+++ b/.gitignore, +event-sourcing/Journal.json, +++ b/.gitignore, +event-sourcing/Journal.json, +++ /dev/null, +++ b/.gitignore, +event-sourcing/Journal.json, +++ /dev/null, +++ b/adapter/README.md, +## Explanation, +Real world example, +, +> Consider that you have some pictures in your memory card and you need to transfer them to your computer. In order to transfer them you need some kind of adapter that is compatible with your computer ports so that you can attach memory card to your computer. In this case card reader is an adapter., +> Another example would be the famous power adapter; a three legged plug can't be connected to a two pronged outlet, it
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/collection-pipeline/README.md, +---, +layout: pattern, +title: Collection Pipeline, +folder: collection-pipeline, +permalink: /patterns/collection-pipeline/, +categories: Functional, +tags:, + - Java, + - Difficulty-Beginner, + - Functional, +---, +, +## Intent, +Collection Pipeline introduces Function Composition and Collection Pipeline, two functional-style patterns that you can combine to iterate collections in your code. , +In functional programming, it's common to sequence complex operations through a series of smaller modular functions or operations. The series is called a composition of functions, or a function composition. When a collection of data flows through a function composition, it becomes a collection pipeline.
[+++ b/checkstyle.xml, +<?xml version="1.0"?>, +<!DOCTYPE module PUBLIC, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN", + "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +, +<!--, +, + Source = https://github.com/checkstyle/checkstyle/tree/master/src/main/resources, +, + Checkstyle configurartion that checks the Google coding conventions from:, + , + - Google Java Style, + https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html, + , + Checkstyle is very configurable. Be sure to read the documentation at, + http://checkstyle.sf.net (or in your downloaded distribution)., +, + Most Checks are configurable, be sure to consult the documentation., +, + To completely disable a check, just comment it out or delete it from the file., +, + Authors: Max Vetrenko, Ruslan Diachenko,
[+++ b/README.md, +* [Async Method Invocation](#async-method-invocation), +## <a name="async-method-invocation">Async Method Invocation</a> [&#8593;](#list-of-design-patterns), +**Intent:** Asynchronous method invocation is pattern where the calling thread is not blocked while waiting results of tasks. The pattern provides parallel processing of multiple independent tasks and retrieving the results via callbacks or waiting until everything is done. , +, +**Applicability:** Use async method invocation pattern when, +* You have multiple independent tasks that can run in parallel, +* You need to improve performance of running a group of sequential tasks, +* You have limited number of processing capacity or long running tasks and the caller
[+++ b/abstract-factory/pom.xml, + <version>1.10.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0</version>, +++ b/adapter/pom.xml, + <version>1.10.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0</version>, +++ b/adapter/pom.xml, + <version>1.10.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0</version>, +++ b/adapter/pom.xml, + <version>1.10.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0</version>, +++ b/bridge/pom.xml, + <version>1.10.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0</version>, +++ b/adapter/pom.xml, + <version>1.10.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0</version>, +++ b/bridge/pom.xml, + <version>1.10.0</version>, +++ b/builder/pom.xml, + <version>1.10.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0</version>, +++ b/adapter/pom.xml, + <version>1.10.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0</version>, +++ b/bridge/pom.xml, + <version>1.10.0</version>, +++ b/builder/pom.xml, + <version>1.10.0</version>, +++ b/business-delegate/pom.xml, + <version>1.10.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0</version>, +++ b/adapter/pom.xml, + <version>1.10.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0</version>, +++ b/bridge/pom.xml, +
[+++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (asyncResult.isCompleted()) {, + } else {, + asyncResult.await();, + return asyncResult.getValue();, + }, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (asyncResult.isCompleted()) {, + } else {, + asyncResult.await();, + return asyncResult.getValue();, + }, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.mockito.Matchers.eq;, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if
[+++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/README.md, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/README.md, +++ b/abstract-factory/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-document/README.md, +++ /dev/null, +++ /dev/null, +++ b/abstract-document/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-document/README.md, +++ /dev/null, +++ b/abstract-factory/README.md, +## Presentations, +, +* [Abstract Factory Pattern](etc/presentation.html) , +, +++ /dev/null, +++ /dev/null, +++ b/abstract-document/README.md, +++ /dev/null, +++ b/abstract-factory/README.md, +## Presentations, +, +* [Abstract Factory Pattern](etc/presentation.html) , +, +++ b/abstract-factory/etc/diagram1.png, +++ /dev/null, +++ /dev/null, +++ b/abstract-document/README.md, +++ /dev/null, +++ b/abstract-factory/README.md, +## Presentations, +, +* [Abstract Factory Pattern](etc/presentation.html) , +, +++ b/abstract-factory/etc/diagram1.png, +++ b/abstract-factory/etc/diagram2.png, +++ /dev/null, +++ /dev/null, +++ b/abstract-document/README.md, +++ /dev/null, +++ b/abstract-factory/README.md, +## Presentations, +, +* [Abstract Factory
[+++ b/repository/src/main/java/com/iluwatar/repository/App.java, + * @param args, + * command line args, + ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, + "applicationContext.xml");, +++ b/repository/src/main/java/com/iluwatar/repository/App.java, + * @param args, + * command line args, + ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, + "applicationContext.xml");, +++ b/repository/src/main/java/com/iluwatar/repository/AppConfig.java, + * This is the same example as in {@link App} but with annotations based , + * configuration for Spring., + * , + * , + * @param args, + * command line args, + AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, + AppConfig.class);, +++ b/repository/src/main/java/com/iluwatar/repository/App.java, + * @param args, + * command line args, + ClassPathXmlApplicationContext context =
[+++ b/builder/etc/builder.ucls, + <class id="4" language="java" name="com.iluwatar.builder.Hero.Builder" project="builder", +++ b/builder/etc/builder.ucls, + <class id="4" language="java" name="com.iluwatar.builder.Hero.Builder" project="builder", +++ b/builder/src/main/java/com/iluwatar/builder/App.java, +import com.iluwatar.builder.Hero.Builder;, + * parameters needed. To aid the user we introduce {@link Builder} class. {@link Hero.Builder}, + * {@link Builder} interface. When configuration is ready the build method is called to receive, + new Hero.Builder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK), + new Hero.Builder(Profession.WARRIOR, "Amberjill").withHairColor(HairColor.BLOND), + new Hero.Builder(Profession.THIEF, "Desmond").withHairType(HairType.BALD), +++ b/builder/etc/builder.ucls, + <class id="4" language="java" name="com.iluwatar.builder.Hero.Builder" project="builder", +++ b/builder/src/main/java/com/iluwatar/builder/App.java, +import com.iluwatar.builder.Hero.Builder;, + * parameters needed. To aid the user we introduce {@link Builder} class. {@link Hero.Builder}, + * {@link Builder} interface. When configuration is ready
[+++ b/throttling/README.md, +Ensure that a given client is not able to access service resources more than the assigned limit., +* when multiple clients are consuming the same service resources and restriction has to be made according to the usage per client., +++ b/throttling/README.md, +Ensure that a given client is not able to access service resources more than the assigned limit., +* when multiple clients are consuming the same service resources and restriction has to be made according to the usage per client., +++ /dev/null, +++ b/throttling/README.md, +Ensure that a given client is not able to access service resources more
[+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java, + /**, + * Any register new operation occurring on UnitOfWork is only going to be performed on commit., + */, + /**, + * Any register modify operation occurring on UnitOfWork is only going to be performed on commit., + */, + /**, + * Any register delete operation occurring on UnitOfWork is only going to be performed on commit., + */, + /***, + * All UnitOfWork operations batched together executed in commit only., + */, +++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java, + /**, + * Any register new operation occurring on UnitOfWork is only going to be performed
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java, +public interface HayesVisitor extends ModemVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java, +public interface HayesVisitor extends ModemVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +public interface ZoomVisitor extends ModemVisitor{]
[+++ b/facade/src/main/java/com/iluwatar/facade/App.java, + * The Facade design pattern is often used when a system is very complex or difficult , + * to understand because the system has a large number of interdependent classes or , + * its source code is unavailable. This pattern hides the complexities of the larger , + * system and provides a simpler interface to the client. It typically involves a single , + * wrapper class which contains a set of members required by client. These members access , + * the system on behalf of the facade client and hide the
[+++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, +import java.util.concurrent.ThreadLocalRandom;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + // Start writers, + .forEach(i -> executeService.submit(new Writer("Writer " + i, lock.writeLock(), , + ThreadLocalRandom.current().nextLong(5000))));, + LOGGER.info("Writers added...");, + // Start readers, + .forEach(i -> executeService.submit(new Reader("Reader " + i, lock.readLock(), , + ThreadLocalRandom.current().nextLong(10))));, + LOGGER.info("Readers added...");, + , + try {, + Thread.sleep(5000L);, + } catch (InterruptedException e) {, + LOGGER.error("Error sleeping before adding more readers", e);, + Thread.currentThread().interrupt();, + }, +, + // Start readers, + IntStream.range(6, 10), + .forEach(i -> executeService.submit(new Reader("Reader " + i, lock.readLock(), , + ThreadLocalRandom.current().nextLong(10))));, + LOGGER.info("More readers added...");, + , +
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java, +package com.iluwatar.cqrs.commandes;, +, +public interface ICommandService {, +, + public abstract void authorCreated(String username, String name, String email);, +, + public abstract void bookAddedToAuthor(String title, double price, String username);, +, + public abstract void authorNameUpdated(String username, String name);, +, + public abstract void authorUsernameUpdated(String oldUsername, String newUsername);, +, + public abstract void authorEmailUpdated(String username, String email);, +, + public abstract void bookTitleUpdated(String oldTitle, String newTitle);, +, + public abstract void bookPriceUpdated(String title, double price);, +, +}, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java, +package com.iluwatar.cqrs.commandes;, +, +public interface ICommandService {, +, + public abstract void authorCreated(String username, String name, String email);, +,
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + <img alt="Coverity Scan Build Status", + src="https://scan.coverity.com/projects/5634/badge.svg"/>, +</a>, +, +, +<a name="top"/>, +, +# <a name="toc">Table of Contents</a>, + - <a href="#introduction">Introduction</a>, + - <a href="#contribute">How to contribute</a>, + - <a href="#faq">Frequently Asked Questions</a>, + - <a href="#credits">Credits</a>, + - <a href="#license">License</a>, +, +, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +# <a name="faq">Frequently asked questions</a> [&#8593;](#top), +, +**<a id="Q1">Q: What is the difference between State and Strategy patterns?</a>**, +, +While the implementation is similar they solve different problems. The State, +pattern
[+++ b/observer/src/main/java/com/iluwatar/observer/App.java, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/observer/src/main/java/com/iluwatar/observer/App.java, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/observer/src/main/java/com/iluwatar/observer/Hobbits.java, +/**, + * , + * Hobbits, + *, + */, +++ b/observer/src/main/java/com/iluwatar/observer/App.java, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/observer/src/main/java/com/iluwatar/observer/Hobbits.java, +/**, + * , + * Hobbits, + *, + */, +++ b/observer/src/main/java/com/iluwatar/observer/Orcs.java, +/**, + * , + * Orcs, + *, + */, +++ b/observer/src/main/java/com/iluwatar/observer/App.java, + /**, + *
[+++ b/delegation/etc/delegation.png, +++ b/delegation/etc/delegation.png, +++ b/delegation/etc/delegation.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <interface id="1" language="java" name="com.iluwatar.delegation.simple.Printer" project="delegation" , + file="/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="362" y="84"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </interface> , + <class id="2" language="java" name="com.iluwatar.delegation.simple.AbstractPrinterController" project="delegation" , + file="/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="97" width="191" x="41" y="37"/> , +
[+++ b/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java, + enum Action {
[+++ b/execute-around/src/main/java/com/iluwatar/execute/around/App.java, + * <p>, + * In this example, we have {@link SimpleFileWriter} class that opens and closes the file, + * {@link FileWriterAction} implementation., + /**, + * Program entry point, + * @param args command line args, + * @throws IOException, + */, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/App.java, + * <p>, + * In this example, we have {@link SimpleFileWriter} class that opens and closes the file, + * {@link FileWriterAction} implementation., + /**, + * Program entry point, + * @param args command line args, + * @throws IOException, + */, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + * only has to
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +-->, +<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">]
[+++ b/layers/src/test/java/com/iluwatar/layers/AppTest.java, +package com.iluwatar.layers;, +, +import org.junit.Test;, +, +import com.iluwatar.layers.App;, +, +/**, + * , + * Application test, + *, + */, +public class AppTest {, +, + @Test, + public void test() {, + String[] args = {};, + App.main(args);, + }, +}]
[+++ b/queue-load-leveling/pom.xml, + <artifactId>queue-load-leveling</artifactId>]
[+++ b/servant/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/servant/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/servant/src/test/java/com/iluwatar/servant/KingTest.java, +package com.iluwatar.servant;, +, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, +/**, + * Date: 12/28/15 - 9:40 PM, + *, + * @author Jeroen Meulemeester, + */, +public class KingTest {, +, + @Test, + public void testHungrySoberUncomplimentedKing() {, + final King king = new King();, + king.changeMood();, + assertFalse(king.getMood());, + }, +, + @Test, + public void testFedSoberUncomplimentedKing() {, + final King king = new King();, + king.getFed();, + king.changeMood();, + assertFalse(king.getMood());,
[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HpPrinter.java, +package com.iluwatar.delegation.simple.printers;, +, +import com.iluwatar.delegation.simple.Printer;, +, +/**, + * Specialised Implementation of {@link Printer} for a HP Printer, in, + * this case the message to be printed is appended to "HP Printer : ", + *, + * @see Printer, + */, +public class HpPrinter implements Printer {, +, + /**, + * {@inheritDoc}, + */, + @Override, + public void print(String message) {, + System.out.println("HP Printer : " + message);, + }, +, +}]
[+++ b/command/src/test/java/com/iluwatar/command/CommandTest.java, + * @param expectedVisibility expected visibility of the goblin, + Visibility expectedVisibility) {, + assertEquals("Goblin's visibility must be same as expectedVisibility", expectedVisibility,]
[+++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + troll = new ClubbedTroll(troll);, + troll.attack();, + troll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at
[+++ b/monostate/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/monostate/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, + loadBalancer1.serverRequest(new Request("Hello"));, + loadBalancer2.serverRequest(new Request("Hello World"));, +++ b/monostate/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, + loadBalancer1.serverRequest(new Request("Hello"));, + loadBalancer2.serverRequest(new Request("Hello World"));, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + public void serverRequest(Request request) {, +++ b/monostate/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, + loadBalancer1.serverRequest(new Request("Hello"));, + loadBalancer2.serverRequest(new Request("Hello World"));, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + public void serverRequest(Request request) {, +++ b/monostate/src/main/java/com/iluwatar/monostate/Server.java, + public void serve(Request request) {,
[+++ b/.gitignore, +datanucleus.log, +++ b/.gitignore, +datanucleus.log, +++ b/naked-objects/.gitattributes, +#, +#, +# text files are normalized (convert crlf => lf), +# binary files are not normalized (binary is a macro for -text -diff), +#, +#, +, +, +# Unless otherwise stated, assume text, +, +* text=auto, +, +, +*.java text diff=java, +*.html text diff=html, +*.xhtml text diff=html, +*.xml text, +*.txt text, +, +, +*.jar binary, +*.so binary, +*.dll binary, +, +# images, +*.jpg binary, +*.jpeg binary, +*.png binary, +*.pdn binary, +*.pdn binary, +, +, +*.cs text diff=csharp, +, +*.sln merge=union, +*.csproj merge=union, +*.vbproj merge=union, +*.fsproj merge=union, +*.dbproj merge=union, +, +*.doc
[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when,
[+++ b/collection-pipeline/README.md, +---, +layout: pattern, +title: Collection Pipeline, +folder: collection-pipeline, +permalink: /patterns/collection-pipeline/, +categories: Functional, +tags:, + - Java, + - Difficulty-Beginner, + - Functional, +---, +, +## Intent, +Collection Pipeline introduces Function Composition and Collection Pipeline, two functional-style patterns that you can combine to iterate collections in your code. , +In functional programming, it's common to sequence complex operations through a series of smaller modular functions or operations. The series is called a composition of functions, or a function composition. When a collection of data flows through a function composition, it becomes a collection pipeline. Function Composition and Collection
[+++ b/pom.xml, + <module>execute-around</module>, + <module>property</module>]
[+++ b/module/src/main/java/com/iluwatar/module/App.java, +public class App {
[+++ b/page-object/pom.xml, +<?xml version="1.0"?>, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice
[+++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/README.md, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/README.md, +++ b/abstract-factory/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom
[+++ b/twin/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/twin/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, + Thread.sleep(750);, +++ b/twin/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, + Thread.sleep(750);, +++ b/twin/src/main/java/com/iluwatar/twin/BallThread.java, + if (!isSuspended) {, + }, + Thread.sleep(250);, +++ b/twin/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, + Thread.sleep(750);, +++ b/twin/src/main/java/com/iluwatar/twin/BallThread.java, + if (!isSuspended) {, + }, + Thread.sleep(250);, +++ b/twin/src/test/java/com/iluwatar/twin/BallItemTest.java, +package com.iluwatar.twin;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;,
[+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, + * The Client class is responsible for handling the input and running them through filters inside the, + * {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being displayed in the, + * {@link Target}., +public class Client extends JFrame { // NOSONAR, + private transient FilterManager filterManager;, + clearButton.addActionListener(e -> {, + processButton.addActionListener(e -> {, + Order order = new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(), jtFields[2].getText(),, + jtAreas[1].getText());, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, + * The Client class is responsible for handling the input and running them through filters
[+++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java,
[+++ b/specification/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/specification/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/specification/src/test/java/com/iluwatar/specification/creature/CreatureTest.java, +package com.iluwatar.specification.creature;, +, +import com.iluwatar.specification.property.Color;, +import com.iluwatar.specification.property.Movement;, +import com.iluwatar.specification.property.Size;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import java.util.Arrays;, +import java.util.Collection;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Date: 12/29/15 - 7:47 PM, + *, + * @author Jeroen Meulemeester, + */, +@RunWith(Parameterized.class), +public class CreatureTest {, +, + /**, + * @return The tested {@link Creature} instance and its expected specs, + */, + @Parameterized.Parameters, + public static
[+++ b/README.md, +## <a name="list-of-design-patterns">List of Design Patterns</a>, +* Creational Patterns, + * [Abstract Factory](#abstract-factory), + * [Builder](#builder), + * [Factory Method](#factory-method), + * [Prototype](#prototype), + * [Singleton](#singleton), +* Structural Patterns, + * [Adapter](#adapter), + * [Bridge](#bridge), + * [Composite](#composite), + * [Decorator](#decorator), + * [Facade](#facade), + * [Flyweight](#flyweight), + * [Proxy](#proxy), +* Behavioral Patterns, + * [Chain of responsibility](#chain-of-responsibility), + * [Command](#command), + * [Interpreter](#interpreter), + * [Iterator](#iterator), + * [Mediator](#mediator), + * [Memento](#memento), + * [Observer](#observer), + * [State](#state), + * [Strategy](#strategy), + * [Template method](#template-method), + * [Visitor](#visitor), +* [Model-View-Presenter](#model-view-presenter), +* [Double Checked Locking](#double-checked-locking), +* [Servant](#servant),
[+++ b/facade/README.md, +## Explanation, +, +Real world example, +, +> How does a goldmine work? "Well, the miners go down there and dig gold!" you say. That is what you believe because you are using a simple interface that goldmine provides on the outside, internally it has to do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade., +, +In plain words, +, +> Facade pattern provides a simplified interface to a complex subsystem., +, +Wikipedia says, +, +> A facade is an object that provides a simplified interface to
[+++ b/dirty-flag/README.md, +---, +layout: pattern, +title: Dirty Flag, +folder: dirty-flag, +permalink: /patterns/dirty-flag/, +categories: Other, +tags:, + - Java, + - Difficulty-Easy, + - Performance, +---, +, +## Intent, +To avoid expensive re-acquisition of resources. The resources retain their identity, are kept in some, +fast-access storage, and are re-used to avoid having to acquire them again., +, +![alt text](./etc/dirty-flag.png "Dirty Flag"), +, +## Applicability, +Use the Dirty Flag pattern when, +, +* Repetitious acquisition, initialization, and release of the same resource causes unnecessary performance overhead., +, +## Credits, +, +* [Design Patterns: Dirty Flag](https://www.takeupcode.com/podcast/89-design-patterns-dirty-flag/), +++ b/dirty-flag/README.md, +---, +layout: pattern, +title:
[+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + System.out.println("Constructing parts and car");, + System.out.println("Here is our car:");, + System.out.println("-> model: " + car.getModel().get());, + System.out.println("-> price: " + car.getPrice().get());, + System.out.println("-> parts: ");, + car.getParts().forEach(p -> System.out, + .println("\t" + p.getType().get() + "/" + p.getModel().get() + "/" + p.getPrice().get()));, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + System.out.println("Constructing parts and car");, + System.out.println("Here is our car:");, + System.out.println("-> model: " + car.getModel().get());, + System.out.println("-> price: " + car.getPrice().get());, + System.out.println("-> parts: ");, + car.getParts().forEach(p -> System.out, + .println("\t" + p.getType().get() + "/" + p.getModel().get() + "/" + p.getPrice().get()));, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + System.out.println("Elf Kingdom");, + System.out.println(app.getArmy().getDescription());, + System.out.println(app.getCastle().getDescription());, + System.out.println(app.getKing().getDescription());,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + expectedWeaponType,
[+++ b/reactor/etc/reactor.png, +++ b/reactor/etc/reactor.png, +++ b/reactor/etc/reactor.ucls, + <association id="14"> , + <end type="SOURCE" refId="13" navigable="false"> , + <attribute id="15" name="dispatcher"/> , + <multiplicity id="16" minimum="0" maximum="1"/> , + <association id="17"> , + <attribute id="18" name="selector"> , + <position height="0" width="0" x="0" y="0"/> , + </attribute> , + <multiplicity id="19" minimum="0" maximum="1"> , + <position height="0" width="0" x="0" y="0"/> , + </multiplicity> , + <dependency id="20"> , + <end type="TARGET" refId="10"/> , + </dependency> , + <generalization id="21"> , + <end type="SOURCE" refId="7"/> , + <realization id="22"> , + <bendpoint x="309" y="348"/> , + <end type="SOURCE" refId="4"/> , + <end
[+++ b/promise/etc/promise.png, +++ b/promise/etc/promise.png, +++ b/promise/etc/promise.ucls, + <position height="-1" width="-1" x="798" y="541"/> , + <position height="-1" width="-1" x="847" y="345"/> , + <position height="-1" width="-1" x="158" y="336"/> , + <position height="-1" width="-1" x="166" y="546"/> , + <position height="-1" width="-1" x="801" y="189"/> , + <dependency id="9"> , + <dependency id="10"> , + <dependency id="11"> , + <end type="TARGET" refId="6"/> , + <generalization id="12"> , + <dependency id="13"> , + <dependency id="14"> , + <end type="SOURCE" refId="1"/> , + <end type="TARGET" refId="7"/> , + </dependency> , + <realization id="15"> , + <end type="SOURCE" refId="3"/> , + <end type="TARGET" refId="2"/> , + </realization>
[+++ b/repository/src/main/java/com/iluwatar/repository/App.java, + * <p>, + * In this example we utilize Spring Data to automatically generate a repository for us from the {@link Person}, + * domain object. Using the {@link PersonRepository} we perform CRUD operations on the entity. Underneath we have, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/repository/src/main/java/com/iluwatar/repository/App.java, + * <p>, + * In this example we utilize Spring Data to automatically generate a repository for us from the {@link Person}, + * domain object. Using the {@link PersonRepository} we perform CRUD operations on the entity.
[+++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/README.md, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/README.md, +++ b/abstract-factory/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java, + * In {@link Inventory} we store the items with a given size. However, we do not store, + * , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java, + * In {@link Inventory} we store the items with a given size. However, we do not store, + * , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java, +/**, + * , + * Inventory, + *, + */, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java, + * In {@link Inventory} we
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, +/**, + * All ModemVisitor interface extends all visitor interfaces, + */, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, +/**, + * All ModemVisitor interface extends all visitor interfaces, + */, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * each one having its own visitor interface {@link HayesVisitor} and {@link ZoomVisitor} , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, +/**, + * All ModemVisitor interface extends all visitor interfaces, + */, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * each one having its own visitor interface {@link HayesVisitor} and {@link ZoomVisitor} , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, + * Accepts all visitors but honors only HayesVisitor, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, +/**, + * All ModemVisitor interface extends all visitor interfaces,
[+++ b/reactor/pom.xml, + <version>1.7.0</version>]
[+++ b/pom.xml, + <spring-data.version>1.8.1.RELEASE</spring-data.version>, + <dependency>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + <version>${hibernate.version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + <version>${spring-data.version}</version>, + </dependency>, +++ b/pom.xml, + <spring-data.version>1.8.1.RELEASE</spring-data.version>, + <dependency>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + <version>${hibernate.version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + <version>${spring-data.version}</version>, + </dependency>, +++ b/repository/pom.xml]
[+++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + Troll clubbed = new ClubbedTroll(troll);, + clubbed.attack();, + clubbed.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", clubbed.getAttackPower());, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you!
[+++ b/interpreter/src/main/java/com/iluwatar/interpreter/App.java, + * Interpreter pattern breaks sentences into expressions ({@link Expression}) that can, + * Program entry point., + * <p>, + * @param args command line args, + * , +++ b/interpreter/src/main/java/com/iluwatar/interpreter/App.java, + * Interpreter pattern breaks sentences into expressions ({@link Expression}) that can, + * Program entry point., + * <p>, + * @param args command line args, + * , +++ b/interpreter/src/main/java/com/iluwatar/interpreter/Expression.java, +/**, + * , + * Expression, + *, + */, +++ b/interpreter/src/main/java/com/iluwatar/interpreter/App.java, + * Interpreter pattern breaks sentences into expressions ({@link Expression}) that can, + * Program entry point., + * <p>,
[+++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + troll = new ClubbedTroll(troll);, + troll.attack();, + troll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at
[+++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/App.java, + * A system with lots of objects can lead to complexities when a client wants to subscribe , + * to events. The client has to find and register for each object individually, if each , + * object has multiple events then each event requires a separate subscription., + * <p>, + * An Event Aggregator acts as a single source of events for many objects. It registers , + * for all the events of the many objects allowing clients to register with just the aggregator.]
[+++ b/cqrs/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/cqrs/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/pom.xml, + <module>cqrs</module>]
[+++ b/delegation/etc/delegation.png, +++ b/delegation/etc/delegation.png, +++ b/delegation/etc/delegation.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <interface id="1" language="java" name="com.iluwatar.delegation.simple.Printer" project="delegation" , + file="/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="362" y="84"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </interface> , + <class id="2" language="java" name="com.iluwatar.delegation.simple.AbstractPrinterController" project="delegation" , + file="/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="97" width="191" x="41" y="37"/> , +
[+++ b/README.md, +### Architectual Patterns, +, +An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context., +, +* [Data Access Object](#dao), +, +## <a name="dao">Data Access Object</a> [&#8593;](#list-of-design-patterns), +**Intent:** Object provides an abstract interface to some type of database or other persistence mechanism., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/dao/etc/dao.png "Data Access Object"), +, +**Applicability:** Use the Data Access Object in any of the following situations, +* when you want to consolidate how the data layer is accessed, +* when you want to avoid writing multiple data retrieval/persistence layers, +, +++ b/README.md, +###
[+++ b/layers/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/layers/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, + List<CakeTopping> allToppings = getAvailableToppingEntities();, + List<CakeTopping> matchingToppings =, + allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name)), + CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());, +++ b/layers/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, + List<CakeTopping> allToppings = getAvailableToppingEntities();, + List<CakeTopping> matchingToppings =, + allToppings.stream().filter((t) -> t.getName().equals(cakeInfo.cakeToppingInfo.name)), + CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().getId());, +++ b/layers/src/main/java/com/iluwatar/layers/CakeInfo.java, + return String.format("CakeInfo id=%d topping=%s layers=%s totalCalories=%d", id.orElse(-1L),, +++ b/layers/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++
[+++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + - <a href="#contribute">How to contribute</a>, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +, +, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + - <a href="#contribute">How to contribute</a>, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +, +, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/README.md, +[![Build
[+++ b/README.md, +* [Half-Sync/Half-Async](#half-sync-half-async), +## <a name="half-sync-half-async">Half-Sync/Half-Async</a> [&#8593;](#list-of-design-patterns), +**Intent:** The Half-Sync/Half-Async pattern decouples synchronous I/O from asynchronous I/O in a system to simplify concurrent programming effort without degrading execution efficiency., +![Half-Sync/Half-Async class diagram](./half-sync-half-async/etc/half-sync-half-async.png), +, +**Applicability:** Use Half-Sync/Half-Async pattern when, +* A system possesses following characteristics:, + * System must perform tasks in response to external events that occur asynchronously, like hardware interrupts in OS, + * It is inefficient to dedicate separate thread of control to perform synchronous I/O for each external source of event, + * The higher level tasks in the system can be simplified significantly if
[+++ b/data-mapper/etc/data-mapper.png, +++ b/data-mapper/etc/data-mapper.png, +++ b/data-mapper/etc/data-mapper.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.datamapper.Student" project="java-design-patterns" , + file="/java-design-patterns/java/com/iluwatar/datamapper/Student.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="966" y="283"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <interface id="2" language="java" name="com.iluwatar.datamapper.StudentDataMapper" project="java-design-patterns" , + file="/java-design-patterns/java/com/iluwatar/datamapper/StudentDataMapper.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="749" y="278"/> , + <display
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/data-mapper/pom.xml, + <version>1.7.0</version>
[+++ b/event-asynchronous/etc/event-asynchronous.ucls, +<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true"
[+++ b/checkstyle.xml, + <property name="format", + value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>, + <property name="tokens", + value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>, + <property name="tokens", + value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>, + <property name="customImportOrderRules", + value="STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE"/>, + <property name="tokens", + value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>, + <property name="forbiddenSummaryFragments", + value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>]
[+++ b/.travis.yml, +, +# Migration to container-based infrastructure , +sudo: false, +++ b/.travis.yml, +, +# Migration to container-based infrastructure , +sudo: false, +++ b/README.md, +Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system., +Design patterns can speed up the development process by providing tested, proven development paradigms., +Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns., +Creational design patterns abstract the instantiation process. They help make a
[+++ b/api-gateway/image-microservice/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/abstract-factory/index.md, +**Also known as:** Kit, +**Intent:** Provide an interface for creating families of related or dependent, +**Applicability:** Use the Abstract Factory pattern when, +**Real world examples:**, +**Credits**, +++ b/abstract-factory/index.md, +**Also known as:** Kit, +**Intent:** Provide an interface for creating families of related or dependent, +**Applicability:** Use the Abstract Factory pattern when, +**Real world examples:**, +**Credits**, +++ b/adapter/index.md, +**Also known as:** Wrapper, +**Intent:** Convert the interface of a class into another interface the clients, +**Applicability:** Use the Adapter pattern when, +**Real world examples:**, +**Credits**, +++ b/abstract-factory/index.md, +**Also known as:** Kit, +**Intent:** Provide an interface for creating families of related
[+++ b/extension-objects/README.md, +---, +layout: pattern, +title: Extension objects, +folder: extension-objects, +permalink: /patterns/extension-objects/, +categories: Behavioral, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Anticipate that an object’s interface needs to be extended in the future. Additional, +interfaces are defined by extension objects., +, +![Extension_objects](./etc/extension_obj.png "Extension objects"), +, +## Applicability, +Use the Extension Objects pattern when:, +, +* you need to support the addition of new or unforeseen interfaces to existing classes and you don't want to impact clients that don't need this new interface. Extension Objects lets you keep related operations together by defining them in a
[+++ b/.gitignore, +/bin/, +/bin/, +/bin/, +
[+++ b/pom.xml, + <module>reactor</module>, +++ b/pom.xml, + <module>reactor</module>, +++ b/reactor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.6.0</version>, + </parent>, + <artifactId>reactor</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>reactor</module>, +++ b/reactor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.6.0</version>, + </parent>, + <artifactId>reactor</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +package com.iluwatar.reactor.app;, +, +import java.io.IOException;, +, +import
[+++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ b/abstract-factory/etc/abstract-factory.png, +++ /dev/null, +++ b/abstract-factory/etc/abstract-factory.png, +++ b/abstract-factory/etc/abstract-factory.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <interface id="1" language="java" name="com.iluwatar.abstractfactory.Army" project="abstract-factory" , + file="/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Army.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="70" width="161" x="1407" y="300"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </interface> , + <interface id="2" language="java" name="com.iluwatar.abstractfactory.KingdomFactory" project="abstract-factory" , + file="/abstract-factory/src/main/java/com/iluwatar/abstractfactory/KingdomFactory.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="124"
[+++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + int id = 0;, + public synchronized void serverRequest(Request request) {, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + int id = 0;, + public synchronized void serverRequest(Request request) {, +++ b/pom.xml, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + int id = 0;, + public synchronized void serverRequest(Request request) {, +++ b/pom.xml, +++ /dev/null, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + int id = 0;, + public synchronized void serverRequest(Request request) {, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + int id = 0;, + public synchronized void serverRequest(Request request) {, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + int id = 0;, + public
[+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +/**, + * <p>, + * This application demonstrates the async method invocation pattern. Key parts of the pattern are, + * <code>AsyncResult</code> which is an intermediate container for an asynchronously evaluated value,, + * <code>AsyncCallback</code> which can be provided to be executed on task completion and, + * <code>AsyncExecutor</code> that manages the execution of the async tasks., + * </p>, + * <p>, + * The main method shows example flow of async invocations. The main thread starts multiple tasks with, + * variable durations and then continues its own work. When the main thread has
[+++ b/README.md, +<!-- the line below needs to be an empty line C: (its because kramdown isnt, + that smart and dearly wants an empty line before a heading to be able to, + display it as such, e.g. website) -->, +, +# Design pattern samples in Java, +, +#### Browse and view all of the patterns on our Website: [iluwatar.github.io/java-design-patterns/](https://iluwatar.github.io/java-design-patterns/), +, +, +# <a name="toc">Table of Contents</a>, +4. Implement the code changes in your fork. Remember to add sufficient comments, +5. Format the code according to [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html), + * [Eclipse configuration](https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml), + * [IntelliJ configuration](https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml),
[+++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/.gitignore, +
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, + private final Integer id;, + private final String title;, + private final Integer length;, + private final String description;, + private final String director;, + private final String language;]
[+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java, + *, + * Note: if created by reflection then a singleton will not be created but multiple options in the same classloader]
[+++ b/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import com.iluwatar.hexagonal.banking.WireTransfersImpl;, +import com.iluwatar.hexagonal.domain.LotteryConstants;, + allPlayerDetails.add(PlayerDetails.create("mary@google.com", "234-987", "+23452346"));, + allPlayerDetails.add(PlayerDetails.create("steve@google.com", "833-836", "+63457543"));, + allPlayerDetails.add(PlayerDetails.create("wayne@google.com", "319-826", "+24626"));, + allPlayerDetails.add(PlayerDetails.create("johnie@google.com", "983-322", "+3635635"));, + allPlayerDetails.add(PlayerDetails.create("andy@google.com", "934-734", "+0898245"));, + allPlayerDetails.add(PlayerDetails.create("richard@google.com", "536-738", "+09845325"));, + allPlayerDetails.add(PlayerDetails.create("kevin@google.com", "453-936", "+2423532"));, + allPlayerDetails.add(PlayerDetails.create("arnold@google.com", "114-988", "+5646346524"));, + allPlayerDetails.add(PlayerDetails.create("ian@google.com", "663-765", "+928394235"));, + allPlayerDetails.add(PlayerDetails.create("robin@google.com", "334-763", "+35448"));, + allPlayerDetails.add(PlayerDetails.create("ted@google.com", "735-964", "+98752345"));, + allPlayerDetails.add(PlayerDetails.create("larry@google.com", "734-853", "+043842423"));, + allPlayerDetails.add(PlayerDetails.create("calvin@google.com", "334-746", "+73294135"));, + allPlayerDetails.add(PlayerDetails.create("jacob@google.com", "444-766", "+358042354"));, + allPlayerDetails.add(PlayerDetails.create("edwin@google.com", "895-345", "+9752435"));, + allPlayerDetails.add(PlayerDetails.create("mary@google.com", "760-009", "+34203542"));, + allPlayerDetails.add(PlayerDetails.create("lolita@google.com", "425-907", "+9872342"));, + allPlayerDetails.add(PlayerDetails.create("bruno@google.com", "023-638", "+673824122"));, + allPlayerDetails.add(PlayerDetails.create("peter@google.com", "335-886", "+5432503945"));, + allPlayerDetails.add(PlayerDetails.create("warren@google.com", "225-946", "+9872341324"));, + allPlayerDetails.add(PlayerDetails.create("monica@google.com", "265-748", "+134124"));, + allPlayerDetails.add(PlayerDetails.create("ollie@google.com", "190-045", "+34453452"));, + allPlayerDetails.add(PlayerDetails.create("yngwie@google.com", "241-465", "+9897641231"));, +
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java, +public interface CustomerSchemaSql {, + String CREATE_SCHEMA_SQL = "CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100), " , + String DELETE_SCHEMA_SQL = "DROP TABLE CUSTOMERS";, +++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java, +public interface CustomerSchemaSql {, + String CREATE_SCHEMA_SQL = "CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100), " , + String DELETE_SCHEMA_SQL = "DROP TABLE CUSTOMERS";, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + try (Scanner scanner = new Scanner(System.in)) {, + if ("1".equals(cmd)) {, + } else if ("2".equals(cmd)) {, + } else if ("3".equals(cmd)) {, + } else if ("4".equals(cmd)) {, + }, + return scanner.next();, +++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java, +public interface CustomerSchemaSql {, + String CREATE_SCHEMA_SQL =
[+++ b/queue-load-leveling/pom.xml]
[+++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();]
[+++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + return state > RUNNING;, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + return state > RUNNING;, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + return state > RUNNING;, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +++ b/bridge/src/test/java/com/iluwatar/bridge/AppTest.java, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/throttling/README.md, +## Intent, +Ensure that a given tenant is not able to access resources more than the assigned limit., +![alt text](./etc/throttling-patern.png "Throttling pattern"), +, +++ b/throttling/README.md, +## Intent, +Ensure that a given tenant is not able to access resources more than the assigned limit., +![alt text](./etc/throttling-patern.png "Throttling pattern"), +, +++ /dev/null, +++ b/throttling/README.md, +## Intent, +Ensure that a given tenant is not able to access resources more than the assigned limit., +![alt text](./etc/throttling-patern.png "Throttling pattern"), +, +++ /dev/null, +++ b/throttling/etc/throttling-patern.png, +++ b/throttling/README.md, +## Intent, +Ensure that a given tenant is not able to access resources more than the
[+++ b/monostate/README.md, +## Also known as, +Borg, +, +++ b/monostate/README.md, +## Also known as, +Borg, +, +++ b/pom.xml, +++ b/monostate/README.md, +## Also known as, +Borg, +, +++ b/pom.xml, +++ /dev/null, +++ b/monostate/README.md, +## Also known as, +Borg, +, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/monostate/README.md, +## Also known as, +Borg, +, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/monostate/README.md, +## Also known as, +Borg, +, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/monostate/README.md, +## Also known as, +Borg, +, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <module>unit-of-work</module>, + </goals>, +++ b/pom.xml, + <module>unit-of-work</module>, + </goals>, +++ b/unit-of-work/etc/unit-of-work.urm.puml, +@startuml, +package com.iluwatar.unitofwork {, + class Student {, + - address : String, + - id : Integer, + - name : String, + + Student(id : Integer, name : String, address : String), + }, +}, +@enduml, +++ b/pom.xml, + <module>unit-of-work</module>, + </goals>, +++ b/unit-of-work/etc/unit-of-work.urm.puml, +@startuml, +package com.iluwatar.unitofwork {, + class Student {, + - address : String, + - id : Integer, + - name : String, + + Student(id : Integer, name : String, address : String), + }, +}, +@enduml, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasPrice {, + + getPrice() : Optional<Number>, + class Car {, + + Car(properties : Map<String, Object>), + }, + interface HasModel {, + + getModel() : Optional<String>, + class App {, + + App(), + + main(args : String[]) {static}, + interface Document {, + + children(String, Function<Map<String, Object>, T>) : Stream<T> {abstract}, + + get(String) : Object {abstract}, + + put(String, Object) {abstract}, +AbstractDocument ..|> Document , +HasPrice --|> Document , +HasParts --|> Document , +HasModel --|> Document , +++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasPrice {, + + getPrice() : Optional<Number>, + class Car
[+++ /dev/null, +++ /dev/null, +++ b/chain/index.md, +---, +layout: pattern, +title: Chain of responsibility, +folder: chain, +permalink: /patterns/chain/, +categories: Behavioral, +tags: Java, +---, +, +**Intent:** Avoid coupling the sender of a request to its receiver by giving, +more than one object a chance to handle the request. Chain the receiving, +objects and pass the request along the chain until an object handles it., +, +![alt text](./chain/etc/chain_1.png "Chain of Responsibility"), +, +**Applicability:** Use Chain of Responsibility when, +, +* more than one object may handle a request, and the handler isn't known a priori. The handler should be ascertained automatically, +*
[+++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;,
[+++ b/balking/README.md, +++ b/balking/README.md, +++ b/eip-wire-tap/README.md, +---, +layout: pattern, +title: EIP Wire Tap, +folder: eip-wire-tap, +permalink: /patterns/eip-wire-tap/, +categories: Enterprise integration, +tags:, + - Java, + - Difficulty-Intermittent, + - Enterprise integration, +---, +, +## Intent, +In most integration cases there is a need to monitor the messages flowing through the system. It is usually achieved, +by intercepting the message and redirecting it to a different location like console, filesystem or the database., +It is important that such functionality should not modify the original message and influence the processing path., +, +![alt text](./etc/wiretap.gif "Wire Tap"), +, +## Applicability, +Use the
[+++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697), +++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697), +++ b/dao/index.md, +tags: Java, +++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697), +++ b/dao/index.md, +tags: Java, +++ b/front-controller/index.md, +++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697), +++ b/dao/index.md, +tags: Java, +++ b/front-controller/index.md, +++ b/half-sync-half-async/index.md, +++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented
[+++ b/README.md, +* [Repository](#repository), +## <a name="repository">Repository</a> [&#8593;](#list-of-design-patterns), +**Intent:** Repository layer is added between the domain and data mapping layers to isolate domain objects from details of the database access code and to minimize scattering and duplication of query code. The Repository pattern is especially useful in systems where number of domain classes is large or heavy querying is utilized., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/repository/etc/repository.png "Repository"), +, +**Applicability:** Use the Repository pattern when, +* the number of domain objects is large, +* you want to avoid duplication of query code, +* you want to keep the database querying code in single
[+++ b/pom.xml, + <module>strategy</module>, +++ b/pom.xml, + <module>strategy</module>, +++ b/strategy/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>strategy</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>strategy</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>strategy</module>, +++ b/strategy/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>strategy</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>strategy</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>,
[+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java]
[+++ /dev/null, +++ /dev/null, +++ b/naked-objects/pom.xml, + <isis.version>1.9.0</isis.version>, +++ /dev/null, +++ b/naked-objects/pom.xml, + <isis.version>1.9.0</isis.version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <hibernate.version>5.0.1.Final</hibernate.version>, + <spring-data.version>1.9.0.RELEASE</spring-data.version>, +++ /dev/null, +++ b/naked-objects/pom.xml, + <isis.version>1.9.0</isis.version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <hibernate.version>5.0.1.Final</hibernate.version>, + <spring-data.version>1.9.0.RELEASE</spring-data.version>, +++ /dev/null]
[+++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <groupId>com.iluwatar.layers</groupId>, + <artifactId>layers</artifactId>, + <dependencies>, + <dependency>, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/tls/src/test/java/com/iluwatar/tls/AppTest.java, +/**, + * The MIT License, + * Copyright (c) 2016 Thomas Bauer, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/retry/pom.xml, + <version>1.18.0-SNAPSHOT</version>]
[+++ b/dao/src/main/java/com/iluwatar/dao/App.java, + * Data Access Object (DAO) is an object that provides an abstract interface to some type of database or other , + * persistence mechanism. By mapping application calls to the persistence layer, DAO provide some specific data , + * operations without exposing details of the database. This isolation supports the Single responsibility principle. , + * It separates what data accesses the application needs, in terms of domain-specific objects and data types , + * (the public interface of the DAO), from how these needs can be satisfied with a specific DBMS., + *
[+++ b/.travis.yml]
[+++ b/event-asynchronous/pom.xml, + <version>1.14.0-SNAPSHOT</version>]
[+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +++ b/delegation/etc/delegation.png, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +++ b/delegation/etc/delegation.png, +++ b/delegation/etc/delegation.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.delegation.simple.printers.HpPrinter" project="delegation" , + file="/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HpPrinter.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="764" y="272"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display>
[+++ b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java, +public final class CustomerSchemaSql {, + private CustomerSchemaSql() {}, +, + public static final String CREATE_SCHEMA_SQL = "CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100), " , + public static final String DELETE_SCHEMA_SQL = "DROP TABLE CUSTOMERS";, + , +++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java, +public final class CustomerSchemaSql {, + private CustomerSchemaSql() {}, +, + public static final String CREATE_SCHEMA_SQL = "CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100), " , + public static final String DELETE_SCHEMA_SQL = "DROP TABLE CUSTOMERS";, + , +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + Scanner scanner = new Scanner(System.in);, + if (cmd.equals("1")) {, + } else if (cmd.equals("2")) {, +
[+++ b/README.md, +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/builder/index.md, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/builder/index.md, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append("This is a "), + .append(profession), + .append(" named "), + .append(name);, + sb.append(hairColor).append(" ");, + sb.append(hairType).append(" ");, + sb.append(" wearing ").append(armor);, + sb.append(" and wielding a ").append(weapon);, +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/builder/index.md, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append("This is a "), + .append(profession), + .append(" named "),
[+++ b/abstract-factory/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +++ b/abstract-factory/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +++ b/abstract-factory/src/test/java/com/iluwatar/AppTest.java, +package com.iluwatar;
[+++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public final class Hero {, + private Hero(HeroBuilder builder) {, + this.profession = builder.profession;, + this.name = builder.name;, + this.hairColor = builder.hairColor;, + this.hairType = builder.hairType;, + this.weapon = builder.weapon;, + this.armor = builder.armor;, + }, +, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public final class Hero {, + private Hero(HeroBuilder builder) {, + this.profession = builder.profession;, + this.name = builder.name;, + this.hairColor = builder.hairColor;, + this.hairType = builder.hairType;, + this.weapon = builder.weapon;, + this.armor = builder.armor;, + }, +,
[+++ b/step-builder/src/test/java/com/iluwatar/stepbuilder/CharacterStepBuilderTest.java, +package com.iluwatar.stepbuilder;, +, +import org.junit.Test;, +, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +/**, + * Date: 12/29/15 - 9:21 PM, + *, + * @author Jeroen Meulemeester, + */, +public class CharacterStepBuilderTest {, +, + /**, + * Build a new wizard {@link Character} and verify if it has the expected attributes, + */, + @Test, + public void testBuildWizard() {, + final Character character = CharacterStepBuilder.newBuilder(), + .name("Merlin"), + .wizardClass("alchemist"), + .withSpell("poison"), + .withAbility("invisibility"), + .withAbility("wisdom"), + .noMoreAbilities(), + .build();, +, + assertEquals("Merlin", character.getName());, + assertEquals("alchemist",
[+++ b/eip-aggregator/README.md, +---, +layout: pattern, +title: EIP Aggregator, +folder: eip-aggregator, +permalink: /patterns/eip-aggregator/, +categories: Enterprise integration, +tags:, + - Java, + - Difficulty-Intermittent, + - Enterprise integration, +---, +, +## Intent, +Sometimes in enterprise systems there is a need to group incoming data in order to process it as a whole. For example, +you may need to gather offers and after defined number of offers has been received you would like to choose the one with, +the best parameters. , +, +Aggregator allows you to merge messages based on defined criteria and parameters. It gathers original messages, , +applies aggregation
[+++ b/unit-of-work/src/test/java/com/iluwatar/unitofwork/AppTest.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2014-2017 Piyush Chaudhari, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, +
[+++ b/.gitignore, +++ b/.gitignore, +++ b/adapter/src/main/java/com/iluwatar/App.java, + GnomeEngineeringManager manager = new GnomeEngineeringManager();
[+++ b/singleton/src/main/java/com/iluwatar/singleton/App.java, + * Singleton pattern ensures that the class can have only one existing instance per Java classloader instance , + * and provides global access to it., + * One of the risks of this pattern is that bugs resulting from setting a singleton up in, + * There are many ways to implement the Singleton. The first one is the eagerly initialized instance in, + * {@link IvoryTower}. Eager initialization implies that the implementation is thread safe. If you can, + * afford giving up control of the instantiation moment, then this implementation will suit you
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, +package com.iluwatar.caching;, +, +/**, + *, + * The Caching pattern describes how to avoid expensive re-acquisition of resources by not releasing, + * the resources immediately after their use. The resources retain their identity, are kept in some, + * fast-access storage, and are re-used to avoid having to acquire them again. There are three main, + * caching strategies/techniques in this pattern; each with their own pros and cons. They are:, + * <code>write-through</code> which writes data to the cache and DB in a single transaction,, + * <code>write-around</code> which writes data immediately into the
[+++ b/README.md, +++ b/README.md, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/business-delegate/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">,
[+++ b/event-driven-architecture/README.md, +* [Event-driven architecture - Wikipedia](http://www.computerweekly.com/feature/Write-through-write-around-write-back-Cache-explained), +++ b/event-driven-architecture/README.md, +* [Event-driven architecture - Wikipedia](http://www.computerweekly.com/feature/Write-through-write-around-write-back-Cache-explained), +++ b/extension-objects/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.16.0-SNAPSHOT</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>extension-objects</artifactId>, +, +, +</project>, +++ b/event-driven-architecture/README.md, +* [Event-driven architecture - Wikipedia](http://www.computerweekly.com/feature/Write-through-write-around-write-back-Cache-explained), +++ b/extension-objects/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.16.0-SNAPSHOT</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>extension-objects</artifactId>, +, +, +</project>, +++ b/extension-objects/src/main/java/App.java, +import abstractextensions.CommanderExtension;, +import abstractextensions.SergeantExtension;, +import abstractextensions.SoldierExtension;, +import units.CommanderUnit;, +import units.SergeantUnit;, +import units.SoldierUnit;, +import units.Unit;, +, +/**,
[+++ b/data-bus/pom.xml, +++ b/data-bus/pom.xml, +++ /dev/null, +++ b/data-bus/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/data-bus/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/data-bus/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/data-bus/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/data-bus/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/data-bus/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/data-bus/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/data-bus/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <module>value-object</module>, +++ b/pom.xml, + <module>value-object</module>, +++ b/value-object/value-object/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.10.0-SNAPSHOT</version>, + </parent>, + <artifactId>value-object</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>value-object</module>, +++ b/value-object/value-object/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.10.0-SNAPSHOT</version>, + </parent>, + <artifactId>value-object</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>,
[+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (asyncResult.isCompleted()) {, + } else {, + asyncResult.await();, + return asyncResult.getValue();, + }, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (asyncResult.isCompleted()) {, + } else {, + asyncResult.await();, + return asyncResult.getValue();, + }, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.mockito.Matchers.eq;, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (asyncResult.isCompleted()) {, + } else {, + asyncResult.await();, + return asyncResult.getValue();, + }, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.mockito.Matchers.eq;, +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (asyncResult.isCompleted()) {, + } else {, + asyncResult.await();, + return asyncResult.getValue();, + }, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.mockito.Matchers.eq;, +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (asyncResult.isCompleted()) {,
[+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java, + Field[] ff = HolderThreadSafe.class.getDeclaredFields();, + for (Field f: ff) {, + f.setAccessible(true);, + }, + assertNull(ff[0].get(hts));, + Field[] ff = HolderThreadSafe.class.getDeclaredFields();, + for (Field f: ff) {, + f.setAccessible(true);, + }, + assertNotNull(ff[0].get(hts));]
[+++ b/monad/index.md, +* [Monad on Wikipedia](https://en.wikipedia.org/wiki/Monad_(functional_programming), +++ b/monad/index.md, +* [Monad on Wikipedia](https://en.wikipedia.org/wiki/Monad_(functional_programming), +++ b/monad/src/test/java/com/iluwatar/monad/MonadTest.java, + User john = new User("John", 17, Sex.MALE, "john@qwe.bar");, + User sarah = new User("Sarah", 42, Sex.FEMALE, "sarah@det.org");]
[+++ /dev/null, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +# Getting started, +, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/). , +, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +, + - Using difficulty tags, `Difficulty-Beginner`, `Difficulty-Intermediate` & `Difficulty-Expert`., + - Using pattern categories, `Creational`, `Behavioral` and others., + - Search for a specific pattern. Can't find one? Please report a new pattern [here](https://github.com/iluwatar/java-design-patterns/issues)., +, +++ b/.travis.yml, +++ b/README.md, +# Getting started, +, +Before you dive into the material, you
[+++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/README.md, +++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/README.md, +++ /dev/null, +++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, + , +# Parameter to run on
[+++ b/CODE_COVERAGE.md, +> mvn clean verify, +++ b/CODE_COVERAGE.md, +> mvn clean verify, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java, + public void start() {, +++ b/CODE_COVERAGE.md, +> mvn clean verify, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java, + public void start() {, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java, + getJavaChannel().socket().bind(, + getJavaChannel().configureBlocking(false);]
[+++ b/PULL_REQUEST_TEMPLATE.md, +, +Pull request title, +, +- Clearly and concisely describes what it does, +- Refer to the issue that it solves, if available, +, +, +Pull request description, +, +- Describes the main changes that come with the pull request, +- Any relevant additional information is provided, +, +, +, +> For detailed contributing instructions see https://github.com/iluwatar/java-design-patterns/wiki/01.-How-to-contribute, +++ b/PULL_REQUEST_TEMPLATE.md, +, +Pull request title, +, +- Clearly and concisely describes what it does, +- Refer to the issue that it solves, if available, +, +, +Pull request description, +, +- Describes the main changes that come with the
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/api-gateway/pom.xml, + <packaging>jar</packaging>, +, + <properties>, + <spring.version>4.2.5.RELEASE</spring.version>, + <spring-boot.version>1.3.3.RELEASE</spring-boot.version>, + </properties>, +, + <dependencyManagement>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-dependencies</artifactId>, + <version>${spring-boot.version}</version>, + <type>pom</type>, + <scope>import</scope>, + </dependency>, + </dependencies>, + </dependencyManagement>, + <dependencies>, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-webmvc</artifactId>, + <version>${spring.version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-web</artifactId>, + <version>${spring-boot.version}</version>, + </dependency>, + <dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + <version>4.5.2</version>, + </dependency>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-maven-plugin</artifactId>, + <version>${spring-boot.version}</version>, + <executions>, + <execution>, + <goals>, + <goal>repackage</goal>, + </goals>,
[+++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java, + * , + * , + /**, + * Program entry point, + * @param args command line args, + */, + /**, + * , + * ArithmeticSumTask, + *, + */, +++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java, + * , + * , + /**, + * Program entry point, + * @param args command line args, + */, + /**, + * , + * ArithmeticSumTask, + *, + */, +++ b/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AppTest.java, +/**, + * , + * Application test, + *, + */]
[+++ b/aggregator-microservices/README.md, +---, +layout: pattern, +title: Aggregator Microservices, +folder: aggregator-microservices, +permalink: /patterns/aggregator-microservices/, +categories: Architectural, +tags:, +- Java, +- Spring, +---, +, +## Intent, +, +The user makes a single call to the Aggregator, and the aggregator then calls each relevant microservice and collects, +the data, apply business logic to it, and further publish is as a REST Endpoint., +More variations of the aggregator are: , +- Proxy Microservice Design Pattern: A different microservice is called upon the business need. , +- Chained Microservice Design Pattern: In this case each microservice is dependent/ chained to a series , +of other
[+++ b/abstract-document/pom.xml, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-engine</artifactId>, +++ b/abstract-document/pom.xml, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-engine</artifactId>, +++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java, +import org.junit.jupiter.api.Test;, +import static org.junit.jupiter.api.Assertions.assertEquals;, +import static org.junit.jupiter.api.Assertions.assertNotNull;, +++ b/abstract-document/pom.xml, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-engine</artifactId>, +++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java, +import org.junit.jupiter.api.Test;, +import static org.junit.jupiter.api.Assertions.assertEquals;, +import static org.junit.jupiter.api.Assertions.assertNotNull;, +++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AppTest.java, +import org.junit.jupiter.api.Test;, +++ b/abstract-document/pom.xml, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-engine</artifactId>, +++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java, +import org.junit.jupiter.api.Test;, +import static org.junit.jupiter.api.Assertions.assertEquals;, +import static org.junit.jupiter.api.Assertions.assertNotNull;, +++
[+++ b/marker/pom.xml]
[+++ b/event-sourcing/README.md, +---, +layout: pattern, +title: Event Sourcing, +folder: event-sourcing, +permalink: /patterns/event-sourcing/, +categories: Architectural, +tags:, + - Java, + - Difficulty Intermediate, + - Performance, +---, +, +## Intent, +Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects. This can simplify tasks in complex domains, by avoiding the need to synchronize the data model and the business domain, while improving performance, scalability, and
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +---, +layout: pattern, +title: Data Bus, +folder: data-bus, +permalink: /patterns/data-bus/, +, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +, +Allows send of messages/events between components of an application, +without them needing to know about each other. They only need to know, +about the type of the message/event being sent., +, +![data bus pattern uml diagram](./etc/data-bus.urm.png "Data Bus pattern"), +, +## Applicability, +Use Data Bus pattern when, +, +* you want your components to decide themselves which messages/events they want to receive, +* you want to
[+++ b/pom.xml, + <module>promise</module>, +++ b/pom.xml, + <module>promise</module>, +++ b/promise/README.md, +---, +layout: pattern, +title: Promise, +folder: promise, +permalink: /patterns/promise/, +categories: Concurrency, +tags:, + - Java, + - Functional, + - Reactive, + - Difficulty-Intermediate, +---, +, +## Also known as, +CompletableFuture, +, +## Intent, +A Promise represents a proxy for a value not necessarily known when the promise is created. It, +allows you to associate dependent promises to an asynchronous action's eventual success value or , +failure reason. Promises are a way to write async code that still appears as though it is executing , +in a synchronous way.,
[+++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <groupId>com.iluwatar.layers</groupId>, + <artifactId>layers</artifactId>, + <dependencies>, + <dependency>, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, +
[+++ /dev/null, +++ /dev/null, +++ b/design_pattern_relationships.gif]
[+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java, +++ b/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java]
[+++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0, + http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/execute-around/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0, + http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/extension-objects/README.md, +---, +layout: pattern, +title: Extension objects, +folder: extension-objects, +permalink: /patterns/extension-objects/, +categories: Behavioral, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Anticipate that an object’s interface needs to be extended in the future. Additional, +interfaces are defined by extension objects., +, +![alt text](./etc/extension_obj1.png "Extension objects"), +, +## Applicability, +Use the Extension Objects pattern when:, +, +* you need to support the addition of new or unforeseen interfaces to existing classes and you don't want to impact clients that don't
[+++ b/mutex/pom.xml, + <relativePath>../pom.xml</relativePath>, +++ b/mutex/pom.xml, + <relativePath>../pom.xml</relativePath>, +++ b/semaphore/pom.xml, + <relativePath>../pom.xml</relativePath>]
[+++ b/servant/src/etc/servant.svg, +<?xml version="1.0" encoding="utf-8"?>, +<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">, +<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" font-family="Arial" font-size="13" width="744" height="673">, + <desc>UML diagram java-design-patterns</desc>, + <g id="_pIQGQXleEeSMFa_mT0wMkw">, + <defs>, + <linearGradient id="greyGradient" x1="0%" y1="0%" x2="0%" y2="100%" spreadMethod="pad">, + <stop offset="0%" stop-color="#FFFFFF" stop-opacity="1" />, + <stop offset="100%" stop-color="#E5E5E5" stop-opacity="1" />, + , + </linearGradient>, + <linearGradient id="packageGradient" x1="0%" y1="0%" x2="0%" y2="100%" spreadMethod="pad">, + <stop offset="0%" stop-color="#FFFFFF" stop-opacity="1" />, + <stop offset="100%" stop-color="#EFE9DE" stop-opacity="1" />, + , + </linearGradient>, + , + </defs>, + <g id="_pIQGSXleEeSMFa_mT0wMkw">, + <rect x="2" y="42" width="225" height="80" rx="5" ry="0" fill="url(#greyGradient)" stroke="#CCCCCC" stroke-width="1" />, + <text x="115"
[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when,
[+++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, + PreparedStatement statement = connection.prepareStatement("SELECT * FROM CUSTOMERS"); //NOSONAR, + ResultSet resultSet = statement.executeQuery(); //NOSONAR, + }, false).onClose(() -> mutedClose(connection, statement, resultSet));, + private void mutedClose(Connection connection, PreparedStatement statement, ResultSet resultSet) {, + resultSet.close();, + statement.close();]
[+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +## Tutorials, +* [Build Maintainable Systems With Hexagonal Architecture](http://java-design-patterns.com/blog/build-maintainable-systems-with-hexagonal-architecture/), +]
[+++ b/unitofwork/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, + </dependencies>, +++ b/unitofwork/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, + </dependencies>, +++ b/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java, + String INSERT = "INSERT";, + String DELETE = "DELETE";, + String MODIFY = "MODIFY";, + void registerNew(T entity);, + void registerModified(T entity);, + void registerDeleted(T entity);, +, + void commit();, +++ b/unitofwork/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, + </dependencies>,
[+++ b/pom.xml, +<<<<<<< HEAD]
[+++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br/>, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br/>, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, + * <p>{@see http://wiki.c2.com/?DataBusPattern}</p>, + * <p>, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain
[+++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +++ /dev/null, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=com.iluwatar%3Ajava-design-patterns&metric=alert_status)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++
[+++ b/model-view-controller/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/model-view-controller/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/model-view-controller/src/test/java/com/iluwatar/model/view/controller/GiantControllerTest.java, +package com.iluwatar.model.view.controller;, +, +import org.junit.Test;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.verifyZeroInteractions;, +, +/**, + * Date: 12/20/15 - 2:19 PM, + *, + * @author Jeroen Meulemeester, + */, +public class GiantControllerTest {, +, + /**, + * Verify if the controller passes the health level through to the model and vice versa, + */, + @Test, + public void testSetHealth() {, + final GiantModel model
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasPrice {, + + getPrice() : Optional<Number>, + class Car {, + + Car(properties : Map<String, Object>), + }, + interface HasModel {, + + getModel() : Optional<String>, + class App {, + + App(), + + main(args : String[]) {static}, + interface Document {, + + children(String, Function<Map<String, Object>, T>) : Stream<T> {abstract}, + + get(String) : Object {abstract}, + + put(String, Object) {abstract}, +AbstractDocument ..|> Document , +HasPrice --|> Document , +HasParts --|> Document , +HasModel --|> Document , +++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasPrice {, + + getPrice() : Optional<Number>, + class Car
[+++ b/layers/etc/layers.png, +++ b/layers/etc/layers.png, +++ b/layers/etc/layers.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <interface id="1" language="java" name="com.iluwatar.layers.CakeDao" project="layers" , + file="/layers/src/main/java/com/iluwatar/layers/CakeDao.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="289" y="916"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </interface> , + <class id="2" language="java" name="com.iluwatar.layers.CakeLayer" project="layers" , + file="/layers/src/main/java/com/iluwatar/layers/CakeLayer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="1438" y="826"/> , + <display autosize="true" stereotype="true"
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, + * ConfigureForDosVisitor class implements both zoom's and hayes' visit method , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, + * ConfigureForDosVisitor class implements both zoom's and hayes' visit method , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * ConfigureForUnixVisitor class implements zoom's visit method for Unix , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, + * ConfigureForDosVisitor class implements both zoom's and hayes' visit method , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * ConfigureForUnixVisitor class implements zoom's visit method for Unix , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ModemVisitor.java, + * ModemVisitor interface]
[+++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + troll = new ClubbedTroll(troll);, + troll.attack();, + troll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, + PlayerDetails playerDetails = new PlayerDetails(doc.getString("email"), doc.getString("bank"),, + return new LotteryTicket(new LotteryTicketId(doc.getInteger("ticketId")), playerDetails, lotteryNumbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, + PlayerDetails playerDetails = new PlayerDetails(doc.getString("email"), doc.getString("bank"),, + return new LotteryTicket(new LotteryTicketId(doc.getInteger("ticketId")), playerDetails, lotteryNumbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + LotteryTicketCheckResult result = new LotteryTicketChecker(repository).checkTicketForPrize(id, numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, + PlayerDetails playerDetails = new PlayerDetails(doc.getString("email"), doc.getString("bank"),, + return new LotteryTicket(new LotteryTicketId(doc.getInteger("ticketId")), playerDetails, lotteryNumbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + LotteryTicketCheckResult result = new LotteryTicketChecker(repository).checkTicketForPrize(id, numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryConstants.java, + private LotteryConstants() {, + }, +, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java, + PlayerDetails playerDetails = new PlayerDetails(doc.getString("email"), doc.getString("bank"),, + return new LotteryTicket(new LotteryTicketId(doc.getInteger("ticketId")), playerDetails, lotteryNumbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + LotteryTicketCheckResult result = new LotteryTicketChecker(repository).checkTicketForPrize(id,
[+++ b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java, + /**, + * Program entry point., + *, + * @param args @param args command line args, + */, +++ b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java, + /**, + * Program entry point., + *, + * @param args @param args command line args, + */, +++ b/factory-kit/src/main/java/com/iluwatar/factorykit/Weapon.java, + * Interface representing weapon., +++ b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java, + /**, + * Program entry point., + *, + * @param args @param args command line args, + */, +++ b/factory-kit/src/main/java/com/iluwatar/factorykit/Weapon.java, + * Interface representing weapon., +++ b/factory-kit/src/main/java/com/iluwatar/factorykit/WeaponFactory.java, + * Functional interface, an example of the factory-kit design pattern., + * <br>Instance created locally gives
[+++ b/pom.xml]
[+++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns)., +++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns)., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that have a common theme, + * without specifying their concrete classes. In normal usage,
[+++ b/CODE_COVERAGE.md, +# Code Coverage Report generation, +, +To generate the code coverage report, execute the following command:, +> mvn clean verify, +, +This will generate code coverage report in each of the modules. In order to view the same, open the following file in your browser., +> target/site/jacoco/index.html , +, +Please note that the above folder is created under each of the modules. For example:, +* adapter/target/site/jacoco/index.html , +* busniess-delegate/target/site/jacoco/index.html , +, +, +++ b/CODE_COVERAGE.md, +# Code Coverage Report generation, +, +To generate the code coverage report, execute the following command:, +> mvn clean verify, +, +This will
[+++ b/tls/src/main/java/com/iluwatar/tls/Result.java, +/**
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, + * Test used to verify the happy path of, + * {@link ThreadAsyncExecutor#startProcess(Callable, AsyncCallback)}, + final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor, + .forClass((Class) Optional.class);, + * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable)} when a, + * task takes a while to execute, + fail(, + "Expected IllegalStateException when calling AsyncResult#getValue on a non-completed task");, + * Test used to verify the happy path of, + * {@link ThreadAsyncExecutor#startProcess(Callable, AsyncCallback)} when a task takes a while to, + * execute, + fail(, + "Expected IllegalStateException when calling AsyncResult#getValue on a non-completed task");, + final
[+++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + public synchronized String toString() {]
[+++ b/execute-around/index.md, +++ b/execute-around/index.md, +++ b/pom.xml, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/partial-response/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/partial-response/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2017 Gopinath Langote, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and
[+++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"), +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"), +++ b/intercepting-filter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <parent>, + </parent>, + <artifactId>intercepting-filter</artifactId>, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"), +++ b/intercepting-filter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <parent>, + </parent>, + <artifactId>intercepting-filter</artifactId>, +++ b/intercepting-filter/src/main/AddressFilter.java, +, +/**, + * Concrete implementation of filter, + * , + * @author joshzambales, + *, + */, +public class AddressFilter implements Filter{, + public String execute(String[] request){, + if(request[2].equals("")){, + return null;, + }else return request[2];, + }, +}, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"),
[+++ /dev/null, +++ /dev/null, +++ b/README.md, +# Design pattern samples in Java, +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ /dev/null, +++ b/README.md, +# Design pattern samples in Java, +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/abstract-factory/index.md, +++ /dev/null, +++ b/README.md, +# Design pattern samples in Java, +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +If you are willing to contribute to the project you will find the relevant information
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ b/marker/pom.xml, +<!--, + The MIT License, + Copyright (c) 2014-2016 Ilkka Seppälä, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, + The above copyright notice and this permission notice shall
[+++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/decorator/README.md, +Let's take the troll example. First of all we have a simple troll implementing the troll interface, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/decorator/README.md, +Let's take the troll example. First of all we have a simple troll implementing the troll interface, +++ b/eip-aggregator/README.md, +---, +layout: pattern, +title: EIP Aggregator, +folder: eip-aggregator, +permalink: /patterns/eip-aggregator/, +categories: Enterprise integration, +tags:, + - Java, + - Difficulty-Intermittent, + - Enterprise integration, +---, +, +## Intent, +Sometimes in enterprise systems
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, + AppManager.find("001");, + AppManager.find("001");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("003");, + AppManager.find("004");, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + AppManager.find("001");, + AppManager.find("001");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("003");, + AppManager.find("004");, +++ b/event-aggregator/pom.xml, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + AppManager.find("001");, + AppManager.find("001");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("003");, + AppManager.find("004");, +++ b/event-aggregator/pom.xml, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + AppManager.find("001");, + AppManager.find("001");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("003");, + AppManager.find("004");, +++ b/event-aggregator/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + AppManager.find("001");, + AppManager.find("001");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("002");, + AppManager.find("003");, + AppManager.find("004");, +++ b/event-aggregator/pom.xml, +++ /dev/null, +++ /dev/null, +++
[+++ b/dao/etc/dao.png, +++ b/dao/etc/dao.png, +++ b/dao/etc/dao.ucls, + <class id="1" language="java" name="com.iluwatar.Customer" project="dao" , + file="/dao/src/main/java/com/iluwatar/Customer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="176" y="337"/> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + <class id="2" language="java" name="com.iluwatar.CustomerDaoImpl" project="dao" , + file="/dao/src/main/java/com/iluwatar/CustomerDaoImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="540" y="334"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <interface id="3" language="java"
[+++ b/strategy/src/main/java/com/iluwatar/strategy/App.java, + * Before Java 8 the Strategies needed to be separate classes forcing the developer, + * to write lots of boilerplate code. With modern Java it is easy to pass behavior, + * with method references and lambdas making the code shorter and more readable., + * <p>, + // GoF Strategy pattern, +, + // Java 8 Strategy pattern, + System.out.println("Green dragon spotted ahead!");, + dragonSlayer = new DragonSlayer(, + () -> System.out.println("With your Excalibur you severe the dragon's head!"));, + dragonSlayer.goToBattle();, + System.out.println("Red dragon emerges.");, + dragonSlayer.changeStrategy(() -> System.out.println(, + "You shoot the dragon
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/layers/src/main/java/com/iluwatar/layers/App.java, + CakeLayerDao cakeLayerDao = context.getBean(CakeLayerDao.class);, + cakeLayerDao.save(new CakeLayer("strawberry", 1200));, + System.out.println("Count CakeLayer records: " + cakeLayerDao.count());, +// PersonDao dao = context.getBean(PersonDao.class);, +//, +// Person peter = new Person("Peter", "Sagan");, +// Person nasta = new Person("Nasta", "Kuzminova");, +//, +// // Add new Person records, +// dao.save(peter);, +// dao.save(nasta);, +//, +// // Count Person records, +// System.out.println("Count Person records: " + dao.count());, +//, +// // Print all records, +// List<Person> persons = (List<Person>) dao.findAll();, +// for (Person person : persons) {, +// System.out.println(person);, +// }, +//, +// // Find Person by surname, +// System.out.println("Find by surname 'Sagan': " +
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasParts {, + + PROPERTY : String {static}, + + getParts() : Stream<Part>, + }, + interface HasType {, + + PROPERTY : String {static}, + + getType() : Optional<String>, + }, + interface HasPrice {, + + PROPERTY : String {static}, + + getPrice() : Optional<Number>, + }, + interface Document {, + + children(String, Function<Map<String, Object>, T>) : Stream<T> {abstract}, + + get(String) : Object {abstract}, + + put(String, Object) {abstract}, + class App {, + + App(), + + main(args : String[]) {static}, +HasParts --|> Document , +AbstractDocument ..|> Document , +HasType
[+++ b/.travis.yml, +sudo: required, +++ b/.travis.yml, +sudo: required, +++ b/abstract-factory/README.md, +## Explanation, +Real world example, +, +> To create a kingdom we need objects with common theme. Elven kingdom needs an Elven king, Elven castle and Elven army whereas Orcish kingdom needs an Orcish king, Orcish castle and Orcish army. There is a dependency between the objects in the kingdom., +, +In plain words, +, +> A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes., +, +Wikipedia says, +, +> The abstract factory pattern provides a way to encapsulate
[+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + System.out.println("Constructing parts and car");, + System.out.println("Here is our car:");, + System.out.println("-> model: " + car.getModel().get());, + System.out.println("-> price: " + car.getPrice().get());, + System.out.println("-> parts: ");, + car.getParts().forEach(p -> System.out, + .println("\t" + p.getType().get() + "/" + p.getModel().get() + "/" + p.getPrice().get()));, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + System.out.println("Constructing parts and car");, + System.out.println("Here is our car:");, + System.out.println("-> model: " + car.getModel().get());, + System.out.println("-> price: " + car.getPrice().get());, + System.out.println("-> parts: ");, + car.getParts().forEach(p -> System.out, + .println("\t" + p.getType().get() + "/" + p.getModel().get() + "/" + p.getPrice().get()));, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + System.out.println("Elf Kingdom");, + System.out.println(app.getArmy().getDescription());, + System.out.println(app.getCastle().getDescription());, + System.out.println(app.getKing().getDescription());,
[+++ b/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/AppTest.java, +package com.iluwatar.model.view.presenter;, +, +import org.junit.Test;, +, +/**, + * , + * Application test, + *, + */, +public class AppTest {, +, + @Test, + public void test() {, + String[] args = {};, + App.main(args);, + }, +, +}, +++ b/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/AppTest.java, +package com.iluwatar.model.view.presenter;, +, +import org.junit.Test;, +, +/**, + * , + * Application test, + *, + */, +public class AppTest {, +, + @Test, + public void test() {, + String[] args = {};, + App.main(args);, + }, +, +}, +++ b/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/FileLoaderTest.java, +package com.iluwatar.model.view.presenter;, +, +import org.junit.Test;, +, +import java.io.FileNotFoundException;, +import java.io.IOException;, +,
[+++ b/module/README.md, +categories: Creational Pattern, +Module pattern is used to implement the concept of software modules, defined by modular programming, in a programming language with incomplete direct support for the concept., +++ b/module/README.md, +categories: Creational Pattern, +Module pattern is used to implement the concept of software modules, defined by modular programming, in a programming language with incomplete direct support for the concept., +++ b/module/etc/module.png, +++ b/module/README.md, +categories: Creational Pattern, +Module pattern is used to implement the concept of software modules, defined by modular programming, in a programming language with incomplete direct support for the concept., +++ b/module/etc/module.png, +++ b/module/etc/module.ucls,
[+++ b/event-asynchronous/src/main/resources/config.properties, +INTERACTIVE_MODE=NO]
[+++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/memento/etc/memento.png "Memento"), +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/memento/etc/memento.png "Memento"), +++ /dev/null, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/memento/etc/memento.png "Memento"), +++ /dev/null, +++ b/memento/etc/memento.png, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/memento/etc/memento.png "Memento"), +++ /dev/null, +++ b/memento/etc/memento.png, +++ b/memento/etc/memento.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.Star" project="memento" , + file="/memento/src/main/java/com/iluwatar/Star.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="301" y="385"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> ,
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java]
[+++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, + public void testName() throws Exception {, + assertNull(simpleObject.getName());, + assertEquals(name, simpleObject.getName());, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, + public void testName() throws Exception {, + assertNull(simpleObject.getName());, + assertEquals(name, simpleObject.getName());, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectsTest.java, +, +import static org.junit.Assert.assertEquals;, +, + public void testCreate() throws Exception {, + String objectName = "Foobar";, + final SimpleObject obj = simpleObjects.create(objectName);, + assertEquals(simpleObject, obj);, + assertEquals(objectName, obj.getName());, + public void testListAll() throws Exception {, + assertEquals(all, list);, +, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, + public void testName() throws Exception {, + assertNull(simpleObject.getName());,
[+++ b/abstract-factory/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/command/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/command/pom.xml, +++ b/composite/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/command/pom.xml, +++ b/composite/pom.xml, +++ b/decorator/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/command/pom.xml, +++ b/composite/pom.xml, +++ b/decorator/pom.xml, +++ b/facade/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoClientApp.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2017 Gopinath Langote, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, +
[+++ b/event-driven-architecture/pom.xml, + <version>1.10.0-SNAPSHOT</version>]
[+++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.18.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/mediator/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/mediator/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/mediator/src/test/java/com/iluwatar/mediator/PartyImplTest.java, +package com.iluwatar.mediator;, +, +import org.junit.Test;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.verifyZeroInteractions;, +, +/**, + * Date: 12/19/15 - 10:00 PM, + *, + * @author Jeroen Meulemeester, + */, +public class PartyImplTest {, +, + /**, + * Verify if a member is notified when it's joining a party. Generate an action and see if the, + * other member gets it. Also check members don't
[+++ b/tls/src/main/java/com/iluwatar/tls/App.java, +/**, + * The MIT License, + * Copyright (c) 2016 Thomas Bauer, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/pom.xml, + <module>singleton</module>, +++ b/pom.xml, + <module>singleton</module>, +++ b/singleton/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>singleton</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>singleton</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>singleton</module>, +++ b/singleton/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>singleton</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>singleton</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>,
[+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append("This is a ");, + sb.append(profession);, + sb.append(" named ");, + sb.append(name);, + sb.append(hairColor);, + sb.append(" ");, + sb.append(hairType);, + sb.append(" ");, + sb.append(" wearing ");, + sb.append(armor);, + sb.append(" and wielding a ");, + sb.append(weapon);, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append("This is a ");, + sb.append(profession);, + sb.append(" named ");, + sb.append(name);, + sb.append(hairColor);, + sb.append(" ");, + sb.append(hairType);, + sb.append(" ");, + sb.append(" wearing ");, + sb.append(armor);, + sb.append(" and wielding a ");, + sb.append(weapon);, +++ b/dao/src/test/java/com/iluwatar/dao/CustomerTest.java, + buffer.append("Customer{id=");, + buffer.append("" + customer.getId());, + buffer.append(", firstName='");, + buffer.append(customer.getFirstName());, + buffer.append("\', lastName='");, + buffer.append(customer.getLastName() + "\'}");, +++
[+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++
[+++ b/monad/etc/monad.png, +++ b/monad/etc/monad.png, +++ b/monad/etc/monad.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.monad.App" project="monad" , + file="/monad/src/main/java/com/iluwatar/monad/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="101" width="125" x="631" y="37"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <enumeration id="2" language="java" name="com.iluwatar.monad.Sex" project="monad" , + file="/monad/src/main/java/com/iluwatar/monad/Sex.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="119" width="137" x="424" y="286"/> , + <display autosize="true" stereotype="true"
[+++ b/business-delegate/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.4.0</version>, + </parent>, + <artifactId>business-delegate</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/business-delegate/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.4.0</version>, + </parent>, + <artifactId>business-delegate</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/business-delegate/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {, + , + public static void main(String[] args) {, +
[+++ b/async-method-invocation/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.3.0</version>, + </parent>, + <artifactId>async-method-invocation</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/async-method-invocation/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.3.0</version>, + </parent>, + <artifactId>async-method-invocation</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +package com.iluwatar.async.method.invocation;, +, +import java.util.concurrent.Callable;, +, +public class App {, +, + public static void main(String[] args) throws Exception
[+++ b/ambassador/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.20.0-SNAPSHOT</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>ambassador</artifactId>, +, +, +</project>, +++ b/ambassador/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.20.0-SNAPSHOT</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>ambassador</artifactId>, +, +, +</project>, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +package com.iluwatar.ambassador;, +, +public class App {, +, + /**, + * Entry point, + */, + public static void main(String[] args) {, +, + Client host1 = new Client();, + Client host2 = new Client();, +,
[+++ b/adapter/README.md, +++ b/adapter/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:,
[+++ b/ambassador/pom.xml, + <dependencies>, + <dependency>, + <groupId>org.testng</groupId>, + <artifactId>testng</artifactId>, + <version>RELEASE</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + </dependency>, + </dependencies>, +++ b/ambassador/pom.xml, + <dependencies>, + <dependency>, + <groupId>org.testng</groupId>, + <artifactId>testng</artifactId>, + <version>RELEASE</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + </dependency>, + </dependencies>, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, + long useService(int value) {, + return result;, +++ b/ambassador/pom.xml, + <dependencies>, + <dependency>, + <groupId>org.testng</groupId>, + <artifactId>testng</artifactId>, + <version>RELEASE</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, +
[+++ b/pom.xml]
[+++ b/service-locator/src/main/java/com/iluwatar/servicelocator/App.java, + * Service locator pattern, used to lookup JNDI-services, + * , + , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/service-locator/src/main/java/com/iluwatar/servicelocator/App.java, + * Service locator pattern, used to lookup JNDI-services, + * , + , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/service-locator/src/main/java/com/iluwatar/servicelocator/Service.java, + * , +++ b/service-locator/src/main/java/com/iluwatar/servicelocator/App.java, + * Service locator pattern, used to lookup JNDI-services, + * , + , + /**, + * Program entry point, + * @param args command line args,
[+++ b/README.md, +* [Callback](#callback), +, +++ b/README.md, +* [Callback](#callback), +, +++ /dev/null, +++ b/README.md, +* [Callback](#callback), +, +++ /dev/null, +++ /dev/null, +++ b/README.md, +* [Callback](#callback), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +* [Callback](#callback), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +* [Callback](#callback), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +* [Callback](#callback), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +* [Callback](#callback), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +*
[+++ b/singleton/README.md, +, +## Explanation, +Real world example, +> There can only be one ivory tower where the wizards study their magic. The same enchanted ivory tower is always used by the wizards. Ivory tower here is singleton., +, +In plain words, +> Ensures that only one object of a particular class is ever created., +, +Wikipedia says, +> In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system., +, +**Programmatic Example**, +,
[+++ b/pom.xml, + <module>event-asynchronous</module>]
[+++ b/README.md, +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/README.md, +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that, + * have a common theme without specifying their concrete classes. In normal usage, the client, + * software creates a concrete implementation of the abstract factory and then
[+++ b/service-locator/src/main/java/com/iluwatar/servicelocator/App.java, + * The Service Locator pattern is a design pattern used in software development , + * to encapsulate the processes involved in obtaining a service with a strong , + * abstraction layer. This pattern uses a central registry known as the "service , + * locator", which on request returns the information necessary to perform a certain task., + * <p>, + * In this example we use the Service locator pattern to lookup JNDI-services, + * and cache them for subsequent requests., + * <p>]
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +<class-diagram version="1.1.11" icons="true" automaticImage="PNG" always-add-relationships="false", + generalizations="true" realizations="true" associations="true" dependencies="false" nesting-relationships="true", + router="FAN">, + <class id="1" language="java" name="com.iluwatar.caching.CacheStore" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/CacheStore.java" binary="false" corner="BOTTOM_RIGHT">, + <position
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Modem.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/.gitignore, +++ b/.gitignore, +++ b/README.md, +++ b/.gitignore, +++ b/README.md, +++ /dev/null, +++ b/.gitignore, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/guarded-suspension/README.md, +---, +layout: pattern, +title: Guarded Suspension, +folder: guarded-suspension, +permalink: /patterns/guarded-suspension/, +pumlid: RScv3SCm3030LU819FRPXg5fIm552tnYPFiyjRi3RkbAaYkdoQr5JBy369vrxz7oaSv6XmPhL3e6TCaJ0msU-CAoilTToyG8DdKOw5z0GzcAlvNAN_WZSD1brBHHPmxv0000, +categories: Concurrency, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +Use Guareded
[+++ b/eip-splitter/pom.xml, +++ b/eip-splitter/pom.xml, +++ b/eip-splitter/src/main/java/com/iluwatar/eip/splitter/App.java, + * It is very common in integration systems that incoming messages consists of many items bundled together. For example, + * an invoice document contains multiple invoice lines describing transaction (quantity, name of provided, + * service/sold goods, price etc.). Such bundled messages may not be accepted by other systems. This is where splitter, + * pattern comes in handy. It will take the whole document, split it based on given criteria and send individual, + * items to the endpoint., + * Splitter allows you to split messages based on defined
[+++ b/pom.xml, + <module>promise</module>, +++ b/pom.xml, + <module>promise</module>, +++ b/promise/README.md, +---, +layout: pattern, +title: Promise, +folder: promise, +permalink: /patterns/promise/, +categories: Concurrency, +tags:, + - Java, + - Functional, + - Reactive, + - Difficulty-Intermediate, +---, +, +## Also known as, +CompletableFuture, +, +## Intent, +A Promise represents a proxy for a value not necessarily known when the promise is created. It, +allows you to associate dependent promises to an asynchronous action's eventual success value or , +failure reason. Promises are a way to write async code that still appears as though it is executing , +in a synchronous way.,
[+++ b/flux/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>flux</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/flux/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>flux</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/flux/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {, + , + public static void main( String[] args ), + {,
[+++ b/converter/src/main/java/com/iluwatar/converter/App.java, + System.out.println("Entity converted from DTO:" + user);]
[+++ b/reader-writer-lock/etc/reader-writer-lock.png, +++ b/reader-writer-lock/etc/reader-writer-lock.png, +++ b/reader-writer-lock/etc/reader-writer-lock.ucls, + <class id="1" language="java" name="com.iluwatar.reader.writer.lock.Writer" project="reader-writer-lock" , + file="/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Writer.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="487" y="105"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.reader.writer.lock.ReaderWriterLock.WriteLock" , + <position height="191" width="197" x="488" y="313"/> , + <class id="3" language="java" name="com.iluwatar.reader.writer.lock.ReaderWriterLock" project="reader-writer-lock" , + <position height="245" width="224" x="606" y="28"/> , + <class id="4" language="java" name="com.iluwatar.reader.writer.lock.Reader" project="reader-writer-lock" , + file="/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Reader.java" binary="false"
[+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java, +, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java, +, +++ b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java, + @Test(expected = IllegalArgumentException.class), + public void testNullPropertiesPassed() throws Exception {, + new PropertiesFeatureToggleVersion(null);, + }, +, + @Test(expected = IllegalArgumentException.class), + public void testNonBooleanProperty() throws Exception {, + final Properties properties = new Properties();, + properties.setProperty("enhancedWelcome","Something");, + new PropertiesFeatureToggleVersion(properties);, + }, +]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/servant/pom.xml]
[+++ b/.travis.yml, + skip_cleanup: true, + branch: **]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.isEmpty()) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.isEmpty()) {, +++ b/pom.xml]
[+++ b/model-view-presenter/pom.xml, + <artifactId>junit</artifactId>]
[+++ b/abstract-document/pom.xml, + <version>1.12.0</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0</version>, +++ b/adapter/pom.xml, + <version>1.12.0</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0</version>, +++ b/adapter/pom.xml, + <version>1.12.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.12.0</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0</version>, +++ b/adapter/pom.xml, + <version>1.12.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.12.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.12.0</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0</version>, +++ b/adapter/pom.xml, + <version>1.12.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.12.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.12.0</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.12.0</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0</version>, +++ b/adapter/pom.xml, + <version>1.12.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>, +++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>, +++ b/serverless/README.md, +---, +layout: pattern, +title: serverless, +folder: serverless, +permalink: /patterns/serverless/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermittent, +---, +, +## Serverless, +, +Serverless eliminates the need to plan for infrastructure and let's you focus on your , +application. , +, +Following are optimization katas you should be aware of while building a serverless , +applications, +, +* The Lean function, + * Concise logic - Use functions to
[+++ b/README.md, +# Getting started, +, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +, +++ b/README.md, +# Getting started, +, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +, +++ /dev/null, +++ b/README.md, +# Getting started, +, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +, +++ /dev/null, +++ /dev/null, +++ b/README.md, +# Getting started, +, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +, +++
[+++ b/master-worker-pattern/README.md, +---, +layout: pattern, +title: Master-Worker, +folder: master-worker-pattern, +permalink: /patterns/master-worker-pattern/, +categories: Centralised Parallel Processing, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Also known as, +, +> Master-slave or Map-reduce, +, +## Intent, +, +> Used for centralised parallel processing., +, +## Applicability, +This pattern can be used when data can be divided into multiple parts, all of which need to go through the same computation to give a result, which need to be aggregated to get the final result., +, +## Explanation, +In this pattern, parallel processing is performed using a system consisting of a
[+++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MultiplyExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MultiplyExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/NumberExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MultiplyExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/NumberExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/PlusExpressionTest.java, + public static Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, + public static Stream<Arguments> expressionProvider()
[+++ b/abstract-document/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/acyclic-visitor/pom.xml, + <version>1.21.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, +
[+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java, +package com.iluwatar.lazy.loading;, +, +import org.junit.Test;, +, +import java.lang.reflect.Field;, +, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +, +/**, + * Using reflection this test shows that the heavy field is not instantiated until the method getHeavy is called, + *, + * Created by jones on 11/10/2015., + */, +public class HolderThreadSafeTest {, +, + @Test, + public void test() throws IllegalAccessException {, + HolderThreadSafe hts = new HolderThreadSafe();, +, + {//first call is null, + Field[] ff = HolderThreadSafe.class.getDeclaredFields();, + for (Field f: ff) {, + f.setAccessible(true);, + }, +, + assertNull(ff[0].get(hts));, + }, +, + //
[+++ b/README.md, +![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, +#### Browse and view all of the patterns on our Website: [iluwatar.github.io/java-design-patterns/](https://iluwatar.github.io/java-design-patterns/), +, + - <a href="#how-to-contribute">How to contribute</a>, + - <a href="#versioning">Versioning</a>, +## <a name="introduction">Introduction</a>, +, +# <a name="how-to-contribute">How to contribute</a> [&#8593;](#top), +, +**To work on a new pattern** you need to do the following steps:, +, +1. If there is no issue for the new pattern yet, raise new issue. Comment on, + the issue that you are working on it so that others don't start work on the, + same thing., +2. Fork the repository., +3. Create a
[+++ b/ambassador/README.md, +---, +layout: pattern, +title: Ambassador, +folder: ambassador, +permalink: /patterns/ambassador/, +categories: Structural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Provide a helper service instance on a client and offload common functionality away from a shared resource., +, +## Explanation, +Real world example, +, +> A remote service has many clients accessing a function it provides. The service is a legacy application and is impossible to update. Large numbers of requests from users are causing connectivity issues. New rules for request frequency should be implemented along with latency checks and client-side logging., +, +In plain
[+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ /dev/null, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ /dev/null, +++ /dev/null, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, +
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java, + * services. The pattern is very simple but it has many consequences. For example, it can be used to tackle down a, + * complex domain, or to use other architectures that were hard to implement with the classical way., + * , + * This implementation is an example of managing books and authors in a library. The persistence of books and authors is, + * done according to the CQRS architecture. A command side that deals with a data model to persist(insert,update,delete), + * objects to a database. And a query side that uses
[+++ b/event-driven-architecture/etc/eda.png, +++ b/event-driven-architecture/etc/eda.png, +++ b/event-driven-architecture/etc/eda.ucls, + <position height="-1" width="-1" x="937" y="618"/> , + <position height="-1" width="-1" x="936" y="90"/> , + <position height="101" width="200" x="41" y="37"/> , + <interface id="4" language="java" name="com.iluwatar.eda.framework.Message" project="event-driven-architecture" , + file="/event-driven-architecture/src/main/java/com/iluwatar/eda/framework/Message.java" binary="false" , + <position height="-1" width="-1" x="298" y="189"/> , + <position height="-1" width="-1" x="532" y="89"/> , + <position height="-1" width="-1" x="613" y="292"/> , + <position height="-1" width="-1" x="145" y="618"/> , + <position height="-1" width="-1" x="769" y="455"/> , + <class id="9" language="java" name="com.iluwatar.eda.event.Event" project="event-driven-architecture" , + file="/event-driven-architecture/src/main/java/com/iluwatar/eda/event/Event.java" binary="false" , + <position height="-1" width="-1" x="299" y="460"/> , + <bendpoint x="869" y="253"/> , + <dependency id="11">
[+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +++ b/delegation/etc/delegation.png, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +++ b/delegation/etc/delegation.png, +++ b/delegation/etc/delegation.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.delegation.simple.printers.HpPrinter" project="delegation" , + file="/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HpPrinter.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="764" y="272"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display>
[+++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing
[+++ b/module/src/test/java/com/iluwatar/module/AppTest.java, + * Tests that Module example runs without errors.]
[+++ b/factory-method/README.md, +++ b/factory-method/README.md, +++ b/page-object/README.md, +---, +layout: pattern, +title: Page Object, +folder: page-object, +permalink: /patterns/page-object/, +categories: Testing, +tags:, +- Testing, +- Web Development, +- Encapsulation, +---, +, +## Intent, +, +Page Object encapsulates the UI, hiding the underlying UI widgetry of an application (commonly a web application) and providing an application-specific API to allow the manipulation of UI components required for tests. In doing so, it allows the test class itself to focus on the test logic instead. , +, +, +![alt text](./etc/page-object.png "Page Object"), +, +, +## Applicability, +, +Use the Page Object pattern when, +, +*
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + private static final List<PlayerDetails> allPlayerDetails;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2017 Gopinath Langote, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, +
[+++ b/README.md, +++ b/README.md, +++ b/abstract-factory/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this
[+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java, +package com.iluwatar.lazy.loading;, +, +import org.junit.Test;, +, +import java.lang.reflect.Field;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +, +/**, + * Using reflection this test shows that the heavy field is not instantiated until the method getHeavy is called, + *, + * Created by jones on 11/10/2015., + */, +public class HolderThreadSafeTest {, +, + @Test, + public void test() throws IllegalAccessException {, + HolderThreadSafe hts = new HolderThreadSafe();, +, + {//first call is null, + Field[] f = HolderThreadSafe.class.getDeclaredFields();, + assertEquals("One field only in HolderThreadSafe", 1, f.length);, + f[0].setAccessible(true);, +, + assertNull(f[0].get(hts));, + },
[+++ b/bridge/etc/bridge.png, +++ b/bridge/etc/bridge.png, +++ b/bridge/etc/bridge.ucls, + <class id="1" language="java" name="com.iluwatar.bridge.FlyingMagicWeaponImpl" project="bridge" , + file="/bridge/src/main/java/com/iluwatar/bridge/FlyingMagicWeaponImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="515" y="591"/> , + <class id="2" language="java" name="com.iluwatar.bridge.SoulEatingMagicWeaponImpl" project="bridge" , + file="/bridge/src/main/java/com/iluwatar/bridge/SoulEatingMagicWeaponImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="791" y="605"/> , + <position height="-1" width="-1" x="791" y="788"/> , + <class id="4" language="java" name="com.iluwatar.bridge.MagicWeaponImpl" project="bridge" , + file="/bridge/src/main/java/com/iluwatar/bridge/MagicWeaponImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="791" y="433"/> , + <class id="5" language="java" name="com.iluwatar.bridge.BlindingMagicWeaponImpl" project="bridge" , + file="/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeaponImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="1105" y="593"/> , + <position height="-1" width="-1" x="380" y="21"/> , + <position height="-1"
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasParts {, + + PROPERTY : String {static}, + + getParts() : Stream<Part>, + }, + interface HasPrice {, + + PROPERTY : String {static}, + + getPrice() : Optional<Number>, + }, + interface HasType {, + + PROPERTY : String {static}, + + getType() : Optional<String>, + }, + class Part {, + + Part(properties : Map<String, Object>), + }, + class App {, + - LOGGER : Logger {static}, + + App(), + + main(args : String[]) {static}, + }, +HasParts --|> Document , +HasPrice --|> Document , +HasType --|> Document , +Part
[+++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java, +++ b/checkstyle.xml, + <module name="LeftCurly"/>, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java, +++ b/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java]
[+++ b/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java, + result = Class.forName("com.iluwatar.front.controller." + request + "Command");]
[+++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * The Abstract Factory pattern provides a way to encapsulate a group of individual , + * factories that have a common theme without specifying their concrete classes. In , + * normal usage, the client software creates a concrete implementation of the abstract , + * factory and then uses the generic interface of the factory to create the concrete , + * objects that are part of the theme. The client does not know (or care) which , + * concrete objects it gets from each
[+++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">]
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/App.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2014-2017 Gopinath Langote, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, +
[+++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ /dev/null,
[+++ b/README.md, +, +### Presentation Tier Pattern, +, +Presentation Tier patterns are the top-most level of the application, this is concerned with translating tasks and results to something the user can understand., +, +* [Intercepting Filter](#intercepting-filter), +++ b/README.md, +, +### Presentation Tier Pattern, +, +Presentation Tier patterns are the top-most level of the application, this is concerned with translating tasks and results to something the user can understand., +, +* [Intercepting Filter](#intercepting-filter), +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/README.md, +, +### Presentation Tier Pattern, +, +Presentation Tier
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/cqrs/README.md, +---, +layout: pattern, +title: CQRS, +folder: cqrs, +permalink: /patterns/cqrs/, +pumlid: 7SPR4a0m3030gt00pR_RH6I8QQFouFgC_TfHb6gkd5Q7FQBx363ub4rYpoMTZKuDrYXqDX37HIuuyCPfPPTDfuuHREhGqBy0NUR0GNzAMYizMtq1, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +CQRS Command Query Responsibility Segregation - Separate the query side from the command side., +, +![alt text](./etc/cqrs.png "CQRS"), +, +## Applicability, +Use the CQRS pattern when, +, +* you want to scale the queries and commands independently., +* you want to use different data models for queries and commands. Useful when dealing with complex domains., +* you want to use architectures like event sourcing or task based UI., +, +## Credits, +, +*
[+++ b/composite/src/main/java/com/iluwatar/composite/App.java, + * The Composite pattern is a partitioning design pattern. The Composite pattern , + * describes that a group of objects is to be treated in the same way as a single , + * instance of an object. The intent of a composite is to "compose" objects into , + * tree structures to represent part-whole hierarchies. Implementing the Composite , + * pattern lets clients treat individual objects and compositions uniformly., + * <p>, + * In this example we have sentences composed of words composed of letters. All of, + * the objects
[+++ b/mute-idiom/pom.xml]
[+++ b/async-method-invocation/README.md, + - Reactive, +++ b/async-method-invocation/README.md, + - Reactive, +++ b/command/README.md, + - Functional, +++ b/async-method-invocation/README.md, + - Reactive, +++ b/command/README.md, + - Functional, +++ b/event-aggregator/README.md, + - Reactive, +++ b/async-method-invocation/README.md, + - Reactive, +++ b/command/README.md, + - Functional, +++ b/event-aggregator/README.md, + - Reactive, +++ b/event-driven-architecture/README.md, +---, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, + - Reactive, +---, +++ b/async-method-invocation/README.md, + - Reactive, +++ b/command/README.md, + - Functional, +++ b/event-aggregator/README.md, + - Reactive, +++ b/event-driven-architecture/README.md, +---, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, + - Reactive, +---, +++ b/monad/README.md, + - Difficulty-Expert, +++ b/async-method-invocation/README.md,
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/PlayerDetails.java, +package com.iluwatar.hexagonal.domain;, +, +/**, + * , + * Immutable value object containing lottery player details., + *, + */, +public class PlayerDetails {, +, + private final String emailAddress;, + private final String bankAccountNumber;, + private final String phoneNumber;, +, + /**, + * Constructor., + */, + private PlayerDetails(String email, String bankAccount, String phone) {, + emailAddress = email;, + bankAccountNumber = bankAccount;, + phoneNumber = phone;, + }, + , + /**, + * Factory for creating new objects., + */, + public static PlayerDetails create(String email, String bankAccount, String phone) {, + return
[+++ b/monostate/pom.xml, + <version>1.7.0</version>]
[+++ b/builder/src/main/java/com/iluwatar/builder/App.java, + * <p>, + * We want to build {@link Hero} objects, but its construction is complex because of the, + * many parameters needed. To aid the user we introduce {@link HeroBuilder} class., + * {@link HeroBuilder} takes the minimum parameters to build {@link Hero} object in its, + * constructor. After that additional configuration for the {@link Hero} object can be, + * done using the fluent {@link HeroBuilder} interface. When configuration is ready the, + * build method is called to receive the final {@link Hero} object., + /**, + * Program entry point,
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory() {, + return new ElfKingdomFactory();, + }, +, + OrcKingdomFactory getOrcKingdomFactory() {, + return new OrcKingdomFactory();, + }, +, + KingdomFactory elfKingdomFactory;, + elfKingdomFactory = app.getElfKingdomFactory();, + app.createKingdom(elfKingdomFactory);, + KingdomFactory orcKingdomFactory;, + orcKingdomFactory = app.getOrcKingdomFactory();, + app.createKingdom(orcKingdomFactory);, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory() {, + return new ElfKingdomFactory();, + }, +, + OrcKingdomFactory getOrcKingdomFactory() {, + return new OrcKingdomFactory();, + }, +, + KingdomFactory elfKingdomFactory;, + elfKingdomFactory = app.getElfKingdomFactory();, + app.createKingdom(elfKingdomFactory);, + KingdomFactory orcKingdomFactory;, + orcKingdomFactory = app.getOrcKingdomFactory();, + app.createKingdom(orcKingdomFactory);, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = app.getElfKingdomFactory();, + orcFactory = app.getOrcKingdomFactory();, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory()
[+++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, +import java.util.concurrent.ThreadLocalRandom;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + // Start writers, + .forEach(i -> executeService.submit(new Writer("Writer " + i, lock.writeLock(), , + ThreadLocalRandom.current().nextLong(5000))));, + LOGGER.info("Writers added...");, + // Start readers, + .forEach(i -> executeService.submit(new Reader("Reader " + i, lock.readLock(), , + ThreadLocalRandom.current().nextLong(10))));, + LOGGER.info("Readers added...");, + , + try {, + Thread.sleep(5000L);, + } catch (InterruptedException e) {, + LOGGER.error("Error sleeping before adding more readers", e);, + Thread.currentThread().interrupt();, + }, +, + // Start readers, + IntStream.range(6, 10), + .forEach(i -> executeService.submit(new Reader("Reader " + i, lock.readLock(), , + ThreadLocalRandom.current().nextLong(10))));, + LOGGER.info("More readers added...");, + , +
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java, +package com.iluwatar.cqrs.util;, +, +import org.hibernate.SessionFactory;, +import org.hibernate.boot.MetadataSources;, +import org.hibernate.boot.registry.StandardServiceRegistry;, +import org.hibernate.boot.registry.StandardServiceRegistryBuilder;, +, +/**, + * , + * @author Sabiq Ihab, + *, + */, +public class HibernateUtil {, +, + private static final SessionFactory SESSIONFACTORY = buildSessionFactory();, +, + private static SessionFactory buildSessionFactory() {, + // A SessionFactory is set up once for an application!, + final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure() // configures settings //, + // from hibernate.cfg.xml, + .build();, + try {, + return new MetadataSources(registry).buildMetadata().buildSessionFactory();, + } catch (Throwable ex) {, + StandardServiceRegistryBuilder.destroy(registry);, + // TODO HibernateUtil : change print with logger,
[+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java, + private static final String DB_TYPE_FIRST = "first";
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory() {, + return new ElfKingdomFactory();, + }, +, + OrcKingdomFactory getOrcKingdomFactory() {, + return new OrcKingdomFactory();, + }, +, + KingdomFactory elfKingdomFactory;, + elfKingdomFactory = app.getElfKingdomFactory();, + app.createKingdom(elfKingdomFactory);, + KingdomFactory orcKingdomFactory;, + orcKingdomFactory = app.getOrcKingdomFactory();, + app.createKingdom(orcKingdomFactory);, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory() {, + return new ElfKingdomFactory();, + }, +, + OrcKingdomFactory getOrcKingdomFactory() {, + return new OrcKingdomFactory();, + }, +, + KingdomFactory elfKingdomFactory;, + elfKingdomFactory = app.getElfKingdomFactory();, + app.createKingdom(elfKingdomFactory);, + KingdomFactory orcKingdomFactory;, + orcKingdomFactory = app.getOrcKingdomFactory();, + app.createKingdom(orcKingdomFactory);, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = app.getElfKingdomFactory();, + orcFactory = app.getOrcKingdomFactory();, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory()
[+++ b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java, +package com.iluwatar.balking;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * An interface to simulate delay while executing some work., + */, +public interface DelayProvider {, + void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task);, +}, +++ b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java, +package com.iluwatar.balking;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * An interface to simulate delay while executing some work., + */, +public interface DelayProvider {, + void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task);, +}, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +import java.util.concurrent.TimeUnit;, +, + private final DelayProvider delayProvider;, + /**, + * Creates a new instance of WashingMachine, + */, + this((interval, timeUnit, task) -> {, +
[+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, + try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, + try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.isEmpty()) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, + try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.isEmpty()) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, + while (!Thread.currentThread().isInterrupted()) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, + try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.isEmpty()) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, + while (!Thread.currentThread().isInterrupted()) {, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java, +import org.hibernate.SessionFactory;, + /*, + * Making this getSessionFactory() instead of getSession() so that it is the responsibility, +
[+++ b/decorator/README.md, +* To add responsibilities to individual objects dynamically and transparently, that is, without affecting other objects, +* For responsibilities that can be withdrawn, +* When extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of subclasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +++ b/decorator/README.md, +* To add responsibilities to individual objects dynamically and transparently, that is, without affecting other objects, +* For responsibilities that can be withdrawn, +* When extension by subclassing is impractical. Sometimes a large
[+++ b/event-sourcing/etc/event-sourcing.ucls, + <class id="13" language="java" name="AccountService" project="event-sourcing", + <class id="14" language="java" name="MoneyTransactionService", +++ b/event-sourcing/etc/event-sourcing.ucls, + <class id="13" language="java" name="AccountService" project="event-sourcing", + <class id="14" language="java" name="MoneyTransactionService", +++ b/event-sourcing/src/main/java/com/iluwatar/event/sourcing/AccountService.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of
[+++ b/mediator/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>mediator</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>mediator</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/mediator/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>mediator</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>mediator</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/command/src/test/java/com/iluwatar/command/CommandTest.java, + * @param expectedVisibilty exepcted visibility of the goblin, + Visibility expectedVisibilty) {, + assertEquals("Goblin's visibility must be same as expectedVisibility", expectedVisibilty,, +++ b/command/src/test/java/com/iluwatar/command/CommandTest.java, + * @param expectedVisibilty exepcted visibility of the goblin, + Visibility expectedVisibilty) {, + assertEquals("Goblin's visibility must be same as expectedVisibility", expectedVisibilty,, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + * Testing {@link OrcBlacksmith} to produce an AXE asserting that the Weapon is an instance]
[+++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, +++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, +++ b/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java, +++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, +++ b/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java, +++ b/value-object/src/test/java/com/iluwatar/value/object/HeroStatTest.java, + * Tester for equals() and hashCode() methods of a class. Using guava's EqualsTester.]
[+++ b/bridge/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/bridge/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/bridge/src/test/java/com/iluwatar/bridge/BlindingMagicWeaponTest.java, +package com.iluwatar.bridge;, +, +import org.junit.Test;, +, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.internal.verification.VerificationModeFactory.times;, +, +/**, + * Date: 12/6/15 - 11:15 PM, + *, + * @author Jeroen Meulemeester, + */, +public class BlindingMagicWeaponTest extends MagicWeaponTest {, +, + /**, + * Invoke all possible actions on the weapon and check if the actions are executed on the actual, + * underlying weapon implementation., + */, + @Test, + public void testExcalibur()
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();;, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();;, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +import static org.junit.Assert.assertEquals;, + * Add a field as a counter. Every time the callback method is called increment this, + * field. Unit test checks that the field is being incremented., + * Could be done with mock objects as well where the call method call is verified., + private Integer callingCount = 0;, +, + Callback callback = new Callback() {, + @Override, + public void call() {, + callingCount++;, + }, + };, +, + Task
[+++ b/pom.xml, + <spring.version>4.2.4.RELEASE</spring.version>, + <spring-data.version>1.9.2.RELEASE</spring-data.version>, + <h2.version>1.4.190</h2.version>, + <camel.version>2.16.1</camel.version>, + <guava.version>19.0</guava.version>, + <systemrules.version>1.15.1</systemrules.version>, + <mockito.version>1.10.19</mockito.version>, + <version>${mockito.version}</version>]
[+++ b/.travis.yml, + all_branches: true]
[+++ b/iterator/src/main/java/com/iluwatar/iterator/App.java, +import com.iluwatar.iterator.list.Item;, + Iterator<Item> itemIterator = TREASURE_CHEST.iterator(itemType);, +++ b/iterator/src/main/java/com/iluwatar/iterator/App.java, +import com.iluwatar.iterator.list.Item;, + Iterator<Item> itemIterator = TREASURE_CHEST.iterator(itemType);, +++ b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java, + public Iterator<Item> iterator(ItemType itemType) {, + return new ArrayList<>(items);, +++ b/iterator/src/main/java/com/iluwatar/iterator/App.java, +import com.iluwatar.iterator.list.Item;, + Iterator<Item> itemIterator = TREASURE_CHEST.iterator(itemType);, +++ b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java, + public Iterator<Item> iterator(ItemType itemType) {, + return new ArrayList<>(items);, +++ b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChestItemIterator.java, +public class TreasureChestItemIterator implements Iterator<Item> {, +++ b/iterator/src/main/java/com/iluwatar/iterator/App.java, +import com.iluwatar.iterator.list.Item;, + Iterator<Item> itemIterator = TREASURE_CHEST.iterator(itemType);, +++ b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java, + public Iterator<Item> iterator(ItemType itemType) {, + return new ArrayList<>(items);, +++ b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChestItemIterator.java, +public class TreasureChestItemIterator implements Iterator<Item> {, +++ b/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java, + final Iterator<Item> iterator = chest.iterator(expectedItem.getType());, + final Item
[+++ b/layers/src/main/java/com/iluwatar/layers/App.java, + CakeBakingService cakeBakingService = new CakeBakingServiceImpl();, + initializeData(cakeBakingService);, + CakeView cakeView = new CakeView(cakeBakingService);, + cakeView.render();, + }, + private static void initializeData(CakeBakingService cakeBakingService) {, + cakeBakingService.saveNewLayer(new CakeLayerInfo("chocolate", 1200));, + cakeBakingService.saveNewLayer(new CakeLayerInfo("banana", 900));, + cakeBakingService.saveNewLayer(new CakeLayerInfo("strawberry", 950));, + cakeBakingService.getAllLayers().stream().forEach((layer) -> System.out.println(layer));, + cakeBakingService.saveNewTopping(new CakeToppingInfo("candies", 350));, + cakeBakingService.getAllToppings().stream().forEach((topping) -> System.out.println(topping));, + cakeBakingService.bakeNewCake(cakeInfo);, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, + CakeBakingService cakeBakingService = new CakeBakingServiceImpl();, + initializeData(cakeBakingService);, + CakeView cakeView = new CakeView(cakeBakingService);, + cakeView.render();, + }, + private static void initializeData(CakeBakingService cakeBakingService) {, + cakeBakingService.saveNewLayer(new CakeLayerInfo("chocolate", 1200));, + cakeBakingService.saveNewLayer(new CakeLayerInfo("banana", 900));, + cakeBakingService.saveNewLayer(new CakeLayerInfo("strawberry", 950));, + cakeBakingService.getAllLayers().stream().forEach((layer) -> System.out.println(layer));, + cakeBakingService.saveNewTopping(new CakeToppingInfo("candies",
[+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java, + public void main() {]
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasPrice {, + + getPrice() : Optional<Number>, + class Car {, + + Car(properties : Map<String, Object>), + }, + interface HasModel {, + + getModel() : Optional<String>, + class App {, + + App(), + + main(args : String[]) {static}, + interface Document {, + + children(String, Function<Map<String, Object>, T>) : Stream<T> {abstract}, + + get(String) : Object {abstract}, + + put(String, Object) {abstract}, +AbstractDocument ..|> Document , +HasPrice --|> Document , +HasParts --|> Document , +HasModel --|> Document , +++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasPrice {, + + getPrice() : Optional<Number>, + class Car
[+++ b/pom.xml, + <module>publish-subscribe</module>, +++ b/pom.xml, + <module>publish-subscribe</module>, +++ b/publish-subscribe/.gitignore, +/target/, +++ b/pom.xml, + <module>publish-subscribe</module>, +++ b/publish-subscribe/.gitignore, +/target/, +++ b/publish-subscribe/etc/publish-subscribe.png, +++ b/pom.xml, + <module>publish-subscribe</module>, +++ b/publish-subscribe/.gitignore, +/target/, +++ b/publish-subscribe/etc/publish-subscribe.png, +++ b/publish-subscribe/etc/publish-subscribe.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="org.apache.camel.builder.RouteBuilder" project="message-channel" , + file="D:/Users/mdaehner/.m2/repository/org/apache/camel/camel-core/2.15.3/camel-core-2.15.3.jar" binary="true" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="269" y="526"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="false" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="false" package="false" protected="false" private="false" static="true"/> , + <operations public="false" package="false" protected="false" private="false" static="false"/> , + </display> ,
[+++ b/abstract-factory/etc/test.ucls, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , +++ b/abstract-factory/etc/test.ucls, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , +++ /dev/null, +++ b/abstract-factory/etc/test.ucls, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/etc/test.ucls, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/etc/test.ucls, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/etc/test.ucls, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/etc/test.ucls, +<class-diagram version="1.1.8" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , +++ /dev/null, +++ /dev/null, +++ /dev/null,
[+++ b/data-transfer-object/pom.xml, +<?xml version="1.0"?>, +<!--, +, + The MIT License, + Copyright (c) 2016 Gopinath Langote, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice
[+++ b/.travis.yml, +sudo: false, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented,
[+++ b/marker/src/main/java/App.java, + public static void main(String[] args) {, + Guard guard = new Guard();, + if (guard instanceof Permission) {, + guard.enter();, + }, +}, +, +++ b/marker/src/main/java/App.java, + public static void main(String[] args) {, + Guard guard = new Guard();, + if (guard instanceof Permission) {, + guard.enter();, + }, +}, +, +++ b/marker/src/main/java/Guard.java, +/**, + * Created by Alexis on 29-Apr-17., + */, +public class Guard implements Permission {, +, + protected static void enter() {, + System.out.println("You can enter");, + }, +, +}, +++ b/marker/src/main/java/App.java, + public static void main(String[] args) {, + Guard guard
[+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ /dev/null, +++ /dev/null, +++
[+++ b/proxy/src/main/java/com/iluwatar/proxy/WizardTower.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ b/extension-objects/src/main/java/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + Unit soldierUnit = new SoldierUnit("SoldierUnit1");, + Unit sergeantUnit = new SergeantUnit("SergeantUnit1");, + Unit commanderUnit = new CommanderUnit("CommanderUnit1");, + checkExtensionsForUnit(soldierUnit);, + checkExtensionsForUnit(sergeantUnit);, + checkExtensionsForUnit(commanderUnit);, + final Logger logger = LoggerFactory.getLogger(App.class);, + logger.info(unit.getName() + " without SoldierExtension");, + logger.info(unit.getName() + " without SergeantExtension");, + logger.info(unit.getName() + " without CommanderExtension");, +++ /dev/null, +++ b/extension-objects/src/main/java/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + Unit soldierUnit = new SoldierUnit("SoldierUnit1");, + Unit sergeantUnit = new SergeantUnit("SergeantUnit1");, + Unit commanderUnit = new CommanderUnit("CommanderUnit1");, + checkExtensionsForUnit(soldierUnit);, + checkExtensionsForUnit(sergeantUnit);, + checkExtensionsForUnit(commanderUnit);, + final Logger logger = LoggerFactory.getLogger(App.class);, + logger.info(unit.getName() +
[+++ b/pom.xml, + <exclude>**com.steadystate*</exclude>]
[+++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, + * Base for data to send via the Data-Bus., +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, + * Base for data to send via the Data-Bus., +++ b/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java, + * An event raised when a string message is sent., +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, + * Base for data to send via the Data-Bus., +++ b/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java, + * An event raised when a string message is sent., +++ b/data-bus/src/main/java/com/iluwatar/databus/data/StoppingData.java, + * An event raised when applications stops, containing the stop time of the application.]
[+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/converter/README.md, +---, +layout: pattern, +title: Converter, +folder: converter, +permalink: /patterns/converter/, +categories:, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +The purpose of the Converter Pattern is to provide a generic, common way of bidirectional, +conversion between corresponding types, allowing a clean implementation in which the types do not, +need to be aware of each other. Moreover, the Converter Pattern introduces bidirectional collection, +mapping, reducing a boilerplate code to minimum., +, +![alt text](./etc/converter.png "Converter Pattern"), +, +## Applicability, +Use the Converter Pattern in the following situations:,
[+++ b/extension-objects/src/main/java/App.java, + * Anticipate that an object’s interface needs to be extended in the future., + * Additional interfaces are defined by extension objects., +++ b/extension-objects/src/main/java/App.java, + * Anticipate that an object’s interface needs to be extended in the future., + * Additional interfaces are defined by extension objects., +++ b/extension-objects/src/main/java/abstractextensions/CommanderExtension.java, + * Interface with their method, +++ b/extension-objects/src/main/java/App.java, + * Anticipate that an object’s interface needs to be extended in the future., + * Additional interfaces are defined by extension objects., +++ b/extension-objects/src/main/java/abstractextensions/CommanderExtension.java, + * Interface with their method, +++ b/extension-objects/src/main/java/abstractextensions/SergeantExtension.java, + * Interface with their method,
[+++ b/api-gateway/api-gateway-service/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission
[+++ b/ambassador/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014-2016 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/README.md, +3. Create a new folder for the pattern. The rough structure of the new folder would be as follows:, + * etc (every resource related to the pattern, like diagrams), + * src (the source code of the pattern), + * index.md (the description of the pattern), + * pom.xml (the maven pom.xml), +4. Create a simple class diagram from your example code and put it inside of the etc folder., +5. Add description of the pattern in index.md and link to the class diagram., + (Attention, all internal links must be relative to the pattern subdirectory,
[+++ b/object-pool/src/main/java/com/iluwatar/object/pool/App.java, + * <p>, + * <p>, + * In this example we have created {@link OliphauntPool} inheriting from generic {@link ObjectPool}. {@link Oliphaunt}s can be checked, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/App.java, + * <p>, + * <p>, + * In this example we have created {@link OliphauntPool} inheriting from generic {@link ObjectPool}. {@link Oliphaunt}s can be checked, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/object-pool/src/test/java/com/iluwatar/object/pool/AppTest.java, +/**, + * , + * Application test, +
[+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + Troll clubbedTroll = new ClubbedTroll(troll);, + clubbedTroll.attack();, + clubbedTroll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", clubbedTroll.getAttackPower());, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + Troll clubbedTroll = new ClubbedTroll(troll);, + clubbedTroll.attack();, + clubbedTroll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", clubbedTroll.getAttackPower());, +++ b/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java, + public void testClubbedTroll() {, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + Troll clubbedTroll = new ClubbedTroll(troll);, + clubbedTroll.attack();, + clubbedTroll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", clubbedTroll.getAttackPower());, +++ b/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java, + public void testClubbedTroll() {, +++ b/decorator/src/test/java/com/iluwatar/decorator/SimpleTrollTest.java, + public void testTrollActions() {]
[+++ b/memento/src/main/java/com/iluwatar/memento/App.java, + * Memento pattern is for storing and restoring object state. The object ({@link Star}), + * gives out a "memento" ({@link StarMemento}) that contains the state of the object., +++ b/memento/src/main/java/com/iluwatar/memento/App.java, + * Memento pattern is for storing and restoring object state. The object ({@link Star}), + * gives out a "memento" ({@link StarMemento}) that contains the state of the object., +++ b/memento/src/main/java/com/iluwatar/memento/StarType.java, +/**, + * , + * StarType enumeration, + *, + */, +++ b/memento/src/main/java/com/iluwatar/memento/App.java, + * Memento pattern is for storing and restoring object state. The object ({@link Star}), + * gives out
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, + HibernateUtil.getSessionFactory().close();, + HibernateUtil.getSessionFactory().close();]
[+++ b/facade/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>facade</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>facade</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/facade/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>facade</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>facade</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/builder/src/test/java/com/iluwatar/builder/HeroTest.java, +package com.iluwatar.builder;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Date: 12/6/15 - 11:01 PM, + *, + * @author Jeroen Meulemeester, + */, +public class HeroTest {, +, + /**, + * Test if we get the expected exception when trying to create a hero without a profession, + */, + @Test(expected = IllegalArgumentException.class), + public void testMissingProfession() throws Exception {, + new Hero.HeroBuilder(null, "Sir without a job");, + }, +, + /**, + * Test if we get the expected exception when trying to create a hero without a
[+++ b/facade/src/main/java/com/iluwatar/facade/App.java, + * Facade ({@link DwarvenGoldmineFacade}) provides simpler interface to subsystem., + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/facade/src/main/java/com/iluwatar/facade/App.java, + * Facade ({@link DwarvenGoldmineFacade}) provides simpler interface to subsystem., + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/facade/src/test/java/com/iluwatar/facade/AppTest.java, +/**, + * , + * Application test, + *, + */]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/observer/src/main/java/com/iluwatar/observer/App.java, + * The Observer pattern is a software design pattern in which an object, called the subject,, + * maintains a list of its dependents, called observers, and notifies them automatically of any, + * state changes, usually by calling one of their methods. It is mainly used to implement, + * distributed event handling systems. The Observer pattern is also a key part in the familiar, + * model–view–controller (MVC) architectural pattern. The Observer pattern is implemented in, + * numerous programming libraries and systems, including almost all GUI toolkits., + * In this example {@link
[+++ /dev/null, +++ /dev/null, +++ b/cqrs/src/test/java/com/iluwatar/cqrs/IntegrationTest.java]
[+++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, + Captain captain = (Captain) beans.get(ROWING_BEAN);]
[+++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + Troll clubbed = new ClubbedTroll(troll);, + clubbed.attack();, + clubbed.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", clubbed.getAttackPower());, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you!
[+++ b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java]
[+++ b/event-aggregator/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/event-aggregator/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/event-aggregator/src/test/java/com/iluwatar/event/aggregator/EventEmitterTest.java, +package com.iluwatar.event.aggregator;, +, +import org.junit.Test;, +, +import java.util.Objects;, +import java.util.function.Function;, +import java.util.function.Supplier;, +, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.verifyZeroInteractions;, +, +/**, + * Date: 12/12/15 - 10:58 PM, + *, + * @author Jeroen Meulemeester, + */, +public abstract class EventEmitterTest<E extends EventEmitter> {, +, + /**, + * Factory used to create a new instance of the test object with
[+++ b/dao/src/main/java/com/iluwatar/App.java, + WizardDaoImpl dao = new WizardDaoImpl();, + queryData();, + public static void persistData(WizardDaoImpl dao) {, + public static void queryData() {, + MagicService magicService = new MagicServiceImpl();, + for (Wizard w: magicService.findAllWizards()) {, +++ b/dao/src/main/java/com/iluwatar/App.java, + WizardDaoImpl dao = new WizardDaoImpl();, + queryData();, + public static void persistData(WizardDaoImpl dao) {, + public static void queryData() {, + MagicService magicService = new MagicServiceImpl();, + for (Wizard w: magicService.findAllWizards()) {, +++ b/dao/src/main/java/com/iluwatar/Dao.java, +package com.iluwatar;, +, +import java.util.List;, +, +public interface Dao<E extends BaseEntity> {, +, + E find(Long id);, + , + void persist(E entity);, + , + E
[+++ b/converter/README.md, +---, +layout: pattern, +title: Converter, +folder: converter, +permalink: /patterns/converter/, +categories:, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +TODO, +, +![alt text](./etc/converter.png "TODO"), +, +## Applicability, +TODO, +, +* TODO 1, +* TODO 2, +, +## Credits, +, +* [Converter](http://todo.com), +++ b/converter/README.md, +---, +layout: pattern, +title: Converter, +folder: converter, +permalink: /patterns/converter/, +categories:, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +TODO, +, +![alt text](./etc/converter.png "TODO"), +, +## Applicability, +TODO, +, +* TODO 1, +* TODO 2, +, +## Credits, +, +* [Converter](http://todo.com), +++ b/converter/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance",
[+++ b/pom.xml, + <module>private-class-data</module>, + <module>servant</module>, +++ b/pom.xml, + <module>private-class-data</module>, + <module>servant</module>, +++ b/servant/pom.xml]
[+++ b/README.md, +The Visitor pattern is a means of adding a new operation to existing classes. Double dispatch is a means of dispatching function calls with respect to two polymorphic types, rather than a single polymorphic type, which is what languages like C++ and Java _do not_ support directly., +++ b/README.md, +The Visitor pattern is a means of adding a new operation to existing classes. Double dispatch is a means of dispatching function calls with respect to two polymorphic types, rather than a single polymorphic type, which is what languages like C++ and Java _do not_ support directly., +++
[+++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * mapping each of them with the conversion function, + * mapping each of them with the conversion function, +++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * mapping each of them with the conversion function, + * mapping each of them with the conversion function, +++ b/facade/README.md, +* you want to layer your subsystems. Use a facade to define an entry point to each subsystem level. If subsystems are dependent, the you can simplify the dependencies between them by making them communicate with each other solely through their facades]
[+++ b/README.md, +## <a name="abstract-factory">Abstract Factory</a> [&#8593;](#list-of-design-patterns), +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./abstract-factory/etc/abstract-factory_1.png "Abstract Factory"), +, +**Applicability:** Use the Abstract Factory pattern when, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family of related product objects is designed to be used together, and you need to enforce this constraint, +* you want to provide a class library of products, and you want to
[+++ b/feature-toggle/pom.xml]
[+++ b/hexagonal/README.md, +* When the application needs to be independent of any frameworks, +* When it is important that the application highly maintainable and fully testable, +## Presentations, +* [Hexagonal Architecture](https://github.com/iluwatar/java-design-patterns/tree/master/hexagonal/etc/presentation.html), +, +* [Apache Isis](https://isis.apache.org/) builds generic UI and REST API directly from the underlying domain objects, +++ b/hexagonal/README.md, +* When the application needs to be independent of any frameworks, +* When it is important that the application highly maintainable and fully testable, +## Presentations, +* [Hexagonal Architecture](https://github.com/iluwatar/java-design-patterns/tree/master/hexagonal/etc/presentation.html), +, +* [Apache Isis](https://isis.apache.org/) builds generic UI and REST API directly from the underlying domain objects, +++ b/hexagonal/etc/layers.png, +++ b/hexagonal/README.md, +*
[+++ b/PULL_REQUEST_TEMPLATE.md, +, +Pull request title, +, +- Clearly and concisely describes what it does, +- Refer to the issue that it solves, if available, +, +, +Pull request description, +, +- Describes the main changes that come with the pull request, +- Any relevant additional information is provided, +, +, +, +> For detailed contributing instructions see https://github.com/iluwatar/java-design-patterns/wiki/01.-How-to-contribute, +++ b/PULL_REQUEST_TEMPLATE.md, +, +Pull request title, +, +- Clearly and concisely describes what it does, +- Refer to the issue that it solves, if available, +, +, +Pull request description, +, +- Describes the main changes that come with the
[+++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/checkstyle-suppressions.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE suppressions PUBLIC "-//Puppy Crawl//DTD Suppressions 1.1//EN", + "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">, +<suppressions>, + <suppress checks="AvoidStarImport" files="[\\/]src[\\/]test[\\/]java[\\/]"/>, + <suppress checks="[a-zA-Z0-9]*" files="[\\/]src[\\/]test[\\/]resources[\\/]"/>, + <suppress checks="[a-zA-Z0-9]*" files="[\\/]build[\\/]generated-sources[\\/]"/>, + <suppress checks="[a-zA-Z0-9]*" files="[\\/]src[\\/]main[\\/]resources[\\/]"/>, +</suppressions>, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/checkstyle-suppressions.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE suppressions PUBLIC "-//Puppy Crawl//DTD Suppressions 1.1//EN", + "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">, +<suppressions>, + <suppress checks="AvoidStarImport" files="[\\/]src[\\/]test[\\/]java[\\/]"/>, + <suppress checks="[a-zA-Z0-9]*" files="[\\/]src[\\/]test[\\/]resources[\\/]"/>, + <suppress checks="[a-zA-Z0-9]*" files="[\\/]build[\\/]generated-sources[\\/]"/>, + <suppress checks="[a-zA-Z0-9]*" files="[\\/]src[\\/]main[\\/]resources[\\/]"/>, +</suppressions>, +++ b/checkstyle.xml, + <property name="allowedAnnotations" value="Override, Test, Before, After, Parameters, Given, When, BeforeClass, AfterClass, Parameterized"/>, + , + <module name="SuppressionFilter">, + <property name="file" value="${config_loc}/checkstyle-suppressions.xml" default="checkstyle-suppressions.xml"/>, + </module>, + ,
[+++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, +import com.iluwatar.databus.members.MessageCollectorMember;, + final MessageCollectorMember foo = new MessageCollectorMember("Foo");, + final MessageCollectorMember bar = new MessageCollectorMember("Bar");, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, +import com.iluwatar.databus.members.MessageCollectorMember;, + final MessageCollectorMember foo = new MessageCollectorMember("Foo");, + final MessageCollectorMember bar = new MessageCollectorMember("Bar");, +++ /dev/null, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, +import com.iluwatar.databus.members.MessageCollectorMember;, + final MessageCollectorMember foo = new MessageCollectorMember("Foo");, + final MessageCollectorMember bar = new MessageCollectorMember("Bar");, +++ /dev/null, +++ b/data-bus/src/main/java/com/iluwatar/databus/members/MessageCollectorMember.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + * <p>, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation
[+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java, + Zoom zoom = new Zoom();, + conDos.visit(zoom);, + Hayes hayes = new Hayes();, + conDos.visit(hayes);, +++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java, + Zoom zoom = new Zoom();, + conDos.visit(zoom);, + Hayes hayes = new Hayes();, + conDos.visit(hayes);, +++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java, + Zoom zoom = new Zoom();, + conUnix.visit(zoom);]
[+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, + * This class is an implementation of {@link ICommandService} interface. It uses Hibernate as an api for persistence., + Author author = null;, + try (Session session = sessionFactory.openSession()) {, + author = (Author) query.uniqueResult();, + }, + Book book = null;, + try (Session session = sessionFactory.openSession()) {, + book = (Book) query.uniqueResult();, + }, + try (Session session = sessionFactory.openSession()) {, + }, + try (Session session = sessionFactory.openSession()) {, + }, + try (Session session = sessionFactory.openSession()) {, + }, + try (Session session = sessionFactory.openSession()) {, + }, + try (Session session
[+++ b/pom.xml, + <module>acyclic-visitor</module>, +++ b/pom.xml, + <module>acyclic-visitor</module>, +++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java, +import com.iluwatar.throttling.timer.ThrottleTimerImpl;, +import org.junit.jupiter.api.Disabled;, +import static org.junit.jupiter.api.Assertions.assertTrue;, + @Disabled, + Throttler timer = new ThrottleTimerImpl(100);, + assertTrue(counter == 2, "Counter limit must be reached");]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/layers/src/main/java/com/iluwatar/layers/App.java, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java, +package com.iluwatar.layers;, +, +public interface CakeBakingService {, + , + void bakeNewCake(String topping, String layer1, String layer2, String layer3);, +, + void addNewTopping(CakeTopping topping);, + , + void addNewLayer(CakeLayer layer);, +}, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java, +package com.iluwatar.layers;, +, +public interface CakeBakingService {, + , + void bakeNewCake(String topping, String layer1, String layer2, String layer3);, +, + void addNewTopping(CakeTopping topping);, + , + void addNewLayer(CakeLayer layer);, +}, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, +package com.iluwatar.layers;, +, +public class CakeBakingServiceImpl implements CakeBakingService {, +, + @Override, + public void bakeNewCake(String topping, String layer1, String layer2, String layer3) {, +
[+++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * An adapter helps two incompatible interfaces to work together. This is the real , + * world definition for an adapter. Interfaces may be incompatible but the inner , + * functionality should suit the need. The Adapter design pattern allows otherwise , + * incompatible classes to work together by converting the interface of one class , + * into an interface expected by the clients., + * <p>]
[+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * The Decorator pattern is a more flexible alternative to subclassing. The Decorator, + * "decorate" calls to the target. Using the Decorator pattern it is possible to , + * change the behavior of the class during runtime., + * In this example we show how the simple {@link Troll} first attacks and then, + * flees the battle. Then we decorate the {@link Troll} with a {@link SmartTroll}, + * and perform the attack again. You can see how the behavior changes after the, + * decoration.]
[+++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, + * This application demonstrates Reactor pattern. The example demonstrated is a Distributed Logging, + * Service where it listens on multiple TCP or UDP sockets for incoming log requests., + * <i>INTENT</i> <br/>, + * <i>PROBLEM</i> <br/>, + * <i>PARTICIPANTS</i> <br/>, + * <ul>, + * <li>Synchronous Event De-multiplexer</li> {@link NioReactor} plays the role of synchronous event, + * de-multiplexer. It waits for events on multiple channels registered to it in an event loop., + * , + * <p>, + * <li>Initiation Dispatcher</li> {@link NioReactor} plays this role as the application specific, + * {@link
[+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/AsyncCallback.java, +/**, + * , + * AsyncCallback interface, + *, + * @param <T>, + * , + */, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/AsyncCallback.java, +/**, + * , + * AsyncCallback interface, + *, + * @param <T>, + * , + */, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/AsyncExecutor.java, +/**, + * , + * AsyncExecutor interface, + *, + */, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/AsyncCallback.java, +/**, + * , + * AsyncCallback interface, + *, + * @param <T>, + * , + */, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/AsyncExecutor.java, +/**, + * , + * AsyncExecutor interface, + *, + */,
[+++ /dev/null, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of
[+++ b/servant/src/main/java/com/iluwatar/servant/App.java, + * <p>, + * In this example {@link Servant} is serving {@link King} and {@link Queen}.]
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java, +import java.math.BigInteger;, + public abstract BookDTO getBook(String title);, + public abstract BigInteger getAuthorBooksCount(String username);, + public abstract BigInteger getAuthorsCount();]
[+++ b/abstract-factory/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/chain/etc/chain.png, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/chain/etc/chain.png, +++ b/chain/etc/chain.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.chain.Request" project="chain" , + file="/chain/src/main/java/com/iluwatar/chain/Request.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="196" width="228" x="168" y="182"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true"
[+++ b/README.md, +* [Half-Sync/Half-Async](#half-sync-half-async), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/abstract-factory/etc/abstract-factory_1.png "Abstract Factory"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/builder/etc/builder_1.png "Builder"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/factory-method/etc/factory-method_1.png "Factory Method"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/prototype/etc/prototype_1.png "Prototype"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/singleton/etc/singleton_1.png "Singleton"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/adapter/etc/adapter_1.png "Adapter"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/bridge/etc/bridge_1.png "Bridge"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/composite/etc/composite_1.png "Composite"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/decorator/etc/decorator_1.png "Decorator"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/facade/etc/facade_1.png "Facade"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/flyweight/etc/flyweight_1.png "Flyweight"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/proxy/etc/proxy_1.png "Proxy"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/service-locator/etc/service-locator.png "Proxy"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/chain/etc/chain_1.png "Chain of Responsibility"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/command/etc/command.png "Command"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/interpreter/etc/interpreter_1.png "Interpreter"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/iterator/etc/iterator_1.png "Iterator"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/mediator/etc/mediator_1.png "Mediator"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/memento/etc/memento.png "Memento"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/observer/etc/observer_1.png "Observer"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/state/etc/state_1.png "State"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/strategy/etc/strategy_1.png "Strategy"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/template-method/etc/template-method_1.png "Template Method"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/visitor/etc/visitor_1.png "Visitor"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/model-view-presenter/etc/model-view-presenter_1.png "Model-View-Presenter"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/dao/etc/dao.png "Data Access Object"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/double-checked-locking/etc/double_checked_locking_1.png "Double Checked Locking"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/null-object/etc/null-object.png
[+++ b/multiton/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>multiton</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/multiton/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>multiton</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/multiton/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {, + , + public static void main( String[] args ) {, +
[+++ b/page-object/pom.xml]
[+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java, +package com.iluwatar.lazy.loading;, +, +import org.junit.Test;, +, +import java.lang.reflect.Field;, +, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +, +/**, + * Using reflection this test shows that the heavy field is not instantiated until the method getHeavy is called, + *, + * Created by jones on 11/10/2015., + */, +public class HolderThreadSafeTest {, +, + @Test, + public void test() throws IllegalAccessException {, + HolderThreadSafe hts = new HolderThreadSafe();, +, + {//first call is null, + Field[] ff = HolderThreadSafe.class.getDeclaredFields();, + for (Field f: ff) {, + f.setAccessible(true);, + }, +, + assertNull(ff[0].get(hts));, + }, +, + //
[+++ b/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java, + int eventTime = 1;, + long endTime = currentTime + (eventTime + 2 * 1000); // +2 to give a bit of buffer time for event to, + // complete, + int eventTime = 1;, + long endTime = currentTime + (eventTime + 2 * 1000); // +2 to give a bit of buffer time for event to complete]
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces, +public interface AllModemVisitor extends ModemVisitor, ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces, +public interface AllModemVisitor extends ModemVisitor, ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, +public class ConfigureForUnixVisitor implements ModemVisitor, ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces, +public interface AllModemVisitor extends ModemVisitor, ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, +public class ConfigureForUnixVisitor implements ModemVisitor, ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, + try {, + } catch (ClassCastException e) {, + LOGGER.error("Unable to cast to HayesVisitor");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + *
[+++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <groupId>com.iluwatar.layers</groupId>, + <artifactId>layers</artifactId>, + <dependencies>, + <dependency>, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, +
[+++ b/null-object/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/null-object/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java, +package com.iluwatar.nullobject;, +, +import org.junit.Test;, +import org.mockito.Mockito;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +, +/**, + * Date: 12/26/15 - 11:47 PM, + *, + * @author Jeroen Meulemeester, + */, +public class NullNodeTest extends StdOutTest {, +, + /**, + * Verify if {@link NullNode#getInstance()} actually returns the same object instance, + */, + @Test, + public void testGetInstance() {, + final NullNode instance =
[+++ b/data-mapper/pom.xml, + Copyright (c) 2016 Amit Dixit
[+++ b/pom.xml]
[+++ b/property/src/main/java/com/iluwatar/property/App.java, + * , + * Example of {@link Character} instantiation using the Property pattern (also known as Prototype inheritance)., + * <p>, + * objects are used to create another objects and object hierarchies. Hierarchies are created using prototype chain , + * through delegation: every object has link to parent object. Any base (parent) object can be amended at runtime , + * (by adding or removal of some property), and all child objects will be affected as result., + * , + /**, + * Program entry point, + * @param args command line args,
[+++ b/abstract-document/pom.xml, + <version>1.15.0</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0</version>, +++ b/adapter/pom.xml, + <version>1.15.0</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0</version>, +++ b/adapter/pom.xml, + <version>1.15.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0</version>, +++ b/adapter/pom.xml, + <version>1.15.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0</version>, +++ b/adapter/pom.xml, + <version>1.15.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.15.0</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0</version>, +++ b/adapter/pom.xml, + <version>1.15.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/abstract-document/README.md, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/abstract-document/README.md, +++ /dev/null, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/abstract-document/README.md, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/abstract-document/README.md, +++ /dev/null, +++ /dev/null, +++
[+++ b/front-controller/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/front-controller/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/front-controller/src/test/java/com/iluwatar/front/controller/ApplicationExceptionTest.java, +package com.iluwatar.front.controller;, +, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, +/**, + * Date: 12/13/15 - 1:35 PM, + *, + * @author Jeroen Meulemeester, + */, +public class ApplicationExceptionTest {, +, + @Test, + public void testCause() throws Exception {, + final Exception cause = new Exception();, + assertSame(cause, new ApplicationException(cause).getCause());, + }, +, +}, +++ b/front-controller/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/front-controller/src/test/java/com/iluwatar/front/controller/ApplicationExceptionTest.java, +package com.iluwatar.front.controller;, +,
[+++ b/_scripts/postPumlsToServer.py, +#, +# The MIT License, +# Copyright (c) 2014 Ilkka Seppälä, +#, +# Permission is hereby granted, free of charge, to any person obtaining a copy, +# of this software and associated documentation files (the "Software"), to deal, +# in the Software without restriction, including without limitation the rights, +# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, +# copies of the Software, and to permit persons to whom the Software is, +# furnished to do so, subject to the following conditions:, +#, +# The above copyright notice and this permission notice shall be included
[+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, +package com.iluwatar.abstractdocument;, +, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.function.Function;, +import java.util.stream.Stream;, +, +public abstract class AbstractDocument implements Document {, +, + private final Map<String, Object> properties;, +, + protected AbstractDocument(Map<String, Object> properties) {, + Objects.requireNonNull(properties, "properties map is required");, + this.properties = properties;, + }, +, + @Override, + public Void put(String key, Object value) {, + properties.put(key, value);, + return null;, + }, +, + @Override, + public Object get(String key) {, + return properties.get(key);, + }, +, + @Override, + public <T> Stream<T> children(String key, Function<Map<String, Object>, T> constructor) {, + return Stream.of(get(key)),
[+++ b/layers/pom.xml, +++ b/layers/pom.xml, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +import java.util.Arrays;, +, + service.saveNewLayer(new CakeLayerInfo("chocolate", 1200));, + service.saveNewLayer(new CakeLayerInfo("banana", 900));, + service.saveNewLayer(new CakeLayerInfo("strawberry", 950));, + service.saveNewTopping(new CakeToppingInfo("candies", 350));, + CakeInfo cakeInfo = new CakeInfo(new CakeToppingInfo("candies", 0),, + Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("chocolate", 0),, + new CakeLayerInfo("chocolate", 0)));, + try {, + service.bakeNewCake(cakeInfo);, + } catch (CakeBakingException e) {, + e.printStackTrace();, + }, +++ b/layers/pom.xml, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +import java.util.Arrays;, +, + service.saveNewLayer(new CakeLayerInfo("chocolate", 1200));, + service.saveNewLayer(new CakeLayerInfo("banana", 900));, + service.saveNewLayer(new CakeLayerInfo("strawberry", 950));, + service.saveNewTopping(new CakeToppingInfo("candies", 350));, + CakeInfo cakeInfo = new CakeInfo(new CakeToppingInfo("candies", 0),, + Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("chocolate", 0),, + new
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + * The primary ports for the application are console interfaces, + * {@link ConsoleAdministration} through which the lottery round is, + * initiated and run and {@link ConsoleLottery} that allows players to, + * submit lottery tickets for the draw.<p>, + * which is a banking service, {@link LotteryEventLog} that delivers]
[+++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br/>, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br/>, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, + * <p>{@see http://wiki.c2.com/?DataBusPattern}</p>, + * <p>, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain
[+++ b/README.md, +++ b/README.md, +++ b/pom.xml, + <module>state</module>, +++ b/README.md, +++ b/pom.xml, + <module>state</module>, +++ b/state/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>state</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>state</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/README.md, +++ b/pom.xml, + <module>state</module>, +++ b/state/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>state</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>state</name>,
[+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +* it is important that the application is fully testable, +* you use Domain Driven Design methodology and/or Microservices architectural style, +* [Apache Isis](https://isis.apache.org/), +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +* it is important that the application is fully testable, +* you use Domain
[+++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <commons-dbcp.version>1.4</commons-dbcp.version>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <version>${commons-dbcp.version}</version>, + </dependency>, + <dependency>, + <!-- The following exclude configuration was added because error occurred , + when executing "mvn clean test jacoco:report coveralls:report" -->, + <!-- [ERROR] Failed to execute goal org.eluder.coveralls:coveralls-maven-plugin:3.1.0:report , + (default-cli) on project java-design-patterns: I/O operation failed: No source , + found for domainapp/dom/modules/simple/QSimpleObject.java -> [Help 1] -->, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <commons-dbcp.version>1.4</commons-dbcp.version>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <version>${commons-dbcp.version}</version>, + </dependency>, + <dependency>, + <!-- The following exclude configuration was added because error
[+++ b/feature-toggle/pom.xml, +<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/feature-toggle/pom.xml, +<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +++ b/feature-toggle/pom.xml, +<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java, +++ b/feature-toggle/pom.xml, +<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java, +++ b/feature-toggle/pom.xml, +<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns="http://maven.apache.org/POM/4.0.0", +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java, +/**, + * Contains the lists of users of different groups paid and free, + */, + /**, + *, + * @param user {@link User} to be added to the free group, + */, + /**, + *, + * @param user {@link User} to be added to
[+++ b/iterator/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>iterator</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>iterator</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/iterator/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>iterator</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>iterator</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/throttling/etc/throttling-pattern.png, +++ b/throttling/etc/throttling-pattern.png, +++ b/throttling/etc/throttling-pattern.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.2.2" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.throttling.CallsCount" project="throttling" , + file="/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="211" width="256" x="656" y="228"/> , + <display autosize="false" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.throttling.Tenant" project="throttling" , + file="/throttling/src/main/java/com/iluwatar/throttling/Tenant.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="465" y="524"/> , + <display autosize="true" stereotype="true"
[+++ b/decorator/README.md, +* To add responsibilities to individual objects dynamically and transparently, that is, without affecting other objects, +* For responsibilities that can be withdrawn, +* When extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of subclasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +++ b/decorator/README.md, +* To add responsibilities to individual objects dynamically and transparently, that is, without affecting other objects, +* For responsibilities that can be withdrawn, +* When extension by subclassing is impractical. Sometimes a large
[+++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + System.out.println("Constructing parts and car");, + System.out.println("Here is our car:");, + System.out.println("-> model: " + car.getModel().get());, + System.out.println("-> price: " + car.getPrice().get());, + System.out.println("-> parts: ");, + car.getParts().forEach(p -> System.out, + .println("\t" + p.getType().get() + "/" + p.getModel().get() + "/" + p.getPrice().get()));, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + System.out.println("Constructing parts and car");, + System.out.println("Here is our car:");, +
[+++ b/strategy/src/main/java/com/iluwatar/strategy/App.java, + * Strategy ({@link DragonSlayingStrategy}) encapsulates an algorithm. The containing, + * object ({@link DragonSlayer}) can alter its behavior by changing its strategy., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/strategy/src/main/java/com/iluwatar/strategy/App.java, + * Strategy ({@link DragonSlayingStrategy}) encapsulates an algorithm. The containing, + * object ({@link DragonSlayer}) can alter its behavior by changing its strategy., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/strategy/src/test/java/com/iluwatar/strategy/AppTest.java, +/**, + * , + * Application test, + *, + */]
[+++ b/pom.xml, + <hibernate.version>5.0.0.CR2</hibernate.version>, +<!-- <dependency>, + </dependency> -->]
[+++ b/data-mapper/pom.xml, + <relativePath></relativePath>
[+++ b/composite/src/test/java/com/iluwatar/composite/MessengerTest.java, +package com.iluwatar.composite;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.ByteArrayOutputStream;, +import java.io.PrintStream;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Date: 12/11/15 - 8:12 PM, + *, + * @author Jeroen Meulemeester, + */, +public class MessengerTest {, +, + /**, + * The buffer used to capture every write to {@link System#out}, + */, + private ByteArrayOutputStream stdOutBuffer = new ByteArrayOutputStream();, +, + /**, + * Keep the original std-out so it can be restored after the test, + */, + private final PrintStream realStdOut = System.out;, +, + /**, +
[+++ b/trampoline/README.md, +* For interleaving the execution of two or more functions on the same thread., +, +* [cyclops-react](https://github.com/aol/cyclops-react), +++ b/trampoline/README.md, +* For interleaving the execution of two or more functions on the same thread., +, +* [cyclops-react](https://github.com/aol/cyclops-react), +++ /dev/null, +++ b/trampoline/README.md, +* For interleaving the execution of two or more functions on the same thread., +, +* [cyclops-react](https://github.com/aol/cyclops-react), +++ /dev/null, +++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java, +package com.iluwatar.trampoline;, +, +import java.util.stream.Stream;, +, +/**When get is called on the returned Trampoline, internally it will iterate calling ‘jump’, + on the returned Trampoline as long as the concrete instance returned is More,, + stopping
[+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/converter/README.md, +---, +layout: pattern, +title: Converter, +folder: converter, +permalink: /patterns/converter/, +categories:, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +The purpose of the Converter Pattern is to provide a generic, common way of bidirectional, +conversion between corresponding types, allowing a clean implementation in which the types do not, +need to be aware of each other. Moreover, the Converter Pattern introduces bidirectional collection, +mapping, reducing a boilerplate code to minimum., +, +![alt text](./etc/converter.png "Converter Pattern"), +, +## Applicability, +Use the Converter Pattern in the following situations:,
[+++ b/multiton/src/main/java/com/iluwatar/multiton/App.java, + * <p>, + * In this example {@link Nazgul} is the Multiton and we can ask single, + * {@link Nazgul} from it using {@link NazgulName}. The {@link Nazgul}s are statically, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/multiton/src/main/java/com/iluwatar/multiton/App.java, + * <p>, + * In this example {@link Nazgul} is the Multiton and we can ask single, + * {@link Nazgul} from it using {@link NazgulName}. The {@link Nazgul}s are statically, + /**, + * Program entry point, + * @param args command line args, +
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (!asyncResult.isCompleted()) {, + return asyncResult.getValue();, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (!asyncResult.isCompleted()) {, + return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (!asyncResult.isCompleted()) {, + return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + if (!asyncResult.isCompleted()) {, + return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the
[+++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * An adapter helps two incompatible interfaces to work together. This is the real world definition, + * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need., + * The Adapter design pattern allows otherwise incompatible classes to work together by converting, + * the interface of one class into an interface expected by the clients., + * There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * interface whereas the object adapter uses composition to contain the adaptee in the adapter, + *
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/abstract-factory/README.md, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/abstract-factory/README.md, +++ b/adapter/README.md, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/abstract-factory/README.md, +++ b/adapter/README.md, +++ b/builder/README.md, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/abstract-factory/README.md, +++ b/adapter/README.md, +++ b/builder/README.md, +++ b/chain/README.md, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/abstract-factory/README.md, +++ b/adapter/README.md, +++ b/builder/README.md, +++ b/chain/README.md, +++ b/command/README.md, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/)., +++ b/abstract-factory/README.md, +++ b/adapter/README.md, +++ b/builder/README.md, +++ b/chain/README.md, +++ b/command/README.md, +++ b/decorator/README.md, +++ b/.travis.yml, +++ b/README.md, +[Programming/Software Design
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java, + } else if ("4".equals(cmd)) {]
[+++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/abstract-factory/index.md, +++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/abstract-factory/index.md, +++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/README.md, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +++ b/abstract-factory/index.md, +++
[+++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain implements RowingBoat {, + @Override, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain implements RowingBoat {, + @Override, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, + RowingBoat captain = (RowingBoat) beans.get(ROWING_BEAN);, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain implements RowingBoat {, + @Override, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, + RowingBoat captain = (RowingBoat) beans.get(ROWING_BEAN);, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain implements RowingBoat {, + @Override, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, + RowingBoat captain = (RowingBoat) beans.get(ROWING_BEAN);, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager}
[+++ b/data-bus/pom.xml, + <version>1.16.0-SNAPSHOT</version>]
[+++ b/trampoline/pom.xml, +, +, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.junit.jupiter</groupId>, + <artifactId>junit-jupiter-engine</artifactId>, + <scope>test</scope>, + </dependency>, +]
[+++ b/README.md, +4. Format the code according to [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html), + * [Eclipse configuration](https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml), + * [IntelliJ configuration](https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml), +5. Create a simple class diagram from your example code and put it inside of the etc folder., +6. Add description of the pattern in index.md and link to the class diagram., +7. Create a pull request., +++ b/README.md, +4. Format the code according to [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html), + * [Eclipse configuration](https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml), + * [IntelliJ configuration](https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml), +5. Create a simple class diagram from your example code and put it inside of the etc folder., +6. Add description of
[+++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java, + public final void registerObserver(EventObserver obs) {, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java, + public final void registerObserver(EventObserver obs) {, +++ b/iterator/src/main/java/com/iluwatar/iterator/Item.java, + public final void setType(ItemType type) {, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java, + public final void registerObserver(EventObserver obs) {, +++ b/iterator/src/main/java/com/iluwatar/iterator/Item.java, + public final void setType(ItemType type) {, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, + public final void setLayers(Set<CakeLayer> layers) {, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java, + public final void registerObserver(EventObserver obs) {, +++ b/iterator/src/main/java/com/iluwatar/iterator/Item.java, + public final void setType(ItemType type) {, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, + public final void setLayers(Set<CakeLayer> layers) {, +++ b/layers/src/main/java/com/iluwatar/layers/CakeLayer.java, + public final void setName(String name) {, + public final void setCalories(int calories) {, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java, + void bakeNewCake(CakeInfo cakeInfo);, + void saveNewTopping(CakeToppingInfo toppingInfo);, + void saveNewLayer(CakeLayerInfo layerInfo);, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java, + void bakeNewCake(CakeInfo cakeInfo);, + void saveNewTopping(CakeToppingInfo toppingInfo);, + void saveNewLayer(CakeLayerInfo layerInfo);, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, + public void bakeNewCake(CakeInfo cakeInfo) {, + public void saveNewTopping(CakeToppingInfo toppingInfo) {, + public void saveNewLayer(CakeLayerInfo layerInfo) {, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java, + void bakeNewCake(CakeInfo cakeInfo);, + void saveNewTopping(CakeToppingInfo toppingInfo);, + void saveNewLayer(CakeLayerInfo layerInfo);, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, + public void bakeNewCake(CakeInfo cakeInfo) {, + public void saveNewTopping(CakeToppingInfo toppingInfo) {, + public void saveNewLayer(CakeLayerInfo layerInfo) {, +++ b/layers/src/main/java/com/iluwatar/layers/CakeInfo.java, +import java.util.List;, +, + public final CakeToppingInfo cakeToppingInfo;, + public final List<CakeLayerInfo> cakeLayerInfos;, + ,
[+++ b/.travis.yml, +# Migration to container-based infrastructure ]
[+++ b/feature-toggle/index.md, +++ b/feature-toggle/index.md, +++ b/feature-toggle/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns="http://maven.apache.org/POM/4.0.0", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.10.0-SNAPSHOT</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>feature-toggle</artifactId>, +, +, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, +, + </dependencies>, +</project>, +++ b/feature-toggle/index.md, +++ b/feature-toggle/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns="http://maven.apache.org/POM/4.0.0", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>java-design-patterns</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.10.0-SNAPSHOT</version>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>feature-toggle</artifactId>, +, +, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, +, + </dependencies>, +</project>, +++
[+++ b/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java, + private static void makeActions(Collection<DwarvenMineWorker> workers,
[+++ b/caching/README.md, +++ b/caching/README.md, +++ b/caching/etc/caching.png, +++ b/caching/README.md, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="main.java.com.wssia.caching.App" project="CachingPatterns" , + file="/CachingPatterns/src/main/java/com/wssia/caching/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="249" y="150"/> , + <class id="2" language="java" name="main.java.com.wssia.caching.AppManager" project="CachingPatterns" , + file="/CachingPatterns/src/main/java/com/wssia/caching/AppManager.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="502" y="163"/> , + <class id="3" language="java" name="main.java.com.wssia.caching.CacheStore" project="CachingPatterns" , + file="/CachingPatterns/src/main/java/com/wssia/caching/CacheStore.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="537" y="436"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true"
[+++ b/dirty-flag/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for
[+++ b/poison-pill/src/main/java/com/iluwatar/poison/pill/App.java, + * If you use Poison Pill as the termination signal then Producer is responsible to notify Consumer that , + * the exchange is over and reject any further messages. The Consumer receiving Poison Pill will stop , + * reading messages from the queue. You must also ensure that the Poison Pill will be the last message , + * that will be read from the queue (if you have prioritized queue then this can be tricky)., + * In simple cases the Poison Pill can be just a null-reference, but holding a unique separate shared]
[+++ b/command/src/main/java/com/iluwatar/command/App.java, + * <p>, + * object (spell) knows about the receiver (target) and invokes a method of the receiver. Values for parameters of , + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/command/src/main/java/com/iluwatar/command/App.java, + * <p>, + * object (spell) knows about the receiver (target) and invokes a method of the receiver. Values for parameters of , + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/command/src/test/java/com/iluwatar/command/AppTest.java, +/**, + * , + * Application
[+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java, + @Override, + public int hashCode() {, + final int prime = 31;, + int result = 1;, + result = prime * result + ((category == null) ? 0 : category.hashCode());, + result = prime * result + ((make == null) ? 0 : make.hashCode());, + result = prime * result + ((model == null) ? 0 : model.hashCode());, + result = prime * result + year;, + return result;, + }, +, + @Override, + public boolean equals(Object obj) {, + if (this == obj) {, + return true;, + }, + if (obj ==
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br>, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br>, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, + * @see <a href="http://wiki.c2.com/?DataBusPattern">http://wiki.c2.com/?DataBusPattern</a>, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java,
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +---, +layout: pattern, +title: Data Bus, +folder: data-bus, +permalink: /patterns/data-bus/, +, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +, +Allows send of messages/events between components of an application, +without them needing to know about each other. They only need to know, +about the type of the message/event being sent., +, +![data bus pattern uml diagram](./etc/data-bus.urm.png "Data Bus pattern"), +, +## Applicability, +Use Data Bus pattern when, +, +* you want your components to decide themselves which messages/events they want to receive, +* you want to
[+++ b/event-asynchronous/etc/event-asynchronous.urm.puml, +@startuml, +package com.iluwatar.event.asynchronous {, + class Event {, + - eventId : int, + - eventListener : ThreadCompleteListener, + - eventTime : int, + - isComplete : boolean, + - isSynchronous : boolean, + - thread : Thread, + + Event(eventId : int, eventTime : int, isSynchronous : boolean), + + addListener(listener : ThreadCompleteListener), + - completed(), + + isSynchronous() : boolean, + + removeListener(listener : ThreadCompleteListener), + + run(), + + start(), + + status(), + + stop(), + }, + interface ThreadCompleteListener {, + + completedEventHandler(int) {abstract}, + }, + class EventManager {, + +
[+++ b/strategy/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/strategy/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java, +package com.iluwatar.strategy;, +, +import org.junit.Test;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +, +/**, + * Date: 12/29/15 - 10:50 PM, + *, + * @author Jeroen Meulemeester, + */, +public class DragonSlayerTest {, +, + /**, + * Verify if the dragon slayer uses the strategy during battle, + */, + @Test, + public void testGoToBattle() {, + final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);, + final DragonSlayer dragonSlayer = new
[+++ b/eip-message-channel/.gitignore, +/target/, +++ b/eip-message-channel/.gitignore, +/target/, +++ b/eip-message-channel/README.md, +---, +layout: pattern, +title: EIP Message Channel, +folder: eip-message-channel, +permalink: /patterns/eip-message-channel/, +categories: Integration, +tags:, + - Java, + - EIP, + - Apache Camel™, +---, +, +## Intent, +When two applications communicate using a messaging system they do it by using logical addresses, +of the system, so called Message Channels., +, +![alt text](./etc/message-channel.png "Message Channel"), +, +## Applicability, +Use the Message Channel pattern when, +, +* two or more applications need to communicate using a messaging system, +, +## Real world examples, +, +* [akka-camel](http://doc.akka.io/docs/akka/snapshot/scala/camel.html), +++ b/eip-message-channel/.gitignore, +/target/, +++ b/eip-message-channel/README.md, +---,
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * </p>, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * </p>, +++ b/caching/src/main/java/com/iluwatar/caching/DBManager.java, + * <p>DBManager handles the communication with the underlying data store i.e. Database. It contains the, + * for the application.</p>, + * , + * <p>Developer/Tester is able to choose whether the application should use MongoDB as its underlying, + * during runtime (createVirtualDB()).</p>, + * ]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ b/reactor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +
[+++ b/chain/README.md, +## Explanation, +, +Real world example, +, +> The Orc King gives loud orders to his army. The closest one to react is the commander, then officer and then soldier. The commander, officer and soldier here form a chain of responsibility., +, +In plain words, +, +> It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler., +, +Wikipedia says, +, +> In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series
[+++ b/builder/src/main/java/com/iluwatar/builder/App.java, + * The intention of the Builder pattern is to find a solution to the telescoping , + * constructor anti-pattern. The telescoping constructor anti-pattern occurs when the , + * increase of object constructor parameter combination leads to an exponential list , + * of constructors. Instead of using numerous constructors, the builder pattern uses , + * another object, a builder, that receives each initialization parameter step by step , + * and then returns the resulting constructed object at once., + * <p>, + * The Builder pattern has another benefit. It can be
[+++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + * The Prototype pattern is a creational design pattern in software development. It is , + * used when the type of objects to create is determined by a prototypical instance, , + * which is cloned to produce new objects. This pattern is used to:, + * - avoid subclasses of an object creator in the client application, like the abstract factory pattern does., + * - avoid the inherent cost of creating a new object in the standard way (e.g., using the 'new' keyword), + * <p>, + * In this example we have
[+++ b/abstract-factory/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/command/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/command/pom.xml, +++ b/composite/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/command/pom.xml, +++ b/composite/pom.xml, +++ b/decorator/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++ b/chain/pom.xml, +++ b/command/pom.xml, +++ b/composite/pom.xml, +++ b/decorator/pom.xml, +++ b/double-checked-locking/pom.xml, +++ b/abstract-factory/pom.xml, +++ b/adapter/pom.xml, +++ b/bridge/pom.xml, +++ b/builder/pom.xml, +++
[+++ b/pom.xml, + <module>business-delegate</module>, + <module>half-sync-half-async</module>, + <module>step-builder</module>]
[+++ b/repository/src/main/java/com/iluwatar/repository/AppConfig.java, +package com.iluwatar.repository;, +, +import java.sql.SQLException;, +import java.util.List;, +import java.util.Properties;, +, +import javax.sql.DataSource;, +, +import org.apache.commons.dbcp.BasicDataSource;, +import org.hibernate.jpa.HibernatePersistenceProvider;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.data.jpa.repository.config.EnableJpaRepositories;, +import org.springframework.orm.jpa.JpaTransactionManager;, +import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;, +, +/**, + * Annotations based configuration for Spring, + *, + */, +@EnableJpaRepositories, +public class AppConfig {, +, + /**, + * Creation of H2 db, + * , + * @return A new Instance of DataSource, + */, + @Bean(destroyMethod = "close"), + public DataSource dataSource() {, + BasicDataSource basicDataSource = new BasicDataSource();, + basicDataSource.setDriverClassName("org.h2.Driver");, + basicDataSource.setUrl("jdbc:h2:~/databases/person");, + basicDataSource.setUsername("sa");, + basicDataSource.setPassword("sa");, + return (DataSource) basicDataSource;, + }, +,
[+++ b/state/src/main/java/com/iluwatar/state/App.java, + * In State pattern the container object ({@link Mammoth}) has an internal state object ({@link State}) that, + * <p>, + * In this example the {@link Mammoth} changes its behavior as time passes by., +++ b/state/src/main/java/com/iluwatar/state/App.java, + * In State pattern the container object ({@link Mammoth}) has an internal state object ({@link State}) that, + * <p>, + * In this example the {@link Mammoth} changes its behavior as time passes by., +++ b/state/src/test/java/com/iluwatar/state/AppTest.java, +/**, + * , + * Application test, + *, + */]
[+++ b/event-asynchronous/README.md, +---, +layout: pattern, +title: Event-based Asynchronous, +folder: event-asynchronous, +permalink: /patterns/event-asynchronous/, +categories: Other, +tags:, + - difficulty-intermediate, + - performance, + - Java, +---, +, +## Intent, +The Event-based Asynchronous Pattern makes available the advantages of multithreaded applications while hiding many, +of the complex issues inherent in multithreaded design. Using a class that supports this pattern can allow you to:-, +(1) Perform time-consuming tasks, such as downloads and database operations, "in the background," without interrupting your application. , +(2) Execute multiple operations simultaneously, receiving notifications when each completes. , +(3) Wait for resources to become available without stopping
[+++ b/.gitignore, +/bin/, +/bin/, +/bin/, +
[+++ b/layers/src/main/java/com/iluwatar/layers/App.java, + cakeBakingService.saveNewLayer(new CakeLayerInfo("lemon", 950));, + cakeBakingService.saveNewLayer(new CakeLayerInfo("vanilla", 950));, + cakeBakingService.saveNewLayer(new CakeLayerInfo("strawberry", 950));, + cakeBakingService.saveNewTopping(new CakeToppingInfo("cherry", 350));, + CakeInfo cake1 = new CakeInfo(new CakeToppingInfo("candies", 0),, + cakeBakingService.bakeNewCake(cake1);, + } catch (CakeBakingException e) {, + e.printStackTrace();, + }, + CakeInfo cake2 = new CakeInfo(new CakeToppingInfo("cherry", 0),, + Arrays.asList(new CakeLayerInfo("vanilla", 0), new CakeLayerInfo("lemon", 0),, + new CakeLayerInfo("strawberry", 0)));, + try {, + cakeBakingService.bakeNewCake(cake2);, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, + cakeBakingService.saveNewLayer(new CakeLayerInfo("lemon", 950));, + cakeBakingService.saveNewLayer(new CakeLayerInfo("vanilla", 950));, + cakeBakingService.saveNewLayer(new CakeLayerInfo("strawberry", 950));, + cakeBakingService.saveNewTopping(new CakeToppingInfo("cherry", 350));, + CakeInfo cake1 = new CakeInfo(new CakeToppingInfo("candies", 0),, + cakeBakingService.bakeNewCake(cake1);, + } catch (CakeBakingException e) {, + e.printStackTrace();, +
[+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, +import java.awt.event.ActionEvent;, +import java.awt.event.ActionListener;, + * The Client class is responsible for handling the input and running them through filters inside, + * the {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being, + * displayed in the {@link Target}., +public class Client extends JFrame {, + private FilterManager filterManager;, + clearButton.addActionListener(new ActionListener() {, + @Override, + public void actionPerformed(ActionEvent e) {, + }, + processButton.addActionListener(new ActionListener() {, + @Override, + public void actionPerformed(ActionEvent e) {, + Order order =, + new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),, +
[+++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/repository/pom.xml, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <version>1.4</version>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, +++ b/repository/pom.xml, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <version>1.4</version>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, +++ b/repository/src/main/java/com/iluwatar/App.java, +++ b/repository/pom.xml, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <version>1.4</version>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, +++ b/repository/src/main/java/com/iluwatar/App.java, +++ b/repository/src/main/java/com/iluwatar/Person.java, +++ b/repository/pom.xml, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <version>1.4</version>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, +++ b/repository/src/main/java/com/iluwatar/App.java, +++ b/repository/src/main/java/com/iluwatar/Person.java, +++ b/repository/src/main/java/com/iluwatar/PersonDao.java, +++ b/repository/pom.xml, +
[+++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {}, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {}, +++ b/pom.xml, + <module>value-object</module>, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {}, +++ b/pom.xml, + <module>value-object</module>, +++ b/value-object/etc/value-object.png, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {}, +++ b/pom.xml, + <module>value-object</module>, +++ b/value-object/etc/value-object.png, +++ b/value-object/etc/value-object.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="true" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.value.object.HeroStat" project="value-object" , + file="/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="520" y="337"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true"
[+++ b/data-transfer-object/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>data-transfer-object</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.17.0-SNAPSHOT</version>, + <relativePath>../data-transfer-object/pom.xml</relativePath>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>data-transfer-object</artifactId>, +, +, +</project>]
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();]
[+++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + private Hero(HeroBuilder builder) {, + this.profession = builder.profession;, + this.name = builder.name;, + this.hairColor = builder.hairColor;, + this.hairType = builder.hairType;, + this.weapon = builder.weapon;, + this.armor = builder.armor;, + }, +, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + private Hero(HeroBuilder builder) {, + this.profession = builder.profession;, + this.name = builder.name;, + this.hairColor = builder.hairColor;, + this.hairType = builder.hairType;, + this.weapon = builder.weapon;, + this.armor = builder.armor;, + }, +, +++ b/naked-objects/dom/src/main/java/domainapp/dom/app/homepage/HomePageService.java, +, + // region > homePage (action), +,
[+++ b/decorator/README.md, +Lets take the troll example. First of all we have a simple troll implementing the troll interface, +++ b/decorator/README.md, +Lets take the troll example. First of all we have a simple troll implementing the troll interface, +++ b/eip-splitter/README.md, +---, +layout: pattern, +title: EIP Splitter, +folder: eip-splitter, +permalink: /patterns/eip-splitter/, +categories: Enterprise integration, +tags:, + - Java, + - Difficulty-Intermittent, + - Enterprise integration, +---, +, +## Intent, +, +, +## Applicability, +, +, +## Credits, +, +++ b/decorator/README.md, +Lets take the troll example. First of all we have a simple troll implementing the troll interface, +++ b/eip-splitter/README.md, +---,
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/converter/etc/converter.png, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/converter/etc/converter.png, +++ b/retry/src/main/java/com/iluwatar/retry/Retry.java, + } while (true);]
[+++ b/monostate/index.md, +* Typically this pattern might be used everywhere a Singleton might be used. Singleton usage however is not transparent, Monostate usage is., +++ b/monostate/index.md, +* Typically this pattern might be used everywhere a Singleton might be used. Singleton usage however is not transparent, Monostate usage is., +++ b/monostate/src/main/java/com/iluwatar/monostate/Request.java]
[+++ /dev/null, +++ /dev/null, +++ b/balking/README.md, +* Guarded Suspension Pattern, +++ /dev/null, +++ b/balking/README.md, +* Guarded Suspension Pattern, +++ b/bridge/README.md, +Decouple an abstraction from its implementation so that the two can vary independently., +## Explanation, +, +Real world example, +, +> Consider you have a weapon with different enchantments and you are supposed to allow mixing different weapons with different enchantments. What would you do? Create multiple copies of each of the weapons for each of the enchantments or would you just create separate enchantment and set it for the weapon as needed? Bridge pattern allows you to do
[+++ b/prototype/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/prototype/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/prototype/src/test/java/com/iluwatar/prototype/HeroFactoryImplTest.java, +package com.iluwatar.prototype;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertNull;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.when;, +, +/**, + * Date: 12/28/15 - 8:34 PM, + *, + * @author Jeroen Meulemeester, + */, +public class HeroFactoryImplTest {, +, + @Test, + public void testFactory() throws Exception {, + final Mage mage = mock(Mage.class);, + final Warlord warlord = mock(Warlord.class);, + final Beast beast = mock(Beast.class);, +, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/collection-pipeline/README.md, +---, +layout: pattern, +title: Collection Pipeline, +folder: collection-pipeline, +permalink: /patterns/collection-pipeline/, +categories: Functional, +tags:, + - Java, + - Difficulty-Beginner, + - Functional, +---, +, +## Intent, +Collection Pipeline introduces Function Composition and Collection Pipeline, two functional-style patterns that you can combine to iterate collections in your code. , +In functional programming, it's common to sequence complex operations through a series of smaller modular functions or operations. The series is called a composition of functions, or a function composition. When a collection of data flows through a function composition, it becomes a collection pipeline. Function Composition and Collection
[+++ b/.travis.yml, +language: java
[+++ b/.gitignore, +/bin/, +/bin/, +/bin/, +
[+++ b/acyclic-visitor/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/reactor/pom.xml, + <version>1.6.0</version>]
[+++ b/execute-around/src/main/java/com/iluwatar/execute/around/App.java, + FileWriterAction writeHello = writer -> {, + };, + new SimpleFileWriter("testfile.txt", writeHello);, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/App.java, + FileWriterAction writeHello = writer -> {, + };, + new SimpleFileWriter("testfile.txt", writeHello);, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/FileWriterAction.java, +@FunctionalInterface]
[+++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +import com.iluwatar.ambassador.util.RandomProvider;, + static final int THRESHOLD = 200;, + private final RandomProvider randomProvider;, + private RemoteService() {, + this(Math::random);, + }, + * This constuctor is used for testing purposes only., + */, + RemoteService(RandomProvider randomProvider) {, + this.randomProvider = randomProvider;, + }, + /**, + * @return if waitTime is less than {@link RemoteService#THRESHOLD}, it returns value * 10,, + * otherwise {@link RemoteServiceInterface#FAILURE}., + long waitTime = (long) Math.floor(randomProvider.random() * 1000);, + return waitTime <= THRESHOLD ? value * 10 : FAILURE;, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +import com.iluwatar.ambassador.util.RandomProvider;, + static final int THRESHOLD = 200;, +
[+++ b/chain/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>chain</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>chain</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/chain/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>chain</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>chain</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +---, +layout: pattern, +title: Data Bus, +folder: data-bus, +permalink: /patterns/data-bus/, +, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +, +Allows send of messages/events between components of an application, +without them needing to know about each other. They only need to know, +about the type of the message/event being sent., +, +![data bus pattern uml diagram](./etc/data-bus.urm.png "Data Bus pattern"), +, +## Applicability, +Use Data Bus pattern when, +, +* you want your components to decide themselves which messages/events they want to receive, +* you want to
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2017 Piyush Chaudhari, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, +
[+++ /dev/null, +++ /dev/null, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorPresenterTest.java, +import static org.junit.Assert.*;, +, +import org.junit.Before;, +import org.junit.Test;, +, +/**, + * This test case is responsible for testing our application, + * by taking advantage of the Model-View-Controller architectural pattern., + */, +public class FileselectorPresenterTest {, + , + /**, + * The Presenter component., + */, + private FileSelectorPresenter presenter;, + , + /**, + * The View component, implemented this time as a Stub!!!, + */, + private FileSelectorStub stub;, + , + /**, + * The Model component., + */, + private FileLoader loader;, + , + , +
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +
[+++ b/cqrs/README.md, +---, +layout: pattern, +title: CQRS, +folder: cqrs, +permalink: /patterns/cqrs/, +pumlid: 7SPR4a0m3030gt00pR_RH6I8QQFouFgC_TfHb6gkd5Q7FQBx363ub4rYpoMTZKuDrYXqDX37HIuuyCPfPPTDfuuHREhGqBy0NUR0GNzAMYizMtq1, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +CQRS Command Query Responsibility Segregation - Separate the query side from the command side., +, +![alt text](./etc/cqrs.png "CQRS"), +, +## Applicability, +Use the CQRS pattern when, +, +* you want to scale the queries and commands independently., +* you want to use different data models for queries and commands. Useful when dealing with complex domains., +* you want to use architectures like event sourcing or task based UI., +, +## Credits, +, +*
[+++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, + * This method check the Update Method's thread is started.]
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, + userAccount1 = AppManager.find("001");, + userAccount1 = AppManager.find("001");, + userAccount2 = AppManager.find("002");, + userAccount2 = AppManager.find("002");, + userAccount2 = AppManager.find("002");, + userAccount3 = AppManager.find("003");, + userAccount4 = AppManager.find("004");, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + userAccount1 = AppManager.find("001");, + userAccount1 = AppManager.find("001");, + userAccount2 = AppManager.find("002");, + userAccount2 = AppManager.find("002");, + userAccount2 = AppManager.find("002");, + userAccount3 = AppManager.find("003");, + userAccount4 = AppManager.find("004");, +++ b/event-aggregator/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + userAccount1 = AppManager.find("001");, + userAccount1 = AppManager.find("001");, + userAccount2 = AppManager.find("002");, + userAccount2 = AppManager.find("002");, + userAccount2 = AppManager.find("002");, + userAccount3 = AppManager.find("003");, +
[+++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business tiers., + * <p>, + * <p>, + * In this example the client ({@link Client}) utilizes a business delegate ({@link BusinessDelegate}) to execute a task., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business tiers., + * <p>, + * <p>, + * In this example the client ({@link Client}) utilizes a business delegate ({@link BusinessDelegate}) to
[+++ b/naked-objects/pom.xml, + <isis.version>1.9.0</isis.version>, +++ b/naked-objects/pom.xml, + <isis.version>1.9.0</isis.version>, +++ b/pom.xml, + <hibernate.version>5.0.1.Final</hibernate.version>, + <spring-data.version>1.9.0.RELEASE</spring-data.version>]
[+++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/builder/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/builder/pom.xml, + <version>1.2.0</version>, +++ b/callback/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/builder/pom.xml, + <version>1.2.0</version>, +++ b/callback/pom.xml, + <version>1.2.0</version>, +++ b/chain/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/builder/pom.xml, +
[+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private DbManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private DbManager() {, + }, +, +++ b/naked-objects/integtests/src/test/java/domainapp/integtests/bootstrap/SimpleAppSystemInitializer.java, + private SimpleAppSystemInitializer() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +,
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, + private Integer id;, + public Video(Integer id, String title, Integer length, String description, String director, String language) {, + return "{" +, + "\"id\": \"" + id + "\"," +, + "\"title\": \"" + title + "\"," +, + "\"description\": \"" + description + "\"," +, + "\"director\": \"" + director + "\"," +, + "\"language\": \"" + language + "\"," +, + "}";, +++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, + private Integer id;, + public Video(Integer id, String title, Integer length, String description, String director, String language) {, + return "{" +, + "\"id\": \"" + id + "\","
[+++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, + PreparedStatement statement = connection.prepareStatement("SELECT * FROM CUSTOMERS"); //NOSONAR, + ResultSet resultSet = statement.executeQuery(); //NOSONAR, + }, false).onClose(() -> mutedClose(connection, statement, resultSet));, + private void mutedClose(Connection connection, PreparedStatement statement, ResultSet resultSet) {, + resultSet.close();, + statement.close();]
[+++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/AdvancedSorceress.java, +package com.iluwatar.dependency.injection;
[+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +package com.iluwatar.featuretoggle.pattern;, +, +import com.iluwatar.featuretoggle.user.User;, +, +/**, + * Created by joseph on 26/01/16., + */, +public interface Service {, +, + public String getWelcomeMessage(User user);, +}, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java, +package com.iluwatar.featuretoggle.pattern;, +, +import com.iluwatar.featuretoggle.user.User;, +, +/**, + * Created by joseph on 26/01/16., + */, +public interface Service {, +, + public String getWelcomeMessage(User user);, +}, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java, +package com.iluwatar.featuretoggle.pattern.tieredversion;, +, +import com.iluwatar.featuretoggle.pattern.Service;, +import com.iluwatar.featuretoggle.user.User;, +import com.iluwatar.featuretoggle.user.UserGroup;, +, +/**, + * Created by joseph on 26/01/16., + */, +public class TieredFeatureToggleVersion implements Service {, +, + @Override, + public String getWelcomeMessage(User user) {, + if(UserGroup.isPaid(user)){, + return
[+++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/guarded-suspension/README.md, +Use Guarded suspension pattern to handle a situation when you want to execute a method on object which is not in a proper state., +Use Guarded Suspension pattern when the developer knows that the method execution will be blocked for a finite period of time, +## Related patterns, +* Balking , +++ b/guarded-suspension/README.md, +Use Guarded suspension pattern to handle a situation when you want to execute a method on object which is not in a proper state., +Use Guarded Suspension pattern when the developer knows that the method execution will be blocked for a finite period of
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.info("Author username : {}", nullAuthor);, + LOGGER.info("Author eEvans : {}", eEvans);, + LOGGER.info("jBloch number of books : {}", jBlochBooksCount);, + LOGGER.info("Number of authors : {}", authorsCount);, + LOGGER.info("DDD book : {}", dddBook);, + LOGGER.info("jBloch books : {}", jBlochBooks);]
[+++ b/business-delegate/README.md, +++ b/business-delegate/README.md, +++ b/callback/README.md, +++ b/business-delegate/README.md, +++ b/callback/README.md, +++ b/lazy-loading/README.md, +++ b/business-delegate/README.md, +++ b/callback/README.md, +++ b/lazy-loading/README.md, +++ b/mutex/README.md, +---, +layout: pattern, +title: Mutex, +folder: mutex, +permalink: /patterns/mutex/, +categories: Lock, +tags: , + - Java, + - Difficulty-Beginner, +---, +, +## Also known as, +Mutual Exclusion Lock, +Binary Semaphore, +, +## Intent, +Create a lock which only allows a single thread to access a resource at any one instant., +, +![alt text](./etc/mutex.png "Mutex"), +, +## Applicability, +Use a Mutex when, +, +* you need to prevent two threads accessing a critical section at the same time, +* concurrent
[+++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, + verify(enchantment).apply();, + verify(enchantment).onActivate();, + verify(enchantment).onDeactivate();, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, + verify(enchantment).apply();, + verify(enchantment).onActivate();, + verify(enchantment).onDeactivate();, +++ b/chain/README.md, +## Explanation, +, +Real world example, +, +> The Orc King gives loud orders to his army. The closest one to react is the commander, then officer and then soldier. The commander, officer and soldier here form a chain of responsibility., +, +In plain words, +, +> It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler., +, +Wikipedia says, +, +> In object-oriented design, the
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();, +++ b/dao/pom.xml, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + , + <dependency>, + <groupId>log4j</groupId>, + <artifactId>log4j</artifactId>, + </dependency>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();, +++ b/dao/pom.xml, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + , + <dependency>, + <groupId>log4j</groupId>, + <artifactId>log4j</artifactId>, + </dependency>, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, +import org.apache.log4j.Logger;, +, + private static Logger LOGGER = Logger.getLogger(App.class);, +, + * Program entry point., + * , + * @param args command line args., + public static void main(final String[]
[+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + * Testing {@link OrcBlacksmith} to produce an AXE asserting that the Weapon is an instance]
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, +/**, + * This class is implementation of {@link ICommandService} interface. It uses Hibernate as an api for persistence., + *, + */, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, +/**, + * This class is implementation of {@link ICommandService} interface. It uses Hibernate as an api for persistence., + *, + */, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java, +/**, + * This interface represents the commands of the CQRS pattern, + *, + */, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, +/**, + * This class is implementation of {@link ICommandService} interface. It uses Hibernate as an api for persistence., + *, + */, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java, +/**, + * This
[+++ b/chain/src/main/java/com/iluwatar/chain/App.java, + * The Chain of Responsibility pattern is a design pattern consisting of command , + * objects and a series of processing objects. Each processing object contains , + * logic that defines the types of command objects that it can handle; the rest are , + * passed to the next processing object in the chain. A mechanism also exists for , + * adding new processing objects to the end of this chain., + * <p>, + * In this example we organize the request handlers ({@link RequestHandler}) into a, + * chain where
[+++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + public synchronized String toString() {]
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +---, +layout: pattern, +title: Data Bus, +folder: data-bus, +permalink: /patterns/data-bus/, +, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +, +Allows send of messages/events between components of an application, +without them needing to know about each other. They only need to know, +about the type of the message/event being sent., +, +![data bus pattern uml diagram](./etc/data-bus.urm.png "Data Bus pattern"), +, +## Applicability, +Use Data Bus pattern when, +, +* you want your components to decide themselves which messages/events they want to receive, +* you want to
[+++ b/object-mother/src/main/java/com/iluwatar/objectmother/RoyaltyObjectMother.java, + * Method to create a sober and unhappy king. The standard parameters are set., +++ b/object-mother/src/main/java/com/iluwatar/objectmother/RoyaltyObjectMother.java, + * Method to create a sober and unhappy king. The standard parameters are set., +++ b/pom.xml, +++ b/object-mother/src/main/java/com/iluwatar/objectmother/RoyaltyObjectMother.java, + * Method to create a sober and unhappy king. The standard parameters are set., +++ b/pom.xml, +++ /dev/null, +++ b/object-mother/src/main/java/com/iluwatar/objectmother/RoyaltyObjectMother.java, + * Method to create a sober and unhappy king. The standard parameters are set., +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/object-mother/src/main/java/com/iluwatar/objectmother/RoyaltyObjectMother.java, + * Method to create a sober and unhappy king. The standard parameters are set., +++ b/pom.xml,
[+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, + .findAny().get().stream(), + @Override, + public String toString() {, + final StringBuilder builder = new StringBuilder();, + builder.append(getClass().getName()).append("[");, + properties.entrySet().forEach(e ->, + builder.append("[").append(e.getKey()).append(" : ").append(e.getValue()).append("]"), + );, + builder.append("]");, + return builder.toString();, + }, +]
[+++ b/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java, + if (serviceObj != null) { // Only cache a service if it actually exists, + }, +++ b/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java, + if (serviceObj != null) { // Only cache a service if it actually exists, + }, +++ b/service-locator/src/test/java/com/iluwatar/servicelocator/ServiceLocatorTest.java, +package com.iluwatar.servicelocator;, +, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, +/**, + * Date: 12/29/15 - 19:07 PM, + *, + * @author Jeroen Meulemeester, + */, +public class ServiceLocatorTest {, +, + /**, + * Verify if we just receive 'null' when requesting a non-existing service, + */, + @Test, + public void testGetNonExistentService() {, + assertNull(ServiceLocator.getService("fantastic/unicorn/service"));, +
[+++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +<class-diagram version="1.1.11" icons="true" automaticImage="PNG" always-add-relationships="false", + generalizations="true" realizations="true" associations="true" dependencies="false" nesting-relationships="true", + router="FAN">, + <class id="1" language="java" name="com.iluwatar.caching.CacheStore" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/CacheStore.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="322" y="444"/>, + <class id="2" language="java" name="com.iluwatar.caching.LruCache" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/LruCache.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="700" y="446"/>, + <enumeration id="3" language="java" name="com.iluwatar.caching.CachingPolicy" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="943" y="122"/>, + <class id="4" language="java" name="com.iluwatar.caching.DbManager" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/DbManager.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="1011" y="426"/>, + <class id="5" language="java"
[+++ b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java, + assertTrue(countries.isEmpty());]
[+++ b/property/src/test/java/com/iluwatar/property/CharacterTest.java, +package com.iluwatar.property;, +, +import org.junit.Test;, +, +import static com.iluwatar.property.Character.Type;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +/**, + * Date: 12/28/15 - 7:46 PM, + *, + * @author Jeroen Meulemeester, + */, +public class CharacterTest {, +, + @Test, + public void testPrototypeStats() throws Exception {, + final Character prototype = new Character();, +, + for (final Stats stat : Stats.values()) {, + assertFalse(prototype.has(stat));, + assertNull(prototype.get(stat));, +, + final Integer expectedValue = stat.ordinal();, + prototype.set(stat, expectedValue);, + assertTrue(prototype.has(stat));, + assertEquals(expectedValue, prototype.get(stat));, +, + prototype.remove(stat);, + assertFalse(prototype.has(stat));, + assertNull(prototype.get(stat));, + },
[+++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, +package com.iluwatar.layers;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import javax.persistence.Entity;, +import javax.persistence.GeneratedValue;, +import javax.persistence.Id;, +import javax.persistence.OneToMany;, +import javax.persistence.OneToOne;, +, +@Entity, +public class Cake {, +, + @Id, + @GeneratedValue, + private Long id;, + , + @OneToMany, + private List<CakeLayer> layers;, +, + @OneToOne, + private CakeTopping topping;, + , + public Cake() { , + layers = new ArrayList<>();, + }, +}, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, +package com.iluwatar.layers;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import javax.persistence.Entity;, +import javax.persistence.GeneratedValue;, +import javax.persistence.Id;, +import javax.persistence.OneToMany;, +import javax.persistence.OneToOne;, +, +@Entity, +public class Cake {, +, + @Id, + @GeneratedValue, + private Long
[+++ b/checkstyle.xml, +<?xml version="1.0"?>, +<!DOCTYPE module PUBLIC, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN", + "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +, +<!--, +, + Source = https://github.com/checkstyle/checkstyle/tree/master/src/main/resources, +, + Checkstyle configurartion that checks the Google coding conventions from:, + , + - Google Java Style, + https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html, + , + Checkstyle is very configurable. Be sure to read the documentation at, + http://checkstyle.sf.net (or in your downloaded distribution)., +, + Most Checks are configurable, be sure to consult the documentation., +, + To completely disable a check, just comment it out or delete it from the file., +, + Authors: Max Vetrenko, Ruslan Diachenko,
[+++ b/delegation/pom.xml, + <dependency>, + <groupId>com.github.stefanbirkner</groupId>, + <artifactId>system-rules</artifactId>, + <version>1.14.0</version>, + <scope>test</scope>, + </dependency>, +++ b/delegation/pom.xml, + <dependency>, + <groupId>com.github.stefanbirkner</groupId>, + <artifactId>system-rules</artifactId>, + <version>1.14.0</version>, + <scope>test</scope>, + </dependency>, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, +package com.iluwatar.delegation.simple;, +, +public abstract class AbstractPrinterController<T extends Printer> implements Printer{, +, + private Printer printer;, +, + public AbstractPrinterController(Printer printer) {, + this.printer = printer;, + }, +, + protected Printer getPrinter() {, + return printer;, + }, +}, +++ b/delegation/pom.xml, + <dependency>, + <groupId>com.github.stefanbirkner</groupId>, + <artifactId>system-rules</artifactId>, + <version>1.14.0</version>, + <scope>test</scope>, + </dependency>, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, +package com.iluwatar.delegation.simple;, +, +public abstract class AbstractPrinterController<T extends Printer> implements Printer{, +, +
[+++ b/builder/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>builder</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>builder</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/builder/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>builder</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>builder</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/.gitignore, +++ b/.travis.yml, +sudo:
[+++ b/memento/src/test/java/com/iluwatar/memento/StarTest.java, +package com.iluwatar.memento;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +/**, + * Date: 12/20/15 - 10:08 AM, + *, + * @author Jeroen Meulemeester, + */, +public class StarTest {, +, + /**, + * Verify the stages of a dying sun, without going back in time, + */, + @Test, + public void testTimePasses() {, + final Star star = new Star(StarType.SUN, 1, 2);, + assertEquals("sun age: 1 years mass: 2 tons", star.toString());, +, + star.timePasses();, + assertEquals("red giant age: 2 years mass: 16 tons", star.toString());, +, + star.timePasses();, + assertEquals("white dwarf age: 4 years
[+++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/chain/etc/chain.png, +++ b/chain/README.md, +![alt text](./etc/chain_1.png "Chain of Responsibility"), +++ b/chain/etc/chain.png, +++ b/chain/etc/chain.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.chain.Request" project="chain" , + file="/chain/src/main/java/com/iluwatar/chain/Request.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="196" width="228" x="168" y="182"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class
[+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/converter/README.md, +---, +layout: pattern, +title: Converter, +folder: converter, +permalink: /patterns/converter/, +categories:, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +The purpose of the Converter Pattern is to provide a generic, common way of bidirectional, +conversion between corresponding types, allowing a clean implementation in which the types do not, +need to be aware of each other. Moreover, the Converter Pattern introduces bidirectional collection, +mapping, reducing a boilerplate code to minimum., +, +![alt text](./etc/converter.png "Converter Pattern"), +, +## Applicability, +Use the Converter Pattern in the following situations:,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + * Composition over inheritance. The Bridge pattern can also be thought of as two layers of abstraction., + * With Bridge, you can decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link Weapon}) and implementation (, + * {@link Enchantment}) have their own class hierarchies. The interface of the implementations, + * <p>, + * In this example we have two
[+++ b/pom.xml, + <module>spatial-partition</module>, +++ b/pom.xml, + <module>spatial-partition</module>, +++ b/spatial-partition/README.md, +---, +layout: pattern, +title: Spatial Partition, +folder: spatial-partition, +permalink: /patterns/spatial-partition/, +categories: Game Programming pattern/Optimisation pattern, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +As explained in the book [Game Programming Patterns](http://gameprogrammingpatterns.com/spatial-partition.html) by Bob Nystrom, spatial partition pattern helps to , +, +> efficiently locate objects by storing them in a data structure organized by their positions., +, +## Applicability, +This pattern can be used:, +* When you need to keep track of a large number of objects' positions, which are getting updated every frame., +* When
[+++ b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java, + public void testChangeStrategy() {]
[+++ b/.travis.yml, +, +after_success:, + - mvn clean cobertura:cobertura coveralls:report, +++ b/.travis.yml, +, +after_success:, + - mvn clean cobertura:cobertura coveralls:report, +++ b/pom.xml, + <compiler.version>3.0</compiler.version>, + <coveralls.version>3.1.0</coveralls.version>, + <cobertura.version>2.6</cobertura.version>, + <version>${compiler.version}</version>, + <plugin>, + <groupId>org.eluder.coveralls</groupId>, + <artifactId>coveralls-maven-plugin</artifactId>, + <version>${coveralls.version}</version>, + <configuration>, + <repoToken>jb6wYzxkVvjolD6qOWpzWdcWBzYk2fAmF</repoToken>, + </configuration>, + </plugin> , + <plugin>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>cobertura-maven-plugin</artifactId>, + <version>${cobertura.version}</version>, + <configuration>, + <format>xml</format>, + <maxmem>256m</maxmem>, + <aggregate>true</aggregate>, + </configuration>, + </plugin> ]
[+++ b/.gitignore, +event-sourcing/Journal.json]
[+++ b/composite/src/main/java/com/iluwatar/composite/App.java, + * interface ({@link LetterComposite}). In this example we have sentences composed of, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/composite/src/main/java/com/iluwatar/composite/App.java, + * interface ({@link LetterComposite}). In this example we have sentences composed of, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/composite/src/main/java/com/iluwatar/composite/Letter.java, +/**, + * , + * Letter, + *, + */, +++ b/composite/src/main/java/com/iluwatar/composite/App.java, + * interface ({@link LetterComposite}). In this example we have sentences composed of, + /**, + * Program entry point, + *
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordVarys.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordVarys.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/Scout.java]
[+++ b/hexagonal/pom.xml, + <dependency>, + <groupId>org.mongodb</groupId>, + <artifactId>mongo-java-driver</artifactId>, + </dependency>, +++ b/hexagonal/pom.xml, + <dependency>, + <groupId>org.mongodb</groupId>, + <artifactId>mongo-java-driver</artifactId>, + </dependency>, +++ b/pom.xml, + <mongo-java-driver.version>3.3.0</mongo-java-driver.version>, + <dependency>, + <groupId>org.mongodb</groupId>, + <artifactId>mongo-java-driver</artifactId>, + <version>${mongo-java-driver.version}</version>, + </dependency>]
[+++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for
[+++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * @param dto DTO entity, + public final U convertFromDto(final T dto) {, + return fromDto.apply(dto);, + * @param entity domain entity, + public final T convertFromEntity(final U entity) {, + return fromEntity.apply(entity);, + * @param dtos collection of DTO entities, + public final List<U> createFromDtos(final Collection<T> dtos) {, + return dtos.stream().map(this::convertFromDto).collect(Collectors.toList());, + * @param entities collection of domain entities, + public final List<T> createFromEntities(final Collection<U> entities) {, + return entities.stream().map(this::convertFromEntity).collect(Collectors.toList());]
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +import java.util.Objects;, +, + @Override, + public int hashCode() {, + return Objects.hash(username, name, email);, + }, +, + @Override, + public boolean equals(Object obj) {, + if (this == obj) {, + return true;, + }, + if (!(obj instanceof Author)) {, + return false;, + }, + Author other = (Author) obj;, + return username.equals(other.getUsername()) && email.equals(other.getEmail()) && name.equals(other.getName());, +, + }, +, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +import java.util.Objects;, +, + @Override, + public int hashCode() {, + return Objects.hash(username, name, email);, + }, +, + @Override, + public boolean equals(Object obj) {, + if (this ==
[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate., + * Returns an Optional containing the first element of this iterable if present,, + * else returns Optional.empty()., +, + /**, + * Returns the contents of this Iterable as a List., + * @return a List representation of this Iterable, + */, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate., + * Returns an Optional containing the first element of this iterable if
[+++ b/.travis.yml, +, +# Migration to container-based infrastructure , +sudo: false, +++ b/.travis.yml, +, +# Migration to container-based infrastructure , +sudo: false, +++ b/README.md, +Design patterns are formalized best practices that the programmer can use to, +solve common problems when designing an application or system., +Design patterns can speed up the development process by providing tested, proven, +development paradigms., +Reusing design patterns helps to prevent subtle issues that can cause major, +problems, and it also improves code readability for coders and architects who, +are familiar with the patterns., +Creational design patterns abstract the instantiation process. They help make a,
[+++ b/pom.xml, + <module>proxy</module>, +++ b/pom.xml, + <module>proxy</module>, +++ b/proxy/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>proxy</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>proxy</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>proxy</module>, +++ b/proxy/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>proxy</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>proxy</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>,
[+++ b/factory-method/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>factory-method</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>factory-method</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/factory-method/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>factory-method</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>factory-method</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/layers/src/main/java/com/iluwatar/layers/App.java, + Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("banana", 0),, + new CakeLayerInfo("strawberry", 0)));, + service.getAllCakes().stream().forEach((cake) -> System.out.println(cake));, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, + Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("banana", 0),, + new CakeLayerInfo("strawberry", 0)));, + service.getAllCakes().stream().forEach((cake) -> System.out.println(cake));, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, +import java.util.HashSet;, +import java.util.Set;, +import javax.persistence.FetchType;, + @OneToOne(cascade=CascadeType.REMOVE), + @OneToMany(cascade=CascadeType.REMOVE, fetch=FetchType.EAGER), + private Set<CakeLayer> layers;, + setLayers(new HashSet<>());, + public Set<CakeLayer> getLayers() {, + public void setLayers(Set<CakeLayer> layers) {, + , + @Override, + public String toString() {, + return String.format("id=%s topping=%s layers=%s", id, topping, layers.toString());, + } , +++ b/layers/src/main/java/com/iluwatar/layers/App.java, + Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("banana", 0),, + new CakeLayerInfo("strawberry", 0)));, +
[+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java, +++ b/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java]
[+++ b/.travis.yml, +before_install:, + - "export DISPLAY=:99.0", + - "sh -e /etc/init.d/xvfb start", + ]
[+++ b/monad/etc/monad.png, +++ b/monad/etc/monad.png, +++ b/monad/etc/monad.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.monad.App" project="monad" , + file="/monad/src/main/java/com/iluwatar/monad/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="101" width="125" x="631" y="37"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <enumeration id="2" language="java" name="com.iluwatar.monad.Sex" project="monad" , + file="/monad/src/main/java/com/iluwatar/monad/Sex.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="119" width="137" x="424" y="286"/> , + <display autosize="true" stereotype="true"
[+++ b/README.md, +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/builder/index.md, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/builder/index.md, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +++ b/business-delegate/index.md, +, +##Credits, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/builder/index.md, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +++ b/business-delegate/index.md, +, +##Credits, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + UserAccount userAccount =, + new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, + return userAccount;, +++ b/README.md, +++ b/adapter/index.md, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/builder/index.md, +* [Effective Java (2nd
[+++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + troll = new ClubbedTroll(troll);, + troll.attack();, + troll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministration.java, +import java.util.Map;, +, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministration.java, +import java.util.Map;, +, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java, +import com.iluwatar.hexagonal.domain.LotterySystem;, +import com.iluwatar.hexagonal.domain.LotterySystemImpl;, +, +import java.util.Map;, + private final LotterySystem lotterySystem;, +, + lotterySystem = new LotterySystemImpl();, + return lotterySystem.getAllSubmittedTickets();, + return lotterySystem.performLottery();, + lotterySystem.resetLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministration.java, +import java.util.Map;, +, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java, +import com.iluwatar.hexagonal.domain.LotterySystem;, +import com.iluwatar.hexagonal.domain.LotterySystemImpl;, +, +import java.util.Map;, + private final LotterySystem lotterySystem;, +, + lotterySystem = new LotterySystemImpl();, + return lotterySystem.getAllSubmittedTickets();, + return lotterySystem.performLottery();, + lotterySystem.resetLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotterySystem.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any
[+++ b/dirty-flag/README.md, +---, +layout: pattern, +title: Dirty Flag, +folder: dirty-flag, +permalink: /patterns/dirty-flag/, +categories: Other, +tags:, + - Java, + - Difficulty-Easy, + - Performance, +---, +, +## Intent, +To avoid expensive re-acquisition of resources. The resources retain their identity, are kept in some, +fast-access storage, and are re-used to avoid having to acquire them again., +, +![alt text](./etc/dirty-flag.png "Dirty Flag"), +, +## Applicability, +Use the Dirty Flag pattern when, +, +* Repetitious acquisition, initialization, and release of the same resource causes unnecessary performance overhead., +, +## Credits, +, +* [Design Patterns: Dirty Flag](https://www.takeupcode.com/podcast/89-design-patterns-dirty-flag/), +++ b/dirty-flag/README.md, +---, +layout: pattern, +title:
[+++ /dev/null, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of
[+++ b/multiton/src/main/java/com/iluwatar/multiton/App.java, + * There is more than one way to implement the multiton design pattern. In the first example, + * {@link Nazgul} is the Multiton and we can ask single {@link Nazgul} from it using {@link NazgulName}., + * The {@link Nazgul}s are statically initialized and stored in concurrent hash map., + * <p>, + * In the enum implementation {@link NazgulEnum} is the multiton. It is static and mutable because, + * of the way java supports enums., + // eagerly initialized multiton, + , + // enum multiton, + LOGGER.info("KHAMUL={}", NazgulEnum.KHAMUL);, + LOGGER.info("MURAZOR={}", NazgulEnum.MURAZOR);, +
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();;, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();;, +++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java, + System.out.println("Perform some important activity.");, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();;, +++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java, + System.out.println("Perform some important activity.");, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +import com.iluwatar.callback.App;, + * Application test, + *, + String[] args = {};, + App.main(args);, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, + private App app = new App();;, +++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java, + System.out.println("Perform some important activity.");, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +import com.iluwatar.callback.App;, + * Application test, + *, + String[] args = {};, + App.main(args);, +++ b/dao/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">,
[+++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/dao/src/main/java/com/iluwatar/dao/CustomException.java, +/**
[+++ b/message-channel/pom.xml, + <groupId>org.apache.camel</groupId>, + <artifactId>camel-stream</artifactId>, + </dependency>, + <dependency>, +++ b/message-channel/pom.xml, + <groupId>org.apache.camel</groupId>, + <artifactId>camel-stream</artifactId>, + </dependency>, + <dependency>, +++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java, +import org.apache.camel.ProducerTemplate;, +import org.apache.camel.builder.RouteBuilder;, + , + context.addRoutes(new RouteBuilder() {, +, + @Override, + public void configure() throws Exception {, + from("direct:greetings").to("stream:out");, + }, + });, + , + ProducerTemplate template = context.createProducerTemplate();, + template.sendBody("direct:greetings", "jou man");, + Thread.sleep(1000);, +++ b/message-channel/pom.xml, + <groupId>org.apache.camel</groupId>, + <artifactId>camel-stream</artifactId>, + </dependency>, + <dependency>, +++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java, +import org.apache.camel.ProducerTemplate;, +import org.apache.camel.builder.RouteBuilder;, + , + context.addRoutes(new RouteBuilder() {, +, + @Override, + public void configure() throws Exception {, + from("direct:greetings").to("stream:out");, + }, + });,
[+++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/resource/acquisition/is/initialization/App.java, + * <p>, + * <p>, + * interfaces {@link Closeable} and {@link AutoCloseable}. The try-with-resources , + * statement. Any object that implements {@link java.lang.AutoCloseable}, which , + * includes all objects which implement {@link java.io.Closeable}, can be used , + * In this example, {@link SlidingDoor} implements {@link AutoCloseable} and , + * {@link TreasureChest} implements {@link Closeable}. Running the example, we can, + * <p>, + /**, + * Program entry point, + * @param args command line args, + * @throws Exception, + */, +++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/resource/acquisition/is/initialization/App.java, + * <p>, + * <p>, +
[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +import com.iluwatar.delegation.simple.printers.CanonPrinter;, +import com.iluwatar.delegation.simple.printers.EpsonPrinter;, + * @see CanonPrinter, + * @see EpsonPrinter]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + try (Scanner scanner = new Scanner(System.in)) {, + if ("1".equals(cmd)) {, + } else if ("2".equals(cmd)) {, + } else if ("3".equals(cmd)) {, + } else if ("4".equals(cmd)) {, + }, + return scanner.next();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + try (Scanner scanner = new Scanner(System.in)) {, + if ("1".equals(cmd)) {, + } else if ("2".equals(cmd)) {, + } else if ("3".equals(cmd)) {, + } else if ("4".equals(cmd)) {, + }, + return scanner.next();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java, + if (!result) {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + try (Scanner scanner = new Scanner(System.in)) {, + if ("1".equals(cmd)) {, + } else if ("2".equals(cmd))
[+++ b/mute-idiom/pom.xml, +<?xml version="1.0"?>, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice
[+++ b/lazy-loading/src/main/java/com/iluwatar/lazy/loading/App.java, + * <p>, + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/lazy-loading/src/main/java/com/iluwatar/lazy/loading/App.java, + * <p>, + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/lazy-loading/src/main/java/com/iluwatar/lazy/loading/Java8Holder.java, + * This lazy loader is thread safe and more efficient than {@link HolderThreadSafe}., + * It utilizes Java 8 functional interface {@link Supplier<T>} as {@link Heavy} factory., +++ b/lazy-loading/src/main/java/com/iluwatar/lazy/loading/App.java, + * <p>, + * <p>, + /**, + * Program entry point, + * @param args command line
[+++ b/.travis.yml, + , +sudo: false, +++ b/.travis.yml, + , +sudo: false, +++ b/README.md, +Behavioral patterns are concerned with algorithms and the assignment of responsibilites between objects., +* when extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of sublasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +**Applicability:** The service locator pattern is applicable whenever we want to locate/fetch various services using JNDI which, typically, is a redundant and expensive lookup. The service Locator pattern addresses this expensive lookup by
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/pom.xml, + <module>reactor</module>, +++ b/pom.xml, + <module>reactor</module>, +++ b/reactor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.6.0</version>, + </parent>, + <artifactId>reactor</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>reactor</module>, +++ b/reactor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.6.0</version>, + </parent>, + <artifactId>reactor</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +package com.iluwatar.reactor.app;, +, +import java.io.IOException;, +, +import
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/data-mapper/pom.xml, + <version>1.12.0-SNAPSHOT</version>
[+++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>]
[+++ b/abstract-factory/pom.xml, + <version>1.5.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.5.0</version>, +++ b/adapter/pom.xml, + <version>1.5.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.5.0</version>, +++ b/adapter/pom.xml, + <version>1.5.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.5.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.5.0</version>, +++ b/adapter/pom.xml, + <version>1.5.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.5.0</version>, +++ b/bridge/pom.xml, + <version>1.5.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.5.0</version>, +++ b/adapter/pom.xml, + <version>1.5.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.5.0</version>, +++ b/bridge/pom.xml, + <version>1.5.0</version>, +++ b/builder/pom.xml, + <version>1.5.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.5.0</version>, +++ b/adapter/pom.xml, + <version>1.5.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.5.0</version>, +++ b/bridge/pom.xml, + <version>1.5.0</version>, +++ b/builder/pom.xml, + <version>1.5.0</version>, +++ b/business-delegate/pom.xml, + <version>1.5.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.5.0</version>, +++ b/adapter/pom.xml, + <version>1.5.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.5.0</version>, +++ b/bridge/pom.xml, +
[+++ b/event-driven-architecture/etc/eda.png, +++ b/event-driven-architecture/etc/eda.png, +++ b/event-driven-architecture/etc/eda.ucls, + <position height="-1" width="-1" x="437" y="535"/> , + <position height="-1" width="-1" x="763" y="379"/> , + <position height="-1" width="-1" x="596" y="272"/> , + <interface id="4" language="java" name="com.iluwatar.eda.framework.Event" project="event-driven-architecture" , + file="/event-driven-architecture/src/main/java/com/iluwatar/eda/framework/Event.java" binary="false" , + <position height="-1" width="-1" x="188" y="121"/> , + <position height="-1" width="-1" x="755" y="58"/> , + <position height="-1" width="-1" x="499" y="122"/> , + <position height="-1" width="-1" x="102" y="380"/> , + <position height="-1" width="-1" x="320" y="382"/> , + <class id="9" language="java" name="com.iluwatar.eda.event.AbstractEvent" project="event-driven-architecture" , + file="/event-driven-architecture/src/main/java/com/iluwatar/eda/event/AbstractEvent.java" binary="false" , + <position height="-1" width="-1" x="188" y="240"/> , + <end type="SOURCE" refId="3"/> , + <end type="TARGET"
[+++ b/README.md, +Java-design-patterns project uses [semantic versioning](http://semver.org/) scheme. However, version numbers in this project do not signify binary releases (since we don't make any) but rather milestones achieved on the roadmap. In other words, version numbers are used only for project planning sake., +++ b/README.md, +Java-design-patterns project uses [semantic versioning](http://semver.org/) scheme. However, version numbers in this project do not signify binary releases (since we don't make any) but rather milestones achieved on the roadmap. In other words, version numbers are used only for project planning sake., +++ /dev/null, +++ b/README.md, +Java-design-patterns project uses [semantic versioning](http://semver.org/) scheme. However, version numbers
[+++ b/abstract-document/README.md, +![alt text](./etc/abstract-document-base.png "Abstract Document Base"), +, +![alt text](./etc/abstract-document.png "Abstract Document Traits and Domain"), +, +* there is a need to add new properties on the fly, +* you want a flexible way to organize domain in tree like structure, +* you want more loosely coupled system, +## Credits, +, +* [Wikipedia: Abstract Document Pattern](https://en.wikipedia.org/wiki/Abstract_Document_Pattern), +* [Martin Fowler: Dealing with properties](http://martinfowler.com/apsupp/properties.pdf), +++ b/abstract-document/README.md, +![alt text](./etc/abstract-document-base.png "Abstract Document Base"), +, +![alt text](./etc/abstract-document.png "Abstract Document Traits and Domain"), +, +* there is a need to add new properties on the fly, +* you want a flexible way to organize domain
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * The Acyclic Visitor pattern allows new functions to be added to existing class , + * hierarchies without affecting those hierarchies, and without creating the dependency , + * cycles that are inherent to the GoF Visitor pattern, by making the Visitor base class , + * degenerate, + * In this example the visitor base class is {@link ModemVisitor}. The base class of the , + * visited hierarchy is {@link Modem} and has two children {@link Hayes} and {@link Zoom} , + * each one having its own visitor interface {@link Hayes} and
[+++ b/dao/pom.xml]
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + LotteryTicketCheckResult result = LotteryUtils.checkTicketForPrize(repository, id, numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + LotteryTicketCheckResult result = LotteryUtils.checkTicketForPrize(repository, id, numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java, + return LotteryUtils.checkTicketForPrize(repository, id, winningNumbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + LotteryTicketCheckResult result = LotteryUtils.checkTicketForPrize(repository, id, numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java, + return LotteryUtils.checkTicketForPrize(repository, id, winningNumbers);, +++ /dev/null, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, + LotteryTicketCheckResult result = LotteryUtils.checkTicketForPrize(repository, id, numbers);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java, + return LotteryUtils.checkTicketForPrize(repository, id, winningNumbers);, +++ /dev/null, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryUtils.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/aggregator-microservices/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/aggregator-microservices/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/aggregator-microservices/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/aggregator-microservices/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/dao/pom.xml, +++ b/dao/pom.xml, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, + log.info("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());, + log.info("customerDao.getCusterById(2): " + customerDao.getCustomerById(2));, + customerDao.addCustomer(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());, + customerDao.updateCustomer(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());, + customerDao.deleteCustomer(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());, +++ b/dao/pom.xml, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, + log.info("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());, + log.info("customerDao.getCusterById(2): " + customerDao.getCustomerById(2));, + customerDao.addCustomer(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());, + customerDao.updateCustomer(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());, + customerDao.deleteCustomer(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());, +++ b/dao/src/main/java/com/iluwatar/dao/CustomerDao.java, +import java.util.List;, + List<Customer> getAllCustomers();, + Customer getCustomerById(int id);, + void
[+++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/update-ghpages.sh, +#!/bin/bash, +, +# Setup Git, +git config user.name "Travis-CI", +git config user.email "travis@no.reply", +, +# Clone gh-pages, +git clone -b gh-pages "https://${GH_REF}" ghpagesclone, +cd ghpagesclone, +, +# Init and update submodule to latest, +git submodule update --init --recursive, +git submodule update --remote, +, +# If there is a new version of the master branch, +if git status | grep patterns >
[+++ b/.travis.yml, +notifications:, + email:, + - iluwatar@gmail.com, +]
[+++ b/abstract-document/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <module>repository</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
[+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/README.md, +* [Service Layer](#service-layer), +## <a name="service-layer">Service Layer</a> [&#8593;](#list-of-design-patterns), +**Intent:** Service Layer is an abstraction over domain logic. Typically applications require multiple kinds of interfaces to the data, +they store and logic they implement: data loaders, user interfaces, integration gateways, and others. Despite their different purposes, these interfaces often need common interactions with the application to access and manipulate its data and invoke its business logic. The Service Layer fulfills this role., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/service-layer/etc/service-layer.png "Service Layer"), +, +**Applicability:** Use the Service Layer pattern when, +* you want to encapsulate domain logic under API, +* you need to
[+++ b/pom.xml, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, +++ b/pom.xml, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, +++ b/serverless/pom.xml, + <artifactId>aws-java-sdk-dynamodb</artifactId>, + <version>${aws-java-sdk-dynamodb.version}</version>, + <exclusions>, + <exclusion>, + <groupId>com.amazonaws</groupId>, + <artifactId>aws-java-sdk-s3</artifactId>, + </exclusion>, + <exclusion>, + <groupId>com.amazonaws</groupId>, + <artifactId>aws-java-sdk-kms</artifactId>, + </exclusion>, + </exclusions>, + </dependency>, + <dependency>, + <groupId>com.amazonaws</groupId>, + <artifactId>aws-lambda-java-events</artifactId>, + <version>${aws-lambda-java-events.version}</version>, + </dependency>, + <dependency>, + <groupId>com.amazonaws</groupId>, +++ b/pom.xml, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, +++ b/serverless/pom.xml, + <artifactId>aws-java-sdk-dynamodb</artifactId>, + <version>${aws-java-sdk-dynamodb.version}</version>, + <exclusions>, + <exclusion>, + <groupId>com.amazonaws</groupId>, + <artifactId>aws-java-sdk-s3</artifactId>, + </exclusion>, + <exclusion>, + <groupId>com.amazonaws</groupId>, + <artifactId>aws-java-sdk-kms</artifactId>, + </exclusion>, + </exclusions>, + </dependency>, + <dependency>, + <groupId>com.amazonaws</groupId>, + <artifactId>aws-lambda-java-events</artifactId>, + <version>${aws-lambda-java-events.version}</version>, + </dependency>, +
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, + app.useCacheAsideStategy();, +, + /**, + * Cache-Aside, + */, + public void useCacheAsideStategy() {, + System.out.println("# CachingPolicy.ASIDE");, + AppManager.initCachingPolicy(CachingPolicy.ASIDE);, + System.out.println(AppManager.printCacheContent());, +, + UserAccount userAccount3 = new UserAccount("003", "Adam", "He likes food.");, + UserAccount userAccount4 = new UserAccount("004", "Rita", "She hates cats.");, + UserAccount userAccount5 = new UserAccount("005", "Isaac", "He is allergic to mustard.");, + AppManager.save(userAccount3);, + AppManager.save(userAccount4);, + AppManager.save(userAccount5);, +, + System.out.println(AppManager.printCacheContent());, + AppManager.find("003");, + System.out.println(AppManager.printCacheContent());, + AppManager.find("004");, + System.out.println(AppManager.printCacheContent());, + }, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + app.useCacheAsideStategy();, +, + /**, + * Cache-Aside, + */, + public void useCacheAsideStategy() {, + System.out.println("# CachingPolicy.ASIDE");, + AppManager.initCachingPolicy(CachingPolicy.ASIDE);, +
[+++ b/CONTRIBUTING.MD, +This is great you have something to contribute! , +, +Before going any further please read the [wiki](https://github.com/iluwatar/java-design-patterns/wiki), +with conventions and rules we used for this project., +++ b/CONTRIBUTING.MD, +This is great you have something to contribute! , +, +Before going any further please read the [wiki](https://github.com/iluwatar/java-design-patterns/wiki), +with conventions and rules we used for this project., +++ b/README.md, +# Design patterns implemented in Java, +++ b/CONTRIBUTING.MD, +This is great you have something to contribute! , +, +Before going any further please read the [wiki](https://github.com/iluwatar/java-design-patterns/wiki), +with conventions and rules we used for this project., +++ b/README.md, +# Design
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, + LOGGER.info("# CachingPolicy.ASIDE");, + LOGGER.info(AppManager.printCacheContent());, + LOGGER.info(AppManager.printCacheContent());, + LOGGER.info(AppManager.printCacheContent());, + LOGGER.info(AppManager.printCacheContent());, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + LOGGER.info("# CachingPolicy.ASIDE");, + LOGGER.info(AppManager.printCacheContent());, + LOGGER.info(AppManager.printCacheContent());, + LOGGER.info(AppManager.printCacheContent());, + LOGGER.info(AppManager.printCacheContent());, +++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.error("{} was not found. Defaulting to non-interactive mode.", PROP_FILE_NAME, e);, + LOGGER.info("Async Event [{}] has been created.", aEventId);, + LOGGER.info("Async Event [{}] has been started.", aEventId);, + LOGGER.info("Sync Event [{}] has been created.", sEventId);, + LOGGER.info("Sync Event [{}] has been started.", sEventId);, + LOGGER.info("Async Event [{}] has been stopped.", aEventId);, + LOGGER.info("Sync Event [{}] has been
[+++ b/callback/src/main/java/com/iluwatar/callback/App.java, + * , + * Callback pattern is more native for functional languages where functions are treated as first-class citizens., + * Prior to Java 8 callbacks can be simulated using simple (alike command) interfaces., + * , +++ b/callback/src/main/java/com/iluwatar/callback/App.java, + * , + * Callback pattern is more native for functional languages where functions are treated as first-class citizens., + * Prior to Java 8 callbacks can be simulated using simple (alike command) interfaces., + * , +++ b/callback/src/main/java/com/iluwatar/callback/Callback.java, + * , + * , +++ b/callback/src/main/java/com/iluwatar/callback/App.java, + * , + * Callback pattern is more
[+++ b/observer/src/main/java/com/iluwatar/observer/generic/Observable.java, + public void removeObserver(O observer) {, + this.observers.remove(observer);, + }, +, +++ b/observer/src/main/java/com/iluwatar/observer/generic/Observable.java, + public void removeObserver(O observer) {, + this.observers.remove(observer);, + }, +, +++ b/observer/src/test/java/com/iluwatar/observer/StdOutTest.java, + protected final PrintStream getStdOutMock() {, +++ b/observer/src/main/java/com/iluwatar/observer/generic/Observable.java, + public void removeObserver(O observer) {, + this.observers.remove(observer);, + }, +, +++ b/observer/src/test/java/com/iluwatar/observer/StdOutTest.java, + protected final PrintStream getStdOutMock() {, +++ b/observer/src/test/java/com/iluwatar/observer/generic/GHobbitsTest.java, +package com.iluwatar.observer.generic;, +, +import com.iluwatar.observer.Hobbits;, +import com.iluwatar.observer.WeatherObserverTest;, +import com.iluwatar.observer.WeatherType;, +, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import java.util.ArrayList;, +import java.util.Collection;, +, +/**, + * Date: 12/27/15 - 12:07 PM, + *, + * @author Jeroen Meulemeester, + */, +@RunWith(Parameterized.class), +public class GHobbitsTest extends
[+++ b/observer/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>observer</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>observer</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/observer/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>observer</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>observer</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/App.java, + * When a request enters a Web application, it often must pass several entrance , + * tests prior to the main processing stage. For example,, + * - Has the client been authenticated?, + * - Does the client have a valid session?, + * - Is the client's IP address from a trusted network?, + * - Does the request path violate any constraints?, + * - What encoding does the client use to send the data?, + * - Do we support the browser type of the client?, + * Some of these
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java]
[+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private DbManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private DbManager() {, + }, +, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, +
[+++ b/adapter/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/adapter/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * , + * <p>There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * , + * <p>The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, + * Program entry point., + Engineer manager = new GnomeEngineeringManager(new GnomeEngineer());, +++ b/adapter/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * , + * <p>There are two variations of the
[+++ b/message-channel/pom.xml, + <version>1.6.0</version>]
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();]
[+++ b/trampoline/.gitignore, +/target/, +.idea/, +++ b/trampoline/.gitignore, +/target/, +.idea/, +++ b/trampoline/README.md, +---, +layout: pattern, +title: Trampoline, +folder: trampoline, +permalink: /patterns/trampoline/, +categories: Behavior, +tags:, + - Java, + - Difficulty-Intermediate, + - Performance, + - Recursion, +---, +, +## Intent, +By representing a computation in one of 2 states , +(completed with result, or a reference to the reminder of the computation, , +something like the way a java.util.Supplier does) , +it is possible to implement algorithms recursively in Java without blowing the stack , +and to interleave the execution of functions without hard coding them together or even using threads.,
[+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +, + private static final Logger LOGGER = LoggerFactory.getLogger(CustomerClientApp.class);, +, + LOGGER.info("All customers:-");, + LOGGER.info("----------------------------------------------------------");, + LOGGER.info("Deleting customer with id {1}");, + LOGGER.info("----------------------------------------------------------");, + LOGGER.info("Adding customer three}");, + allCustomers.forEach(customer -> LOGGER.info(customer.getFirstName()));]
[+++ b/.travis.yml, +sudo: required, +++ b/.travis.yml, +sudo: required, +++ b/abstract-factory/README.md, +## Explanation, +Real world example, +, +> To create a kingdom we need objects with common theme. Elven kingdom needs an Elven king, Elven castle and Elven army whereas Orcish kingdom needs an Orcish king, Orcish castle and Orcish army. There is a dependency between the objects in the kingdom., +, +In plain words, +, +> A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes., +, +Wikipedia says, +, +> The abstract factory pattern provides a way to encapsulate
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/retry/src/main/java/com/iluwatar/retry/Retry.java, + }, + while (true);]
[+++ b/adapter/README.md, +## General usage of Adapter Pattern: , ++ Wrappers used to adopt 3rd parties libraries and frameworks - most of the applications using third party libraries use adapters as a middle layer between the application and the 3rd party library to decouple the application from the library. If another library has to be used only an adapter for the new library is required without having to change the application code., +, +## Consequences:, +Class and object adapters have different trade-offs. A class adapter, +, +* adapts Adaptee to Target by committing to a concrete Adaptee class. As
[+++ b/caching/README.md, +++ b/caching/README.md, +++ b/caching/etc/caching.png, +++ b/caching/README.md, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="main.java.com.wssia.caching.App" project="CachingPatterns" , + file="/CachingPatterns/src/main/java/com/wssia/caching/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="249" y="150"/> , + <class id="2" language="java" name="main.java.com.wssia.caching.AppManager" project="CachingPatterns" , + file="/CachingPatterns/src/main/java/com/wssia/caching/AppManager.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="502" y="163"/> , + <class id="3" language="java" name="main.java.com.wssia.caching.CacheStore" project="CachingPatterns" , + file="/CachingPatterns/src/main/java/com/wssia/caching/CacheStore.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="537" y="436"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true"
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/spatial-partition/src/main/java/com/iluwatar/spatialpartition/QuadTree.java, + if (this.boundary.contains(p)) {]
[+++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify
[+++ b/dao/src/main/java/com/iluwatar/dao/App.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ b/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ b/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ b/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ /dev/null, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ b/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java, + private static final String DB_URL = "jdbc:h2:~/dao";, +++ /dev/null, +++
[+++ b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java, +package com.iluwatar.databus.members;, +, +import com.iluwatar.databus.DataBus;, +import com.iluwatar.databus.data.MessageData;, +import com.iluwatar.databus.data.StartingData;, +import com.iluwatar.databus.data.StoppingData;, +import org.junit.Assert;, +import org.junit.Test;, +, +import java.time.LocalDateTime;, +import java.time.Month;, +, +/**, + * Tests for {@link StatusMember}., + *, + * @author Paul Campbell (pcampbell@kemitix.net), + */, +public class StatusMemberTest {, +, + @Test, + public void statusRecordsTheStartTime() {, + //given, + final LocalDateTime startTime = LocalDateTime.of(2017, Month.APRIL, 1, 19, 9);, + final StartingData startingData = new StartingData(startTime);, + final StatusMember statusMember = new StatusMember(1);, + //when, + statusMember.accept(startingData);, + //then, + Assert.assertEquals(startTime, statusMember.getStarted());, + }, +, + @Test, + public void statusRecordsTheStopTime() {, + //given,
[+++ b/abstract-factory/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br/>, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager</i>, + * @See LRUCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br/>, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, + * <p>{@see http://wiki.c2.com/?DataBusPattern}</p>, + * <p>, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + *, + * <i>App
[+++ b/pom.xml, + <module>private-class-data</module>, +++ b/pom.xml, + <module>private-class-data</module>, +++ b/private-class-data/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>private-class-data</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>private-class-data</module>, +++ b/private-class-data/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>private-class-data</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/private-class-data/src/main/java/com/iluwatar/App.java, +package com.iluwatar;
[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/abstract-factory/etc/abstract-factory.png, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/abstract-factory/README.md, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +, +, +++ b/abstract-factory/etc/abstract-factory.png, +++ b/abstract-factory/etc/abstract-factory.ucls, +<?xml version="1.0"
[+++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +package com.iluwatar.databus;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +import static org.mockito.BDDMockito.then;, +import static org.mockito.Mockito.never;, +, +/**, + * Tests for {@link DataBus}., + *, + * @author Paul Campbell (pcampbell@kemitix.net), + */, +public class DataBusTest {, +, + @Mock, + private Member member;, +, + @Mock, + private DataType event;, +, + @Before, + public void setUp() {, + MockitoAnnotations.initMocks(this);, + }, +, + @Test, + public void publishedEventIsReceivedBySubscribedMember() {, + //given, + final DataBus dataBus = DataBus.getInstance();, + dataBus.subscribe(member);, + //when, + dataBus.publish(event);, + //then, + then(member).should().accept(event);, + }, +, + @Test,
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, + private Integer length;, + private String director;, + private String language;, + * @param length video length in minutes, + * @param director video director name, + * @param language video language {private, public}, + public Video(String id, String title, Integer length, String description, String director, String language) {, + this.director = director;, + this.language = language;, + ", director='" + director + '\'' +, + ", language='" + language + '\'' +, +++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, + private Integer length;, + private String director;, + private String language;, + * @param length video length in minutes, +
[+++ b/adapter/etc/adapter.jpg, +++ b/adapter/etc/adapter.jpg, +++ b/adapter/src/main/java/com/iluwatar/App.java, + * target class (GoblinGlider) into suitable one expected
[+++ b/checkstyle.xml, + <module name="LeftCurly">, + <property name="maxLineLength" value="120"/>, + </module>, +++ b/checkstyle.xml, + <module name="LeftCurly">, + <property name="maxLineLength" value="120"/>, + </module>, +++ b/command/src/main/java/com/iluwatar/command/Size.java, + SMALL("small"), NORMAL("normal"), LARGE("large"), UNDEFINED("");
[+++ b/event-driven-architecture/pom.xml, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-checkstyle-plugin</artifactId>, + <version>2.15</version>, + <executions>, + <execution>, + <id>validate</id>, + <goals>, + <goal>check</goal>, + </goals>, + <phase>validate</phase>, + <configuration>, + <configLocation>checkstyle.xml</configLocation>, + <encoding>UTF-8</encoding>, + <consoleOutput>true</consoleOutput>, + <failsOnError>true</failsOnError>, + </configuration>, + </execution>, + </executions>, + </plugin>, + </plugins>, + </build>, +++ b/event-driven-architecture/pom.xml, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-checkstyle-plugin</artifactId>, + <version>2.15</version>, + <executions>, + <execution>, + <id>validate</id>, + <goals>, + <goal>check</goal>, + </goals>, + <phase>validate</phase>, + <configuration>, + <configLocation>checkstyle.xml</configLocation>, + <encoding>UTF-8</encoding>, + <consoleOutput>true</consoleOutput>, + <failsOnError>true</failsOnError>, + </configuration>, + </execution>, + </executions>, + </plugin>, + </plugins>, +
[+++ b/api-gateway/image-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/image-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/image-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/price-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>]
[+++ b/.travis.yml, +sudo: false, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented,
[+++ b/README.md, +#### Browse and view all of the patterns on our Website: [iluwatar.github.io/java-design-patterns/](https://iluwatar.github.io/java-design-patterns/), +, + - <a href="#how-to-contribute">How to contribute</a>, + - <a href="#versioning">Versioning</a>, +## <a name="introduction">Introduction</a>, +, +# <a name="how-to-contribute">How to contribute</a> [&#8593;](#top), +, +**To work on a new pattern** you need to do the following steps:, +, +1. If there is no issue for the new pattern yet, raise new issue. Comment on, + the issue that you are working on it so that others don't start work on the, + same thing., +2. Fork the repository., +3. Create a new folder for the pattern. The
[+++ b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java, + private List<Potion> topShelf;, + private List<Potion> bottomShelf;, +++ b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java, + private List<Potion> topShelf;, + private List<Potion> bottomShelf;, +++ b/flyweight/src/main/java/com/iluwatar/flyweight/App.java, + * To enable safe sharing, between clients and threads, Flyweight objects must , + * be immutable. Flyweight objects are by definition value objects., + * ]
[+++ b/publish-subscribe/pom.xml, + <version>1.8.0-SNAPSHOT</version>]
[+++ b/message-channel/.gitignore, +/target/, +++ b/message-channel/.gitignore, +/target/, +++ b/message-channel/etc/message-channel.png, +++ b/message-channel/.gitignore, +/target/, +++ b/message-channel/etc/message-channel.png, +++ b/message-channel/etc/message-channel.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="org.apache.camel.builder.RouteBuilder" project="message-channel" , + file="C:/Users/ilkka/.m2/repository/org/apache/camel/camel-core/2.15.3/camel-core-2.15.3.jar" binary="true" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="920" y="458"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="false" package="false" protected="false" private="false" static="true"/> , + <operations public="false" package="false" protected="false" private="false" static="true"/> , + </display> , + </class> , + <interface id="2" language="java" name="org.apache.camel.CamelContext" project="message-channel" , + file="C:/Users/ilkka/.m2/repository/org/apache/camel/camel-core/2.15.3/camel-core-2.15.3.jar" binary="true" , +
[+++ b/pom.xml, + <module>half-sync-half-async</module>]
[+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java, +package com.iluwatar.featuretoggle.pattern.propertiesversion;, +, +import com.iluwatar.featuretoggle.pattern.Service;, +import com.iluwatar.featuretoggle.user.User;, +, +import java.util.Properties;, +, +public class PropertiesFeatureToggleVersion implements Service {, +, + private Properties properties;, +, + public PropertiesFeatureToggleVersion(final Properties properties) {, + this.properties = properties;, + }, +, + @Override, + public String getWelcomeMessage(final User user) {, +, + final boolean enhancedWelcome = (boolean) properties.get("enhancedWelcome");, +, + if (enhancedWelcome) {, + return "Welcome " + user + ". You're using the enhanced welcome message.";, + }, +, + return "Welcome to the application.";, + }, +}, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java, +package com.iluwatar.featuretoggle.pattern.propertiesversion;, +, +import com.iluwatar.featuretoggle.pattern.Service;, +import com.iluwatar.featuretoggle.user.User;, +, +import java.util.Properties;, +,
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + , +, + /**, + * Program entry point, + * , + * @param args command line args, + */, + public static void main(String[] args) {, + , + App app = new App();, + , + System.out.println("Elf Kingdom");, + KingdomFactory elfKingdomFactory;, + elfKingdomFactory = app.getElfKingdomFactory();, + app.createKingdom(elfKingdomFactory);, + System.out.println(app.getArmy().getDescription());, + System.out.println(app.getCastle().getDescription());, + System.out.println(app.getKing().getDescription());, + , + System.out.println("\nOrc Kingdom");, + KingdomFactory orcKingdomFactory;, + orcKingdomFactory = app.getOrcKingdomFactory();, + app.createKingdom(orcKingdomFactory);, + System.out.println(app.getArmy().getDescription());, + System.out.println(app.getCastle().getDescription());, + System.out.println(app.getKing().getDescription());, + , + }, + , +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + , +, + /**, + * Program entry point,
[+++ b/README.md, +++ b/README.md, +++ b/dao/index.md, +tags:, + - Java, + - Difficulty-Beginner, +, +**Credits:**, +, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/README.md, +++ b/dao/index.md, +tags:, + - Java, + - Difficulty-Beginner, +, +**Credits:**, +, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/front-controller/index.md, +, +**Credits:**, +, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +++ b/README.md, +++ b/dao/index.md, +tags:, + - Java, + - Difficulty-Beginner, +, +**Credits:**, +, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +++ b/front-controller/index.md, +, +**Credits:**, +, +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +++ b/half-sync-half-async/index.md, +* [Pattern Oriented
[+++ b/abstract-document/pom.xml, + <version>1.17.0</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0</version>, +++ b/adapter/pom.xml, + <version>1.17.0</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0</version>, +++ b/adapter/pom.xml, + <version>1.17.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0</version>, +++ b/adapter/pom.xml, + <version>1.17.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.17.0</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0</version>, +++ b/adapter/pom.xml, + <version>1.17.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.17.0</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.17.0</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0</version>, +++ b/adapter/pom.xml, + <version>1.17.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/balking/pom.xml]
[+++ b/dao/src/main/java/com/iluwatar/dao/App.java, + final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, + private static <TYPE> void prettyPrint(String prefix, Iterable<TYPE> iterable) {, + private static <TYPE> void prettyPrint(String delimiter, String prefix,, + Iterable<TYPE> iterable) {, + Iterator<TYPE> iterator = iterable.iterator();, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, + private static <TYPE> void prettyPrint(String prefix, Iterable<TYPE> iterable) {, + private static <TYPE> void prettyPrint(String delimiter, String prefix,, + Iterable<TYPE> iterable) {, + Iterator<TYPE> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <TYPE> is the class of objects the
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/README.md, +## <a name="list-of-design-patterns">List of Design Patterns</a>, +* [Abstract Factory](#abstract-factory), +* [Builder](#builder), +* [Factory Method](#factory-method), +* [Prototype](#prototype), +* [Singleton](#singleton), +* [Adapter](#adapter), +* [Bridge](#bridge), +* [Composite](#composite), +* [Decorator](#decorator), +* [Facade](#facade), +* [Flyweight](#flyweight), +* [Proxy](#proxy), +* [Chain of responsibility](#chain-of-responsibility), +* [Command](#command), +* [Interpreter](#interpreter), +* [Iterator](#iterator), +* [Mediator](#mediator), +* [Memento](#memento), +* [Model-View-Presenter](#model-view-presenter), +* [Observer](#observer), +* [State](#state), +* [Strategy](#strategy), +* [Template method](#template-method), +* [Visitor](#visitor), +* [Double Checked Locking](#double-checked-locking), +, +## <a name="abstract-factory">Abstract Factory</a> [&#8593;](#list-of-design-patterns), +## <a name="builder">Builder</a> [&#8593;](#list-of-design-patterns), +## <a name="factory-method">Factory Method</a> [&#8593;](#list-of-design-patterns), +## <a name="prototype">Prototype</a> [&#8593;](#list-of-design-patterns), +## <a name="singleton">Singleton</a> [&#8593;](#list-of-design-patterns), +## <a name="adapter">Adapter</a> [&#8593;](#list-of-design-patterns), +## <a name="bridge">Bridge</a> [&#8593;](#list-of-design-patterns), +## <a name="composite">Composite</a>
[+++ b/.travis.yml, +jdk:, + - oraclejdk8, +]
[+++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +++ b/servant/etc/servant-pattern.jpg, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +++ b/servant/etc/servant-pattern.jpg, +++ b/servant/etc/servant-pattern.png, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant-pattern.png "Servant"), +++ b/servant/etc/servant-pattern.jpg, +++ b/servant/etc/servant-pattern.png, +++ b/servant/etc/servant-pattern.ucls, +<?xml version="1.0" encoding="UTF-8"?>
[+++ b/data-bus/pom.xml]
[+++ b/async-method-invocation/README.md, + - Reactive, +++ b/async-method-invocation/README.md, + - Reactive, +++ b/command/README.md, + - Functional, +++ b/async-method-invocation/README.md, + - Reactive, +++ b/command/README.md, + - Functional, +++ b/event-aggregator/README.md, + - Reactive, +++ b/async-method-invocation/README.md, + - Reactive, +++ b/command/README.md, + - Functional, +++ b/event-aggregator/README.md, + - Reactive, +++ b/event-driven-architecture/README.md, +---, +permalink: /patterns/event-driven-architecture/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, + - Reactive, +---, +++ b/async-method-invocation/README.md, + - Reactive, +++ b/command/README.md, + - Functional, +++ b/event-aggregator/README.md, + - Reactive, +++ b/event-driven-architecture/README.md, +---, +permalink: /patterns/event-driven-architecture/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, + - Reactive, +---, +++ b/monad/README.md, +
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/facade/README.md, +## Explanation, +, +Real world example, +, +> How does a goldmine work? "Well, the miners go down there and dig gold!" you say. That is what you believe because you are using a simple interface that goldmine provides on the outside, internally it has to do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade., +, +In plain words, +, +> Facade pattern provides a simplified interface to a complex subsystem., +, +Wikipedia says, +, +> A facade is an object that provides a simplified interface to
[+++ b/builder/src/main/java/com/iluwatar/Armor.java, + CLOTHES("clothes"), LEATHER("leather"), CHAIN_MAIL("chain mail"), PLATE_MAIL("plate mail");
[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Controller.java, +package com.iluwatar.delegation.simple;, +, +public abstract class Controller<T extends Printer> {, +, + private Printer printer;, +, + public Controller(Printer printer) {, + this.printer = printer;, + }, +, + protected Printer getPrinter() {, + return printer;, + }, +}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Controller.java, +package com.iluwatar.delegation.simple;, +, +public abstract class Controller<T extends Printer> {, +, + private Printer printer;, +, + public Controller(Printer printer) {, + this.printer = printer;, + }, +, + protected Printer getPrinter() {, + return printer;, + }, +}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +package com.iluwatar.delegation.simple;, +, +public interface Printer {, +, + void print(final String message);, +}, +++
[+++ b/pom.xml, + <urm.version>1.4.1</urm.version>]
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ /dev/null, +++ b/checkstyle.xml, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/README.md, +* [Callback](#callback), +## <a name="callback">Callback</a> [&#8593;](#list-of-design-patterns), +**Intent:** Callback is a piece of executable code that is passed as an argument to other code, which is expected to call back (execute) the argument at some convenient time., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/callback/etc/callback.jpg "Callback"), +, +**Applicability:** Use the Callback pattern when, +* When some arbitrary synchronous or asynchronous action must be performed after execution of some defined activity., +, +++ b/README.md, +* [Callback](#callback), +## <a name="callback">Callback</a> [&#8593;](#list-of-design-patterns), +**Intent:** Callback is a piece of executable code that is passed as an argument to other code, which is expected to call back (execute)
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do
[+++ b/dao/pom.xml, + and ${project.build.directory}. Thanks to Sean Patrick Floyd , + <resource> <!-- regular processing for every resource file -->, + <resource> <!-- processing with a different output directory for log4j.xml -->, + <targetPath>..</targetPath> <!-- relative to target/classes i.e. ${project.build.directory} -->]
[+++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + troll = new ClubbedTroll(troll);, + troll.attack();, + troll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at
[+++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import java.util.function.IntBinaryOperator;, +, + static List<Object[]> prepareParameters(final IntBinaryOperator resultCalc) {, + resultCalc.applyAsInt(i, j)]
[+++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.7.0</version>, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that, + * have a common theme without specifying their concrete classes. In normal usage, the client, + * software creates a concrete implementation of the abstract factory and then uses the generic, + * interface of the factory to create the concrete objects that are part of the theme. The client, + * does not know (or care) which concrete objects it gets from each of these internal factories,, + * since
[+++ b/abstract-document/README.md, +---, +layout: pattern, +title: Abstract Document, +folder: abstract-document, +permalink: /patterns/abstract-document/, +categories: Structural, +tags: , + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Achieve flexibility of untyped languages and keep the type-safety , +, +![alt text](./etc/abstract-document_1.png "Abstract Document"), +, +## Applicability, +Use the Abstract Document Pattern when, +, +* there is a need for dynamic properties, +* you want a better way to organize domain, +* you want loosely coupled system with flexibility of untyped languages, +, +## Real world examples, +, +* [Speedment](https://github.com/speedment/speedment), +++ b/abstract-document/README.md, +---, +layout: pattern, +title: Abstract Document, +folder: abstract-document, +permalink: /patterns/abstract-document/,
[+++ b/flyweight/README.md, +## Explanation, +Real world example, +, +> Alchemist's shop has shelves full of magic potions. Many of the potions are the same so there is no need to create new object for each of them. Instead one object instance can represent multiple shelf items so memory footprint remains small., +, +In plain words, +, +> It is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects., +, +Wikipedia says, +, +> In computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use
[+++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +/**, + * Washing machine class, + */, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +/**, + * Washing machine class, + */, +++ b/converter/src/main/java/com/iluwatar/converter/User.java, +/**, + * User class, + */, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +/**, + * Washing machine class, + */, +++ b/converter/src/main/java/com/iluwatar/converter/User.java, +/**, + * User class, + */, +++ b/converter/src/main/java/com/iluwatar/converter/UserDto.java, +/**, + * User DTO class, + */]
[+++ /dev/null, +++ /dev/null, +++ b/retry/licenseheader.txt, +====, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission
[+++ b/pom.xml, +-->, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <htmlunit.version>2.22</htmlunit.version>, + <dependency>, + <groupId>net.sourceforge.htmlunit</groupId>, + <artifactId>htmlunit</artifactId>, + <version>${htmlunit.version}</version>, + <scope>test</scope>, + </dependency>]
[+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, + StringBuilder builder = new StringBuilder();, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, + StringBuilder builder = new StringBuilder();, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Car.java, + super(new HashMap<>());, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, + StringBuilder builder = new StringBuilder();, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Car.java, + super(new HashMap<>());, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Part.java, + super(new HashMap<>());]
[+++ /dev/null, +++ /dev/null, +++ b/README.md, +**Intent:** Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces., +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/double-checked-locking/etc/double_checked_locking.jpg "Double Checked Locking"), +, +**Applicability:** Use the Visitor pattern when, +* an object structure contains many classes of objects with differing interfaces, and you want to perform operations on these objects that depend on their concrete classes, +* many distinct and unrelated operations need to be performed on objects in an object structure, and you want to avoid "polluting" their classes with these operations. Visitor lets you
[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, + * The Fluent Interface pattern is useful when you want to provide an easy readable, flowing API. Those, + * interfaces tend to mimic domain specific languages, so they can nearly be read as human languages., + * {@link SimpleFluentIterable} evaluates eagerly and would be too costly for real world applications. , + * The {@link LazyFluentIterable} is evaluated on termination. Their usage is demonstrated with a , + * simple number list that is filtered, transformed and collected. The result is printed afterwards., + * ]
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/aggregator-microservices/information-microservice/src/main/java/com/iluwatar/information/microservice/InformationController.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/aggregator-microservices/information-microservice/src/main/java/com/iluwatar/information/microservice/InformationController.java, +++ b/aggregator-microservices/information-microservice/src/test/java/com/iluwatar/information/microservice/InformationControllerTest.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/aggregator-microservices/information-microservice/src/main/java/com/iluwatar/information/microservice/InformationController.java, +++ b/aggregator-microservices/information-microservice/src/test/java/com/iluwatar/information/microservice/InformationControllerTest.java, +++ b/aggregator-microservices/inventory-microservice/src/main/java/com/iluwatar/inventory/microservice/InventoryController.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/aggregator-microservices/information-microservice/src/main/java/com/iluwatar/information/microservice/InformationController.java, +++ b/aggregator-microservices/information-microservice/src/test/java/com/iluwatar/information/microservice/InformationControllerTest.java, +++ b/aggregator-microservices/inventory-microservice/src/main/java/com/iluwatar/inventory/microservice/InventoryController.java, +++ b/aggregator-microservices/inventory-microservice/src/test/java/com/iluwatar/inventory/microservice/InventoryControllerTest.java, +, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import
[+++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing
[+++ b/service-locator/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +/**, + * Service locator pattern, used to lookup jndi services , + * and cache them for subsequent requests. , + * @author saifasif, + *, + */, +public class App {, + public static void main(String[] args) {, + Service service = ServiceLocator.getService("jndi/serviceA");, + service.execute();, + service = ServiceLocator.getService("jndi/serviceB");, + service.execute();, + service = ServiceLocator.getService("jndi/serviceA");, + service.execute();, + service = ServiceLocator.getService("jndi/serviceA");, + service.execute(); , + } , +, +}, +++ b/service-locator/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +/**, + * Service locator pattern, used to lookup jndi services , + * and cache them for subsequent requests.
[+++ b/private-class-data/src/main/java/com/iluwatar/privateclassdata/App.java, + * <p>, + * In the example we have normal {@link Stew} class with some ingredients given in, + * {@link Stew} class., + * {@link ImmutableStew} class that contains {@link StewData}. The private data members of, + * {@link Stew} are now in {@link StewData} and cannot be altered by {@link ImmutableStew} methods., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/private-class-data/src/main/java/com/iluwatar/privateclassdata/App.java, + * <p>, + * In the example we have normal {@link Stew} class with some ingredients given in, + * {@link Stew} class.,
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + LotteryAdministration administration = injector.getInstance(LotteryAdministration.class);, + ConsoleAdministrationSrv consoleAdministration = new ConsoleAdministrationSrvImpl(administration, LOGGER);, + consoleAdministration.getAllSubmittedTickets();, + consoleAdministration.performLottery();, + consoleAdministration.resetLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, + LotteryAdministration administration = injector.getInstance(LotteryAdministration.class);, + ConsoleAdministrationSrv consoleAdministration = new ConsoleAdministrationSrvImpl(administration, LOGGER);, + consoleAdministration.getAllSubmittedTickets();, + consoleAdministration.performLottery();, + consoleAdministration.resetLottery();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministrationSrv.java, +package com.iluwatar.hexagonal.administration;, +, +/**, + * Console interface for lottery administration, + */, +public interface ConsoleAdministrationSrv {, +, + /**, + * Get all submitted tickets, + */, + void getAllSubmittedTickets();, +, + /**, + * Draw lottery numbers, + */, + void performLottery();, +, + /**, + * Begin new lottery round, + */, + void
[+++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/abstract-document/etc/abstract-document-base.png, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/abstract-document/etc/abstract-document-base.png, +++ b/abstract-document/etc/abstract-document-base.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <interface id="1" language="java" name="com.iluwatar.abstractdocument.Document" project="design-patterns" , + file="/design-patterns/src/com/iluwatar/abstractdocument/Document.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="249" y="405"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true"
[+++ b/proxy/src/main/java/com/iluwatar/proxy/App.java, + * A proxy, in its most general form, is a class functioning as an interface to something else. , + * The proxy could interface to anything: a network connection, a large object in memory, a file, , + * or some other resource that is expensive or impossible to duplicate. In short, a proxy is a , + * wrapper or agent object that is being called by the client to access the real serving object , + * behind the scenes., + * <p>, + * The Proxy design pattern allows you to provide
[+++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>, +++ b/serverless/README.md, +---, +layout: pattern, +title: serverless, +folder: serverless, +permalink: /patterns/serverless/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermittent, +---, +, +## Serverless, +, +Serverless eliminates the need to plan for infrastructure and let's you focus on your , +application. , +, +Following are optimization katas you should be aware of while building a serverless , +applications, +,
[+++ b/.travis.yml]
[+++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * mapping each of them with the convertion function, + * mapping each of them with the convertion function, +++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * mapping each of them with the convertion function, + * mapping each of them with the convertion function, +++ b/eip-aggregator/README.md, +---, +layout: pattern, +title: EIP Aggregator, +folder: eip-aggregator, +permalink: /patterns/eip-aggregator/, +categories: Enterprise integration, +tags:, + - Java, + - Difficulty-Intermittent, + - Enterprise integration, +---, +, +## Intent, +Sometimes in enterprise systems there is a need to group incoming data in order to process it as a whole. For example, +you may need
[+++ b/component-object/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/message-channel/.gitignore, +/target/, +++ b/message-channel/.gitignore, +/target/, +++ b/message-channel/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <artifactId>message-channel</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/message-channel/.gitignore, +/target/, +++ b/message-channel/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <artifactId>message-channel</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java, +package com.iluwatar.message.channel;, +, +public class App {, +
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java, + try {, + } catch (Exception e) {, + System.out.println("Failed submitting lottery ticket - please try again.");, + }, + try {, + } catch (Exception e) {, + System.out.println("Failed checking the lottery ticket - please try again.");, + }]
[+++ b/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java, +/**, + * Test for {@link Client}, + */, + assert result == 100 || result == -1;, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java, +/**, + * Test for {@link Client}, + */, + assert result == 100 || result == -1;, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java, +/**, + * Test for {@link RemoteService}, + */, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java, +/**, + * Test for {@link Client}, + */, + assert result == 100 || result == -1;, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java, +/**, + * Test for {@link RemoteService}, + */, +++ b/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java, +/**, + * Test for {@link ServiceAmbassador},
[+++ b/tls/src/main/java/com/iluwatar/tls/App.java, +/**, + * The MIT License, + * Copyright (c) 2016 Thomas Bauer, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, + if (author == null) {, + throw new NullPointerException("Author " + username + " doesn't exist!");, + }, + if (book == null) {, + throw new NullPointerException("Book " + title + " doesn't exist!");, + }]
[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, + private static <E> void prettyPrint(String prefix, Iterable<E> iterable) {, + private static <E> void prettyPrint(String delimiter, String prefix,, + Iterable<E> iterable) {, + Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, + private static <E> void prettyPrint(String prefix, Iterable<E> iterable) {, + private static <E> void prettyPrint(String delimiter, String prefix,, + Iterable<E> iterable) {, + Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <E> is the class of objects the iterable contains, +public interface FluentIterable<E> extends Iterable<E> {, + FluentIterable<E> filter(Predicate<? super E> predicate);, + Optional<E> first();, + FluentIterable<E> first(int count);, + Optional<E> last();, + FluentIterable<E> last(int
[+++ b/front-controller/src/main/java/com/iluwatar/front/controller/App.java, + * <p>, + * object ({@link FrontController}). This object can carry out the common the behavior such as, + * <p>, + * Typically the requests are mapped to command objects ({@link Command}) which then display, + * the correct view ({@link View})., + * <p>, + * In this example we have implemented two views: {@link ArcherView} and {@link CatapultView}. These, + * are displayed by sending correct request to the {@link FrontController} object. For example,, + * the {@link ArcherView} gets displayed when {@link FrontController} receives request "Archer". When, + * the request is
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasPrice {, + + getPrice() : Optional<Number>, + class Car {, + + Car(properties : Map<String, Object>), + }, + interface HasModel {, + + getModel() : Optional<String>, + class App {, + + App(), + + main(args : String[]) {static}, + interface Document {, + + children(String, Function<Map<String, Object>, T>) : Stream<T> {abstract}, + + get(String) : Object {abstract}, + + put(String, Object) {abstract}, +AbstractDocument ..|> Document , +HasPrice --|> Document , +HasParts --|> Document , +HasModel --|> Document , +++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasPrice {, + + getPrice() : Optional<Number>, + class Car
[+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2014-2017 Gopinath Langote, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, +
[+++ b/_scripts/postPumlsToServer.firstrun.output, +parent: half-sync-half-async; artifact: half-sync-half-async, +Puml Server ID: RScv3SCm3030LU819FRPXg5fIm552tnYPFiyjRi3RkbAaYkdoQr5JBy369vrxz7oaSv6XmPhL3e6TCaJ0msU-CAoilTToyG8DdKOw5z0GzcAlvNAN_WZSD1brBHHPmxv0000, +parent: abstract-document; artifact: abstract-document, +Puml Server ID: PSjB3eCm34NHhPG599vtDyQn85L-ifzX-p3lxEf8Twj3MXGDQvyJMFubChxpKN767gucSq07iinEjSNDOACVNvoAUZr6MWoe3QVE_WRnxZ0Mf38b-hkIGlurX_MyehS7, +parent: tolerant-reader; artifact: tolerant-reader, +Puml Server ID: NSZ14SCm20NHLf829ExfXaYChGn26lZ4xSVdtFRjSrZJx9AkZnFOyI9olkenSEOxGxmjWnXgMvE6viLWfmz_kNI9SLZP38XRqEIuWx1Kd0t5XVjjGVj_DNtMdLD_, +parent: event-driven-architecture; artifact: event-driven-architecture, +Puml Server ID: TOhH3SCW30LNQGS0_tSRnrZ15H1adfFromBzkfFktZQaHT7mzgh0N1yYvoUVXXf7B7Mv1dGWozN9MZmCTlhopQdeidEaoO3wMDHvRI6zzvwAssPYbsfGGRYIGlxN7DxpZDv-, +parent: publish-subscribe; artifact: publish-subscribe, +Puml Server ID: PSZB3SCm203GLTe1RExT1XCKKs5YyMdMR--zFRsd66aTNAwFcRdZ1U1uzrDorgXWfykIBJjT2qJhnaI7Dtwm7HnoMjkOoMu12-C7s3LKOhQe4UGo63ZfVtlvwhkMVW40, +parent: facade; artifact: facade, +Puml Server ID: BSP15eCm20N0gxG7CEoz3ILKqvTW7dpq-hhehERTJ7fMJU-l7PYn4ZbVPMlOyvEXBeT13KMEGQtdnM2d7v-yL8sssJ8PKBUWmV64lYnSbHJoRqaVPUReDm00, +parent: service-locator; artifact: service-locator, +Puml Server ID: NSjB3iCm203HgxG7iDdtDeIWX0fZYqzo_MRTtUX9ynOZhPtBzNLchlW0EDxza3nhgs2dQScMdUO0qRenqU6B5xQTGmvh2pFPBM1WF07FSmbnqqcOqu6J_gsNZxvgw0y0, +parent: dao; artifact: dao, +Puml Server ID: 5SR14OKW30N0LhG0oVrt4o6ZE12Ov4NR_thQNQlc5aN2sd82qtz4naywAixOmyNoK8WYvT6fjdWOR7JnpLiHhuTkam4nTUhiRwZm847-J64zpUZj3m00, +parent: model-view-presenter; artifact: model-view-presenter, +Puml Server ID: ROlR3SGW3C1MkGu0-RzjKeXQJWcWFChwPO3xispvQBrmL0hbp-q-xGkWkFBL_8upZBICxjGzbo7GE1OwAlpmmLJ9sjNJH7VIRY1e6q169KvFevMcakrtI_BoD-HGoJE4Nm00, +parent: observer; artifact: observer, +Puml Server ID: FSkn4OGm30NHLg00hFow4KO3PcpP8tr1-pYwx6smQz5Suv2mkbp0y1-HyPlEWYlsSB7S5Q98kJSgDLu66ztyy7Q8brEtmO2OEZNs2Uhxl9u9GVv72cjfHAiV, +parent: intercepting-filter; artifact: intercepting-filter, +Puml Server ID: RSfB3i8m303Hgy014k-vZN5DQkIuaJ_q-fGzkz7JtCL8Q-DolUsPAnu0ZcSVadizAzZfi6JBJiS4qJenqU6D7smRXmnh2pFPBM1YN05o_KwyKcoqb-ZFEEcVz_BPLqtz0W00, +parent: factory-method; artifact: factory-method, +Puml Server ID: NSZB3G8n30N0Lg20n7UwCOxPP9MVx6TMT0zdRgEvjoazYeRrMmMsFuYChtmqr7Y6gycQq8aiQr3hSJ7OwEGtfwBUZfas0shJQR3_G2yMBFkaeQYha4B-AeUDl6FqBm00, +parent:
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/business-delegate/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, +
[+++ b/repository/src/main/java/com/iluwatar/App.java, + , +++ b/repository/src/main/java/com/iluwatar/App.java, + , +++ b/repository/src/main/resources/applicationContext.xml, + <entry key="hibernate.hbm2ddl.auto" value="create-drop" />]
[+++ b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java, + return INSTANCE;
[+++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain {, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, + Captain captain = (Captain) beans.get(ROWING_BEAN);]
[+++ b/resource-acquisition-is-initialization/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/resource-acquisition-is-initialization/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/ClosableTest.java, +package com.iluwatar.resource.acquisition.is.initialization;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import static org.mockito.Mockito.inOrder;, +, +/**, + * Date: 12/28/15 - 9:31 PM, + *, + * @author Jeroen Meulemeester, + */, +public class ClosableTest extends StdOutTest {, +, + @Test, + public void testOpenClose() throws Exception {, + final InOrder inOrder = inOrder(getStdOutMock());, + try (final SlidingDoor door = new SlidingDoor(); final TreasureChest chest = new TreasureChest()) {, + inOrder.verify(getStdOutMock()).println("Sliding door opens.");, + inOrder.verify(getStdOutMock()).println("Treasure chest
[+++ b/message-channel/.gitignore, +/target/, +/target/, +++ b/message-channel/.gitignore, +/target/, +/target/, +++ b/message-channel/etc/message-channel.png, +++ b/message-channel/.gitignore, +/target/, +/target/, +++ b/message-channel/etc/message-channel.png, +++ b/message-channel/etc/message-channel.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="org.apache.camel.builder.RouteBuilder" project="message-channel" , + file="C:/Users/ilkka/.m2/repository/org/apache/camel/camel-core/2.15.3/camel-core-2.15.3.jar" binary="true" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="920" y="458"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="false" package="false" protected="false" private="false" static="true"/> , + <operations public="false" package="false" protected="false" private="false" static="true"/> , + </display> , + </class> , + <interface id="2" language="java" name="org.apache.camel.CamelContext" project="message-channel" , + file="C:/Users/ilkka/.m2/repository/org/apache/camel/camel-core/2.15.3/camel-core-2.15.3.jar"
[+++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/AdvancedSorceress.java, + * <p>
[+++ b/mute-idiom/etc/mute-idiom.png, +++ b/mute-idiom/etc/mute-idiom.png, +++ b/mute-idiom/etc/mute-idiom.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="true" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.mute.App" project="mute-idiom" , + file="/mute-idiom/src/main/java/com/iluwatar/mute/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="519" y="122"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="false" static="true"/> , + <operations public="true" package="true" protected="true" private="false" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.mute.Mute" project="mute-idiom" , + file="/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="115" width="203" x="291" y="267"/> , + <display autosize="false" stereotype="true"
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/design_pattern_relationships.gif]
[+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java, + * The Feature Toggle pattern allows for complete code executions to be turned on or off with ease. This allows features, + * to be controlled by either dynamic methods just as {@link User} information or by {@link Properties}. In the App, + * below there are two examples. Firstly the {@link Properties} version of the feature toggle, where the enhanced, + * version of the welcome message which is personalised is turned either on or off at instance creation. This method, + * is not as dynamic as the {@link User} driven version where the
[+++ b/acyclic-visitor/README.md, +---, +layout: pattern, +title: Acyclic Visitor, +folder: acyclic-visitor, +permalink: /patterns/acyclic-visitor/, +categories: Behavioral, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +![alt text](./etc/acyclic-visitor.png "Acyclic Visitor"), +, +## Intent, +Allow new functions to be added to existing class hierarchies without affecting those hierarchies, and without creating the troublesome dependency cycles that are inherent to the GOF VISITOR Pattern., +, +## Applicability, +This pattern can be used:, +* When you need to add a new function to an existing hierarchy without the need to alter or affect that hierarchy., +* When there are functions that operate upon a hierarchy,
[+++ b/double-dispatch/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/double-dispatch/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/double-dispatch/src/test/java/com/iluwatar/doubledispatch/CollisionTest.java, +package com.iluwatar.doubledispatch;, +, +import org.junit.After;, +import org.junit.Before;, +, +import java.io.PrintStream;, +import java.util.Objects;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +, +/**, + * Date: 12/10/15 - 8:37 PM, + *, + * @author Jeroen Meulemeester, + */, +public abstract class CollisionTest<O extends GameObject> {, +, + /**, + * The mocked standard out {@link PrintStream}, required if some of the actions on the tested,
[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, +/**, + * Extra layer of abstraction for the controller to allow the controller in this example {@link PrinterController} to, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of T allows, + * any implementation of {@link Printer}, + *, + * @param <T> Printer, + * @see Printer, + * @see PrinterController, + */, +, + /**, + * @param printer instance of T {@link Printer} this instance is the delegate, + */, + /**, + * Helper method to return the current instance
[+++ /dev/null, +++ /dev/null, +++ b/hexagonal/etc/ports_and_adapters.png, +++ /dev/null, +++ b/hexagonal/etc/ports_and_adapters.png, +++ b/hexagonal/etc/ports_and_adapters.xml, +<mxfile userAgent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.90 Safari/537.36" version="6.0.1.3" editor="www.draw.io" type="device"><diagram name="Page-1">7Zpdk6I4FIZ/jbdbJAHEyx7nY/diqrqqd2tnLiOJSDUSK6ZHe3/9BkmUfFiDDqBM2TcNBwLxOe85nBOYoPl6/4XjzeorI7SYwIDsJ+jjBEKA4kj+qyzvtWUag9qQ8Zyok06Gl/w/qoyBsr7lhG6NEwVjhcg3pjFlZUlTYdgw52xnnrZkhXnXDc6oY3hJceFa/82JWNXWJApO9j9pnq30nUGgjixw+ppx9laq+00gWh7+6sNrrK+lzt+uMGG7hgl9mqA5Z0zUW+v9nBYVW42tHvf5zNHjvDktRZsBqB7wAxdvVM/4MC/xrlnIKW6qzRXd44yVE/RhQ3m+poLyk/X5ZPqwW+WCvmxwWo3aSYFI20qsC7kH5Ka6I+WC7s/OGhxZSI1RJi/N3+UpagBMFD4lL6D3dydnIa2lVcNRMFZGrASSHa99giQ3FCc/MzhKZmgaGcyOKBrMAPQwO2r7V5iFDrM549ThJgfJEKc/B7LMi2LOCsYP46oYg2kq7VvB2SttHCHxIo7ibhCGATARJshBqDNfk2AXoot+Lrpr4RFMk6UXXpwmdLHsCF5s6W/qwkMe+aEO4MW/GzwEPQmvJ3jT0cMDMxNeGA0GLxk7PDQ1H7VDKm82fnh2zoODwdPlz3jphdCUHoyGkx5oUeRdTS+iCQl99BK4QHFHxUoUWfQ89V5v9Fq0FXdOz9ZeMCC9Nk/ckjxVfa7cK1lJTWJ0n4tvje3vcjuotks5k2/Nne/6rJJ8zqsJHQ7Vd6PE6ZEtenJG7I2n1KhQBeYZFU0duJAbECMPRG3jtMAi/2HOwkdW3eGZ5XJ+Z7vECFjOqWevRjWbZOtCCJkXCu2Cvv7NzoUOjj7+7Ha+b1MwXOz7P6IefQwfPr7Qx33WNYNkR5s60nXuANkR9lnXDEIPWc8WNBvu2aJn+8v5JfDkF/V0Ac2nS3e5J/Hkntkj91yWe7S7O/U/OO/9/nzfWC5/+L6d70dfldsrOSEcbiXHs4R9ZeTUGdEXO41E2mX0TD3Rc1+Vue2gq6Mn6S963BX4Z8bF1hGBlLcwPW/GhFJGM4CUCRd5VsrdVDrz8FaoCpY8xcWTOrDOCSnOBWcH8YVmoYHzGDgNWYS+12pdxJe7SP/PVlKQZ1Q0ltVvtVEfXrRSojD3/w4NALvudd9hAN97x7ALQO6ywN90WwUDzqiS903h2CvFiZucZ32xcdvmv6RqMi6zFCtvjuZY4et851lN6g2N221+xAIv8Pb28RQHJhcwG04yOrU1uHxl6au0kLvBYz3dYOTi6S3doPF2irpKNAqe2I96mIIHWJ6Mr20XgF059dcuoD5axWEEoOsRQwDThwAuFECbfvE+Ox5dlxkCSB4CuFAAXbW8vpcRvldRHT4CfAK46WrhKAXQ5quzOxUAdAWAbrpkOEoBuE35E8Eb2Y//XuseVh+CPP1ZR+secvf0dXftkdMn9OjT/w==</diagram></mxfile>, +++ /dev/null, +++ b/hexagonal/etc/ports_and_adapters.png, +++ b/hexagonal/etc/ports_and_adapters.xml, +<mxfile userAgent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.90 Safari/537.36" version="6.0.1.3" editor="www.draw.io" type="device"><diagram name="Page-1">7Zpdk6I4FIZ/jbdbJAHEyx7nY/diqrqqd2tnLiOJSDUSK6ZHe3/9BkmUfFiDDqBM2TcNBwLxOe85nBOYoPl6/4XjzeorI7SYwIDsJ+jjBEKA4kj+qyzvtWUag9qQ8Zyok06Gl/w/qoyBsr7lhG6NEwVjhcg3pjFlZUlTYdgw52xnnrZkhXnXDc6oY3hJceFa/82JWNXWJApO9j9pnq30nUGgjixw+ppx9laq+00gWh7+6sNrrK+lzt+uMGG7hgl9mqA5Z0zUW+v9nBYVW42tHvf5zNHjvDktRZsBqB7wAxdvVM/4MC/xrlnIKW6qzRXd44yVE/RhQ3m+poLyk/X5ZPqwW+WCvmxwWo3aSYFI20qsC7kH5Ka6I+WC7s/OGhxZSI1RJi/N3+UpagBMFD4lL6D3dydnIa2lVcNRMFZGrASSHa99giQ3FCc/MzhKZmgaGcyOKBrMAPQwO2r7V5iFDrM549ThJgfJEKc/B7LMi2LOCsYP46oYg2kq7VvB2SttHCHxIo7ibhCGATARJshBqDNfk2AXoot+Lrpr4RFMk6UXXpwmdLHsCF5s6W/qwkMe+aEO4MW/GzwEPQmvJ3jT0cMDMxNeGA0GLxk7PDQ1H7VDKm82fnh2zoODwdPlz3jphdCUHoyGkx5oUeRdTS+iCQl99BK4QHFHxUoUWfQ89V5v9Fq0FXdOz9ZeMCC9Nk/ckjxVfa7cK1lJTWJ0n4tvje3vcjuotks5k2/Nne/6rJJ8zqsJHQ7Vd6PE6ZEtenJG7I2n1KhQBeYZFU0duJAbECMPRG3jtMAi/2HOwkdW3eGZ5XJ+Z7vECFjOqWevRjWbZOtCCJkXCu2Cvv7NzoUOjj7+7Ha+b1MwXOz7P6IefQwfPr7Qx33WNYNkR5s60nXuANkR9lnXDEIPWc8WNBvu2aJn+8v5JfDkF/V0Ac2nS3e5J/Hkntkj91yWe7S7O/U/OO/9/nzfWC5/+L6d70dfldsrOSEcbiXHs4R9ZeTUGdEXO41E2mX0TD3Rc1+Vue2gq6Mn6S963BX4Z8bF1hGBlLcwPW/GhFJGM4CUCRd5VsrdVDrz8FaoCpY8xcWTOrDOCSnOBWcH8YVmoYHzGDgNWYS+12pdxJe7SP/PVlKQZ1Q0ltVvtVEfXrRSojD3/w4NALvudd9hAN97x7ALQO6ywN90WwUDzqiS903h2CvFiZucZ32xcdvmv6RqMi6zFCtvjuZY4et851lN6g2N221+xAIv8Pb28RQHJhcwG04yOrU1uHxl6au0kLvBYz3dYOTi6S3doPF2irpKNAqe2I96mIIHWJ6Mr20XgF059dcuoD5axWEEoOsRQwDThwAuFECbfvE+Ox5dlxkCSB4CuFAAXbW8vpcRvldRHT4CfAK46WrhKAXQ5quzOxUAdAWAbrpkOEoBuE35E8Eb2Y//XuseVh+CPP1ZR+secvf0dXftkdMn9OjT/w==</diagram></mxfile>, +++ b/hexagonal/etc/presentation.html, +# Concepts, +* Ports are interfaces, +* The ports that drive the application are called primary ports, +* The ports that are driven by the application are called secondary ports, +* Adapters are interface implementations, +* Typically different adapters for testing and production are provided, +, +---, +, +#
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java, +/**, + * Map a video to json, + */, +, + /**, + * @param video object containing video information, + * @param fields fields information to get, + * @return json of required fields from video, + */, +++ b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java, +/**, + * Map a video to json, + */, +, + /**, + * @param video object containing video information, + * @param fields fields information to get, + * @return json of required fields from video, + */, +++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, + /**, + * @return json representaion of video, + */, + return
[+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private DbManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private DbManager() {, + }, +, +++ b/mediator/src/main/java/com/iluwatar/mediator/PartyImpl.java, + if (member != actor) {
[+++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java, + @Ignore // intermittent failures when executed on CI]
[+++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain implements RowingBoat {, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain implements RowingBoat {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain implements RowingBoat {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br>, +++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java, +public class Captain implements RowingBoat {, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java,
[+++ b/.travis.yml, +, + - "export DISPLAY=:99.0", + - "sh -e /etc/init.d/xvfb start", +# Migration to container-based infrastructure , +++ b/.travis.yml, +, + - "export DISPLAY=:99.0", + - "sh -e /etc/init.d/xvfb start", +# Migration to container-based infrastructure , +++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697), +++ b/.travis.yml, +, + - "export DISPLAY=:99.0", + - "sh -e /etc/init.d/xvfb start", +# Migration to container-based infrastructure , +++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697), +++ b/abstract-factory/index.md, +tags: Java, +++ b/.travis.yml, +, +
[+++ b/extension-objects/etc/extension_obj.png, +++ b/extension-objects/etc/extension_obj.png, +++ b/extension-objects/etc/extension_obj.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.2.0" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="concreteextensions.Soldier" project="extension-objects" , + file="/extension-objects/src/main/java/concreteextensions/Soldier.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="483" y="339"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="units.Unit" project="extension-objects" , + file="/extension-objects/src/main/java/units/Unit.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="192" y="115"/> , + <display autosize="true"
[+++ b/.gitignore, +*.log, +++ b/.gitignore, +*.log, +++ b/.travis.yml, +++ b/.gitignore, +*.log, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/.gitignore, +*.log, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/.gitignore, +*.log, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasParts {, + + PROPERTY : String {static}, + + getParts() : Stream<Part>, + }, + interface HasPrice {, + + PROPERTY : String {static}, + + getPrice() : Optional<Number>, + }, + interface HasType {, + + PROPERTY : String {static}, + +
[+++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, + * <p>, + * <p>The Data-Bus pattern provides a method where different parts of an application may, + * pass messages between each other without needing to be aware of the other's existence.</p>, + * <p>Similar to the {@code ObserverPattern}, members register themselves with the {@link DataBus}, + * and may then receive each piece of data that is published to the Data-Bus. The member, + * may react to any given message or not.</p>, + * <p>It allows for Many-to-Many distribution of data, as there may be any number of, + * publishers to a
[+++ b/factory-method/src/main/java/com/iluwatar/factory/method/App.java, + * The Factory Method is a creational design pattern which uses factory methods to deal , + * with the problem of creating objects without specifying the exact class of object , + * that will be created. This is done by creating objects via calling a factory , + * method either specified in an interface and implemented by child classes, or implemented , + * in a base class and optionally overridden by derived classes—rather than by calling a , + * constructor., + * <p>, + * In this Factory Method example we
[+++ b/model-view-controller/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>model-view-controller</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/model-view-controller/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>model-view-controller</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/model-view-controller/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {, + , + public static void main( String[] args ) {, +
[+++ b/command/src/main/java/com/iluwatar/command/Size.java, + SMALL("small"), NORMAL("normal");
[+++ b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java, +import java.util.Collections;, + /**, + * Get a read-only list of all the items on the top shelf, + *, + * @return The top shelf potions, + */, + public final List<Potion> getTopShelf() {, + return Collections.unmodifiableList(this.topShelf);, + }, +, + /**, + * Get a read-only list of all the items on the bottom shelf, + *, + * @return The bottom shelf potions, + */, + public final List<Potion> getBottomShelf() {, + return Collections.unmodifiableList(this.bottomShelf);, + }, +, +++ b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java, +import java.util.Collections;, + /**, + * Get a read-only list of all the items on
[+++ b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java, +package com.iluwatar.callback;, +, +/**, + *, + * This example generates the exact same output as {@link App} however the callback has been, + * defined as a Lambdas expression., + *, + */, +public class LambdasApp {, +, + /**, + * Program entry point, + */, + public static void main(String[] args){, + Task task = new SimpleTask();, + Callback c = () -> System.out.println("I'm done now.");, + task.executeWith(c);, + }, +}, +++ b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java, +package com.iluwatar.callback;, +, +/**, + *, + * This example generates the exact same output as {@link App} however the callback
[+++ b/event-aggregator/etc/classes.png, +++ b/event-aggregator/etc/classes.png, +++ b/event-aggregator/etc/classes.ucls, +<?xml version="1.0" encoding="UTF-8"?>
[+++ b/memento/src/main/java/com/iluwatar/memento/App.java, + * The Memento pattern is a software design pattern that provides the ability to restore , + * an object to its previous state (undo via rollback)., + * <p>, + * The Memento pattern is implemented with three objects: the originator, a caretaker and , + * a memento. The originator is some object that has an internal state. The caretaker is , + * going to do something to the originator, but wants to be able to undo the change. The , + * caretaker first asks the originator for a memento object. Then
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +package com.iluwatar.cqrs.domain.model;, +, +import javax.persistence.Entity;, +import javax.persistence.GeneratedValue;, +import javax.persistence.GenerationType;, +import javax.persistence.Id;, +, +/**, + * , + * @author Sabiq Ihab, + *, + */, +@Entity, +public class Author {, + @Id, + @GeneratedValue(strategy = GenerationType.IDENTITY), + private long id;, + private String username;, + private String name;, + private String email;, +, + /**, + * , + * @param username, + * @param name, + * @param email, + */, + public Author(String username, String name, String email) {, + super();, + this.username = username;, + this.name = name;, + this.email = email;, + },
[+++ b/pom.xml, + <module>mutex</module>, + <module>semaphore</module>]
[+++ b/abstract-document/pom.xml, + <version>1.18.0</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0</version>, +++ b/adapter/pom.xml, + <version>1.18.0</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0</version>, +++ b/adapter/pom.xml, + <version>1.18.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0</version>, +++ b/adapter/pom.xml, + <version>1.18.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.18.0</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0</version>, +++ b/adapter/pom.xml, + <version>1.18.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.18.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.18.0</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.18.0</version>, +++ b/abstract-document/pom.xml, + <version>1.18.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.18.0</version>, +++ b/adapter/pom.xml, + <version>1.18.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/FunctionalProgramming.java, + * @return {@link Map} with category as key and cars belonging to that category as value, +++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/FunctionalProgramming.java, + * @return {@link Map} with category as key and cars belonging to that category as value, +++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java, + * @return {@link Map} with category as key and cars belonging to that category as value]
[+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +import java.io.Serializable;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +public class FileLoader implements Serializable{, +, + /**, + * Generated serial version UID, + */, + private static final long serialVersionUID = -4745803872902019069L;, + , + private static final Logger LOGGER = LoggerFactory.getLogger(FileLoader.class);, + String dataFileName = this.fileName;, + try (BufferedReader br = new BufferedReader(new FileReader(new File(dataFileName)))) {, + LOGGER.error("File {} does not exist", dataFileName);, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +import java.io.Serializable;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +public class FileLoader implements Serializable{, +, + /**, + * Generated serial version UID, + */, + private static final long serialVersionUID = -4745803872902019069L;, +
[+++ b/object-mother/README.md, +---, +layout: pattern, +title: Object Mother, +folder: object-mother, +permalink: /patterns/object-mother/, +pumlid: , +categories: Creational, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Object Mother, +Define a factory of immutable content with separated builder and factory interfaces., +, +![alt text](./etc/object-mother.png "Object Mother"), +, +## Applicability, +Use the Object Mother pattern when, +, +* You want consistent objects over several tests, +* you want to reduce code for creation of objects in tests, +* every test should run with fresh data, +, +## Credits, +, +* [Answer by David Brown](http://stackoverflow.com/questions/923319/what-is-an-objectmother) to the stackoverflow question: [What is an
[+++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing
[+++ b/queue-load-leveling/etc/queue-load-leveling.urm.puml, +package com.iluwatar.queue.load.leveling {, + class App {, + - LOGGER : Logger {static}, + - SHUTDOWN_TIME : int {static}, + + App(), + + main(args : String[]) {static}, + }, + class Message {, + - msg : String, + + Message(msg : String), + + getMsg() : String, + + toString() : String, + }, + class MessageQueue {, + - LOGGER : Logger {static}, + - blkQueue : BlockingQueue<Message>, + + MessageQueue(), + + retrieveMsg() : Message, + + submitMsg(msg : Message), + }, + class ServiceExecutor {, + - LOGGER : Logger {static}, +
[+++ b/balking/README.md, +, +## Related patterns, +* Guarded Suspendion Pattern, +* Double Checked Locking Pattern, +++ b/balking/README.md, +, +## Related patterns, +* Guarded Suspendion Pattern, +* Double Checked Locking Pattern, +++ b/balking/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/balking/README.md, +, +## Related patterns, +* Guarded Suspendion Pattern, +* Double Checked Locking Pattern, +++ b/balking/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/balking/src/main/java/com/iluwatar/balking/App.java, + * <p>, + * <p>, + * <p>, +/**, + * In Balking Design Pattern if an object’s method is invoked when it is in an inappropriate state,, + * then the method will return without doing anything. Objects that use this pattern
[+++ b/hexagonal/README.md, +---, +layout: pattern, +title: Hexagonal Architecture, +folder: hexagonal, +permalink: /patterns/hexagonal/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Expert, +---, +, +## Intent, +Allow an application to equally be driven by users, programs, automated test or batch scripts, and to be developed and tested in isolation from its eventual run-time devices and databases., +, +![Hexagonal Architecture class diagram](./etc/hexagonal.png), +, +## Applicability, +Use Hexagonal Architecture pattern when, +, +* it is important that the application is fully testable, +* you use Domain Driven Design methodology and/or Microservices architectural style, +, +## Real world examples, +, +* [Apache Isis](https://isis.apache.org/),
[+++ /dev/null, +++ /dev/null, +++ b/converter/etc/converter.png]
[+++ b/dependency-injection/src/test/java/com/iluwatar/dependency/injection/AdvancedSorceressTest.java, +/**
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/factory-method/src/main/java/com/iluwatar/factory/method/App.java, + private final Blacksmith blacksmith;, + , + /**, + * Creates an instance of <code>App</code> which will use <code>blacksmith</code> to manufacture , + * the weapons for war., + * <code>App</code> is unaware which concrete implementation of {@link Blacksmith} it is using., + * The decision of which
[+++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <module>repository</module>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <module>repository</module>, +++ b/repository/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.3.0</version>, + </parent>, + <artifactId>repository</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <module>repository</module>, +++ b/repository/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.3.0</version>, + </parent>, + <artifactId>repository</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/with/observer/App.java, +package com.iluwatar.model.view.controller.with.observer;, +, +/**, + * , + * In this second example the model-view relationship is different. This time we use the Observer pattern to notify,
[+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryNumbersTest.java, +import static org.junit.Assert.assertFalse;, + assertEquals(numbers.getNumbers().size(), LotteryNumbers.NUM_NUMBERS);, + , + @Test, + public void testEquals() {, + LotteryNumbers numbers1 = LotteryNumbers.create(, + new HashSet<>(Arrays.asList(1, 2, 3, 4)));, + LotteryNumbers numbers2 = LotteryNumbers.create(, + new HashSet<>(Arrays.asList(1, 2, 3, 4)));, + assertTrue(numbers1.equals(numbers2));, + LotteryNumbers numbers3 = LotteryNumbers.create(, + new HashSet<>(Arrays.asList(11, 12, 13, 14)));, + assertFalse(numbers1.equals(numbers3));]
[+++ b/collection-pipeline/README.md, +---, +layout: pattern, +title: Collection Pipeline, +folder: collection-pipeline, +permalink: /patterns/collection-pipeline/, +categories: Functional, +tags:, + - Java, + - Difficulty-Beginner, + - Functional, +---, +, +## Intent, +Collection Pipeline introduces Function Composition and Collection Pipeline, two functional-style patterns that you can combine to iterate collections in your code. , +In functional programming, it's common to sequence complex operations through a series of smaller modular functions or operations. The series is called a composition of functions, or a function composition. When a collection of data flows through a function composition, it becomes a collection pipeline. Function Composition and Collection
[+++ b/message-channel/pom.xml, + <groupId>org.apache.camel</groupId>, + <artifactId>camel-core</artifactId>, + </dependency>, + <dependency>, +++ b/message-channel/pom.xml, + <groupId>org.apache.camel</groupId>, + <artifactId>camel-core</artifactId>, + </dependency>, + <dependency>, +++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java, +import org.apache.camel.CamelContext;, +import org.apache.camel.impl.DefaultCamelContext;, +, + public static void main(String[] args) throws Exception {, + CamelContext context = new DefaultCamelContext();, + context.start();, + Thread.sleep(10000);, + context.stop();, +++ b/message-channel/pom.xml, + <groupId>org.apache.camel</groupId>, + <artifactId>camel-core</artifactId>, + </dependency>, + <dependency>, +++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java, +import org.apache.camel.CamelContext;, +import org.apache.camel.impl.DefaultCamelContext;, +, + public static void main(String[] args) throws Exception {, + CamelContext context = new DefaultCamelContext();, + context.start();, + Thread.sleep(10000);, + context.stop();, +++ b/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java, + public void test() throws Exception {, +++ b/message-channel/pom.xml, + <groupId>org.apache.camel</groupId>,
[+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, + try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, + try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.size() <= 0) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, + try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.size() <= 0) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, + while (!Thread.currentThread().isInterrupted()) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, + try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + if (available.size() <= 0) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, + while (!Thread.currentThread().isInterrupted()) {, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java, +import org.hibernate.SessionFactory;, + /*, + * Making this getSessionFactory() instead of getSession() so
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, , + * you can decouple an abstraction from its implementation so that the two can vary independently., + * <p>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-factory/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>abstract-factory</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>abstract-factory</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/abstract-factory/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>abstract-factory</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>abstract-factory</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/abstract-factory/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ b/dirty-flag/README.md, +---, +layout: pattern, +title: Dirty Flag, +folder: dirty-flag, +permalink: /patterns/dirty-flag/, +categories: Other, +tags:, + - Java, + - Difficulty-Easy, + - Performance, +---, +, +## Intent, +To avoid expensive re-acquisition of resources. The resources retain their identity, are kept in some, +fast-access storage, and are re-used to avoid having to acquire them again., +, +![alt text](./etc/dirty-flag.png "Dirty Flag"), +, +## Applicability, +Use the Dirty Flag pattern when, +, +* Repetitious acquisition, initialization, and release of the same resource causes
[+++ b/specification/src/main/java/com/iluwatar/specification/app/App.java, + * The central idea of the Specification pattern is to separate the statement of how to match a candidate, from the, + * <p>, + * <p>, +++ b/specification/src/main/java/com/iluwatar/specification/app/App.java, + * The central idea of the Specification pattern is to separate the statement of how to match a candidate, from the, + * <p>, + * <p>, +++ b/specification/src/test/java/com/iluwatar/specification/app/AppTest.java, +/**, + * , + * Application test, + *, + */]
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that have a common theme, + * without specifying their concrete classes. In normal usage, the client software creates a concrete implementation of, + * the abstract factory and then uses the generic interface of the factory to create the concrete objects that are part, + * of the theme. The client does not know (or care) which concrete objects it gets from each of these internal, + * factories, since it uses only the generic interfaces of their products. This
[+++ b/factory-method/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/factory-method/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java, + * ElfWeapon., +, + @Override, + public WeaponType getWeaponType() {, + return weaponType;, + }, +++ b/factory-method/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java, + * ElfWeapon., +, + @Override, + public WeaponType getWeaponType() {, + return weaponType;, + }, +++ b/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java, + * OrcWeapon., +, + @Override, + public WeaponType getWeaponType() {, + return weaponType;, + }, +++ b/factory-method/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, +
[+++ b/feature-toggle/pom.xml, +<!--, + ~ The MIT License (MIT), + ~, + ~ Copyright (c) 2016 Orange Foundry, + ~, + ~ Permission is hereby granted, free of charge, to any person obtaining a copy, + ~ of this software and associated documentation files (the "Software"), to deal, + ~ in the Software without restriction, including without limitation the rights, + ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + ~ copies of the Software, and to permit persons to whom the Software is, + ~ furnished to do so, subject to the following conditions:, +
[+++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.ucls, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.adapter.GnomeEngineeringManager" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="106" width="224" x="110" y="210"/> , + <interface id="2" language="java" name="com.iluwatar.adapter.Engineer" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/Engineer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="88" width="141" x="110" y="356"/> , + <class id="3" language="java" name="com.iluwatar.adapter.GnomeEngineer" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="106" width="141" x="374" y="210"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled = false;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled = false;, +++ b/factory-kit/etc/factory-kit.png, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head
[+++ b/hexagonal/pom.xml, + <version>1.12.0-SNAPSHOT</version>]
[+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append("This is a "), + .append(profession), + .append(" named "), + .append(name);, + sb.append(hairColor).append(" ");, + sb.append(hairType).append(" ");, + sb.append(" wearing ").append(armor);, + sb.append(" and wielding a ").append(weapon);, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append("This is a "), + .append(profession), + .append(" named "), + .append(name);, + sb.append(hairColor).append(" ");, + sb.append(hairType).append(" ");, + sb.append(" wearing ").append(armor);, + sb.append(" and wielding a ").append(weapon);, +++ b/dao/src/test/java/com/iluwatar/dao/CustomerTest.java, + buffer.append("Customer{id="), + .append("" + customer.getId()), + .append(", firstName='"), + .append(customer.getFirstName()), + .append("\', lastName='"), + .append(customer.getLastName() + "\'}");, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append("This is a "), + .append(profession), + .append(" named "), + .append(name);, + sb.append(hairColor).append("
[+++ b/.gitignore, +.idea
[+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, + "\"length\": " + length + "," +, +++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, + "\"length\": " + length + "," +, +++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java, + String expectedDetails = "{\"id\": \"1\",\"title\": \"Avatar\",\"length\": 178,\"description\": \"epic science fiction film\",\"director\": \"James Cameron\",\"language\": \"English\",}";, + assertEquals(expectedDetails, details);]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + <img alt="Coverity Scan Build Status", + src="https://scan.coverity.com/projects/5634/badge.svg"/>, +</a>, +, +, +<a name="top"/>, +, +# <a name="toc">Table of Contents</a>, + - <a href="#introduction">Introduction</a>, + - <a href="#contribute">How to contribute</a>, + - <a href="#faq">Frequently Asked Questions</a>, + - <a href="#credits">Credits</a>, + - <a href="#license">License</a>, +, +, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +# <a name="faq">Frequently asked questions</a> [&#8593;](#top), +, +**<a id="Q1">Q: What is the difference between State and Strategy patterns?</a>**, +, +While the implementation is similar they solve different problems. The State, +pattern
[+++ b/singleton/src/test/java/com/iluwatar/singleton/EnumIvoryTowerTest.java, +package com.iluwatar.singleton;, +, +/**, + * Date: 12/29/15 - 19:20 PM, + *, + * @author Jeroen Meulemeester, + */, +public class EnumIvoryTowerTest extends SingletonTest<EnumIvoryTower> {, +, + /**, + * Create a new singleton test instance using the given 'getInstance' method, + */, + public EnumIvoryTowerTest() {, + super(() -> EnumIvoryTower.INSTANCE);, + }, +, +}, +++ b/singleton/src/test/java/com/iluwatar/singleton/EnumIvoryTowerTest.java, +package com.iluwatar.singleton;, +, +/**, + * Date: 12/29/15 - 19:20 PM, + *, + * @author Jeroen Meulemeester, + */, +public class EnumIvoryTowerTest extends SingletonTest<EnumIvoryTower> {, +, + /**, + * Create a new singleton test instance using the
[+++ b/caching/etc/caching.png, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, + <position height="-1" width="-1" x="1140" y="405"/> , +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, + <position height="-1" width="-1" x="1140" y="405"/> , +++ b/caching/pom.xml, + to SKIP the running of the JUnit tests for this pattern. To ACTIVATE the running of the tests, change the, + skipTests (below) flag to 'false' and vice-versa., + <skipTests>false</skipTests>, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, + <position height="-1" width="-1" x="1140" y="405"/> , +++ b/caching/pom.xml, + to SKIP the running of the JUnit tests for this pattern. To ACTIVATE the running of the tests, change the, + skipTests (below) flag to 'false' and vice-versa.,
[+++ b/layers/pom.xml, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, +++ b/layers/pom.xml, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +import java.util.List;, +, +import org.springframework.context.support.ClassPathXmlApplicationContext;, +, + ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, + "applicationContext.xml");, + PersonDao dao = context.getBean(PersonDao.class);, +, + Person peter = new Person("Peter", "Sagan");,
[+++ b/faq.md, +++ b/faq.md, +++ /dev/null, +++ b/faq.md, +++ /dev/null, +++ /dev/null, +++ b/faq.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/faq.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/faq.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/faq.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/faq.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/faq.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/faq.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/visitor/src/main/java/com/iluwatar/visitor/App.java, + * <p>, + * In this example there is a unit hierarchy beginning from {@link Commander}., + * This hierarchy is traversed by visitors. {@link SoldierVisitor} applies, + * its operation on {@link Soldier}s, {@link SergeantVisitor} on {@link Sergeant}s and so, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/visitor/src/main/java/com/iluwatar/visitor/App.java, + * <p>, + * In this example there is a unit hierarchy beginning from {@link Commander}., + * This hierarchy is traversed by visitors. {@link SoldierVisitor} applies, + * its operation on {@link Soldier}s, {@link SergeantVisitor}
[+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + return FluentIterable.copyToList(iterable);, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + return FluentIterable.copyToList(iterable);, +++ b/naked-objects/webapp/src/main/java/domainapp/webapp/SimpleApplication.java, + return super.newWebRequest(servletRequest, filterPath);, + return Joiner.on("\n").join(readLines);]
[+++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, + int id = 0;, + public synchronized void serverRequest(Request request) {]
[+++ b/acyclic-visitor/README.md, +---, +layout: pattern, +title: Acyclic Visitor, +folder: acyclic-visitor, +permalink: /patterns/acyclic-visitor/, +categories: Behavioral, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +![alt text](./etc/acyclic-visitor.png "Acyclic Visitor"), +, +## Intent, +Allow new functions to be added to existing class hierarchies without affecting those hierarchies, and without creating the troublesome dependency cycles that are inherent to the GOF VISITOR Pattern., +, +## Applicability, +This pattern can be used:, +* When you need to add a new function to an existing hierarchy without the need to alter or affect that hierarchy., +* When there are functions that operate upon a hierarchy,
[+++ /dev/null, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of
[+++ b/abstract-factory/pom.xml, + <version>1.4.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.4.0</version>, +++ b/adapter/pom.xml, + <version>1.4.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.4.0</version>, +++ b/adapter/pom.xml, + <version>1.4.0</version>, +++ b/bridge/pom.xml, + <version>1.4.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.4.0</version>, +++ b/adapter/pom.xml, + <version>1.4.0</version>, +++ b/bridge/pom.xml, + <version>1.4.0</version>, +++ b/builder/pom.xml, + <version>1.4.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.4.0</version>, +++ b/adapter/pom.xml, + <version>1.4.0</version>, +++ b/bridge/pom.xml, + <version>1.4.0</version>, +++ b/builder/pom.xml, + <version>1.4.0</version>, +++ b/callback/pom.xml, + <version>1.4.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.4.0</version>, +++ b/adapter/pom.xml, + <version>1.4.0</version>, +++ b/bridge/pom.xml, + <version>1.4.0</version>, +++ b/builder/pom.xml, + <version>1.4.0</version>, +++ b/callback/pom.xml, + <version>1.4.0</version>, +++ b/chain/pom.xml, + <version>1.4.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.4.0</version>, +++ b/adapter/pom.xml, + <version>1.4.0</version>, +++ b/bridge/pom.xml, + <version>1.4.0</version>, +++ b/builder/pom.xml, +
[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, + private static <E> void prettyPrint(String prefix, Iterable<E> iterable) {, + private static <E> void prettyPrint(String delimiter, String prefix,, + Iterable<E> iterable) {, + Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, + private static <E> void prettyPrint(String prefix, Iterable<E> iterable) {, + private static <E> void prettyPrint(String delimiter, String prefix,, + Iterable<E> iterable) {, + Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <E> is the class of objects the iterable contains, +public interface FluentIterable<E> extends Iterable<E> {, + FluentIterable<E> filter(Predicate<? super E> predicate);, + Optional<E> first();, + FluentIterable<E> first(int count);, + Optional<E> last();, + FluentIterable<E> last(int
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +import com.iluwatar.abstractfactory.App.FactoryMaker.KingdomType;, +, + * The factory of kingdom factories., + */, + public static class FactoryMaker {, + , + private FactoryMaker() {}, + , + public enum KingdomType {, + ELF,, + ORC, + }, + , + public static KingdomFactory makeFactory(KingdomType type) {, +, + switch (type) {, + case ELF:, + return new ElfKingdomFactory();, + case ORC:, + return new OrcKingdomFactory();, + default:, + throw new IllegalArgumentException("KingdomType not supported.");, + }, + }, + }, + , + /**, + app.createKingdom(FactoryMaker.makeFactory(KingdomType.ELF));, + app.createKingdom(FactoryMaker.makeFactory(KingdomType.ORC));, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +import com.iluwatar.abstractfactory.App.FactoryMaker.KingdomType;, +, + * The factory of
[+++ b/value-object/index.md, +* [java.util.Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), +* [java.time.LocalDate](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html), +++ b/value-object/index.md, +* [java.util.Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), +* [java.time.LocalDate](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html), +++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, + * App Class., + /**, + * main method., + */, + HeroStat statA = HeroStat.valueOf(10, 5, 0);, + HeroStat statB = HeroStat.valueOf(5, 1, 8);, +, + System.out.println(statA.toString());, + // When using Value Objects do not use ==, only compare using equals()., + System.out.println("is statA and statB equal : " + statA.equals(statB));, +++ b/value-object/index.md, +* [java.util.Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), +* [java.time.LocalDate](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html), +++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, + * App Class., + /**, + * main method., + */, + HeroStat statA = HeroStat.valueOf(10, 5, 0);, + HeroStat statB = HeroStat.valueOf(5,
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/monitor-object/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/README.md, +* [Property](#property), +## <a name="property">Property</a> [&#8593;](#list-of-design-patterns), +**Intent:** Create hierarchy of objects and new objects using already existing objects as parents., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/property/etc/property.jpg "Property"), +, +**Applicability:** Use the Property pattern when, +* when you like to have objects with dynamic set of fields and prototype inheritance, +, +**Real world examples:**, +* [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) prototype inheritance, +, +++ b/README.md, +* [Property](#property), +## <a name="property">Property</a> [&#8593;](#list-of-design-patterns), +**Intent:** Create hierarchy of objects and new objects using already existing objects as parents., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/property/etc/property.jpg "Property"), +, +**Applicability:** Use the Property pattern when, +* when you like to have objects with dynamic
[+++ b/command/src/main/java/com/iluwatar/command/App.java, + * The Command pattern is a behavioral design pattern in which an object is used to encapsulate all information , + * needed to perform an action or trigger an event at a later time. This information includes the method name, , + * the object that owns the method and values for the method parameters.]
[+++ b/.gitignore, +/bin/, +/bin/, +/bin/, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java, +package com.iluwatar.featuretoggle.pattern.tieredversion;, +, +import com.iluwatar.featuretoggle.pattern.Service;, +import com.iluwatar.featuretoggle.user.User;, +import com.iluwatar.featuretoggle.user.UserGroup;, +import org.junit.Before;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class TieredFeatureToggleVersionTest {, +, + final User paidUser = new User("Jamie Coder");, + final User freeUser = new User("Alan Defect");, + final Service service = new TieredFeatureToggleVersion();, +, + @Before, + public void setUp() throws Exception {, + UserGroup.addUserToPaidGroup(paidUser);, + UserGroup.addUserToFreeGroup(freeUser);, + }, +, + @Test, + public void testGetWelcomeMessageForPaidUser() throws Exception {, + final String welcomeMessage = service.getWelcomeMessage(paidUser);, + final String expected = "You're amazing Jamie Coder.
[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/README.md, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/README.md, +++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory,
[+++ b/.gitignore, +.idea
[+++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +layout: pattern, +title: Event Driven Architecture, +folder: event-driven-architecture, +permalink: /patterns/event-driven-architecture, +, +, +**Intent:** Send and notify state changes of your objects to other applications using an Event-driven Architecture., +, +![alt text](./etc/class_diagram.png "Event Driven Architecture"), +, +**Applicability:** Use an Event-driven architecture when, +, +* you want to create a loosely coupled system, +* you want to build a more responsive system, +* you want a system that is easier to extend, +, +**Real world examples:**, +, +* SendGrid, an email API, sends events whenever an email is processed, delivered, opened etc... (https://sendgrid.com/docs/API_Reference/Webhooks/event.html), +* Chargify,
[+++ b/pom.xml]
[+++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/abstract-factory/index.md, +## Also known as, +Kit, +## Intent, +Provide an interface for creating families of related or dependent, +## Applicability, +Use the Abstract Factory pattern when, +## Real world examples, +## Credits, +++ b/abstract-factory/index.md, +## Also known as, +Kit, +## Intent, +Provide an interface for creating families of related or dependent, +## Applicability, +Use the Abstract Factory pattern when, +## Real world examples, +## Credits, +++ b/adapter/index.md, +## Also known as, +Wrapper, +## Intent, +Convert the interface of a class into another interface the clients, +## Applicability, +Use the Adapter pattern when, +## Real world examples, +## Credits,
[+++ b/delegation/pom.xml, +++ b/delegation/pom.xml, +++ /dev/null, +++ b/delegation/pom.xml, +++ /dev/null, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, + PrinterController hpPrinterController = new PrinterController(new HpPrinter());, + PrinterController canonPrinterController = new PrinterController(new CanonPrinter());, + PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());, +++ b/delegation/pom.xml, +++ /dev/null, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, + PrinterController hpPrinterController = new PrinterController(new HpPrinter());, + PrinterController canonPrinterController = new PrinterController(new CanonPrinter());, + PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +++ b/delegation/pom.xml, +++ /dev/null, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, + PrinterController hpPrinterController = new PrinterController(new HpPrinter());, + PrinterController canonPrinterController = new PrinterController(new CanonPrinter());, + PrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java, +public class PrinterController implements Printer {,
[+++ b/abstract-document/pom.xml, + <version>1.16.0</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0</version>, +++ b/adapter/pom.xml, + <version>1.16.0</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0</version>, +++ b/adapter/pom.xml, + <version>1.16.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.16.0</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0</version>, +++ b/adapter/pom.xml, + <version>1.16.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.16.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.16.0</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0</version>, +++ b/adapter/pom.xml, + <version>1.16.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.16.0</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.16.0</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.16.0</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0</version>, +++ b/adapter/pom.xml, + <version>1.16.0</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/bridge/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/bridge/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/bridge/src/test/java/com/iluwatar/bridge/BlindingMagicWeaponTest.java, +package com.iluwatar.bridge;, +, +import org.junit.Test;, +, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.internal.verification.VerificationModeFactory.times;, +, +/**, + * Date: 12/6/15 - 11:15 PM, + *, + * @author Jeroen Meulemeester, + */, +public class BlindingMagicWeaponTest extends MagicWeaponTest {, +, + /**, + * Invoke all possible actions on the weapon and check if the actions are executed on the actual, + * underlying weapon implementation., + */, + @Test, + public void testExcalibur()
[+++ b/pom.xml]
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java, + System.out.println("Author username : " + nullAuthor);, + System.out.println("Author eEvans : " + eEvans);, + System.out.println("jBloch number of books : " + jBlochBooksCount);, + System.out.println("Number of authors : " + authorsCount);, + System.out.println("DDD book : " + dddBook);, + System.out.println("jBloch books : " + jBlochBooks);, +, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java, + System.out.println("Author username : " + nullAuthor);, + System.out.println("Author eEvans : " + eEvans);, + System.out.println("jBloch number of books : " + jBlochBooksCount);, + System.out.println("Number of authors : " + authorsCount);, + System.out.println("DDD book : " + dddBook);, + System.out.println("jBloch books : " + jBlochBooks);, +, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java, +
[+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java, +++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java, +++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java, +++ b/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java]
[+++ b/acyclic-visitor/README.md, +---, +layout: pattern, +title: Acyclic Visitor, +folder: acyclic-visitor, +permalink: /patterns/acyclic-visitor/, +categories: Behavioral, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +![alt text](./etc/acyclic-visitor.png "Acyclic Visitor"), +, +## Intent, +Allow new functions to be added to existing class hierarchies without affecting those hierarchies, and without creating the troublesome dependency cycles that are inherent to the GOF VISITOR Pattern., +, +## Applicability, +This pattern can be used:, +* When you need to add a new function to an existing hierarchy without the need to alter or affect that hierarchy., +* When there are functions that operate upon a hierarchy,
[+++ b/pom.xml, + <hibernate.version>5.0.0.Final</hibernate.version>, + <spring-data.version>1.8.2.RELEASE</spring-data.version>, + <h2.version>1.4.188</h2.version>]
[+++ b/README.md, +* [Poison Pill](#poison-pill), +## <a name="poison-pill">Poison Pill</a> [&#8593;](#list-of-design-patterns), +**Intent:** Poison Pill is known predefined data item that allows to provide graceful shutdown for separate distributed consumption process., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/poison-pill/etc/poison-pill.png "Poison Pill"), +, +**Applicability:** Use the Poison Pill idiom when, +* need to send signal from one thread/process to another to terminate, +++ b/README.md, +* [Poison Pill](#poison-pill), +## <a name="poison-pill">Poison Pill</a> [&#8593;](#list-of-design-patterns), +**Intent:** Poison Pill is known predefined data item that allows to provide graceful shutdown for separate distributed consumption process., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/poison-pill/etc/poison-pill.png "Poison Pill"), +, +**Applicability:** Use the Poison Pill idiom when, +* need to
[+++ b/data-bus/pom.xml, + <packaging>pom</packaging>, + <modules>, + <module>../data-transfer-object</module>, + </modules>, +++ b/data-bus/pom.xml, + <packaging>pom</packaging>, + <modules>, + <module>../data-transfer-object</module>, + </modules>, +++ b/data-transfer-object/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>data-bus</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.17.0-SNAPSHOT</version>, + <relativePath>../data-bus/pom.xml</relativePath>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>data-transfer-object</artifactId>, +, +, +</project>, +++ b/data-bus/pom.xml, + <packaging>pom</packaging>, + <modules>, + <module>../data-transfer-object</module>, + </modules>, +++ b/data-transfer-object/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <parent>, + <artifactId>data-bus</artifactId>, + <groupId>com.iluwatar</groupId>, + <version>1.17.0-SNAPSHOT</version>, + <relativePath>../data-bus/pom.xml</relativePath>, + </parent>, + <modelVersion>4.0.0</modelVersion>, +, + <artifactId>data-transfer-object</artifactId>, +, +, +</project>, +++ /dev/null, +++ b/data-bus/pom.xml, +
[+++ b/pom.xml, + <module>value-object</module>, +++ b/pom.xml, + <module>value-object</module>, +++ b/value-object/pom.xml, + <version>1.11.0-SNAPSHOT</version>]
[+++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/command/etc/command.png "Command"), +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/command/etc/command.png "Command"), +++ b/command/etc/command.png, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/command/etc/command.png "Command"), +++ b/command/etc/command.png, +++ b/command/etc/command.ucls, + <position height="178" width="141" x="-30" y="681"/> , + <position height="-1" width="-1" x="129" y="1223"/> , + <position height="-1" width="-1" x="129" y="362"/> , + <position height="-1" width="-1" x="129" y="561"/> , + <position height="160" width="141" x="151" y="681"/> , + <class id="6" language="java" name="com.iluwatar.command.Target" project="command" , + <position height="-1" width="-1" x="129" y="1014"/> , + <association id="7"> , + <end type="SOURCE" refId="3" navigable="false"> , + <attribute id="8" name="redoStack"> , + <position height="20" width="67" x="140" y="451"/> , + </attribute> , + <multiplicity id="9" minimum="0"
[+++ b/README.md, +## <a name="abstract-factory">Abstract Factory</a> [&#8593;](#list-of-design-patterns), +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./abstract-factory/etc/abstract-factory_1.png "Abstract Factory"), +, +**Applicability:** Use the Abstract Factory pattern when, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family of related product objects is designed to be used together, and you need to enforce this constraint, +* you want to provide a class library of products, and you want to
[+++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + Troll clubbed = new ClubbedTroll(troll);, + clubbed.attack();, + clubbed.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", clubbed.getAttackPower());, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you!
[+++ b/README.md, +##Abstract Factory, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/abstract-factory/etc/abstract-factory.jpg "Abstract Factory"), +##Builder, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/builder/etc/builder.jpg "Builder"), +##Factory Method, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/factory-method/etc/factory-method.jpg "Factory Method"), +##Prototype, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/prototype/etc/prototype.jpg "Prototype"), +##Singleton, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/singleton/etc/singleton.jpg "Singleton"), +* the must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +##Adapter, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/adapter/etc/adapter.jpg "Adapter"), +##Bridge, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/bridge/etc/bridge.jpg "Bridge"), +##Composite, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/composite/etc/composite.jpg "Composite"), +##Decorator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/decorator/etc/decorator.jpg "Decorator"), +##Facade, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/facade/etc/facade.jpg "Facade"), +##Flyweight, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/flyweight/etc/flyweight.jpg "Flyweight"), +##Proxy, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/proxy/etc/proxy.jpg "Proxy"), +##Chain of responsibility, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/chain/etc/chain.jpg "Chain of Responsibility"), +##Command, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/command/etc/command.jpg "Command"), +##Interpreter, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/interpreter/etc/interpreter.jpg "Interpreter"), +##Iterator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/iterator/etc/iterator.jpg "Iterator"), +##Mediator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/mediator/etc/mediator.jpg
[+++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/Dispatcher.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/Dispatcher.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/Dispatcher.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/Dispatcher.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java, +++
[+++ b/half-sync-half-async/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/half-sync-half-async/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java, + return;, +++ b/half-sync-half-async/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java, + return;, +++ b/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java, +package com.iluwatar.halfsynchalfasync;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import java.io.IOException;, +import java.util.concurrent.LinkedBlockingQueue;, +, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.doThrow;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.timeout;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.when;, +, +/**, + * Date: 12/12/15 - 11:15 PM, + *, + *
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasParts {, + + PROPERTY : String {static}, + + getParts() : Stream<Part>, + }, + interface HasType {, + + PROPERTY : String {static}, + + getType() : Optional<String>, + }, + interface HasPrice {, + + PROPERTY : String {static}, + + getPrice() : Optional<Number>, + }, + interface Document {, + + children(String, Function<Map<String, Object>, T>) : Stream<T> {abstract}, + + get(String) : Object {abstract}, + + put(String, Object) {abstract}, + class App {, + + App(), + + main(args : String[]) {static}, +HasParts --|> Document , +AbstractDocument ..|> Document , +HasType
[+++ b/README.md, +* [Poison Pill](#poison-pill), +## <a name="poison-pill">Poison Pill</a> [&#8593;](#list-of-design-patterns), +**Intent:** Poison Pill is known predefined data item that allows to provide graceful shutdown for separate distributed consumption process., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/poison-pill/etc/poison-pill.png "Poison Pill"), +, +**Applicability:** Use the Poison Pill idiom when, +* need to send signal from one thread/process to another to terminate, +++ b/README.md, +* [Poison Pill](#poison-pill), +## <a name="poison-pill">Poison Pill</a> [&#8593;](#list-of-design-patterns), +**Intent:** Poison Pill is known predefined data item that allows to provide graceful shutdown for separate distributed consumption process., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/poison-pill/etc/poison-pill.png "Poison Pill"), +, +**Applicability:** Use the Poison Pill idiom when, +* need to
[+++ b/abstract-factory/pom.xml, + <version>1.0.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.0.0</version>, +++ b/adapter/pom.xml, + <version>1.0.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.0.0</version>, +++ b/adapter/pom.xml, + <version>1.0.0</version>, +++ b/bridge/pom.xml, + <version>1.0.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.0.0</version>, +++ b/adapter/pom.xml, + <version>1.0.0</version>, +++ b/bridge/pom.xml, + <version>1.0.0</version>, +++ b/builder/pom.xml, + <version>1.0.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.0.0</version>, +++ b/adapter/pom.xml, + <version>1.0.0</version>, +++ b/bridge/pom.xml, + <version>1.0.0</version>, +++ b/builder/pom.xml, + <version>1.0.0</version>, +++ b/callback/pom.xml, + <version>1.0.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.0.0</version>, +++ b/adapter/pom.xml, + <version>1.0.0</version>, +++ b/bridge/pom.xml, + <version>1.0.0</version>, +++ b/builder/pom.xml, + <version>1.0.0</version>, +++ b/callback/pom.xml, + <version>1.0.0</version>, +++ b/chain/pom.xml, + <version>1.0.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.0.0</version>, +++ b/adapter/pom.xml, + <version>1.0.0</version>, +++ b/bridge/pom.xml, + <version>1.0.0</version>, +++ b/builder/pom.xml, +
[+++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsyncTask.java, +package com.iluwatar.halfsynchalfasync;, +, +import java.util.concurrent.Callable;, +, +/**, + * Represents some computation that is performed asynchronously. The computation is typically, + * done is background threads and the result is posted back in form of callback., + * , + * @param <O> type of result, + */, +public interface AsyncTask<O> extends Callable<O> {, + /**, + * Is called in context of caller thread before call to {@link #call()}. , + * Validations can be performed here so that the performance penalty of context, + * switching is not incurred., + */, + void preExecute();, +
[+++ b/abstract-factory/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/producer-consumer/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/producer-consumer/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ConsumerTest.java, +package com.iluwatar.producer.consumer;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.reset;, +import static org.mockito.Mockito.spy;, +, +/**, + * Date: 12/27/15 - 11:01 PM, + *, + * @author Jeroen Meulemeester, + */, +public class ConsumerTest extends StdOutTest {, +, + private static final int ITEM_COUNT = 5;, +, + @Test, + public void testConsume() throws Exception {, + final ItemQueue queue = spy(new ItemQueue());, + for (int id = 0;
[+++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, + */, +++ b/adapter/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.16.0-SNAPSHOT</version>, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +/**, + * Test for abstract factory, +
[+++ b/marker/.gitignore, +/target/, +++ b/marker/.gitignore, +/target/, +++ b/marker/README.md, +---, +layout: pattern, +title: Marker Interface, +folder: marker, +permalink: /patterns/marker/, +categories: Design, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +Using empty interfaces as markers to distinguish special treated objects., +, +![alt text](./etc/MarkerDiagram.png "Marker Interface"), +, +## Applicability, +Use the Marker Interface pattern when, +, +* you want to identify the special objects from normal objects (to treat them differently), +* you want to mark that some object is available for certain sort of operations, +, +## Real world examples, +, +* [javase.8.docs.api.java.io.Serializable](https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html), +* [javase.8.docs.api.java.lang.Cloneable](https://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html), +, +## Credits,
[+++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns), +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +# Introduction, +# Getting started, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/). , +, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +, + - Using difficulty tags, `Difficulty-Beginner`, `Difficulty-Intermediate` & `Difficulty-Expert`.,
[+++ b/api-gateway/api-gateway-service/pom.xml, +++ b/api-gateway/api-gateway-service/pom.xml, +++ b/api-gateway/image-microservice/pom.xml, +++ b/api-gateway/api-gateway-service/pom.xml, +++ b/api-gateway/image-microservice/pom.xml, +++ b/api-gateway/price-microservice/pom.xml, +++ b/api-gateway/api-gateway-service/pom.xml, +++ b/api-gateway/image-microservice/pom.xml, +++ b/api-gateway/price-microservice/pom.xml, +++ b/pom.xml, + <spring-boot.version>1.3.3.RELEASE</spring-boot.version>, + <apache-httpcomponents.version>4.5.2</apache-httpcomponents.version>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-dependencies</artifactId>, + <version>${spring-boot.version}</version>, + <type>pom</type>, + <scope>import</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-webmvc</artifactId>, + <version>${spring.version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-web</artifactId>, + <version>${spring-boot.version}</version>, + </dependency>, + <dependency>, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + <version>${apache-httpcomponents.version}</version>, + </dependency>, + <dependency>]
[+++ b/pom.xml, + <module>eip-splitter</module>]
[+++ b/tls/src/test/java/com/iluwatar/tls/DateFormatCallableTest.java, +/**, + * The MIT License, + * Copyright (c) 2016 Thomas Bauer, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/README.md, +## Introduction, +, +Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system., +, +Design patterns can speed up the development process by providing tested, proven development paradigms., +, +Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns., +, +* [Property](#property), +* [Execute Around](#execute-around), +<<<<<<< HEAD, +=======, +**Real world examples:**, +* [CyclicBarrier] (http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CyclicBarrier.html#CyclicBarrier%28int,%20java.lang.Runnable%29) constructor can accept callback that will be triggered every time when barrier is
[+++ b/dao/src/main/java/com/iluwatar/dao/App.java, + statement.execute(CustomerSchemaSql.DELETE_SCHEMA_SQL);, + statement.execute(CustomerSchemaSql.CREATE_SCHEMA_SQL);, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + statement.execute(CustomerSchemaSql.DELETE_SCHEMA_SQL);, + statement.execute(CustomerSchemaSql.CREATE_SCHEMA_SQL);, +++ b/dao/src/main/java/com/iluwatar/dao/CustomerDao.java, +import java.util.Optional;, + * @return an optional with customer if a customer with unique identifier <code>id</code>, + * exists, empty optional otherwise., + Optional<Customer> getById(int id) throws Exception;, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + statement.execute(CustomerSchemaSql.DELETE_SCHEMA_SQL);, + statement.execute(CustomerSchemaSql.CREATE_SCHEMA_SQL);, +++ b/dao/src/main/java/com/iluwatar/dao/CustomerDao.java, +import java.util.Optional;, + * @return an optional with customer if a customer with unique identifier <code>id</code>, + * exists, empty optional otherwise., + Optional<Customer> getById(int id) throws Exception;, +++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java, +package com.iluwatar.dao;, +, +public interface CustomerSchemaSql {, +, + String CREATE_SCHEMA_SQL = "CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100),
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordVarys.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordVarys.java, +++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/Scout.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++
[+++ b/intercepting-filter/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/intercepting-filter/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/NameFilter.java, + return result + "Invalid name! ";, +++ b/intercepting-filter/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/NameFilter.java, + return result + "Invalid name! ";, +++ b/intercepting-filter/src/test/java/com/iluwatar/intercepting/filter/FilterManagerTest.java, +package com.iluwatar.intercepting.filter;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyZeroInteractions;, +import static org.mockito.Mockito.when;, +, +/**, + * Date: 12/13/15 - 3:01 PM, + *, + * @author Jeroen Meulemeester,
[+++ b/flyweight/src/main/java/com/iluwatar/flyweight/App.java, + * <p>, + * In this example {@link AlchemistShop} has great amount of potions on its shelves., + * To fill the shelves {@link AlchemistShop} uses {@link PotionFactory} (which represents, + * the Flyweight in this example). Internally {@link PotionFactory} holds a map, + * <p>, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/flyweight/src/main/java/com/iluwatar/flyweight/App.java, + * <p>, + * In this example {@link AlchemistShop} has great amount of potions on its shelves., + * To fill the shelves {@link AlchemistShop} uses {@link PotionFactory} (which represents, +
[+++ b/pom.xml, + <module>resource-acquisition-is-initialization</module>, +++ b/pom.xml, + <module>resource-acquisition-is-initialization</module>, +++ b/resource-acquisition-is-initialization/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>resource-acquisition-is-initialization</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>resource-acquisition-is-initialization</module>, +++ b/resource-acquisition-is-initialization/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>resource-acquisition-is-initialization</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {,
[+++ b/abstract-document/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.19.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/.travis.yml, +sudo: false, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented,
[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java, +import com.iluwatar.fluentinterface.fluentiterable.lazy.LazyFluentIterable;, +import com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable;, +import java.util.*;, +import static java.lang.String.valueOf;, +, + List<Integer> firstFiveNegatives = SimpleFluentIterable.from(integerList), + List<Integer> lastTwoPositives = SimpleFluentIterable.from(integerList), + SimpleFluentIterable.from(integerList), + List<String> transformedList = SimpleFluentIterable.from(integerList), +, + List<String> lastTwoOfFirstFourStringMapped = LazyFluentIterable.from(integerList), + .filter(positives()), + .first(4), + .last(2), + .map(number -> "String[" + String.valueOf(number) + "]"), + .asList();, + prettyPrint("The lazy list contains the last two of the first four positive numbers mapped to Strings: ", lastTwoOfFirstFourStringMapped);, +, + LazyFluentIterable.from(integerList), + .filter(negatives()), + .first(2), + .last(), + .ifPresent(lastOfFirstTwo -> System.out.println(String.format("The last of the first two negatives is: %d", lastOfFirstTwo)));, + return integer -> "String[" + valueOf(integer)
[+++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/pom.xml, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/pom.xml, +++ /dev/null, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + Converter<UserDto, User> userConverter = new UserConverter();, +++ b/pom.xml, +++ /dev/null, +++ /dev/null,
[+++ b/hexagonal/etc/hexagonal.ucls, + <class id="1" language="java" name="com.iluwatar.hexagonal.eventlog.StdOutEventLog" project="hexagonal", + <interface id="17" language="java" name="com.iluwatar.hexagonal.eventlog.LotteryEventLog", +++ b/hexagonal/etc/hexagonal.ucls, + <class id="1" language="java" name="com.iluwatar.hexagonal.eventlog.StdOutEventLog" project="hexagonal", + <interface id="17" language="java" name="com.iluwatar.hexagonal.eventlog.LotteryEventLog", +++ b/hexagonal/etc/hexagonal.urm.puml, +package com.iluwatar.hexagonal.eventlog {, +++ b/hexagonal/etc/hexagonal.ucls, + <class id="1" language="java" name="com.iluwatar.hexagonal.eventlog.StdOutEventLog" project="hexagonal", + <interface id="17" language="java" name="com.iluwatar.hexagonal.eventlog.LotteryEventLog", +++ b/hexagonal/etc/hexagonal.urm.puml, +package com.iluwatar.hexagonal.eventlog {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + * eventlog as lottery events occur and {@link LotteryTicketRepository}, +++ b/hexagonal/etc/hexagonal.ucls, + <class id="1" language="java" name="com.iluwatar.hexagonal.eventlog.StdOutEventLog" project="hexagonal", + <interface id="17" language="java" name="com.iluwatar.hexagonal.eventlog.LotteryEventLog", +++ b/hexagonal/etc/hexagonal.urm.puml, +package com.iluwatar.hexagonal.eventlog {, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + * eventlog as lottery events occur and {@link LotteryTicketRepository}, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, +import com.iluwatar.hexagonal.eventlog.LotteryEventLog;, + private final LotteryEventLog
[+++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {, + // Do nothing, + }, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {, + // Do nothing, + }, +++ b/pom.xml, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {, + // Do nothing, + }, +++ b/pom.xml, +++ /dev/null, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {, + // Do nothing, + }, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {, + // Do nothing, + }, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java, + public void walk() {, + // Do nothing, + }, +++
[+++ b/execute-around/src/test/java/com/iluwatar/execute/around/SimpleFileWriterTest.java, +package com.iluwatar.execute.around;, +, +import org.junit.Assert;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import java.io.File;, +import java.io.IOException;, +import java.nio.file.Files;, +, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +/**, + * Date: 12/12/15 - 3:21 PM, + *, + * @author Jeroen Meulemeester, + */, +public class SimpleFileWriterTest {, +, + /**, + * Create a temporary folder, used to generate files in during this test, + */, + @Rule, + public final TemporaryFolder testFolder = new TemporaryFolder();, +, + /**, + * Verify if the given writer is not 'null', + */, + @Test, +
[+++ b/README.md, +* there must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant.jpg "Servant"), +++ b/README.md, +* there must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant.jpg "Servant"), +++ /dev/null, +++ b/README.md, +* there must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/servant/etc/servant.jpg "Servant"), +++ /dev/null, +++ /dev/null, +++ b/README.md, +* there must be exactly one instance of a class,
[+++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns)., +++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns)., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that have a common theme, + * without specifying their concrete classes. In normal usage,
[+++ b/data-transfer-object/etc/data-transfer-object.urm.png, +++ b/data-transfer-object/etc/data-transfer-object.urm.png, +++ b/data-transfer-object/etc/data-transfer-object.urm.puml, + class CustomerClientApp {, + + CustomerClientApp(), + + main(args : String[]) {static}, + - printCustomerDetails(allCustomers : List<CustomerDto>) {static}, + }, +++ b/data-transfer-object/etc/data-transfer-object.urm.png, +++ b/data-transfer-object/etc/data-transfer-object.urm.puml, + class CustomerClientApp {, + + CustomerClientApp(), + + main(args : String[]) {static}, + - printCustomerDetails(allCustomers : List<CustomerDto>) {static}, + }, +++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2017 Gopinath Langote, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to
[+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + expectedWeaponType, expectedWeaponType,, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, + assertEquals("Weapon must be of weaponType: " + expectedWeaponType, expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, + private final P testedPrototype;, + public PrototypeTest(final P testedPrototype, final String expectedToString) {]
[+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public final class Hero {, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public final class Hero {, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +public final class AppManager {, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public final class Hero {, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +public final class AppManager {, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +public final class DbManager {, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public final class Hero {, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +public final class AppManager {, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +public final class DbManager {, +++ b/command/index.md, +* [Netflix Hystrix](https://github.com/Netflix/Hystrix/wiki), +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public final class Hero {, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, +public final class AppManager {, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +public final class DbManager {, +++ b/command/index.md, +* [Netflix Hystrix](https://github.com/Netflix/Hystrix/wiki), +++ b/flux/src/main/java/com/iluwatar/flux/dispatcher/Dispatcher.java, +public final class
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/design_pattern_relationships.gif]
[+++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create a new set of test entries with the expected result, + *, + * @return The list of parameters used during this test, + */, + public abstract Stream<Arguments> expressionProvider();, +, + /**, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create a new set of test entries with the expected result, + *, + * @return The list of parameters used during this test, + */, + public abstract Stream<Arguments> expressionProvider();, +, + /**, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, + @Override, + public Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create
[+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ b/property/src/main/java/com/iluwatar/property/Character.java, + builder.append("Player: ").append(name).append('\n');, + builder.append("Character type: ").append(type.name()).append('\n');, + builder.append(" - ").append(stat.name()).append(':').append(value).append('\n');, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, + sb.append(hairColor).append(' ');, + sb.append(hairType).append(' ');, + sb.append('.');, +++ b/property/src/main/java/com/iluwatar/property/Character.java, + builder.append("Player: ").append(name).append('\n');, + builder.append("Character type: ").append(type.name()).append('\n');, + builder.append(" - ").append(stat.name()).append(':').append(value).append('\n');, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java, + .append('.');]
[+++ b/.travis.yml, + - secure: LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=, +- export DISPLAY=:99.0, +- sh -e /etc/init.d/xvfb start, +, +deploy:, + provider: s3, + access_key_id: AKIAJVPJZO7743HVSDHA, + secret_access_key:, + secure: aYaEhSd6/8SV/gvsn/22iOoyWrQtjKX7VHUoNTX16Mw6flYy29BE+/ZOL1CTL5EXEZsC1zyqCi7RoM6QUXk9DYVg4Lc5yTIwaM0evd3obzPeGQVCR9JRAqM9KGKwyW19oEkNxwEE/pKNDLCfkctMZ4bcwDhkIdsMSAVzKDzq+Yw=, + bucket: java-design-patterns, + local-dir: _site, + acl: public_read_write, + on:, + repo: iluwatar/java-design-patterns, + branch: gh-pages]
[+++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for
[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br>, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java, + * <br>, +++ b/data-bus/src/main/java/com/iluwatar/databus/App.java, + * @see <a href="http://wiki.c2.com/?DataBusPattern">http://wiki.c2.com/?DataBusPattern</a>, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, + * <p>, + * <i>{@literal App --> AppManager --> CacheStore/LRUCache/CachingPolicy --> DBManager} </i>, + * @see LruCache, +++ b/dao/src/main/java/com/iluwatar/dao/InMemoryCustomerDao.java,
[+++ b/abstract-factory/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/business-delegate/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.10.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, +
[+++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, + LOGGER.info("Constructing parts and car");, + LOGGER.info("Here is our car:");, + LOGGER.info("-> model: {}", car.getModel().get());, + LOGGER.info("-> price: {}", car.getPrice().get());, + LOGGER.info("-> parts: ");, + car.getParts().forEach(p -> LOGGER.info("\t{}/{}/{}", p.getType().get(), p.getModel().get(), p.getPrice().get()));, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, + private static
[+++ b/tls/pom.xml, +<?xml version="1.0"?>
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import com.iluwatar.hexagonal.module.LotteryTestingModule;, +import com.iluwatar.hexagonal.sampledata.SampleData;, + Injector injector = Guice.createInjector(new LotteryTestingModule());, + SampleData.submitTickets(service, 20);, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import com.iluwatar.hexagonal.module.LotteryTestingModule;, +import com.iluwatar.hexagonal.sampledata.SampleData;, + Injector injector = Guice.createInjector(new LotteryTestingModule());, + SampleData.submitTickets(service, 20);, +++ /dev/null, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, +import com.iluwatar.hexagonal.module.LotteryTestingModule;, +import com.iluwatar.hexagonal.sampledata.SampleData;, + Injector injector = Guice.createInjector(new LotteryTestingModule());, + SampleData.submitTickets(service, 20);, +++ /dev/null, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software
[+++ b/pom.xml, + <module>event-asynchronous</module>]
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ /dev/null, +++ b/retry/src/main/java/com/iluwatar/retry/Retry.java, + }, + while (true);]
[+++ b/event-driven-architecture/pom.xml, +, +++ b/event-driven-architecture/pom.xml, +, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/App.java, +import com.iluwatar.eda.model.User;, + * example below uses an {@link EventDispatcher} to link/register {@link Event} objects to their, + * respective handlers once an {@link Event} is dispatched, it's respective handler is invoked and, + * the {@link Event} is handled accordingly., + *, + /**, + * Once the {@link EventDispatcher} is initialised, channels related to specific events have to be, + * made known to the dispatcher by registering them. In this case the {@link UserCreatedEvent} is, + * bound to the UserCreatedEventHandler, whilst the {@link UserUpdatedEvent} is bound to
[+++ b/feature-toggle/etc/feature-toggle.png, +++ b/feature-toggle/etc/feature-toggle.png, +++ b/feature-toggle/etc/feature-toggle.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="true" generalizations="true" , + realizations="true" associations="true" dependencies="true" nesting-relationships="true" router="FAN"> , + <interface id="1" language="java" name="com.iluwatar.featuretoggle.pattern.Service" project="feature-toggle" , + file="/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java" binary="false" , + corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="238" y="187"/> , + <display autosize="true" stereotype="true" package="true" initial-value="true" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </interface> , + <class id="2" language="java" , + name="com.iluwatar.featuretoggle.pattern.propertiesversion.PropertiesFeatureToggleVersion" project="feature-toggle" , + file="/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java" , + binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1"
[+++ b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/mutex/README.md, +---, +layout: pattern, +title: Mutex, +folder: mutex, +permalink: /patterns/mutex/, +categories: Lock, +tags: , + - Java, + - Difficulty-Beginner, +---, +, +## Also known as, +Mutual Exclusion Lock, +Binary Semaphore, +, +## Intent, +Create a lock which only allows a single thread to access a resource at any one instant., +, +![alt text](./etc/mutex.png "Mutex"), +, +## Applicability, +Use a Mutex when, +, +* you need to prevent two threads accessing a critical section at the same time, +* concurrent access to a resource could lead to a race condition , +, +## Credits, +, +* [Lock (computer
[+++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/adapter/etc/adapter.png, +++ b/abstract-factory/pom.xml, + <version>1.8.0-SNAPSHOT</version>, +++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.ucls, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.adapter.FishingBoat" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="656" y="355"/> , + <class id="2" language="java" name="com.iluwatar.adapter.Captain" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/Captain.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="228" y="185"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , +
[+++ b/.travis.yml]
[+++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java, + * Double Checked Locking is a concurrency design pattern used to reduce the overhead , + * of acquiring a lock by first testing the locking criterion (the "lock hint") without , + * actually acquiring the lock. Only if the locking criterion check indicates that , + * locking is required does the actual locking logic proceed., + * <p>]
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + if (cache == null) {, + if (cache != null) {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + if (cache == null) {, + if (cache != null) {, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + if (db == null) {, + if (db == null) {, + if (db == null) {, + if (db == null) {]
[+++ b/data-transfer-object/README.md, +---, +layout: pattern, +title: Data Transfer Object, +folder: data-transfer-object, +permalink: /patterns/data-transfer-object/, +categories: Architectural, +tags:, + - Java, + - KISS, + - YAGNI, + - Difficulty-Beginner, +---, +, +## Intent, +Pass data with multiple attributes in one shot from client to server,, +to avoid multiple calls to remote server. , +, +![alt text](./etc/data-transfer-object.urm.png "data-transfer-object"), +, +## Applicability, +Use the Data Transfer Object pattern when, +, +* The client is asking for multiple information. And the information is related., +* When you want to boost the performance to get resources., +* You want reduced number of remote calls.,
[+++ b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java, +++ b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java, +++ b/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.doNothing;, +import static org.mockito.Mockito.when;, + when(server.getHost()).thenReturn("testhost");, + when(server.getPort()).thenReturn(1234);, + doNothing().when(server).serve(any(Request.class));]
[+++ b/README.md, +Design patterns are formalized best practices that the programmer can use to, +solve common problems when designing an application or system., +Design patterns can speed up the development process by providing tested, proven, +development paradigms., +Reusing design patterns helps to prevent subtle issues that can cause major, +problems, and it also improves code readability for coders and architects who, +are familiar with the patterns., +Creational design patterns abstract the instantiation process. They help make a, +system independent of how its objects are created, composed, and represented., +Structural patterns are concerned with how classes and objects are composed
[+++ b/.travis.yml, + webhooks:, + urls:, + - https://webhooks.gitter.im/e/3319623945358a093a6f, + on_success: change # options: [always|never|change] default: always, + on_failure: always # options: [always|never|change] default: always, + on_start: never # options: [always|never|change] default: always]
[+++ b/abstract-factory/pom.xml, + <version>1.9.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0</version>, +++ b/adapter/pom.xml, + <version>1.9.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0</version>, +++ b/adapter/pom.xml, + <version>1.9.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0</version>, +++ b/adapter/pom.xml, + <version>1.9.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0</version>, +++ b/bridge/pom.xml, + <version>1.9.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0</version>, +++ b/adapter/pom.xml, + <version>1.9.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0</version>, +++ b/bridge/pom.xml, + <version>1.9.0</version>, +++ b/builder/pom.xml, + <version>1.9.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0</version>, +++ b/adapter/pom.xml, + <version>1.9.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0</version>, +++ b/bridge/pom.xml, + <version>1.9.0</version>, +++ b/builder/pom.xml, + <version>1.9.0</version>, +++ b/business-delegate/pom.xml, + <version>1.9.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0</version>, +++ b/adapter/pom.xml, + <version>1.9.0</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0</version>, +++ b/bridge/pom.xml, +
[+++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, + verify(enchantment, times(1)).apply();, + verify(enchantment, times(1)).onActivate();, + verify(enchantment, times(1)).onDeactivate();, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, + verify(enchantment, times(1)).apply();, + verify(enchantment, times(1)).onActivate();, + verify(enchantment, times(1)).onDeactivate();, +++ b/pom.xml, + <module>unit-of-work</module>, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, + verify(enchantment, times(1)).apply();, + verify(enchantment, times(1)).onActivate();, + verify(enchantment, times(1)).onDeactivate();, +++ b/pom.xml, + <module>unit-of-work</module>, +++ b/unit-of-work/README.md, +---, +layout: pattern, +title: Unit Of Work, +folder: unit-of-work, +permalink: /patterns/unit-of-work/, +, +categories: Architectural, +tags:, + - Java, + - KISS, + - YAGNI, + - Difficulty-Beginner, +---, +, +## Intent, +When a business transaction is completed all the these updates are sent as one , + big unit of work to be persisted in a
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.List;, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.List;, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +import java.util.Map;, + private static Map<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.List;, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +import java.util.Map;, + private static Map<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, +import java.util.List;, +import java.util.Map;, + Map<String, Node> cache = new HashMap<>();, + public List<UserAccount> getCacheDataInListForm() {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.List;, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +import java.util.Map;, +
[+++ b/iterator/src/main/java/com/iluwatar/iterator/App.java, + * The Iterator pattern is a design pattern in which an iterator is used to , + * traverse a container and access the container's elements. The Iterator pattern , + * decouples algorithms from containers., + * <p>, + * In this example the Iterator ({@link ItemIterator}) adds abstraction layer on , + * top of a collection ({@link TreasureChest}). This way the collection can change , + * its internal implementation without affecting its clients.]
[+++ b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java, + * <p>, + * <p>, + * <p>, +++ b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java, + * <p>, + * <p>, + * <p>, +++ b/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java]
[+++ b/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/mute-idiom/etc/mute-idiom.png, +++ b/mute-idiom/etc/mute-idiom.png, +++ b/mute-idiom/etc/mute-idiom.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="true" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.mute.App" project="mute-idiom" , + file="/mute-idiom/src/main/java/com/iluwatar/mute/App.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="519" y="122"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="false" static="true"/> , + <operations public="true" package="true" protected="true" private="false" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.mute.Mute" project="mute-idiom" , + file="/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="115" width="203" x="291" y="267"/> , + <display autosize="false" stereotype="true"
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java, + * Hexagonal Architecture pattern decouples the application core from the, + * services it uses. This allows the services to be plugged in and the , + * application will run with or without the services.<p>, + * , + * The core logic, or business logic, of an application consists of the , + * algorithms that are essential to its purpose. They implement the use , + * cases that are the heart of the application. When you change them, you , + * change the essence of the application.<p>, + * , +
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/command/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/command/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ /dev/null, +++ b/command/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ /dev/null, +++ b/command/src/test/java/com/iluwatar/command/CommandTest.java, +package com.iluwatar.command;, +, +import static org.junit.Assert.assertEquals;, +, +import org.junit.Test;, +, +/**, + * The Command pattern is a behavioral design pattern in which an object is used to encapsulate all, + * information needed to perform an action or trigger an event at a later time. This information, + * includes the method name, the object that
[+++ b/abstract-factory/README.md, +* [javax.xml.transform.TransformerFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--), +* [javax.xml.xpath.XPathFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--), +++ b/abstract-factory/README.md, +* [javax.xml.transform.TransformerFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--), +* [javax.xml.xpath.XPathFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--), +++ b/adapter/README.md, +* [java.util.Collections#list()](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-), +* [java.util.Collections#enumeration()](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-), +* [javax.xml.bind.annotation.adapters.XMLAdapter](http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-), +, +++ b/abstract-factory/README.md, +* [javax.xml.transform.TransformerFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--), +* [javax.xml.xpath.XPathFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--), +++ b/adapter/README.md, +* [java.util.Collections#list()](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-), +* [java.util.Collections#enumeration()](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-), +* [javax.xml.bind.annotation.adapters.XMLAdapter](http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-), +, +++ b/builder/README.md, +* [java.nio.ByteBuffer](http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-) as well as similar buffers such as FloatBuffer, IntBuffer and so on., +* [java.lang.StringBuffer](http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-), +* All implementations of [java.lang.Appendable](http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html), +++ b/abstract-factory/README.md, +* [javax.xml.transform.TransformerFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--), +* [javax.xml.xpath.XPathFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--), +++ b/adapter/README.md, +* [java.util.Collections#list()](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-), +* [java.util.Collections#enumeration()](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-), +* [javax.xml.bind.annotation.adapters.XMLAdapter](http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-), +, +++ b/builder/README.md, +* [java.nio.ByteBuffer](http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-) as well as similar buffers such as FloatBuffer, IntBuffer and so on., +* [java.lang.StringBuffer](http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-), +* All implementations of [java.lang.Appendable](http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html), +++ b/chain/README.md,
[+++ b/README.md, +![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, +#### Browse and view all of the patterns on our Website: [iluwatar.github.io/java-design-patterns/](https://iluwatar.github.io/java-design-patterns/), +, + - <a href="#how-to-contribute">How to contribute</a>, + - <a href="#versioning">Versioning</a>, +## <a name="introduction">Introduction</a>, +, +# <a name="how-to-contribute">How to contribute</a> [&#8593;](#top), +, +**To work on a new pattern** you need to do the following steps:, +, +1. If there is no issue for the new pattern yet, raise new issue. Comment on, + the issue that you are working on it so that others don't start work on the, + same thing., +2. Fork the repository., +3. Create a
[+++ b/message-channel/pom.xml]
[+++ b/bridge/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>bridge</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>bridge</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/bridge/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>bridge</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>bridge</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/tls/src/test/java/com/iluwatar/tls/AppTest.java, +/**, + * The MIT License, + * Copyright (c) 2016 Thomas Bauer, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns), +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +# Introduction, +# Getting started, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/). , +, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +, + - Using difficulty tags, `Difficulty-Beginner`, `Difficulty-Intermediate` & `Difficulty-Expert`.,
[+++ b/naked-objects/dom/pom.xml, +<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor , + license agreements. See the NOTICE file distributed with this work for additional , + information regarding copyright ownership. The ASF licenses this file to , + you under the Apache License, Version 2.0 (the "License"); you may not use , + this file except in compliance with the License. You may obtain a copy of , + the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required , + by applicable law or agreed to in writing, software distributed under the , + License is distributed
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ /dev/null, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + FileWriter writer = new FileWriter(filename);, + try {, + } finally {, + writer.close();, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/converter/etc/Converter.png, +++ /dev/null, +++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + FileWriter writer = new FileWriter(filename);, + try {, + } finally {, + writer.close();, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministration.java, +import com.iluwatar.hexagonal.domain.LotteryNumbers;, + LotteryAdministration administartion = injector.getInstance(LotteryAdministration.class);, + administartion.getAllSubmittedTickets().forEach((k, v) -> LOGGER.info("Key: {}, Value: {}", k, v));, + LotteryNumbers numbers = administartion.performLottery();, + LOGGER.info("The winning numbers: {}", numbers.getNumbersAsString());, + LOGGER.info("Time to reset the database for next round, eh?");, +
[+++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/builder/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/business-delegate/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/async-method-invocation/pom.xml, + <version>1.9.0-SNAPSHOT</version>, +++ b/bridge/pom.xml, +
[+++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + * <p>, + * In this example we show you three different wizards. The first one ({@link SimpleWizard}) is a naive , + * <p>, + * The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete implementation , + * but abstraction. It utilizes Dependency Injection pattern allowing its {@link Tobacco} dependency to be, + * <p>, + * {@link TobaccoModule} binds a concrete implementation to abstraction. Injector is then used to create, + * {@link GuiceWizard} object with correct dependencies., + /**, + * Program entry point, + *
[+++ b/.travis.yml, +notifications:, + email:, + - iluwatar@gmail.com, +, +++ b/.travis.yml, +notifications:, + email:, + - iluwatar@gmail.com, +, +++ b/README.md, +Programming/Software Design Principles., +++ b/.travis.yml, +notifications:, + email:, + - iluwatar@gmail.com, +, +++ b/README.md, +Programming/Software Design Principles., +++ b/aggregator-microservices/pom.xml, + <build>, + <plugins>, + <plugin>, + <groupId>com.github.markusmo3.urm</groupId>, + <artifactId>urm-maven-plugin</artifactId>, + <version>${urm.version}</version>, + <configuration combine.self="override">, + <outputDirectory>${project.basedir}/../etc</outputDirectory>, + <packages>, + <param>com.iluwatar</param>, + </packages>, + <skipForProjects>, + <!-- skip for parent project -->, + <param>aggregator-microservices</param>, + </skipForProjects>, + </configuration>, + </plugin>, + </plugins>, + </build>, +, +++ b/.travis.yml, +notifications:, + email:, + - iluwatar@gmail.com, +, +++ b/README.md, +Programming/Software Design Principles., +++
[+++ b/decorator/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>decorator</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>decorator</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/decorator/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>decorator</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>decorator</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++
[+++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + factory = new HeroFactoryImpl(new ElfMage("cooking"), new ElfWarlord("cleaning"), new ElfBeast("protecting"));, + factory = new HeroFactoryImpl(new OrcMage("axe"), new OrcWarlord("sword"), new OrcBeast("laser"));, +++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + factory = new HeroFactoryImpl(new ElfMage("cooking"), new ElfWarlord("cleaning"), new ElfBeast("protecting"));, + factory = new HeroFactoryImpl(new OrcMage("axe"), new OrcWarlord("sword"), new OrcBeast("laser"));, +++ b/prototype/src/main/java/com/iluwatar/prototype/Beast.java, + public abstract Beast copy() throws CloneNotSupportedException;, +++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + factory = new HeroFactoryImpl(new ElfMage("cooking"), new ElfWarlord("cleaning"), new ElfBeast("protecting"));, + factory = new HeroFactoryImpl(new OrcMage("axe"), new OrcWarlord("sword"), new OrcBeast("laser"));, +++ b/prototype/src/main/java/com/iluwatar/prototype/Beast.java, + public abstract Beast copy() throws CloneNotSupportedException;, +++ b/prototype/src/main/java/com/iluwatar/prototype/ElfBeast.java, + private String helpType;, +, + public ElfBeast(String helpType) {, + this.helpType =
[+++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations, + * can be changed without affecting the clients., + * , + BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());, + FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());, + SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + *
[+++ b/api-gateway/image-microservice/pom.xml, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/api-gateway/image-microservice/pom.xml, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/api-gateway/image-microservice/src/test/java/com/iluwatar/image/microservice/ImageControllerTest.java, +package com.iluwatar.image.microservice;, +, +import org.junit.Assert;, +import org.junit.Test;, +, +public class ImageControllerTest {, + @Test, + public void testGetImagePath() {, + ImageController imageController = new ImageController();, +, + String imagePath = imageController.getImagePath();, +, + Assert.assertEquals("/product-image.png", imagePath);, + }, +}]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, + private static final String DEFAULT_URL = "https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/promise/README.md";, +++ b/pom.xml, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, + private static final String DEFAULT_URL = "https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/promise/README.md";, +++ b/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + private static final Logger LOGGER = LoggerFactory.getLogger(PromiseSupport.class);, +, + while (state == RUNNING) {, + }, + }, + } , + throws ExecutionException, TimeoutException {, + while (state == RUNNING) {, + try {, + } catch (InterruptedException e) {, + LOGGER.warn("Interrupted!", e);, + Thread.currentThread().interrupt();, + }, + }, + }, + , + } , +++ b/pom.xml, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, + private static final
[+++ b/mutex/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/mutex/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/semaphore/pom.xml, + <version>1.12.0-SNAPSHOT</version>]
[+++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.ucls, +<class-diagram version="1.1.9" icons="true" always-add-relationships="false" generalizations="true" realizations="true" , + associations="true" dependencies="false" nesting-relationships="true" router="FAN"> , + <class id="1" language="java" name="com.iluwatar.adapter.FishingBoat" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="656" y="355"/> , + <class id="2" language="java" name="com.iluwatar.adapter.Captain" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/Captain.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="228" y="185"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="3" language="java" name="com.iluwatar.adapter.BattleFishingBoat" project="adapter" ,
[+++ b/converter/src/main/java/com/iluwatar/converter/App.java, + userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive()),, + user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive()));, + User user = userConverter.convertFromDto(dtoUser);, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, + userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive()),, + user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive()));, + User user = userConverter.convertFromDto(dtoUser);, +++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * @param <T> DTO representation's type, + * @param <U> Domain representation's type, +, + private final Function<T, U> fromDto;, + * @param fromDto Function that converts given dto entity into the domain entity., + * @param fromEntity Function that converts given domain entity into the dto entity., + public Converter(final Function<T, U> fromDto,
[+++ b/README.md, +4. Create a simple class diagram from your example code and put it inside of the etc folder., +5. Add description of the pattern in index.md and link to the class diagram., +6. Create a pull request., +++ b/README.md, +4. Create a simple class diagram from your example code and put it inside of the etc folder., +5. Add description of the pattern in index.md and link to the class diagram., +6. Create a pull request., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * ({@link KingdomFactory}) and its implementations ({@link ElfKingdomFactory},, + * {@link OrcKingdomFactory})., + * <p>, + /**, +
[+++ b/queue-load-leveling/pom.xml, + <dependency>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-pmd-plugin</artifactId>, + <version>3.7</version>, + <type>maven-plugin</type>, + </dependency>]
[+++ b/abstract-factory/pom.xml, + <version>1.1.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.1.0</version>, +++ b/adapter/pom.xml, + <version>1.1.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.1.0</version>, +++ b/adapter/pom.xml, + <version>1.1.0</version>, +++ b/bridge/pom.xml, + <version>1.1.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.1.0</version>, +++ b/adapter/pom.xml, + <version>1.1.0</version>, +++ b/bridge/pom.xml, + <version>1.1.0</version>, +++ b/builder/pom.xml, + <version>1.1.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.1.0</version>, +++ b/adapter/pom.xml, + <version>1.1.0</version>, +++ b/bridge/pom.xml, + <version>1.1.0</version>, +++ b/builder/pom.xml, + <version>1.1.0</version>, +++ b/callback/pom.xml, + <version>1.1.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.1.0</version>, +++ b/adapter/pom.xml, + <version>1.1.0</version>, +++ b/bridge/pom.xml, + <version>1.1.0</version>, +++ b/builder/pom.xml, + <version>1.1.0</version>, +++ b/callback/pom.xml, + <version>1.1.0</version>, +++ b/chain/pom.xml, + <version>1.1.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.1.0</version>, +++ b/adapter/pom.xml, + <version>1.1.0</version>, +++ b/bridge/pom.xml, + <version>1.1.0</version>, +++ b/builder/pom.xml, +
[+++ b/.gitignore, +++ b/.gitignore, +++ b/_scripts/postPumlsToServer.firstrun.output, +parent: half-sync-half-async; artifact: half-sync-half-async, +Puml Server ID: RScv3SCm3030LU819FRPXg5fIm552tnYPFiyjRi3RkbAaYkdoQr5JBy369vrxz7oaSv6XmPhL3e6TCaJ0msU-CAoilTToyG8DdKOw5z0GzcAlvNAN_WZSD1brBHHPmxv0000, +parent: abstract-document; artifact: abstract-document, +Puml Server ID: PSjB3eCm34NHhPG599vtDyQn85L-ifzX-p3lxEf8Twj3MXGDQvyJMFubChxpKN767gucSq07iinEjSNDOACVNvoAUZr6MWoe3QVE_WRnxZ0Mf38b-hkIGlurX_MyehS7, +parent: tolerant-reader; artifact: tolerant-reader, +Puml Server ID: NSZ14SCm20NHLf829ExfXaYChGn26lZ4xSVdtFRjSrZJx9AkZnFOyI9olkenSEOxGxmjWnXgMvE6viLWfmz_kNI9SLZP38XRqEIuWx1Kd0t5XVjjGVj_DNtMdLD_, +parent: event-driven-architecture; artifact: event-driven-architecture, +Puml Server ID: TOhH3SCW30LNQGS0_tSRnrZ15H1adfFromBzkfFktZQaHT7mzgh0N1yYvoUVXXf7B7Mv1dGWozN9MZmCTlhopQdeidEaoO3wMDHvRI6zzvwAssPYbsfGGRYIGlxN7DxpZDv-, +parent: publish-subscribe; artifact: publish-subscribe, +Puml Server ID: PSZB3SCm203GLTe1RExT1XCKKs5YyMdMR--zFRsd66aTNAwFcRdZ1U1uzrDorgXWfykIBJjT2qJhnaI7Dtwm7HnoMjkOoMu12-C7s3LKOhQe4UGo63ZfVtlvwhkMVW40, +parent: facade; artifact: facade, +Puml Server ID: BSP15eCm20N0gxG7CEoz3ILKqvTW7dpq-hhehERTJ7fMJU-l7PYn4ZbVPMlOyvEXBeT13KMEGQtdnM2d7v-yL8sssJ8PKBUWmV64lYnSbHJoRqaVPUReDm00, +parent: service-locator; artifact: service-locator, +Puml Server ID: NSjB3iCm203HgxG7iDdtDeIWX0fZYqzo_MRTtUX9ynOZhPtBzNLchlW0EDxza3nhgs2dQScMdUO0qRenqU6B5xQTGmvh2pFPBM1WF07FSmbnqqcOqu6J_gsNZxvgw0y0, +parent: dao; artifact: dao, +Puml Server ID: 5SR14OKW30N0LhG0oVrt4o6ZE12Ov4NR_thQNQlc5aN2sd82qtz4naywAixOmyNoK8WYvT6fjdWOR7JnpLiHhuTkam4nTUhiRwZm847-J64zpUZj3m00, +parent: model-view-presenter; artifact: model-view-presenter, +Puml Server ID: ROlR3SGW3C1MkGu0-RzjKeXQJWcWFChwPO3xispvQBrmL0hbp-q-xGkWkFBL_8upZBICxjGzbo7GE1OwAlpmmLJ9sjNJH7VIRY1e6q169KvFevMcakrtI_BoD-HGoJE4Nm00, +parent: observer; artifact: observer, +Puml Server ID: FSkn4OGm30NHLg00hFow4KO3PcpP8tr1-pYwx6smQz5Suv2mkbp0y1-HyPlEWYlsSB7S5Q98kJSgDLu66ztyy7Q8brEtmO2OEZNs2Uhxl9u9GVv72cjfHAiV, +parent: intercepting-filter; artifact: intercepting-filter, +Puml Server ID: RSfB3i8m303Hgy014k-vZN5DQkIuaJ_q-fGzkz7JtCL8Q-DolUsPAnu0ZcSVadizAzZfi6JBJiS4qJenqU6D7smRXmnh2pFPBM1YN05o_KwyKcoqb-ZFEEcVz_BPLqtz0W00, +parent: factory-method; artifact: factory-method, +Puml
[+++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, + * This example use two mutex to demonstrate the concurrent access of multiple readers and writers., + ExecutorService executeService = Executors.newFixedThreadPool(10);, + // Start 5 readers, + IntStream.range(0, 5), + // Start 5 writers, + IntStream.range(0, 5), +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, + * This example use two mutex to demonstrate the concurrent access of multiple readers and writers., + ExecutorService executeService = Executors.newFixedThreadPool(10);, + // Start 5 readers, + IntStream.range(0, 5), + // Start 5 writers, + IntStream.range(0, 5), +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Reader.java, + Thread.sleep(250);, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, + * This example use two mutex to demonstrate the concurrent access of
[+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java, +import static org.junit.jupiter.api.Assertions.assertEquals;, + // In order to assure that throttling limits will not be reset, we use an empty throttling implementation, + Throttler timer = () -> { };, + assertEquals(2, counter, "Counter limit must be reached");]
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java, +++ /dev/null, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java, +++ /dev/null, +++ /dev/null, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/promise/pom.xml, +<?xml version="1.0"?>, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice
[+++ b/module/etc/module.urm.puml, +@startuml, +package com.iluwatar.module {, + class App {, + + consoleLoggerModule : ConsoleLoggerModule {static}, + + fileLoggerModule : FileLoggerModule {static}, + - App(), + + execute(args : String[]) {static}, + + main(args : String[]) {static}, + + prepare() {static}, + + unprepare() {static}, + }, + class ConsoleLoggerModule {, + - LOGGER : Logger {static}, + + error : PrintStream, + + output : PrintStream, + - singleton : ConsoleLoggerModule {static}, + - ConsoleLoggerModule(), + + getSingleton() : ConsoleLoggerModule {static}, + + prepare(), + + printErrorString(value : String), + + printString(value : String), + + unprepare(), +
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/factory-method/src/main/java/com/iluwatar/factory/method/App.java, + private final Blacksmith blacksmith;, + , + /**, + * Creates an instance of <code>App</code> which will use <code>blacksmith</code> to manufacture , + * the weapons for war., + * <code>App</code> is unaware which concrete implementation of {@link Blacksmith} it is using., + * The decision of which
[+++ b/monostate/src/main/java/com/iluwatar/monostate/Server.java, + System.out.println("Server ID " + id + " associated to host : " + getHost() + " and Port " + getPort() +" Processed request with value " + request.value);]
[+++ b/chain/README.md, +## Explanation, +, +Real world example, +, +> The Orc King gives loud orders to his army. The closest one to react is the commander, then officer and then soldier. The commander, officer and soldier here form a chain of responsibility., +, +In plain words, +, +> It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler., +, +Wikipedia says, +, +> In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series
[+++ b/event-driven-architecture/index.md, +layout: pattern, +title: Event Driven Architecture, +folder: event-driven-architecture, +permalink: /patterns/event-driven-architecture, +, +, +**Intent:** Send and notify state changes of your objects to other applications using an Event-driven Architecture., +, +![alt text](./etc/class_diagram.png "Event Driven Architecture"), +, +**Applicability:** Use an Event-driven architecture when, +, +* you want to create a loosely coupled system, +* you want to build a more responsive system, +* you want a system that is easier to extend, +, +**Real world examples:**, +, +* A Loan Application has been accepted/rejected (commercial business)., +* A new Rostering Schedule is ready for distribution to all crew (Airline
[+++ b/promise/src/main/java/com/iluwatar/promise/App.java, + * @throws ExecutionException if an execution error occurs., +++ b/promise/src/main/java/com/iluwatar/promise/App.java, + * @throws ExecutionException if an execution error occurs., +++ b/promise/src/main/java/com/iluwatar/promise/Promise.java, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, + * @throws ExecutionException if an execution error occurs., +++ b/promise/src/main/java/com/iluwatar/promise/Promise.java, +++ b/promise/src/test/java/com/iluwatar/promise/PromiseTest.java, + }, + }, executor);, + }, + }, executor);]
[+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java, + if (log.isDebugEnabled()) {
[+++ b/dependency-injection/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>dependency-injection</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/dependency-injection/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>dependency-injection</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/dependency-injection/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +public class App {, + , + public static void main( String[] args ) {, +
[+++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/PULL_REQUEST_TEMPLATE.md, +, +Pull request title, +, +- Clearly and concisely describes what it does, +- Refer to the issue that it solves, if available, +, +, +Pull request description, +, +- Describes the main changes that come with the pull request, +- Any relevant additional information is provided, +, +, +, +> For detailed contributing instructions see https://github.com/iluwatar/java-design-patterns/wiki/01.-How-to-contribute, +++ b/.travis.yml, +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN, +++ b/PULL_REQUEST_TEMPLATE.md, +, +Pull request title, +, +- Clearly and
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.17.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/reactor/src/main/java/com/iluwatar/reactor/AbstractNioChannel.java, +package com.iluwatar.reactor;, +, +import java.io.IOException;, +import java.nio.ByteBuffer;, +import java.nio.channels.SelectableChannel;, +import java.nio.channels.SelectionKey;, +import java.util.Map;, +import java.util.Queue;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentLinkedQueue;, +, +public abstract class AbstractNioChannel {, + , + private SelectableChannel channel;, + private ChannelHandler handler;, + private Map<SelectableChannel, Queue<ByteBuffer>> channelToPendingWrites = new ConcurrentHashMap<>();, + private NioReactor reactor;, + , + public AbstractNioChannel(ChannelHandler handler, SelectableChannel channel) {, + this.handler = handler;, + this.channel = channel;, + }, + , + public void setReactor(NioReactor reactor) {, + this.reactor = reactor;, + }, +, + public SelectableChannel getChannel() {, + return channel;, + }, +, + public abstract int getInterestedOps();,
[+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + System.out.printf("Simple troll power %d.\n", troll.getAttackPower());, + System.out.printf("Smart troll power %d.\n", smart.getAttackPower());, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + System.out.printf("Simple troll power %d.\n", troll.getAttackPower());, + System.out.printf("Smart troll power %d.\n", smart.getAttackPower());, +++ b/decorator/src/main/java/com/iluwatar/decorator/Hostile.java, + int getAttackPower();
[+++ b/monad/src/main/java/com/iluwatar/monad/App.java, + * @param args command line args
[+++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, + private final P testedPrototype;, + public PrototypeTest(final P testedPrototype, final String expectedToString) {]
[+++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, + LOGGER.info("Starting logging clients");, + LOGGER.error("exception awaiting termination", e);, + LOGGER.info("Logging clients stopped");, + LOGGER.error("sleep interrupted", e);, + LOGGER.error("error sending requests", e);, + LOGGER.error("error sending packets", e1);, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, + LOGGER.info("Starting logging clients");, + LOGGER.error("exception awaiting termination", e);, + LOGGER.info("Logging clients stopped");, + LOGGER.error("sleep interrupted", e);, + LOGGER.error("error sending requests", e);, + LOGGER.error("error sending packets", e1);, +++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java, + LOGGER.error("exception in event loop", e);, + LOGGER.info("Reactor stopped");, + LOGGER.error("error closing channel", e1);, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java, + LOGGER.info("Starting logging clients");, + LOGGER.error("exception awaiting termination", e);, + LOGGER.info("Logging clients stopped");, + LOGGER.error("sleep interrupted", e);, + LOGGER.error("error sending requests", e);, +
[+++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java, + * <p>, + , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java, + * <p>, + , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/CharacterStepBuilder.java, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java, + * <p>, + , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/CharacterStepBuilder.java, +++ b/step-builder/src/test/java/com/iluwatar/stepbuilder/AppTest.java, +/**, + * , + * Application test, + *, + */]
[+++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + - <a href="#contribute">How to contribute</a>, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +, +, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + - <a href="#contribute">How to contribute</a>, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +, +, +++ b/abstract-factory/pom.xml, + <version>1.6.0</version>, +++ b/README.md, +[![Build
[+++ b/adapter/README.md, +++ b/adapter/README.md, +++ /dev/null, +++ b/adapter/README.md, +++ /dev/null, +++ /dev/null, +++ b/adapter/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/adapter/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/adapter/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/adapter/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/adapter/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/adapter/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/adapter/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/event-queue/etc/Bass-Drum-1.aif, +++ b/event-queue/etc/Bass-Drum-1.aif, +++ b/event-queue/etc/Closed-Hi-Hat-1.aif, +++ b/event-queue/etc/Bass-Drum-1.aif, +++ b/event-queue/etc/Closed-Hi-Hat-1.aif, +++ b/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java, + Audio.playSound(Audio.getAudioStream("./etc/Bass-Drum-1.aif"), -10.0f);, + Audio.playSound(Audio.getAudioStream("./etc/Bass-Drum-1.aif"), -10.0f);, + Audio.playSound(Audio.getAudioStream("./etc/Bass-Drum-1.aif"), -10.0f);]
[+++ b/pom.xml, + , + <module>intercepting-filter</module>]
[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + * a given iterator. Does not support consecutive hasNext() calls., +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + * a given iterator. Does not support consecutive hasNext() calls., +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + public int stopIndex;, + public int totalElementsCount;, + private List<TYPE> list;, + private int currentIndex = 0;, + initialize();, +, + private void initialize() {, + if(list == null) {, + list = new ArrayList<>();, + Iterator<TYPE> newIterator = iterable.iterator();, + while(newIterator.hasNext()) {, + list.add(newIterator.next());, + }, +, + totalElementsCount = list.size();, + stopIndex = totalElementsCount - count;, + }, + }, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + * a given iterator. Does
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/model-view-presenter/pom.xml, + <artifactId>junit-dep</artifactId>, + <version>4.11</version>, +++ b/model-view-presenter/pom.xml, + <artifactId>junit-dep</artifactId>, + <version>4.11</version>, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java, +package com.iluwatar;, +, +++ b/model-view-presenter/pom.xml, + <artifactId>junit-dep</artifactId>, + <version>4.11</version>, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java, +package com.iluwatar;, +, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorJFrame.java, +package com.iluwatar;, +, +++ b/model-view-presenter/pom.xml, + <artifactId>junit-dep</artifactId>, + <version>4.11</version>, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java, +package com.iluwatar;, +, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorJFrame.java, +package com.iluwatar;, +, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorPresenter.java, +package com.iluwatar;, +, +++ b/model-view-presenter/pom.xml, + <artifactId>junit-dep</artifactId>, + <version>4.11</version>, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java, +package com.iluwatar;, +, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorJFrame.java, +package com.iluwatar;, +, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorPresenter.java, +package com.iluwatar;, +, +++ /dev/null, +++ b/model-view-presenter/pom.xml, + <artifactId>junit-dep</artifactId>, + <version>4.11</version>, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java, +package com.iluwatar;, +, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorJFrame.java, +package com.iluwatar;, +, +++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorPresenter.java, +package com.iluwatar;, +, +++
[+++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsyncTask.java, + * Represents some computation that is performed asynchronously and its result. , + * The computation is typically done is background threads and the result is posted , + * back in form of callback. The callback does not implement {@code isComplete}, {@code cancel} , + * as it is out of scope of this pattern., + * Is called in context of caller thread before call to {@link #call()}. Large, + * tasks should not be performed in this method. Validations can be performed here, + * so that the performance penalty of context switching
[+++ b/pom.xml, + <dependency>, + <groupId>net.sourceforge.htmlunit</groupId>, + <artifactId>htmlunit</artifactId>, + <version>${htmlunit.version}</version>, + <scope>test</scope>, + </dependency>]
[+++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * <p>, + * The Adapter ({@link GnomeEngineer}) converts the interface of the target class, + * ({@link GoblinGlider}) into a suitable one expected by the client, + * ({@link GnomeEngineeringManager})., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * <p>, + * The Adapter ({@link GnomeEngineer}) converts the interface of the target class, + * ({@link GoblinGlider}) into a suitable one expected by the client, + * ({@link GnomeEngineeringManager})., + /**, + * Program entry point, + * @param args command line args, +
[+++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/App.java, + * <p>, + * <p>, + * In this example we have a giant ({@link GiantModel}) with statuses for health, fatigue and nourishment. {@link GiantView}, + * can display the giant with its current status. {@link GiantController} receives input affecting the model and, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/App.java, + * <p>, + * <p>, + * In this example we have a giant ({@link GiantModel}) with statuses for health, fatigue and nourishment. {@link GiantView}, + * can display the giant with its current
[+++ b/fluentinterface/etc/fluentinterface.png, +++ b/fluentinterface/etc/fluentinterface.png, +++ b/fluentinterface/etc/fluentinterface.ucls, + <attributes public="true" package="false" protected="false" private="false" static="false"/> , + <operations public="true" package="true" protected="true" private="false" static="true"/> , + file="/opt/Softwares/Eclipses/MARS/eclipse/jre/lib/rt.jar" binary="true" corner="BOTTOM_RIGHT"> , + <realization id="8"> , + <dependency id="9"> , + <generalization id="10"> , + <end type="SOURCE" refId="4"/> , + <end type="TARGET" refId="6"/> , + </generalization> , + <dependency id="11"> , + <end type="SOURCE" refId="1"/> , + <end type="TARGET" refId="3"/> , + </dependency> , + <dependency id="12"> , + <end type="SOURCE" refId="1"/> , + <end type="TARGET" refId="4"/> , + </dependency> , + <realization id="13"> , + <end type="SOURCE" refId="2"/> , + <end type="TARGET" refId="4"/>
[+++ b/event-sourcing/README.md, +---, +layout: pattern, +title: Event Sourcing, +folder: event-sourcing, +permalink: /patterns/event-sourcing/, +categories: Architectural, +tags:, + - Java, + - Difficulty Intermediate, + - Performance, +---, +, +## Intent, +Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects. This can simplify tasks in complex domains, by avoiding the need to synchronize the data model and the business domain, while improving performance, scalability, and
[+++ b/abstract-factory/pom.xml, + <version>1.8.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.8.0</version>, +++ b/adapter/etc/adapter.png, +++ b/abstract-factory/pom.xml, + <version>1.8.0</version>, +++ b/adapter/etc/adapter.png, +++ b/adapter/etc/adapter.ucls, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.adapter.GnomeEngineeringManager" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="106" width="224" x="110" y="210"/> , + <interface id="2" language="java" name="com.iluwatar.adapter.Engineer" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/Engineer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="88" width="141" x="110" y="356"/> , + <class id="3" language="java" name="com.iluwatar.adapter.GnomeEngineer" project="adapter" , + file="/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="106" width="141" x="374" y="210"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true"
[+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + virtualDB = new HashMap<>();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + virtualDB = new HashMap<>();, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + HashMap<String, Node> cache = new HashMap<>();, + ArrayList<UserAccount> listOfCacheData = new ArrayList<>();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + virtualDB = new HashMap<>();, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + HashMap<String, Node> cache = new HashMap<>();, + ArrayList<UserAccount> listOfCacheData = new ArrayList<>();, +++ b/composite/src/main/java/com/iluwatar/composite/LetterComposite.java, + private List<LetterComposite> children = new ArrayList<>();
[+++ b/guarded-suspension/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +, + <modelVersion>4.0.0</modelVersion>, + <artifactId>java-design-patterns</artifactId>, + <packaging>jar</packaging>]
[+++ b/delegation/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +++ b/delegation/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java, +import org.junit.Test;, + @Test, + public static void main() {]
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory() {, + return new ElfKingdomFactory();, + }, +, + OrcKingdomFactory getOrcKingdomFactory() {, + return new OrcKingdomFactory();, + }, +, + KingdomFactory elfKingdomFactory;, + elfKingdomFactory = app.getElfKingdomFactory();, + app.createKingdom(elfKingdomFactory);, + KingdomFactory orcKingdomFactory;, + orcKingdomFactory = app.getOrcKingdomFactory();, + app.createKingdom(orcKingdomFactory);, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory() {, + return new ElfKingdomFactory();, + }, +, + OrcKingdomFactory getOrcKingdomFactory() {, + return new OrcKingdomFactory();, + }, +, + KingdomFactory elfKingdomFactory;, + elfKingdomFactory = app.getElfKingdomFactory();, + app.createKingdom(elfKingdomFactory);, + KingdomFactory orcKingdomFactory;, + orcKingdomFactory = app.getOrcKingdomFactory();, + app.createKingdom(orcKingdomFactory);, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = app.getElfKingdomFactory();, + orcFactory = app.getOrcKingdomFactory();, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + ElfKingdomFactory getElfKingdomFactory()
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasParts {, + + PROPERTY : String {static}, + + getParts() : Stream<Part>, + }, + interface HasType {, + + PROPERTY : String {static}, + + getType() : Optional<String>, + }, + interface HasPrice {, + + PROPERTY : String {static}, + + getPrice() : Optional<Number>, + }, + interface Document {, + + children(String, Function<Map<String, Object>, T>) : Stream<T> {abstract}, + + get(String) : Object {abstract}, + + put(String, Object) {abstract}, + class App {, + + App(), + + main(args : String[]) {static}, +HasParts --|> Document , +AbstractDocument ..|> Document , +HasType
[+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java, + /**, + * Program entry point., + *, + * @param args command line args, + */, + System.out.println(propFileName + " was not found. Defaulting to non-interactive mode.");, + /**, + * Run program in either interactive mode or not., + */, + /**, + * Run program in non-interactive mode., + */, + int aEventId = eventManager.createAsyncEvent(60);, + System.out.println("Event [" + aEventId + "] has been created.");, + eventManager.startEvent(aEventId);, + System.out.println("Event [" + aEventId + "] has been started.");, + int sEventId = eventManager.createSyncEvent(60);, + System.out.println("Event [" + sEventId + "] has been created.");, +
[+++ b/pom.xml]
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.List;, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.List;, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +import java.util.Map;, + private static Map<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.List;, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +import java.util.Map;, + private static Map<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, +import java.util.List;, +import java.util.Map;, + Map<String, Node> cache = new HashMap<>();, + public List<UserAccount> getCacheDataInListForm() {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.List;, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, + List<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +import java.util.Map;, +
[+++ b/.travis.yml, +notifications:, + email:, + - iluwatar@gmail.com, +, +++ b/.travis.yml, +notifications:, + email:, + - iluwatar@gmail.com, +, +++ b/README.md, +Programming/Software Design Principles., +++ b/.travis.yml, +notifications:, + email:, + - iluwatar@gmail.com, +, +++ b/README.md, +Programming/Software Design Principles., +++ b/faq.md, +page-index: 5, +, +### Q8: What is the difference between java.io.Serialization and Memento pattern? {#Q8}, +, +Memento is typically used to implement rollback/save-point support. Example we might want to mark the state of an object at a point in time, do some work and then decide to rollback to the previous state. , +, +On the other hand serialization may
[+++ b/page-object/src/main/java/com/iluwatar/pageobject/App.java, + try {, + File applicationFile = new File(App.class.getClassLoader().getResource("sample-ui/login.html").getPath());, +, + } catch (IOException ex) {, + ex.printStackTrace();, +]
[+++ b/event-asynchronous/README.md, +---, +layout: pattern, +title: Event-based Asynchronous, +folder: event-asynchronous, +permalink: /patterns/event-asynchronous/, +categories: Other, +tags:, + - difficulty-intermediate, + - performance, + - Java, +---, +, +## Intent, +The Event-based Asynchronous Pattern makes available the advantages of multithreaded applications while hiding many, +of the complex issues inherent in multithreaded design. Using a class that supports this pattern can allow you to:-, +(1) Perform time-consuming tasks, such as downloads and database operations, "in the background," without interrupting your application. , +(2) Execute multiple operations simultaneously, receiving notifications when each completes. , +(3) Wait for resources to become available without stopping
[+++ b/composite/README.md, +## Explanation, +, +Real world example, +, +> Every sentence is composed of words which are in turn composed of characters. Each of these objects is printable and they can have something printed before or after them like sentence always ends with full stop and word always has space before it, +, +In plain words, +, +> Composite pattern lets clients treat the individual objects in a uniform manner., +, +Wikipedia says, +, +> In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be
[+++ b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java, + * <p>, + * <p>, + * <p>, + * In this example we have hierarchy of objects ({@link GameObject}) that can collide to each other. Each, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java, + * <p>, + * <p>, + * <p>, + * In this example we have hierarchy of objects ({@link GameObject}) that can collide to each other. Each, + /**, + * Program entry point, + * @param args command line args, + */, +++ b/double-dispatch/src/test/java/com/iluwatar/doubledispatch/AppTest.java, +/**, + * , +
[+++ b/abstract-factory/README.md, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java, +++ /dev/null, +++ b/abstract-factory/README.md, +++ b/data-bus/src/main/java/com/iluwatar/databus/AbstractDataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/DataType.java, +++ b/data-bus/src/main/java/com/iluwatar/databus/Member.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +++ b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java, +++ /dev/null, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *, + *, + *, + * ,
[+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, +import java.util.Optional;, + Optional<List<Map<String, Object>>> any = Stream.of(get(key)), + .findAny();, + return any.isPresent() ? any.get().stream().map(constructor) : Stream.empty();, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, +import java.util.Optional;, + Optional<List<Map<String, Object>>> any = Stream.of(get(key)), + .findAny();, + return any.isPresent() ? any.get().stream().map(constructor) : Stream.empty();, +++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java, + @Test, + public void shouldRetrieveEmptyStreamForNonExistinChildren() {, + Stream<DocumentImplementation> children = document.children(KEY, DocumentImplementation::new);, + assertNotNull(children);, + assertEquals(0, children.count());, + }, +]
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java, + try (FileWriter writer = new FileWriter(filename)) {]
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All
[+++ b/partial-response/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + </dependency>, + </dependencies>, +++ b/partial-response/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + </dependency>, + </dependencies>, +++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java, +, + @Override, + public String toString() {, + return "Video{" +, + "id='" + id + '\'' +, + ", title='" + title + '\'' +, + ", length=" + length +, + ", description='" + description + '\'' +, + ", publisher='" + publisher + '\'' +, + ", status='" + status + '\'' +, + '}';, + }, +++ b/partial-response/pom.xml, + <dependencies>, + <dependency>, + <groupId>junit</groupId>,
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, + protected Author() {, + public void setId(long id) {, + this.id = id;, + }, +, + public void setUsername(String username) {, + this.username = username;, + }, +, + public void setName(String name) {, + this.name = name;, + }, +, + public void setEmail(String email) {, + this.email = email;, + }, +, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, + protected Author() {, + public void setId(long id) {, + this.id = id;, + }, +, + public void setUsername(String username) {, + this.username = username;, + }, +, + public void setName(String name) {, + this.name =
[+++ b/converter/src/test/java/com/iluwatar/converter/AppTest.java, +/**, + * App running test, + */, +++ b/converter/src/test/java/com/iluwatar/converter/AppTest.java, +/**, + * App running test, + */, +++ b/converter/src/test/java/com/iluwatar/converter/ConverterTest.java, +/**, + * Tests for {@link Converter}, + */]
[+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java]
[+++ b/unit-of-work/pom.xml, + <version>1.18.0-SNAPSHOT</version>]
[+++ /dev/null, +++ /dev/null, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, + public String toString() {]
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled;, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + private TYPE next;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled;, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + private TYPE next;, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + int currentIndex;, + private
[+++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java, +package com.iluwatar.databus.members;, +, +import com.iluwatar.databus.data.MessageData;, +import com.iluwatar.databus.data.StartingData;, +import org.junit.Assert;, +import org.junit.Test;, +, +import java.time.LocalDateTime;, +, +/**, + * Tests for {@link MessageCollectorMember}., + *, + * @author Paul Campbell (pcampbell@kemitix.net), + */, +public class MessageCollectorMemberTest {, +, + @Test, + public void collectMessageFromMessageData() {, + //given, + final String message = "message";, + final MessageData messageData = new MessageData(message);, + final MessageCollectorMember collector = new MessageCollectorMember("collector");, + //when, + collector.accept(messageData);, + //then, + Assert.assertTrue(collector.getMessages().contains(message));, + }, +, + @Test, + public void collectIgnoresMessageFromOtherDataTypes() {, + //given, + final StartingData startingData = new StartingData(LocalDateTime.now());, + final MessageCollectorMember collector
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +* [Step Builder](#step-builder), +## <a name="step-builder">Step Builder</a> [&#8593;](#list-of-design-patterns), +**Intent:** An extension of the Builder pattern that fully guides the user through the creation of the object with no chances of confusion., +The user experience will be much more improved by the fact that he will only see the next step methods available, NO build method until is the right time to build the object., +, +![alt text](./step-builder/etc/step-builder.png "Step Builder"), +, +**Applicability:** Use the Step Builder pattern when the algorithm for creating a complex object should be independent of the parts that make up
[+++ b/abstract-document/README.md, +---, +layout: pattern, +title: Abstract Document, +folder: abstract-document, +permalink: /patterns/abstract-document/, +categories: Structural, +tags: , + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Achieve flexibility of untyped languages and keep the type-safety , +, +![alt text](./etc/abstract-document-base.png "Abstract Document Base"), +, +![alt text](./etc/abstract-document.png "Abstract Document Traits and Domain"), +, +, +## Applicability, +Use the Abstract Document Pattern when, +, +* there is a need to add new properties on the fly, +* you want a flexible way to organize domain in tree like structure, +* you want more loosely coupled system, +, +, +## Credits, +, +*
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * Program entry point, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +, +, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * Program entry point, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +, +, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * Program entry point, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +, +, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();, +++ b/pom.xml, +, + <module>unit-of-work</module>, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * Program entry point, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +, +, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory =
[+++ b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java, +package com.iluwatar.balking;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * An interface to simulate delay while executing some work., + */, +public interface DelayProvider {, + void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task);, +}, +++ b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java, +package com.iluwatar.balking;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * An interface to simulate delay while executing some work., + */, +public interface DelayProvider {, + void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task);, +}, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +import java.util.concurrent.TimeUnit;, +, + private final DelayProvider delayProvider;, + /**, + * Creates a new instance of WashingMachine, + */, + this((interval, timeUnit, task) -> {, +
[+++ /dev/null, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of
[+++ b/abstract-factory/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ b/object-mother/src/main/java/com/iluwatar/objectmother/RoyaltyObjectMother.java, + * Method to create a sober and unhappy king. The standard parameters are set., +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ b/object-mother/src/main/java/com/iluwatar/objectmother/RoyaltyObjectMother.java, + * Method to create a sober and unhappy king. The standard parameters are set., +++ b/strategy/README.md, +++ b/abstract-factory/README.md, +++ b/bridge/README.md, +++ b/decorator/README.md, +++ b/object-mother/src/main/java/com/iluwatar/objectmother/RoyaltyObjectMother.java, + * Method to create a sober and unhappy king. The standard parameters are set., +++ b/strategy/README.md, +++ b/template-method/README.md]
[+++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public class Hero {, + private Hero(HeroBuilder builder) {, + this.profession = builder.profession;, + this.name = builder.name;, + this.hairColor = builder.hairColor;, + this.hairType = builder.hairType;, + this.weapon = builder.weapon;, + this.armor = builder.armor;, + }, +, +++ b/LICENSE.md, +Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/builder/src/main/java/com/iluwatar/builder/Hero.java, +public class Hero {, + private Hero(HeroBuilder builder) {, + this.profession = builder.profession;, + this.name = builder.name;, + this.hairColor = builder.hairColor;, + this.hairType = builder.hairType;, + this.weapon = builder.weapon;, + this.armor = builder.armor;, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java,
[+++ b/module/src/main/java/com/iluwatar/module/App.java, + * The MIT License Copyright (c) 2014 Ilkka Seppälä
[+++ b/dao/src/main/java/com/iluwatar/dao/App.java, + final CustomerDao customerDao = new InMemoryCustomerDao(generateSampleCustomers());, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, + log.info("customerDao.getCusterById(2): " + customerDao.getById(2));, + customerDao.add(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, + customerDao.update(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, + customerDao.delete(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + final CustomerDao customerDao = new InMemoryCustomerDao(generateSampleCustomers());, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, + log.info("customerDao.getCusterById(2): " + customerDao.getById(2));, + customerDao.add(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, + customerDao.update(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, + customerDao.delete(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, +++ b/dao/src/main/java/com/iluwatar/dao/CustomerDao.java, +import java.util.stream.Stream;, + Stream<Customer> getAll();, + Customer getById(int id);, + boolean add(Customer customer);, + boolean update(Customer customer);,
[+++ b/builder/README.md, +## Explanation, +, +Real world example, +, +> Imagine a character generator for a role playing game. The easiest option is to let computer create the character for you. But if you want to select the character details like profession, gender, hair color etc. the character generation becomes a step-by-step process that completes when all the selections are ready., +, +In plain words, +, +> Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved
[+++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, + * A Value Object are objects which follow value semantics rather than reference semantics. This, + * means value objects' equality are not based on identity. Two value objects are equal when they, + * have the same value, not necessarily being the same object.., + * , + * Value Objects must override equals(), hashCode() to check the equality with values. , + * Value Objects should be immutable so declare members final., + * Obtain instances by static factory methods., + * The elements of the state must be other values, including primitive types.
[+++ b/pom.xml, + <!-- The following exclude configuration was added because error occurred when executing "mvn clean test jacoco:report coveralls:report" -->, + <!-- [ERROR] Failed to execute goal org.eluder.coveralls:coveralls-maven-plugin:3.1.0:report (default-cli) on project java-design-patterns: I/O operation failed: No source found for domainapp/dom/modules/simple/QSimpleObject.java -> [Help 1] -->, + <configuration>, + <excludes>, + <exclude>domainapp/dom/modules/simple/QSimpleObject.class</exclude>, + </excludes>, + </configuration>]
[+++ b/README.md, +**To add a new pattern** you need to do the following steps:, +1. Fork the repository., +2. Implement the code changes in your fork. Remember to add sufficient comments documenting the implementation., +3. Create a simple class diagram from your example code., +4. Add description of the pattern in README.md and link to the class diagram. , +**To work on one of the raised issues** you need to do the following steps:, +, +1. Fork the repository., +2. Implement the code changes in your fork. Remember to add sufficient comments documenting the implementation. Reference the issue id
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, + super();, + super();, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, + super();, + super();, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, + super();
[+++ b/async-method-invocation/pom.xml, + <version>1.4.0</version>]
[+++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ b/README.md, +++ b/_scripts/postPumlsToServer.py, +#, +# The MIT License, +# Copyright (c) 2014-2016 Ilkka Seppälä, +#, +# Permission is hereby granted, free of charge, to any person obtaining a copy, +# of this software and associated documentation files (the "Software"), to deal, +# in the Software without restriction, including without limitation the rights, +# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, +# copies of the Software, and to permit persons to whom the Software is, +# furnished to do so, subject to the following conditions:, +#, +# The
[+++ b/factory-method/README.md, +## Known uses, +, +java.util.Calendar, +java.util.ResourceBundle, +java.text.NumberFormat#getInstance(), +, +++ b/factory-method/README.md, +## Known uses, +, +java.util.Calendar, +java.util.ResourceBundle, +java.text.NumberFormat#getInstance(), +, +++ /dev/null, +++ b/factory-method/README.md, +## Known uses, +, +java.util.Calendar, +java.util.ResourceBundle, +java.text.NumberFormat#getInstance(), +, +++ /dev/null, +++ /dev/null, +++ b/factory-method/README.md, +## Known uses, +, +java.util.Calendar, +java.util.ResourceBundle, +java.text.NumberFormat#getInstance(), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/factory-method/README.md, +## Known uses, +, +java.util.Calendar, +java.util.ResourceBundle, +java.text.NumberFormat#getInstance(), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/factory-method/README.md, +## Known uses, +, +java.util.Calendar, +java.util.ResourceBundle, +java.text.NumberFormat#getInstance(), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/factory-method/README.md, +## Known uses, +, +java.util.Calendar, +java.util.ResourceBundle, +java.text.NumberFormat#getInstance(),
[+++ b/eip-wire-tap/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!--, + The MIT License, + Copyright (c) 2014-2016 Ilkka Seppälä, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, + The above copyright notice and this permission notice shall be
[+++ b/tls/src/main/java/com/iluwatar/tls/App.java, + System.out.println("Abnormal end of program. Program throws exception: " + e); ]
[+++ b/model-view-presenter/etc/data/test.txt, +Test line 1, +Test line 2, +++ b/model-view-presenter/etc/data/test.txt, +Test line 1, +Test line 2, +++ b/model-view-presenter/etc/model-view-presenter.jpg, +++ b/model-view-presenter/etc/data/test.txt, +Test line 1, +Test line 2, +++ b/model-view-presenter/etc/model-view-presenter.jpg, +++ b/model-view-presenter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>model-view-presenter</artifactId>, + <version>1.0-SNAPSHOT</version>, + <name>model-view-presenter</name>, + <url>http://maven.apache.org</url>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/model-view-presenter/etc/data/test.txt, +Test line 1, +Test line 2, +++ b/model-view-presenter/etc/model-view-presenter.jpg, +++ b/model-view-presenter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>,
[+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private DbManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java, + private AppManager() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + private CacheStore() {, + }, +, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + private DbManager() {, + }, +, +++ b/mediator/src/main/java/com/iluwatar/mediator/PartyImpl.java, + if (!member.equals(actor)) {
[+++ b/dirty-flag/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ b/throttling/README.md, +categories: Behavioral]
[+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java, + * The MIT License Copyright (c) 2014-2016 Ilkka Seppälä, + * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and, + * associated documentation files (the "Software"), to deal in the Software without restriction,, + * including without limitation the rights to use, copy, modify, merge, publish, distribute,, + * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is, + * The above copyright notice and this permission notice shall be included in all copies or, + * substantial portions of
[+++ b/dao/pom.xml, + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>de.bechte.junit</groupId>, + <artifactId>junit-hierarchicalcontextrunner</artifactId>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/dao/pom.xml, + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>de.bechte.junit</groupId>, + <artifactId>junit-hierarchicalcontextrunner</artifactId>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + </dependency>, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, + * @throws Exception if any error occurs. , + public static void main(final String[] args) throws Exception {, + final CustomerDao customerDao = new InMemoryCustomerDao();, + addCustomers(customerDao);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());, + log.info("customerDao.getCusterById(2): " + customerDao.getById(2));, + customerDao.add(customer);, + log.info("customerDao.getAllCustomers(): " + customerDao.getAll());,
[+++ b/chain/src/main/java/com/iluwatar/chain/App.java, + * Chain of Responsibility organizes request handlers ({@link RequestHandler}) into a, + * this example the king ({@link OrcKing}) makes requests and the military orcs, + * ({@link OrcCommander}, {@link OrcOfficer}, {@link OrcSoldier}) form the handler chain., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/chain/src/main/java/com/iluwatar/chain/App.java, + * Chain of Responsibility organizes request handlers ({@link RequestHandler}) into a, + * this example the king ({@link OrcKing}) makes requests and the military orcs, + * ({@link OrcCommander}, {@link OrcOfficer}, {@link OrcSoldier}) form the handler chain., + /**, +
[+++ b/.travis.yml, +addons:, + apt:, + packages:, + - oracle-java8-installer, +]
[+++ b/CONTRIBUTING.MD, +This is great you have something to contribute! , +, +Before going any further please read the [wiki](https://github.com/iluwatar/java-design-patterns/wiki), +with convemtions and rules we used for this project., +++ b/CONTRIBUTING.MD, +This is great you have something to contribute! , +, +Before going any further please read the [wiki](https://github.com/iluwatar/java-design-patterns/wiki), +with convemtions and rules we used for this project., +++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns)., +++ b/CONTRIBUTING.MD, +This is great you have something
[+++ b/README.md, +### Architectual Patterns, +, +An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context., +, +* [Data Access Object](#dao), +, +## <a name="dao">Data Access Object</a> [&#8593;](#list-of-design-patterns), +**Intent:** Object provides an abstract interface to some type of database or other persistence mechanism., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/dao/etc/dao.png "Data Access Object"), +, +**Applicability:** Use the Data Access Object in any of the following situations, +* when you want to consolidate how the data layer is accessed, +* when you want to avoid writing multiple data retrieval/persistence layers, +, +++ b/README.md, +###
[+++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/pom.xml, + Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/pom.xml, + Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, + * Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/pom.xml, + Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java, + * Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + * Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/_scripts/postPumlsToServer.py, +# Copyright (c) 2014-2016 Ilkka Seppälä, +++ b/abstract-document/pom.xml, + Copyright (c) 2014-2016 Ilkka Seppälä,
[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +package com.iluwatar.delegation.simple;, +, +import com.iluwatar.delegation.simple.printers.CanonPrinter;, +import com.iluwatar.delegation.simple.printers.EpsonPrinter;, +import com.iluwatar.delegation.simple.printers.HPPrinter;, +, +public class App {, +, + public static final String MESSAGE_TO_PRINT = "hello world";, +, + public static void main(String[] args) {, + AbstractPrinterController hpPrinterController = new PrinterController(new HPPrinter());, + AbstractPrinterController canonPrinterController = new PrinterController(new CanonPrinter());, + AbstractPrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());, +, + hpPrinterController.print(MESSAGE_TO_PRINT);, + canonPrinterController.print(MESSAGE_TO_PRINT);, + epsonPrinterController.print(MESSAGE_TO_PRINT);, + }, +, +}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +package com.iluwatar.delegation.simple;, +, +import com.iluwatar.delegation.simple.printers.CanonPrinter;, +import com.iluwatar.delegation.simple.printers.EpsonPrinter;, +import com.iluwatar.delegation.simple.printers.HPPrinter;, +, +public class App {, +, + public static final String MESSAGE_TO_PRINT = "hello world";, +, + public static void main(String[] args)
[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java, +package com.iluwatar.delegation.simple.printers;, +, +import com.iluwatar.delegation.simple.Printer;, +import com.iluwatar.delegation.simple.PrinterController;, +, +public class App {, +, + public static final String MESSAGE_TO_PRINT = "hello world";, +, + public static void main(String[] args) {, + Printer hpPrinter = new HPPrinter();, + Printer canonPrinter = new CanonPrinter();, + Printer epsonPrinter = new EpsonPrinter();, +, + PrinterController hpPrinterController = new PrinterController(hpPrinter);, + PrinterController canonPrinterController = new PrinterController(canonPrinter);, + PrinterController epsonPrinterController = new PrinterController(epsonPrinter);, +, + hpPrinterController.print(MESSAGE_TO_PRINT);, + canonPrinterController.print(MESSAGE_TO_PRINT);, + epsonPrinterController.print(MESSAGE_TO_PRINT);, + }, +, +}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java, +package com.iluwatar.delegation.simple.printers;, +, +import com.iluwatar.delegation.simple.Printer;, +import com.iluwatar.delegation.simple.PrinterController;, +, +public class App {, +, + public static final
[+++ b/README.md, +++ b/README.md, +++ b/faq.md, +, +### Q7: What are the differences between FluentInterface and Builder patterns? {#Q7}, +, +Fluent interfaces are sometimes confused with the Builder pattern, because they share method chaining and a fluent usage. However, fluent interfaces are not primarily used to create shared (mutable) objects, but to configure complex objects without having to respecify the target object on every property change. , +++ b/README.md, +++ b/faq.md, +, +### Q7: What are the differences between FluentInterface and Builder patterns? {#Q7}, +, +Fluent interfaces are sometimes confused with the Builder pattern, because they share method chaining
[+++ b/abstract-factory/README.md, +* the lifetime of the dependency is conceptually shorter than the lifetime of the consumer., +* you need a run-time value to construct a particular dependency, +* you want to decide which product to call from a family at runtime., +* you need to supply one or more parameters only known at run-time before you can resolve a dependency., +, +## Use Cases: , +, +* Selecting to call the appropriate implementation of FileSystemAcmeService or DatabaseAcmeService or NetworkAcmeService at runtime., +* Unit test case writing becomes much easier, +, +## Consequences:, +, +* Dependency injection in java
[+++ b/partial-response/pom.xml, +<!--, +, + The MIT License, + Copyright (c) 2014 Ilkka Seppälä, +, + Permission is hereby granted, free of charge, to any person obtaining a copy, + of this software and associated documentation files (the "Software"), to deal, + in the Software without restriction, including without limitation the rights, + to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + copies of the Software, and to permit persons to whom the Software is, + furnished to do so, subject to the following conditions:, +, + The above copyright notice and this permission notice shall be
[+++ b/abstract-factory/README.md, +++ b/abstract-factory/README.md, +++ /dev/null, +++ b/abstract-factory/README.md, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/abstract-factory/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +, + <module>unit-of-work</module>, +++ b/abstract-factory/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +, + <module>unit-of-work</module>, +++ b/unit-of-work/README.md, +---, +layout: pattern, +title: Unit Of Work, +folder: unit-of-work, +permalink: /patterns/unit-of-work/, +, +categories: Architectural, +tags:, + - Java, + - KISS, + - YAGNI, + - Difficulty-Beginner, +---, +, +## Intent, +When a business transaction is completed, all the these updates are sent as one , + big unit of work
[+++ b/README.md, +![alt text](./abstract-factory/etc/abstract-factory_1.png "Abstract Factory"), +![alt text](./builder/etc/builder_1.png "Builder"), +![alt text](./factory-method/etc/factory-method_1.png "Factory Method"), +![alt text](./prototype/etc/prototype_1.png "Prototype"), +![alt text](./singleton/etc/singleton_1.png "Singleton"), +![alt text](./adapter/etc/adapter_1.png "Adapter"), +![alt text](./bridge/etc/bridge_1.png "Bridge"), +![alt text](./composite/etc/composite_1.png "Composite"), +![alt text](./decorator/etc/decorator_1.png "Decorator"), +![alt text](./facade/etc/facade_1.png "Facade"), +![alt text](./flyweight/etc/flyweight_1.png "Flyweight"), +![alt text](./proxy/etc/proxy_1.png "Proxy"), +![alt text](./service-locator/etc/service-locator.png "Proxy"), +![alt text](./chain/etc/chain_1.png "Chain of Responsibility"), +![alt text](./command/etc/command.png "Command"), +![alt text](./interpreter/etc/interpreter_1.png "Interpreter"), +![alt text](./iterator/etc/iterator_1.png "Iterator"), +![alt text](./mediator/etc/mediator_1.png "Mediator"), +![alt text](./memento/etc/memento.png "Memento"), +![alt text](./observer/etc/observer_1.png "Observer"), +![alt text](./state/etc/state_1.png "State"), +![alt text](./strategy/etc/strategy_1.png "Strategy"), +![alt text](./template-method/etc/template-method_1.png "Template Method"), +![alt text](./visitor/etc/visitor_1.png "Visitor"), +![alt text](./model-view-presenter/etc/model-view-presenter_1.png "Model-View-Presenter"), +![alt text](./dao/etc/dao.png "Data Access Object"), +![alt text](./double-checked-locking/etc/double_checked_locking_1.png "Double Checked Locking"), +![alt text](./servant/etc/servant-pattern.png "Servant"), +![alt text](./null-object/etc/null-object.png "Null Object"),
[+++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +categories:, + - pattern_cat, + - creational, +tags: pattern_tag, +---, +, +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +**Applicability:** Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of
[+++ b/.gitignore, +target
[+++ b/adapter/README.md, +## Explanation, +Real world example, +, +> Consider that you have some pictures in your memory card and you need to transfer them to your computer. In order to transfer them you need some kind of adapter that is compatible with your computer ports so that you can attach memory card to your computer. In this case card reader is an adapter., +> Another example would be the famous power adapter; a three legged plug can't be connected to a two pronged outlet, it needs to use a power adapter that makes it compatible with the two
[+++ b/mediator/src/main/java/com/iluwatar/mediator/App.java, + * The Mediator pattern defines an object that encapsulates how a set of objects , + * interact. This pattern is considered to be a behavioral pattern due to the way , + * it can alter the program's running behavior., + * <p>, + * Usually a program is made up of a large number of classes. So the logic and , + * computation is distributed among these classes. However, as more classes are , + * developed in a program, especially during maintenance and/or refactoring, , + * the problem of communication between
[+++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +layout: pattern, +title: Event Driven Architecture, +folder: event-driven-architecture, +permalink: /patterns/event-driven-architecture, +, +, +**Intent:** Send and notify state changes of your objects to other applications using an Event-driven Architecture., +, +![alt text](./etc/class_diagram.png "Event Driven Architecture"), +, +**Applicability:** Use an Event-driven architecture when, +, +* you want to create a loosely coupled system, +* you want to build a more responsive system, +* you want a system that is easier to extend, +, +**Real world examples:**, +, +* A Loan Application has been accepted/rejected (Commercial Business)., +* A new Rostering Schedule is ready for distribution
[+++ b/ambassador/README.md, +---, +layout: pattern, +title: Ambassador, +folder: ambassador, +permalink: /patterns/ambassador/, +categories: Structural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Provide a helper service instance on a client and offload common functionality away from a shared resource., +, +## Explanation, +Real world example, +, +> A remote service has many clients accessing a function it provides. The service is a legacy application and is impossible to update. Large numbers of requests from users are causing connectivity issues. New rules for request frequency should be implemented along with latency checks and client-side logging., +, +In plain
[+++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns)., +++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns)., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that have a common theme, + * without specifying their concrete classes. In normal usage,
[+++ b/event-asynchronous/README.md, +---, +layout: pattern, +title: Event-based Asynchronous, +folder: event-asynchronous, +permalink: /patterns/event-asynchronous/, +categories: Other, +tags:, + - Java, +---, +, +## Intent, +The Event-based Asynchronous Pattern makes available the advantages of multithreaded applications while hiding many, +of the complex issues inherent in multithreaded design. Using a class that supports this pattern can allow you to:-, +(1) Perform time-consuming tasks, such as downloads and database operations, "in the background," without interrupting your application. , +(2) Execute multiple operations simultaneously, receiving notifications when each completes. , +(3) Wait for resources to become available without stopping ("hanging") your application. , +(4) Communicate
[+++ b/service-layer/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/service-layer/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/BaseEntity.java, +public abstract class BaseEntity {, +, + /**, + * Indicates the unique id of this entity, + *, + * @return The id of the entity, or 'null' when not persisted, + */, + public abstract Long getId();, +, + /**, + * Set the id of this entity, + *, + * @param id The new id, + */, + public abstract void setId(Long id);, +, + /**, + * Get
[+++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.14.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * ({@link KingdomFactory}) and its implementations ({@link ElfKingdomFactory},, + * {@link OrcKingdomFactory})., + * <p>, + /**, + * Program entry point, + * @param args command line arguments, + */, + /**, + * Creates kingdom, + * @param factory, + */, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * ({@link KingdomFactory}) and its implementations ({@link ElfKingdomFactory},, + * {@link OrcKingdomFactory})., + * <p>, + /**, + * Program entry point, + * @param args command line arguments, + */, + /**, + * Creates kingdom, + * @param factory, + */, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Army.java, +/**, + * , +
[+++ b/thread-pool/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/thread-pool/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/thread-pool/src/main/java/com/iluwatar/threadpool/CoffeeMakingTask.java, + private static final int TIME_PER_CUP = 100;, +++ b/thread-pool/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/thread-pool/src/main/java/com/iluwatar/threadpool/CoffeeMakingTask.java, + private static final int TIME_PER_CUP = 100;, +++ b/thread-pool/src/main/java/com/iluwatar/threadpool/PotatoPeelingTask.java, + private static final int TIME_PER_POTATO = 200;, +++ b/thread-pool/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/thread-pool/src/main/java/com/iluwatar/threadpool/CoffeeMakingTask.java, + private static final int TIME_PER_CUP = 100;, +++ b/thread-pool/src/main/java/com/iluwatar/threadpool/PotatoPeelingTask.java, + private static final int TIME_PER_POTATO = 200;, +++
[+++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories:, + - pattern_cat, + - creational, +tags: pattern_tag, +---, +, +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +**Applicability:** Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple
[+++ b/dao/pom.xml, +++ b/dao/pom.xml, +++ /dev/null, +++ b/dao/pom.xml, +++ /dev/null, +++ b/dao/src/test/resources/log4j.xml, +<?xml version="1.0" encoding="UTF-8" ?>, +<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">, +<log4j:configuration debug="true", + xmlns:log4j='http://jakarta.apache.org/log4j/'>, +, + <appender name="console" class="org.apache.log4j.ConsoleAppender">, + <layout class="org.apache.log4j.PatternLayout">, + <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />, + </layout>, + </appender>, +, + <root>, + <level value="INFO" />, + <appender-ref ref="console" />, + </root>, +, +</log4j:configuration>, +++ b/dao/pom.xml, +++ /dev/null, +++ b/dao/src/test/resources/log4j.xml, +<?xml version="1.0" encoding="UTF-8" ?>, +<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">, +<log4j:configuration debug="true", + xmlns:log4j='http://jakarta.apache.org/log4j/'>, +, + <appender name="console" class="org.apache.log4j.ConsoleAppender">, + <layout class="org.apache.log4j.PatternLayout">, + <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />, + </layout>,
[+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/template-method/src/main/java/com/iluwatar/templatemethod/App.java, + * <p>, + * In this example {@link HalflingThief} contains {@link StealingMethod} that can be changed. , + * First the thief hits with {@link HitAndRunMethod} and then with {@link SubtleMethod}., + /**, + * Program entry point, + * @param args command line args, + */, +++ b/template-method/src/main/java/com/iluwatar/templatemethod/App.java, + * <p>, + * In this example {@link HalflingThief} contains {@link StealingMethod} that can be changed. , + * First the thief hits with {@link HitAndRunMethod} and then with {@link SubtleMethod}., + /**, + * Program entry point, + * @param args command line args, +
[+++ b/dependency-injection/pom.xml, + <dependency>, + <groupId>com.google.inject</groupId>, + <artifactId>guice</artifactId>, + <version>4.0</version>, + </dependency> , +++ b/dependency-injection/pom.xml, + <dependency>, + <groupId>com.google.inject</groupId>, + <artifactId>guice</artifactId>, + <version>4.0</version>, + </dependency> , +++ b/dependency-injection/src/main/java/com/iluwatar/App.java, +import com.google.inject.Guice;, +import com.google.inject.Injector;, +, + , + Injector injector = Guice.createInjector(new TobaccoModule());, + GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);, + guiceWizard.smoke();, +++ b/dependency-injection/pom.xml, + <dependency>, + <groupId>com.google.inject</groupId>, + <artifactId>guice</artifactId>, + <version>4.0</version>, + </dependency> , +++ b/dependency-injection/src/main/java/com/iluwatar/App.java, +import com.google.inject.Guice;, +import com.google.inject.Injector;, +, + , + Injector injector = Guice.createInjector(new TobaccoModule());, + GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);, + guiceWizard.smoke();, +++ b/dependency-injection/src/main/java/com/iluwatar/GuiceWizard.java, +package com.iluwatar;, +, +import javax.inject.Inject;, +, +public class GuiceWizard implements Wizard {, + ,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that, + * have a common theme without specifying their concrete classes. In normal usage, the client, + * software creates a concrete implementation of the abstract factory and then uses the generic, + * interface of the factory to create the concrete objects that are part of the theme. The client, + * does not know (or care) which concrete objects it gets from each of these internal factories,, + * since it uses only the generic interfaces of their
[+++ b/README.md, +++ b/README.md, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +++ b/README.md, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + return state > RUNNING;, +++ b/README.md, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + return state > RUNNING;, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +++ b/README.md, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, + return state > RUNNING;, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +++ b/bridge/src/test/java/com/iluwatar/bridge/AppTest.java, +++ b/README.md,
[+++ b/object-pool/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>object-pool</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/object-pool/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>object-pool</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/object-pool/src/main/java/com/iluwatar/App.java, +package com.iluwatar;
[+++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/ServiceAmbassador.java]
[+++ b/servant/etc/servant.jpg, +++ b/servant/etc/servant.jpg, +++ b/servant/etc/servant.svg, +<?xml version="1.0" encoding="utf-8"?>, +<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">, +<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" font-family="Arial" font-size="13" width="744" height="673">, + <desc>UML diagram java-design-patterns</desc>, + <g id="_pIQGQXleEeSMFa_mT0wMkw">, + <defs>, + <linearGradient id="greyGradient" x1="0%" y1="0%" x2="0%" y2="100%" spreadMethod="pad">, + <stop offset="0%" stop-color="#FFFFFF" stop-opacity="1" />, + <stop offset="100%" stop-color="#E5E5E5" stop-opacity="1" />, + , + </linearGradient>, + <linearGradient id="packageGradient" x1="0%" y1="0%" x2="0%" y2="100%" spreadMethod="pad">, + <stop offset="0%" stop-color="#FFFFFF" stop-opacity="1" />, + <stop offset="100%" stop-color="#EFE9DE" stop-opacity="1" />, + , + </linearGradient>, + , + </defs>, + <g id="_pIQGSXleEeSMFa_mT0wMkw">, + <rect x="2" y="42" width="225" height="80" rx="5" ry="0" fill="url(#greyGradient)" stroke="#CCCCCC" stroke-width="1"
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +---, +layout: pattern, +title: Data Bus, +folder: data-bus, +permalink: /patterns/data-bus/, +, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +, +Allows send of messages/events between components of an application, +without them needing to know about each other. They only need to know, +about the type of the message/event being sent., +, +![data bus pattern uml diagram](./etc/data-bus.urm.png "Data Bus pattern"), +, +## Applicability, +Use Data Bus pattern when, +, +* you want your components to decide themselves which messages/events they want to receive, +* you want to
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=SONAR_TOKEN]
