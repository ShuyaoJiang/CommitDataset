[+++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/main/proguard.pro, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/main/proguard.pro, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/main/proguard.pro, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10-bin.zip, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/main/proguard.pro, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10-bin.zip, +++ b/website/index.html, + <link href="https://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">, + <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>]
[+++ b/gradle.properties, +VERSION_NAME=8.6.1-SNAPSHOT]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +public final class ButterKnife {]
[+++ b/butterknife-sample/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/build.gradle, + 'core': "androidx.core:core:1.0.0",, + 'test': [, + 'runner': 'androidx.test:runner:1.1.0',, + 'rules': 'androidx.test:rules:1.1.0',, + ],, + jcenter(), +++ b/build.gradle, + 'core': "androidx.core:core:1.0.0",, + 'test': [, + 'runner': 'androidx.test:runner:1.1.0',, + 'rules': 'androidx.test:rules:1.1.0',, + ],, + jcenter(), +++ b/butterknife-annotations/build.gradle, + api deps.androidx.annotations, +++ b/build.gradle, + 'core': "androidx.core:core:1.0.0",, + 'test': [, + 'runner': 'androidx.test:runner:1.1.0',, + 'rules': 'androidx.test:rules:1.1.0',, + ],, + jcenter(), +++ b/butterknife-annotations/build.gradle, + api deps.androidx.annotations, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import androidx.annotation.AnimRes;, +++ b/build.gradle, + 'core': "androidx.core:core:1.0.0",, + 'test': [, + 'runner': 'androidx.test:runner:1.1.0',, + 'rules': 'androidx.test:rules:1.1.0',, + ],, + jcenter(), +++ b/butterknife-annotations/build.gradle, + api deps.androidx.annotations, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import androidx.annotation.AnimRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import androidx.annotation.ArrayRes;,
[+++ b/butterknife-sample/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/.travis.yml, + - build-tools-24.0.2, +++ b/.travis.yml, + - build-tools-24.0.2, +++ b/build.gradle, + buildToolsVersion = '24.0.2', + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/.travis.yml, + - build-tools-24.0.2, +++ b/build.gradle, + buildToolsVersion = '24.0.2', + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, + testCompile deps.robolectric, +++ b/.travis.yml, + - build-tools-24.0.2, +++ b/build.gradle, + buildToolsVersion = '24.0.2', + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, + testCompile deps.robolectric, +++ b/butterknife-integration-test/build.gradle, +++ b/.travis.yml, + - build-tools-24.0.2, +++ b/build.gradle, + buildToolsVersion = '24.0.2', + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, + testCompile deps.robolectric, +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=21, +++ b/.travis.yml, + - build-tools-24.0.2, +++ b/build.gradle, + buildToolsVersion = '24.0.2', + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle,
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}BindInt(R.integer.columns) int columns;, + * {@literal @}BindColor(R.color.error_red) int errorRed;]
[+++ b/.gitignore, +, +# Gradle, +.gradle, +jniLibs, +build, +local.properties, +reports, +++ b/.gitignore, +, +# Gradle, +.gradle, +jniLibs, +build, +local.properties, +reports, +++ b/.travis.yml, + - build-tools-23.0.1, + - android-23, +++ b/.gitignore, +, +# Gradle, +.gradle, +jniLibs, +build, +local.properties, +reports, +++ b/.travis.yml, + - build-tools-23.0.1, + - android-23, +++ b/build.gradle, +subprojects { project ->, +, + repositories {, + mavenCentral(), + }, +, + apply plugin: 'checkstyle', +, + task checkstyle(type: Checkstyle) {, + configFile rootProject.file('checkstyle.xml'), + source 'src/main/java', + ignoreFailures false, + showViolations true, + include '**/*.java', +, + classpath = files(), + }, +, + afterEvaluate {, + if
[+++ b/pom.xml, +++ b/pom.xml, +++ b/website/index.html, +--keep class **$$ViewInjector { *; }</pre>]
[+++ b/.travis.yml, +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/, + - $HOME/.android/build-cache]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-integration-test/build.gradle, + debug {, + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', + }, + }, +, + productFlavors {, + flavorDimensions 'runtime', +, + reflect {, + dimension 'runtime', + applicationIdSuffix '.reflect', + }, + codegen {, +
[+++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + * Group multiple views in a list or array. Operate on all of them at once with actions,, + @Bind(R.id.user) EditText username;, + @Bind(R.id.pass) EditText password;, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + * Group multiple views in a list or array. Operate on all of them at once with actions,, + @Bind(R.id.user) EditText username;, + @Bind(R.id.pass) EditText password;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.Bind;, + @Bind(R.id.title) TextView title;, + @Bind(R.id.subtitle) TextView subtitle;, + @Bind(R.id.hello) Button hello;, + @Bind(R.id.list_of_things) ListView listOfThings;, +
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PROTECTED;, + private static final ClassName UNBINDER =, + ClassName.get("butterknife", "ButterKnife", "ViewUnbinder");, + private String parentUnbinder;, + void setParentUnbinder(String parentUnbinder) {, + this.parentUnbinder = parentUnbinder;, + }, +, + String getParentUnbinder() {, + return parentUnbinder;, + }, +, + if (hasUnbinder()) {, + // Create unbinding class., + result.addType(createUnbinderClass());, + // Now we need to provide child classes to access and override unbinder implementations., + createUnbinderInternalAccessMethods(result);, + }, +, + TypeName generic = TypeVariableName.get("T");, + .addModifiers(PUBLIC, STATIC), + .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));, + if (parentUnbinder != null) {, + result.superclass(ParameterizedTypeName.get(, + ClassName.bestGuess(parentViewBinder + '.' + UnbinderBinding.UNBINDER_SIMPLE_NAME),, +
[+++ b/butterknife-sample/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife-sample/pom.xml, + <version>1.3.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.3.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.3.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.annotation.TargetApi;, +import android.os.Build;, + * There are three convenience methods for working with view collections:, + * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>, + /** A simple setter that can be apply a value to a list of views. */, + public interface Setter<T extends View, V> {, + /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */, + void set(T view, V value, int index);, +
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + private final List<ResourceBinding> resourceBindings;, + private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,, + Collection<ResourceBinding> resourceBindings, BindingSet parentBinding) {, + if (parentBinding != null) {, + result.superclass(parentBinding.bindingClassName);, + if (hasTargetField()) {, + if (!constructorNeedsView()) {, + if (hasViewBindings() || parentBinding == null) {, + if (constructorNeedsView()) {, + if (parentBinding != null) {, + if (parentBinding.constructorNeedsView()) {, + constructor.addStatement("super(target, source)");, + } else if (constructorNeedsView()) {, + constructor.addStatement("super(target, source.getContext())");, + } else {, + constructor.addStatement("super(target, context)");, + }, + constructor.addCode("\n");, + }, + if (hasTargetField()) {, + constructor.addStatement("this.target = target");, + constructor.addCode("\n");, + }, +, + if
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + } else {, + constructor.addParameter(CONTEXT, "context");, + if (parentBinding.bindNeedsView()) {, + invoke.add(", source");, + } else {, + invoke.add(", context");, + }, + if (bindNeedsView()) {, + invoke.add(", source");, + } else {, + invoke.add(", source.getContext()");, + }, + .addModifiers(PUBLIC, STATIC), + .addParameter(targetTypeName, "target"), + .addParameter(CONTEXT, "context");, + if (parentBinding.bindNeedsView()) {, + invoke.add(", source");, + } else if (bindNeedsView()) {, + invoke.add(", source.getContext()"); // We have a view but the parent only needs context., + } else {, + invoke.add(", context");, + }, + boolean hasView = bindNeedsView() || isFinal;, + boolean needsSourceToContext = bindNeedsTheme() &&
[+++ b/butterknife-sample/pom.xml, + <version>1.3.2</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.2</version>, +++ b/butterknife/pom.xml, + <version>1.3.2</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.2</version>, +++ b/butterknife/pom.xml, + <version>1.3.2</version>, +++ b/pom.xml, + <version>1.3.2</version>, + <tag>butterknife-parent-1.3.2</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + result.addMethod(createNewBindMethod(targetType));, + result.addMethod(createNewBindToTargetMethod());, + if (methodBindingsNeedFinder()) {, + constructor.addParameter(FINDER, "finder", FINAL);, + } else {, + }, + private MethodSpec createNewBindMethod(TypeName targetType) {, + private MethodSpec createNewBindToTargetMethod() {, + if (bindNeedsFinder()) {, + result.addParameter(FINDER, "finder"), + .addParameter(Object.class, "source");, + }, + if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {, + String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";, + builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, + result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());, + if (fieldBinding.requiresCast()) {, + private boolean methodBindingsNeedFinder() {, + for (ViewBindings viewBindings : viewIdMap.values()) {, + for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> entry, + : viewBindings.getMethodBindings().entrySet()) {, +
[+++ b/CHANGELOG.md, +Version 8.0.1 *(2016-04-27)*, +----------------------------, +, + * Fix: ProGuard rules now prevent obfuscation of only types which reference ButterKnife annotations., + * Eliminate some of the generated machinery when referenced from `final` types., +, +, +++ b/CHANGELOG.md, +Version 8.0.1 *(2016-04-27)*, +----------------------------, +, + * Fix: ProGuard rules now prevent obfuscation of only types which reference ButterKnife annotations., + * Eliminate some of the generated machinery when referenced from `final` types., +, +, +++ b/README.md, + compile 'com.jakewharton:butterknife:8.0.1', + apt 'com.jakewharton:butterknife-compiler:8.0.1', +++ b/CHANGELOG.md, +Version 8.0.1 *(2016-04-27)*, +----------------------------, +, + * Fix: ProGuard rules now prevent obfuscation of only
[+++ b/gradle.properties, +VERSION_NAME=8.0.2-SNAPSHOT]
[+++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-gradle-plugin/src/test/build.gradle, + compileSdkVersion 28, + sourceCompatibility = JavaVersion.VERSION_1_8, + targetCompatibility = JavaVersion.VERSION_1_8, + implementation "com.android.support:support-v4:28.0.0", +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-gradle-plugin/src/test/build.gradle, + compileSdkVersion 28, + sourceCompatibility = JavaVersion.VERSION_1_8, + targetCompatibility = JavaVersion.VERSION_1_8, + implementation "com.android.support:support-v4:28.0.0", +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java, + private static final Action<View> ALPHA_FADE = (view, index)
[+++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-bin.zip]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + private final List<FieldCollectionViewBinding> collectionBindings;, + Collection<FieldCollectionViewBinding> collectionBindings,, + this.collectionBindings = ImmutableList.copyOf(collectionBindings);, + for (FieldCollectionViewBinding binding : collectionBindings) {, + constructor.addStatement("$L", binding.render());, + for (FieldCollectionViewBinding binding : collectionBindings) {, + result.addStatement("target.$L = null", binding.name);, + static boolean requiresCast(TypeName type) {, + private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();, + void addFieldCollection(FieldCollectionViewBinding binding) {, + collectionBindings.add(binding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + private final List<FieldCollectionViewBinding> collectionBindings;, + Collection<FieldCollectionViewBinding> collectionBindings,, + this.collectionBindings = ImmutableList.copyOf(collectionBindings);, + for (FieldCollectionViewBinding binding : collectionBindings) {, + constructor.addStatement("$L", binding.render());, + for (FieldCollectionViewBinding binding : collectionBindings) {, + result.addStatement("target.$L = null", binding.name);, + static boolean requiresCast(TypeName type) {,
[+++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + * Group multiple views in a list using `@BindViews`. Operate on all of them at once with actions,, + * Eliminate resource lookups by using resource annotations on fields., + @BindView(R.id.user) EditText username;, + @BindView(R.id.pass) EditText password;, +, + @BindString(R.string.login_error), + String loginErrorMessage;, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + * Group multiple views in a list using `@BindViews`. Operate on all of them at once with actions,, + * Eliminate resource lookups by using resource annotations on fields., +
[+++ b/butterknife-sample/pom.xml, + <version>5.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.1</version>, +++ b/butterknife/pom.xml, + <version>5.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.1</version>, +++ b/butterknife/pom.xml, + <version>5.0.1</version>, +++ b/pom.xml, + <version>5.0.1</version>, + <tag>butterknife-parent-5.0.1</tag>]
[+++ /dev/null, +++ /dev/null, +++ b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties, +implementation-class=butterknife.plugin.ButterKnifePlugin, +++ /dev/null, +++ b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties, +implementation-class=butterknife.plugin.ButterKnifePlugin, +++ b/butterknife-sample-lib/build.gradle, +apply plugin: 'com.jakewharton.butterknife', +++ /dev/null, +++ b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties, +implementation-class=butterknife.plugin.ButterKnifePlugin, +++ b/butterknife-sample-lib/build.gradle, +apply plugin: 'com.jakewharton.butterknife', +++ b/settings.gradle, +//include ':butterknife-sample', +//include ':butterknife-sample-lib']
[+++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/README.md, + implementation 'com.jakewharton:butterknife:10.0.0', + annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0', + classpath 'com.jakewharton:butterknife-gradle-plugin:10.0.0', +++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/README.md, + implementation 'com.jakewharton:butterknife:10.0.0', + annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0', + classpath
[+++ b/butterknife/pom.xml, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/butterknife/pom.xml, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/butterknife/src/main/java/butterknife/Views.java, + static void inject(Object target, Object source, Finder finder) {, +++ b/butterknife/pom.xml, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/butterknife/src/main/java/butterknife/Views.java, + static void inject(Object target, Object source, Finder finder) {, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTestRunner.java, +package butterknife;, +, +import java.lang.reflect.Method;, +import org.junit.runners.model.InitializationError;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.shadows.ShadowApplication;, +, +public class ButterKnifeTestRunner extends RobolectricTestRunner {, + public ButterKnifeTestRunner(Class<?> testClass) throws InitializationError {, + super(testClass);, + }, +, + @Override public void setupApplicationState(Method
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + if (e instanceof InvocationTargetException) {, + e = (Exception) e.getCause();, + }]
[+++ b/.travis.yml, + - build-tools-24.0.2, +++ b/.travis.yml, + - build-tools-24.0.2, +++ b/build.gradle, + buildToolsVersion = '24.0.2']
[+++ b/butterknife-sample/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife-sample/pom.xml, + <version>2.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>2.0.0</version>, +++ b/butterknife/pom.xml, + <version>2.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>2.0.0</version>, +++ b/butterknife/pom.xml, + <version>2.0.0</version>, +++ b/pom.xml, + <version>2.0.0</version>, + <tag>butterknife-parent-2.0.0</tag>]
[+++ b/build.gradle, + // Other, + rxjava: 'io.reactivex:rxjava:1.1.2',, +, +++ b/build.gradle, + // Other, + rxjava: 'io.reactivex:rxjava:1.1.2',, +, +++ /dev/null, +++ b/build.gradle, + // Other, + rxjava: 'io.reactivex:rxjava:1.1.2',, +, +++ /dev/null, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +, + compile deps.rxjava, +++ b/build.gradle, + // Other, + rxjava: 'io.reactivex:rxjava:1.1.2',, +, +++ /dev/null, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +, + compile deps.rxjava, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +, +import java.util.LinkedHashSet;, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +, + private static final ClassName BUTTERKNIFE = ClassName.get("butterknife", "ButterKnife");, + private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");, + public static final String
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java, + return sdk >= 26;, + : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java, + return sdk >= 26;, + : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);, +++ b/butterknife/src/test/java/butterknife/BindFontTest.java, + + " target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"]
[+++ b/checkstyle.xml, + <property name="format" value="^\s*(for|if)\b[^ ]"/>]
[+++ b/.travis.yml, +script:, + - ./gradlew butterknife-gradle-plugin:install -Dorg.gradle.configureondemand=true &&, + ./gradlew build connectedCheck, +, +++ b/.travis.yml, +script:, + - ./gradlew butterknife-gradle-plugin:install -Dorg.gradle.configureondemand=true &&, + ./gradlew build connectedCheck, +, +++ b/build.gradle, + if (!project.name.equals('butterknife-gradle-plugin')) {, + }, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath 'com.android.tools.build:gradle:2.1.2', + classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', +def androidToolsVersion = '25.1.2', +, + androidGradle: 'com.android.tools.build:gradle:2.1.2',, + lint: "com.android.tools.lint:lint:$androidToolsVersion",, + lintApi: "com.android.tools.lint:lint-api:$androidToolsVersion",, + lintChecks: "com.android.tools.lint:lint-checks:$androidToolsVersion",, + lintTests: "com.android.tools.lint:lint-tests:$androidToolsVersion",, + // Third Party, + javaparser: 'com.github.javaparser:javaparser-core:2.4.0',, +, +++ b/.travis.yml, +script:, + - ./gradlew butterknife-gradle-plugin:install -Dorg.gradle.configureondemand=true &&, + ./gradlew build connectedCheck, +, +++ b/build.gradle, + if (!project.name.equals('butterknife-gradle-plugin')) {, +
[+++ b/butterknife-sample/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/.travis.yml, + - echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$ANDROID_HOME/licenses/android-sdk-license"]
[+++ b/gradle.properties, +VERSION_NAME=8.4.1-SNAPSHOT]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +import javax.lang.model.type.TypeMirror;, +import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;, + private final boolean isView;, + private final boolean isActivity;, + private final boolean isDialog;, + boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,, + this.isView = isView;, + this.isActivity = isActivity;, + this.isDialog = isDialog;, + if (isView) {, + result.addMethod(createBindingConstructorForView());, + } else if (isActivity) {, + result.addMethod(createBindingConstructorForActivity());, + } else if (isDialog) {, + result.addMethod(createBindingConstructorForDialog());, + }, + private MethodSpec createBindingConstructorForView() {, + MethodSpec.Builder builder = MethodSpec.constructorBuilder(), + .addAnnotation(UI_THREAD), + .addModifiers(PUBLIC), + .addParameter(targetTypeName, "target");, + if (constructorNeedsView()) {, + builder.addStatement("this(target, target)");, + }
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnFocusChange, + * @see OnItemSelected, + * @see OnPageChange, + * @see OnTextChanged, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnFocusChange, + * @see OnItemSelected, + * @see OnPageChange, + * @see OnTextChanged, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +import butterknife.internal.ListenerMethod;, + * unchecked. Corresponds to adding an {@link OnCheckedChangeListener OnCheckedChangeListener} to, + * the views specified., + * Any number of parameters from, + * {@link OnCheckedChangeListener#onCheckedChanged(android.widget.CompoundButton, boolean), + * onCheckedChanged} may be used on the method., +@Target(METHOD), +@Retention(CLASS), + callbacks = OnCheckedChanged.Callback.class, +), +public @interface OnCheckedChanged {, + int[] value();, + Callback callback() default Callback.CHECKED_CHANGED;, +, + enum
[+++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.1.3', +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Sep 02 22:21:42 PDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point
[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, + applyPlugin(featureVariants), + applyPlugin(libraryVariants), + is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), + is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), + private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, + // TODO proper task registered as source-generating?, + processResources.doLast {, + val pathToR = processResources.packageForR.replace('.', File.separatorChar), + FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, + processResources.packageForR, "R2"), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, + applyPlugin(featureVariants), + applyPlugin(libraryVariants), + is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), + is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), + private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, + // TODO proper task registered as source-generating?, + processResources.doLast {, + val pathToR = processResources.packageForR.replace('.', File.separatorChar), + FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, + processResources.packageForR, "R2"), +++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/butterknife-sample/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife-sample/pom.xml, + <version>4.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>4.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>4.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>4.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>4.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>4.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.example.butterknife.tests</groupId>, + <artifactId>method-cannot-have-dupliate-ids</artifactId>, + <version>HEAD-SNAPSHOT</version>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version>4.1.1.4</version>, + <scope>provided</scope>, + </dependency>, + <dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>@project.version@</version>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-compiler-plugin</artifactId>, + <version>3.0</version>, + <configuration>, + <source>1.5</source>, + <target>1.5</target>, + </configuration>, + </plugin>, + </plugins>, + </build>, +</project>, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>,
[+++ b/butterknife-annotations/build.gradle, +, +apply from: rootProject.file('gradle/gradle-mvn-push.gradle'), +++ b/butterknife-annotations/build.gradle, +, +apply from: rootProject.file('gradle/gradle-mvn-push.gradle'), +++ b/butterknife-annotations/gradle.properties, +POM_NAME=Butterknife Annotations, +POM_ARTIFACT_ID=butterknife-annotations, +POM_PACKAGING=jar]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + BindingClass(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {, + JavaFile brewJava() {, + return JavaFile.builder(bindingClassName.packageName(), createBindingClass()), + .addFileComment("Generated code from Butter Knife. Do not modify!"), + if (!bindNeedsView()) {, + // Add a delegating constructor with a target type + view signature for reflective use., + result.addMethod(createBindingViewDelegateConstructor(targetType));, + }, +, + private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {, + return MethodSpec.constructorBuilder(), + .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n ", + + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",, + bindingClassName, targetType, CONTEXT), + .addAnnotation(Deprecated.class), + .addModifiers(PUBLIC), + .addParameter(targetType, "target"), + .addParameter(VIEW, "source"), + .addStatement(("this(target, source.getContext())")), +
[+++ b/butterknife-sample/pom.xml, + <version>7.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>7.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>7.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>7.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>7.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>7.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String targetTypeAndroidX() default "";, +, + String typeAndroidX() default "";, +, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String targetTypeAndroidX() default "";, +, + String typeAndroidX() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + addViewBinding(constructor, binding, debuggable, useAndroidX);, + addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);, +
[+++ b/butterknife-sample/pom.xml, + <version>5.1.2</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.2</version>, +++ b/butterknife/pom.xml, + <version>5.1.2</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.2</version>, +++ b/butterknife/pom.xml, + <version>5.1.2</version>, +++ b/pom.xml, + <version>5.1.2</version>, + <tag>butterknife-parent-5.1.2</tag>]
[+++ b/butterknife/proguard-rules.txt, +# Retain generated class which implement ViewBinder., +, +# Prevent obfuscation of types which use ButterKnife annotations since the simple name, +# is used to reflectively look up the generated ViewBinder., +-keepclasseswithmembernames class * { @butterknife.* *; }]
[+++ b/build.gradle, +def androidToolsVersion = '25.2.0', +++ b/build.gradle, +def androidToolsVersion = '25.2.0', +++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java, +import com.android.tools.lint.detector.api.LintUtils;, +import com.intellij.psi.JavaElementVisitor;, +import com.intellij.psi.JavaRecursiveElementVisitor;, +import com.intellij.psi.PsiAnnotation;, +import com.intellij.psi.PsiClass;, +import com.intellij.psi.PsiElement;, +import com.intellij.psi.PsiExpression;, +import com.intellij.psi.PsiReferenceExpression;, +, +import java.util.Collections;, +import java.util.List;, +public class InvalidR2UsageDetector extends Detector implements Detector.JavaPsiScanner {, + @Override public List<Class<? extends PsiElement>> getApplicablePsiTypes() {, + return Collections.<Class<? extends PsiElement>>singletonList(PsiClass.class);, + @Override public JavaElementVisitor createPsiVisitor(final JavaContext context) {, + return new JavaElementVisitor() {, + @Override public void visitClass(PsiClass node) {, + node.accept(new R2UsageVisitor(context));, + private static class R2UsageVisitor extends JavaRecursiveElementVisitor {, + private final JavaContext context;, + R2UsageVisitor(JavaContext context) {, + this.context =
[+++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +import butterknife.compiler.ButterKnifeProcessor;, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +import butterknife.compiler.ButterKnifeProcessor;, +++ b/butterknife-sample/build.gradle, + sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, + targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +import butterknife.compiler.ButterKnifeProcessor;, +++ b/butterknife-sample/build.gradle, + sourceCompatibility =
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId();, + int tintAttributeId = binding.getTintAttributeId().value;, + binding.getName(), UTILS, binding.getId().code, tintAttributeId);, + UTILS, binding.getId().code);, + UTILS, binding.getMethod(), binding.getId().code);, + binding.getId().code);, + fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId();, + int tintAttributeId = binding.getTintAttributeId().value;, + binding.getName(), UTILS, binding.getId().code, tintAttributeId);, + UTILS, binding.getId().code);, + UTILS, binding.getMethod(), binding.getId().code);, + binding.getId().code);, + fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, + if (id == NO_ID.value) {, + ClassName rClassName = ClassName.get(packageName, "R", className);, + VarScanner scanner = new VarScanner(ids, rClassName);, + private final ClassName className;, + private VarScanner(Map<Integer, Id> ids, ClassName
[+++ b/butterknife-sample/pom.xml, + <version>7.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>7.0.0</version>, +++ b/butterknife/pom.xml, + <version>7.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>7.0.0</version>, +++ b/butterknife/pom.xml, + <version>7.0.0</version>, +++ b/pom.xml, + <version>7.0.0</version>, + <tag>butterknife-parent-7.0.0</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + return bind(target, sourceView);, + return bind(target, target);, + return bind(target, sourceView);, + return bind(target, sourceView);, + return bind(target, sourceView);, + /**, + * BindView annotated fields and methods in the specified {@code target} using the {@code source}, + * {@link View} as the view root., + *, + * @param target Target class for view binding., + * @param source View root on which IDs will be looked up., + */, + @NonNull @UiThread, + public static Unbinder bind(@NonNull Object target, @NonNull View source) {]
[+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + trySet(field, target, view);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + trySet(field, target, value);, + tryInvoke(method, target);, + tryInvoke(method, target, v);, + returnValue = tryInvoke(method, target);, + returnValue = tryInvoke(method, target, v);, + static void trySet(Field field, Object target, @Nullable Object value) {, + private static Object tryInvoke(Method method, Object target, Object... arguments) {, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + trySet(field, target,
[+++ b/butterknife/src/it/field-visibility/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/field-visibility/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/one-find-per-id/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/field-visibility/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/one-find-per-id/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/superclass/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/field-visibility/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/one-find-per-id/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/superclass/pom.xml, + <version>2.1</version>, +++ /dev/null, +++ b/butterknife/src/it/field-visibility/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/one-find-per-id/pom.xml, + <version>2.1</version>, +++ b/butterknife/src/it/superclass/pom.xml, + <version>2.1</version>, +++ /dev/null, +++ b/butterknife/src/it/superclass/src/test/java/butterknife/SuperclassTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE)]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import java.util.Arrays;, + int end = 0;, + for (int i = 0; i < views.length; i++) {, + T view = views[i];, + views[end++] = view;, + return Arrays.copyOfRange(views, 0, end);]
[+++ b/butterknife-sample/pom.xml, + <version>5.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.0</version>, +++ b/butterknife/pom.xml, + <version>5.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.0</version>, +++ b/butterknife/pom.xml, + <version>5.0.0</version>, +++ b/pom.xml, + <version>5.0.0</version>, + <tag>butterknife-parent-5.0.0</tag>]
[+++ b/butterknife-sample/pom.xml, + <version>1.1.1</version>, +++ b/butterknife-sample/pom.xml, + <version>1.1.1</version>, +++ b/butterknife/pom.xml, + <version>1.1.1</version>, +++ b/butterknife-sample/pom.xml, + <version>1.1.1</version>, +++ b/butterknife/pom.xml, + <version>1.1.1</version>, +++ b/pom.xml, + <version>1.1.1</version>, + <tag>butterknife-parent-1.1.1</tag>]
[+++ b/build.gradle, + 'compileSdk': 27,, + 'supportLibrary': '27.0.2',, + 'androidPlugin': '3.0.1',, + 'androidTools': '26.0.1',, + 'kotlin': '1.2.10',, + javaparser: 'com.github.javaparser:javaparser-core:3.5.7',, + truth: 'com.google.truth:truth:0.37',, + robolectric: 'org.robolectric:robolectric:3.6.1',, + compiletesting: 'com.google.testing.compile:compile-testing:0.15',, + 'service': 'com.google.auto.service:auto-service:1.0-rc4',, + 'common': 'com.google.auto:auto-common:0.9',, + 'guava': 'com.google.guava:guava:23.6-jre',, +++ b/build.gradle, + 'compileSdk': 27,, + 'supportLibrary': '27.0.2',, + 'androidPlugin': '3.0.1',, + 'androidTools': '26.0.1',, + 'kotlin': '1.2.10',, + javaparser: 'com.github.javaparser:javaparser-core:3.5.7',, + truth: 'com.google.truth:truth:0.37',, + robolectric: 'org.robolectric:robolectric:3.6.1',, + compiletesting: 'com.google.testing.compile:compile-testing:0.15',, + 'service': 'com.google.auto.service:auto-service:1.0-rc4',, + 'common': 'com.google.auto:auto-common:0.9',, + 'guava': 'com.google.guava:guava:23.6-jre',, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + 'compileSdk': 27,, + 'supportLibrary': '27.0.2',, + 'androidPlugin': '3.0.1',, + 'androidTools': '26.0.1',, + 'kotlin': '1.2.10',, + javaparser: 'com.github.javaparser:javaparser-core:3.5.7',, +
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +package butterknife.compiler;, +, +import android.content.res.Resources;, +import android.graphics.BitmapFactory;, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.TypeVariableName;, +import com.squareup.javapoet.WildcardTypeName;, +import java.lang.reflect.Field;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;, +import static java.util.Collections.singletonList;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PUBLIC;, +, +final class BindingClass {, + private static final ClassName FINDER = ClassName.get("butterknife.internal", "Finder");, + private static final ClassName VIEW_BINDER = ClassName.get("butterknife.internal", "ViewBinder");, + private static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, + private static final ClassName
[+++ b/CHANGELOG.md, +Version 4.0.0 *(In Development)*, +--------------------------------, +, +`Views` class is now named `ButterKnife`, +, + * New: Views are now only checked to be `null` once if at least one of the fields and/or methods, + lack the `@Optional` annotation., + * Fix: Do no emit redundant casts to `View` for methods., +, +, +++ b/CHANGELOG.md, +Version 4.0.0 *(In Development)*, +--------------------------------, +, +`Views` class is now named `ButterKnife`, +, + * New: Views are now only checked to be `null` once if at least one of the fields and/or methods, + lack the `@Optional` annotation., + * Fix:
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + + " was not found. If this view is optional add '@Optional' annotation.");]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + builder.add("\n");, + if (requiresCast(binding.getType())) {, + builder.add("($T) ", binding.getType());, + }, + if (binding.isRequired()) {, + builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, + } else {, + builder.add("finder.findOptionalView(source, $L)", ids[i]);, + }, + result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, + if (requiresCast(fieldBinding.getType())) {, + private static boolean requiresCast(TypeName type) {, + return !VIEW_TYPE.equals(type.toString());, + }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + builder.add("\n");, + if (requiresCast(binding.getType())) {, + builder.add("($T) ", binding.getType());, + }, + if (binding.isRequired()) {, + builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, + } else {, + builder.add("finder.findOptionalView(source, $L)", ids[i]);, + }, + result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, + if (requiresCast(fieldBinding.getType())) {,
[+++ b/.travis.yml]
[+++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +]
[+++ b/butterknife-integration-test/build.gradle, + androidTestCodegenAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/build.gradle, + androidTestCodegenAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java, +package com.example.butterknife.functional;, +, +import android.content.Context;, +import android.support.test.InstrumentationRegistry;, +import android.view.View;, +import android.view.ViewGroup;, +import android.widget.Button;, +import android.widget.FrameLayout;, +import android.widget.TextView;, +import butterknife.ButterKnife;, +import butterknife.OnClick;, +import butterknife.Optional;, +import butterknife.Unbinder;, +import com.example.butterknife.BuildConfig;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assume.assumeFalse;, +, +@SuppressWarnings("unused") // Used reflectively / by code gen., +public final class OnClickTest {, + static final class Simple {, + int clicks = 0;, +, + @OnClick(1) void click() {, + clicks++;, + }, + }, +, + @Test public void simple() {, + View tree =
[+++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java, +import java.util.Arrays;, + return end == length, + ? views, + : Arrays.copyOfRange(views, 0, end);, +++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java, +import java.util.Arrays;, + return end == length, + ? views, + : Arrays.copyOfRange(views, 0, end);, +++ b/butterknife-runtime/src/test/java/butterknife/UtilsTest.java, + assertThat(listFilteringNull("One", "Two", "Three")).containsExactly("One", "Two", "Three");, + @Test public void arrayFilteringNullRemovesNulls() {, + @Test public void arrayFilteringNullReturnsOriginalWhenNoNulls() {, + String[] input = { "One", "Two", "Three" };, + String[] actual = arrayFilteringNull(input);, + assertThat(actual).isSameAs(input);, + // Even though we got the same reference back check to ensure its contents weren't mutated., + assertThat(actual).asList().containsExactly("One", "Two", "Three");, + }, +]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnTouch, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnTouch, +++ b/butterknife/src/main/java/butterknife/OnTouch.java, +package butterknife;, +, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static android.view.View.OnTouchListener;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified., + * <pre><code>, + * {@literal @}OnTouch(R.id.example) void onTouch() {, + * Toast.makeText(this, "Touched!", LENGTH_SHORT).show();, + * }, + * </code></pre>, + * Any number of parameters from, + * {@link OnTouchListener#onTouch(android.view.View, android.view.MotionEvent) onTouch} may be used, + * on the method., + *, +
[+++ b/.travis.yml, +language: android, +android:, + components:, + - build-tools-20.0.0, + - android-16, + licenses:, + - android-sdk-license-5be876d5, +branches:, + except:, + - gh-pages]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., + defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., + defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., + defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is
[+++ b/build.gradle, + supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/build.gradle, + supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, + compile deps.supportAnnotations, +++ b/build.gradle, + supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, + compile deps.supportAnnotations, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.support.annotation.NonNull;, + @Override public void apply(@NonNull View view, int index) {, +++ b/build.gradle, + supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, + compile deps.supportAnnotations, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.support.annotation.NonNull;, + @Override public void apply(@NonNull View view, int index) {, +++ b/butterknife/build.gradle, + compile deps.supportAnnotations, +++ b/build.gradle, + supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, + compile deps.supportAnnotations, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.support.annotation.NonNull;, + @Override public void apply(@NonNull View view, int index) {, +++ b/butterknife/build.gradle, + compile deps.supportAnnotations, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java,
[+++ b/build.gradle, + 'supportLibrary': '27.1.1',, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, + 'kotlin': '1.2.61',, + truth: 'com.google.truth:truth:0.42',, + 'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/build.gradle, + 'supportLibrary': '27.1.1',, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, + 'kotlin': '1.2.61',, + truth: 'com.google.truth:truth:0.42',, + 'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/butterknife-gradle-plugin/build.gradle, + implementation deps.kotlin.stdLibJdk8, +++ b/build.gradle, + 'supportLibrary': '27.1.1',, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, + 'kotlin': '1.2.61',, + truth: 'com.google.truth:truth:0.42',, + 'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/butterknife-gradle-plugin/build.gradle, + implementation deps.kotlin.stdLibJdk8, +++ b/butterknife-integration-test/build.gradle, + disable 'UnknownNullness', +++ b/build.gradle, + 'supportLibrary': '27.1.1',, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, + 'kotlin': '1.2.61',, + truth: 'com.google.truth:truth:0.42',, + 'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/butterknife-gradle-plugin/build.gradle, + implementation
[+++ b/build.gradle, + 'rules': 'com.android.support.test:rules:1.0.1',, +++ b/build.gradle, + 'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, + testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', + testProguardFile 'src/androidTest/proguard.pro', + androidTestImplementation deps.junit, + androidTestImplementation deps.truth, + androidTestImplementation deps.support.test.runner, + androidTestImplementation deps.support.test.rules, +++ b/build.gradle, + 'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, + testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', + testProguardFile 'src/androidTest/proguard.pro', + androidTestImplementation deps.junit, + androidTestImplementation deps.truth, + androidTestImplementation deps.support.test.runner, + androidTestImplementation deps.support.test.rules, +++ /dev/null, +++ b/build.gradle, + 'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, + testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', + testProguardFile 'src/androidTest/proguard.pro', + androidTestImplementation deps.junit, + androidTestImplementation deps.truth, + androidTestImplementation deps.support.test.runner, + androidTestImplementation deps.support.test.rules, +++ /dev/null,
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + if (!isFinal) {, + result.addMethod(createNewBindToTargetMethod());, + }, + .addModifiers(PROTECTED, STATIC);, + result.addField(targetType, "target", PROTECTED);, + MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), + .addModifiers(PROTECTED), + .addParameter(targetType, "target");, + constructor.addStatement("super(target)");, + private void addFieldAndUnbindStatement(, + TypeSpec.Builder result,, + MethodSpec.Builder unbindMethod,, + result.addField(VIEW, fieldName);, + boolean requiresRemoval = !listenerClass.remover().isEmpty();, + result.addField(listenerClassName, listenerField);, + boolean needsUnbinder = bindNeedsUnbinder();, + if (needsUnbinder) {, + result.addStatement("$1T unbinder = new $1T(target)", getHierarchyUnbinder());, + }, +, + if (isFinal) {, + if (needsResources || needsUnbinder) {, + CodeBlock.Builder invoke = CodeBlock.builder().add("$N(target", BIND_TO_TARGET);, + if (needsUnbinder) invoke.add(", unbinder");, + }, + if (needsUnbinder) {, + result.addStatement("return unbinder");,
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-2-all.zip]
[+++ b/butterknife/src/main/java/butterknife/OnClick.java, + type = "butterknife.internal.DebouncingOnClickListener",, +++ b/butterknife/src/main/java/butterknife/OnClick.java, + type = "butterknife.internal.DebouncingOnClickListener",, +++ /dev/null, +++ b/butterknife/src/main/java/butterknife/OnClick.java, + type = "butterknife.internal.DebouncingOnClickListener",, +++ /dev/null, +++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java, +package butterknife.internal;, +, +import android.view.View;, +, +/**, + * A {@link View.OnClickListener} that enables debouncing of multiple clicks posted in a row., + *, + * Once a click is fired, a post is enqueued to the main thread looper queue and no further click, + * is allowed until that post is dequeued., + *, + * A click on one button disables all buttons., + *, + */, +public abstract class DebouncingOnClickListener implements
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +/**, + * View injection utilities. Use this class to simplify finding views and attaching listeners by, + * injecting them., + * <p>, + * Injecting views from your activity is as easy as:, + * <pre><code>, + * public class ExampleActivity extends Activity {, + * {@literal @}InjectView(R.id.title) EditText titleView;, + * {@literal @}InjectView(R.id.subtitle) EditText subtitleView;, + *, + * {@literal @}Override protected void onCreate(Bundle savedInstanceState) {, + * super.onCreate(savedInstanceState);, + * setContentView(R.layout.example_activity);, + * ButterKnife.inject(this);, + * }, + * }, + * </code></pre>, + * You can inject an {@link #inject(Activity) activity directly}
[+++ b/.travis.yml, + - extra-android-m2repository, +++ b/.travis.yml, + - extra-android-m2repository, +++ b/build.gradle, + supportv4: 'com.android.support:support-v4:23.0.1',, +++ b/.travis.yml, + - extra-android-m2repository, +++ b/build.gradle, + supportv4: 'com.android.support:support-v4:23.0.1',, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(value = R.drawable.placeholder, tint = R.attr.colorAccent), + * Drawable tintedPlaceholder;, +, + /** Color attribute resource ID that is used to tint the drawable. */, + int tint() default 0;, +++ b/.travis.yml, + - extra-android-m2repository, +++ b/build.gradle, + supportv4: 'com.android.support:support-v4:23.0.1',, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(value = R.drawable.placeholder, tint = R.attr.colorAccent), + * Drawable tintedPlaceholder;, +, + /** Color attribute resource ID that is used to tint the drawable.
[+++ b/.travis.yml, + - $HOME/.gradle, +, +++ b/.travis.yml, + - $HOME/.gradle, +, +++ b/build.gradle, + 'supportLibrary': '26.0.1',]
[+++ b/butterknife-sample/pom.xml, + <version>6.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>6.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>6.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>6.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>6.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>6.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, + private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, + private static final ClassName VIEW_BINDER =, + ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, + result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, + .addParameter(FINDER, "finder", FINAL), + builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, + asHumanDescription(singletonList(binding)));, + result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, + builder.build());, + builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, + listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, + private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, + private static final ClassName VIEW_BINDER =, + ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, + result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, + .addParameter(FINDER, "finder", FINAL),
[+++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + defaultReturn = "false", +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + defaultReturn = "false", +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +
[+++ b/build.gradle, + 'compileSdk': 28,, + 'supportLibrary': '28.0.0',, + 'kotlin': '1.2.70',, + 'annotations': "androidx.annotation:annotation:1.0.0",, +++ b/build.gradle, + 'compileSdk': 28,, + 'supportLibrary': '28.0.0',, + 'kotlin': '1.2.70',, + 'annotations': "androidx.annotation:annotation:1.0.0",, +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java, + @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;, +++ b/build.gradle, + 'compileSdk': 28,, + 'supportLibrary': '28.0.0',, + 'kotlin': '1.2.70',, + 'annotations': "androidx.annotation:annotation:1.0.0",, +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java, + @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;, +++ b/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java, + + " @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;\n", + + " target.holoGreenDark = ContextCompat.getColor(context, android.R.color.holo_green_dark);\n"]
[+++ b/butterknife-sample/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/butterknife-sample/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/butterknife-sample/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, + <tag>butterknife-parent-1.0.0</tag>]
[+++ b/checkstyle.xml]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, + private static final ClassName ANDROID_R = ClassName.get("android", "R");, +, + this.code = className.topLevelClassName().equals(ANDROID_R), + ? CodeBlock.of("$L.$N", className, resourceName), + : CodeBlock.of("$T.$N", className, resourceName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, + private static final ClassName ANDROID_R = ClassName.get("android", "R");, +, + this.code = className.topLevelClassName().equals(ANDROID_R), + ? CodeBlock.of("$L.$N", className, resourceName), + : CodeBlock.of("$T.$N", className, resourceName);, +++ b/butterknife-compiler/src/test/java/butterknife/RClassTest.java, + + " target.black = Utils.getColor(res, theme, android.R.color.black);\n", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, + private static final ClassName ANDROID_R = ClassName.get("android", "R");, +, + this.code = className.topLevelClassName().equals(ANDROID_R), + ? CodeBlock.of("$L.$N", className, resourceName), + : CodeBlock.of("$T.$N", className, resourceName);, +++ b/butterknife-compiler/src/test/java/butterknife/RClassTest.java, + + " target.black = Utils.getColor(res, theme, android.R.color.black);\n", +++
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import java.util.HashSet;, +import javax.lang.model.element.Name;, + private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();, + Name qualifiedName = enclosingElement.getQualifiedName();, + Name simpleName = element.getSimpleName();, + BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);, + BindView.class.getSimpleName(), qualifiedName, simpleName);, + QualifiedId qualifiedId = elementToQualifiedId(element, id);, + String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));, + String name = simpleName.toString();, + builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));, + private QualifiedId elementToQualifiedId(Element element, int id) {, + return new QualifiedId(elementUtils.getPackageOf(element).getQualifiedName().toString(), id);, + }, +, + QualifiedId qualifiedId = elementToQualifiedId(element, id);, + idVars.add(getId(qualifiedId));, + QualifiedId qualifiedId = elementToQualifiedId(element, id);, + builder.addResource(, + new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BOOL));, + QualifiedId qualifiedId = elementToQualifiedId(element, id);,
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.0.0', +++ b/.travis.yml, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-sample/build.gradle, + lintOptions {, + textReport true, + textOutput 'stdout', + }, +, +++ b/.travis.yml, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-sample/build.gradle, + lintOptions {, + textReport true, + textOutput 'stdout', + }, +, +++ b/butterknife/build.gradle, +, + lintOptions {, + textReport true, + textOutput 'stdout', + }, +++ b/.travis.yml, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-sample/build.gradle, + lintOptions {, + textReport true, + textOutput 'stdout', + }, +, +++ b/butterknife/build.gradle, +, + lintOptions {, + textReport true, + textOutput 'stdout', +
[+++ b/butterknife-sample/pom.xml, + <version>3.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>3.0.1</version>, +++ b/butterknife/pom.xml, + <version>3.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>3.0.1</version>, +++ b/butterknife/pom.xml, + <version>3.0.1</version>, +++ b/pom.xml, + <version>3.0.1</version>, + <tag>butterknife-parent-3.0.1</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + throw new RuntimeException("Unable to reset views for " + targetClass.getName(), e);, + throw new RuntimeException("Unable to inject views for " + targetClass.getName(), e);]
[+++ b/butterknife-sample/pom.xml, + <version>4.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>4.0.1</version>, +++ b/butterknife/pom.xml, + <version>4.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>4.0.1</version>, +++ b/butterknife/pom.xml, + <version>4.0.1</version>, +++ b/pom.xml, + <version>4.0.1</version>, + <tag>butterknife-parent-4.0.1</tag>]
[+++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/CHANGELOG.md, +Version 8.2.1 *(2016-07-11)*, +----------------------------, +, + * Fix: Do not emit `android.R` imports in generated code., + * Fix: Ensure the processor does not crash when scanning for `R` classes. This can occur when used in a, + Kotlin project., +, +, +++ b/CHANGELOG.md, +Version 8.2.1 *(2016-07-11)*, +----------------------------, +, + * Fix: Do not emit `android.R` imports in generated code., + * Fix: Ensure the processor does not crash when scanning for `R` classes. This can occur when used in a, + Kotlin project., +, +, +++ b/README.md, + compile 'com.jakewharton:butterknife:8.2.1', + apt 'com.jakewharton:butterknife-compiler:8.2.1', + classpath 'com.jakewharton:butterknife-gradle-plugin:8.2.1',
[+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(R.drawable.placeholder), + * Drawable placeholder;, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(R.drawable.placeholder), + * Drawable placeholder;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(R.drawable.placeholder), + * Drawable placeholder;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, + @Test public void propertyAppliedToEveryView() {, + @Test public void actionAppliedToEveryView() {, + @Test public void actionsAppliedToEveryView() {, + @Test public void setterAppliedToEveryView() {]
[+++ b/.travis.yml, +jdk: oraclejdk7, +, +before_install:, + - export TERM=dumb, + - sudo apt-get install -qq libstdc++6:i386 lib32z1, + - export COMPONENTS=build-tools-19.0.1,android-16,extra-android-m2repository, + - curl -L https://raw.github.com/embarkmobile/android-sdk-installer/version-1/android-sdk-installer | bash /dev/stdin --install=$COMPONENTS, + - source ~/.android-sdk-installer/env, +]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + /** @deprecated Compile against API 26 and use {@link View#findViewById(int)}. */, + @SuppressWarnings("UnusedDeclaration") // Public API., + @CheckResult @Deprecated, + return view.findViewById(id);, + /** @deprecated Compile against API 26 and use {@link Activity#findViewById(int)}. */, + @SuppressWarnings("UnusedDeclaration") // Public API., + @CheckResult @Deprecated, + return activity.findViewById(id);, + /** @deprecated Compile against API 26 and use {@link Dialog#findViewById(int)}. */, + @SuppressWarnings("UnusedDeclaration") // Public API., + @CheckResult @Deprecated, + return dialog.findViewById(id);]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +package butterknife;, +, +import android.support.annotation.AnimRes;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified animation resource ID., + * <pre><code>, + * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindAnim {, + /** Animation resource ID to which the field will be bound. */, + @AnimRes int value();, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +package butterknife;, +, +import android.support.annotation.AnimRes;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified
[+++ b/CHANGELOG.md, +Version 8.0.0 *(2016-04-25)*, +----------------------------, +, + * `@Bind` becomes `@BindView` and `@BindViews` (one view and multiple views, respectively)., + * Calls to `bind` now return an `Unbinder` instance which can be used to `null` references. This replaces, + the `unbind` API and adds support for being able to clear listeners., + * New: `@BindArray` binds `String`, `CharSequence`, and `int` arrays and `TypeArray` to fields., + * New: `@BindBitmap` binds `Bitmap` instances from resources to fields., + * `@BindDrawable` now supports a `tint` field which accepts a theme attribute., + * The runtime and compiler are now split
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Finding views from your activity is as easy as:, + * Binding can be performed directly on an {@linkplain #bind(Activity) activity}, a, + * Bind annotated fields and methods in the specified {@link Activity}. The current content, + * Bind annotated fields and methods in the specified {@link View}. The view and its children, + * Bind annotated fields and methods in the specified {@link Dialog}. The current content, + * Bind annotated fields and methods in the specified {@code target} using the {@code source}, + * Bind annotated fields and methods in the specified
[+++ b/sample/app/src/main/AndroidManifest.xml, + tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">, +++ b/sample/app/src/main/AndroidManifest.xml, + tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">, +++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java, +import android.annotation.SuppressLint;, + @SuppressLint("SetTextI18n") //, +++ b/sample/app/src/main/AndroidManifest.xml, + tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">, +++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java, +import android.annotation.SuppressLint;, + @SuppressLint("SetTextI18n") //, +++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java, +import android.annotation.SuppressLint;, + @SuppressLint("SetTextI18n") //]
[+++ b/butterknife-sample/pom.xml, + <version>1.2.0</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.0</version>, +++ b/butterknife/pom.xml, + <version>1.2.0</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.0</version>, +++ b/butterknife/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, + <tag>butterknife-parent-1.2.0</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + if (bindNeedsView()) {, + constructor.addParameter(VIEW, "source");, + if (parentBinding.bindNeedsView()) invoke.add(", source");, + .returns(UNBINDER);, + result.addParameter(VIEW, "source");, + boolean needsView = bindNeedsView();, + result.addStatement("$T context = source.getContext()", CONTEXT);, + result.addStatement("$T res = source.getContext().getResources()", RESOURCES);, + if (needsView) invoke.add(", source");, + if (parentBinding.bindNeedsView()) invoke.add(", source");, + builder.add("\n");, +, + boolean requiresCast = requiresCast(binding.getType());, + if (!requiresCast && !binding.isRequired()) {, + builder.add("source.findViewById($L)", ids.get(i).code);, + } else {, + builder.add("$T.find", UTILS);, + if (requiresCast) {, + if (binding.isRequired() || requiresCast) {, + if (requiresCast) {, + }, + CodeBlock.Builder builder = CodeBlock.builder(), + .add("target.$L = ", fieldBinding.getName());, +, + boolean
[+++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, + // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, + testCompile 'com.google.android:support-v4:r7', +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, + // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, + testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +@RunWith(RobolectricGradleTestRunner.class), +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, + // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, + testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +@RunWith(RobolectricGradleTestRunner.class),
[+++ b/CHANGELOG.md, +Version 2.0.1 *(2013-07-18)*, +----------------------------, +, + * New: Control debug logging via `Views.setDebug`., +, +, +++ b/CHANGELOG.md, +Version 2.0.1 *(2013-07-18)*, +----------------------------, +, + * New: Control debug logging via `Views.setDebug`., +, +, +++ b/butterknife-sample/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, + android:label="@string/app_name", + android:name=".SimpleApp">, +++ b/CHANGELOG.md, +Version 2.0.1 *(2013-07-18)*, +----------------------------, +, + * New: Control debug logging via `Views.setDebug`., +, +, +++ b/butterknife-sample/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, + android:label="@string/app_name", + android:name=".SimpleApp">, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +package com.example.butterknife;, +, +import android.app.Application;, +import butterknife.Views;, +, +public class SimpleApp extends Application {, + @Override public void onCreate() {, + super.onCreate();, + Views.setDebug(BuildConfig.DEBUG);, + },
[+++ b/.buildscript/deploy_snapshot.sh, + ./gradlew uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "ESbreW4FNMPQhV1zbFb9iBvhFWFbVHecaig3Si3+4nrJCMn9x4nqB18ZcU+Aviw67WQNcuSH4I0Hl08uknl+kzE/xKEfPLmu28bptXRCSued49aL11i2aQmRj5nqP2yxkinhtRGOQxzIo56NmFt7sIcEXODM3D5a6q7s9tlvPfw=", + - secure: "JWEeqx0CWBqAkjcREHUg3Ei8wxqp59HZag8EidSLwmekgPJQwipwuEeXMZyPCGJCP+4ijUirtS/hRApi37BW0LYdt+XR7dI1TSZ0HFLTLqSPfWfsUcjmGpmoqVUv8FLVhC+KA42YeEhqkEaCUW92gJeAyK8swxDqGHAPT/sfKRA="]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import java.lang.reflect.InvocationTargetException;, + if (e instanceof InvocationTargetException) {, + e = (Exception) e.getCause();, + }]
[+++ b/build.gradle, + supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/build.gradle, + supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, + static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, + static final ClassName CONTEXT_COMPAT =, + ClassName.get("android.support.v4.content", "ContextCompat");, + if (bindNeedsView()) {, + if (bindNeedsResource()) {, + constructor.addStatement("$T res = context.getResources()", RESOURCES);, + constructor.addStatement("target.$L = $T.getTintedDrawable(context, $L, $L)",, + constructor.addStatement("target.$L = $T.getDrawable(context, $L)", binding.getName(),, + CONTEXT_COMPAT, binding.getId().code);, + constructor.addStatement("$L", binding.render());, + return !(drawableBindings.isEmpty() && resourceBindings.isEmpty());, + if (!binding.id.qualifed) {, + /** True when this type's bindings use Resource directly instead of Context. */, + private boolean hasResourceBindingsNeedingResource() {, + for
[+++ b/butterknife-sample/pom.xml, + <version>5.1.0</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.0</version>, +++ b/butterknife/pom.xml, + <version>5.1.0</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.0</version>, +++ b/butterknife/pom.xml, + <version>5.1.0</version>, +++ b/pom.xml, + <version>5.1.0</version>, + <tag>butterknife-parent-5.1.0</tag>]
[+++ b/build.gradle, + 'androidTools': '26.2.0-rc03',, + classpath 'com.android.tools.build:gradle:3.2.0', +++ b/build.gradle, + 'androidTools': '26.2.0-rc03',, + classpath 'com.android.tools.build:gradle:3.2.0', +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "android.support.v4.view.ViewPager",, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + type = "android.support.v4.view.ViewPager.OnPageChangeListener",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/build.gradle, + 'androidTools': '26.2.0-rc03',, + classpath 'com.android.tools.build:gradle:3.2.0', +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "android.support.v4.view.ViewPager",, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + type = "android.support.v4.view.ViewPager.OnPageChangeListener",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String targetTypeAndroidX() default "";, + String typeAndroidX() default "";, +++ b/build.gradle, + 'androidTools': '26.2.0-rc03',, + classpath 'com.android.tools.build:gradle:3.2.0', +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "android.support.v4.view.ViewPager",, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + type = "android.support.v4.view.ViewPager.OnPageChangeListener",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++
[+++ b/butterknife-integration-test/src/androidTest/proguard.pro, +-dontnote **, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +-dontnote **, +++ b/butterknife-integration-test/src/main/proguard.pro, +-dontnote **, +-dontwarn **, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +-dontnote **, +++ b/butterknife-integration-test/src/main/proguard.pro, +-dontnote **, +-dontwarn **, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +-dontnote **, +++ b/butterknife-integration-test/src/main/proguard.pro, +-dontnote **, +-dontwarn **, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-bin.zip]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PRIVATE;, + } else if (!isFinal) {, + result.addMethod(createNewBindToTargetMethod());, + .addModifiers(isFinal ? PRIVATE : PROTECTED, STATIC);, + result.addField(targetType, "target", isFinal ? PRIVATE : PROTECTED);, + MethodSpec.Builder constructor = MethodSpec.constructorBuilder();, + if (!isFinal) {, + constructor.addModifiers(PROTECTED);, + }, + if (hasMethodBindings()) {, + constructor.addParameter(targetType, "target", FINAL);, + } else {, + constructor.addParameter(targetType, "target");, + }, +, + if (bindNeedsFinder()) {, + constructor.addParameter(FINDER, "finder");, + constructor.addParameter(Object.class, "source");, + }, + if (bindNeedsResources()) {, + constructor.addParameter(RESOURCES, "res");, + }, + if (bindNeedsTheme()) {, + constructor.addParameter(THEME, "theme");, + }, +, + CodeBlock.Builder invoke = CodeBlock.builder();, + invoke.add("super(target");, + if
[+++ b/butterknife-sample/pom.xml, + <version>5.1.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.1.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>5.1.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/gradle.properties, +, +org.gradle.jvmargs=-Xmx1536M]
[+++ b/build.gradle, + 'androidPlugin': '3.2.0-rc03',, + 'androidTools': '26.2.0-rc03',, +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc03',, + 'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc03',, + 'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc03',, + 'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String targetTypeAndroidX() default "";, +, + String typeAndroidX() default "";, +, +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc03',, + 'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +
[+++ b/gradle.properties, +VERSION_NAME=8.5.2-SNAPSHOT]
[+++ b/butterknife-compiler/build.gradle, +++ b/butterknife-compiler/build.gradle, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-compiler/build.gradle, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Jun 23 16:29:33 PDT 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-milestone-1-bin.zip]
[+++ b/butterknife/proguard-rules.txt, +-keep public class * implements butterknife.Unbinder { public <init>(**, android.view.View); }]
[+++ b/butterknife-sample/pom.xml, + <version>1.2.1</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.1</version>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.2.1</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.1</version>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, + <tag>butterknife-parent-1.2.1</tag>]
[+++ b/butterknife-sample/pom.xml, + <version>5.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>5.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/CHANGELOG.md, +Version 1.2.2 *(2013-03-11)*, +----------------------------, +, + * Fix: Prevent annotations on private classes., +, +, +++ b/CHANGELOG.md, +Version 1.2.2 *(2013-03-11)*, +----------------------------, +, + * Fix: Prevent annotations on private classes., +, +, +++ b/butterknife/src/it/class-not-private/invoker.properties, +invoker.buildResult=failure, +++ b/CHANGELOG.md, +Version 1.2.2 *(2013-03-11)*, +----------------------------, +, + * Fix: Prevent annotations on private classes., +, +, +++ b/butterknife/src/it/class-not-private/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/class-not-private/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.example.butterknife.tests</groupId>, + <artifactId>class-not-private</artifactId>, + <version>HEAD-SNAPSHOT</version>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version>4.1.1.4</version>, +
[+++ b/CHANGELOG.md, +Version 8.8.0 *(2017-08-04)*, +----------------------------, +, + * New: Processor option `butterknife.debuggable` controls whether debug information is generated. When, + specified as `false`, checks for required views being non-null are elided and casts are no longer guarded, + with user-friendly error messages. This reduces the amount of generated code for release builds at the, + expense of less friendly exceptions when something breaks., + * Deprecate the `findById` methods. Compile against API 26 and use the normal `findViewById` for the same, + functionality., + * Fix: Correct `@BindFont` code generation on pre-API 26 builds to pass a `Context`
[+++ b/butterknife/proguard-rules.txt, +-keep class butterknife.*, +-keepclasseswithmembernames class * { @butterknife.* <methods>; }, +-keepclasseswithmembernames class * { @butterknife.* <fields>; }]
[+++ b/gradle.properties, +VERSION_NAME=8.2.1-SNAPSHOT]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++
[+++ b/butterknife/src/it/optional/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.example.butterknife.tests</groupId>, + <artifactId>optional</artifactId>, + <version>HEAD-SNAPSHOT</version>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version>4.1.1.4</version>, + <scope>provided</scope>, + </dependency>, +, + <dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>@project.version@</version>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>4.10</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <version>2.1</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>fest-android</artifactId>, + <version>1.0.4</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +, + <build>, +
[+++ b/CHANGELOG.md, +Version 8.7.0 *(2017-07-07)*, +----------------------------, +, + * New: `@BindFont` annotation binds `Typeface` instances with an optional style. Requires support libraries, + 26.0.0-beta1 or newer., + * New: `@BindAnim` annotation binds `Animation` instances., + * New: Generate `R2` constants for animation, layout, menu, plurals, styles, and styleables., + * Fix: Properly catch and re-throw type cast exceptions when method binding arguments do not match., +, +, +++ b/CHANGELOG.md, +Version 8.7.0 *(2017-07-07)*, +----------------------------, +, + * New: `@BindFont` annotation binds `Typeface` instances with an optional style. Requires support libraries, + 26.0.0-beta1 or newer., + * New: `@BindAnim` annotation binds
[+++ /dev/null, +++ /dev/null, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +package butterknife.compiler;, +, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableMap;, +import com.squareup.javapoet.AnnotationSpec;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.WildcardTypeName;, +import java.lang.reflect.Field;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.TypeElement;, +, +import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;, +import static com.google.auto.common.MoreElements.getPackage;, +import static java.util.Collections.singletonList;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PRIVATE;, +import static javax.lang.model.element.Modifier.PUBLIC;, +, +/** A set of all the bindings requested by a single type. */, +final class BindingSet {, + static final ClassName UTILS
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import butterknife.internal.ButterKnifeProcessor;, + Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, + Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import butterknife.internal.ButterKnifeProcessor;, + Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, + Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +package butterknife.internal;, +, +import butterknife.InjectView;, +import butterknife.OnCheckedChanged;, +import butterknife.OnClick;, +import butterknife.OnEditorAction;, +import butterknife.OnFocusChanged;, +import butterknife.OnItemClick;, +import butterknife.OnItemLongClick;, +import butterknife.OnLongClick;, +import butterknife.Optional;, +import java.io.IOException;, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.io.Writer;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.Collection;, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import javax.annotation.processing.AbstractProcessor;, +import javax.annotation.processing.Filer;, +import javax.annotation.processing.ProcessingEnvironment;, +import javax.annotation.processing.RoundEnvironment;, +import javax.lang.model.SourceVersion;, +import javax.lang.model.element.Element;,
[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import java.util.concurrent.atomic.AtomicBoolean, + configureR2Generation(project, featureVariants), + configureR2Generation(project, libraryVariants), + is LibraryPlugin -> {, + project.extensions[LibraryExtension::class].run {, + configureR2Generation(project, libraryVariants), + }, + }, + is AppPlugin -> {, + project.extensions[AppExtension::class].run {, + configureR2Generation(project, applicationVariants), + }, + }, + private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {, + val outputDir = project.buildDir.resolve(, + "generated/source/r2/${variant.dirName}"), +, + val task = project.tasks.create("generate${variant.name.capitalize()}R2"), + task.outputs.dir(outputDir), + variant.registerJavaGeneratingTask(task, outputDir), +, + val once = AtomicBoolean(), + task.dependsOn(processResources), +, + // Though there might be multiple outputs, their R files are all the same. Thus, we only, + // need to configure
[+++ b/README.md, +<dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife-compiler</artifactId>, + <version>7.0.1</version>, + <optional>true</optional>, +</dependency>, +buildscript {, + repositories {, + mavenCentral(), + }, +, + dependencies {, + // ..., + classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', + }, +}, +, +// ..., +, +dependencies {, + apt 'com.jakewharton:butterknife-compiler:7.0.1', +}, +++ b/README.md, +<dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife-compiler</artifactId>, + <version>7.0.1</version>, + <optional>true</optional>, +</dependency>, +buildscript {, + repositories {, + mavenCentral(), + }, +, + dependencies {, + // ..., + classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', + }, +}, +, +// ..., +, +dependencies {, + apt 'com.jakewharton:butterknife-compiler:7.0.1', +}, +++ b/butterknife-compiler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">,
[+++ b/build.gradle, + supportv4: 'com.android.support:support-v4:24.0.0',, + supportAnnotations: 'com.android.support:support-annotations:24.0.0',, +++ b/build.gradle, + supportv4: 'com.android.support:support-v4:24.0.0',, + supportAnnotations: 'com.android.support:support-annotations:24.0.0',, +++ b/butterknife-integration-test/build.gradle, +apply plugin: 'com.android.application', +apply plugin: 'com.neenbedankt.android-apt', +, +android {, + compileSdkVersion rootProject.ext.compileSdkVersion, + buildToolsVersion rootProject.ext.buildToolsVersion, +, + compileOptions {, + sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, + targetCompatibility = rootProject.ext.targetCompatibilityVersion, + }, +, + defaultConfig {, + applicationId 'com.example.butterknife', + minSdkVersion rootProject.ext.minSdkVersion, + targetSdkVersion rootProject.ext.targetSdkVersion, + versionCode 1, + versionName '1.0.0', + }, +, + lintOptions {, + textReport true, + textOutput "stdout", + checkAllWarnings true, + warningsAsErrors true, + showAll true, + explainIssues true, + }, +, + buildTypes {, + debug {,
[+++ b/gradle.properties, +VERSION_NAME=10.0.1-SNAPSHOT]
[+++ b/gradle.properties, +VERSION_NAME=8.0.1-SNAPSHOT]
[+++ b/butterknife-sample/pom.xml, + <version>6.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>6.0.0</version>, +++ b/butterknife/pom.xml, + <version>6.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>6.0.0</version>, +++ b/butterknife/pom.xml, + <version>6.0.0</version>, +++ b/pom.xml, + <version>6.0.0</version>, + <tag>butterknife-parent-6.0.0</tag>]
[+++ b/CHANGELOG.md, + * New listeners!, + * `View`: `@OnLongClick` and `@OnFocusChanged`., + * `TextView`: `@OnEditorAction`., + * `AdapterView`: `@OnItemClick` and `@OnItemLongClick`., + * `CompoundButton`: `@OnCheckedChanged`., +++ b/CHANGELOG.md, + * New listeners!, + * `View`: `@OnLongClick` and `@OnFocusChanged`., + * `TextView`: `@OnEditorAction`., + * `AdapterView`: `@OnItemClick` and `@OnItemLongClick`., + * `CompoundButton`: `@OnCheckedChanged`., +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnCheckedChanged, + * @see OnEditorAction, + * @see OnFocusChanged, + * @see OnItemLongClick, +++ b/CHANGELOG.md, + * New listeners!, + * `View`: `@OnLongClick` and `@OnFocusChanged`., + * `TextView`: `@OnEditorAction`., + * `AdapterView`: `@OnItemClick` and `@OnItemLongClick`., + * `CompoundButton`: `@OnCheckedChanged`., +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +
[+++ b/butterknife-sample/pom.xml, + <version>1.3.1</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.1</version>, +++ b/butterknife/pom.xml, + <version>1.3.1</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.1</version>, +++ b/butterknife/pom.xml, + <version>1.3.1</version>, +++ b/pom.xml, + <version>1.3.1</version>, + <tag>butterknife-parent-1.3.1</tag>]
[+++ b/CHANGELOG.md, +Version 8.3.0 *(2016-08-23)*, +----------------------------, +, + * New: Support for Jack compiler in application projects., + * Fix: Generate ~20% less code and ~40% less methods., + * Fix: Allow `@BindView` to reference types which are generated by other annotation processors., + * Experimental: The generated view binding class can now be used directly. This allows ProGuard shrinking,, + optimization, and obfuscation to work without any rules being needed. For a class `Test`, the binding, + class will be named `Test_ViewBinding`. Calling its constructor will bind the instance passed in, and, + the create object is also
[+++ b/butterknife/pom.xml, +++ b/butterknife/pom.xml, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/CHANGELOG.md, +Version 8.5.1 *(2017-01-24)*, +----------------------------, +, + * Fix: Tweak bundled ProGuard rules to only retain the two-argument constructor accessed via reflection., +, +, +++ b/CHANGELOG.md, +Version 8.5.1 *(2017-01-24)*, +----------------------------, +, + * Fix: Tweak bundled ProGuard rules to only retain the two-argument constructor accessed via reflection., +, +, +++ b/README.md, + compile 'com.jakewharton:butterknife:8.5.1', + annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1', + classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.1', +++ b/CHANGELOG.md, +Version 8.5.1 *(2017-01-24)*, +----------------------------, +, + * Fix: Tweak bundled ProGuard rules to only retain the two-argument constructor accessed via reflection., +, +, +++ b/README.md, + compile 'com.jakewharton:butterknife:8.5.1', + annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1', + classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.1', +++ b/gradle.properties, +VERSION_NAME=8.5.1]
[+++ b/CHANGELOG.md, +Version 9.0.0 *(2019-01-03)*, +----------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, + AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, + required for the generated code but does not contain the code to reflectively look up the generated, + code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, + rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, + remain in the old `butterknife` artifact., + , + * New:
[+++ b/butterknife-sample/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, + repositories.maven {, + url = file.toURI(), + }, +}, +, +++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, + repositories.maven {, + url = file.toURI(), + }, +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, + repositories.maven {, + url = file.toURI(), + }, +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-2-all.zip]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., + defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., + defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., + defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is
[+++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +++ b/butterknife-runtime/src/test/java/butterknife/UtilsTest.java, +package butterknife;, +, +import butterknife.internal.Utils;, +import org.junit.Test;, +, +import static butterknife.internal.Utils.arrayFilteringNull;, +import static butterknife.internal.Utils.listFilteringNull;, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.fail;, +, +public final class UtilsTest {, + @Test public void listOfFiltersNull() {, + assertThat(listFilteringNull(null, null, null)).isEmpty();, + assertThat(listFilteringNull("One", null, null)).containsExactly("One");, + assertThat(listFilteringNull(null, "One", null)).containsExactly("One");, + assertThat(listFilteringNull(null, null, "One")).containsExactly("One");, + assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");, + assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");, + assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");, + }, +, + @Test public void arrayOfFiltersNull() {, + assertThat(arrayFilteringNull(null, null, null)).isEmpty();, + assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");, + assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");, + assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");, + assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");,
[+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String targetTypeAndroidX() default "";, +, + String typeAndroidX() default "";, +, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, + typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String targetTypeAndroidX() default "";, +, + String typeAndroidX() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + addViewBinding(constructor, binding, debuggable, useAndroidX);, + addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);, + ViewBinding bindings, boolean useAndroidX) {, + TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));, + String targetType = getTargetType(listenerClass, useAndroidX);, + if (!VIEW_TYPE.equals(targetType)) {, + unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),, + private static
[+++ b/gradle.properties, +VERSION_NAME=10.0.0-SNAPSHOT]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + JavaFile brewJava(int sdk, boolean debuggable) {, + return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), + private TypeSpec createType(int sdk, boolean debuggable) {, + result.addMethod(createBindingConstructor(sdk, debuggable));, + private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, + addViewBinding(constructor, binding, debuggable);, + constructor.addStatement("$L", binding.render(debuggable));, + private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, + if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, + if (!debuggable || requiredBindings.isEmpty()) {, + addFieldBinding(result, binding, debuggable);, + addMethodBindings(result, binding, debuggable);, + private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, + if (debuggable) {, + result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, + fieldBinding.getType());, + }, + } else
[+++ b/.travis.yml, +before_install:, + # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/.travis.yml, +before_install:, + # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import java.util.concurrent.atomic.AtomicBoolean, + configureR2Generation(project, featureVariants), + configureR2Generation(project, libraryVariants), + is LibraryPlugin -> {, + project.extensions[LibraryExtension::class].run {, + configureR2Generation(project, libraryVariants), + }, + }, + is AppPlugin -> {, + project.extensions[AppExtension::class].run {,
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + private final TypeName targetTypeName;, + BindingClass(String classPackage, String className, boolean isFinal, TypeName targetTypeName,, + this.targetTypeName = targetTypeName;, + .addTypeVariable(TypeVariableName.get("T", targetTypeName));, + .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + private final TypeName targetTypeName;, + BindingClass(String classPackage, String className, boolean isFinal, TypeName targetTypeName,, + this.targetTypeName = targetTypeName;, + .addTypeVariable(TypeVariableName.get("T", targetTypeName));, + .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.ParameterizedTypeName;, + TypeName targetType = TypeName.get(enclosingElement.asType());, + if (targetType instanceof ParameterizedTypeName) {, + targetType = ((ParameterizedTypeName) targetType).rawType;, + }, + String targetPackage = getPackageName(enclosingElement);, +, + String className = getClassName(enclosingElement, targetPackage) + BINDING_CLASS_SUFFIX;, + bindingClass = new BindingClass(targetPackage, className, isFinal, targetType, classFqcn);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java,
[+++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"), +++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java, +@ListenerClass("android.widget.AdapterView.OnItemLongClickListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"), +++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java, +@ListenerClass("android.widget.AdapterView.OnItemLongClickListener"), +++ b/butterknife/src/main/java/butterknife/OnLongClick.java, +@ListenerClass("android.view.View.OnLongClickListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"),
[+++ b/.travis.yml, + # Install the rest of tools (e.g., avdmanager), + - sdkmanager tools, + # Install the system image, + - sdkmanager "system-images;android-18;default;armeabi-v7a", + - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", + - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/.travis.yml, + # Install the rest of tools (e.g., avdmanager), + - sdkmanager tools, + # Install the system image, + - sdkmanager "system-images;android-18;default;armeabi-v7a", + - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", + - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/CHANGELOG.md, +++ b/.travis.yml, + # Install
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + return getViewBinder(target).bind(Finder.ACTIVITY, target, target);, + return getViewBinder(target).bind(Finder.VIEW, target, target);, + return getViewBinder(target).bind(Finder.DIALOG, target, target);, + return getViewBinder(target).bind(Finder.VIEW, target, source);, + return getViewBinder(target).bind(Finder.VIEW, target, source);, + return getViewBinder(target).bind(Finder.DIALOG, target, source);, + static ViewBinder<Object> getViewBinder(@NonNull Object target) {, + return findViewBinderForClass(targetClass);, + private static ViewBinder<Object> findViewBinderForClass(Class<?> cls) {, + //noinspection TryWithIdenticalCatches Resolves to API 19+ only type., + } catch (InstantiationException e) {, + throw new RuntimeException("Unable to create view binder for " + clsName, e);, + } catch (IllegalAccessException e) {, + throw new RuntimeException("Unable to create view binder for " + clsName, e);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +
[+++ b/butterknife-sample/pom.xml, + <version>5.1.1</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.1</version>, +++ b/butterknife/pom.xml, + <version>5.1.1</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.1</version>, +++ b/butterknife/pom.xml, + <version>5.1.1</version>, +++ b/pom.xml, + <version>5.1.1</version>, + <tag>butterknife-parent-5.1.1</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + return getViewBinder(target).bind(Finder.ACTIVITY, target, target);, + return getViewBinder(target).bind(Finder.VIEW, target, target);, + return getViewBinder(target).bind(Finder.DIALOG, target, target);, + return getViewBinder(target).bind(Finder.VIEW, target, source);, + return getViewBinder(target).bind(Finder.VIEW, target, source);, + return getViewBinder(target).bind(Finder.DIALOG, target, source);, + static ViewBinder<Object> getViewBinder(@NonNull Object target) {, + return findViewBinderForClass(targetClass);, + private static ViewBinder<Object> findViewBinderForClass(Class<?> cls) {, + //noinspection TryWithIdenticalCatches Resolves to API 19+ only type., + } catch (InstantiationException e) {, + throw new RuntimeException("Unable to create view binder for " + clsName, e);, + } catch (IllegalAccessException e) {, + throw new RuntimeException("Unable to create view binder for " + clsName, e);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +
[+++ b/butterknife-sample/pom.xml, + <version>7.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>7.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>7.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>7.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>7.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>7.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/build.gradle, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath 'com.android.tools.build:gradle:2.2.0', + androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/build.gradle, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath 'com.android.tools.build:gradle:2.2.0', + androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, + annotationProcessor project(':butterknife-compiler'), +++ b/build.gradle, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath 'com.android.tools.build:gradle:2.2.0', + androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, + annotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +++ b/build.gradle, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath 'com.android.tools.build:gradle:2.2.0', + androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, + annotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), + View root = View.inflate(context,
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId();, + int tintAttributeId = binding.getTintAttributeId().value;, + binding.getName(), UTILS, binding.getId().code, tintAttributeId);, + UTILS, binding.getId().code);, + UTILS, binding.getMethod(), binding.getId().code);, + binding.getId().code);, + fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId();, + int tintAttributeId = binding.getTintAttributeId().value;, + binding.getName(), UTILS, binding.getId().code, tintAttributeId);, + UTILS, binding.getId().code);, + UTILS, binding.getMethod(), binding.getId().code);, + binding.getId().code);, + fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, + if (id == NO_ID.value) {, + ClassName rClassName = ClassName.get(packageName, "R", className);, + VarScanner scanner = new VarScanner(ids, rClassName);, + private final ClassName className;, + private VarScanner(Map<Integer, Id> ids, ClassName
[+++ b/butterknife-sample/pom.xml, + <version>3.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>3.0.0</version>, +++ b/butterknife/pom.xml, + <version>3.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>3.0.0</version>, +++ b/butterknife/pom.xml, + <version>3.0.0</version>, +++ b/pom.xml, + <version>3.0.0</version>, + <tag>butterknife-parent-3.0.0</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + /** An action that can be applied to a list of views. */, + /** A setter that can apply a value to a list of views. */, + * Inject annotated fields and methods in the specified {@link Activity}. The current content, + * view is used as the view root., + * Inject annotated fields and methods in the specified {@link View}. The view and its children, + * are used as the view root., + * Inject annotated fields and methods in the specified {@code target} using the {@code source}, + * {@link
[+++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-invoker-plugin</artifactId>, + <configuration>, + <addTestClassPath>true</addTestClassPath>, + <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>, + <pomIncludes>, + <pomInclude>*/pom.xml</pomInclude>, + </pomIncludes>, + <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>, + <postBuildHookScript>verify</postBuildHookScript>, + <filterProperties>, + <project.version>${project.version}</project.version>, + </filterProperties>, + </configuration>, + <executions>, + <execution>, + <id>integration-test</id>, + <goals>, + <goal>install</goal>, + <goal>run</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-invoker-plugin</artifactId>, + <configuration>, + <addTestClassPath>true</addTestClassPath>, + <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>, + <pomIncludes>, + <pomInclude>*/pom.xml</pomInclude>, + </pomIncludes>, + <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>, + <postBuildHookScript>verify</postBuildHookScript>, + <filterProperties>, + <project.version>${project.version}</project.version>, + </filterProperties>, +
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + /** Apply the specified {@code actions} across the {@code array} of views. */, + @SafeVarargs, + public static <T extends View> void apply(T[] array, Action<? super T>... actions) {, + for (int i = 0, count = array.length; i < count; i++) {, + for (Action<? super T> action : actions) {, + action.apply(array[i], i);, + }, + }, + }, +, + /** Apply the specified {@code action} across the {@code array} of views. */, + public static <T extends View> void apply(T[] array, Action<? super T> action) {, + for (int i = 0,
[+++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, + their superclasses do., +, +, +++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, + their superclasses do., +, +, +++ b/butterknife/pom.xml, +++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, + their superclasses do., +, +, +++ b/butterknife/pom.xml, +++ b/butterknife/src/it/field-visibility/pom.xml, +, +, + <dependency>, + <groupId>junit</groupId>,
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * If a view is optional add the {@link Nullable @Nullable} annotation., + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, + + " was not found. If this view is optional add '@Nullable' annotation.");, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * If a view is optional add the {@link Nullable @Nullable} annotation., + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, + + " was not found. If this view is optional add '@Nullable' annotation.");, +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * @see Nullable, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * If a view is optional add the {@link Nullable @Nullable} annotation., + * {@literal @}Nullable @InjectView(R.id.title) TextView
[+++ b/.travis.yml, + - build-tools-24.0.1, + - $HOME/.gradle, +, +++ b/.travis.yml, + - build-tools-24.0.1, + - $HOME/.gradle, +, +++ b/build.gradle, + buildToolsVersion = '24.0.1']
[+++ b/.travis.yml, +before_install:, + # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/.travis.yml, +before_install:, + # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/butterknife-integration-test/build.gradle, + // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks., + checkReleaseBuilds false, +++ b/.travis.yml, +before_install:, + # Create and start
[+++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/settings.xml, +<settings>, + <servers>, + <server>, + <id>sonatype-nexus-snapshots</id>, + <username>${env.CI_DEPLOY_USERNAME}</username>, + <password>${env.CI_DEPLOY_PASSWORD}</password>, + </server>, + </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/settings.xml, +<settings>, + <servers>, + <server>, + <id>sonatype-nexus-snapshots</id>, + <username>${env.CI_DEPLOY_USERNAME}</username>, + <password>${env.CI_DEPLOY_PASSWORD}</password>, + </server>, + </servers>, +</settings>, +++ b/.travis.yml, + - secure: "WGiRUh1V4AWwBsCvMjjxYih+HiyOjlMS9Tz5UqxPVl7h6FccKDQmAaWVB46iwteZsgDQZBJNO+9gDrsUYuOQNW4XLSIEYdPoQAvRbBi+ExhaC/m3imsumw+SJd95MYePE2Z4UD5D4AUQi+QT/LnaVYps1n+IrGat8cSzC9Nhz6A=", + - secure: "PQFQlep/9TwKicd4PkAS2sB7WqeRyVP8ZQF5sPnyFCHpLrqYQmKOYXaNnxqAlBoJ+UOGYxfKxFcDp7jE/jSaTTDx+zPoG/eVt6X0wq65Qq2t/Mw2b9dPzHF/MYLDRag4D/g4YF59xg6gdP5jFojr7D58ZePmp+EOcBDOFduf+Nk=", +++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/settings.xml, +<settings>, + <servers>, + <server>, + <id>sonatype-nexus-snapshots</id>, + <username>${env.CI_DEPLOY_USERNAME}</username>, + <password>${env.CI_DEPLOY_PASSWORD}</password>,
[+++ b/build.gradle, + 'androidTools': '26.2.0',, +++ b/build.gradle, + 'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "androidx.viewpager.widget.ViewPager",, + legacyTargetType = "android.support.v4.view.ViewPager",, + type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, + legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/build.gradle, + 'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "androidx.viewpager.widget.ViewPager",, + legacyTargetType = "android.support.v4.view.ViewPager",, + type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, + legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String legacyTargetType() default "";, + String legacyType() default "";, +++ b/build.gradle, + 'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "androidx.viewpager.widget.ViewPager",, + legacyTargetType = "android.support.v4.view.ViewPager",, + type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, + legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String legacyTargetType() default "";, + String legacyType() default "";, +++
[+++ b/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java, +import com.android.tools.lint.detector.api.ApiKt;, +, + @Override public int getApi() {, + return ApiKt.CURRENT_API;, + }]
[+++ b/butterknife-sample/pom.xml, + <version>4.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>4.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>4.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>4.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>4.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>4.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/.gitignore]
[+++ b/butterknife-sample/pom.xml, + <version>6.1.0</version>, +++ b/butterknife-sample/pom.xml, + <version>6.1.0</version>, +++ b/butterknife/pom.xml, + <version>6.1.0</version>, +++ b/butterknife-sample/pom.xml, + <version>6.1.0</version>, +++ b/butterknife/pom.xml, + <version>6.1.0</version>, +++ b/pom.xml, + <version>6.1.0</version>, + <tag>butterknife-parent-6.1.0</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + if (hasUnqualifiedResourceBindings()) {, + /** True when this type's bindings use raw integer values instead of {@code R} references. */, + private boolean hasUnqualifiedResourceBindings() {, + for (FieldBitmapBinding binding : bitmapBindings) {, + if (!binding.getId().qualifed) {, + return true;, + }, + }, + for (FieldDrawableBinding binding : drawableBindings) {, + if (!binding.getId().qualifed) {, + return true;, + }, + }, + for (FieldResourceBinding binding : resourceBindings) {, + if (!binding.getId().qualifed) {, + return true;, + }, + }, + return false;, + }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + if (hasUnqualifiedResourceBindings()) {, + /** True when this
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + public static View bind(View target) {, + return target;, + public static View bind(Object target, View source) {, + return source;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + public static View bind(View target) {, + return target;, + public static View bind(Object target, View source) {, + return source;, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, + @Test public void bindingViewReturnsView() {, + View view = new View(Robolectric.application);, +, + View one = ButterKnife.bind(view);, + assertThat(one).isSameAs(view);, +, + View two = ButterKnife.bind(new Object(), view);, + assertThat(two).isSameAs(view);, + }, +]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + String fieldName = "target";, + if (!bindings.isBoundToRoot()) {, + fieldName = "view" + bindings.getId().value;, + }, + if (!bindings.isBoundToRoot()) {, + }, + String fieldName = "target";, + String bindName = "target";, +, + result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + String fieldName = "target";, + if (!bindings.isBoundToRoot()) {, + fieldName = "view" + bindings.getId().value;, + }, + if (!bindings.isBoundToRoot()) {, + }, + String fieldName = "target";, + String bindName = "target";, +, + result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +, + // Verify target type is valid for a binding without an id., +
[+++ b/CHANGELOG.md, +Version 9.0.0-rc2 *(2018-11-19)*, +--------------------------------, +, + * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This, + has a side-effect of removing support for Android Gradle plugin 3.0.x (and older)., + * Use Java 8 bytecode for all artifacts as announced in RC1 release notes., +, +, +++ b/CHANGELOG.md, +Version 9.0.0-rc2 *(2018-11-19)*, +--------------------------------, +, + * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This, + has a side-effect of removing support for Android Gradle plugin 3.0.x
[+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import
[+++ b/.travis.yml, + - build-tools-24.0.1, + - $HOME/.gradle, +, +++ b/.travis.yml, + - build-tools-24.0.1, + - $HOME/.gradle, +, +++ b/build.gradle, + buildToolsVersion = '24.0.1']
[+++ b/pom.xml]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + @SuppressWarnings("UnusedDeclaration") // Used by generated code.]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + builder.add("\nfinder.find");, + builder.add(binding.isRequired() ? "RequiredView" : "OptionalView");, + builder.add("AsType");, + builder.add("(source, $L", ids.get(i).code);, + if (binding.isRequired() || requiresCast(binding.getType())) {, + builder.add(", $S", asHumanDescription(singletonList(binding)));, + if (requiresCast(binding.getType())) {, + builder.add(", $T.class", binding.getRawType());, + }, + builder.add(")");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + builder.add("\nfinder.find");, + builder.add(binding.isRequired() ? "RequiredView" : "OptionalView");, + builder.add("AsType");, + builder.add("(source, $L", ids.get(i).code);, + if (binding.isRequired() || requiresCast(binding.getType())) {, + builder.add(", $S", asHumanDescription(singletonList(binding)));, + if (requiresCast(binding.getType())) {, + builder.add(", $T.class", binding.getRawType());, + }, + builder.add(")");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.ParameterizedTypeName;, + public ClassName getRawType() {, + if (type instanceof ParameterizedTypeName) {, + return ((ParameterizedTypeName) type).rawType;, + },
[+++ b/butterknife-integration-test/build.gradle, +apply plugin: 'com.android.application', +apply plugin: 'com.neenbedankt.android-apt', +, +android {, + compileSdkVersion rootProject.ext.compileSdkVersion, + buildToolsVersion rootProject.ext.buildToolsVersion, +, + compileOptions {, + sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, + targetCompatibility = rootProject.ext.targetCompatibilityVersion, + }, +, + defaultConfig {, + applicationId 'com.example.butterknife', + minSdkVersion rootProject.ext.minSdkVersion, + targetSdkVersion rootProject.ext.targetSdkVersion, + versionCode 1, + versionName '1.0.0', + }, +, + lintOptions {, + textReport true, + textOutput "stdout", + checkAllWarnings true, + warningsAsErrors true, + showAll true, + explainIssues true, + }, +, + buildTypes {, + debug {, + minifyEnabled true, + }, + }, +}, +, +dependencies {, + compile project(':butterknife'), + apt
[+++ b/CHANGELOG.md, +Version 9.0.0-rc1 *(2018-10-10)*, +--------------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, + AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, + required for the generated code but does not contain the code to reflectively look up the generated, + code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, + rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, + remain in the old `butterknife` artifact., + , + * New:
[+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + addViewBinding(constructor, binding, debuggable);, + addFieldAndUnbindStatement(bindingClass, result, binding);, + ViewBinding bindings) {, + TypeName listenerClassName = bestGuess(listenerClass.type());, + if (!VIEW_TYPE.equals(listenerClass.targetType())) {, + unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),, + private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, + addMethodBindings(result, binding, debuggable);, + private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, + boolean debuggable) {, + .superclass(ClassName.bestGuess(listener.type()));, + TypeName listenerClassName = bestGuess(listener.type());, + if (!VIEW_TYPE.equals(listener.targetType())) {, + result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,, +++
[+++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + if (isFinal) {, + } else {, + invoke.add("return new $T<>", unbinderClassName);, + }, +++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + if (isFinal) {, + } else {, + invoke.add("return new $T<>", unbinderClassName);, + }, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, + + " return new InnerUnbinder<>(target, finder,
[+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java, +++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId().value;, + fieldName = "view" + bindings.getId().value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId().value;, + fieldName = "view" + bindings.getId().value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, + throw new UnsupportedOperationException("Please use value or code explicitly");]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + @Override protected View findView(Object source, int id) {, + @Override protected View findView(Object source, int id) {, + @Override protected View findView(Object source, int id) {, + public static <T> T[] arrayOf(T... views) {, + public static <T> List<T> listOf(T... views) {, + return new ImmutableList<T>(views);, + public <T> T findRequiredView(Object source, int id, String who) {, + T view = findOptionalView(source, id, who);, + public <T> T findOptionalView(Object source, int id, String who) {, + View view = findView(source, id);, + return castView(view, id, who);, + }, +, + @SuppressWarnings("unchecked") // That's the point., +
[+++ b/CHANGELOG.md, +Version 9.0.0-rc3 *(2018-12-20)*, +--------------------------------, +, + * Fix: Correct generated resource annotation names when running Turkish locale., + * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy, + multiple times., +, +, +++ b/CHANGELOG.md, +Version 9.0.0-rc3 *(2018-12-20)*, +--------------------------------, +, + * Fix: Correct generated resource annotation names when running Turkish locale., + * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy, + multiple times., +, +, +++ b/README.md, + implementation 'com.jakewharton:butterknife:9.0.0-rc3', + annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc3', + classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc3', +++ b/CHANGELOG.md, +Version 9.0.0-rc3
[+++ b/README.md, + @InjectView(R.id.user) EditText username;, + @InjectView(R.id.pass) EditText password;, +, + @OnClick(R.id.submit) void submit() {, + // TODO call server..., + }, +++ b/README.md, + @InjectView(R.id.user) EditText username;, + @InjectView(R.id.pass) EditText password;, +, + @OnClick(R.id.submit) void submit() {, + // TODO call server..., + }, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.OnClick;, + @OnClick(R.id.hello) void sayHello() {, + Toast.makeText(SimpleActivity.this, "Hello, views!", LENGTH_SHORT).show();, + }, +, +++ b/README.md, + @InjectView(R.id.user) EditText username;, + @InjectView(R.id.pass) EditText password;, +, + @OnClick(R.id.submit) void submit() {, + // TODO call server..., + }, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.OnClick;, + @OnClick(R.id.hello) void sayHello() {, + Toast.makeText(SimpleActivity.this, "Hello, views!",
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + private final ClassName binderClassName;, + BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, + boolean isFinal) {, + this.binderClassName = binderClassName;, + this.unbinderClassName = unbinderClassName;, + Collection<JavaFile> brewJava() {, + TypeSpec.Builder result = TypeSpec.classBuilder(binderClassName), + result.superclass(ParameterizedTypeName.get(parentBinding.binderClassName, targetType));, + List<JavaFile> files = new ArrayList<>();, + TypeSpec unbinder = createUnbinderClass(targetType);, + files.add(JavaFile.builder(unbinderClassName.packageName(), unbinder), + .addFileComment("Generated code from Butter Knife. Do not modify!"), + .build(), + );, + files.add(JavaFile.builder(binderClassName.packageName(), result.build()), + .build());, +, + return files;, + .addModifiers(PUBLIC);, + MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), + .addModifiers(PUBLIC);, +, + .addModifiers(PUBLIC, STATIC);, + .add("$T.$N(target", parentBinding.binderClassName, BIND_TO_TARGET);, + return binderClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + private final
[+++ b/README.md, + repositories {, + mavenCentral(), + }, +++ b/README.md, + repositories {, + mavenCentral(), + }, +++ b/build.gradle, + supportv4: 'com.android.support:support-v4:24.1.0',, + supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ b/README.md, + repositories {, + mavenCentral(), + }, +++ b/build.gradle, + supportv4: 'com.android.support:support-v4:24.1.0',, + supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ b/README.md, + repositories {, + mavenCentral(), + }, +++ b/build.gradle, + supportv4: 'com.android.support:support-v4:24.1.0',, + supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ b/README.md, + repositories {, + mavenCentral(), + }, +++ b/build.gradle, + supportv4: 'com.android.support:support-v4:24.1.0',, + supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, + repositories {, + mavenCentral(), + }, +++
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + /** Apply the specified {@code actions} across the {@code array} of views. */, + @SafeVarargs, + public static <T extends View> void apply(T[] array, Action<? super T>... actions) {, + for (int i = 0, count = array.length; i < count; i++) {, + for (Action<? super T> action : actions) {, + action.apply(array[i], i);, + }, + }, + }, +, + /** Apply the specified {@code action} across the {@code array} of views. */, + public static <T extends View> void apply(T[] array, Action<? super T> action) {, + for (int i = 0,
[+++ b/gradle.properties, +VERSION_NAME=10.1.1-SNAPSHOT]
[+++ b/butterknife/src/it/field-visibility/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.example.butterknife.tests</groupId>, + <artifactId>field-visibility</artifactId>, + <version>HEAD-SNAPSHOT</version>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version>4.1.1.4</version>, + <scope>provided</scope>, + </dependency>, + <dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>@project.version@</version>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-compiler-plugin</artifactId>, + <version>3.0</version>, + <configuration>, + <source>1.5</source>, + <target>1.5</target>, + </configuration>, + </plugin>, + </plugins>, + </build>, +</project>, +++ b/butterknife/src/it/field-visibility/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">,
[+++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + @BindView(R.id.user) EditText username;, + @BindView(R.id.pass) EditText password;, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + @BindView(R.id.user) EditText username;, + @BindView(R.id.pass) EditText password;, +++ /dev/null, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + @BindView(R.id.user) EditText username;, + @BindView(R.id.pass) EditText password;, +++ /dev/null, +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + return new ImmutableList<>(filterNull(views));, + static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + return new ImmutableList<>(filterNull(views));, + static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java, + private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, + private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, + private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();, + private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();, + List<ListenerMethod> methods = new ArrayList<>();, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + return new ImmutableList<>(filterNull(views));, + static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java, + private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +
[+++ b/CHANGELOG.md, +Version 8.4.0 *(2016-08-26)*, +----------------------------, +, + * New: `@BindFloat` annotation for dimensions whose format is of type 'float'. See the annotation for more, + information., + * Generated constructors are now annotated with `@UiThread` and non-final, base classes `unbind()` methods, + are annotated with `@CallSuper`., +, +, +++ b/CHANGELOG.md, +Version 8.4.0 *(2016-08-26)*, +----------------------------, +, + * New: `@BindFloat` annotation for dimensions whose format is of type 'float'. See the annotation for more, + information., + * Generated constructors are now annotated with `@UiThread` and non-final, base classes `unbind()` methods, + are annotated with `@CallSuper`., +, +, +++
[+++ b/build.gradle, +++ b/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import com.android.build.gradle.internal.res.GenerateLibraryRFileTask, +import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask, + // TODO: switch to better API once exists in AGP (https://issuetracker.google.com/118668005), + val rFile =, + project.files(, + when (processResources) {, + is GenerateLibraryRFileTask -> processResources.textSymbolOutputFile, + is LinkApplicationAndroidResourcesTask -> processResources.textSymbolOutputFile, + else -> throw RuntimeException(, + "Minimum supported Android Gradle Plugin is 3.1.0"), + }), + .builtBy(processResources), + project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {, + it.outputDir = outputDir, + it.rFile = rFile, + it.useAndroidX = useAndroidX, + it.packageName = rPackage, + it.className = "R2", + variant.registerJavaGeneratingTask(it, outputDir), +++ b/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +, + /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */, + @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API., + public static <T extends View> T findById(Dialog dialog, int id) {, + return (T) dialog.findViewById(id);, + }, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +, + /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */, + @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API., + public static <T extends View> T findById(Dialog dialog, int id) {, + return (T) dialog.findViewById(id);, + }, +++ b/website/index.html, + To prevent ProGuard renaming
[+++ b/pom.xml, + <configuration>, + <additionalparam>-Xdoclint:none</additionalparam>, + </configuration>]
[+++ b/butterknife/proguard-rules.txt, +-keep public class * implements butterknife.internal.ViewBinder { public <init>(); }]
[+++ b/butterknife-sample/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>5.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + @Bind(R.id.user) EditText username;, + @Bind(R.id.pass) EditText password;, +++ b/.travis.yml, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + @Bind(R.id.user) EditText username;, + @Bind(R.id.pass) EditText password;, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.0.0', +++ b/.travis.yml, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + @Bind(R.id.user) EditText username;, + @Bind(R.id.pass) EditText password;, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-annotations/src/main/java/butterknife/Bind.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, +
[+++ b/butterknife-gradle-plugin/src/test/build.gradle, + main.java.srcDirs += '../../../../../butterknife-runtime/src/main/java', +++ b/butterknife-gradle-plugin/src/test/build.gradle, + main.java.srcDirs += '../../../../../butterknife-runtime/src/main/java', +++ b/butterknife-runtime/build.gradle, +apply plugin: 'com.android.library', +, +android {, + compileSdkVersion versions.compileSdk, +, + defaultConfig {, + minSdkVersion versions.minSdk, +, + testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +, + javaCompileOptions {, + annotationProcessorOptions {, + includeCompileClasspath = true, + }, + }, + }, +, + lintOptions {, + textReport true, + textOutput 'stdout', + // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks., + checkReleaseBuilds false, + }, +, + // TODO replace with https://issuetracker.google.com/issues/72050365 once released., + libraryVariants.all {, +
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import android.text.Editable;, +import android.text.TextWatcher;, + unbinder = parseOnTextChanged(target, method, source);, + if (unbinder != null) unbinders.add(unbinder);, +, + private static @Nullable Unbinder parseOnTextChanged(Object target, Method method, View source) {, + OnTextChanged onTextChanged = method.getAnnotation(OnTextChanged.class);, + if (onTextChanged == null) {, + return null;, + }, + validateMember(method);, + validateReturnType(method, void.class);, +, + List<TextView> views =, + findViews(source, onTextChanged.value(), isRequired(method), method.getName(), View.class);, +, + TextWatcher textWatcher;, + switch (onTextChanged.callback()) {, + case TEXT_CHANGED: {, + ArgumentTransformer argumentTransformer =, + createArgumentTransformer(method, ON_TEXT_CHANGED_TYPES);, + textWatcher = new EmptyTextWatcher()
[+++ b/gradle.properties, +VERSION_NAME=8.3.1-SNAPSHOT]
[+++ b/.travis.yml]
[+++ b/README.md, + classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +++ b/README.md, + classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +++ b/butterknife-annotations/src/main/java/butterknife/Optional.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Denote that the view specified by the injection is not required to be present., + * <pre><code>, + * {@literal @}Optional @OnClick(R.id.subtitle) void onSubtitleClick() {}, + * </code></pre>, + */, +@Retention(CLASS) @Target(METHOD), +public @interface Optional {, +}, +++ b/README.md, + classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +++ b/butterknife-annotations/src/main/java/butterknife/Optional.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Denote that the view specified by the
[+++ b/gradle.properties, +VERSION_NAME=8.7.1-SNAPSHOT]
[+++ b/gradle.properties, +VERSION_NAME=8.5.1-SNAPSHOT]
[+++ b/butterknife-sample/pom.xml, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/butterknife-sample/pom.xml, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/butterknife/pom.xml, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/butterknife-sample/pom.xml, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/butterknife/pom.xml, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/butterknife/src/it/field-visibility/pom.xml, + <version>2.0-rc1</version>, +++ b/butterknife-sample/pom.xml, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/butterknife/pom.xml, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/butterknife/src/it/field-visibility/pom.xml, + <version>2.0-rc1</version>,
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId();, + fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId();, + fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, + return String.valueOf(value);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId();, + fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, + return String.valueOf(value);, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, + JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", + + "package test;\n", + + "import android.app.Activity;\n", + + "import android.view.View;\n", + + "import butterknife.BindView;\n", + + "public class Test extends Activity {\n", + + " @BindView(1) View thing;\n", + + "}", + );, + JavaFileObject source =
[+++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, + testCompile deps.openglApi, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, + testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, + testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/butterknife/build.gradle, + testCompile deps.openglApi, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, + testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/butterknife/build.gradle, + testCompile deps.openglApi, +++ b/butterknife/src/test/resources/robolectric.properties,
[+++ b/butterknife-compiler/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>javapoet</artifactId>, + </dependency>, +++ b/butterknife-compiler/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>javapoet</artifactId>, + </dependency>, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import android.content.res.Resources;, +import android.graphics.BitmapFactory;, +import butterknife.ButterKnife;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.TypeVariableName;, +import com.squareup.javapoet.WildcardTypeName;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PUBLIC;, + JavaFile brewJava() {, + TypeSpec.Builder result = TypeSpec.classBuilder(className), + .addModifiers(PUBLIC), + .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));, + result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),, + TypeVariableName.get("T")));, + result.addSuperinterface(, + ParameterizedTypeName.get(ClassName.get(ButterKnife.ViewBinder.class),, + TypeVariableName.get("T")));, + result.addMethod(createBindMethod());, + result.addMethod(createUnbindMethod());, +, + return JavaFile.builder(classPackage, result.build()), + .addFileComment("Generated code from Butter Knife. Do not modify!"), + .build();, + }, +,
[+++ b/pom.xml, + <organization>, + <name>Square, Inc.</name>, + <url>http://squareup.com</url>, + </organization>, +, +++ b/pom.xml, + <organization>, + <name>Square, Inc.</name>, + <url>http://squareup.com</url>, + </organization>, +, +++ b/website/index.html, + <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept. , + To prevent ProGuard renaming classes that use @InjectView on a member field the <code>keepnames</code> option is used.</p>, +-keep class **$$ViewInjector { *; }, +-keepnames class * { @butterknife.InjectView *;}</pre>]
[+++ b/CHANGELOG.md, +Version 6.1.0 *(2015-01-29)*, +----------------------------, +, + * New: Support for injecting interface types everywhere that views were previously supported (e.g., `Checkable`)., + * Eliminate reflection-based method invocation for injection and resetting. This makes performace slightly faster, + (although if you are worried about the performance of Butter Knife you have other problems). The only reflection, + in the library is a single `Class.forName` lookup for each type., +, +, +++ b/CHANGELOG.md, +Version 6.1.0 *(2015-01-29)*, +----------------------------, +, + * New: Support for injecting interface types everywhere that views were previously supported (e.g., `Checkable`)., + * Eliminate reflection-based method
[+++ b/butterknife-sample/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip]
[+++ b/butterknife/pom.xml, + <dependency>, + <groupId>com.google.testing.compile</groupId>, + <artifactId>compile-testing</artifactId>, + <scope>test</scope>, + </dependency>, + <executions>, + <execution>, + <id>default-compile</id>, + <goals><goal>compile</goal></goals>, + <compilerArgument>-proc:none</compilerArgument>, + </execution>, + <execution>, + <id>default-test-compile</id>, + <goals><goal>testCompile</goal></goals>, + <configuration>, + <annotationProcessors>, + <annotationProcessor>butterknife.internal.InjectViewProcessor</annotationProcessor>, + </annotationProcessors>, + </configuration>, + </execution>, + </executions>, +++ b/butterknife/pom.xml, + <dependency>, + <groupId>com.google.testing.compile</groupId>, + <artifactId>compile-testing</artifactId>, + <scope>test</scope>, + </dependency>, + <executions>, + <execution>, + <id>default-compile</id>, + <goals><goal>compile</goal></goals>, + <compilerArgument>-proc:none</compilerArgument>, + </execution>, + <execution>, + <id>default-test-compile</id>, + <goals><goal>testCompile</goal></goals>, + <configuration>, + <annotationProcessors>, + <annotationProcessor>butterknife.internal.InjectViewProcessor</annotationProcessor>, + </annotationProcessors>, + </configuration>, + </execution>, + </executions>, +++ /dev/null, +++ b/butterknife/pom.xml, + <dependency>, + <groupId>com.google.testing.compile</groupId>, + <artifactId>compile-testing</artifactId>, +
[+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java, +import com.android.tools.lint.checks.infrastructure.TestFile;, +import org.junit.Test;, +import static com.android.tools.lint.checks.infrastructure.TestFiles.java;, +import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;, +, +public final class InvalidR2UsageDetectorTest {, + private static final TestFile BIND_TEST = java("", +, + private static final TestFile R2 = java("", + @Test public void noR2Usage() {, + lint() //, + .files(R2, //, + java("" //, + + "package sample;\n" //, + + "class NoR2Usage {}\n")) //, + .issues(InvalidR2UsageDetector.ISSUE) //, + .run() //, + .expectClean();, + @Test public void usesR2InAnnotations() {, + lint() //, + .files(R2, BIND_TEST, //, + java("", + + "}\n") //, + ) //, + .issues(InvalidR2UsageDetector.ISSUE) //, + .run() //, + .expectClean();,
[+++ b/gradle.properties, +VERSION_NAME=8.2.2-SNAPSHOT]
[+++ b/pom.xml, + <compile-test.version>0.5</compile-test.version>]
[+++ b/CHANGELOG.md, +Version 10.1.0 *(2019-02-13)*, +-----------------------------, +, + * New: Listeners which require return values (e.g., long click) can now be bound to methods returning `void`., + The default value of `true` will be returned in this case., + * New: Add support for `@OnTextChanged` and `@OnPageChange` to reflection backend., + * Remove enforcement of required views in the reflection backend. Most `@Nullable` annotations do not have, + runtime retention so they can't be checked at runtime with reflection. Instead of forcing everyone to find, + a new annotation, this enforcement is now dropped. While this might lead to
[+++ b/CHANGELOG.md, +Version 8.1.0 *(2016-06-14)*, +----------------------------, +, + * New: Change the structure of generated view binders to optimize for performance and generated code. This, + should result in faster binding (not that it's slow) and a reduction of methods., + * Fix: Call the correct method on `TextView` to unbind `@OnTextChanged` uses., + * Fix: Properly handle package names which contain uppercase letters., +, +, +++ b/CHANGELOG.md, +Version 8.1.0 *(2016-06-14)*, +----------------------------, +, + * New: Change the structure of generated view binders to optimize for performance and generated code. This, + should result in faster binding (not that
[+++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, + fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, + fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata =
[+++ b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java, +package butterknife.functional;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.support.test.InstrumentationRegistry;, +import butterknife.BindBitmap;, +import butterknife.BindBool;, +import butterknife.Unbinder;, +import butterknife.test.R;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.assertTrue;, +, +public final class BindBitmapTest {, + private final Context context = InstrumentationRegistry.getContext();, +, + static class Target {, + @BindBitmap(R.drawable.pixel) Bitmap actual;, + }, +, + @Test public void asBitmap() {, + Target target = new Target();, + Bitmap expected = BitmapFactory.decodeResource(context.getResources(), R.drawable.pixel);, +, + Unbinder unbinder = new BindBitmapTest$Target_ViewBinding(target, context);, + assertTrue(target.actual.sameAs(expected));, +, + unbinder.unbind();, + assertTrue(target.actual.sameAs(expected));, + }, +}, +++ b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java, +package butterknife.functional;, +, +import android.content.Context;,
[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, + applyPlugin(featureVariants), + applyPlugin(libraryVariants), + is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), + is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), + private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, + // TODO proper task registered as source-generating?, + processResources.doLast {, + val pathToR = processResources.packageForR.replace('.', File.separatorChar), + FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, + processResources.packageForR, "R2"), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, + applyPlugin(featureVariants), + applyPlugin(libraryVariants), + is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), + is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), + private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, + // TODO proper task registered as source-generating?, + processResources.doLast {, + val pathToR = processResources.packageForR.replace('.', File.separatorChar), + FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, + processResources.packageForR, "R2"), +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, + applyPlugin(featureVariants), +
[+++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/butterknife-integration-test/build.gradle, + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', + testImplementation deps.junit, + testImplementation deps.truth, + testImplementation deps.robolectric, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/butterknife-integration-test/build.gradle, + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', + testImplementation deps.junit, + testImplementation deps.truth, + testImplementation deps.robolectric, +++ b/butterknife-integration-test/proguard.pro, +-dontoptimize, +-dontobfuscate, +++ b/build.gradle, + robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/butterknife-integration-test/build.gradle, + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', + testImplementation deps.junit, + testImplementation deps.truth, + testImplementation deps.robolectric, +++ b/butterknife-integration-test/proguard.pro, +-dontoptimize, +-dontobfuscate, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java, +package com.example.butterknife;, +, +import android.test.ActivityInstrumentationTestCase2;, +import com.example.butterknife.library.SimpleActivity;, +, +public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {, + public SimpleActivityTest() {, + super(SimpleActivity.class);, + }, +,
[+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, + ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, + ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.ButterKnife;, + ButterKnife.reset(activity);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, + ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, + ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.ButterKnife;, + ButterKnife.reset(activity);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +import butterknife.ButterKnife;, + ButterKnife.reset(holder);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + private static final ClassName UNBINDER = ClassName.get("butterknife", "ButterKnife", "Unbinder");, + result.addMethod(createBindMethod());, +, + ClassName targetClassName = ClassName.bestGuess(targetClass);, +, + MethodSpec unbinderConstructor = MethodSpec.constructorBuilder(), + .addParameter(targetClassName, "target"), + .addStatement("this.$1N = $1N", "target"), + .build();, +, + .addSuperinterface(UNBINDER), + .addModifiers(PRIVATE, STATIC, FINAL), + .addField(targetClassName, "target", PRIVATE), + .addMethod(unbinderConstructor);, + // Even if there are no bindings we need to implement the interface method., + MethodSpec.Builder unbindMethod = MethodSpec.methodBuilder("unbind"), + .addModifiers(PUBLIC);, + // Throw exception if unbind called twice., + unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, + "Bindings already cleared.");, + addFieldAndUnbindStatement(result, unbindMethod, bindings);, + unbindMethod.addStatement("target.$L =
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;, + * {@literal @}ResourceColor(R.color.error_red) int errorRed;, + * </code></pre>, + @Override public Context getContext(Object source) {, + @Override public Context getContext(Object source) {, + @Override public Context getContext(Object source) {, + public abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;, +import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;, +, + if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, + if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;, +import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;, +, + if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, + if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, + public static final String ANDROID_PREFIX = "android.";, + public static final String JAVA_PREFIX = "java.";, + private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,, + Element element) {, + TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, + String qualifiedName = enclosingElement.getQualifiedName().toString();, +, + if (qualifiedName.startsWith(ANDROID_PREFIX)) {, + error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",, + annotationClass.getSimpleName(),
[+++ b/butterknife-sample/pom.xml, + <version>3.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>3.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>3.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>3.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>3.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>3.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + return getViewBinder(target).bind(Finder.ACTIVITY, target, source);]
[+++ b/butterknife-sample/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + /** Apply {@code action} to {@code view}. */, + public static <T extends View> void apply(T view, Action<? super T> action) {, + action.apply(view, 0);, + }, +, + /** Set {@code value} on {@code view} using {@code setter}. */, + public static <T extends View, V> void apply(T view, Setter<? super T, V> setter, V value) {, + setter.set(view, value, 0);, + }, +, + /** Apply {@code value} to {@code view} using {@code property}. */, + @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), + public static <T extends View, V> void apply(T view, Property<? super T, V> setter, V value)
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, + private final RScanner rScanner = new RScanner();, + Id resourceId = elementToId(element, BindView.class, id);, + String existingBindingName = builder.findExistingBindingName(resourceId);, + builder.addField(resourceId, new FieldViewBinding(name, type, required));, + builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind,, + new ArrayList<>(elementToIds(element, BindViews.class, ids).values()), required));, + Id resourceId = elementToId(element, BindAnim.class, id);, +, + builder.addResource(new FieldAnimationBinding(resourceId, name));, + Id resourceId = elementToId(element, BindBool.class, id);, + new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BOOL));, + Id resourceId = elementToId(element, BindColor.class, id);, + builder.addResource(new FieldResourceBinding(resourceId, name,, + Id resourceId = elementToId(element, BindDimen.class, id);, + builder.addResource(new FieldResourceBinding(resourceId, name,, + Id resourceId = elementToId(element, BindBitmap.class, id);, + new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BITMAP));, + Map<Integer,
[+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java, +import butterknife.Action;, +import butterknife.ViewCollections;, + private static final Action<View> ALPHA_FADE = new Action<View>() {, + ViewCollections.run(headerViews, ALPHA_FADE);]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + private static <T> T[] filterNull(T[] views) {, + int newSize = views.length;, + for (T view : views) {, + if (view == null) {, + newSize -= 1;, + }, + }, + if (newSize == views.length) {, + //noinspection unchecked, + T[] newViews = (T[]) new Object[newSize];, + int nextIndex = 0;, + for (T view : views) {, + if (view != null) {, + newViews[nextIndex++] = view;, + }, + }, + return newViews;, + }, +, + public static <T> T[] arrayOf(T... views) {, + return filterNull(views);, + }, + return
[+++ b/build.gradle, + 'androidTools': '26.2.0',, +++ b/build.gradle, + 'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "androidx.viewpager.widget.ViewPager",, + legacyTargetType = "android.support.v4.view.ViewPager",, + type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, + legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/build.gradle, + 'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "androidx.viewpager.widget.ViewPager",, + legacyTargetType = "android.support.v4.view.ViewPager",, + type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, + legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String legacyTargetType() default "";, + String legacyType() default "";, +++ b/build.gradle, + 'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, + targetType = "androidx.viewpager.widget.ViewPager",, + legacyTargetType = "android.support.v4.view.ViewPager",, + type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, + legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, + String legacyTargetType() default "";, + String legacyType() default "";, +++
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip]
[+++ b/butterknife-sample/pom.xml, + <version>5.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>5.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="JakeWharton/butterknife", +JDK="oraclejdk8", +BRANCH="master", +, +set -e, +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, + echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, + echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, + echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, + echo "Skipping snapshot deployment: wrong
[+++ b/gradle.properties, +VERSION_NAME=8.1.0-SNAPSHOT]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + /** DO NOT USE: Exposed for generated code. */, + public interface Injector<T> {, + void inject(Finder finder, T target, Object source);, + void reset(T target);, + }, +, + static final Map<Class<?>, Injector<Object>> INJECTORS =, + new LinkedHashMap<Class<?>, Injector<Object>>();, + static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {, + @Override public void inject(Finder finder, Object target, Object source) { }, + @Override public void reset(Object target) { }, + };, + Injector<Object> injector = findInjectorForClass(targetClass);, + if (injector != null) {, + injector.reset(target);, + throw new RuntimeException("Unable to reset views for " + target, e);,
[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, + String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, + String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + validateReturnType(method, void.class);, + final ArgumentTransformer argumentTransformer =, + createArgumentTransformer(method, ON_CLICK_TYPES);, + tryInvoke(method, target, argumentTransformer.transform(v));, + final boolean propagateReturn = validateReturnType(method, boolean.class);, + final ArgumentTransformer argumentTransformer =, + createArgumentTransformer(method, ON_LONG_CLICK_TYPES);, + Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));, + //noinspection SimplifiableConditionalExpression, + return propagateReturn, + ? (boolean) returnValue, + : false;, + validateReturnType(method, void.class);, + final ArgumentTransformer argumentTransformer =, + createArgumentTransformer(method, ON_ITEM_CLICK_TYPES);, + tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));, + /** Returns true when the return value should be propagated. Use a default otherwise.
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + throw new RuntimeException("Unable to reset views for " + target, e);, + throw new RuntimeException("Unable to inject views for " + target, e);]
[+++ b/build.gradle, + 'rules': 'com.android.support.test:rules:1.0.1',, +++ b/build.gradle, + 'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, + testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', + testProguardFile 'src/androidTest/proguard.pro', + androidTestImplementation deps.junit, + androidTestImplementation deps.truth, + androidTestImplementation deps.support.test.runner, + androidTestImplementation deps.support.test.rules, +++ b/build.gradle, + 'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, + testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', + testProguardFile 'src/androidTest/proguard.pro', + androidTestImplementation deps.junit, + androidTestImplementation deps.truth, + androidTestImplementation deps.support.test.runner, + androidTestImplementation deps.support.test.rules, +++ /dev/null, +++ b/build.gradle, + 'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, + testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', + testProguardFile 'src/androidTest/proguard.pro', + androidTestImplementation deps.junit, + androidTestImplementation deps.truth, + androidTestImplementation deps.support.test.runner, + androidTestImplementation deps.support.test.rules, +++ /dev/null,
[+++ b/gradle.properties, +VERSION_NAME=8.4.0-SNAPSHOT]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, + ARRAY("arrayFilteringNull"),, + LIST("listFilteringNull");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, + ARRAY("arrayFilteringNull"),, + LIST("listFilteringNull");, +++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +import static butterknife.internal.Utils.arrayFilteringNull;, +import static butterknife.internal.Utils.listFilteringNull;, + assertThat(listFilteringNull(null, null, null)).isEmpty();, + assertThat(listFilteringNull("One", null, null)).containsExactly("One");, + assertThat(listFilteringNull(null, "One", null)).containsExactly("One");, + assertThat(listFilteringNull(null, null, "One")).containsExactly("One");, + assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");, + assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");, + assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");, + assertThat(arrayFilteringNull(null, null, null)).isEmpty();, + assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");, + assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");, + assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");, + assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");, + assertThat(arrayFilteringNull("One", null, "Two")).asList().containsExactly("One", "Two");, + assertThat(arrayFilteringNull(null, "One", "Two")).asList().containsExactly("One", "Two");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, + ARRAY("arrayFilteringNull"),, + LIST("listFilteringNull");, +++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +import static butterknife.internal.Utils.arrayFilteringNull;, +import static butterknife.internal.Utils.listFilteringNull;, + assertThat(listFilteringNull(null, null,
[+++ b/build.gradle, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, + gradlePluginPortal(), + classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', + apply plugin: 'net.ltgt.errorprone', +, + dependencies {, + errorprone 'com.google.errorprone:error_prone_core:2.3.1', + }, +, + // TODO figure out why this causes codegen to fail in android tests., + //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), + //configurations.all { Configuration configuration ->, + // if (configuration.name.endsWith('nnotationProcessor')) {, + // configuration.dependencies.add(nullaway), + // }, + //}, + //, + //tasks.withType(JavaCompile) {, + // options.compilerArgs += [, + // '-Xep:NullAway:ERROR',, + // '-XepOpt:NullAway:AnnotatedPackages=butterknife',, + // ], + //}, +, +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, + gradlePluginPortal(), + classpath
[+++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +package butterknife;, +, +import android.support.annotation.DimenRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified dimension resource ID whose type is explicitly defined as float., + * <p>, + * This is different than simply reading a normal dimension as a float value which, + * {@link BindDimen @BindDimen} supports. The resource must be defined as a float like, + * {@code <item name="whatever" type="float">1.1</item>}., + * <pre><code>, + * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFloat {, +
[+++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-23.0.3, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-23.0.3, +++ b/build.gradle, + buildToolsVersion = '23.0.3']
[+++ b/pom.xml, + <compile-test.version>0.6</compile-test.version>]
[+++ b/README.md, +For the SNAPSHOT version:, +```xml, +<dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>7.0.2-SNAPSHOT</version>, +</dependency>, +<dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife-compiler</artifactId>, + <version>7.0.2-SNAPSHOT</version>, + <optional>true</optional>, +</dependency>, +```, +or Gradle:, +```groovy, +buildscript {, + dependencies {, + classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', + }, +}, +, +apply plugin: 'com.neenbedankt.android-apt', +, +dependencies {, + compile 'com.jakewharton:butterknife:7.0.2-SNAPSHOT', + apt 'com.jakewharton:butterknife-compiler:7.0.2-SNAPSHOT', +}, +```, +, +++ b/README.md, +For the SNAPSHOT version:, +```xml, +<dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>7.0.2-SNAPSHOT</version>, +</dependency>, +<dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife-compiler</artifactId>, + <version>7.0.2-SNAPSHOT</version>, + <optional>true</optional>, +</dependency>, +```, +or Gradle:, +```groovy, +buildscript {, + dependencies {, + classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', + }, +}, +, +apply plugin:
[+++ b/.travis.yml, + - build-tools-25.0.2, + - android-25, +++ b/.travis.yml, + - build-tools-25.0.2, + - android-25, +++ b/build.gradle, + targetSdkVersion = 25, + compileSdkVersion = 25, + buildToolsVersion = '25.0.2', +def supportLibraryVersion = '25.1.0', + javapoet: 'com.squareup:javapoet:1.8.0',]
[+++ b/butterknife-sample/pom.xml, + <version>1.1.0</version>, +++ b/butterknife-sample/pom.xml, + <version>1.1.0</version>, +++ b/butterknife/pom.xml, + <version>1.1.0</version>, +++ b/butterknife-sample/pom.xml, + <version>1.1.0</version>, +++ b/butterknife/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>, + <tag>butterknife-parent-1.1.0</tag>]
[+++ b/butterknife-sample/pom.xml, + <version>1.2.2</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.2</version>, +++ b/butterknife/pom.xml, + <version>1.2.2</version>, +++ b/butterknife-sample/pom.xml, + <version>1.2.2</version>, +++ b/butterknife/pom.xml, + <version>1.2.2</version>, +++ b/pom.xml, + <version>1.2.2</version>, + <tag>butterknife-parent-1.2.2</tag>]
[+++ b/build.gradle, + supportTestRunner: 'com.android.support.test:runner:0.5',, + autocommon: 'com.google.auto:auto-common:0.6',, +, +, + butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",, + butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion", +++ b/build.gradle, + supportTestRunner: 'com.android.support.test:runner:0.5',, + autocommon: 'com.google.auto:auto-common:0.6',, +, +, + butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",, + butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion", +++ b/butterknife-compiler/build.gradle, +++ b/build.gradle, + supportTestRunner: 'com.android.support.test:runner:0.5',, + autocommon: 'com.google.auto:auto-common:0.6',, +, +, + butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",, + butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion", +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + JavaFile brewJava(int sdk) {, + return JavaFile.builder(bindingClassName.packageName(), createType(sdk)), + private TypeSpec createType(int sdk) {, + result.addMethod(createBindingConstructor(targetTypeName, sdk));, + private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {, + if (hasResourceBindingsNeedingResource(sdk)) {, + constructor.addStatement("$L", binding.render(sdk));, + private boolean hasResourceBindingsNeedingResource(int sdk) {, + if (binding.requiresResources(sdk)) {, +++ b/build.gradle,
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + /** Apply the specified {@code actions} across the {@code list} of views. */, + @SafeVarargs, + public static <T extends View> void apply(List<T> list, Action<? super T>... actions) {, + for (int i = 0, count = list.size(); i < count; i++) {, + for (Action<? super T> action : actions) {, + action.apply(list.get(i), i);, + }, + }, + }, +, + /** Apply {@code actions} to {@code view}. */, + @SafeVarargs, + public static <T extends View> void apply(T view, Action<? super T>... actions) {, + for (Action<? super T> action : actions) {,
[+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, + private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, + @Override public void apply(View view, int index) {, + AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);, + alphaAnimation.setFillBefore(true);, + alphaAnimation.setDuration(500);, + alphaAnimation.setStartOffset(index * 100);, + view.startAnimation(alphaAnimation);, + }, + };, +, + @InjectViews({ R.id.title, R.id.subtitle, R.id.hello }), + List<View> headerViews;, +, + ButterKnife.apply(headerViews, ALPHA_FADE);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, + private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, + @Override public void apply(View view, int
[+++ b/butterknife-sample/pom.xml, + <version>1.3.0</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.0</version>, +++ b/butterknife/pom.xml, + <version>1.3.0</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.0</version>, +++ b/butterknife/pom.xml, + <version>1.3.0</version>, +++ b/pom.xml, + <version>1.3.0</version>, + <tag>butterknife-parent-1.3.0</tag>]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(METHOD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(METHOD), +@Retention(RUNTIME), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import static java.util.Collections.singletonList;, +, + for (Method method : targetClass.getDeclaredMethods()) {, + Unbinder unbinder = parseOnClick(target, method, source);, + if (unbinder == null) unbinder = parseOnLongClick(target, method, source);, +, + if (unbinder != null) {, + unbinders.add(unbinder);, + }, + }, + private static @Nullable Unbinder parseOnClick(final Object target, final Method method,, + View source) {, + OnClick onClick
[+++ b/butterknife/build.gradle, + androidTestAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife/build.gradle, + androidTestAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java, +package butterknife.functional;, +, +import android.content.Context;, +import android.support.test.InstrumentationRegistry;, +import butterknife.BindArray;, +import butterknife.Unbinder;, +import butterknife.test.R;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +, +public final class BindArrayTest {, + private final Context context = InstrumentationRegistry.getContext();, +, + static class StringArrayTarget {, + @BindArray(R.array.string_one_two_three) String[] actual;, + }, +, + @Test public void asStringArray() {, + StringArrayTarget target = new StringArrayTarget();, + String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);, +, + Unbinder unbinder = new BindArrayTest$StringArrayTarget_ViewBinding(target, context);, + assertThat(target.actual).isEqualTo(expected);, +, + unbinder.unbind();, + assertThat(target.actual).isEqualTo(expected);, + }, +, + static class IntArrayTarget {, + @BindArray(R.array.int_one_two_three)
[+++ b/butterknife/src/it/generic-superclass/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.example.butterknife.tests</groupId>, + <artifactId>generic-superclass</artifactId>, + <version>HEAD-SNAPSHOT</version>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version>4.1.1.4</version>, + <scope>provided</scope>, + </dependency>, +, + <dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>@project.version@</version>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>4.10</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <version>2.1</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>fest-android</artifactId>, + <version>1.0.4</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +, + <build>, +
[+++ b/README.md, +View "injection" library for Android which uses annotation processing to generate boilerplate code, +for you., +, + * Eliminate `findViewById` calls by using `@InjectView` on fields., + * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,, + setters, or properties., + * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others., +++ b/README.md, +View "injection" library for Android which uses annotation processing to generate boilerplate code, +for you., +, + * Eliminate `findViewById` calls by using `@InjectView` on fields., + * Group multiple views in
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + JavaFile brewJava(int sdk, boolean debuggable) {, + return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), + private TypeSpec createType(int sdk, boolean debuggable) {, + result.addMethod(createBindingConstructor(sdk, debuggable));, + private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, + addViewBinding(constructor, binding, debuggable);, + constructor.addStatement("$L", binding.render(debuggable));, + private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, + if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, + if (!debuggable || requiredBindings.isEmpty()) {, + addFieldBinding(result, binding, debuggable);, + addMethodBindings(result, binding, debuggable);, + private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, + if (debuggable) {, + result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, + fieldBinding.getType());, + }, + } else
[+++ b/.travis.yml, + - oraclejdk7, +++ b/.travis.yml, + - oraclejdk7, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + @BindView(R.id.user) EditText username;, + @BindView(R.id.pass) EditText password;, +++ b/.travis.yml, + - oraclejdk7, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + @BindView(R.id.user) EditText username;, + @BindView(R.id.pass) EditText password;, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:1.3.1', +++ b/.travis.yml, + - oraclejdk7, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + @BindView(R.id.user) EditText username;, + @BindView(R.id.pass) EditText password;, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:1.3.1', +++ /dev/null, +++ b/.travis.yml, + - oraclejdk7, +++ b/README.md,
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +, + ViewInjector injector = targetClassMap.get(enclosingElement);, + if (injector != null && injector.viewIdMapContains(id)) {, + error(element, "Attempt to use @InjectView for an already injected ID (%d). (%s.%s)", id,, + enclosingElement.getQualifiedName(), element.getSimpleName());, + return;, + }, +, + String name = element.getSimpleName().toString();, + Integer duplicateId = findDuplicate(ids);, + if (duplicateId != null) {, + error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,, + enclosingElement.getQualifiedName(), element.getSimpleName());, + }, +, + /** Returns the first duplicate element inside an array, null if there are no duplicates. */, + private static Integer findDuplicate(int[] array) {, +
[+++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +, +++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, + int id = element.getAnnotation(InjectView.class).value();, + Set<Integer> seenIds = new LinkedHashSet<Integer>();, + for (int id : ids) {, + if (!seenIds.add(id)) {, + annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),, + }, + viewInjector.addListeners(ids, listener, method, binding);, +++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, + int id = element.getAnnotation(InjectView.class).value();, + Set<Integer> seenIds = new LinkedHashSet<Integer>();, + for (int id : ids) {, + if (!seenIds.add(id)) {, + annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),, + }, + viewInjector.addListeners(ids, listener, method,
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + result.addMethod(createBindMethod(targetType));, + result.addMethod(createBindToTargetMethod());, + private MethodSpec createBindMethod(TypeName targetType) {, + private MethodSpec createBindToTargetMethod() {, + if (hasViewBindings()) {, + builder.add("\n");, + if (requiresCast(binding.getType())) {, + builder.add("($T) ", binding.getType());, + }, + if (binding.isRequired()) {, + builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, + } else {, + builder.add("finder.findOptionalView(source, $L)", ids[i]);, + }, + result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, + if (requiresCast(fieldBinding.getType())) {, + private static boolean requiresCast(TypeName type) {, + return !VIEW_TYPE.equals(type.toString());, + }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + result.addMethod(createBindMethod(targetType));, + result.addMethod(createBindToTargetMethod());, + private MethodSpec createBindMethod(TypeName targetType) {, + private MethodSpec createBindToTargetMethod() {, + if (hasViewBindings()) {, + builder.add("\n");, +
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PROTECTED;, + private static final ClassName UNBINDER =, + ClassName.get("butterknife", "ButterKnife", "ViewUnbinder");, + private String parentUnbinder;, + void setParentUnbinder(String parentUnbinder) {, + this.parentUnbinder = parentUnbinder;, + }, +, + String getParentUnbinder() {, + return parentUnbinder;, + }, +, + if (hasUnbinder()) {, + // Create unbinding class., + result.addType(createUnbinderClass());, + // Now we need to provide child classes to access and override unbinder implementations., + createUnbinderInternalAccessMethods(result);, + }, +, + TypeName generic = TypeVariableName.get("T");, + .addModifiers(PUBLIC, STATIC), + .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));, + if (parentUnbinder != null) {, + result.superclass(ParameterizedTypeName.get(, + ClassName.bestGuess(parentViewBinder + '.' + UnbinderBinding.UNBINDER_SIMPLE_NAME),, +
[+++ b/build.gradle, + 'androidPlugin': '2.3.3',, + javapoet: 'com.squareup:javapoet:1.9.0',, + javaparser: 'com.github.javaparser:javaparser-core:3.2.8',, + truth: 'com.google.truth:truth:0.34',, + robolectric: 'org.robolectric:robolectric:3.4-rc2',, + 'common': 'com.google.auto:auto-common:0.8',, +++ b/build.gradle, + 'androidPlugin': '2.3.3',, + javapoet: 'com.squareup:javapoet:1.9.0',, + javaparser: 'com.github.javaparser:javaparser-core:3.2.8',, + truth: 'com.google.truth:truth:0.34',, + robolectric: 'org.robolectric:robolectric:3.4-rc2',, + 'common': 'com.google.auto:auto-common:0.8',, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +import com.github.javaparser.ast.NodeList;, +import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;, +import com.github.javaparser.ast.expr.Expression;, +import java.util.Optional;, + for (Node node : resourceClass.getChildNodes()) {, + if (node instanceof ClassOrInterfaceDeclaration) {, + addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);, + ClassOrInterfaceDeclaration node) {, + if (!supportedTypes.contains(node.getNameAsString())) {, + String type = node.getNameAsString();, + String fieldName = variable.getNameAsString();, + String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/build.gradle, + 'androidPlugin': '2.3.3',, + javapoet: 'com.squareup:javapoet:1.9.0',,
[+++ b/pom.xml, + <robolectric.version>2.1</robolectric.version>]
[+++ b/CHANGELOG.md, +Version 8.6.0 *(2017-05-16)*, +----------------------------, +, + * Plugin was ported to Kotlin and updated to support future Android Gradle plugin versions., + * Fix: Properly handle multiple library modules using Butter Knife and defining the same ID., + * Fix: Use the same classloader of the binding target to load the generated view binding class., +, +, +++ b/CHANGELOG.md, +Version 8.6.0 *(2017-05-16)*, +----------------------------, +, + * Plugin was ported to Kotlin and updated to support future Android Gradle plugin versions., + * Fix: Properly handle multiple library modules using Butter Knife and defining the same ID., +
[+++ b/.buildscript/deploy_snapshot.sh, + ./gradlew uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "ESbreW4FNMPQhV1zbFb9iBvhFWFbVHecaig3Si3+4nrJCMn9x4nqB18ZcU+Aviw67WQNcuSH4I0Hl08uknl+kzE/xKEfPLmu28bptXRCSued49aL11i2aQmRj5nqP2yxkinhtRGOQxzIo56NmFt7sIcEXODM3D5a6q7s9tlvPfw=", + - secure: "JWEeqx0CWBqAkjcREHUg3Ei8wxqp59HZag8EidSLwmekgPJQwipwuEeXMZyPCGJCP+4ijUirtS/hRApi37BW0LYdt+XR7dI1TSZ0HFLTLqSPfWfsUcjmGpmoqVUv8FLVhC+KA42YeEhqkEaCUW92gJeAyK8swxDqGHAPT/sfKRA="]
[+++ b/README.md, +++ b/README.md, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/butterknife-sample/pom.xml, + <version>4.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>4.0.0</version>, +++ b/butterknife/pom.xml, + <version>4.0.0</version>, +++ b/butterknife-sample/pom.xml, + <version>4.0.0</version>, +++ b/butterknife/pom.xml, + <version>4.0.0</version>, +++ b/pom.xml, + <version>4.0.0</version>, + <tag>butterknife-parent-4.0.0</tag>]
[+++ b/butterknife-sample/pom.xml, + <version>3.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>3.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>3.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>3.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>3.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>3.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * You can inject an {@linkplain #inject(Activity) activity directly} or a{@linkplain #inject(View), + * view directly}, or inject an {@linkplain #inject(Object, Activity) activity into another object}, + * or a {@linkplain #inject(Object, View) view into another object}.]
[+++ b/.travis.yml, + # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., + # Install SDK license so Android Gradle plugin can install deps., + - mkdir "$ANDROID_HOME/licenses" || true, + - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/.travis.yml, + # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., + # Install SDK license so Android Gradle plugin can install deps., + - mkdir "$ANDROID_HOME/licenses" || true, + - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/build.gradle, + 'supportLibrary': '25.3.0',,
[+++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java, +package com.example.butterknife.functional;, +, +import android.content.Context;, +import android.view.View;, +import androidx.test.InstrumentationRegistry;, +import butterknife.BindArray;, +import butterknife.ButterKnife;, +import butterknife.Unbinder;, +import com.example.butterknife.test.R;, +import org.junit.Test;, +, +import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;, +import static com.google.common.truth.Truth.assertThat;, +, +public final class BindArrayTest {, + private final Context context = InstrumentationRegistry.getContext();, + private final View tree = treeWithIds(1);, +, + static class StringArrayTarget {, + @BindArray(R.array.string_one_two_three) String[] actual;, + }, +, + @Test public void asStringArray() {, + StringArrayTarget target = new StringArrayTarget();, + String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);, +, + Unbinder unbinder = ButterKnife.bind(target, tree);, + assertThat(target.actual).isEqualTo(expected);, +, + unbinder.unbind();, + assertThat(target.actual).isEqualTo(expected);, + }, +,
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + + " was not found. If this view is optional add '@Optional' annotation.");]
[+++ b/butterknife-sample/pom.xml, + <version>1.3.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.3.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.3.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.3-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/gradle.properties, +VERSION_NAME=8.1.1-SNAPSHOT]
[+++ b/CHANGELOG.md, + * Multiple injections of the same view ID only require a single find call., +++ b/CHANGELOG.md, + * Multiple injections of the same view ID only require a single find call., +++ b/butterknife/src/it/one-find-per-id/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.example.butterknife.tests</groupId>, + <artifactId>one-find-per-id</artifactId>, + <version>HEAD-SNAPSHOT</version>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version>4.1.1.4</version>, + <scope>provided</scope>, + </dependency>, +, + <dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>@project.version@</version>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>4.10</version>,
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + @SafeVarargs, + @SafeVarargs]
[+++ b/.travis.yml, +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/, + - $HOME/.android/build-cache, +++ b/.travis.yml, +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/, + - $HOME/.android/build-cache, +++ b/build.gradle, + 'kotlin': '1.1.4-3',]
[+++ b/build.gradle, + 'androidPlugin': '3.0.0-alpha8',, +++ b/build.gradle, + 'androidPlugin': '3.0.0-alpha8',, +++ b/butterknife-annotations/build.gradle, +apply plugin: 'java-library', + api deps.support.annotations, +++ b/build.gradle, + 'androidPlugin': '3.0.0-alpha8',, +++ b/butterknife-annotations/build.gradle, +apply plugin: 'java-library', + api deps.support.annotations, +++ b/butterknife-compiler/build.gradle, +apply plugin: 'java-library', + implementation project(':butterknife-annotations'), + implementation deps.auto.common, + api deps.javapoet, + testImplementation deps.junit, + testImplementation deps.truth, +++ b/build.gradle, + 'androidPlugin': '3.0.0-alpha8',, +++ b/butterknife-annotations/build.gradle, +apply plugin: 'java-library', + api deps.support.annotations, +++ b/butterknife-compiler/build.gradle, +apply plugin: 'java-library', + implementation project(':butterknife-annotations'), + implementation deps.auto.common, + api deps.javapoet, + testImplementation deps.junit, + testImplementation deps.truth, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-library', + implementation deps.android.gradlePlugin, + implementation deps.javaparser, + implementation deps.javapoet, +
[+++ b/butterknife-sample/pom.xml, + <version>2.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>2.0.1</version>, +++ b/butterknife/pom.xml, + <version>2.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>2.0.1</version>, +++ b/butterknife/pom.xml, + <version>2.0.1</version>, +++ b/pom.xml, + <version>2.0.1</version>, + <tag>butterknife-parent-2.0.1</tag>]
[+++ b/.travis.yml, + - sys-img-armeabi-v7a-android-18, +, +before_script:, + # Create and start an emulator for instrumentation tests., + - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a, + - emulator -avd test -no-audio -no-window &, + - android-wait-for-emulator, + - adb shell input keyevent 82, +, +++ b/.travis.yml, + - sys-img-armeabi-v7a-android-18, +, +before_script:, + # Create and start an emulator for instrumentation tests., + - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a, + - emulator -avd test -no-audio -no-window &, + - android-wait-for-emulator, + - adb shell input
[+++ b/butterknife-sample/pom.xml, + <version>5.1.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.1.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.1.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>5.1.3-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/pom.xml, + <version>3.8.0</version>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.content.Context;, +, + @Override protected Context getContext(Object source) {, + return ((View) source).getContext();, + }, +, + @Override protected Context getContext(Object source) {, + return (Activity) source;, + }, +, + @Override protected Context getContext(Object source) {, + return ((Dialog) source).getContext();, + }, + String name = getContext(source).getResources().getResourceEntryName(id);, + throw new IllegalStateException("Required view '", + + name, + + "' with ID ", + + " for ", +, + protected abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.content.Context;, +, + @Override protected Context getContext(Object source) {, + return ((View) source).getContext();, + }, +, + @Override
[+++ b/build.gradle, + gradlePluginPortal(), + classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', + apply plugin: 'net.ltgt.errorprone', +, + dependencies {, + errorprone 'com.google.errorprone:error_prone_core:2.3.1', + }, +, + // TODO figure out why this causes codegen to fail in android tests., + //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), + //configurations.all { Configuration configuration ->, + // if (configuration.name.endsWith('nnotationProcessor')) {, + // configuration.dependencies.add(nullaway), + // }, + //}, + //, + //tasks.withType(JavaCompile) {, + // options.compilerArgs += [, + // '-Xep:NullAway:ERROR',, + // '-XepOpt:NullAway:AnnotatedPackages=butterknife',, + // ], + //}, +, +++ b/build.gradle, + gradlePluginPortal(), + classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', + apply plugin: 'net.ltgt.errorprone', +, + dependencies {, + errorprone 'com.google.errorprone:error_prone_core:2.3.1',
[+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {]
[+++ b/butterknife-sample/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/.travis.yml, + - build-tools-24.0.0, +++ b/.travis.yml, + - build-tools-24.0.0, +++ b/build.gradle, + buildToolsVersion = '24.0.0', + supportv4: 'com.android.support:support-v4:24.1.0',, + supportAnnotations: 'com.android.support:support-annotations:24.1.0',]
[+++ b/gradle.properties, +VERSION_NAME=8.2.0-SNAPSHOT]
[+++ b/butterknife-sample/pom.xml, + <version>1.4.0</version>, +++ b/butterknife-sample/pom.xml, + <version>1.4.0</version>, +++ b/butterknife/pom.xml, + <version>1.4.0</version>, +++ b/butterknife-sample/pom.xml, + <version>1.4.0</version>, +++ b/butterknife/pom.xml, + <version>1.4.0</version>, +++ b/pom.xml, + <version>1.4.0</version>, + <tag>butterknife-parent-1.4.0</tag>]
[+++ b/build.gradle, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {, +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {]
[+++ b/CHANGELOG.md, +Version 8.5.0 *(2017-01-23)*, +----------------------------, +, + * Emit `@SuppressLint` when using `@OnTouch` to avoid a lint warning., + * Migrate lint checks from Lombok AST to JetBrains PSI., + * Annotations are no longer claimed by the processor., + * Based on the minimum SDK version (as specified by `butterknife.minSdk` until http://b.android.com/187527 is, + released) the generated code now changes to use newer APIs when available., + * Generated classes now include single-argument overloads for `View`, `Activity`, and `Dialog` subclasses., + * Generated classes are no longer generic., + * Minimum supported SDK is now 9., +,
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId().value;, + fieldName = "view" + bindings.getId().value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId().value;, + fieldName = "view" + bindings.getId().value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, + throw new UnsupportedOperationException("Please use value or code explicitly");]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, + try {, + } catch (IllegalArgumentException ignored) {, + }, + note(element, "@%s field with unresolved type (%s) ", + + "must elsewhere be generated as a View or interface. (%s.%s)",, + note(element, "@%s List or array with unresolved type (%s) ", + + "must elsewhere be generated as a View or interface. (%s.%s)",, + if (trees == null) return;, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, + try {, + } catch (IllegalArgumentException ignored) {, + }, + note(element, "@%s field with unresolved type (%s) ", + + "must elsewhere be generated as a View or interface. (%s.%s)",, +
[+++ b/butterknife-integration-test/src/androidTest/font_licenses.txt, +Copyright 2006 The Inconsolata Project Authors
[+++ b/.travis.yml, +before_script:, + # Create and start an emulator for instrumentation tests., +++ b/.travis.yml, +before_script:, + # Create and start an emulator for instrumentation tests., +++ b/butterknife-integration-test/build.gradle, +++ b/.travis.yml, +before_script:, + # Create and start an emulator for instrumentation tests., +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife/build.gradle, +++ b/.travis.yml, +before_script:, + # Create and start an emulator for instrumentation tests., +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife/build.gradle, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/.travis.yml, +before_script:, + # Create and start an emulator for instrumentation tests., +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife/build.gradle, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.app.Dialog;, + * Injection can be performed directly on an {@linkplain #inject(Activity) activity}, a, + * {@linkplain #inject(View) view}, or a {@linkplain #inject(Dialog) dialog}. Alternate objects to, + * inject can be specified along with an {@linkplain #inject(Object, Activity) activity},, + * {@linkplain #inject(Object, View) view}, or, + * {@linkplain #inject(Object, android.app.Dialog) dialog}., + },, + DIALOG {, + @Override public View findOptionalView(Object source, int id) {, + return ((Dialog) source).findViewById(id);, + }, + * Inject annotated fields and methods in the specified {@link Dialog}. The current content, + * view is used as the view
[+++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/pom.xml, + <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ b/butterknife-sample/pom.xml, + <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/pom.xml, + <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/pom.xml, + <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/pom.xml, + <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/src/main/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + android:versionCode="1", + android:versionName="1.0", + package="com.example.butterknife">, +, + <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, +, + <application, + android:label="@string/app_name", + android:name=".SimpleApp">, +, + <activity, + android:label="@string/app_name", + android:name=".SimpleActivity">, + <intent-filter>, + <action android:name="android.intent.action.MAIN"/>, + <category android:name="android.intent.category.LAUNCHER"/>, + <category android:name="android.intent.category.DEFAULT"/>, + </intent-filter>, + </activity>, +
[+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java, + @Test public void zeroBindingsBindDoesNotThrowExceptionAndCaches() {, + assertThat(ButterKnife.BINDINGS).isEmpty();, + assertThat(ButterKnife.BINDINGS).containsEntry(Example.class, null);, +++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java, + @Test public void zeroBindingsBindDoesNotThrowExceptionAndCaches() {, + assertThat(ButterKnife.BINDINGS).isEmpty();, + assertThat(ButterKnife.BINDINGS).containsEntry(Example.class, null);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + if (bindingCtor != null || BINDINGS.containsKey(cls)) {]
[+++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.2', +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.2', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + private final ImmutableList<ViewBinding> viewBindings;, + private final ImmutableList<FieldCollectionViewBinding> collectionBindings;, + private final ImmutableList<ResourceBinding> resourceBindings;, + ImmutableList<ViewBinding> viewBindings,, + ImmutableList<FieldCollectionViewBinding> collectionBindings,, + ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {, + this.viewBindings = viewBindings;, + this.collectionBindings = collectionBindings;, + this.resourceBindings = resourceBindings;, + for (ViewBinding binding : viewBindings) {, + addViewBinding(constructor, binding);, + for (ViewBinding binding : viewBindings) {, + if (binding.getFieldBinding() != null) {, + result.addStatement("target.$L = null", binding.getFieldBinding().getName());, + for (ViewBinding binding : viewBindings) {, + addFieldAndUnbindStatement(bindingClass, result, binding);, + ViewBinding bindings) {, + private void addViewBinding(MethodSpec.Builder result,
[+++ b/butterknife-sample/build.gradle, +, + buildTypes {, + debug {, + minifyEnabled true, + }, + }, +++ b/butterknife-sample/build.gradle, +, + buildTypes {, + debug {, + minifyEnabled true, + }, + }, +++ b/butterknife/build.gradle, +, + buildTypes {, + release {, + consumerProguardFiles 'proguard-rules.txt', + }, + }, +++ b/butterknife-sample/build.gradle, +, + buildTypes {, + debug {, + minifyEnabled true, + }, + }, +++ b/butterknife/build.gradle, +, + buildTypes {, + release {, + consumerProguardFiles 'proguard-rules.txt', + }, + }, +++ b/butterknife/proguard-rules.txt, +-keep class butterknife.** { *; }, +-dontwarn butterknife.internal.**, +-keep class **$$ViewBinder { *; }, +, +-keepclasseswithmembernames class
[+++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java, +package butterknife;, +, +import android.content.Context;, +import android.support.annotation.NonNull;, +import android.support.test.InstrumentationRegistry;, +import android.util.Property;, +import android.view.View;, +import java.util.List;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +import static java.util.Arrays.asList;, +, +public class ViewCollectionsTest {, + private static final Property<View, Boolean> PROPERTY_ENABLED =, + new Property<View, Boolean>(Boolean.class, "enabled") {, + @Override public Boolean get(View view) {, + return view.isEnabled();, + }, +, + @Override public void set(View view, Boolean enabled) {, + view.setEnabled(enabled);, + }, + };, + private static final Setter<View, Boolean> SETTER_ENABLED =, + new Setter<View, Boolean>() {, + @Override public void set(@NonNull View view, Boolean value, int index) {, +
[+++ b/.travis.yml, + - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + Throwable t = e;, + if (t instanceof InvocationTargetException) {, + t = t.getCause();, + throw new RuntimeException("Unable to reset views for " + target, t);, + Throwable t = e;, + if (t instanceof InvocationTargetException) {, + t = t.getCause();, + throw new RuntimeException("Unable to inject views for " + target, t);]
[+++ b/README.md, +Field and method binding for Android views which uses annotation processing to generate boilerplate, +code for you., + * Eliminate `findViewById` calls by using `@FindView` on fields., + * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,, + @FindView(R.id.user) EditText username;, + @FindView(R.id.pass) EditText password;, + ButterKnife.bind(this);, + // TODO Use fields..., +++ b/README.md, +Field and method binding for Android views which uses annotation processing to generate boilerplate, +code for you., + * Eliminate `findViewById` calls by using `@FindView` on fields., + * Group multiple views in a
[+++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, + + " return new InnerUnbinder(target, finder, source);\n", + + " return new InnerUnbinder(target, finder, source);\n", + + " return new InnerUnbinder(target, finder, source);\n", + + " return new InnerUnbinder(target, finder, source);\n", + + " return new
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + if (bindNeedsViewLocal()) {, + }, + if (!bindings.requiresLocal()) {, + // Optimize the common case where there's a single binding directly to a field., + Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();, + for (FieldViewBinding fieldBinding : fieldBindings) {, + CodeBlock.Builder invoke = CodeBlock.builder(), + .add("target.$L = finder.find", fieldBinding.getName());, + invoke.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, + if (requiresCast(fieldBinding.getType())) {, + invoke.add("AsType");, + }, + invoke.add("(source, $L", bindings.getId());, + if (fieldBinding.isRequired() || requiresCast(fieldBinding.getType())) {, + invoke.add(", $S", asHumanDescription(fieldBindings));, + }, + if (requiresCast(fieldBinding.getType())) {, + invoke.add(", $T.class", fieldBinding.getRawType());, + }, + result.addStatement("$L)", invoke.build());, + }, + return;, + }, +,
[+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.graphics.Typeface;, +import android.support.annotation.IntDef;, +import android.support.annotation.RestrictTo;, +import static android.support.annotation.RestrictTo.Scope.LIBRARY;, +, + @TypefaceStyle int style() default Typeface.NORMAL;, +, + @IntDef({, + Typeface.NORMAL,, + Typeface.BOLD,, + Typeface.ITALIC,, + Typeface.BOLD_ITALIC, + }), + @RestrictTo(LIBRARY), + @interface TypefaceStyle {, + }, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.graphics.Typeface;, +import android.support.annotation.IntDef;, +import android.support.annotation.RestrictTo;, +import static android.support.annotation.RestrictTo.Scope.LIBRARY;, +, + @TypefaceStyle int style() default Typeface.NORMAL;, +, + @IntDef({, + Typeface.NORMAL,, + Typeface.BOLD,, + Typeface.ITALIC,, + Typeface.BOLD_ITALIC, + }), + @RestrictTo(LIBRARY), + @interface TypefaceStyle {, + }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.graphics.Typeface;, +import android.support.annotation.IntDef;, +import android.support.annotation.RestrictTo;, +import static android.support.annotation.RestrictTo.Scope.LIBRARY;, +, + @TypefaceStyle int style() default Typeface.NORMAL;, +,
[+++ b/butterknife-sample/pom.xml, + <version>6.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>6.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>6.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>6.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>6.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>6.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/build.gradle, +, + repositories {, + mavenCentral(), + google(), + maven {, + url "https://plugins.gradle.org/m2/", + }, + }, +, + dependencies {, + classpath deps.android.gradlePlugin, + classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", + classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', + }, +++ b/build.gradle, +, + repositories {, + mavenCentral(), + google(), + maven {, + url "https://plugins.gradle.org/m2/", + }, + }, +, + dependencies {, + classpath deps.android.gradlePlugin, + classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", + classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', + }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + JavaFile brewJava(int sdk) {, + return JavaFile.builder(bindingClassName.packageName(), createType(sdk)), + private TypeSpec createType(int sdk) {, + result.addMethod(createBindingConstructor(sdk));, + private MethodSpec createBindingConstructor(int sdk) {, + addViewBinding(constructor, binding);, +
[+++ b/butterknife-sample/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>5.0.0-SNAPSHOT</version>]
[+++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + private static final ClassName UI_THREAD_ANDROIDX =, + ClassName.get("androidx.annotation", "UiThread");, + private static final ClassName CALL_SUPER_ANDROIDX =, + ClassName.get("androidx.annotation", "CallSuper");, + static final ClassName CONTEXT_COMPAT_ANDROIDX =, + ClassName.get("androidx.core.content", "ContextCompat");, + JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, + TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);, + return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration), + private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {, + result.addMethod(createBindingConstructorForView(useAndroidX));, + result.addMethod(createBindingConstructorForActivity(useAndroidX));, + result.addMethod(createBindingConstructorForDialog(useAndroidX));, + result.addMethod(createBindingViewDelegateConstructor(useAndroidX));, + result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));, + result.addMethod(createBindingUnbindMethod(result, useAndroidX));, + private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {, + .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), + private MethodSpec createBindingConstructorForView(boolean useAndroidX) {, + .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX :
[+++ b/butterknife/src/it/superclass/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.example.butterknife.tests</groupId>, + <artifactId>superclass</artifactId>, + <version>HEAD-SNAPSHOT</version>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version>4.1.1.4</version>, + <scope>provided</scope>, + </dependency>, + <dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>@project.version@</version>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-compiler-plugin</artifactId>, + <version>3.0</version>, + <configuration>, + <source>1.5</source>, + <target>1.5</target>, + </configuration>, + </plugin>, + </plugins>, + </build>, +</project>, +++ b/butterknife/src/it/superclass/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">,
[+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, + @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, + @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java, +package butterknife.internal;, +, +public class Constants {, +, + private Constants() { }, +, + public static final int NO_RES_ID = -1;, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, + @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java, +package butterknife.internal;, +, +public class Constants {, +, + private Constants() { }, +, + public static final int NO_RES_ID = -1;, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, + static final Id NO_ID = new
[+++ b/CHANGELOG.md, +Version 8.8.1 *(2017-08-09)*, +----------------------------, +, + * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`., +, +, +++ b/CHANGELOG.md, +Version 8.8.1 *(2017-08-09)*, +----------------------------, +, + * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`., +, +, +++ b/README.md, + compile 'com.jakewharton:butterknife:8.8.1', + annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1', + classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1', +++ b/CHANGELOG.md, +Version 8.8.1 *(2017-08-09)*, +----------------------------, +, + * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`., +, +, +++ b/README.md, + compile 'com.jakewharton:butterknife:8.8.1', + annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1', + classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, + Builder(Id id) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, + Builder(Id id) {, +++ b/checkstyle.xml, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN", + "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, + Builder(Id id) {, +++ b/checkstyle.xml, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN", + "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, + Builder(Id id) {, +++ b/checkstyle.xml, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN", + "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon May 08 12:19:25 PDT 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, + Builder(Id id) {, +++ b/checkstyle.xml, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN", + "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon May 08 12:19:25 PDT 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip, +++ b/gradlew, +#!/usr/bin/env sh, +#
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId().getIntId();, + int tintAttributeId = binding.getTintAttributeId().getIntId();, + binding.getName(), UTILS, binding.getId(), tintAttributeId);, + UTILS, binding.getId());, + UTILS, binding.getMethod(), binding.getId());, + binding.getId());, + fieldName = "view" + bindings.getId().getIntId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + fieldName = "view" + bindings.getId().getIntId();, + int tintAttributeId = binding.getTintAttributeId().getIntId();, + binding.getName(), UTILS, binding.getId(), tintAttributeId);, + UTILS, binding.getId());, + UTILS, binding.getMethod(), binding.getId());, + binding.getId());, + fieldName = "view" + bindings.getId().getIntId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, + if (id == NO_ID.getIntId()) {, + VarScanner scanner =, + new VarScanner(ids, packageName + ".R." + classTree.getSimpleName().toString());, + private final String className;, + private VarScanner(Map<Integer, Id> ids, String className) {,
[+++ b/.travis.yml, + - build-tools-24.0.1, +++ b/.travis.yml, + - build-tools-24.0.1, +++ b/build.gradle, + buildToolsVersion = '24.0.1', + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/.travis.yml, + - build-tools-24.0.1, +++ b/build.gradle, + buildToolsVersion = '24.0.1', + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/.travis.yml, + - build-tools-24.0.1, +++ b/build.gradle, + buildToolsVersion = '24.0.1', + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, + testCompile deps.openglApi, +++ b/.travis.yml, + - build-tools-24.0.1, +++ b/build.gradle, + buildToolsVersion = '24.0.1', + robolectric: 'org.robolectric:robolectric:3.1.2',, + openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, + testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/.travis.yml, + - build-tools-24.0.1, +++ b/build.gradle,
[+++ b/butterknife-sample/pom.xml, + <version>7.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>7.0.1</version>, +++ b/butterknife/pom.xml, + <version>7.0.1</version>, +++ b/butterknife-sample/pom.xml, + <version>7.0.1</version>, +++ b/butterknife/pom.xml, + <version>7.0.1</version>, +++ b/pom.xml, + <version>7.0.1</version>, + <tag>butterknife-parent-7.0.1</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import android.content.Context;, + if (requiresTheme()) {, + result.addStatement("$T context = finder.getContext(source)", Context.class);, + result.addStatement("$T res = context.getResources()", Resources.class);, + result.addStatement("$T theme = context.getTheme()", Resources.Theme.class);, + } else {, + }, + int tintAttributeId = binding.getTintAttributeId();, + if (tintAttributeId != 0) {, + result.addStatement("target.$L = $T.getTintedDrawable(res, theme, $L, $L)",, + binding.getName(), UTILS, binding.getId(), tintAttributeId);, + } else {, + result.addStatement("target.$L = $T.getDrawable(res, theme, $L)", binding.getName(),, + UTILS, binding.getId());, + // TODO being themeable is poor correlation to the need to use Utils., + if (binding.isThemeable()) {, + result.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(),, + UTILS, binding.getMethod(), binding.getId());, +
[+++ b/butterknife-sample/pom.xml, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.easytesting</groupId>, + <artifactId>fest-assert-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>fest-android</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/butterknife-sample/pom.xml, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.easytesting</groupId>, + <artifactId>fest-assert-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>fest-android</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +package com.example.butterknife;, +, +import android.view.LayoutInflater;, +import android.view.View;, +import org.junit.Test;, +import org.junit.runner.RunWith;,
[+++ b/.travis.yml, + - build-tools-24.0.0, + - android-24, +++ b/.travis.yml, + - build-tools-24.0.0, + - android-24, +++ b/build.gradle, + targetSdkVersion = 24, + compileSdkVersion = 24, + buildToolsVersion = '24.0.0', + supportv4: 'com.android.support:support-v4:24.0.0',, + supportAnnotations: 'com.android.support:support-annotations:24.0.0',]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified font resource ID., + * <pre><code>, + * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFont {, + /** Font resource ID to which the field will be bound. */, + /* TODO support lib 26.0.0: @FontRes */ int value();, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified
[+++ b/CHANGELOG.md, +Version 8.2.0 *(2016-07-10)*, +----------------------------, +, + * New: Support for library projects. Requires application of a Butter Knife Gradle plugin. See README for, + details., + * New: Generated code now emits code using `R` references instead of raw integer IDs., + * Fix: `@OnPageChange` listner binding now uses the 'add'/'remove' methods on `ViewPager` instead of 'set'., +, +, +++ b/CHANGELOG.md, +Version 8.2.0 *(2016-07-10)*, +----------------------------, +, + * New: Support for library projects. Requires application of a Butter Knife Gradle plugin. See README for, + details., + * New: Generated code now emits code using `R` references
[+++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/internal/Binding.java, +/** A field or method view injection binding. */, + /** A description of the binding in human readable form (e.g., "field 'foo'"). */, + /** False if the {@link butterknife.Optional @Optional} annotation is present on the binding. */, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/internal/Binding.java, +/** A field or method view injection
[+++ b/butterknife-sample/res/layout/simple_activity.xml, + android:layout_margin="10dp", + />, + <ListView, + android:id="@+id/list_of_things", + android:layout_width="match_parent", + android:layout_height="0dp", + android:layout_weight="1", + android:layout_margin="10dp", +++ b/butterknife-sample/res/layout/simple_activity.xml, + android:layout_margin="10dp", + />, + <ListView, + android:id="@+id/list_of_things", + android:layout_width="match_parent", + android:layout_height="0dp", + android:layout_weight="1", + android:layout_margin="10dp", +++ b/butterknife-sample/res/layout/simple_list_item.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android", + android:layout_width="match_parent", + android:layout_height="match_parent", + android:orientation="vertical">, + <TextView, + android:id="@+id/word", + android:layout_width="match_parent", + android:layout_height="wrap_content", + />, + <TextView, + android:id="@+id/length", + android:layout_width="match_parent", + android:layout_height="wrap_content", + />, + <TextView, + android:id="@+id/position", + android:layout_width="match_parent", + android:layout_height="wrap_content", + />, +</LinearLayout>, +++ b/butterknife-sample/res/layout/simple_activity.xml, + android:layout_margin="10dp", + />, + <ListView, + android:id="@+id/list_of_things", + android:layout_width="match_parent", + android:layout_height="0dp", + android:layout_weight="1", + android:layout_margin="10dp",
[+++ b/CHANGELOG.md, +Version 5.0.0 *(In Development)*, +--------------------------------, +, + * New: `@InjectViews` annotation groups multiple IDs into a `List` or array., + * New: `ButterKnife.apply` method applies a `Property` or `ButterKnife.Action` to views in a list., + * Fix: Support for generic types which are declared with an upper-bound., + * Fix: Use less sophisticated method injection inspection in the annotation processor. The previous, + method caused problems with some Eclipse configurations., +, +, +++ b/CHANGELOG.md, +Version 5.0.0 *(In Development)*, +--------------------------------, +, + * New: `@InjectViews` annotation groups multiple IDs into a `List` or array., + * New: `ButterKnife.apply`
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, + listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, + listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, + listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");, +++ b/butterknife/src/main/java/butterknife/internal/Utils.java, + @SuppressWarnings("unchecked") // That's the point., + public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {, + return (T) value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, + builder.add("$T.<$T>castParam(p$L, $S,
