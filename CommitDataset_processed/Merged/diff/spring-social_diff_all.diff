[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +						.param("oauth_verifier", "verifier")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	@Test, +	public void oauth1Callback_exceptionWhileFetchingAccessToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +		assertNull(connectionRepository.findConnections("oauth1Provider"));, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +						.param("oauth_verifier", "verifier")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	@Test, +	public void oauth1Callback_exceptionWhileFetchingAccessToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +		assertNull(connectionRepository.findConnections("oauth1Provider"));, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web.test;, +, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionKey;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +public class StubConnectionRepository implements ConnectionRepository {, +	, +	private MultiValueMap<String, Connection<?>> providerIdConnectionMap = new LinkedMultiValueMap<String, Connection<?>>();	, +, +	public MultiValueMap<String, Connection<?>> findAllConnections() {, +		// TODO Auto-generated method stub, +		return null;, +	}, +, +	public List<Connection<?>> findConnections(String providerId) {, +		return providerIdConnectionMap.get(providerId);, +	}, +, +	public <A> List<Connection<A>> findConnections(Class<A> apiType) {, +		// TODO Auto-generated method stub, +		return null;, +	}, +, +	public MultiValueMap<String, Connection<?>> findConnectionsToUsers(MultiValueMap<String, String> providerUserIds) {, +		// TODO Auto-generated method stub, +		return null;]
[+++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +    metaInf << files("src/main/resources/tld/spring-social.tld"), +        gradleVersion = "1.12", +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +    metaInf << files("src/main/resources/tld/spring-social.tld"), +        gradleVersion = "1.12", +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +aspectjVersion=1.8.5, +springVersion=4.3.3.RELEASE, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +mockitoVersion=1.10.19, +thymeleafVersion=2.1.4.RELEASE, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +    metaInf << files("src/main/resources/tld/spring-social.tld"), +        gradleVersion = "1.12", +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +aspectjVersion=1.8.5, +springVersion=4.3.3.RELEASE, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +mockitoVersion=1.10.19, +thymeleafVersion=2.1.4.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +    metaInf << files("src/main/resources/tld/spring-social.tld"), +        gradleVersion = "1.12", +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +aspectjVersion=1.8.5, +springVersion=4.3.3.RELEASE, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +mockitoVersion=1.10.19, +thymeleafVersion=2.1.4.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 30 12:43:52 CDT 2014, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +    metaInf << files("src/main/resources/tld/spring-social.tld"), +        gradleVersion = "1.12", +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +aspectjVersion=1.8.5, +springVersion=4.3.3.RELEASE, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +mockitoVersion=1.10.19, +thymeleafVersion=2.1.4.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 30 12:43:52 CDT 2014, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/gradlew, +# For Cygwin, ensure paths are in UNIX format before anything is touched., +if $cygwin ; then, +    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`, +fi, +, +cd "`dirname \"$PRG\"`/" >&-, +cd "$SAVED" >&-, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +    metaInf << files("src/main/resources/tld/spring-social.tld"), +        gradleVersion = "1.12", +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +aspectjVersion=1.8.5, +springVersion=4.3.3.RELEASE, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +mockitoVersion=1.10.19, +thymeleafVersion=2.1.4.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 30 12:43:52 CDT 2014, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/gradlew, +# For Cygwin, ensure paths are in UNIX format before anything is touched., +if $cygwin ; then, +    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`, +fi, +, +cd "`dirname \"$PRG\"`/" >&-, +cd "$SAVED" >&-, +++ b/gradlew.bat, +@rem Get command-line arguments, handling Windowz variants]
[+++ b/docs/src/reference/docbook/apis.xml]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException;]
[+++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/api/impl/LinkedInTemplate.java, +		LinkedInConnections connections = restTemplate.getForObject("https://api.linkedin.com/v1/people/~/connections", LinkedInConnections.class);, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/api/impl/LinkedInTemplate.java, +		LinkedInConnections connections = restTemplate.getForObject("https://api.linkedin.com/v1/people/~/connections", LinkedInConnections.class);, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.linkedin.connect;, +, +import org.springframework.social.connect.ApiAdapter;, +import org.springframework.social.connect.ConnectionValues;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.connect.UserProfileBuilder;, +import org.springframework.social.linkedin.api.LinkedInApi;, +import org.springframework.social.linkedin.api.LinkedInProfile;, +import org.springframework.web.client.HttpClientErrorException;, +, +/**, + * LinkedIn ApiAdapter implementation., + * @author Keith Donald, + */, +public class LinkedInApiAdapter implements ApiAdapter<LinkedInApi> {, +, +	public boolean test(LinkedInApi api) {, +		try {, +			api.getUserProfile();, +			return true;, +		} catch (HttpClientErrorException e) {, +			// TODO: Have api throw more specific exception and trigger off of that., +			return false;, +		}, +	}, +, +	public void setConnectionValues(LinkedInApi api, ConnectionValues values) {, +		LinkedInProfile profile = api.getUserProfile();, +		values.setProviderUserId(profile.getId());, +		values.setDisplayName(profile.getFirstName() + " " + profile.getLastName());, +		values.setProfileUrl(profile.getPublicProfileUrl());, +		values.setImageUrl(profile.getProfilePictureUrl());, +	}, +, +	public UserProfile fetchUserProfile(LinkedInApi api) {, +		LinkedInProfile profile = api.getUserProfile();, +		return new UserProfileBuilder().setName(profile.getFirstName() + " " + profile.getLastName()).build();, +	}, +	, +	public void updateStatus(LinkedInApi api, String message) {, +		// not supported yet, +	}, +	, +}, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/api/impl/LinkedInTemplate.java, +		LinkedInConnections connections = restTemplate.getForObject("https://api.linkedin.com/v1/people/~/connections", LinkedInConnections.class);, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.linkedin.connect;, +, +import org.springframework.social.connect.ApiAdapter;, +import org.springframework.social.connect.ConnectionValues;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.connect.UserProfileBuilder;, +import org.springframework.social.linkedin.api.LinkedInApi;, +import org.springframework.social.linkedin.api.LinkedInProfile;, +import org.springframework.web.client.HttpClientErrorException;, +, +/**, + * LinkedIn ApiAdapter implementation., + * @author Keith Donald, + */, +public class LinkedInApiAdapter implements ApiAdapter<LinkedInApi> {, +, +	public boolean test(LinkedInApi api) {, +		try {]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +	<section id="service-providers-implementing">, +		<title>Implementing Service Providers</title>, +			The spring-social-core module provides support for implementing your own ServiceProviders., +			This support consists of convenient base classes for the various ServiceProvider types, such as OAuth1 and OAuth2-based providers., +			A common data access interface is also provided for persisting connection information., +			In this section, you will learn how to implement ServiceProviders., +		</para>, +		<section id="service-providers-implementing-oauth2">, +			<title>OAuth2</title>, +			<para>, +				To implement an OAuth2-based ServiceProvider, first extend AbstractOAuth2ServiceProvider., +				Parameterize &lt;S&gt; to be the Java Binding to the ServiceProvider API., +				Define a single constructor that accepts an clientId, clientSecret, and ConnectionRepository., +				Finally, implement getApi(String) to return a new API instance., +			</para>, +			<para>, +				See FacebookServiceProvider as an example of an OAuth2-based ServiceProvider:, +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.social.facebook.connect;, +import org.springframework.social.connect.oauth2.AbstractOAuth2ServiceProvider;, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.facebook.FacebookApi;, +import org.springframework.social.facebook.FacebookTemplate;, +import org.springframework.social.oauth2.OAuth2Template;, +public final class FacebookServiceProvider extends AbstractOAuth2ServiceProvider<FacebookApi> {, +, +    public FacebookServiceProvider(String clientId, String clientSecret, ConnectionRepository connectionRepository) {, +        super("facebook", connectionRepository, , +            new OAuth2Template(appId, appSecret,, +                "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", , +                "https://graph.facebook.com/oauth/access_token"));, +    }, +, +    @Override, +    protected FacebookApi getApi(String accessToken) {, +        return new FacebookTemplate(accessToken);, +    }, +, +}]]>, +			<para>, +				In the constructor, you should call super, passing up the ID of the ServiceProvider, the connection repository, and a configured OAuth2Template, which implements OAuth2Operations., +				The OAuth2Template will handle the "OAuth dance" with the provider, and should be configured with the provided clientId and clientSecret, along with the provider-specific authorizeUrl and accessTokenUrl., +				In getApi(String), you should construct your Service API implementation, passing it the access token needed to make requests for protected resources., +				Inside the API implementation, we generally recommend using RestTemplate to make the HTTP calls and add the required Authorization header:, +			<programlisting language="java"><![CDATA[, +public FacebookTemplate(String accessToken) {, +    restTemplate = new RestTemplate();, +    // configures an interceptor that adds the Authorization header to each ClientRequest before it is executed, +    restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] { OAuth2RequestInterceptor.draft10(accessToken) });, +}]]>, +			</programlisting>, +			 	An example API call with RestTemplate is shown below:, +			<programlisting language="java"><![CDATA[, +public FacebookProfile getUserProfile(String facebookId) {, +    return new FacebookProfile(restTemplate.getForObject("https://graph.facebook.com/{facebookId}", Map.class, facebookId));, +}]]>, +			</programlisting>, +		<section id="service-providers-implementing-oauth1">, +			<title>OAuth1</title>, +			<para>, +				To implement an OAuth1-based ServiceProvider, first extend AbstractOAuth1ServiceProvider., +				Parameterize &lt;S&gt; to be the Java Binding to the ServiceProvider API., +				Define a single constructor that accepts a consumerKey, consumerSecret, and ConnectionRepository., +				Finally, implement getApi(String, String, String, String) to return a new API instance., +			</para>, +			<para>, +				See TwitterServiceProvider as an example of an OAuth1-based ServiceProvider:, +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.social.twitter.connect;, +public final class TwitterServiceProvider extends AbstractOAuth1ServiceProvider<TwitterApi> {, +    protected TwitterApi getApi(String consumerKey, String consumerSecret, String accessToken, String secret) {, +}]]>, +			</programlisting>, +			<para>, +				In the constructor, you should call super, passing up the ID of the ServiceProvider, the connection repository, the consumerKey and secret, and a configured OAuth1Template., +				The OAuth1Template will handle the "OAuth dance" with the provider., +				It should also be configured with the provided consumerKey and consumerSecret, along with the provider-specific requestTokenUrl, authorizeUrl, and accessTokenUrl., +			</para>			, +			<para>, +				In getApi(String, String, String, String), you should construct your Service API implementation, passing it the four tokens needed to make requests for protected resources., +				Inside the API implementation, we generally recommend using RestTemplate to make the HTTP calls and add the required Authorization header:, +			</para>, +			<programlisting language="java"><![CDATA[, +public TwitterTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +    restTemplate = new RestTemplate();, +    // configures an interceptor that adds the Authorization header to each ClientRequest before it is executed, +    restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] {, +        new OAuth1RequestInterceptor(consumerKey, consumerSecret, new OAuthToken(accessToken, accessTokenSecret)), +    });, +}]]>, +			</programlisting>, +			<para>, +				An example API call with RestTemplate is shown below:, +			</para>, +			<programlisting language="java"><![CDATA[, +public TwitterProfile getUserProfile(String screenName) {, +    return new TwitterProfile(restTemplate.getForObject("https://api.twitter.com/1/users/show.json?screen_name={screenName}", Map.class, screenName));]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10aServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10aOperations;, +, +public abstract class AbstractOAuth10aServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10aServiceProvider<S> {, +, +	private final OAuth10aOperations oauth1Operations;, +, +	public AbstractOAuth10aServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10aOperations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10aOperations getOAuth10aOperations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10aServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10aOperations;, +, +public abstract class AbstractOAuth10aServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10aServiceProvider<S> {, +, +	private final OAuth10aOperations oauth1Operations;, +, +	public AbstractOAuth10aServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10aOperations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	private final ApiAdapter<A> apiAdapter;, +		this.apiAdapter = nullSafeApiAdapter(apiAdapter);, +	 * Exposes the ApiAdapter to subclasses., +		return apiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	private final ApiAdapter<A> apiAdapter;, +		this.apiAdapter = nullSafeApiAdapter(apiAdapter);, +	 * Exposes the ApiAdapter to subclasses., +		return apiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +	 * @param apiAdapter the ApiAdapter for the ServiceProvider, +			OAuth2ServiceProvider<A> serviceProvider, ApiAdapter<A> apiAdapter) {, +		super(apiAdapter);, +	 * @param apiAdapter the ApiAdapter for the ServiceProvider, +	public OAuth2Connection(ConnectionData data, OAuth2ServiceProvider<A> serviceProvider, ApiAdapter<A> apiAdapter) {, +		super(data, apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	private final ApiAdapter<A> apiAdapter;, +		this.apiAdapter = nullSafeApiAdapter(apiAdapter);, +	 * Exposes the ApiAdapter to subclasses., +		return apiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +	 * @param apiAdapter the ApiAdapter for the ServiceProvider, +			OAuth2ServiceProvider<A> serviceProvider, ApiAdapter<A> apiAdapter) {, +		super(apiAdapter);, +	 * @param apiAdapter the ApiAdapter for the ServiceProvider, +	public OAuth2Connection(ConnectionData data, OAuth2ServiceProvider<A> serviceProvider, ApiAdapter<A> apiAdapter) {, +		super(data, apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +	 * @param apiAdapter the ApiAdapter for mapping the provider-specific service API model to the uniform ServiceProviderConnection interface., +	public OAuth2ConnectionFactory(String providerId, OAuth2ServiceProvider<S> serviceProvider, ApiAdapter<S> apiAdapter) {, +		super(providerId, serviceProvider, apiAdapter);]
[+++ b/docs/src/reference/docbook/apis.xml, +	<title>Working with Service Provider APIs</title>, +++ b/docs/src/reference/docbook/apis.xml, +	<title>Working with Service Provider APIs</title>, +++ b/docs/src/reference/docbook/implementing.xml, +			By now, you should have a API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform Connection model.]
[+++ b/docs/src/reference/docbook/overview.xml, +, +		<para>, +			The phrase "social networking" often refers to efforts aimed at bringing people together., +			In the software world, those efforts take the form of online social networks such as Facebook, Twitter, and LinkedIn., +			Roughly half a billion of this world's internet users have flocked to these services to keep frequent contact with family, friends, and colleagues., +		</para>, +		<para>, +			Under the surface, however, these services are just software applications that gather, store, and process information., +			Just like so many applications written before, these social networks have users who sign in and perform some activity offered by the service., +		</para>, +		<para>, +			What makes these applications a little different than traditional applications is that the data that they collect represent some facet of their users' lives., +			What's more, these applications are more than willing to share that data with other applications, as long as the user gives permission to do so., +			This means that although these social networks are great at bringing people together, as software services they also excel at bringing applications together., +		</para>, +		<para>, +			To illustrate, imagine that Paul is a member of an online movie club., +			A function of the movie club application is to recommend movies for its members to watch and to let its members maintain a list of movies that they have seen and those that they plan to see., +			When Paul sees a movie, he signs into the movie club site, checks the movie off of his viewing list, and indicates if he liked the movie or not., +			Based on his responses, the movie club application can tailor future recommendations for Paul to see., +		</para>, +		<para>, +			On its own, the movie club provides great value to Paul, as it helps him choose movies to watch., +			But Paul is also a Facebook user. And many of Paul's Facebook friends also enjoy a good movie now and then., +			If Paul were able to connect his movie club account with his Facebook profile, the movie club application could offer him a richer experience., +			Perhaps when he sees a movie, the application could post a message on his Facebook wall indicating so., +			Or when offering suggestions, the movie club could factor in the movies that his Facebook friends liked., +		</para>, +		<para>, +			Social integration is a three-way conversation between a service provider, a service consumer, and a user who holds an account on both the provider and consumer., +			All interactions between the consumer and the service provider are scoped to the context of the user's profile on the service provider., +		</para>, +		<para>, +			In the narrative above, Facebook is the service provider, the movie club application is the service consumer, and Paul is the user of both., +			The movie club application may interact with Facebook on behalf of Paul, accessing whatever Facebook data and functionality that Paul permits, including retrieving Paul's friends and posting messages to his wall., +		</para>, +		<para>, +			From the user's perspective, both applications provide some valuable functionality., +			But by connecting the user's account on the consumer application with his account on the provider application, the user brings together two applications that can now offer the user more value than they could individually., +		</para>, +		<para>, +			With Spring Social, your application can play the part of the service consumer, interacting with a service provider on behalf of its users. The key features of Spring Social are:, +		</para>, +		<para>, +			The core Spring Social project consists of the modules described in <xref linkend="table-spring-social-modules"/>., +		</para>, +		<para>, +			Which of these modules your application needs will largely depend on what facets of Spring Social you intend to use. At very minimum, you'll need the core module in your application's classpath:, +		</para>, +    <version>${spring-social.version}</version>, +		<para>, +			To let Spring Social handle the back-and-forth authorization handshake between your web application and a service provider, you'll need the web module:, +		</para>, +    <version>${spring-social.version}</version>, +			If you're developing your own provider module and API binding, you'll need the test module to test it:, +		<programlisting language="xml"><![CDATA[, +<dependency>, +    <groupId>org.springframework.social</groupId>, +    <artifactId>spring-social-test</artifactId>, +    <version>${spring-social.version}</version>, +</dependency>]]>, +		</programlisting>, +				In addition to modules that make up the core Spring Social project, there are a number of provider modules that are released separately that provide connectivity and API bindings to popular SaaS providers., +    <version>${spring-social-facebook.version}</version>, +	, +	<section id="overview-dependencies">, +		<title>Dependencies</title>, +		<para>, +			Spring Social depends on a few things to run. Most dependencies are optional and an effort has been made to keep the required dependencies to a minimum., +			The project dependencies are described in this section., +		</para>, +		<section id="overview-dependencies-java">, +			<title>Java</title>, +			<para>, +				Spring Social requires Java 1.5 or greater., +			</para>, +		</section>, +		<section id="overview-dependencies-javaee">, +			<title>Java Servlet API</title>, +			<para>, +				The Spring Social web support requires Java Servlet 2.5 or greater (Tomcat 6+)., +			</para>, +		</section>, +		<section id="overview-dependencies-spring">, +			<title>Spring Framework</title>, +			<para>, +				Spring Social depends on RestTemplate provided by the core <ulink url="http://www.springsource.org/documentation">Spring Framework</ulink> in the spring-web module., +				It requires Spring Framework version 3.0.5 or above., +				Spring Framework 3.1 is recommended to take advantage of several RestTemplate improvements., +			</para>, +			<para>, +				If you are using Spring Social with Spring Framework 3.0.5, make sure you explicitly add the spring-web dependency to your build:, +			</para>, +			<programlisting language="xml"><![CDATA[, +<dependency>, +    <groupId>org.springframework</groupId>, +    <artifactId>spring-web</artifactId>, +    <version>3.0.5.RELEASE</version>, +</dependency>]]>]
[+++ b/spring-social-test/src/main/java/org/springframework/social/test/connect/MockConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.test.connect;, +, +import java.io.Serializable;, +import java.security.SecureRandom;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.connect.support.Connection;, +import org.springframework.social.connect.support.ConnectionRepository;, +, +/**, + * Stub in-memory ConnectionRepository implementation useful for ServiceProvider unit testing., + * @author Keith Donald, + */, +public class MockConnectionRepository implements ConnectionRepository {, +, +	private final SecureRandom secureRandom = new SecureRandom();, +	, +	private final List<Map<String, Object>> connections = new ArrayList<Map<String, Object>>();, +	, +	public boolean isConnected(Serializable accountId, String providerId) {, +		for (Map<String, Object> connection : connections) {, +			if (connection.get("accountId").equals(accountId) && connection.get("providerId").equals(providerId)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	public List<Connection> findConnections(Serializable accountId, String providerId) {, +		List<Connection> connectionList = new ArrayList<Connection>();, +		for (Map<String, Object> connection : connections) {, +			if (connection.get("accountId").equals(accountId) && connection.get("providerId").equals(providerId)) {, +				connectionList.add(new Connection((Long) connection.get("id"), (String) connection.get("accessToken"), (String) connection.get("secret"), (String) connection.get("refreshToken"), (String) connection.get("providerAccountId")));, +			}, +		}, +		return connectionList;, +	}, +, +	public Connection saveConnection(Serializable accountId, String providerId, Connection connection) {, +		for (Iterator<Map<String, Object>> it = connections.iterator(); it.hasNext();) {, +			Map<String, Object> conn = it.next();, +			if (conn.get("accountId").equals(accountId) && conn.get("providerId").equals(providerId) && conn.get("accessToken").equals(connection.getAccessToken())) {, +				throw new IllegalArgumentException("Duplicate connection");, +			}, +		}, +		Long connectionId = secureRandom.nextLong();, +		Map<String, Object> newConn = new HashMap<String, Object>();, +		newConn.put("accountId", accountId);, +		newConn.put("providerId", providerId);, +		newConn.put("accessToken", connection.getAccessToken());, +		newConn.put("secret", connection.getSecret());, +		newConn.put("refreshToken", connection.getRefreshToken());, +		newConn.put("id", connectionId);, +		newConn.put("providerAccountId", connection.getProviderAccountId());, +		connections.add(newConn);, +		return new Connection(connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken(), connection.getProviderAccountId());, +	}, +, +	public void removeConnection(Serializable accountId, String providerId, Long connectionId) {, +		for (Iterator<Map<String, Object>> it = connections.iterator(); it.hasNext();) {, +			Map<String, Object> connection = it.next();, +			if (connection.get("accountId").equals(accountId) && connection.get("providerId").equals(providerId) && connection.get("id").equals(connectionId)) {, +				it.remove();, +				break;, +			}, +		}, +	}, +	, +	public Serializable findAccountIdByConnectionAccessToken(String provider, String accessToken) {, +		throw new UnsupportedOperationException("Not yet implemented");, +	}, +, +	public List<Serializable> findAccountIdsForProviderAccountIds(String providerId, List<String> providerAccountIds) {, +		throw new UnsupportedOperationException("Not yet implemented");, +	}, +}, +++ b/spring-social-test/src/main/java/org/springframework/social/test/connect/MockConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *]
[+++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +/*, + * Copyright 2015-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web.thymeleaf;, +, +import org.springframework.context.ApplicationContext;, +import org.springframework.social.connect.ConnectionRepository;, +import org.thymeleaf.context.IContext;, +import org.thymeleaf.context.ITemplateContext;, +import org.thymeleaf.engine.AttributeName;, +import org.thymeleaf.exceptions.ConfigurationException;, +import org.thymeleaf.model.IProcessableElementTag;, +import org.thymeleaf.processor.IProcessor;, +import org.thymeleaf.spring5.context.SpringContextUtils;, +import org.thymeleaf.standard.processor.AbstractStandardConditionalVisibilityTagProcessor;, +import org.thymeleaf.templatemode.TemplateMode;, +, +/**, + * Implementation of the Spring Social Thymeleaf dialect's <code>social:connected</code> attribute., + * Conditionally renders content based on whether or not the current user is connected to the provider whose ID is given as the attribute value., + * @author Craig Walls, + */, +class ConnectedAttrProcessor extends AbstractStandardConditionalVisibilityTagProcessor implements IProcessor {, +, +	public ConnectedAttrProcessor(TemplateMode templateMode, String dialectPrefix) {, +		super(templateMode, dialectPrefix, "connected", 300);, +	}, +, +	@Override, +	protected boolean isVisible(ITemplateContext context, IProcessableElementTag tag, AttributeName attributeName, String attributeValue) {, +		final String providerId = tag.getAttributeValue(attributeName);, +		if (providerId == null || providerId.trim().equals("")) {, +			return false;, +		}, +		ConnectionRepository connectionRepository = getConnectionRepository(context);, +		return connectionRepository.findConnections(providerId).size() > 0;, +	}, +, +	private ConnectionRepository getConnectionRepository(final ITemplateContext templateContext) {, +		ApplicationContext applicationContext = SpringContextUtils.getApplicationContext(templateContext);, +		ConnectionRepository connectionRepository = applicationContext.getBean(ConnectionRepository.class);, +		return connectionRepository;, +	}, +, +}, +++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +/*, + * Copyright 2015-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Exception indicating that the authorization presented to the server has expired., +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Exception indicating that the authorization presented to the server has expired., +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, + * Exception indicating an internal error occurred on the server., +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Exception indicating that the authorization presented to the server has expired., +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, + * Exception indicating an internal error occurred on the server., +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/src/dist/changelog.txt, + Bug Fixes, +  * Set character set to UTF-8 for string parts of multipart messages to allow for, +    Korean and other characters to be posted in status updates. (SOCIALTW-37), +]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 1 (Oct 29, 2010), +==============================================, +, +New Features, +   * OAuthSigningClientHttpRequest and OAuthSigningClientHttpRequestFactory for signing, +     requests sent through RestTemplate, +   * TwitterOperations/TwitterTemplate for interaction with Twitter's REST API, +      * Supports tweeting, retweeting, retrieval of friends, retrieval of screen name,, +        and searching, +   * FacebookOperations/FacebookTemplate for interaction with Facebook's Graph API, +      * Supports posting messages (and links) to a user's wall, retrieval of friends,, +        retrieval of profile ID, profile picture, profile URL., +   * LinkedInOperations/LinkedInTemplate for interaction with LinkedIn's REST API, +      * Supports retrieval of a user's connections and profile details, +   * TripItOperations/TripItTemplate for interaction with TripItTemplate, +      * Supports retrieval of a user's profile details, and upcoming trips, +   * GreenhouseOperations/GreenhouseTemplate for interaction with Greenhouse's REST API, +      * Supports retrieval of a user's profile details, upcoming events, events after a, +        given day, and sessions taking place on a given day, +   * FacebookWebArgumentResolver to extract a Facebook user's user ID and access token out, +     of the cookie written at authentication, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 1 (Oct 29, 2010), +==============================================, +, +New Features, +   * OAuthSigningClientHttpRequest and OAuthSigningClientHttpRequestFactory for signing, +     requests sent through RestTemplate, +   * TwitterOperations/TwitterTemplate for interaction with Twitter's REST API, +      * Supports tweeting, retweeting, retrieval of friends, retrieval of screen name,, +        and searching, +   * FacebookOperations/FacebookTemplate for interaction with Facebook's Graph API, +      * Supports posting messages (and links) to a user's wall, retrieval of friends,, +        retrieval of profile ID, profile picture, profile URL., +   * LinkedInOperations/LinkedInTemplate for interaction with LinkedIn's REST API, +      * Supports retrieval of a user's connections and profile details, +   * TripItOperations/TripItTemplate for interaction with TripItTemplate, +      * Supports retrieval of a user's profile details, and upcoming trips, +   * GreenhouseOperations/GreenhouseTemplate for interaction with Greenhouse's REST API, +      * Supports retrieval of a user's profile details, upcoming events, events after a, +        given day, and sessions taking place on a given day, +   * FacebookWebArgumentResolver to extract a Facebook user's user ID and access token out, +     of the cookie written at authentication, +++ b/docs/src/info/readme.txt, +SPRING SOCIAL 1.0.0 M1 (OCT 29, 2010), +-------------------------------------, +, +Spring Social is released under the terms of the Apache Software License, , +Version 2.0 (see license.txt)., +, +, +DISTRIBUTION CONTENTS:, +, +The JARs are available in the 'bin' directory, and the source JARs are in , +the 'src' directory., +, +The javadoc is located in the 'docs' directory., +, +, +EXAMPLE CODE:, +, +For an example of how Spring Social can be used in a social-ready application, , +see the Greenhouse project. Greenhouse illustrates real-world use of the main , +features of Spring Social. To get the latest Greenhouse code, clone the Git , +repository at either of the two following URLs:, +, + - git://git.springsource.org/greenhouse/greenhouse.git, + - http://http.git.springsource.org/greenhouse/greenhouse.git, + ]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.beans.factory.InitializingBean;, +public class ConnectController implements InitializingBean {, +	private ConnectSupport connectSupport;, +	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();, +	, +		connectSupport.setApplicationUrl(applicationUrl);, +	 * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., +	 * The default strategy is to set the data as attributes in the HTTP Session., +	 * @param sessionStrategy the session strategy., +	 */, +	public void setSessionStrategy(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +	, +	/**, +			return new RedirectView(connectSupport.buildOAuthUrl(connectionFactory, request, parameters));, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +			Connection<?> connection = connectSupport.completeConnection(connectionFactory, request);, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +			Connection<?> connection = connectSupport.completeConnection(connectionFactory, request);, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +		sessionStrategy.setAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE, errorMap);, +	// From InitializingBean, +	public void afterPropertiesSet() throws Exception {, +		this.connectSupport = new ConnectSupport(sessionStrategy);, +	}, +, +			sessionStrategy.setAttribute(request, DUPLICATE_CONNECTION_ATTRIBUTE, e);, +		model.addAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, sessionStrategy.getAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE));, +		sessionStrategy.removeAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE);, +		if (sessionStrategy.getAttribute(request, attributeName) != null) {, +			sessionStrategy.removeAttribute(request, attributeName);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.beans.factory.InitializingBean;, +public class ConnectController implements InitializingBean {, +	private ConnectSupport connectSupport;, +	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();, +	, +		connectSupport.setApplicationUrl(applicationUrl);, +	 * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., +	 * The default strategy is to set the data as attributes in the HTTP Session., +	 * @param sessionStrategy the session strategy., +	 */, +	public void setSessionStrategy(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +	, +	/**, +			return new RedirectView(connectSupport.buildOAuthUrl(connectionFactory, request, parameters));, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +			Connection<?> connection = connectSupport.completeConnection(connectionFactory, request);, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +			Connection<?> connection = connectSupport.completeConnection(connectionFactory, request);, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +		sessionStrategy.setAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE, errorMap);, +	// From InitializingBean, +	public void afterPropertiesSet() throws Exception {, +		this.connectSupport = new ConnectSupport(sessionStrategy);, +	}, +, +			sessionStrategy.setAttribute(request, DUPLICATE_CONNECTION_ATTRIBUTE, e);, +		model.addAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, sessionStrategy.getAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE));, +		sessionStrategy.removeAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE);, +		if (sessionStrategy.getAttribute(request, attributeName) != null) {, +			sessionStrategy.removeAttribute(request, attributeName);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private SessionStrategy sessionStrategy;, +	, +	public ConnectSupport() {, +		this(new HttpSessionSessionStrategy());, +	}, +	, +	public ConnectSupport(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +	, +		sessionStrategy.setAttribute(request, OAUTH_TOKEN_ATTRIBUTE, requestToken);, +		sessionStrategy.setAttribute(request, OAUTH2_STATE_ATTRIBUTE, state);, +		OAuthToken requestToken = (OAuthToken) sessionStrategy.getAttribute(request, OAUTH_TOKEN_ATTRIBUTE);, +		sessionStrategy.removeAttribute(request, OAUTH_TOKEN_ATTRIBUTE);, +		String state = (String) sessionStrategy.getAttribute(request, OAUTH2_STATE_ATTRIBUTE);, +		sessionStrategy.removeAttribute(request, OAUTH2_STATE_ATTRIBUTE);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.beans.factory.InitializingBean;, +public class ConnectController implements InitializingBean {, +	private ConnectSupport connectSupport;, +	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();, +	, +		connectSupport.setApplicationUrl(applicationUrl);, +	 * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., +	 * The default strategy is to set the data as attributes in the HTTP Session., +	 * @param sessionStrategy the session strategy., +	 */, +	public void setSessionStrategy(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +	, +	/**, +			return new RedirectView(connectSupport.buildOAuthUrl(connectionFactory, request, parameters));]
[+++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="implementing" xmlns:xlink="http://www.w3.org/1999/xlink">, +	<title>Implementing Service Providers</title>, +	<para>, +		The spring-social-core module provides support for implementing your own ServiceProviders., +		This support consists of convenient base classes for the various ServiceProvider types, such as OAuth1 and OAuth2-based providers., +		A common data access interface is also provided for persisting connection information., +		In this section, you will learn how to implement ServiceProviders., +	</para>, +	<section id="service-providers-implementing-oauth2">, +		<title>OAuth2 Service Providers</title>, +		<para>, +			To implement an OAuth2-based ServiceProvider, first extend AbstractOAuth2ServiceProvider., +			Parameterize &lt;S&gt; to be the Java Binding to the ServiceProvider API., +			Define a single constructor that accepts an clientId, clientSecret, and ConnectionRepository., +			Finally, implement getApi(String) to return a new API instance., +		</para>, +		<para>, +			See FacebookServiceProvider as an example of an OAuth2-based ServiceProvider:, +		</para>, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.facebook.connect;, +, +import org.springframework.social.connect.oauth2.AbstractOAuth2ServiceProvider;, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.facebook.FacebookApi;, +import org.springframework.social.facebook.FacebookTemplate;, +import org.springframework.social.oauth2.OAuth2Template;, +, +public final class FacebookServiceProvider extends AbstractOAuth2ServiceProvider<FacebookApi> {, +, +    public FacebookServiceProvider(String clientId, String clientSecret, ConnectionRepository connectionRepository) {, +        super("facebook", connectionRepository, , +            new OAuth2Template(appId, appSecret,, +                "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", , +                "https://graph.facebook.com/oauth/access_token"));, +    }, +, +    @Override, +    protected FacebookApi getApi(String accessToken) {, +        return new FacebookTemplate(accessToken);, +    }, +, +}]]>, +		</programlisting>, +		<para>, +			In the constructor, you should call super, passing up the ID of the ServiceProvider, the connection repository, and a configured OAuth2Template, which implements OAuth2Operations., +			The OAuth2Template will handle the "OAuth dance" with the provider, and should be configured with the provided clientId and clientSecret, along with the provider-specific authorizeUrl and accessTokenUrl., +		</para>, +		<para>, +			In getApi(String), you should construct your Service API implementation, passing it the access token needed to make requests for protected resources., +			Inside the API implementation, we generally recommend using RestTemplate to make the HTTP calls and add the required Authorization header:, +		</para>, +		<programlisting language="java"><![CDATA[, +public FacebookTemplate(String accessToken) {, +    restTemplate = new RestTemplate();, +    // configures an interceptor that adds the Authorization header to each ClientRequest before it is executed, +    restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] { OAuth2RequestInterceptor.draft10(accessToken) });, +}]]>, +		</programlisting>, +		<para>, +			An example API call with RestTemplate is shown below:, +		</para>, +		<programlisting language="java"><![CDATA[, +public FacebookProfile getUserProfile(String facebookId) {, +    return new FacebookProfile(restTemplate.getForObject("https://graph.facebook.com/{facebookId}", Map.class, facebookId));, +}]]>, +		</programlisting>, +	</section>, +	<section id="service-providers-implementing-oauth1">, +		<title>OAuth1 Service Providers</title>, +		<para>, +			To implement an OAuth1-based ServiceProvider, first extend AbstractOAuth1ServiceProvider.]
[+++ b/docs/src/reference/docbook/overview.xml, +, +  <section id="overview-social">, +      <title>Socializing applications</title>, +      , +      <para>The phrase "social networking" often refers to efforts aimed at bringing people together. In the software world, those efforts take the form of online social networks such as Facebook, Twitter, and LinkedIn. Roughly half a billion of this world's internet users have flocked to these services to keep frequent contact with family, friends, and colleagues.</para>, +      , +      <para>Under the surface, however, these services are just software applications that gather, store, and process information. Just like so many applications written before, these social networks have users who sign in and perform some activity offered by the service.</para>, +      , +      <para>What makes these applications a little different than traditional applications is that the data that they collect represent some facet of their users' lives. What's more, these applications are more than willing to share that data with other applications, as long as the user gives permission to do so. This means that although these social networks are great at bringing people together, as software services they also excel at bringing applications together</para>, +, +      <para>To illustrate, imagine that Paul, is a member of an online movie club. A function of the movie club application is to recommend movies for its members to watch and to let its members maintain a list of movies that they have seen and those that they plan to see. When Paul sees a movie, he signs into the movie club site and checks it off of his viewing list and indicating if he liked the movie or not. Based on his responses, the movie club application can tailor its future suggestions for Paul to see.</para>, +      , +      <para>On its own, the movie club provides great value to Paul, as it helps him choose movies to watch. But Paul is also a Facebook user. And many of Paul's Facebook friends also enjoy a good movie now and then. If Paul were able to connect his movie club account with his Facebook profile, the movie club application could offer him a richer experience. Perhaps when he sees a movie, the application could post a message on his Facebook wall indicating so. Or when offering suggestions, the movie club could factor in the movies that his Facebook friends liked.</para>, +      , +      <para>In a typical social integration scenario, there are three actors: A service provider, a service consumer, and a user. The service provider and consumer are both application with which the user holds an account. In the narrative above, Facebook is the service provider, the book club application is the service consumer, and Paul is the user of them both.</para>, +      , +      <para>From the user's perspective, both applications provide some valuable functionality. But by connecting the user's account on the consumer application with his account on the provider application, the user brings together two applications that can now offer the user more value than they could individually.</para>, +      , +      <para>With Spring Social, an application can play the part of the service consumer, interacting with a service provider on behalf of its users.</para>, +  </section>, +  , +  <section id="overview-howtoget">, +      <title>How to get</title>, +, +      <para>Spring Social is divided into the modules described in <xref linkend="table-spring-social-modules"/>.</para>, +      , +      <table xml:id="table-spring-social-modules">, +        <title>Spring Social Modules</title>, +        <tgroup cols="2">, +          <colspec align="left" />, +          <colspec colnum="1" colname="col1" colwidth="2*"/>, +          <colspec colnum="2" colname="col2" colwidth="2*"/>, +          <thead>, +            <row>, +              <entry align="center">Name</entry>, +              <entry align="center">Description</entry>, +            </row>, +          </thead>, +          <tbody>, +            <row>, +              <entry>spring-social-core</entry>, +              <entry>Spring Social's service provider framework and OAuth support.</entry>, +            </row>, +            <row>, +              <entry>spring-social-config</entry>, +              <entry>Spring Social's XML configuration namespace for configuring service providers in Spring.</entry>, +            </row>, +            <row>, +              <entry>spring-social-web</entry>, +              <entry>Spring Social's <classname>ConnectController</classname>, which handles the OAuth process, establishing connections with social providers.</entry>, +            </row>, +            <row>, +              <entry>spring-social-facebook</entry>, +              <entry>Includes Spring Social's Facebook API as well as support for signing into an application through Facebook.</entry>, +            </row>, +            <row>, +              <entry>spring-social-github</entry>, +              <entry>Includes Spring Social's GitHub API.</entry>, +            </row>, +            <row>, +              <entry>spring-social-gowalla</entry>, +              <entry>Includes Spring Social's Gowalla API.</entry>, +            </row>, +            <row>, +              <entry>spring-social-linkedin</entry>, +              <entry>Includes Spring Social's LinkedIn API.</entry>, +            </row>, +            <row>, +              <entry>spring-social-tripit</entry>, +              <entry>Includes Spring Social's TripIt API.</entry>, +            </row>, +            <row>, +              <entry>spring-social-twitter</entry>, +              <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, +            </row>, +          </tbody>, +        </tgroup>, +      </table>, +      , +      <para>Which of these modules your application needs will largely depend on what facets of Spring Social you intend to use. At very minimum, you'll need the core module in your application's classpath:</para>, +      , +      <programlisting language="xml"><![CDATA[, +<dependency>, +  <groupId>org.springframework.social</groupId>, +  <artifactId>spring-social-core</artifactId>, +  <version>${org.springframework.social-version}</version>, +</dependency>]]>, +	  </programlisting>, +	  , +	  <para>To simplify configuration of service providers as beans in Spring, you'll want to also include the config module:</para>, +	  , +      <programlisting language="xml"><![CDATA[, +<dependency>, +<groupId>org.springframework.social</groupId>, +<artifactId>spring-social-config</artifactId>, +<version>${org.springframework.social-version}</version>, +</dependency>]]>, +	  </programlisting>, +	  ]
[+++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/web.xml]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +package org.springframework.social.oauth1;, +, +import java.net.MalformedURLException;, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.social.oauth.AuthorizationException;, +import org.springframework.social.oauth.OAuthClientRequestAuthorizer;, +, +public class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +, +	private final OAuth1Template oauthTemplate;, +, +	public OAuth1ClientRequestAuthorizer(OAuth1Template oauthTemplate) {, +		this.oauthTemplate = oauthTemplate;, +	}, +, +	@Override, +	public ClientHttpRequest authorize(ClientHttpRequest request) throws AuthorizationException {, +		try {, +			Map<String, String> params = extractParametersFromRequest(request);, +			request.getHeaders().add("Authorization",, +					oauthTemplate.buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +			return request;, +		} catch (MalformedURLException e) {, +			throw new AuthorizationException("Bad URL", e);, +		}, +	}, +, +	Map<String, String> extractParametersFromRequest(ClientHttpRequest request) {, +		if (request.getMethod().equals(HttpMethod.POST) || request.getMethod().equals(HttpMethod.PUT)) {, +			return new HashMap<String, String>();, +		} else {, +			return extractQueryParameters(request);, +		}, +	}, +, +	private Map<String, String> extractQueryParameters(ClientHttpRequest request) {, +		HashMap<String, String> paramMap = new HashMap<String, String>();, +, +		String queryString = request.getURI().getQuery();, +		if (queryString != null) {, +			String[] paramPairs = queryString.split("[\\?|\\&]");, +, +			for (String paramPair : paramPairs) {, +				String[] split = paramPair.split("\\=");, +				String value = split.length > 1 ? split[1] : null;, +				paramMap.put(split[0], value);, +			}, +		}, +, +		return paramMap;, +	}]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +		<title>Establishing connections</title>, +			<title>OAuth2 service providers</title>, +			<title>OAuth1 service providers</title>, +	</section>, +		<title>Persisting connections</title>, +    <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +    <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +    <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +			Note that all operations on this repository are scoped relative to the "current user" that has authenticated with your local application., +			For standalone, desktop, or mobile environments that only have one user this distinction isn't important., +			In a multi-user web application environment, this implies ServiceProviderConnectionRepository instances will be request-scoped., +			These operations include the ability to lookup the local userIds associated with connections to support provider user sign-in and "registered friends" scenarios., +			<title>JDBC-based persistence</title>, +				Spring Social provides a JdbcMultiUserServiceProviderConnectionRepository capable of persisting connections to a RDBMS., +				The database schema suited to support is defined in JdbcMultiUserServiceProviderConnectionRepository.sql., +				The implementation also provides support for encrypting authorization credentials so they are not stored in plain-text.]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		if (isSocialSecurityAvailable()) {, +			// TODO: Determine if the class is assignable to a SocialAuthenticationService , +			this.authenticationServiceClass = getAuthenticationServiceClass();, +		}, +	protected Class<?> getAuthenticationServiceClass() {, +		return null;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		if (isSocialSecurityAvailable()) {, +			// TODO: Determine if the class is assignable to a SocialAuthenticationService , +			this.authenticationServiceClass = getAuthenticationServiceClass();, +		}, +	protected Class<?> getAuthenticationServiceClass() {, +		return null;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +	, +	@Override, +	protected Class<?> getAuthenticationServiceClass() {, +		return FakeSocialAuthenticationService.class;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		if (isSocialSecurityAvailable()) {, +			// TODO: Determine if the class is assignable to a SocialAuthenticationService , +			this.authenticationServiceClass = getAuthenticationServiceClass();, +		}, +	protected Class<?> getAuthenticationServiceClass() {, +		return null;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +	, +	@Override, +	protected Class<?> getAuthenticationServiceClass() {, +		return FakeSocialAuthenticationService.class;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.config.FakeSocialAuthenticationService;, +	@Override, +	protected Class<?> getAuthenticationServiceClass() {, +		return FakeSocialAuthenticationService.class;, +	}, +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private String applicationUrl = null;, +	, +		this.applicationUrl = applicationUrl;, +		if (applicationUrl != null) {, +			this.connectSupport.setApplicationUrl(applicationUrl);, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private String applicationUrl = null;, +	, +		this.applicationUrl = applicationUrl;, +		if (applicationUrl != null) {, +			this.connectSupport.setApplicationUrl(applicationUrl);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.mem.InMemoryUsersConnectionRepository;, +	public void createConnectController_setApplicationUrl() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionRepository connectionRepository = new InMemoryUsersConnectionRepository(connectionFactoryLocator).createConnectionRepository("userid");, +		ConnectController controller = new ConnectController(connectionFactoryLocator, connectionRepository);, +		controller.setApplicationUrl("http://baseurl.com/");, +	}, +	, +	@Test]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +	private final OAuth1Credentials credentials;, +		credentials = null;, +		credentials = new OAuth1Credentials(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +		restTemplate = ProtectedResourceClientFactory.create(credentials);, +			this.restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, +		return credentials != null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +	private final OAuth1Credentials credentials;, +		credentials = null;, +		credentials = new OAuth1Credentials(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +		restTemplate = ProtectedResourceClientFactory.create(credentials);, +			this.restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, +		return credentials != null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	public static RestTemplate create(OAuth1Credentials credentials) {, +			client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(credentials)});, +			client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), credentials));, +	public static ClientHttpRequestFactory addOAuthSigning(ClientHttpRequestFactory requestFactory, OAuth1Credentials credentials) {, +		return new Spring30OAuth1RequestFactory(requestFactory, credentials);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.io.IOException;, +import java.net.URI;, +import java.util.List;, +import java.util.Map;, +, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpEntityEnclosingRequest;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.protocol.HTTP;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.AbstractBufferingClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * {@link org.springframework.http.client.ClientHttpRequest} implementation that uses, + * Apache HTTPComponents HttpClient to execute requests., + *, + * <p>Created via the {@link HttpComponentsClientHttpRequestFactory}., + *, + * @author Oleg Kalnichevski, + * @author Arjen Poutsma, + * @since 3.0, + * @see HttpComponentsClientHttpRequestFactory#createRequest(URI, HttpMethod), + */, +final class HttpComponentsClientHttpRequest extends AbstractBufferingClientHttpRequest {, +, +	private final HttpClient httpClient;, +, +	private final HttpUriRequest httpRequest;, +, +	public HttpComponentsClientHttpRequest(HttpClient httpClient, HttpUriRequest httpRequest) {, +		this.httpClient = httpClient;, +		this.httpRequest = httpRequest;, +	}, +, +	public HttpMethod getMethod() {, +		return HttpMethod.valueOf(httpRequest.getMethod());, +	}, +, +	public URI getURI() {, +		return httpRequest.getURI();, +	}, +, +	@Override, +	protected ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {, +		for (Map.Entry<String, List<String>> entry : headers.entrySet()) {, +			String headerName = entry.getKey();, +			if (!headerName.equalsIgnoreCase(HTTP.CONTENT_LEN) &&, +					!headerName.equalsIgnoreCase(HTTP.TRANSFER_ENCODING)) {, +				for (String headerValue : entry.getValue()) {, +					httpRequest.addHeader(headerName, headerValue);, +				}, +			}, +		}, +		if (httpRequest instanceof HttpEntityEnclosingRequest) {, +			HttpEntityEnclosingRequest entityEnclosingRequest = (HttpEntityEnclosingRequest) httpRequest;, +			HttpEntity requestEntity = new ByteArrayEntity(bufferedOutput);, +			entityEnclosingRequest.setEntity(requestEntity);, +		}, +		HttpResponse httpResponse = httpClient.execute(httpRequest);, +		return new HttpComponentsClientHttpResponse(httpResponse);, +, +	}, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param tokenValue the token value received from the provider., +	 * @param tokenSecret the token secret received from the provider., +	 * @param response all parameters from the response received in the request/access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, +		return new OAuthToken(tokenValue, tokenSecret);, +	}, +, +	/**, +		return createOAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param tokenValue the token value received from the provider., +	 * @param tokenSecret the token secret received from the provider., +	 * @param response all parameters from the response received in the request/access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, +		return new OAuthToken(tokenValue, tokenSecret);, +	}, +, +	/**, +		return createOAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuthToken.java, +public class OAuthToken implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param tokenValue the token value received from the provider., +	 * @param tokenSecret the token secret received from the provider., +	 * @param response all parameters from the response received in the request/access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, +		return new OAuthToken(tokenValue, tokenSecret);, +	}, +, +	/**, +		return createOAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuthToken.java, +public class OAuthToken implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +public class AccessGrant implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param tokenValue the token value received from the provider., +	 * @param tokenSecret the token secret received from the provider., +	 * @param response all parameters from the response received in the request/access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, +		return new OAuthToken(tokenValue, tokenSecret);, +	}, +, +	/**, +		return createOAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuthToken.java, +public class OAuthToken implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +public class AccessGrant implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	 * The default implementation uses RestTemplate to request the access token and expects a JSON response to be bound to a Map. The information in the Map will be used to create an {@link AccessGrant}., +	 * Since the OAuth 2 specification indicates that an access token response should be in JSON format, there's often no need to override this method., +	 * If all you need to do is capture provider-specific data in the response, you should override createAccessGrant() instead., +	 * However, in the event of a provider whose access token response is non-JSON, you may need to override this method to request that the response be bound to something other than a Map., +	 * For example, if the access token response is given as form-encoded, this method should be overridden to call RestTemplate.postForObject() asking for the response to be bound to a MultiValueMap (whose contents can then be used to create an AccessGrant)., +	/**, +	 * Creates an {@link AccessGrant} given the response from the access token exchange with the provider., +	 * May be overridden to create a custom AccessGrant that captures provider-specific information from the access token response. , +	 * @param accessToken the access token value received from the provider, +	 * @param scope the scope of the access token, +	 * @param refreshToken a refresh token value received from the provider, +	 * @param expiresIn the time (in seconds) remaining before the access token expires., +	 * @param response all parameters from the response received in the access token exchange., +	 * @return an {@link AccessGrant}, +	 */, +	protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Integer expiresIn, Map<String, Object> response) {, +		return new AccessGrant(accessToken, scope, refreshToken, expiresIn);, +	}, +		, +		return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), (Integer) result.get("expires_in"), result);]
[+++ b/docs/src/reference/docbook/implementing.xml, +			A Spring Social client module is a standard Java project that builds a single jar artifact e.g. spring-social-twitter.jar., +			We recommend the code structure of a client module follow the guidelines described below., +			<title>Code structure guidelines</title>, +				We recommend the code for a new Spring Social client module reside within the <code>org.springframework.social.{providerId}</code> base package,, +				Each request made to the API server needs to be signed with the authorization credentials provided during construction of the binding., +				For complete implementation examples, consult the source of the existing API bindings included in Spring Social., +				The <code>spring-social-twitter</code> and <code>spring-social-facebook</code> modules provide particularly good references., +TwitterTemplate twitter = new TwitterTemplate("consumerKey", "consumerSecret", "accessToken", "accessTokenSecret");, +				For complete test examples, consult the source of the existing API bindings included in Spring Social., +				The <code>spring-social-twitter</code> and <code>spring-social-facebook</code> modules provide particularly good references., +				To implement an OAuth2-based ServiceProvider, first create a subclass of AbstractOAuth2ServiceProvider named {ProviderId}ServiceProvider., +				To implement an OAuth1-based ServiceProvider, first create a subclass of AbstractOAuth1ServiceProvider named {ProviderId}ServiceProvider., +		<para>, +			By now, you should have a API binding to the provider's API, a ServiceProvider&lt;S&gt; implementation for conducting the "authorization dance", and a ServiceApiAdapter&lt;S&gt; implementation for mapping onto the uniform ServiceProviderConnection model., +			The last step in adding support for a new service provider is to create a ServiceProviderConnectionFactory that wraps up these artifacts and provides a simple interface for establishing ServiceProviderConnections., +			After this is done, you may use your connection factory directly, or you may add it to a registry where it can be used by the framework to establish connections in a dynamic, self-service manner., +		</para>, +		<para>, +			Like a ServiceProvider&lt;S&gt;, a ServiceProviderConnectionFactory specialization exists for each authorization protocol., +			For example, if you are adding support for a OAuth2-based provider, you would extend from OAuth2ServiceProviderConnectionFactory., +			Implementation guidelines for each type are provided below., +		</para>, +		<section id="service-providers-implementing-serviceproviderconnectionfactory-oauth2">, +			<title>OAuth2</title>, +			<para>, +				Create a subclass of OAuth2ServiceProviderConnectionFactory&lt;S&gt; named {ProviderId}ServiceProviderConnectionFactory and parameterize S to be the Java binding to the service provider's API., +				Define a single constructor that accepts a clientId and clientSecret., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}ServiceApiAdapter instance. 			, +			</para>, +			<para>, +				See <code>org.springframework.social.facebook.connect.FacebookServiceProviderConnectionFactory</code> as an example OAuth2ServiceProviderConnectionFactory:, +			</para>, +			<programlisting language="java"><![CDATA[, +public final class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {, +    public FacebookServiceProviderConnectionFactory(String clientId, String clientSecret) {, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookServiceApiAdapter());, +    }, +}]]>, +			</programlisting>			, +		</section>		, +		<section id="service-providers-implementing-serviceproviderconnectionfactory-oauth2">, +			<title>OAuth1</title>, +			<para>, +				Create a subclass of OAuth1ServiceProviderConnectionFactory&lt;S&gt; named {ProviderId}ServiceProviderConnectionFactory and parameterize S to be the Java binding to the service provider's API., +				Define a single constructor that accepts a consumerKey and consumerSecret., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the consumerKey/consumerSecret, and a new {Provider}ServiceApiAdapter instance. 			, +			</para>, +			<para>, +				See <code>org.springframework.social.twitter.connect.TwitterServiceProviderConnectionFactory</code> as an example OAuth1ServiceProviderConnectionFactory:, +			</para>, +			<programlisting language="java"><![CDATA[, +public final class TwitterServiceProviderConnectionFactory extends OAuth1ServiceProviderConnectionFactory<FacebookApi> {, +    public TwitterServiceProviderConnectionFactory(String consumerKey, String consumerSecret) {, +        super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterServiceApiAdapter());, +    }, +}]]>, +			</programlisting>, +			<para>, +				Consult the source and JavaDoc API for ServiceProviderConnectionFactory and its subclasses more information, examples, and advanced customization options., +			</para>		, +		</section>, +++ b/docs/src/reference/docbook/implementing.xml, +			A Spring Social client module is a standard Java project that builds a single jar artifact e.g. spring-social-twitter.jar., +			We recommend the code structure of a client module follow the guidelines described below., +			<title>Code structure guidelines</title>, +				We recommend the code for a new Spring Social client module reside within the <code>org.springframework.social.{providerId}</code> base package,, +				Each request made to the API server needs to be signed with the authorization credentials provided during construction of the binding., +				For complete implementation examples, consult the source of the existing API bindings included in Spring Social., +				The <code>spring-social-twitter</code> and <code>spring-social-facebook</code> modules provide particularly good references., +TwitterTemplate twitter = new TwitterTemplate("consumerKey", "consumerSecret", "accessToken", "accessTokenSecret");, +				For complete test examples, consult the source of the existing API bindings included in Spring Social., +				The <code>spring-social-twitter</code> and <code>spring-social-facebook</code> modules provide particularly good references., +				To implement an OAuth2-based ServiceProvider, first create a subclass of AbstractOAuth2ServiceProvider named {ProviderId}ServiceProvider., +				To implement an OAuth1-based ServiceProvider, first create a subclass of AbstractOAuth1ServiceProvider named {ProviderId}ServiceProvider., +		<para>, +			By now, you should have a API binding to the provider's API, a ServiceProvider&lt;S&gt; implementation for conducting the "authorization dance", and a ServiceApiAdapter&lt;S&gt; implementation for mapping onto the uniform ServiceProviderConnection model., +			The last step in adding support for a new service provider is to create a ServiceProviderConnectionFactory that wraps up these artifacts and provides a simple interface for establishing ServiceProviderConnections., +			After this is done, you may use your connection factory directly, or you may add it to a registry where it can be used by the framework to establish connections in a dynamic, self-service manner., +		</para>, +		<para>, +			Like a ServiceProvider&lt;S&gt;, a ServiceProviderConnectionFactory specialization exists for each authorization protocol., +			For example, if you are adding support for a OAuth2-based provider, you would extend from OAuth2ServiceProviderConnectionFactory., +			Implementation guidelines for each type are provided below., +		</para>, +		<section id="service-providers-implementing-serviceproviderconnectionfactory-oauth2">, +			<title>OAuth2</title>, +			<para>, +				Create a subclass of OAuth2ServiceProviderConnectionFactory&lt;S&gt; named {ProviderId}ServiceProviderConnectionFactory and parameterize S to be the Java binding to the service provider's API., +				Define a single constructor that accepts a clientId and clientSecret., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}ServiceApiAdapter instance. 			, +			</para>, +			<para>, +				See <code>org.springframework.social.facebook.connect.FacebookServiceProviderConnectionFactory</code> as an example OAuth2ServiceProviderConnectionFactory:, +			</para>, +			<programlisting language="java"><![CDATA[, +public final class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {, +    public FacebookServiceProviderConnectionFactory(String clientId, String clientSecret) {, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookServiceApiAdapter());, +    }]
[+++ b/docs/src/reference/docbook/connecting.xml, +++ b/docs/src/reference/docbook/connecting.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/docs/src/reference/docbook/connecting.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/docs/src/reference/docbook/serviceprovider.xml, +				OAuth 2 is rapidly becoming a preferred authorization protocol, and is used by major service providers such as Facebook, Github, Foursquare, and 37signals.]
[+++ b/docs/src/reference/docbook/overview.xml, +			If you are developing against a milestone or release candidate version, such as 1.0.0.M1 or 1.0.0.RC1, you will need to add the following repository in order to resolve the artifact:, +				If you are using Spring Social with Spring Framework 3.0.5 or >, make sure you explicitly add the spring-web dependency to your build:, +    <version>3.0.6.RELEASE</version>, +    compile ("org.springframework:spring-web:3.0.6.RELEASE") { force=true }, +				Each binding, such as Facebook or Twitter, transitively depends on Jackson 1.8, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. ]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/reference/docbook/connecting.xml, +    public TwitterServiceProvider twitter(@Value("${twitter.consumerKey}") String consumerKey,, +            @Value("${twitter.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +    public FacebookServiceProvider facebook(@Value("${facebook.appId}") String appId,, +            @Value("${facebook.appSecret}") String appSecret, ConnectionRepository connectionRepository) {, +    public TripItServiceProvider tripit(@Value("${tripit.consumerKey}") String consumerKey,, +            @Value("${tripit.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as placeholder variables to be resolved by Spring's property placeholder support., +    public TextEncryptor textEncryptor(@Value("${security.encryptPassword}") String password,, +            @Value("${security.encryptSalt}") String salt) {, +        <constructor-arg value="${twitter.consumerKey}" />, +        <constructor-arg value="${twitter.consumerSecret}" />, +        <constructor-arg value="${facebook.appId}" />, +        <constructor-arg value="${facebook.appSecret}" />, +        <constructor-arg value="${tripit.consumerKey}" />, +        <constructor-arg value="${tripit.consumerSecret}" />, +            <constructor-arg value="${security.encryptPassword}" />, +            <constructor-arg value="${security.encryptSalt}" />, +    public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +    <constructor-arg value="${application.url}" />, +			Here the URL is specified as a placeholder variable., +public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/reference/docbook/connecting.xml, +    public TwitterServiceProvider twitter(@Value("${twitter.consumerKey}") String consumerKey,, +            @Value("${twitter.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +    public FacebookServiceProvider facebook(@Value("${facebook.appId}") String appId,, +            @Value("${facebook.appSecret}") String appSecret, ConnectionRepository connectionRepository) {, +    public TripItServiceProvider tripit(@Value("${tripit.consumerKey}") String consumerKey,, +            @Value("${tripit.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as placeholder variables to be resolved by Spring's property placeholder support., +    public TextEncryptor textEncryptor(@Value("${security.encryptPassword}") String password,, +            @Value("${security.encryptSalt}") String salt) {, +        <constructor-arg value="${twitter.consumerKey}" />, +        <constructor-arg value="${twitter.consumerSecret}" />, +        <constructor-arg value="${facebook.appId}" />, +        <constructor-arg value="${facebook.appSecret}" />, +        <constructor-arg value="${tripit.consumerKey}" />, +        <constructor-arg value="${tripit.consumerSecret}" />, +            <constructor-arg value="${security.encryptPassword}" />, +            <constructor-arg value="${security.encryptSalt}" />, +    public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +    <constructor-arg value="${application.url}" />, +			Here the URL is specified as a placeholder variable., +public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname>'s constructor is annotated with <code>@Inject</code>, so it's not necessary to explicitly wire any of its arguments except for the application URL., +			Optimizing the configuration for autowiring, the <classname>TwitterSigninController</classname> bean looks like this: , +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +					<listitem>, +						<para>, +							If the received access token doesn't match any existing connection, <classname>TwitterSigninController</classname> will redirect to a signup URL. , +							The default signup URL is "/signup" (relative to the application root)., +						</para>, +					</listitem>, +		<para>, +			<classname>FacebookSigninController</classname>'s constructor is annotated with <code>@Inject</code>, so it is not necessary to explicitly wire these dependencies., +			The <classname>FacebookSigninController</classname> configuration optimized for autowiring takes a simpler form:, +		</para>, +, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.facebook.web.FacebookSigninController"/>]]>, +		</programlisting>, +<facebook:init appId="@facebookProvider.appId" />]]>, +			The <code><![CDATA[<facebook:init>]]></code> will initialize the Facebook JavaScript library with your application's App ID., +			Here the App ID is specified using the Spring Expression Langauge to be the value of the <code>appId</code> property of the bean whose ID is "facebookProvider"., +, +	, +	<section xml:id="signin_signup">, +		<title>Signing up after a failed sign in</title>, +		, +		<para>, +			With both <classname>TwitterSigninController</classname> and <classname>FacebookSigninController</classname>, the flow will redirect to a signup page if no connection can be found for the obtained access token., +			By default, the signup URL is "/signup", relative to the application root., +			You can override that default by setting the <code>signupUrl</code> property on the controller., +			For example, the following configuration of <classname>TwitterSigninController</classname> sets the signup URL to "/newUser":, +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +    <property name="signupUrl" value="/newUser" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +			Before the signin controller redirects the user to the signup URL, it places an instance of <interfacename>ProviderSignInAttempt</interfacename> in the session. ]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (int i = 1; i < strings.length; i++) {, +				builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (int i = 1; i < strings.length; i++) {, +				builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds();, +	, +	/**, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @param userId the user's ID, +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds(String userId);, +	, +	/**, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (int i = 1; i < strings.length; i++) {, +				builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds();, +	, +	/**, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @param userId the user's ID, +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds(String userId);, +	, +	/**, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +import org.springframework.social.facebook.support.extractors.StringResponseExtractor;, +	, +	, +	private StringResponseExtractor idExtractor;, +	, +		idExtractor = new StringResponseExtractor("id");, +	public List<String> getFriendIds() {, +		return getFriendIds("me");, +	}, +	, +	public List<String> getFriendIds(String userId) {, +		return graphApi.fetchConnections(userId, "friends", idExtractor, "id");, +	}, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (int i = 1; i < strings.length; i++) {, +				builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds();, +	, +	/**, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @param userId the user's ID, +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds(String userId);, +	, +	/**, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +import org.springframework.social.facebook.support.extractors.StringResponseExtractor;, +	, +	, +	private StringResponseExtractor idExtractor;, +	, +		idExtractor = new StringResponseExtractor("id");, +	public List<String> getFriendIds() {, +		return getFriendIds("me");, +	}, +	, +	public List<String> getFriendIds(String userId) {, +		return graphApi.fetchConnections(userId, "friends", idExtractor, "id");, +	}, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/StringResponseExtractor.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.RC1, +role=buildmaster]
[+++ b/.gitignore, +Thumbs.db, +build, +bin, +.classpath, +.project, +.settings, +++ b/.gitignore, +Thumbs.db, +build, +bin, +.classpath, +.project, +.settings, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + 	 * Sets the default URL to redirect the user to after signing in using a provider., +			String originalUrl = signInAdapter.signIn(userId, connection, request);, +			return originalUrl != null ? redirect(originalUrl) : redirect(postSignInUrl);]
[+++ b/build.gradle, +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	public void exchangeForAccess_facebookStyle() {, +		// Facebook returns form-encoded results as text/plain. There is no refresh token., +		MediaType responseContentType = MediaType.TEXT_PLAIN;, +		String responseFile = "accessToken.facebook";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B", accessGrant.getAccessToken());, +		assertNull(accessGrant.getRefreshToken());, +	}, +, +	@Test, +	public void exchangeForAccess_jsonResponse() {, +		// The OAuth 2 spec draft specifies JSON as the response content type. Gowalla and Github return the access token this way., +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +	}, +, +	private AccessGrant getAccessGrant(MediaType responseContentType, String responseFile) {, +		responseHeaders.setContentType(responseContentType);, +		mockServer, +				.expect(requestTo(ACCESS_TOKEN_URL)), +				.andExpect(, +						body("client_id=client_id&client_secret=client_secret&code=code&", +								+ "redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code")), +				.andRespond(, +						ResponseCreators.withResponse(new ClassPathResource(responseFile, getClass()),, +		return accessGrant;, +++ b/build.gradle, +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	public void exchangeForAccess_facebookStyle() {, +		// Facebook returns form-encoded results as text/plain. There is no refresh token., +		MediaType responseContentType = MediaType.TEXT_PLAIN;, +		String responseFile = "accessToken.facebook";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B", accessGrant.getAccessToken());, +		assertNull(accessGrant.getRefreshToken());, +	}, +, +	@Test, +	public void exchangeForAccess_jsonResponse() {, +		// The OAuth 2 spec draft specifies JSON as the response content type. Gowalla and Github return the access token this way., +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +	}, +, +	private AccessGrant getAccessGrant(MediaType responseContentType, String responseFile) {, +		responseHeaders.setContentType(responseContentType);, +		mockServer, +				.expect(requestTo(ACCESS_TOKEN_URL)), +				.andExpect(, +						body("client_id=client_id&client_secret=client_secret&code=code&", +								+ "redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code")), +				.andRespond(, +						ResponseCreators.withResponse(new ClassPathResource(responseFile, getClass()),, +		return accessGrant;, +++ b/spring-social-core/src/test/resources/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/build.gradle, +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	public void exchangeForAccess_facebookStyle() {, +		// Facebook returns form-encoded results as text/plain. There is no refresh token., +		MediaType responseContentType = MediaType.TEXT_PLAIN;, +		String responseFile = "accessToken.facebook";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B", accessGrant.getAccessToken());, +		assertNull(accessGrant.getRefreshToken());, +	}, +, +	@Test, +	public void exchangeForAccess_jsonResponse() {, +		// The OAuth 2 spec draft specifies JSON as the response content type. Gowalla and Github return the access token this way., +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +	}, +, +	private AccessGrant getAccessGrant(MediaType responseContentType, String responseFile) {, +		responseHeaders.setContentType(responseContentType);, +		mockServer, +				.expect(requestTo(ACCESS_TOKEN_URL)), +				.andExpect(, +						body("client_id=client_id&client_secret=client_secret&code=code&", +								+ "redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code")), +				.andRespond(, +						ResponseCreators.withResponse(new ClassPathResource(responseFile, getClass()),, +		return accessGrant;]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +				.andExpect(content().string(expectedClientParams + "code=code&redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code"));, +				.andExpect(content().string(expectedClientParams + "username=habuma&password=letmein01&grant_type=password&scope=read%2Cwrite"));, +				.andExpect(content().string(expectedClientParams + "grant_type=client_credentials&scope=read%2Cwrite"));, +				.andExpect(content().string(expectedClientParams + "refresh_token=r3fr35h_t0k3n&grant_type=refresh_token"));]
[+++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/Schema.sql, +					accountId varchar not null,, +					providerId varchar not null,, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/Schema.sql, +					accountId varchar not null,, +					providerId varchar not null,, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/Schema.sql, +					accountId varchar not null,, +					providerId varchar not null,, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/Schema.sql, +					accountId varchar not null,, +					providerId varchar not null,]
[+++ b/build.gradle, +        gradleVersion = "1.11", +++ b/build.gradle, +        gradleVersion = "1.11", +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +        gradleVersion = "1.11", +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Feb 21 16:56:03 CST 2014, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.11-bin.zip]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.SessionStrategy;, +import org.springframework.social.connect.web.HttpSessionSessionStrategy;, +import org.springframework.web.context.request.ServletWebRequest;, +	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();	, +, +	/**, +	 * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., +	 * The default strategy is to set the data as attributes in the HTTP Session., +	 * @param sessionStrategy the session strategy., +	 */, +	public void setSessionStrategy(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +, +				sessionStrategy.setAttribute(new ServletWebRequest(request), ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(token.getConnection()));]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + *        .apply(new SpringSocialConfigurer());, +	 * Constructs a SpringSocialConfigurer.]
[+++ b/spring-social-core/src/main/resources/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql, +-- This SQL contains a "create table" that can be used to create a table that JdbcUsersConnectionRepository can persist, +-- connection in. It is, however, not to be assumed to be production-ready, all-purpose SQL. It is merely representative, +-- of the kind of table that JdbcUsersConnectionRepository works with. The table and column names, as well as the general, +-- column types, are what is important. Specific column types and sizes that work may vary across database vendors and, +-- the required sizes may vary across API providers. , +, +	accessToken varchar(512) not null,, +	secret varchar(512),, +	refreshToken varchar(512),, +++ b/spring-social-core/src/main/resources/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql, +-- This SQL contains a "create table" that can be used to create a table that JdbcUsersConnectionRepository can persist, +-- connection in. It is, however, not to be assumed to be production-ready, all-purpose SQL. It is merely representative, +-- of the kind of table that JdbcUsersConnectionRepository works with. The table and column names, as well as the general, +-- column types, are what is important. Specific column types and sizes that work may vary across database vendors and, +-- the required sizes may vary across API providers. , +, +	accessToken varchar(512) not null,, +	secret varchar(512),, +	refreshToken varchar(512),, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	protected static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	protected static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +	protected static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-core/src/main/resources/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql, +-- This SQL contains a "create table" that can be used to create a table that JdbcUsersConnectionRepository can persist, +-- connection in. It is, however, not to be assumed to be production-ready, all-purpose SQL. It is merely representative, +-- of the kind of table that JdbcUsersConnectionRepository works with. The table and column names, as well as the general, +-- column types, are what is important. Specific column types and sizes that work may vary across database vendors and, +-- the required sizes may vary across API providers. , +, +	accessToken varchar(512) not null,, +	secret varchar(512),, +	refreshToken varchar(512),, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	protected static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	protected static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +	protected static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +++ b/spring-social-core/src/main/resources/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql, +-- This SQL contains a "create table" that can be used to create a table that JdbcUsersConnectionRepository can persist, +-- connection in. It is, however, not to be assumed to be production-ready, all-purpose SQL. It is merely representative, +-- of the kind of table that JdbcUsersConnectionRepository works with. The table and column names, as well as the general, +-- column types, are what is important. Specific column types and sizes that work may vary across database vendors and, +-- the required sizes may vary across API providers. , +, +	accessToken varchar(512) not null,, +	secret varchar(512),, +	refreshToken varchar(512),, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	protected static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	protected static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +	protected static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java]
[+++ b/build.gradle, +, +, +++ b/build.gradle, +, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +import org.thymeleaf.spring4.context.SpringWebContext;, +		ApplicationContext applicationContext = getSpringApplicationContextFromThymeleafContext(context);, +	private ApplicationContext getSpringApplicationContextFromThymeleafContext(final IContext context) {, +		if (!(context instanceof SpringWebContext)) {, +					SpringWebContext.class.getName() + ". Spring Social integration can only be used in " +, +		final SpringWebContext springContext = (SpringWebContext) context;]
[+++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="http://localhost:8080/facebook-showcase" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="http://localhost:8080/facebook-showcase" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="http://localhost:8080/facebook-showcase" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" autowire="constructor" />]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Strategy interface for registering connection factories., + * Given to configuration in call to {@link SocialConfigurer#addConnectionFactories(ConnectionFactoryConfigurer, org.springframework.core.env.Environment)}., + * There are currently two implementations., + * The default implementation simply registers the given ConnectionFactory with a ConnectionFactoryRegistry., + * If Spring Social's security module is available on the classpath, the implementation given will work with a SocialAuthenticationServiceRegistry and, + * automatically wrap any given ConnectionFactory with a SocialAuthenticationService., + * @author Craig Walls, + */, +public interface ConnectionFactoryConfigurer {, +	, +	/**, +	 * Add a connection factory registry., +	 * If Spring Social's security module is available, the given connection factory will be wrapped as a SocialAuthenticationService., +	 */, +	void addConnectionFactory(ConnectionFactory<?> connectionFactory);, +, +}, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Strategy interface for registering connection factories., + * Given to configuration in call to {@link SocialConfigurer#addConnectionFactories(ConnectionFactoryConfigurer, org.springframework.core.env.Environment)}., + * There are currently two implementations., + * The default implementation simply registers the given ConnectionFactory with a ConnectionFactoryRegistry., + * If Spring Social's security module is available on the classpath, the implementation given will work with a SocialAuthenticationServiceRegistry and, + * automatically wrap any given ConnectionFactory with a SocialAuthenticationService., + * @author Craig Walls, + */, +public interface ConnectionFactoryConfigurer {, +	, +	/**, +	 * Add a connection factory registry., +	 * If Spring Social's security module is available, the given connection factory will be wrapped as a SocialAuthenticationService., +	 */, +	void addConnectionFactory(ConnectionFactory<?> connectionFactory);, +, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +]
[+++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, +	@Override, +	public void signIn(Serializable accountId) {, +		SecurityContextHolder.getContext().setAuthentication(, +				new UsernamePasswordAuthenticationToken(accountId, null, null));, +	}, +, +}, +++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, +	@Override, +	public void signIn(Serializable accountId) {, +		SecurityContextHolder.getContext().setAuthentication(, +				new UsernamePasswordAuthenticationToken(accountId, null, null));, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ProviderSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +	</bean>, +	, +	<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +	</bean>, +	, +++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, +	@Override, +	public void signIn(Serializable accountId) {, +		SecurityContextHolder.getContext().setAuthentication(, +				new UsernamePasswordAuthenticationToken(accountId, null, null));, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ProviderSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +	</bean>, +	, +	<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +	</bean>, +	, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/signin/**" access="permitAll" />, +++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;]
[+++ b/pom.xml, +							<!-- TODO: This isn't right...it's a javadoc:aggregate goal, not a property. , +							See http://maven.apache.org/plugins/maven-javadoc-plugin/examples/aggregate.html, +							<javadoc:aggregate>true</javadoc:aggregate> -->]
[+++ b/readme.txt, +, +If you've already cloned the Spring-Social repository without the --recursive, +switch, you'll need to pull the submodules with the following steps:, +, + git submodule update --init]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	/**, +	 * Creates a memento can be used to persist the state of this connection for restoration later., +	 */, +	public ServiceProviderConnectionMemento createMemento();, +, +	/**, +	 * Creates a copy of this connection with the id property set to the value provided., +	 */, +	public ServiceProviderConnection<S> assignId(Long id);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	/**, +	 * Creates a memento can be used to persist the state of this connection for restoration later., +	 */, +	public ServiceProviderConnectionMemento createMemento();, +, +	/**, +	 * Creates a copy of this connection with the id property set to the value provided., +	 */, +	public ServiceProviderConnection<S> assignId(Long id);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	/**, +	 * Creates a memento can be used to persist the state of this connection for restoration later., +	 */, +	public ServiceProviderConnectionMemento createMemento();, +, +	/**, +	 * Creates a copy of this connection with the id property set to the value provided., +	 */, +	public ServiceProviderConnection<S> assignId(Long id);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionMemento.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.io.Serializable;, +, +public class ServiceProviderConnectionMemento implements Serializable {, +, +	private Long id;, +	, +	private Serializable accountId;, +	, +	private String providerId;, +	, +	private String providerAccountId;, +	, +	private String profileName;, +	, +	private String profileUrl;, +	, +	private String profilePictureUrl;, +	, +	private boolean allowSignIn;, +	, +	private String accessToken;, +	, +	private String secret;, +	, +	private String refreshToken;, +, +	public ServiceProviderConnectionMemento(Long id, Serializable accountId, String providerId,, +			String providerAccountId, String profileName, String profileUrl, String profilePictureUrl,, +			boolean allowSignIn,, +			String accessToken, String secret, String refreshToken) {, +		this.id = id;, +		this.accountId = accountId;, +		this.providerId = providerId;, +		this.providerAccountId = providerAccountId;, +		this.profileName = profileName;, +		this.profileUrl = profileUrl;, +		this.profilePictureUrl = profilePictureUrl;, +		this.allowSignIn = allowSignIn;, +		this.accessToken = accessToken;, +		this.secret = secret;, +		this.refreshToken = refreshToken;, +	}, +, +	public Long getId() {, +		return id;, +	}, +, +	public Serializable getAccountId() {, +		return accountId;, +	}]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * @param connectionAddedRedirectUrl The URL to redirect to after adding connections following authorization, +	 * the user is still authenticated, so redirecting to the default failure URL might, +	 * @param connectionAddingFailureRedirectUrl The URL to redirect to after a failing connection following authorization]
[+++ b/build.gradle, +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +++ b/build.gradle, +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +		applicationContext.getBean(TwitterServiceProvider.class);, +		applicationContext.getBean(FacebookServiceProvider.class);, +++ b/build.gradle, +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +		applicationContext.getBean(TwitterServiceProvider.class);, +		applicationContext.getBean(FacebookServiceProvider.class);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider class="org.springframework.social.facebook.provider.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +, +++ b/build.gradle, +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +		applicationContext.getBean(TwitterServiceProvider.class);, +		applicationContext.getBean(FacebookServiceProvider.class);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider class="org.springframework.social.facebook.provider.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +, +++ /dev/null, +++ b/build.gradle, +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +		applicationContext.getBean(TwitterServiceProvider.class);, +		applicationContext.getBean(FacebookServiceProvider.class);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider class="org.springframework.social.facebook.provider.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +		applicationContext.getBean(TwitterServiceProvider.class);, +		applicationContext.getBean(FacebookServiceProvider.class);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider class="org.springframework.social.facebook.provider.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +		applicationContext.getBean(TwitterServiceProvider.class);, +		applicationContext.getBean(FacebookServiceProvider.class);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider class="org.springframework.social.facebook.provider.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +		applicationContext.getBean(TwitterServiceProvider.class);, +		applicationContext.getBean(FacebookServiceProvider.class);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider class="org.springframework.social.facebook.provider.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +import org.w3c.dom.NamedNodeMap;, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET), element.getAttributes());, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	}, +	/**, +	 * Creates a BeanDefinition for a provider connection factory., +	 * Although most providers will not need to override this method, it does allow for overriding to address any provider-specific needs., +	 * @param appId The application's App ID, +	 * @param appSecret The application's App Secret, +	 * @param allAttributes All attributes available on the configuration element. Useful for provider-specific configuration., +	 * @return a BeanDefinition for the provider's connection factory bean., +	 */, +	protected BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret, NamedNodeMap allAttributes) {, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret, NamedNodeMap allAttributes) {, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret, allAttributes));		, +, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +, +	private final static Log logger = LogFactory.getLog(AbstractProviderConfigBeanDefinitionParser.class);, +, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +import org.w3c.dom.NamedNodeMap;, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET), element.getAttributes());, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	}, +	/**, +	 * Creates a BeanDefinition for a provider connection factory., +	 * Although most providers will not need to override this method, it does allow for overriding to address any provider-specific needs., +	 * @param appId The application's App ID, +	 * @param appSecret The application's App Secret, +	 * @param allAttributes All attributes available on the configuration element. Useful for provider-specific configuration., +	 * @return a BeanDefinition for the provider's connection factory bean., +	 */, +	protected BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret, NamedNodeMap allAttributes) {, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret, NamedNodeMap allAttributes) {, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret, allAttributes));		, +, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +, +	private final static Log logger = LogFactory.getLog(AbstractProviderConfigBeanDefinitionParser.class);, +, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigNamespaceHandler.java, + * Base {@link NamespaceHandler} for Spring Social provider modules to create configuration namespaces. , + * Requires, at minimum, that the provider-specific namespace provider an AbstractProviderConfigBeanDefinition for parsing "config" elements., +    private final Map<String, BeanDefinitionParser> parsers = new HashMap<String, BeanDefinitionParser>();, +]
[+++ /dev/null, +++ /dev/null, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ /dev/null, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" autowire="constructor" />]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +			<para>, +				OAuth 2 is rapidly becoming a preferred authorization protocol, and is used by major service providers such as Facebook, Github, Gowalla, and 37signals., +				In Spring Social, the OAuth2ServiceProvider interface models a service provider based on the OAuth 2 protocol:, +			</para>, +			<para>, +				<methodname>getOAuthOperations()</methodname> returns an API to use to conduct the authorization flow, or "OAuth Dance", with a service provider., +				The result of this flow is an <classname>AccessGrant</classname> that can be used to establish a connection with a local user account by calling <methodname>connect</methodname>., +				The OAuth2Operations interface is shown below:, +			</para>, +				Callers are first expected to call buildAuthorizeUrl(String, String) to construct the URL to redirect the user to for connection authorization., +				Upon user authorization, the authorizationGrant returned by the provider should be exchanged for an AccessGrant., +				The AccessGrant should then used to create a connection., +				This flow is illustrated below:, +				As you can see, there is a back-and-forth conversation that takes place between the application and the service provider to grant the application access to the provider account., +				<listitem>, +					<para>, +						The flow starts by the application redirecting the user to the provider's authorization URL., +						Here the provider displays a web page asking the user if he or she wishes to grant the application access to read and update their data., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The user agrees to grant the application access., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider redirects the user back to the application (via the redirect URI), passing an authorization code as a parameter., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The application exchanges the authorization code for an access token., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider issues an access grant to the application., +						The grant includes an access token and a refresh token., +						One receipt of these tokens, the "OAuth dance" is complete., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The application uses the AccessGrant to save a connection between the local user account and the external provider account., +						With the connection established, the application can get a reference to the Service API to invoke the provider on behalf of the user., +					</para>, +				</listitem>]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +				<listitem><para>Connection#fetchUserProfile() would make a remote API call to Twitter to get @kdonald's profile data and normalize it into a UserProfile model.</para></listitem>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiTokens.java, +/*, + * Copyright 2011 the original author or authors.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +public class JdbcConnectionRepository implements ConnectionRepository {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +public class JdbcConnectionRepository implements ConnectionRepository {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +public class InMemoryConnectionRepository implements ConnectionRepository {]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, +		@SuppressWarnings("rawtypes"), +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, +		@SuppressWarnings("rawtypes"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	@Deprecated, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, +		@SuppressWarnings("rawtypes"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +				@Deprecated, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, +		@SuppressWarnings("rawtypes"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +				@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, +				@Deprecated, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, +		@SuppressWarnings("rawtypes"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +				@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, +				@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +	@Deprecated, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, +		@SuppressWarnings("rawtypes"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +				@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, +				@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +	@Deprecated, +++ b/spring-social-core/src/test/java/org/springframework/social/support/ClientHttpRequestFactorySelectorTest.java, +//		HttpComponentsClientHttpRequestFactory requestFactory = (HttpComponentsClientHttpRequestFactory) ClientHttpRequestFactorySelector.getRequestFactory();, +//		HttpHost proxy = (HttpHost) requestFactory.getHttpClient().getParams().getParameter(ConnRoutePNames.DEFAULT_PROXY);, +//		assertNull(proxy);, +//		System.getProperties().setProperty("http.proxyHost", "someproxyhost");, +//		System.getProperties().setProperty("http.proxyPort", "8080");		, +//		HttpComponentsClientHttpRequestFactory requestFactory = (HttpComponentsClientHttpRequestFactory) ClientHttpRequestFactorySelector.getRequestFactory();, +//		HttpHost proxy = (HttpHost) requestFactory.getHttpClient().getParams().getParameter(ConnRoutePNames.DEFAULT_PROXY);, +//		assertNotNull(proxy);, +//		assertEquals("someproxyhost", proxy.getHostName());, +//		assertEquals(8080, proxy.getPort());, +//		System.getProperties().setProperty("http.proxyHost", "someproxyhost");, +//		HttpComponentsClientHttpRequestFactory requestFactory = (HttpComponentsClientHttpRequestFactory) ClientHttpRequestFactorySelector.getRequestFactory();, +//		HttpHost proxy = (HttpHost) requestFactory.getHttpClient().getParams().getParameter(ConnRoutePNames.DEFAULT_PROXY);, +//		assertNotNull(proxy);, +//		assertEquals("someproxyhost", proxy.getHostName());, +//		assertEquals(80, proxy.getPort());, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, +		@SuppressWarnings("rawtypes")]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +		<title>Core API</title>, +			The <interfacename>ServiceProviderConnection&lt;S&gt;</interfacename> interface models a connection to an external service provider such as Facebook:, +    ServiceProviderConnectionKey getKey();, +    , +    String getDisplayName();, +, +    String getProfileUrl();, +, +    String getImageUrl();, +, +    void sync();, +, +    boolean test();, +, +    boolean hasExpired();, +, +    void refresh();, +, +    ServiceProviderUserProfile fetchUserProfile();, +, +    void updateStatus(String message);, +, +    ServiceProviderConnectionData createData();, +			Each ServiceProviderConnection is uniquely identified by a composite key consisting of a providerId (e.g. 'facebook') and connected providerUserId (e.g. '1255689239', for Keith Donald's Facebook ID)., +			This key tells you what provider user the connection is connected to., +			A connection has a number of meta-properties that can be used to render it on a screen, including a displayName, profileUrl, and imageUrl., +			As an example, the following HTML template snippet could be used to generate a link to the connected user's profile on the provider's site:, +			<programlisting language="xml"><![CDATA[, +<img src="${connection.imageUrl}" /> <a href="${connection.profileUrl}">${connection.displayName}</a>å]]>			, +			</programlisting>, +			The value of these properties may depend on the state of the provider user's profile., +			In this case, sync() can be used to synchronize these values if the user's profile is updated., +			A connection can be tested to determine if its authorization credentials are valid., +			If invalid, the connection may have expired or been revoked by the provider., +			If the connection has expired, a connection may be refreshed to renew its authorization credentials., +		</para>, +		<para>, +			A connection provides several operations that allow the client application to invoke the ServiceProvider's API in a uniform way., +			This includes the ability to fetch a model of the user's profile and update the user's status in the provider's system., +		</para>, +		<para>, +			A connection's parameterized type &lt;S&gt; represents the Java binding to the ServiceProvider's native API., +			An instance of this API binding can be obtained by calling <code>getServiceApi()</code>., +			As an example, a Facebook connection instance would be parameterized as ServiceProviderConnection&lt;FacebookApi&gt;., +			<code>getServiceApi()</code> would return a FacebookApi instance that provides a Java binding to Facebook's graph API for a specific Facebook user., +		</para>, +		<para>, +			Finally, the internal state of a connection can be captured for transfer between layers of your application by calling <code>createData()</code>., +			This could be used to persist the connection in a database, or serialize it over the network., +		</para>, +		<para>, +			To put this model into action, suppose we have a reference to a ServiceProviderConnection&lt;TwitterApi&gt; instance., +			Suppose the connected user is the Twitter user with screen name 'kdonald'., +				<listitem><para>ServiceProviderConnection#getKey() would return ('twitter', '14718006') where '14718006' is @kdonald's Twitter-assigned user id that never changes.</para></listitem>, +				<listitem><para>ServiceProviderConnection#getDisplayName() would return '@kdonald'.</para></listitem>, +				<listitem><para>ServiceProviderConnection#getProfileUrl() would return 'http://twitter.com/kdonald'.</para></listitem>, +				<listitem><para>ServiceProviderConnection#getImageUrl() would return 'http://a0.twimg.com/profile_images/105951287/IMG_5863_2_normal.jpg'.</para></listitem>, +				<listitem><para>ServiceProviderConnection#sync() would synchronize the state of the connection with @kdonald's profile.</para></listitem>				, +				<listitem>, +					<para>, +						ServiceProviderConnection#test() would return true indicating the authorization credentials associated with the Twitter connection are valid., +						This assumes Twitter has not revoked the AcmeApp client application, and @kdonald has not reset his authorization credentials (Twitter connections do not expire)., +					</para>, +				</listitem>, +				<listitem><para>ServiceProviderConnection#hasExpired() would return false.</para></listitem>, +				<listitem><para>ServiceProviderConnection#refresh() would not do anything since connections to Twitter do not expire.</para></listitem>, +				<listitem><para>ServiceProviderConnection#fetchUserProfile() would make a remote API call to Twitter to get @kdonald's profile data and normalize it into a ServiceProviderUser model.</para></listitem>, +				<listitem><para>ServiceProviderConnection#updateStatus(String) would post a status update to @kdonald's timeline.</para></listitem>, +				<listitem><para>ServiceProviderConnection#getServiceApi() would return a TwitterApi giving the client application access to the full capabilities of Twitter's native API.</para></listitem>, +				<listitem><para>ServiceProviderConnection#createData() would return a ServiceProviderConnectionData that could be serialized and used to restore the connection at a later time.</para></listitem>, +			So far we have discussed how existing connections are modeled, but we have not yet discussed how new connections are established., +			The manner in which connections between local users and provider users are established varies based on the authorization protocol used by the ServiceProvider., +			Each authorization protocol is treated as an implementation detail where protocol-specifics are kept out of the core ServiceProviderConnection API., +			A ServiceProviderConnectionFactory abstraction encapsulates the construction of connections that use a specific authorization protocol., +			In the following sections, we will discuss the major ServiceProviderConnectionFactory classes provided by the framework., +				OAuth 2 is rapidly becoming a preferred authorization protocol, and is used by major service providers such as Facebook, Github, Foursquare, Gowalla, and 37signals., +				In Spring Social, a OAuth2ServiceProviderConnectionFactory is used to establish connections with a OAuth2-based service provider:, +public class OAuth2ServiceProviderConnectionFactory<S> extends ServiceProviderConnectionFactory<S> {, +    public OAuth2Operations getOAuthOperations();, +    public ServiceProviderConnection<S> createConnection(AccessGrant accessGrant);, +			</para>, +				The result of this flow is an <classname>AccessGrant</classname> that can be used to establish a connection with a local user account by calling <methodname>createConnection</methodname>., +    String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +    AccessGrant exchangeForAccess(String authorizationCode, String redirectUri, MultiValueMap<String, String> additionalParameters);, +				Callers are first expected to call buildAuthorizeUrl(GrantType, AuthorizationParameters) to construct the URL to redirect the user to for connection authorization., +				Upon user authorization, the authorizationCode returned by the provider should be exchanged for an AccessGrant., +			<para>, +			 	The example code below shows use of a FacebookServiceProviderConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above., +				Here, FacebookServiceProviderConnectionFactory is a subclass of OAuth2ServiceProviderConnectionFactory:, +				<programlisting language="java"><![CDATA[, +FacebookServiceProviderConnectionFactory connectionFactory = new FacebookServiceProviderConnectionFactory();, +String authorizeUrl = connectionFactory.getOAuth2Operations().buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE,, +                          new AuthorizationParameters("http://acmeapp.com/callbackUrl"));, +response.sendRedirect(authorizeUrl);, +// when the provider callback is received with the authorizationCode parameter:, +AccessGrant accessGrant = connectionFactory.getOAuth2Operations().exchangeForAccess(authorizationCode);, +ServiceProviderConnection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);]]>, +				</programlisting>, +			</para>]
[+++ b/.gitignore, +target]
[+++ b/spring-social-twitter/src/test/java/org/springframework/social/twitter/TimelineTemplateTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.twitter;, +, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.http.HttpStatus.*;, +import static org.springframework.social.test.client.RequestMatchers.*;, +import static org.springframework.social.test.client.ResponseCreators.*;, +, +import java.util.List;, +, +import org.junit.Test;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpStatus;, +import org.springframework.social.OperationNotPermittedException;, +import org.springframework.social.twitter.types.StatusDetails;, +import org.springframework.social.twitter.types.Tweet;, +import org.springframework.social.twitter.types.TwitterProfile;, +, +, +/**, + * @author Craig Walls, + */, +public class TimelineTemplateTest extends AbstractTwitterApiTest {, +, +	@Test, +	public void updateStatus() {, +		mockServer.expect(requestTo("https://api.twitter.com/1/statuses/update.json")), +				.andExpect(method(POST)), +				.andExpect(body("status=Test+Message")), +				.andRespond(withResponse("{}", responseHeaders));, +, +		twitter.timelineOperations().updateStatus("Test Message");, +, +		mockServer.verify();, +	}, +, +	@Test, +	public void updateStatus_withLocation() {, +		mockServer.expect(requestTo("https://api.twitter.com/1/statuses/update.json")), +				.andExpect(method(POST)), +				.andExpect(body("status=Test+Message&long=-111.2&lat=123.1")), +				.andRespond(withResponse("{}", responseHeaders));, +, +		StatusDetails details = new StatusDetails();, +		details.setLocation(123.1f, -111.2f);, +		twitter.timelineOperations().updateStatus("Test Message", details);, +, +		mockServer.verify();, +	}, +, +	@Test(expected = DuplicateTweetException.class), +	public void updateStatus_duplicateTweet() {, +		mockServer.expect(requestTo("https://api.twitter.com/1/statuses/update.json")), +				.andExpect(method(POST)), +				.andExpect(body("status=Test+Message")), +				.andRespond(withResponse("{\"error\":\"You already said that\"}", responseHeaders, FORBIDDEN, ""));, +, +		twitter.timelineOperations().updateStatus("Test Message");, +	}, +	, +	@Test(expected=StatusLengthException.class), +	public void updateStatus_tweetTooLong() {, +		mockServer.expect(requestTo("https://api.twitter.com/1/statuses/update.json")), +			.andExpect(method(POST)), +			.andExpect(body("status=Really+long+message")), +			.andRespond(withResponse("{\"error\":\"Status is over 140 characters.\"}", responseHeaders, HttpStatus.FORBIDDEN, ""));, +		twitter.timelineOperations().updateStatus("Really long message");, +	}, +	, +	@Test(expected = OperationNotPermittedException.class), +	public void updateStatus_forbidden() {, +		mockServer.expect(requestTo("https://api.twitter.com/1/statuses/update.json")), +				.andExpect(method(POST)), +				.andExpect(body("status=Test+Message")), +				.andRespond(withResponse("{\"error\":\"Forbidden\"}", responseHeaders, FORBIDDEN, ""));, +, +		twitter.timelineOperations().updateStatus("Test Message");, +	}, +, +	@Test, +	public void deleteStatus() {, +		mockServer.expect(requestTo("https://api.twitter.com/1/statuses/destroy/12345.json")), +			.andExpect(method(DELETE)), +			.andRespond(withResponse("{}", responseHeaders));		]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, +	String postLink(String message, FacebookLink link);, +	String postLink(String ownerId, String message, FacebookLink link);, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, +	String postLink(String message, FacebookLink link);, +	String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, +	 * To post a link to the page's feed as the authenticated user, use {@link FeedOperations#postLink(String, String, FacebookLink)} instead., +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, +	String postLink(String message, FacebookLink link);, +	String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, +	 * To post a link to the page's feed as the authenticated user, use {@link FeedOperations#postLink(String, String, FacebookLink)} instead., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/FeedTemplate.java, +	public String postLink(String message, FacebookLink link) {, +		return postLink("me", message, link);, +	public String postLink(String ownerId, String message, FacebookLink link) {, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, +	String postLink(String message, FacebookLink link);, +	String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, +	 * To post a link to the page's feed as the authenticated user, use {@link FeedOperations#postLink(String, String, FacebookLink)} instead., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/FeedTemplate.java, +	public String postLink(String message, FacebookLink link) {, +		return postLink("me", message, link);, +	public String postLink(String ownerId, String message, FacebookLink link) {, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/FeedTemplateTest.java, +		assertEquals("123456_78901234", facebook.feedOperations().postLink("Hello Facebook World", link));, +		assertEquals("123456_78901234", facebook.feedOperations().postLink("123456789", "Hello Facebook World", link));, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, +	String postLink(String message, FacebookLink link);, +	String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, +	 * To post a link to the page's feed as the authenticated user, use {@link FeedOperations#postLink(String, String, FacebookLink)} instead., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/FeedTemplate.java, +	public String postLink(String message, FacebookLink link) {, +		return postLink("me", message, link);, +	public String postLink(String ownerId, String message, FacebookLink link) {, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/FeedTemplateTest.java, +		assertEquals("123456_78901234", facebook.feedOperations().postLink("Hello Facebook World", link));, +		assertEquals("123456_78901234", facebook.feedOperations().postLink("123456789", "Hello Facebook World", link));, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, +	String postLink(String message, FacebookLink link);, +	String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, +	 * To post a link to the page's feed as the authenticated user, use {@link FeedOperations#postLink(String, String, FacebookLink)} instead., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/FeedTemplate.java, +	public String postLink(String message, FacebookLink link) {, +		return postLink("me", message, link);, +	public String postLink(String ownerId, String message, FacebookLink link) {, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/FeedTemplateTest.java, +		assertEquals("123456_78901234", facebook.feedOperations().postLink("Hello Facebook World", link));, +		assertEquals("123456_78901234", facebook.feedOperations().postLink("123456789", "Hello Facebook World", link));, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, +	String postLink(String message, FacebookLink link);, +	String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, +	 * To post a link to the page's feed as the authenticated user, use {@link FeedOperations#postLink(String, String, FacebookLink)} instead., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/FeedTemplate.java, +	public String postLink(String message, FacebookLink link) {, +		return postLink("me", message, link);, +	public String postLink(String ownerId, String message, FacebookLink link) {, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/FeedTemplateTest.java, +		assertEquals("123456_78901234", facebook.feedOperations().postLink("Hello Facebook World", link));, +		assertEquals("123456_78901234", facebook.feedOperations().postLink("123456789", "Hello Facebook World", link));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, +	String postLink(String message, FacebookLink link);, +	String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, +	 * To post a link to the page's feed as the authenticated user, use {@link FeedOperations#postLink(String, String, FacebookLink)} instead., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/FeedTemplate.java, +	public String postLink(String message, FacebookLink link) {, +		return postLink("me", message, link);, +	public String postLink(String ownerId, String message, FacebookLink link) {, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/FeedTemplateTest.java]
[+++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +        dependencyManagement {, +            springIoTestRuntime {, +                imports {, +                    mavenBom "io.spring.platform:platform-bom:${platformVersion}", +                }, +            }, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +        dependencyManagement {, +            springIoTestRuntime {, +                imports {, +                    mavenBom "io.spring.platform:platform-bom:${platformVersion}", +                }, +            }, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +			addCustomParameters(params);, +	protected void addCustomParameters(OAuth2Parameters params) {, +	}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +		String key = oauthEncode(consumerSecret) + "&" + (tokenSecret != null ? oauthEncode(tokenSecret) : "");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +		String key = oauthEncode(consumerSecret) + "&" + (tokenSecret != null ? oauthEncode(tokenSecret) : "");, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/SigningSupportTest.java, +	@Test, +	public void buildAuthorizationHeaderValue_oauthEncodedSecrets() throws Exception {, +		SigningSupport signingUtils = new SigningSupport();, +		signingUtils.setTimestampGenerator(new MockTimestampGenerator(123456789, 987654321));, +		URI uri = URIBuilder.fromUri("http://example.com/request").queryParam("b5", "=%3D").queryParam("a3", "a").queryParam("c@", ""), +			.queryParam("a2", "r b").build();, +		HttpRequest request = new SimpleClientHttpRequestFactory().createRequest(uri, HttpMethod.POST);, +		request.getHeaders().setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		String authorizationHeader = signingUtils.buildAuthorizationHeaderValue(request, "c2&a3=2+q".getBytes(), new OAuth1Credentials("9djdj82h48djs9d2", "con+sumer=secret", "kkk9d7dh3k39sjv7", "token+secret="));, +		assertAuthorizationHeader(authorizationHeader, "7VuTmiewi5yudNuXhlZvT1UI53w%3D");, +	}, +]
[+++ b/docs/src/reference/docbook/signin.xml, +			Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., +	</section>, +, +	<section xml:id="signin_using">, +		<title>Enabling provider signin</title>, +			The <classname>ProviderSignInController</classname> bean only requires a single <code><![CDATA[<constructor-arg>]]></code> to specify the application's base URL., +			<classname>ProviderSignInController</classname> will use this URL to construct the callback URL used in the authentication flow., +			When authenticating via an OAuth 1 provider, <classname>ProviderSignInController</classname> supports the following flow:, +		<section>, +			<title>ProviderSignInController's dependencies</title>, +		, +				As shown above, <classname>ProviderSignInController</classname> can be configured as a Spring bean given only a single constructor argument., +				Nevertheless, <classname>ProviderSignInController</classname> depends on a handful of other beans to do its job., +			</para>, +			, +			<itemizedlist>, +				<listitem><para>A <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> to lookup a connection factory used to perform the authentication process with the provider.</para></listitem>, +				<listitem><para>A <interfacename>MultiUserServiceProviderConnectionRepository</interfacename> to find a user whose connection matches the signin connection.</para></listitem>, +				<listitem><para>A <interfacename>ServiceProviderConnectionRepository</interfacename> used to create a new connection when the user signs up in the application after a failed provider signin.</para></listitem>, +				<listitem><para>A <interfacename>SignInService</interfacename> to sign the user into the application if a matching connection is found.</para></listitem>, +			</itemizedlist>, +			, +			, +			<para>, +				Because <classname>ProviderSignInController</classname>'s constructor is annotated with <code>@Inject</code>, those dependencies will be given to <classname>ProviderSignInController</classname> via autowiring., +				You'll still need to make sure they're available as beans in the Spring application context so that they can be autowired., +			</para>, +			, +			<para>, +				You should have already configured most of these dependencies when setting up connection support (in the previous chapter)., +				The <interfacename>SignInService</interfacename> is exclusively used for provider signin and so a <interfacename>SignInService</interfacename> bean will need to be added to the configuration., +				But first, you'll need to write an implementation of the <interfacename>SignInService</interfacename> interface., +			</para>, +, +			<para>, +				The <interfacename>SignInService</interfacename> interface is defined as follows:, +				The <methodname>signIn()</methodname> method takes a single argument which is the local application user's user ID normalized as a <classname>String</classname>., +				No other credentials are necessary here because by the time this method is called the user will have signed into the provider and their connection with that provider has been used to prove the user's identity., +				Implementations of this interface should use this user ID to authenticate the user to the application. , +			</para>, +, +			<para>, +				For example, suppose that an application's security is based Spring Security and simply uses a user's account ID as their principal. , +public class SpringSecuritySignInService implements SignInService {, +				Once you've written a <interfacename>SignInService</interfacename> implementation, it must be configured as a bean in the Spring context:, +			</para>, +, +			<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.showcase.signin.SpringSecuritySignInService" />, +]]>, +			</programlisting>, +		</section>, +		, +		<section>, +			<title>Adding a provider signin button</title>, +			<para>, +				With <classname>ProviderSignInController</classname> and a <interfacename>SignInService</interfacename> configured, the backend support for provider signin is in place., +	   		</para>, +	   		, +	   		<para>, +	      		For example, the following HTML snippet adds a "Signin with Twitter" button to a page:, +    <button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" />, +    </button>, +				Notice that the path used in the form's <code>action</code> attribute maps to the first step in <classname>ProviderSignInController</classname>'s flow., +				In this case, the provider is identified as "twitter"., +			</para>, +			, +			<para>, +	</section>, +		<para>, +			If <classname>ProviderSignInController</classname> can't find a connection that matches the one obtained after signing into the provider, it will put the signin on hold and redirect the user to an application signup page., +			By default, the signup URL is "/signup", relative to the application root. , +			You can override that default by setting the <code>signupUrl</code> property on the controller. , +			For example, the following configuration of <classname>ProviderSignInController</classname> sets the signup URL to "/newUser": , +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +    <property name="signupUrl" value="/newUser" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +			Before redirecting to the signup page, <classname>ProviderSignInController</classname> collects some information about the authentication attempt., +			This information can be used to prepopulate the signup form and then, after successful registration, to establish a connection between the new account and the provider account.			, +		</para>, +		, +		<para>, +			To prepopulate the signup form, you can fetch the user profile data from a connection retrieved from <methodname>ProviderSignInUtils.getConnection()</methodname>., +			For example, consider this Spring MVC controller method that setups up the signup form with a <classname>SignupForm</classname> to bind to the signup form:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +@RequestMapping(value="/signup", method=RequestMethod.GET), +public SignupForm signupForm(WebRequest request) {, +    ServiceProviderConnection<?> connection = ProviderSignInUtils.getConnection(request);, +    if (connection != null) {, +        return SignupForm.fromProviderUser(connection.fetchUserProfile());]
[+++ b/docs/src/reference/docbook/connecting.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="connecting", +    xmlns:xlink="http://www.w3.org/1999/xlink">, +  <title>Connecting to Social Providers</title>, +, +  <para>Most social connections are based on OAuth authorization. Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +  , +  <para>Spring Social comes with <classname>ConnectController</classname>, a Spring MVC controller that handles the application's part in the OAuth dance.</para>, +, +  <section id="connect-controller">, +    <title><classname>ConnectController</classname></title>, +, +, +    <programlisting><![CDATA[, +<bean class="org.springframework.social.connect.web.ConnectController">, +	<constructor-arg ref="serviceProviderFactory" />, +	<constructor-arg value="http://localhost:8080/myapplication" />, +	<constructor-arg ref="accountIdResolver" />, +</bean>, +]]></programlisting>, +, +    <para><classname>ConnectController</classname> can handle the application's side of the OAuth dance for either OAuth 1 or OAuth 2 providers. For OAuth 1 providers, <classname>ConnectController</classname> supports the following flow:</para>, +    , +    <itemizedlist>, +        <listitem><para><code>GET /connect/{provider name}</code> - Displays a web page showing connection status to the provider.</para></listitem>, +        <listitem><para><code>POST /connect/{provider name}</code> - Initiates the connection flow with the provider.</para></listitem>, +        <listitem><para><code>GET /connect/{provider name}?oauth_token={request token}</code> - Receives the authorization callback from the provider, accepting a request token. Uses the request token to request an access token and complete the connection.</para></listitem>, +        <listitem><para><code>DELETE /connect/{provider name}</code> - Severs a connection with the provider.</para></listitem>, +    </itemizedlist>, +, +    <para>For an OAuth 2 provider, the flow is almost identical, with a subtle difference in how the authorization callback is handled:</para>, +    , +    <itemizedlist>, +        <listitem><para><code>GET /connect/{provider name}?code={code}</code> - Receives the authorization callback from the provider, accepting an authorization code. Uses the code to request an access token and complete the connection.</para></listitem>, +    </itemizedlist>, +, +    <section id="connect-controller-flow-1">, +      <title>Displaying a connection page</title>, +, +      <para>Before the connection flow starts in earnest, a web application may choose to show a page that offers the user information on their connection status and offer them the opportunity to create a connection between their account and their social profile. <classname>ConnectController</classname> can display such a page if the browser navigates to <code>/connect/{provider name}</code>.</para>, +      , +      <para>For example, to display a connection status page for Twitter, where the provider name is "twitter", there may be a link something like this:</para>, +    , +        <programlisting><![CDATA[, +<a href="<c:url value="/connect/twitter" />">Connect to Twitter</a>, +]]></programlisting>, +, +        <para><classname>ConnectController</classname> will respond to this request by first checking to see if a connection already exists between the user's account and the Twitter. If not, then it will with a view that should offer the user an opportunity to create the connection. Otherwise, it will respond with a view to inform the user that a connection already exists.</para>, +    , +        <para>The view names that <classname>ConnectController</classname> responds with are based on the provider's name. In this case, since the provider name is "twitter", the view names are "connect/twitterConnect" and "connect/twitterConnected".</para>, +        , +    </section>, +    , +    <section id="connect-controller-flow-2">, +      <title>Initiating the connection flow</title>, +      , +      <para>To kick off the connection flow, the application should <code>POST</code> to <code>/connect/{provider name}</code>. Continuing with the Twitter example, the JSP resolved from "connect/twitterConnect" might include the following form:</para>, +      , +      <programlisting><![CDATA[, +<form action="<c:url value="/connect/twitter" />" method="POST">, +    <p>You haven't created any connections with Twitter yet. Click the button to create, +       a connection between your account and your Twitter profile. , +       (You'll be redirected to Twitter where you'll be asked to authorize the connection.)</p>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +</form>, +      ]]></programlisting>, +      , +      <para>When <classname>ConnectController</classname> handles the request, it will redirect the browser to the provider's authorization page. In the case of an OAuth 1 provider, it will first fetch a request token from the provider and pass it along as a parameter to the authorization page. Request tokens aren't used in OAuth 2, however, so instead it passes the application's client ID and redirect URI as parameters to the authorization page.</para>, +      , +      <para>For example, Twitter's authorization URL has the following pattern:</para>, +      , +      <programlisting><![CDATA[https://twitter.com/oauth/authorize?oauth_token={token}]]></programlisting>, +      , +      <para>If the application's request token were "vPyVSeIPzEoVVdU69OyRm85MN5eRmRCl2xYuc4ujLT", then the browser would be redirected to https://twitter.com/oauth/authorize?oauth_token=vPyVSeIPzEoVVdU69OyRm85MN5eRmRCl2xYuc4ujLT and a page similar to the following would be displayed to the user (from Twitter):</para>, +      , +      <mediaobject>, +        <imageobject role="fo">, +            <imagedata fileref="images/twitter-authorize.png", +              format="PNG" align="center" scale="40"/>, +        </imageobject>, +        <imageobject role="html">, +            <imagedata fileref="images/twitter-authorize.png" format="PNG" align="center" scale="40"/>, +        </imageobject>, +      </mediaobject>, +      , +      <para>(If the user has not yet signed into Twitter, the authorization page will also included a username and password field.)</para>, +      , +      <para>In contrast, Facebook is an OAuth 2 provider, so its authorization URL takes a slightly different pattern:</para>, +      , +      <programlisting><![CDATA[https://graph.facebook.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}, +   &scope=publish_stream,offline_access]]></programlisting>, +      , +      <para>Thus, if the application's Facebook client ID is "0b754d95f9c9899b0d6c4456B4f2EdD7" and it's redirect URI is "http://www.mycoolapp.com/connect/facebook", then the browser would be redirected to <![CDATA[https://graph.facebook.com/oauth/authorize?client_id=0b754d95f9c9899b0d6c4456B4f2EdD7&redirect_uri=http://www.mycoolapp.com/connect/facebook&scope=publish_stream,offline_access]]> and Facebook would display the following authorization page to the user:</para>, +      , +      <mediaobject>, +        <imageobject role="fo">, +            <imagedata fileref="images/facebook-authorize.png", +              format="PNG" align="center" scale="40"/>, +        </imageobject>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link Connection} model and a specific provider API model., + * @author Keith Donald, + * @param <A> the service provider's API interface, + */, +public interface ApiAdapter<A> {, +	, +	/**, +	 * Implements {@link Connection#test()} for connections to the given API., +	 * @param api the API binding, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(A api);, +	, +	/**, +	 * Sets values for {@link ConnectionKey#getProviderUserId()}, {@link Connection#getDisplayName()},, +	 * {@link Connection#getProfileUrl()}, and {@link Connection#getImageUrl()} for connections to the given API., +	 * @param api the API binding, +	 * @param values the connection values to set, +	 */, +	void setConnectionValues(A api, ConnectionValues values);, +	, +	/**, +	 * Implements {@link Connection#fetchUserProfile()} for connections to the given API., +	 * Should never return null., +	 * If the provider's API does not expose user profile data, this method should return {@link UserProfile#EMPTY}. , +	 * @param api the API binding, +	 * @return the service provider user profile, +	 * @see UserProfileBuilder, +	 */, +	UserProfile fetchUserProfile(A api);, +	, +	/**, +	 * Implements {@link Connection#updateStatus(String)} for connections to the given API., +	 * If the provider does not have a status concept calling this method should have no effect., +	 * @param api the API binding, +	 * @param message the status message, +	 */, +	void updateStatus(A api, String message);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link Connection} model and a specific provider API model., + * @author Keith Donald, + * @param <A> the service provider's API interface, + */, +public interface ApiAdapter<A> {, +	, +	/**, +	 * Implements {@link Connection#test()} for connections to the given API., +	 * @param api the API binding, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(A api);, +	, +	/**, +	 * Sets values for {@link ConnectionKey#getProviderUserId()}, {@link Connection#getDisplayName()},, +	 * {@link Connection#getProfileUrl()}, and {@link Connection#getImageUrl()} for connections to the given API., +	 * @param api the API binding, +	 * @param values the connection values to set, +	 */, +	void setConnectionValues(A api, ConnectionValues values);, +	, +	/**]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +	// sublassing hooks, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		return new RedirectView(providerId, true);]
[+++ b/build.gradle, +    junitVersion = '4.10', +        testCompile "com.google.guava:guava:10.0", +++ b/build.gradle, +    junitVersion = '4.10', +        testCompile "com.google.guava:guava:10.0", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +		convertSessionAttributeToModelAttribute(DUPLICATE_CONNECTION_ATTRIBUTE, request, model);, +		convertSessionAttributeToModelAttribute(PROVIDER_ERROR_ATTRIBUTE, request, model);, +	}, +, +	private void convertSessionAttributeToModelAttribute(String attributeName, WebRequest request, Model model) {, +		if (request.getAttribute(attributeName, RequestAttributes.SCOPE_SESSION) != null) {, +			model.addAttribute(attributeName, Boolean.TRUE);, +			request.removeAttribute(attributeName, RequestAttributes.SCOPE_SESSION);			, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/build.gradle, +    junitVersion = '4.10', +        testCompile "com.google.guava:guava:10.0", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +		convertSessionAttributeToModelAttribute(DUPLICATE_CONNECTION_ATTRIBUTE, request, model);, +		convertSessionAttributeToModelAttribute(PROVIDER_ERROR_ATTRIBUTE, request, model);, +	}, +, +	private void convertSessionAttributeToModelAttribute(String attributeName, WebRequest request, Model model) {, +		if (request.getAttribute(attributeName, RequestAttributes.SCOPE_SESSION) != null) {, +			model.addAttribute(attributeName, Boolean.TRUE);, +			request.removeAttribute(attributeName, RequestAttributes.SCOPE_SESSION);			, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.hamcrest.Matchers.*;, +import org.springframework.http.HttpStatus;, +import org.springframework.social.connect.DuplicateConnectionException;, +import org.springframework.web.client.HttpClientErrorException;, +			.andExpect(model().attributeExists("connections")), +			.andExpect(request().attribute("social.addConnection.duplicate", nullValue())), +			.andExpect(request().attribute("social.provider.error", nullValue()));, +			.andExpect(view().name("connect/oauth2ProviderConnect")), +			.andExpect(request().attribute("social.addConnection.duplicate", nullValue())), +			.andExpect(request().attribute("social.provider.error", nullValue()));, +	}, +, +	@Test, +	public void connectionStatus_withErrorsInFlashScope() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);				, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		, +		// Should convert errors in "flash" scope to model attributes and remove them from "flash", +		mockMvc.perform(get("/connect/oauth2Provider").sessionAttr("social.addConnection.duplicate", new DuplicateConnectionException(null))), +			.andExpect(view().name("connect/oauth2ProviderConnect")), +			.andExpect(request().sessionAttribute("social.addConnection.duplicate", nullValue())), +			.andExpect(request().attribute("social.addConnection.duplicate", true));, +, +		mockMvc.perform(get("/connect/oauth2Provider").sessionAttr("social.provider.error", new HttpClientErrorException(HttpStatus.INTERNAL_SERVER_ERROR))), +			.andExpect(view().name("connect/oauth2ProviderConnect")), +			.andExpect(request().sessionAttribute("social.provider.error", nullValue())), +			.andExpect(request().attribute("social.provider.error", true));, +			, +			.andExpect(redirectedUrl("/connect/oauth1Provider")), +			.andExpect(request().sessionAttribute("social.provider.error", notNullValue()));, +			.andExpect(redirectedUrl("/connect/oauth1Provider")), +			.andExpect(request().sessionAttribute("social.provider.error", notNullValue()));, +			.andExpect(redirectedUrl("/connect/oauth2Provider")), +			.andExpect(request().sessionAttribute("social.provider.error", notNullValue()));]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType,allAttributes);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType,Map<String, Object> allAttributes) {, +		BeanDefinition helperBD = getApiHelperBeanDefinitionBuilder(allAttributes).getBeanDefinition();, +	/**, +	 * Subclassing hook to allow api helper bean to be configured with attributes from annotation, +	 */, +	protected BeanDefinitionBuilder getApiHelperBeanDefinitionBuilder(Map<String, Object> allAttributes), +	{, +		return BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource");, +	}, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * <p>, + * Indicates an HTTP 403 (Forbidden) response from making a call to a social, + * network's API., + * </p>, + * , + * <p>, + * In the case of Twitter, this often means that you are attempting to post a]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			String redirectUrl = signInAdapter.signIn(userId, connection, request);, +			if(redirectUrl != null) {, +				return redirect(redirectUrl);, +			}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			String redirectUrl = signInAdapter.signIn(userId, connection, request);, +			if(redirectUrl != null) {, +				return redirect(redirectUrl);, +			}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SignInAdapter.java, +	 * @return the URL that ProviderSignInController should redirect to after sign in. May be null, indicating that ProviderSignInController, +	 * should redirect to its postSignInUrl., +	String signIn(String userId, Connection<?> connection, NativeWebRequest request);]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionRepositoryId = element.getAttribute("connection-repository-id");, +		String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, +		registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, +	private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, String usersConnectionRepositoryId, String connectionRepositoryId) {, +		connectionRepositoryBD.setFactoryBeanName(usersConnectionRepositoryId);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY_METHOD_NAME);, +		parserContext.getRegistry().registerBeanDefinition(connectionRepositoryId, decorateWithScopedProxy(connectionRepositoryId, connectionRepositoryBD, parserContext));, +		BeanDefinitionHolder beanDefinitionHolder = new BeanDefinitionHolder(beanDefinition, beanName);, +		return ScopedProxyUtils.createScopedProxy(beanDefinitionHolder, parserContext.getRegistry(), false).getBeanDefinition();, +	private static final String CREATE_CONNECTION_REPOSITORY_METHOD_NAME = "createConnectionRepository";, +	private static final String USER_ID_STRING_ID = "__userIdString";, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionRepositoryId = element.getAttribute("connection-repository-id");, +		String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, +		registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, +	private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, String usersConnectionRepositoryId, String connectionRepositoryId) {, +		connectionRepositoryBD.setFactoryBeanName(usersConnectionRepositoryId);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY_METHOD_NAME);, +		parserContext.getRegistry().registerBeanDefinition(connectionRepositoryId, decorateWithScopedProxy(connectionRepositoryId, connectionRepositoryBD, parserContext));, +		BeanDefinitionHolder beanDefinitionHolder = new BeanDefinitionHolder(beanDefinition, beanName);, +		return ScopedProxyUtils.createScopedProxy(beanDefinitionHolder, parserContext.getRegistry(), false).getBeanDefinition();, +	private static final String CREATE_CONNECTION_REPOSITORY_METHOD_NAME = "createConnectionRepository";, +	private static final String USER_ID_STRING_ID = "__userIdString";, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionRepositoryId = element.getAttribute("connection-repository-id");, +		String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, +		registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, +	private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, String usersConnectionRepositoryId, String connectionRepositoryId) {, +		connectionRepositoryBD.setFactoryBeanName(usersConnectionRepositoryId);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY_METHOD_NAME);, +		parserContext.getRegistry().registerBeanDefinition(connectionRepositoryId, decorateWithScopedProxy(connectionRepositoryId, connectionRepositoryBD, parserContext));, +		BeanDefinitionHolder beanDefinitionHolder = new BeanDefinitionHolder(beanDefinition, beanName);, +		return ScopedProxyUtils.createScopedProxy(beanDefinitionHolder, parserContext.getRegistry(), false).getBeanDefinition();, +	private static final String CREATE_CONNECTION_REPOSITORY_METHOD_NAME = "createConnectionRepository";, +	private static final String USER_ID_STRING_ID = "__userIdString";, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +			<xs:attribute name="connection-repository-id" use="optional" type="xs:string" default="connectionRepository" />, +			<xs:attribute name="users-connection-repository-id" use="optional" type="xs:string" default="usersConnectionRepository" />, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionRepositoryId = element.getAttribute("connection-repository-id");, +		String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, +		registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, +	private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, String usersConnectionRepositoryId, String connectionRepositoryId) {, +		connectionRepositoryBD.setFactoryBeanName(usersConnectionRepositoryId);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY_METHOD_NAME);, +		parserContext.getRegistry().registerBeanDefinition(connectionRepositoryId, decorateWithScopedProxy(connectionRepositoryId, connectionRepositoryBD, parserContext));, +		BeanDefinitionHolder beanDefinitionHolder = new BeanDefinitionHolder(beanDefinition, beanName);, +		return ScopedProxyUtils.createScopedProxy(beanDefinitionHolder, parserContext.getRegistry(), false).getBeanDefinition();, +	private static final String CREATE_CONNECTION_REPOSITORY_METHOD_NAME = "createConnectionRepository";, +	private static final String USER_ID_STRING_ID = "__userIdString";, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +			<xs:attribute name="connection-repository-id" use="optional" type="xs:string" default="connectionRepository" />, +			<xs:attribute name="users-connection-repository-id" use="optional" type="xs:string" default="usersConnectionRepository" />, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest.java]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.authentication.AuthenticationTrustResolverImpl;, +	private AuthenticationTrustResolverImpl authenticationTrustResolver = new AuthenticationTrustResolverImpl();, +, +		// Check if not already authenticated or is already logged in anonymous., +		if (auth == null || !auth.isAuthenticated() || authenticationTrustResolver.isAnonymous(auth)) {]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		List<ServiceProviderConnection<?>> connections = getConnectionRepository().findConnectionsToProvider(providerId);, +		getConnectionRepository().addConnection(connection);	, +		getConnectionRepository().addConnection(connection);, +		getConnectionRepository().removeConnectionsToProvider(providerId);, +		getConnectionRepository().removeConnection(new ServiceProviderConnectionKey(providerId, providerUserId));, +	private ServiceProviderConnectionRepository getConnectionRepository() {, +		return currentUserConnectionRepositoryProvider.get();, +	}, +]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +import org.springframework.web.client.test.ResponseCreators;, +	private static final String ACCESS_TOKEN_URL = "http://www.someprovider.com/oauth/accessToken";, +, +		oAuth2Template = new OAuth2Template("client_id", "client_secret", authorizeUrl, ACCESS_TOKEN_URL);, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.TEXT_PLAIN);, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oAuth2Template, +				.getRestOperations());, +		mockServer.expect(requestTo(ACCESS_TOKEN_URL)), +				.andExpect(method(POST)), +				.andExpect(body("client_id=client_id&client_secret=client_secret&code=code&" +, +								"redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code")), +				.andRespond(ResponseCreators.withResponse(new ClassPathResource("accessToken.json", getClass()),, +								responseHeaders));, +		AccessGrant accessGrant = oAuth2Template.exchangeForAccess("code", "http://www.someclient.com/callback");, +		assertEquals("accessToken", accessGrant.getAccessToken());, +		assertEquals("refreshToken", accessGrant.getRefreshToken());, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +import org.springframework.web.client.test.ResponseCreators;, +	private static final String ACCESS_TOKEN_URL = "http://www.someprovider.com/oauth/accessToken";, +, +		oAuth2Template = new OAuth2Template("client_id", "client_secret", authorizeUrl, ACCESS_TOKEN_URL);, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.TEXT_PLAIN);, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oAuth2Template, +				.getRestOperations());, +		mockServer.expect(requestTo(ACCESS_TOKEN_URL)), +				.andExpect(method(POST)), +				.andExpect(body("client_id=client_id&client_secret=client_secret&code=code&" +, +								"redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code")), +				.andRespond(ResponseCreators.withResponse(new ClassPathResource("accessToken.json", getClass()),, +								responseHeaders));, +		AccessGrant accessGrant = oAuth2Template.exchangeForAccess("code", "http://www.someclient.com/callback");, +		assertEquals("accessToken", accessGrant.getAccessToken());, +		assertEquals("refreshToken", accessGrant.getRefreshToken());, +++ b/spring-social-core/src/test/resources/org/springframework/social/oauth2/accessToken.json, +access_token=accessToken&refresh_token=refreshToken]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +		</section>, +		<section id="service-providers-persisting-connections">, +			<title>Persisting Connections</title>, +			<para>, +				After a connection has been established, you may wish to persist it for later use., +				This makes things convenient for the user since the connection can simply be restored from its persistent form and does not need to be established again., +				Spring Social provides a ServiceProviderConnectionRepository interface for managing the persistence of a user's connections:, +			</para>, +			<programlisting language="java"><![CDATA[, +public interface ServiceProviderConnectionRepository {, +, +    MultiValueMap<String, ServiceProviderConnection<?>> findConnections();, +	, +    List<ServiceProviderConnection<?>> findConnectionsToProvider(String providerId);, +, +    MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUserIds);, +, +    ServiceProviderConnection<?> findConnection(ServiceProviderConnectionKey connectionKey);, +, +    <S> ServiceProviderConnection<S> findConnectionByServiceApi(Class<S> serviceApiType);, +	, +    <S> List<ServiceProviderConnection<S>> findConnectionsByServiceApi(Class<S> serviceApiType);, +	, +    <S> ServiceProviderConnection<S> findConnectionByServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +	, +    void addConnection(ServiceProviderConnection<?> connection);, +, +    void updateConnection(ServiceProviderConnection<?> connection);, +, +    void removeConnectionsToProvider(String providerId);, +, +    void removeConnection(ServiceProviderConnectionKey connectionKey);, +, +}]]>, +			</programlisting>, +			<para>, +				As you can see, this interface provides a number of operations for adding, updating, removing, and finding ServiceProviderConnections., +				Consult the JavaDoc API of this interface for a full description of these operations., +				Note that all operations on this repository are scoped relative to a "current user" that has authenticated with your local application., +			</para>, +			<para>, +				For multi-user environments, Spring Social provides a MultiUserServiceProviderConnectionFactory that provides access to the global store of connections across all users:, +			</para>, +			<programlisting language="java"><![CDATA[, +public interface MultiUserServiceProviderConnectionRepository {, +, +    String findLocalUserIdForConnection(ServiceProviderConnectionKey connectionKey);, +, +    Set<String> findLocalUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +, +    ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +, +}]]>, +			</programlisting>, +			<para>, +				As you can see, this repository acts as a factory for ServiceProviderConnectionRepository instances scoped to a single user, as well as exposes a number of multi-user operations., +				These operations include the ability to lookup the local userIds associated with connections to support provider user sign-in and show "registered friends" scenarios., +				Consult the JavaDoc API of this interface for a full description., +			</para>, +			<section id="service-providers-persisting-connections-jdbc">, +				<title>JDBC-based Persistence</title>, +				<para>, +					Spring Social ships a JdbcMultiUserServiceProviderConnectionRepository capable of persisting connections to a RDBMS., +				</para>, +			</section>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +		</section>, +		<section id="service-providers-persisting-connections">, +			<title>Persisting Connections</title>, +			<para>, +				After a connection has been established, you may wish to persist it for later use., +				This makes things convenient for the user since the connection can simply be restored from its persistent form and does not need to be established again., +				Spring Social provides a ServiceProviderConnectionRepository interface for managing the persistence of a user's connections:, +			</para>, +			<programlisting language="java"><![CDATA[, +public interface ServiceProviderConnectionRepository {, +, +    MultiValueMap<String, ServiceProviderConnection<?>> findConnections();, +	, +    List<ServiceProviderConnection<?>> findConnectionsToProvider(String providerId);, +, +    MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUserIds);, +, +    ServiceProviderConnection<?> findConnection(ServiceProviderConnectionKey connectionKey);, +, +    <S> ServiceProviderConnection<S> findConnectionByServiceApi(Class<S> serviceApiType);, +	, +    <S> List<ServiceProviderConnection<S>> findConnectionsByServiceApi(Class<S> serviceApiType);, +	, +    <S> ServiceProviderConnection<S> findConnectionByServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +	, +    void addConnection(ServiceProviderConnection<?> connection);, +, +    void updateConnection(ServiceProviderConnection<?> connection);, +, +    void removeConnectionsToProvider(String providerId);, +, +    void removeConnection(ServiceProviderConnectionKey connectionKey);, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +			if (newUserId != null), +			{, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +			if (newUserId != null), +			{, +		}, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +	, +	@Test, +	public void findUserIdWithConnectionNoConnection_withConnectionSignUpReturningNull() {		, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("12345"));, +		usersConnectionRepository.setConnectionSignUp(new ConnectionSignUp() {, +			public String execute(Connection<?> connection) {, +				return null;, +			}, +		});, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, +		assertEquals(0, userIds.size());, +	}]
[+++ b/docs/src/reference/docbook/connecting.xml, +      		In the previous chapter, you learned how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> can be used to manage user connections between your application and external service providers., +      		In this chapter, you'll learn how to control the connect flow in a web application environment., +			Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that works with ServiceProviders to coordinate the connection flow., +			At each step, <classname>ConnectController</classname> delegates to a <interfacename>ServiceProvider</interfacename> to handle the finer details such as obtaining a request token and creating connections., +			Because <classname>ConnectController</classname> collaborates with ServiceProviders to establish connections, you'll first need to register one or more <interfacename>ServiceProvider</interfacename> implementations as beans in the Spring context., +			<classname>ConnectController</classname> will discover any bean of type <interfacename>ServiceProvider</interfacename> in the Spring context and delegate to it as requested by users of your application., +			The following configuration class registers <interfacename>ServiceProvider</interfacename> implementations for Twitter, Facebook, and TripIt using Spring's Java configuration style:, +package org.springframework.social.showcase.config.connect;, +public class ServiceProviderConfig {, +    public TwitterServiceProvider twitter(@Value("#{environment['twitter.consumerKey']}") String consumerKey,, +            @Value("#{environment['twitter.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, +        return new TwitterServiceProvider(consumerKey, consumerSecret, connectionRepository);, +    public FacebookServiceProvider facebook(@Value("#{environment['facebook.appId']}") String appId,, +            @Value("#{environment['facebook.appSecret']}") String appSecret, ConnectionRepository connectionRepository) {, +        return new FacebookServiceProvider(appId, appSecret, connectionRepository);, +    public TripItServiceProvider tripit(@Value("#{environment['tripit.consumerKey']}") String consumerKey,, +            @Value("#{environment['tripit.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, +        return new TripItServiceProvider(consumerKey, consumerSecret, connectionRepository);, +			Each <interfacename>ServiceProvider</interfacename> is configured with the client key and secret that were assigned to it when the application was registered with the service provider., +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as properties of the current environment., +			ServiceProviders are also given a <interfacename>ConnectionRepository</interfacename> at construction., +			Therefore, a <interfacename>ServiceProvider</interfacename> delegates to a <interfacename>ConnectionRepository</interfacename> for persisting connections., +			Spring Social supports JDBC-based connection storage with <classname>JdbcConnectionRepository</classname>, which itself is constructed with a <interfacename>DataSource</interfacename> and a <interfacename>TextEncryptor</interfacename>:., +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase.config.connect;, +import javax.sql.DataSource;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.social.connect.jdbc.JdbcConnectionRepository;, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.security.crypto.encrypt.TextEncryptor;, +, +@Configuration, +public class ConnectionRepositoryConfig {, +, +    @Bean, +    public ConnectionRepository connectionRepository(DataSource dataSource, TextEncryptor textEncryptor) {, +        return new JdbcConnectionRepositoy(dataSource, textEncryptor);, +    }, +, +}]]>, +		</programlisting>, +package org.springframework.social.showcase.config.security;, +public class DevEncryptionConfig {, +			Here, the <code>@Profile</code> annotation ensures that this <interfacename>TextEncryptor</interfacename> will only be created when "dev" is an active profile., +public class ProductionEncryptionConfig {, +    public TextEncryptor textEncryptor(@Value("#{environment['security.encryptPassword']}") String password,, +            @Value("#{environment['security.encryptSalt']}") String salt) {, +        <constructor-arg value="#{environment['facebook.appId']}" />, +        <constructor-arg ref="textEncryptor" />, +    , +            <constructor-arg value="#{environment['security.encryptPassword']}" />, +            <constructor-arg value="#{environment['security.encryptSalt']}" />, +public class ConnectControllerConfig {, +			In either case, <classname>ConnectController</classname> is constructed with the base URL for the application., +			The path pattern that <classname>ConnectController</classname> handles is "/connect/{providerId}"., +			<listitem><para><code>GET /connect/{providerId}</code> - Displays a web page showing connection status to the provider.</para></listitem>, +			<listitem><para><code>POST /connect/{providerId}</code> - Initiates the connection flow with the provider.</para></listitem>, +			<listitem><para><code>GET /connect/{providerId}?code={code}</code> - Receives the authorization callback from the provider, accepting an authorization code. Uses the code to request an access token and complete the connection.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs a connection with the provider.</para></listitem>, +			<listitem><para><code>GET /connect/{providerId}</code> - Displays a web page showing connection status to the provider.</para></listitem>, +			<listitem><para><code>POST /connect/{providerId}</code> - Initiates the connection flow with the provider.</para></listitem>, +					<code>GET /connect/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - , +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs a connection with the provider.</para></listitem>, +				To kick off the connection flow, the application should <code>POST</code> to <code>/connect/{providerId}</code>. , +, +, +    ConnectController controller = new ConnectController(applicationUrl);, +    controller.addInterceptor(new TweetAfterConnectInterceptor());, +    return controller;]
[+++ b/build.gradle, +        testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ b/build.gradle, +        testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ /dev/null, +++ b/build.gradle, +        testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ /dev/null, +++ b/spring-social-config/src/test/resources/org/springframework/social/config/xml/socialNamespaceHandlerTests-serviceProviders.xml, +	<bean class="org.springframework.social.provider.test.StubConnectionRepository" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	private final Map<String, Object> additionalParameters;, +, +	public AccessGrant(String accessToken, String refreshToken, Long expireTime, String scope, Map<String, Object> additionalParameters) {, +		this.expireTime = expireTime;, +	 * The refresh token that can be used to renew the access token., +	 */, +	public String getRefreshToken() {, +		return refreshToken;, +	}, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	private final Map<String, Object> additionalParameters;, +, +	public AccessGrant(String accessToken, String refreshToken, Long expireTime, String scope, Map<String, Object> additionalParameters) {, +		this.expireTime = expireTime;, +	 * The refresh token that can be used to renew the access token., +	 */, +	public String getRefreshToken() {, +		return refreshToken;, +	}, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Integer expiresIn = (Integer) result.get("expires_in");, +		, +				expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null,, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	private final Map<String, Object> additionalParameters;, +, +	public AccessGrant(String accessToken, String refreshToken, Long expireTime, String scope, Map<String, Object> additionalParameters) {, +		this.expireTime = expireTime;, +	 * The refresh token that can be used to renew the access token., +	 */, +	public String getRefreshToken() {, +		return refreshToken;, +	}, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Integer expiresIn = (Integer) result.get("expires_in");, +		, +				expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null,, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +		return new AccessGrant("12345", "23456", 1303148118770L, null, null);, +		return new AccessGrant("12345", "23456", 1303148118770L, null, null);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	public static String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +		return buildAuthorizationHeaderValue(request.getMethod(), request.getURI(), oauthParameters, additionalParameters, consumerSecret, accessTokenSecret);, +		return buildAuthorizationHeaderValue(request.getMethod(), request.getURI(), oauthParameters, additionalParameters, consumerSecret, accessTokenSecret);]
[+++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-tripit</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-tripit</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/tripit/TripItShowcaseController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.showcase.tripit;, +, +import java.security.Principal;, +, +import javax.inject.Inject;, +, +import org.springframework.social.tripit.TripItOperations;, +import org.springframework.social.tripit.connect.TripItServiceProvider;, +import org.springframework.stereotype.Controller;, +import org.springframework.ui.Model;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RequestMethod;, +, +@Controller, +public class TripItShowcaseController {, +, +	private final TripItServiceProvider tripitProvider;, +, +	@Inject, +	public TripItShowcaseController(TripItServiceProvider tripitProvider) {, +		this.tripitProvider = tripitProvider;, +	}, +, +	@RequestMapping(value = "/tripit", method = RequestMethod.GET), +	public String home(Principal user, Model model) {, +		if (tripitProvider.isConnected(user.getName())) {, +			TripItOperations tripit = tripitProvider.getConnections(user.getName()).get(0).getServiceApi();, +			model.addAttribute("tripItUser", tripit.getUserProfile());, +			model.addAttribute("trips", tripit.getUpcomingTrips());, +			return "tripit/tripit";, +		}, +, +		return "redirect:/connect/tripit";, +	}, +, +}, +++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-tripit</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/tripit/TripItShowcaseController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.showcase.tripit;, +, +import java.security.Principal;, +, +import javax.inject.Inject;, +, +import org.springframework.social.tripit.TripItOperations;, +import org.springframework.social.tripit.connect.TripItServiceProvider;, +import org.springframework.stereotype.Controller;, +import org.springframework.ui.Model;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RequestMethod;, +, +@Controller]
[+++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table ServiceProvider (name varchar,, +                    displayName varchar not null,, +                   	implementation varchar not null,, +					apiKey varchar not null,					, +					secret varchar,, +					appId bigint,, +					requestTokenUrl varchar,, +					authorizeUrl varchar,, +					accessTokenUrl varchar,, +					primary key (name));, +, +create table AccountConnection (member bigint,, +					provider varchar,, +					accountId varchar,	, +					profileUrl varchar,, +					primary key (member, provider, accessToken),, +					foreign key (provider) references ServiceProvider(name));, +create index ProviderAccountKey on AccountConnection(accountId);, +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table ServiceProvider (name varchar,, +                    displayName varchar not null,, +                   	implementation varchar not null,, +					apiKey varchar not null,					, +					secret varchar,, +					appId bigint,, +					requestTokenUrl varchar,, +					authorizeUrl varchar,, +					accessTokenUrl varchar,, +					primary key (name));, +, +create table AccountConnection (member bigint,, +					provider varchar,, +					accountId varchar,	, +					profileUrl varchar,, +					primary key (member, provider, accessToken),, +					foreign key (provider) references ServiceProvider(name));, +create index ProviderAccountKey on AccountConnection(accountId);, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/samples/facebook/db/ServiceProviders-data.sql" />, +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table ServiceProvider (name varchar,, +                    displayName varchar not null,, +                   	implementation varchar not null,, +					apiKey varchar not null,					, +					secret varchar,, +					appId bigint,, +					requestTokenUrl varchar,, +					authorizeUrl varchar,, +					accessTokenUrl varchar,, +					primary key (name));, +, +create table AccountConnection (member bigint,, +					provider varchar,]
[+++ /dev/null, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a connection repository through which account-to-provider connections will be stored -->	, +	, +	<!-- Configure a service provider factory from which service providers may be retrieved by name, +	     (used primarily by ConnectController)., +	     In this case, service providers are retrieved as beans from the Spring application context., +	     <social:jdbc-service-provider-factory> retrieves them through JDBC.  , +	     -->, +	<social:context-service-provider-factory />, +	, +	<!-- Configure a Twitter service provider -->, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a connection repository through which account-to-provider connections will be stored -->	, +	, +	<!-- Configure a service provider factory from which service providers may be retrieved by name, +	     (used primarily by ConnectController)., +	     In this case, service providers are retrieved as beans from the Spring application context., +	     <social:jdbc-service-provider-factory> retrieves them through JDBC.  , +	     -->, +	<social:context-service-provider-factory />, +	, +	<!-- Configure a Twitter service provider -->, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/ContextServiceProviderFactoryElementParser.java, +package org.springframework.social.connect.config;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.social.connect.jdbc.ContextServiceProviderFactory;, +import org.w3c.dom.Element;, +, +public class ContextServiceProviderFactoryElementParser implements BeanDefinitionParser {, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(ContextServiceProviderFactory.class);, +		AbstractBeanDefinition beanDefinition = beanBuilder.getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition("serviceProviderFactory", beanDefinition);, +		return beanDefinition;, +	}, +}, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a connection repository through which account-to-provider connections will be stored -->	, +	, +	<!-- Configure a service provider factory from which service providers may be retrieved by name, +	     (used primarily by ConnectController)., +	     In this case, service providers are retrieved as beans from the Spring application context., +	     <social:jdbc-service-provider-factory> retrieves them through JDBC.  , +	     -->, +	<social:context-service-provider-factory />, +	, +	<!-- Configure a Twitter service provider -->, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/ContextServiceProviderFactoryElementParser.java, +package org.springframework.social.connect.config;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;]
[+++ b/samples/facebook-showcase-2/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +// -----------------------------------------------------------------------------, +// Main gradle build file for Spring Social's Twitter-Connect Sample, +// @author Craig Walls, +// -----------------------------------------------------------------------------, +, +// -----------------------------------------------------------------------------, +// Configuration for the root project, +// -----------------------------------------------------------------------------, +description = 'Spring Social Twitter Connect', +abbreviation = 'TWITCONN', +, +apply plugin: 'java' // tasks for conventional java lifecycle, +apply plugin: 'maven' // `gradle install` to push jars to local .m2 cache, +apply plugin: 'eclipse' // `gradle eclipse` to generate .classpath/.project, +apply plugin: 'idea' // `gradle idea` to generate .ipr/.iml, +apply plugin: 'war', +apply plugin: 'jetty', +, +task wrapper(type: Wrapper) {, +    gradleVersion = '0.9-rc-3', +}, +  , +group = 'org.springframework.social.samples', +version = '1.0.0.BUILD-SNAPSHOT', +, +def localMavenRepo = new File("${System.properties.'user.home'}/.m2/repository").toURL().toString(), +, +repositories {, +    mavenRepo urls: localMavenRepo, +    mavenRepo urls: 'http://maven.springframework.org/release', +    mavenRepo urls: 'http://maven.springframework.org/milestone', +    mavenRepo urls: 'http://maven.springframework.org/snapshot', +    mavenCentral(), +}, +, +dependencies {, +    compile "org.springframework:spring-context:3.0.5.RELEASE", +    compile "org.springframework:spring-webmvc:3.0.5.RELEASE", +    compile "org.springframework:spring-aspects:3.0.5.RELEASE", +	compile "com.h2database:h2:1.2.143", +	compile "org.aspectj:aspectjrt:1.6.9", +	compile 'org.slf4j:slf4j-api:1.5.10', +	compile 'org.slf4j:jcl-over-slf4j:1.5.10', +	compile 'org.slf4j:slf4j-log4j12:1.5.10', +	compile "log4j:log4j:1.2.15", +	compile "javax.inject:javax.inject:1", +	compile "org.springframework.social:spring-social-core:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-connect:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-connect-web:1.0.0.BUILD-SNAPSHOT", +	compile "org.scribe:scribe:1.0.7", +	providedRuntime ("javax.servlet:servlet-api:2.5") { provided = true }, +	providedRuntime ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, +	compile "javax.servlet:jstl:1.2", +}, +++ b/samples/facebook-showcase-2/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +// -----------------------------------------------------------------------------, +// Main gradle build file for Spring Social's Twitter-Connect Sample, +// @author Craig Walls, +// -----------------------------------------------------------------------------, +, +// -----------------------------------------------------------------------------, +// Configuration for the root project, +// -----------------------------------------------------------------------------, +description = 'Spring Social Twitter Connect', +abbreviation = 'TWITCONN', +, +apply plugin: 'java' // tasks for conventional java lifecycle, +apply plugin: 'maven' // `gradle install` to push jars to local .m2 cache, +apply plugin: 'eclipse' // `gradle eclipse` to generate .classpath/.project]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +	private String defaultScope = "";, +	 * @param defaultScope OAuth scope to use, i.e. requested permissions, +	public void setDefaultScope(String defaultScope) {, +		this.defaultScope = defaultScope;, +			setScope(request, params);, +	private void setScope(HttpServletRequest request, OAuth2Parameters params) {, +		String requestedScope = request.getParameter("scope");, +		if (StringUtils.hasLength(requestedScope)) {, +			params.setScope(requestedScope);, +		} else {, +			params.setScope(defaultScope);, +		}, +	}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +	private String defaultScope = "";, +	 * @param defaultScope OAuth scope to use, i.e. requested permissions, +	public void setDefaultScope(String defaultScope) {, +		this.defaultScope = defaultScope;, +			setScope(request, params);, +	private void setScope(HttpServletRequest request, OAuth2Parameters params) {, +		String requestedScope = request.getParameter("scope");, +		if (StringUtils.hasLength(requestedScope)) {, +			params.setScope(requestedScope);, +		} else {, +			params.setScope(defaultScope);, +		}, +	}, +++ b/src/dist/changelog.txt, +Spring Social 1.1.0 Milestone 4 (August 19, 2012), +=================================================, +   * SocialAuthenticationFilter now accepts and passes along the value of, +     a 'scope' parameter when doing authorization for an OAuth 2 provider., +     (SOCIAL-389)]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +Before we accept a non-trivial patch or pull request we will need you to sign the, +https://support.springsource.com/spring_committer_signup[contributor's agreement]., +Signing the contributor's agreement does not grant anyone commit rights to the main, +repository, but it does mean that we can accept your contributions, and you will get an, +author credit if we do.  Active contributors might be asked to join the core team, and, +given the ability to merge pull requests., +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +Before we accept a non-trivial patch or pull request we will need you to sign the, +https://support.springsource.com/spring_committer_signup[contributor's agreement]., +Signing the contributor's agreement does not grant anyone commit rights to the main, +repository, but it does mean that we can accept your contributions, and you will get an, +author credit if we do.  Active contributors might be asked to join the core team, and, +given the ability to merge pull requests., +++ b/build.gradle, +        maven { url "http://repo.spring.io/libs-milestone" }, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +Before we accept a non-trivial patch or pull request we will need you to sign the, +https://support.springsource.com/spring_committer_signup[contributor's agreement]., +Signing the contributor's agreement does not grant anyone commit rights to the main, +repository, but it does mean that we can accept your contributions, and you will get an, +author credit if we do.  Active contributors might be asked to join the core team, and, +given the ability to merge pull requests., +++ b/build.gradle, +        maven { url "http://repo.spring.io/libs-milestone" }, +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=latest.integration, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +Before we accept a non-trivial patch or pull request we will need you to sign the, +https://support.springsource.com/spring_committer_signup[contributor's agreement]., +Signing the contributor's agreement does not grant anyone commit rights to the main, +repository, but it does mean that we can accept your contributions, and you will get an, +author credit if we do.  Active contributors might be asked to join the core team, and, +given the ability to merge pull requests., +++ b/build.gradle, +        maven { url "http://repo.spring.io/libs-milestone" }, +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=latest.integration, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +Before we accept a non-trivial patch or pull request we will need you to sign the, +https://support.springsource.com/spring_committer_signup[contributor's agreement]., +Signing the contributor's agreement does not grant anyone commit rights to the main, +repository, but it does mean that we can accept your contributions, and you will get an, +author credit if we do.  Active contributors might be asked to join the core team, and, +given the ability to merge pull requests., +++ b/build.gradle, +        maven { url "http://repo.spring.io/libs-milestone" }, +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=latest.integration, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Oct 10 15:05:41 MDT 2016, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +Before we accept a non-trivial patch or pull request we will need you to sign the, +https://support.springsource.com/spring_committer_signup[contributor's agreement]., +Signing the contributor's agreement does not grant anyone commit rights to the main, +repository, but it does mean that we can accept your contributions, and you will get an, +author credit if we do.  Active contributors might be asked to join the core team, and, +given the ability to merge pull requests., +++ b/build.gradle, +        maven { url "http://repo.spring.io/libs-milestone" }, +++ b/gradle.properties, +h2Version=1.4.192]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);, +, +	private final String id;, +	 * The user's id in the provider, +	 * May be null if not exposed/supported by the provider., +	 * @return the user's id in the provider, +	 */, +	public String getId() {, +		return id;, +	}, +, +	/**, +	UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, +		this.id = id;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);, +, +	private final String id;, +	 * The user's id in the provider, +	 * May be null if not exposed/supported by the provider., +	 * @return the user's id in the provider, +	 */, +	public String getId() {, +		return id;, +	}, +, +	/**, +	UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, +		this.id = id;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfileBuilder.java, +	private String id;, +, +	 * Sets the profile id field., +	 * @param id the user's id in the provider, +	 * @return this {@link UserProfileBuilder} for setting more properties, +	 */, +	public UserProfileBuilder setId(String id) {, +		this.id = id;, +		return this;, +	}, +, +	/**, +		return new UserProfile(id, name, firstName, lastName, email, username);]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInUtils.java, +		ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) sessionStrategy.getAttribute(request, ProviderSignInAttempt.SESSION_ATTRIBUTE);, +		ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) sessionStrategy.getAttribute(request, ProviderSignInAttempt.SESSION_ATTRIBUTE);, +			sessionStrategy.removeAttribute(request, ProviderSignInAttempt.SESSION_ATTRIBUTE);]
[+++ b/gradle.properties, +springVersion=5.0.0.RC2]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link ServiceProviderConnection} model and a specific provider API model., + * @author Keith Donald, + * @param <S> the service API, + */, +public interface ServiceApiAdapter<S> {, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#test()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#getUser()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return the uniform service provider user model, +	 */, +	ServiceProviderUser getUser(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#updateStatus(String)} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @param message the status message, +	 */, +	void updateStatus(S serviceApi, String message);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link ServiceProviderConnection} model and a specific provider API model., + * @author Keith Donald, + * @param <S> the service API, + */, +public interface ServiceApiAdapter<S> {, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#test()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#getUser()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return the uniform service provider user model, +	 */, +	ServiceProviderUser getUser(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#updateStatus(String)} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @param message the status message, +	 */, +	void updateStatus(S serviceApi, String message);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * A command that signs up a new user in the event no user id could be mapped from a {@link Connection}., + * Allows for implicitly creating a local user profile from connection data during a provider sign-in attempt., + * @see UsersConnectionRepository#findUserIdWithConnection(Connection), + * @author Keith Donald, + */, +public interface ConnectionSignUp {, +, +	/**, +	 * Sign up a new user of the application from the connection., +	 * @param connection the connection, +	 * @return the new user id, +	 */, +	String execute(Connection<?> connection);, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * A command that signs up a new user in the event no user id could be mapped from a {@link Connection}., + * Allows for implicitly creating a local user profile from connection data during a provider sign-in attempt., + * @see UsersConnectionRepository#findUserIdWithConnection(Connection), + * @author Keith Donald, + */, +public interface ConnectionSignUp {, +, +	/**, +	 * Sign up a new user of the application from the connection., +	 * @param connection the connection, +	 * @return the new user id, +	 */, +	String execute(Connection<?> connection);, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	private ConnectionSignUp connectionSignUp;, +	, +	private String tablePrefix = "";, +	 * The command to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 * @see #findUserIdWithConnection(Connection), +	 */, +	public void setConnectionSignUp(ConnectionSignUp connectionSignUp) {, +		this.connectionSignUp = connectionSignUp;, +	}, +	, +	/**, +			if (e.getActualSize() == 0) {, +				if (connectionSignUp != null) {, +					String newUserId = connectionSignUp.execute(connection);, +					createConnectionRepository(newUserId).addConnection(connection);, +					return newUserId;, +				}, +			}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *]
[+++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://graph.facebook.com/oauth/access_token"));, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, +		super("github", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://github.com/login/oauth/access_token"));, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, +		super("github", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://github.com/login/oauth/access_token"));, +++ b/spring-social-gowalla/src/main/java/org/springframework/social/gowalla/connect/GowallaServiceProvider.java, +		super("gowalla", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://gowalla.com/api/oauth/token"));, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, +		super("github", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://github.com/login/oauth/access_token"));, +++ b/spring-social-gowalla/src/main/java/org/springframework/social/gowalla/connect/GowallaServiceProvider.java, +		super("gowalla", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://gowalla.com/api/oauth/token"));, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInServiceProvider.java, +		super("linkedin", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey, consumerSecret,, +				"https://api.linkedin.com/uas/oauth/requestToken",, +				"https://www.linkedin.com/uas/oauth/authorize?oauth_token={requestToken}",, +				"https://api.linkedin.com/uas/oauth/accessToken"));, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, +		super("github", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://github.com/login/oauth/access_token"));, +++ b/spring-social-gowalla/src/main/java/org/springframework/social/gowalla/connect/GowallaServiceProvider.java, +		super("gowalla", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://gowalla.com/api/oauth/token"));, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInServiceProvider.java, +		super("linkedin", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey, consumerSecret,, +				"https://api.linkedin.com/uas/oauth/requestToken",, +				"https://www.linkedin.com/uas/oauth/authorize?oauth_token={requestToken}",, +				"https://api.linkedin.com/uas/oauth/accessToken"));, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/connect/TripItServiceProvider.java, +		super("tripit", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey, consumerSecret,, +				"https://api.tripit.com/oauth/request_token",, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, +		super("github", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, +				"https://github.com/login/oauth/access_token"));, +++ b/spring-social-gowalla/src/main/java/org/springframework/social/gowalla/connect/GowallaServiceProvider.java, +		super("gowalla", connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://gowalla.com/api/oauth/token"));, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInServiceProvider.java, +		super("linkedin", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey, consumerSecret,, +				"https://api.linkedin.com/uas/oauth/requestToken",, +				"https://www.linkedin.com/uas/oauth/authorize?oauth_token={requestToken}",, +				"https://api.linkedin.com/uas/oauth/accessToken"));, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/connect/TripItServiceProvider.java, +		super("tripit", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey, consumerSecret,, +				"https://api.tripit.com/oauth/request_token",, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/connect/TwitterServiceProvider.java, +		super("twitter", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey, consumerSecret,, +				"https://twitter.com/oauth/request_token",, +				"https://twitter.com/oauth/authorize?oauth_token={requestToken}",, +				"https://twitter.com/oauth/access_token"));]
[+++ b/docs/src/reference/docbook/apis.xml, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +			Spring Social's <interfacename>FacebookApi</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user., +FacebookApi facebook = new FacebookTemplate(accessToken);]]>, +FacebookApi facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookApi</interfacename> created using the connection details for the given account ID. , +			With a <interfacename>FacebookApi</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. , +				You can retrieve a user's Facebook profile data using <interfacename>FacebookApi</interfacename>' <methodname>getUserProfile()</methodname> method:, +				<interfacename>FacebookApi</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method., +			Spring Social offers integration with LinkedIn via <interfacename>LinkedInApi</interfacename> and its implementation, <classname>LinkedInTemplate</classname>., +LinkedInApi linkedin = new LinkedInTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +LinkedInApi linkedin = linkedinProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			In this case, the <methodname>getServiceApi()</methodname> is asked to return a <interfacename>LinkedInApi</interfacename> instance created using connection details established using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>., +			Once you have a <interfacename>LinkedInApi</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for., +			Using Spring Social's <interfacename>TripItApi</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network., +TripItApi tripit = new TripItTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +			If you're using Spring Social's service provider framework (as described in <xref linkend="serviceprovider"/>), you can get a <interfacename>TripItApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TripItServiceProvider</classname>'s <methodname>getConnections()</methodname> method:, +TripItApi tripit = tripitProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			In this case, <classname>TripItServiceProvider</classname> is being asked to give a <interfacename>TripItApi</interfacename> constructed using connection data established beforehand using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>., +			In either event, once you have a <interfacename>TripItApi</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt., +				<interfacename>TripItApi</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. , +			Spring Social's <interfacename>GitHubApi</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform., +GitHubApi github = new GitHubTemplate(accessToken);]]>, +GitHubApi github = githubProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>GitHubServiceProvider</classname> is being asked for a <interfacename>GitHubApi</interfacename> that was created using the connection details for the given account ID. , +			With a <interfacename>GitHubApi</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. , +				To get the currently authenticated user's GitHub profile data, call <interfacename>GitHubApi</interfacename>'s <methodname>getUserProfile()</methodname> method:, +			Spring Social supports interaction with Gowalla through the <interfacename>GowallaApi</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>., +GowallaApi gowalla = new GowallaTemplate(accessToken);]]>, +GowallaApi gowalla = gowallaProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>GowallaServiceProvider</classname> is being asked for a <interfacename>GowallaApi</interfacename> that was created using the connection details for the given account ID. , +			With a <interfacename>GowallaApi</interfacename> in hand, there are a handful of operations it provides to interact with Gowalla on behalf of the user. , +				<interfacename>GowallaApi</interfacename> also allows you to learn about the user's favorite checkin spots. , +++ b/docs/src/reference/docbook/apis.xml, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +			Spring Social's <interfacename>FacebookApi</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user., +FacebookApi facebook = new FacebookTemplate(accessToken);]]>, +FacebookApi facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookApi</interfacename> created using the connection details for the given account ID. , +			With a <interfacename>FacebookApi</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. , +				You can retrieve a user's Facebook profile data using <interfacename>FacebookApi</interfacename>' <methodname>getUserProfile()</methodname> method:, +				<interfacename>FacebookApi</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method., +			Spring Social offers integration with LinkedIn via <interfacename>LinkedInApi</interfacename> and its implementation, <classname>LinkedInTemplate</classname>., +LinkedInApi linkedin = new LinkedInTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +LinkedInApi linkedin = linkedinProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			In this case, the <methodname>getServiceApi()</methodname> is asked to return a <interfacename>LinkedInApi</interfacename> instance created using connection details established using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>., +			Once you have a <interfacename>LinkedInApi</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for., +			Using Spring Social's <interfacename>TripItApi</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network., +TripItApi tripit = new TripItTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +			If you're using Spring Social's service provider framework (as described in <xref linkend="serviceprovider"/>), you can get a <interfacename>TripItApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TripItServiceProvider</classname>'s <methodname>getConnections()</methodname> method:, +TripItApi tripit = tripitProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			In this case, <classname>TripItServiceProvider</classname> is being asked to give a <interfacename>TripItApi</interfacename> constructed using connection data established beforehand using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>., +			In either event, once you have a <interfacename>TripItApi</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt., +				<interfacename>TripItApi</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. , +			Spring Social's <interfacename>GitHubApi</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform., +GitHubApi github = new GitHubTemplate(accessToken);]]>, +GitHubApi github = githubProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>GitHubServiceProvider</classname> is being asked for a <interfacename>GitHubApi</interfacename> that was created using the connection details for the given account ID. , +			With a <interfacename>GitHubApi</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. , +				To get the currently authenticated user's GitHub profile data, call <interfacename>GitHubApi</interfacename>'s <methodname>getUserProfile()</methodname> method:, +			Spring Social supports interaction with Gowalla through the <interfacename>GowallaApi</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>., +GowallaApi gowalla = new GowallaTemplate(accessToken);]]>, +GowallaApi gowalla = gowallaProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>GowallaServiceProvider</classname> is being asked for a <interfacename>GowallaApi</interfacename> that was created using the connection details for the given account ID. , +			With a <interfacename>GowallaApi</interfacename> in hand, there are a handful of operations it provides to interact with Gowalla on behalf of the user. , +				<interfacename>GowallaApi</interfacename> also allows you to learn about the user's favorite checkin spots. , +++ b/docs/src/reference/docbook/connecting.xml, +				The last thing that <classname>ConnectController</classname> does is to hand off the access token to the <interfacename>ServiceProvider</interfacename> implementation to be stored for future use., +import org.springframework.social.twitter.TwitterApi;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterApi> {, +    public void preConnect(ServiceProvider<TwitterApi> provider, WebRequest request) {, +    public void postConnect(ServiceProvider<TwitterApi> provider, ServiceProviderConnection<TwitterApi> connection, WebRequest request) {, +			In the example given here, only connections made through a service provider whose operation type is <interfacename>TwitterApi</interfacename> will trigger the interceptor's methods., +++ b/docs/src/reference/docbook/apis.xml, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +			Spring Social's <interfacename>FacebookApi</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user., +FacebookApi facebook = new FacebookTemplate(accessToken);]]>, +FacebookApi facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookApi</interfacename> created using the connection details for the given account ID. , +			With a <interfacename>FacebookApi</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. , +				You can retrieve a user's Facebook profile data using <interfacename>FacebookApi</interfacename>' <methodname>getUserProfile()</methodname> method:, +				<interfacename>FacebookApi</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method.]
[+++ b/docs/src/reference/docbook/apis.xml, +	<title>Working with Service APIs</title>, +++ b/docs/src/reference/docbook/apis.xml, +	<title>Working with Service APIs</title>, +++ b/docs/src/reference/docbook/signin.xml, +	<title>Signing in with Service Provider Accounts</title>]
[+++ b/README, +git clone git://github.com/SpringSource/spring-social.git, +++ b/README, +git clone git://github.com/SpringSource/spring-social.git, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/InMemoryConnectionRepositoryRegistrar.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/InMemoryConnectionRepositoryRegistrar.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/InMemoryConnectionRepositoryRegistrar.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeSocialAuthenticationService.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/InMemoryConnectionRepositoryRegistrar.java, +/*, + * Copyright 2013 the original author or authors., + *]
[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/docs/src/reference/docbook/apis.xml, +			From a user's perspective, Twitter's function is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +			In contrast, Twitter's API is rather rich, enabling applications to interact with Twitter in ways that may not be obvious from the humble tweet box., +			Spring Social offers interaction with Twitter's service API through the <interfacename>TwitterApi</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>.			, +TwitterApi twitterApi = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitterApi = new TwitterTemplate();]]>, +			Attempting other operations, such as tweeting will fail with an <classname>IllegalStateException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on a <interfacename>ServiceProviderConnection</interfacename>. , +List<ServiceProviderConnection<TwitterApi>> connections = connectionRepository.finConnectionsToProvider("twitter");, +TwitterApi twitterApi = connections.get(0).getServiceApi();]]>, +			Here, <interfacename>ServiceProviderConnectionRepository</interfacename> is being asked for all of the connections that the current user has with Twitter., +			From the first connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection credentials received when the connection was established., +			Once you have a <interfacename>TwitterApi</interfacename>, you can perform a several operations against Twitter., +			<interfacename>TwitterApi</interfacename> is defined as follows:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +public interface TwitterApi {, +, +    boolean isAuthorizedForUser();, +, +    DirectMessageOperations directMessageOperations();, +	, +    FriendOperations friendOperations();, +, +    ListOperations listOperations();, +, +    SearchOperations searchOperations();, +, +    TimelineOperations timelineOperations();, +, +    UserOperations userOperations();, +, +}]]>, +		</programlisting>		, +		, +		<para>, +			The <methodname>isAuthorizedForUser</methodname> helps determine if the <interfacename>TwitterApi</interfacename> instance has been created with credentials to perform on behalf of a user., +			It will return true if it is capable of performing operations requiring authorization; false otherwise. 			, +		</para>, +		, +		<para>, +			The remaining six methods return sub-APIs, partitioning the Twitter service API into divisions targeting specific facets of Twitter functionality., +			These sub-APIs are defined by interfaces described in <xref linkend="table-twitter-sub-apis" />., +		</para>, +		, +		<table xml:id="table-twitter-sub-apis">, +			<title>TwitterApi's Sub-APIs</title>, +			<tgroup cols="2">, +				<colspec align="left" />, +				<colspec colnum="1" colname="col1" colwidth="2*"/>, +				<colspec colnum="2" colname="col2" colwidth="2*"/>, +				<thead>, +					<row>, +						<entry align="center">Sub-API Interface</entry>, +						<entry align="center">Description</entry>, +					</row>, +				</thead>, +				<tbody>, +					<row>, +						<entry>DirectMessageOperations</entry>, +						<entry>Reading and sending direct messages.</entry>, +					</row>, +					<row>, +						<entry>FriendOperations</entry>, +						<entry>Retrieving a user's list of friends and followers and following/unfollowing users.</entry>, +					</row>, +					<row>, +						<entry>ListOperations</entry>, +						<entry>Maintaining, subscribing to, and unsubscripting from user lists</entry>, +					</row>, +					<row>, +						<entry>SearchOperations</entry>, +						<entry>Searching tweets and viewing search trends</entry>, +					</row>, +					<row>, +						<entry>TimelineOperations</entry>, +						<entry>Reading timelines and posting tweets.</entry>, +					</row>, +					<row>, +						<entry>UserOperations</entry>, +						<entry>Retrieving user profile data.</entry>, +					</row>, +				</tbody>, +			</tgroup>, +		</table>, +		, +		<para>, +			What follows is a survey of common tasks you may perform with <interfacename>TwitterApi</interfacename> and its sub-APIs., +			For complete details on the Spring Social's entire Twitter API binding, refer to the JavaDoc., +				To get a user's Twitter profile, call <interfacename>UserOperations</interfacename>' <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitterApi.userOperations().getUserProfile();]]>, +TwitterProfile profile = twitterApi.userOperations().getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>UserOperations.getScreenName()</methodname>:, +String profileId = twitterApi.userOperations().getScreenName();]]>, +				To post a message to Twitter the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method provided by <interfacename>TimelineOperations</interfacename>:, +twitterApi.timelineOperations().updateStatus("Spring Social is awesome!")]]>, +twitterApi.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitterApi.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitterApi.timelineOperations().retweet(tweetId);]]>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/support/AbstractClientHttpRequestFactoryWrapper.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.io.IOException;, +import java.net.URI;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.util.Assert;, +, +/**, + * Abstract base class for {@link ClientHttpRequestFactory} implementations that decorate another request factory., + *, + * @author Arjen Poutsma, + * @since 3.1, + */, +abstract class AbstractClientHttpRequestFactoryWrapper implements ClientHttpRequestFactory {, +, +	private final ClientHttpRequestFactory requestFactory;, +, +	/**, +	 * Creates a {@code AbstractClientHttpRequestFactoryWrapper} wrapping the given request factory., +	 *, +	 * @param requestFactory the request factory to be wrapped, +	 */, +	protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory) {, +		Assert.notNull(requestFactory, "'requestFactory' must not be null");, +		this.requestFactory = requestFactory;, +	}, +, +	/**, +	 * {@inheritDoc}, +	 *, +	 * <p>This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)} with the, +	 * wrapped request factory provided to the {@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory), +	 * constructor}., +	 */, +	public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		return createRequest(uri, httpMethod, requestFactory);, +	}, +, +	/**, +	 * Create a new {@link ClientHttpRequest} for the specified URI and HTTP method by using the passed on request factory., +	 * <p>Called from {@link #createRequest(URI, HttpMethod)}., +	 *, +	 * @param uri the URI to create a request for, +	 * @param httpMethod the HTTP method to execute, +	 * @param requestFactory the wrapped request factory, +	 * @return the created request, +	 * @throws IOException in case of I/O errors, +	 */, +	protected abstract ClientHttpRequest createRequest(URI uri,, +													   HttpMethod httpMethod,, +													   ClientHttpRequestFactory requestFactory) throws IOException;, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/support/AbstractClientHttpRequestFactoryWrapper.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.io.IOException;, +import java.net.URI;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.util.Assert;, +, +/**, + * Abstract base class for {@link ClientHttpRequestFactory} implementations that decorate another request factory.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +		return null;]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +			Connection<?> connection = token.getConnection();]
[+++ /dev/null]
[+++ b/docs/src/info/changelog.txt, +  * Now built against Spring Framework 3.1.0.RELEASE (still compatible with Spring Framework 3.0.6), +  * Now built against Spring Security 3.1.0.RELEASE]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +import java.net.URL;, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +		webSupport.setApplicationUrl(applicationUrl);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +import java.net.URL;, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +		webSupport.setApplicationUrl(applicationUrl);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import java.net.URL;, +, +	private URL applicationUrl;, +, +	public void setApplicationUrl(URL applicationUrl) {, +		this.applicationUrl = applicationUrl;, +	}, +, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request);, +	public Connection<?> completeConnection(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl(request), null);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			requestToken = oauthOperations.fetchRequestToken(callbackUrl(request), null);				, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl(request)));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl(request), request.getParameter("scope"));, +		HttpServletRequest httpServletRequest = request.getNativeRequest(HttpServletRequest.class);, +		if(applicationUrl != null) {, +			int port  = applicationUrl.getPort();, +			return applicationUrl.getProtocol() + "://" + applicationUrl.getHost() + (port > -1 ? (":" + port) : "") + httpServletRequest.getRequestURI();, +		} else {, +			return httpServletRequest.getRequestURL().toString();, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +import java.net.URL;, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +		webSupport.setApplicationUrl(applicationUrl);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import java.net.URL;, +, +	private URL applicationUrl;, +, +	public void setApplicationUrl(URL applicationUrl) {, +		this.applicationUrl = applicationUrl;, +	}, +, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request);, +	public Connection<?> completeConnection(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl(request), null);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			requestToken = oauthOperations.fetchRequestToken(callbackUrl(request), null);				, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl(request)));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl(request), request.getParameter("scope"));, +		HttpServletRequest httpServletRequest = request.getNativeRequest(HttpServletRequest.class);, +		if(applicationUrl != null) {, +			int port  = applicationUrl.getPort();, +			return applicationUrl.getProtocol() + "://" + applicationUrl.getHost() + (port > -1 ? (":" + port) : "") + httpServletRequest.getRequestURI();, +		} else {, +			return httpServletRequest.getRequestURL().toString();, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.net.MalformedURLException;, +import java.net.URL;, +, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +		webSupport.setApplicationUrl(applicationUrl);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request);]
[+++ b/docs/src/reference/docbook/implementing.xml, +			The process of adding support for a new service provider consists of several steps:, +			A Spring Social client module is simply a standard Java project that builds a single jar artifact e.g. spring-social-twitter.jar., +			We do recommend the actual code structure follow several packaging guidelines that are described below., +					<title>Spring Social Client Modules</title>, +								<entry>The public interface that defines the API binding.</entry>, +								<entry>The implementation of the API binding.</entry>, +				You can see this recommended structure in action by reviewing one of the other client modules such as spring-social-twitter:, +				API developers are free to implement their Java API binding with whatever REST/HTTP client they see fit., +				That said, Spring Social's existing API bindings such as spring-social-twitter all use Spring Framework's RestTemplate in conjunction with the Jackson JSON ObjectMapper and Apache HttpComponents HTTP client., +				Apache HttpComponents has proven to be the most robust HTTP client (if it is not available on the classpath Spring Social will fallback to standard J2SE facilities, however)., +				As discussed in the previous section, we recommend keeping implementation types separate from the public API types., +				We also recommend keeping internal implementation details package-private., +				Once the REST client has been configured as shown above, you simply use it to implement the various API operations., +				<code>spring-social-twitter</code> and <code>spring-social-facebook</code> provide particularly good references., +				As part of the spring-social-test module, Spring Social includes a framework for unit testing API bindings:, +				Then, for each test case, record expectations about how the server should be invoked and answer what it should respond with:, +public void getUserProfile() {, +    assertEquals("kdonald", profile.getScreenName());, +    "screen_name":"kdonald", +			<para>, +				For complete test examples, consult the existing API bindings included in Spring Social., +				<code>spring-social-twitter</code> and <code>spring-social-facebook</code> provide particularly good references., +			</para>, +			<para>, +				If you are adding support for a popular service provider, chances are a Java binding to the provider's API may already exist., +				For example, the Twitter4j library has been around for awhile and provides a complete binding to Twitter's API., +				Instead of developing your own binding, you may simply wish to integrate what already exists., +				Spring Social's connect framework has been carefully designed to support this scenario., +			</para>, +			<para>, +				To integrate an existing API binding, simply note the binding's primary API interface and implementation., +				For example, in Twitter4j the main API interface is named "Twitter" and instances are constructed by a TwitterFactory., +				You can always construct such an API instance directly, and you'll see in the following sections how to expose an instance as part of a ServiceProviderConnection., +			</para>, +	<section id="service-providers-implementing-serviceprovider">, +		<title>Creating a ServiceProvider implementation</title>, +		<section id="service-providers-implementing-serviceprovider-oauth2">, +			<title>OAuth2</title>, +				Finally, implement getServiceApi(String) to return a new API binding instance., +        super(new OAuth2Template(clientId, clientSecret, "https://graph.facebook.com/oauth/authorize", "https://graph.facebook.com/oauth/access_token"));, +		<section id="service-providers-implementing-serviceprovider-oauth1">, +			<title>OAuth1</title>, +				Finally, implement getServiceApi(String, String) to return a new API binding instance., +		</section>, +	</section>, +	<section id="service-providers-implementing-serviceapiadapter">, +		<title>Creating a ServiceApiAdapter</title>, +	</section>, +	<section id="service-providers-implementing-serviceproviderconnectionfactory">, +		<title>Creating a ServiceProviderConnectionFactory</title>]
[+++ b/build.gradle, +      testCompile "org.springframework:spring-jdbc:$springVersion", +++ b/build.gradle, +      testCompile "org.springframework:spring-jdbc:$springVersion", +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeConnectionFactory.java, +	private String appId;, +	, +	private String appSecret;, +, +		this.appId = appId;, +		this.appSecret = appSecret;, +	public String getAppId() {, +		return appId;, +	}, +	public String getAppSecret() {, +		return appSecret;, +	}, +	, +	public static final class FakeServiceProvider extends AbstractOAuth2ServiceProvider<Fake> {, +++ b/build.gradle, +      testCompile "org.springframework:spring-jdbc:$springVersion", +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeConnectionFactory.java, +	private String appId;, +	, +	private String appSecret;, +, +		this.appId = appId;, +		this.appSecret = appSecret;, +	public String getAppId() {, +		return appId;, +	}, +	public String getAppSecret() {, +		return appSecret;, +	}, +	, +	public static final class FakeServiceProvider extends AbstractOAuth2ServiceProvider<Fake> {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.context.annotation.PropertySource;, +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +@PropertySource("classpath:/org/springframework/social/config/fake.properties"), +@EnableFake(appId="${fake.appId}", appSecret="${fake.appSecret}"), +	@Bean, +	public PropertySourcesPlaceholderConfigurer propertyPlaceholder() {, +		return new PropertySourcesPlaceholderConfigurer();, +	}, +	, +++ b/build.gradle, +      testCompile "org.springframework:spring-jdbc:$springVersion", +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeConnectionFactory.java, +	private String appId;, +	, +	private String appSecret;, +, +		this.appId = appId;, +		this.appSecret = appSecret;, +	public String getAppId() {, +		return appId;, +	}, +	public String getAppSecret() {, +		return appSecret;, +	}, +	, +	public static final class FakeServiceProvider extends AbstractOAuth2ServiceProvider<Fake> {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.context.annotation.PropertySource;, +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +@PropertySource("classpath:/org/springframework/social/config/fake.properties"), +@EnableFake(appId="${fake.appId}", appSecret="${fake.appSecret}"), +	@Bean, +	public PropertySourcesPlaceholderConfigurer propertyPlaceholder() {, +		return new PropertySourcesPlaceholderConfigurer();, +	}, +	, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfigAnnotationTest.java, +import org.springframework.social.config.FakeConnectionFactory;, +		FakeConnectionFactory fakeConnectionFactory = (FakeConnectionFactory) cfl.getConnectionFactory(Fake.class);, +		assertNotNull(fakeConnectionFactory);, +		assertEquals("fakeAppId", fakeConnectionFactory.getAppId());		, +		assertEquals("fakeAppSecret", fakeConnectionFactory.getAppSecret());, +++ b/build.gradle, +      testCompile "org.springframework:spring-jdbc:$springVersion", +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeConnectionFactory.java, +	private String appId;, +	, +	private String appSecret;, +, +		this.appId = appId;, +		this.appSecret = appSecret;, +	public String getAppId() {, +		return appId;, +	}, +	public String getAppSecret() {, +		return appSecret;, +	}, +	, +	public static final class FakeServiceProvider extends AbstractOAuth2ServiceProvider<Fake> {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.context.annotation.PropertySource;, +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +@PropertySource("classpath:/org/springframework/social/config/fake.properties")]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	// manually parse the response instead of using a message converter., +	// The response content type could by text/plain, text/html, etc...and may not trigger the form-encoded message converter]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +import java.util.List;, +, +import org.springframework.util.MultiValueMap;, + * <p>, + * Many of the methods contained in this interface require an access token from, + * Facebook. When a method's description speaks of the "current user", it is, + * referring to the user for whom the access token has been issued., + * </p>, +public interface FacebookApi {, +	/**, +	 * Retrieves the user's Facebook profile ID., +	 * @return the user's Facebook profile ID., +	 */, +	String getProfileId();, +	/**, +	 * Retrieve the current user's Facebook profile information., +	 * @return the user's profile information., +	 */, +	FacebookProfile getUserProfile();, +	/**, +	 * Retrieves the Facebook profile information for a given user ID., +	 * , +	 * @param facebookId, +	 *            the Facebook ID to retrieve profile data for., +	 * @return the user's profile information., +	 */, +	FacebookProfile getUserProfile(String facebookId);, +	/**, +	 * Retrieve the URL to the user's Facebook profile., +	 * , +	 * @return the URL to the user's Facebook profile., +	 */, +	String getProfileUrl();, +	/**, +	 * Get a list of the user's friends., +	 * @return a list of <code>String</code>s where each entry is the Facebook ID of one of the user's friends., +	 */, +	List<String> getFriendIds();, +	/**, +	 * Posts a message to the current user's wall., +	 * @param status The message to post, +	 */, +	void updateStatus(String status);, +	/**, +	 * Posts a message to the current user's wall along with a link., +	 * @param message The message to post, +	 * @param link A link to be included in the status update, +	 */, +	void updateStatus(String message, FacebookLink link);, +	/**, +	 * Low-level publish-to-Facebook method for publishing any type of object supported by Facebook's API., +	 * @param object The ID of the object to publish to., +	 * @param connection The connection to be published., +	 * @param data The data to be published., +	 */, +	void publish(String object, String connection, MultiValueMap<String, String> data);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +import java.util.List;, +, +import org.springframework.util.MultiValueMap;, + * <p>, + * Many of the methods contained in this interface require an access token from, + * Facebook. When a method's description speaks of the "current user", it is, + * referring to the user for whom the access token has been issued., + * </p>, +public interface FacebookApi {, +	/**, +	 * Retrieves the user's Facebook profile ID., +	 * @return the user's Facebook profile ID., +	 */, +	String getProfileId();, +	/**, +	 * Retrieve the current user's Facebook profile information., +	 * @return the user's profile information., +	 */, +	FacebookProfile getUserProfile();, +	/**, +	 * Retrieves the Facebook profile information for a given user ID., +	 * , +	 * @param facebookId, +	 *            the Facebook ID to retrieve profile data for., +	 * @return the user's profile information., +	 */, +	FacebookProfile getUserProfile(String facebookId);, +	/**, +	 * Retrieve the URL to the user's Facebook profile., +	 * ]
[+++ b/build.gradle, +    h2Version = '1.3.166', +    httpComponentsVersion = '4.1.3', +    jacksonVersion = '1.9.6', +    springVersion = '3.1.1.RELEASE', +++ b/build.gradle, +    h2Version = '1.3.166', +    httpComponentsVersion = '4.1.3', +    jacksonVersion = '1.9.6', +    springVersion = '3.1.1.RELEASE', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/build.gradle, +    h2Version = '1.3.166', +    httpComponentsVersion = '4.1.3', +    jacksonVersion = '1.9.6', +    springVersion = '3.1.1.RELEASE', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/support/BufferingClientHttpResponse.java, +	public int getRawStatusCode() throws IOException {, +		return response.getRawStatusCode();, +	}, +	, +++ b/build.gradle, +    h2Version = '1.3.166', +    httpComponentsVersion = '4.1.3', +    jacksonVersion = '1.9.6', +    springVersion = '3.1.1.RELEASE', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/support/BufferingClientHttpResponse.java, +	public int getRawStatusCode() throws IOException {, +		return response.getRawStatusCode();, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpResponse.java, +	public int getRawStatusCode() throws IOException {, +		return httpResponse.getStatusLine().getStatusCode();, +	}, +	]
[+++ b/build.gradle, +                srcDirs = ['src/main/java','src/main/resources'], +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$springSocialVersion") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$springSocialVersion") { transitive = false }, +      testCompile "com.h2database:h2:$h2Version", +    }, +}, +, +++ b/build.gradle, +                srcDirs = ['src/main/java','src/main/resources'], +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$springSocialVersion") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$springSocialVersion") { transitive = false }, +      testCompile "com.h2database:h2:$h2Version", +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-config', +++ b/build.gradle, +                srcDirs = ['src/main/java','src/main/resources'], +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$springSocialVersion") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$springSocialVersion") { transitive = false }, +      testCompile "com.h2database:h2:$h2Version", +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-config', +++ b/spring-social-config/.springBeans, +<?xml version="1.0" encoding="UTF-8"?>, +<beansProjectDescription>, +	<version>1</version>, +	<pluginVersion><![CDATA[2.8.1.201111220115-RELEASE]]></pluginVersion>, +	<configSuffixes>, +		<configSuffix><![CDATA[xml]]></configSuffix>, +	</configSuffixes>, +	<enableImports><![CDATA[false]]></enableImports>, +	<configs>, +		<config>src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml</config>, +	</configs>, +	<configSets>, +	</configSets>, +</beansProjectDescription>, +++ b/build.gradle, +                srcDirs = ['src/main/java','src/main/resources'], +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$springSocialVersion") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$springSocialVersion") { transitive = false }, +      testCompile "com.h2database:h2:$h2Version", +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-config', +++ b/spring-social-config/.springBeans, +<?xml version="1.0" encoding="UTF-8"?>, +<beansProjectDescription>, +	<version>1</version>, +	<pluginVersion><![CDATA[2.8.1.201111220115-RELEASE]]></pluginVersion>, +	<configSuffixes>, +		<configSuffix><![CDATA[xml]]></configSuffix>, +	</configSuffixes>, +	<enableImports><![CDATA[false]]></enableImports>, +	<configs>, +		<config>src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml</config>, +	</configs>, +	<configSets>, +	</configSets>, +</beansProjectDescription>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialConfigBeanDefinitionParser.java, +package org.springframework.social.config.xml;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.social.connect.ConnectionFactory;]
[+++ b/gradlew, +, +RETCODE=$?, +, +if [ "$RETCODE" == "1" ] ; then, +       echo "Gradle classes not found -- did you forget to clone --recursive when checking out this repository? See README for more details", +fi, +++ b/gradlew, +, +RETCODE=$?, +, +if [ "$RETCODE" == "1" ] ; then, +       echo "Gradle classes not found -- did you forget to clone --recursive when checking out this repository? See README for more details", +fi, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		return new RedirectView("/connect/" + providerId, true);]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(@SuppressWarnings("deprecation") GrantType grantType, OAuth2Parameters parameters) {, +	public String buildAuthenticateUrl(@SuppressWarnings("deprecation") GrantType grantType, OAuth2Parameters parameters) {, +	@SuppressWarnings("deprecation"), +	@SuppressWarnings("deprecation") , +	@SuppressWarnings("deprecation") , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(@SuppressWarnings("deprecation") GrantType grantType, OAuth2Parameters parameters) {, +	public String buildAuthenticateUrl(@SuppressWarnings("deprecation") GrantType grantType, OAuth2Parameters parameters) {, +	@SuppressWarnings("deprecation"), +	@SuppressWarnings("deprecation") , +	@SuppressWarnings("deprecation") , +++ b/spring-social-core/src/main/java/org/springframework/social/support/FormMapHttpMessageConverter.java, +		@SuppressWarnings("unchecked")]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private SocialAuthenticationServiceLocator authServiceLocator;, +		Assert.notNull(getAuthServiceLocator(), "authServiceLocator must be configured");, +		Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +		, +		if (authProviders.isEmpty()) {, +			SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(explicitAuthProviderId);, +			if (authService.getAuthenticationMode() == AuthenticationMode.IMPLICIT) {, +			for (final String authProvider : authProviders) {, +, +				SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(authProvider);, +	public SocialAuthenticationServiceLocator getAuthServiceLocator() {, +		return authServiceLocator;, +	}, +, +	public void setAuthServiceLocator(SocialAuthenticationServiceLocator authServiceLocator) {, +		this.authServiceLocator = authServiceLocator;, +	}, +	, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private SocialAuthenticationServiceLocator authServiceLocator;, +		Assert.notNull(getAuthServiceLocator(), "authServiceLocator must be configured");, +		Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +		, +		if (authProviders.isEmpty()) {, +			SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(explicitAuthProviderId);, +			if (authService.getAuthenticationMode() == AuthenticationMode.IMPLICIT) {, +			for (final String authProvider : authProviders) {, +, +				SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(authProvider);, +	public SocialAuthenticationServiceLocator getAuthServiceLocator() {, +		return authServiceLocator;, +	}, +, +	public void setAuthServiceLocator(SocialAuthenticationServiceLocator authServiceLocator) {, +		this.authServiceLocator = authServiceLocator;, +	}, +	, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationServiceLocator.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.social.security;, +, +import java.util.Set;, +, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.security.provider.SocialAuthenticationService;, +, +public interface SocialAuthenticationServiceLocator extends ConnectionFactoryLocator {, +, +	/**, +	 * Lookup a {@link SocialAuthenticationService} by providerId; for example,, +	 * "facebook"., +	 */, +	SocialAuthenticationService<?> getAuthenticationService(String providerId);, +, +	/**, +	 * Returns the set of providerIds for which a, +	 * {@link SocialAuthenticationService} is registered; for example, <code>{, +	 * "twitter", "facebook", "foursquare" }</code> Elements in this set can be, +	 * passed to {@link #getAuthenticationService(String)} to fetch a specific, +	 * authentication service., +	 */, +	Set<String> registeredAuthenticationProviderIds();, +}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private SocialAuthenticationServiceLocator authServiceLocator;, +		Assert.notNull(getAuthServiceLocator(), "authServiceLocator must be configured");, +		Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +		, +		if (authProviders.isEmpty()) {, +			SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(explicitAuthProviderId);, +			if (authService.getAuthenticationMode() == AuthenticationMode.IMPLICIT) {, +			for (final String authProvider : authProviders) {, +, +				SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(authProvider);, +	public SocialAuthenticationServiceLocator getAuthServiceLocator() {, +		return authServiceLocator;, +	}, +, +	public void setAuthServiceLocator(SocialAuthenticationServiceLocator authServiceLocator) {, +		this.authServiceLocator = authServiceLocator;, +	}, +	, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationServiceLocator.java, +/*]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link ServiceProviderConnection} model and a specific provider API model., + * @author Keith Donald, + * @param <S> the service API, + */, +public interface ServiceApiAdapter<S> {, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#test()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#getUser()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return the uniform service provider user model, +	 */, +	ServiceProviderUser getUser(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#updateStatus(String)} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @param message the status message, +	 */, +	void updateStatus(S serviceApi, String message);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link ServiceProviderConnection} model and a specific provider API model., + * @author Keith Donald, + * @param <S> the service API, + */, +public interface ServiceApiAdapter<S> {, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#test()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#getUser()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return the uniform service provider user model, +	 */, +	ServiceProviderUser getUser(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#updateStatus(String)} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @param message the status message, +	 */, +	void updateStatus(S serviceApi, String message);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, +	}, +, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., +	 */, +	protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +		restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, +	private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, +		ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, +	}, +, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., +	 */, +	protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +		restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, +	private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, +		ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * Defaults to use the authorization URL as the authentication URL, to send client credentials via HTTP Basic, and to send the access token, +	 * in the Authorization header for API requests., +	 * @param authorizeUrl The API's OAuth 2 authorization URL. Will also be used as the default authentication URL., +		this(providerId, appId, appSecret, authorizeUrl, authorizeUrl, accessTokenUrl, false, TokenStrategy.AUTHORIZATION_HEADER, apiAdapter);, +	 * @param sendClientCredentialsAsParameters If true, send client credentials as query parameter. If false, use HTTP Basic., +			boolean sendClientCredentialsAsParameters,, +			TokenStrategy tokenStrategy,, +		super(providerId, new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, +	}, +, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., +	 */, +	protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +		restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, +	private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, +		ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * Defaults to use the authorization URL as the authentication URL, to send client credentials via HTTP Basic, and to send the access token, +	 * in the Authorization header for API requests., +	 * @param authorizeUrl The API's OAuth 2 authorization URL. Will also be used as the default authentication URL., +		this(providerId, appId, appSecret, authorizeUrl, authorizeUrl, accessTokenUrl, false, TokenStrategy.AUTHORIZATION_HEADER, apiAdapter);, +	 * @param sendClientCredentialsAsParameters If true, send client credentials as query parameter. If false, use HTTP Basic., +			boolean sendClientCredentialsAsParameters,, +			TokenStrategy tokenStrategy,, +		super(providerId, new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, +	private TokenStrategy tokenStrategy;, +, +	public GenericOAuth2ServiceProvider(String appId, String appSecret, String authorizeUrl, String authenticateUrl, String accessTokenUrl, boolean useParametersForClientCredentials, TokenStrategy tokenStrategy) {, +		this.tokenStrategy = tokenStrategy;, +		return new GenericApiBinding(accessToken, tokenStrategy).getRestTemplate();, +		public GenericApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +			super(accessToken, tokenStrategy);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, +	}, +, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., +	 */, +	protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +		restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, +	private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, +		ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * Defaults to use the authorization URL as the authentication URL, to send client credentials via HTTP Basic, and to send the access token, +	 * in the Authorization header for API requests., +	 * @param authorizeUrl The API's OAuth 2 authorization URL. Will also be used as the default authentication URL., +		this(providerId, appId, appSecret, authorizeUrl, authorizeUrl, accessTokenUrl, false, TokenStrategy.AUTHORIZATION_HEADER, apiAdapter);, +	 * @param sendClientCredentialsAsParameters If true, send client credentials as query parameter. If false, use HTTP Basic., +			boolean sendClientCredentialsAsParameters,, +			TokenStrategy tokenStrategy,, +		super(providerId, new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, +	private TokenStrategy tokenStrategy;, +, +	public GenericOAuth2ServiceProvider(String appId, String appSecret, String authorizeUrl, String authenticateUrl, String accessTokenUrl, boolean useParametersForClientCredentials, TokenStrategy tokenStrategy) {, +		this.tokenStrategy = tokenStrategy;, +		return new GenericApiBinding(accessToken, tokenStrategy).getRestTemplate();, +		public GenericApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +			super(accessToken, tokenStrategy);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2TokenParameterRequestInterceptor.java]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.Collection;, +	public static boolean removeSignInAttempt(HttpSession session, ConnectionKey key) {, +		return session != null ? SignInAttempts.remove(session, key) : false;, +	}, +	, +	public static boolean removeSignInAttempt(HttpSession session, ConnectionData data) {, +		return removeSignInAttempt(session, SignInAttempts.key(data));, +	}, +	, +		private static Collection<ConnectionData> get(HttpSession session) {, +		private static boolean remove(HttpSession session, ConnectionKey key) {, +			SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +			return signInAttempts != null ? signInAttempts.removeAttempt(key) : false;, +		}, +		, +		private boolean removeAttempt(ConnectionKey key) {, +			return attempts.remove(key) != null;, +		private Collection<ConnectionData> getAttempts() {, +			return attempts.values();, +		}, +		, +		private static ConnectionKey key(ConnectionData data) {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.Collection;, +	public static boolean removeSignInAttempt(HttpSession session, ConnectionKey key) {, +		return session != null ? SignInAttempts.remove(session, key) : false;, +	}, +	, +	public static boolean removeSignInAttempt(HttpSession session, ConnectionData data) {, +		return removeSignInAttempt(session, SignInAttempts.key(data));, +	}, +	, +		private static Collection<ConnectionData> get(HttpSession session) {, +		private static boolean remove(HttpSession session, ConnectionKey key) {, +			SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +			return signInAttempts != null ? signInAttempts.removeAttempt(key) : false;, +		}, +		, +		private boolean removeAttempt(ConnectionKey key) {, +			return attempts.remove(key) != null;, +		private Collection<ConnectionData> getAttempts() {, +			return attempts.values();, +		}, +		, +		private static ConnectionKey key(ConnectionData data) {, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +		SocialAuthenticationFilter.removeSignInAttempt(session, SocialAuthenticationFilter.getSignInAttempts(session).get(0));, +		assertEquals(2, SocialAuthenticationFilter.getSignInAttempts(session).size());]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +import org.springframework.social.facebook.graph.GraphApi;, +	PlacesOperations checkinOperations();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +import org.springframework.social.facebook.graph.GraphApi;, +	PlacesOperations checkinOperations();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookModule.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import org.codehaus.jackson.Version;, +import org.codehaus.jackson.map.module.SimpleModule;, +import org.springframework.social.facebook.comment.Comment;, +import org.springframework.social.facebook.comment.CommentMixin;, +import org.springframework.social.facebook.event.Event;, +import org.springframework.social.facebook.event.EventInvitee;, +import org.springframework.social.facebook.event.EventInviteeMixin;, +import org.springframework.social.facebook.event.EventMixin;, +import org.springframework.social.facebook.event.Invitation;, +import org.springframework.social.facebook.event.InvitationMixin;, +import org.springframework.social.facebook.feed.CheckinPost;, +import org.springframework.social.facebook.feed.CheckinPostMixin;, +import org.springframework.social.facebook.feed.LinkPost;, +import org.springframework.social.facebook.feed.LinkPostMixin;, +import org.springframework.social.facebook.feed.NotePost;, +import org.springframework.social.facebook.feed.NotePostMixin;, +import org.springframework.social.facebook.feed.PhotoPost;, +import org.springframework.social.facebook.feed.PhotoPostMixin;, +import org.springframework.social.facebook.feed.Post;, +import org.springframework.social.facebook.feed.PostMixin;, +import org.springframework.social.facebook.feed.StatusPost;, +import org.springframework.social.facebook.feed.StatusPostMixin;, +import org.springframework.social.facebook.feed.VideoPost;, +import org.springframework.social.facebook.feed.VideoPostMixin;, +import org.springframework.social.facebook.group.Group;, +import org.springframework.social.facebook.group.GroupMemberReference;, +import org.springframework.social.facebook.group.GroupMemberReferenceMixin;, +import org.springframework.social.facebook.group.GroupMixin;, +import org.springframework.social.facebook.like.UserLike;, +import org.springframework.social.facebook.like.UserLikeMixin;, +import org.springframework.social.facebook.media.Album;, +import org.springframework.social.facebook.media.AlbumMixin;, +import org.springframework.social.facebook.media.Photo;, +import org.springframework.social.facebook.media.PhotoMixin;, +import org.springframework.social.facebook.media.Video;, +import org.springframework.social.facebook.media.VideoMixin;, +import org.springframework.social.facebook.media.Photo.Image;, +import org.springframework.social.facebook.media.PhotoMixin.ImageMixin;, +import org.springframework.social.facebook.places.Checkin;, +import org.springframework.social.facebook.places.CheckinMixin;, +import org.springframework.social.facebook.places.Location;, +import org.springframework.social.facebook.places.LocationMixin;, +import org.springframework.social.facebook.places.Place;, +import org.springframework.social.facebook.places.PlaceMixin;, +import org.springframework.social.facebook.shared.Reference;, +import org.springframework.social.facebook.shared.ReferenceMixin;, +import org.springframework.social.facebook.shared.Tag;, +import org.springframework.social.facebook.shared.TagMixin;, +import org.springframework.social.facebook.user.EducationEntry;, +import org.springframework.social.facebook.user.EducationEntryMixin;, +import org.springframework.social.facebook.user.FacebookProfile;, +import org.springframework.social.facebook.user.FacebookProfileMixin;, +import org.springframework.social.facebook.user.WorkEntry;, +import org.springframework.social.facebook.user.WorkEntryMixin;, +, +/**, + * Jackson module for setting up mixin annotations on Facebook model types. This enables the use of Jackson annotations without, + * directly annotating the model classes themselves., + * @author Craig Walls, + */, +public class FacebookModule extends SimpleModule {, +, +	public FacebookModule() {, +		super("FacebookModule", new Version(1, 0, 0, null));, +	}, +	, +	@Override, +	public void setupModule(SetupContext context) {, +		context.setMixInAnnotations(FacebookProfile.class, FacebookProfileMixin.class);, +		context.setMixInAnnotations(WorkEntry.class, WorkEntryMixin.class);, +		context.setMixInAnnotations(EducationEntry.class, EducationEntryMixin.class);, +		context.setMixInAnnotations(Reference.class, ReferenceMixin.class);, +		context.setMixInAnnotations(GroupMemberReference.class, GroupMemberReferenceMixin.class);, +		context.setMixInAnnotations(Album.class, AlbumMixin.class);, +		context.setMixInAnnotations(UserLike.class, UserLikeMixin.class);, +		context.setMixInAnnotations(Group.class, GroupMixin.class);]
[+++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.social.security;, +, +import org.springframework.social.SocialException;, +, +@SuppressWarnings("serial"), +public class SocialAuthenticationException extends SocialException {, +, +	public SocialAuthenticationException() {, +		super("");, +	}, +, +	public SocialAuthenticationException(String message) {, +		super(message);, +	}, +, +	public SocialAuthenticationException(Throwable cause) {, +		super("", cause);, +	}, +, +	public SocialAuthenticationException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java]
[+++ b/pom.xml, +	<artifactId>spring-social-dist</artifactId>, +	<packaging>pom</packaging>, +	<modules>, +		<module>spring-social-parent</module>, +		<module>spring-social-core</module>, +    </modules>, +							<javadoc:aggregate>true</javadoc:aggregate>, +							<header>Spring Social</header>, +									<title>Spring Social Core</title>, +									<packages>org.springframework.social:org.springframework.spring-social-core.*</packages>, +	<repositories>, +		<!-- For testing against latest Spring snapshots -->, +		<repository>, +			<id>org.springframework.maven.snapshot</id>, +			<name>Spring Maven Snapshot Repository</name>, +			<url>http://maven.springframework.org/snapshot</url>, +			<releases><enabled>false</enabled></releases>			, +			<snapshots><enabled>true</enabled></snapshots>, +		</repository>, +		<!-- For Spring releases -->, +		<repository>, +			<id>org.springframework.maven.release</id>, +			<name>Spring Maven Release Repository</name>, +			<url>http://maven.springframework.org/release</url>, +			<snapshots><enabled>false</enabled></snapshots>			, +		</repository>, +		<!-- For developing against latest Spring milestones -->, +		<repository>, +			<id>org.springframework.maven.milestone</id>, +			<name>Spring Maven Milestone Repository</name>, +			<url>http://maven.springframework.org/milestone</url>, +			<snapshots><enabled>false</enabled></snapshots>		, +		</repository>, +		<repository>, +			<!-- necessary for org.springframework.build.aws.maven dependency -->, +			<id>repository.source.maven.release</id>, +			<name>SpringSource Maven Release Repository</name>, +			<url>http://repository.springsource.com/maven/bundles/release</url>, +		</repository>, +		<!-- For resolving Scribe dependency; temporary awaiting its arrival in central -->, +		<repository>, +			<id>org.springframework.maven.external</id>, +			<name>Spring Maven External Libraries Repository</name>, +			<url>http://maven.springframework.org/external</url>, +			<snapshots><enabled>false</enabled></snapshots>			, +		</repository>	, +		<repository>, +			<id>self.provided</id>, +			<name>Self-Provided Dependencies</name>, +			<url>file://${project.basedir}/lib</url>, +		</repository>, +	</repositories>, +	, +++ b/pom.xml, +	<artifactId>spring-social-dist</artifactId>, +	<packaging>pom</packaging>, +	<modules>, +		<module>spring-social-parent</module>, +		<module>spring-social-core</module>, +    </modules>, +							<javadoc:aggregate>true</javadoc:aggregate>, +							<header>Spring Social</header>, +									<title>Spring Social Core</title>, +									<packages>org.springframework.social:org.springframework.spring-social-core.*</packages>, +	<repositories>, +		<!-- For testing against latest Spring snapshots -->, +		<repository>, +			<id>org.springframework.maven.snapshot</id>, +			<name>Spring Maven Snapshot Repository</name>, +			<url>http://maven.springframework.org/snapshot</url>, +			<releases><enabled>false</enabled></releases>			, +			<snapshots><enabled>true</enabled></snapshots>, +		</repository>, +		<!-- For Spring releases -->, +		<repository>, +			<id>org.springframework.maven.release</id>, +			<name>Spring Maven Release Repository</name>, +			<url>http://maven.springframework.org/release</url>, +			<snapshots><enabled>false</enabled></snapshots>			, +		</repository>, +		<!-- For developing against latest Spring milestones -->, +		<repository>, +			<id>org.springframework.maven.milestone</id>, +			<name>Spring Maven Milestone Repository</name>, +			<url>http://maven.springframework.org/milestone</url>, +			<snapshots><enabled>false</enabled></snapshots>		, +		</repository>, +		<repository>, +			<!-- necessary for org.springframework.build.aws.maven dependency -->, +			<id>repository.source.maven.release</id>, +			<name>SpringSource Maven Release Repository</name>, +			<url>http://repository.springsource.com/maven/bundles/release</url>, +		</repository>, +		<!-- For resolving Scribe dependency; temporary awaiting its arrival in central -->, +		<repository>, +			<id>org.springframework.maven.external</id>, +			<name>Spring Maven External Libraries Repository</name>, +			<url>http://maven.springframework.org/external</url>, +			<snapshots><enabled>false</enabled></snapshots>			]
[+++ b/docs/src/reference/docbook/implementing.xml, +					<para>Develop or integrate a Java binding to the provider's API e.g. <code>TwitterApi</code>.</para>, +					<para>Create a ServiceProvider model that allows users to authorize with the remote provider and obtain authorized  API instances e.g. <code>TwitterServiceProvider</code>.</para>, +					<para>Create an ApiAdapter that maps the provider's native API onto the uniform Connection model e.g. <code>TwitterApiAdapter</code>.</para>, +					<para>Finally, create a ConnectionFactory that wraps the other artifacts up and provides a simple interface for establishing connections e.g. <code>TwitterConnectionFactory</code>.</para>, +				You can always construct such an API instance directly, and you'll see in the following sections how to expose an instance as part of a Connection., +		<title>Creating a ServiceProvider model</title>, +			Spring Social provides the ServiceProvider&lt;A&gt; abstraction to handle this "authorization dance"., +			The abstraction also acts as a factory for native API (A) instances., +			After you've done this, your implementation can be used to conduct the OAuth2 dance and obtain an authorized API instance., +			This is typically done in the context of a ConnectionFactory as part of establishing a new connection to the provider., +				Parameterize &lt;A&gt; to be the Java binding to the ServiceProvider's's API., +				Finally, implement getApi(String) to return a new API instance., +    public FacebookApi geteApi(String accessToken) {, +				In getApi(String), you should construct your API implementation, passing it the access token needed to make authorized requests for protected resources., +				Parameterize &lt;A&gt; to be the Java binding to the ServiceProvider's API., +				Finally, implement getApi(String, String) to return a new API instance., +    public TwitterApi getApi(String accessToken, String secret) {, +				In getApi(String, String), you should construct your API implementation, passing it the four tokens needed to make authorized requests for protected resources., +		<title>Creating an ApiAdapter</title>, +			As discussed in the previous chapter, one of the roles of a Connection is to provide a common abstraction for a linked user account that is applied across all service providers., +			The role of the ApiAdapter is to map a provider's native API interface onto this uniform Connection model., +public interface ApiAdapter<A> {, +    boolean test(A api);, +    void setConnectionValues(A api, ConnectionValues values);, +    UserProfile fetchUserProfile(A api);, +    void updateStatus(A api, String message);, +				Consider <code>org.springframework.social.twitter.connect.TwitterApiAdapter</code> as an example implementation:, +public class TwitterApiAdapter implements ApiAdapter<TwitterApi> {, +    public boolean test(TwitterApi api) {, +            api.userOperations().getUserProfile();, +    public void setConnectionValues(TwitterApi api, ConnectionValues values) {, +        TwitterProfile profile = api.userOperations().getUserProfile();, +    public UserProfile fetchUserProfile(TwitterApi api) {, +        TwitterProfile profile = api.userOperations().getUserProfile();, +        return new UserProfileBuilder().setName(profile.getName()).setUsername(profile.getScreenName()).build();, +    public void updateStatus(TwitterApi api, String message) {, +        api.timelineOperations().updateStatus(message);	, +			fetchUserProfile(...) maps a TwitterProfile onto the normalized UserProfile model., +			Consult the JavaDoc for ApiAdapter and Connection for more information and implementation guidance., +			We also recommend reviewing the other ApiAdapter implementations for additional examples., +		<title>Creating a ConnectionFactory</title>, +			By now, you should have a API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;S&gt; implementation for mapping onto the uniform Connection model., +			The last step in adding support for a new service provider is to create a ConnectionFactory that wraps up these artifacts and provides a simple interface for establishing Connections., +			Like a ServiceProvider&lt;A&gt;, a ConnectionFactory specialization exists for each authorization protocol., +			For example, if you are adding support for a OAuth2-based provider, you would extend from OAuth2ConnectionFactory., +				Create a subclass of OAuth2ConnectionFactory&lt;S&gt; named {ProviderId}ConnectionFactory and parameterize A to be the Java binding to the service provider's API., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}ApiAdapter instance. 			, +				See <code>org.springframework.social.facebook.connect.FacebookConnectionFactory</code> as an example OAuth2ConnectionFactory:, +public class FacebookConnectionFactory extends OAuth2ConnectionFactory<FacebookApi> {, +    public FacebookConnectionFactory(String clientId, String clientSecret) {, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookApiAdapter());, +				Create a subclass of OAuth1ConnectionFactory&lt;S&gt; named {ProviderId}ConnectionFactory and parameterize A to be the Java binding to the service provider's API., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the consumerKey/consumerSecret, and a new {Provider}ApiAdapter instance. 			, +				See <code>org.springframework.social.twitter.connect.TwitterConnectionFactory</code> as an example OAuth1ConnectionFactory:, +public class TwitterConnectionFactory extends OAuth1ConnectionFactory<FacebookApi> {, +    public TwitterConnectionFactory(String consumerKey, String consumerSecret) {, +        super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterApiAdapter());, +				Consult the source and JavaDoc API for ConnectionFactory and its subclasses more information, examples, and advanced customization options.]
[+++ b/.gitignore, +**/src/test/java/exploration, +++ b/.gitignore, +**/src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.6', +    }, +}, +, +project('spring-social-connect') {, +    description = 'Spring Social Connect', +    dependencies {, +        compile project(':spring-social-core'), +        compile project(':spring-social-facebook') { optional = true }, +        compile project(':spring-social-linkedin') { optional = true }, +        compile project(':spring-social-tripit') { optional = true }, +        compile project(':spring-social-twitter') { optional = true }, +    }, +}, +, +project('spring-social-facebook') {, +    description = 'Spring Social Facebook', +    dependencies {, +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +project('spring-social-linkedin') {, +    description = 'Spring Social LinkedIn', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile project(':spring-social-core'), +    }, +}, +, +project('spring-social-tripit') {, +    description = 'Spring Social TripIt', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +project('spring-social-twitter') {, +    description = 'Spring Social Twitter', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +, +++ b/.gitignore, +**/src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.6', +    }, +}, +, +project('spring-social-connect') {, +    description = 'Spring Social Connect', +    dependencies {, +        compile project(':spring-social-core'), +        compile project(':spring-social-facebook') { optional = true }, +        compile project(':spring-social-linkedin') { optional = true }, +        compile project(':spring-social-tripit') { optional = true }, +        compile project(':spring-social-twitter') { optional = true }, +    }, +}, +, +project('spring-social-facebook') {, +    description = 'Spring Social Facebook', +    dependencies {, +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +project('spring-social-linkedin') {, +    description = 'Spring Social LinkedIn', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }]
[+++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		addTextToMapMessageConverter();, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("code", authorizationCode);, +		requestParameters.set("redirect_uri", redirectUri);, +		requestParameters.set("grant_type", "authorization_code");, +		Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	, +	// private helpers, +	// TODO : Can probably tweak RestTemplate's message converters to deal with this better., +	private String valueOf(Object object) {, +		if (object == null) {, +			return null;, +		} else if (object instanceof List) {, +			List list = (List) object;, +			if (list.size() > 0) {, +				return String.valueOf(list.get(0));, +			}, +			return null;, +		}, +		return String.valueOf(object);, +	}, +, +	/*, +	 * Facebook returns form-encoded results with a content type of "text/plain". The "text/plain" content type prevents, +	 * any of the default encoders from being able to parse the results, even though FormHttpMessageConverter is, +	 * perfectly capable of doing so. This method adds another FormHttpMessageConverter that can read "text/plain" into, +	 * a Map so that this works for Facebook., +	 */, +	private void addTextToMapMessageConverter() {, +		FormHttpMessageConverter messageConverter = new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				return clazz.equals(Map.class) && mediaType != null && mediaType.getType().equals("text"), +						&& mediaType.getSubtype().equals("plain");, +			}, +		};, +		restTemplate.getMessageConverters().add(messageConverter);, +	}]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +		HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);, +			return applicationUrl.getProtocol() + "://" + applicationUrl.getHost() + portPart() + nativeRequest.getRequestURI();, +			return nativeRequest.getRequestURL().toString();, +		}, +	}, +, +	private String portPart() {, +		int port = applicationUrl.getPort();, +		if (port == -1) {, +			return "";, +		} else {, +			return ":" + port;]
[+++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.github.connect;, +, +import org.springframework.social.connect.ApiAdapter;, +import org.springframework.social.connect.ConnectionValues;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.connect.UserProfileBuilder;, +import org.springframework.social.github.api.GitHubApi;, +import org.springframework.social.github.api.GitHubUserProfile;, +import org.springframework.web.client.HttpClientErrorException;, +, +/**, + * Github ApiAdapter implementation., + * @author Keith Donald, + */, +public class GitHubApiAdapter implements ApiAdapter<GitHubApi> {, +, +	public boolean test(GitHubApi api) {, +		try {, +			api.getUserProfile();, +			return true;, +		} catch (HttpClientErrorException e) {, +			// TODO : Beef up GitHub's error handling and trigger off of a more specific exception, +			return false;, +		}, +	}, +, +	public void setConnectionValues(GitHubApi api, ConnectionValues values) {, +		GitHubUserProfile profile = api.getUserProfile();, +		values.setProviderUserId(String.valueOf(profile.getId()));		, +		values.setDisplayName(profile.getUsername());, +		values.setProfileUrl("https://github.com/" + profile.getId());, +		values.setImageUrl(profile.getProfileImageUrl());, +	}, +, +	public UserProfile fetchUserProfile(GitHubApi api) {, +		GitHubUserProfile profile = api.getUserProfile();, +		return new UserProfileBuilder().setName(profile.getName()).setEmail(profile.getEmail()).setUsername(profile.getUsername()).build();, +	}, +	, +	public void updateStatus(GitHubApi api, String message) {, +		// not supported, +	}, +	, +}, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.github.connect;, +, +import org.springframework.social.connect.ApiAdapter;, +import org.springframework.social.connect.ConnectionValues;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.connect.UserProfileBuilder;, +import org.springframework.social.github.api.GitHubApi;, +import org.springframework.social.github.api.GitHubUserProfile;, +import org.springframework.web.client.HttpClientErrorException;, +, +/**, + * Github ApiAdapter implementation., + * @author Keith Donald, + */, +public class GitHubApiAdapter implements ApiAdapter<GitHubApi> {, +, +	public boolean test(GitHubApi api) {, +		try {, +			api.getUserProfile();, +			return true;, +		} catch (HttpClientErrorException e) {, +			// TODO : Beef up GitHub's error handling and trigger off of a more specific exception, +			return false;, +		}]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +			The <interfacename>Connection&lt;A&gt;</interfacename> interface models a connection to an external service provider such as Facebook:, +public class OAuth2ConnectionFactory<A> extends ConnectionFactory<A> {, +    public Connection<A> createConnection(AccessGrant accessGrant);, +public class OAuth1ConnectionFactory<A> extends ConnectionFactory<A> {, +    public Connection<A> createConnection(OAuthToken accessToken);, +    <A> ConnectionFactory<A> getConnectionFactory(Class<A> serviceApiType);, +    <A> Connection<A> findPrimaryConnectionToApi(Class<A> apiType);, +    <A> Connection<A> findConnectionToApiForUser(Class<A> apiType, String providerUserId);	, +    <A> List<Connection<A>> findConnectionsToApi(Class<A> apiType);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	<A> List<Connection<A>> findConnectionsToApi(Class<A> apiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	<A> List<Connection<A>> findConnectionsToApi(Class<A> apiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> serviceApiType) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	<A> List<Connection<A>> findConnectionsToApi(Class<A> apiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> serviceApiType) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +		List<Connection<TestFacebookApi>> connections = connectionRepository.findConnectionsToApi(TestFacebookApi.class);]
[+++ b/docs/src/reference/docbook/tripit.xml, +  <para>TripIt is a social network that links together travelers. By connecting with other travelers, you can keep in touch with contacts when your travel plans coincide. Also, aside from its social aspects, TripIt is rather useful for managing a user's travel information.</para>, +  <para>Using Spring Social's <interfacename>TripItOperations</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network.</para>, +  , +  <para>To create an instance of <classname>TripItTemplate</classname>, pass in your application's OAuth 1 credentials along with a user's access token/secret pair to the constructor:</para>, +  , +  <programlisting><![CDATA[String apiKey = "..."; // The application's API/Consumer key, +String apiSecret = "..."; // The application's API/Consumer secret, +String accessToken = "..."; // The access token granted after OAuth authorization, +String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization, +TripItOperations tripit = new TripItTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]></programlisting>, +, +  <para>Optionally, if you're using Spring Social's service provider framework (as described in <xref linkend="serviceprovider"/>), <classname>TripItServiceProvider</classname>'s <methodname>getServiceOperations()</methodname> can handle the creation of a <classname>TripItTemplate</classname> for you:</para>, +  , +  <programlisting><![CDATA[TripItOperations tripit = tripItProvider.getServiceOperations(accountId);]]></programlisting>, +  , +  <para>In this case, <classname>TripItServiceProvider</classname> is being asked to give a <interfacename>TripItOperations</interfacename> constructed using connection data established beforehand using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>.</para>, +  , +  <para>In either event, once you have a <interfacename>TripItOperations</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt.</para>, +, +  <section id="tripit-getProfile">, +    <title>Retrieving a user's TripIt profile data</title>, +, +    <para><interfacename>TripItOperations</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. For example:</para>, +    , +    <programlisting><![CDATA[TripItProfile userProfile = tripit.getUserProfile();]]></programlisting>, +    , +    <para><methodname>getUserProfile()</methodname> returns a <classname>TripItProfile</classname> object that carries details about the user from TripIt. This includes the user's screen name, their display name, their home city, and their company.</para>, +    , +    <para>If all you need is the user's TripIt screen name, you can get that by calling <methodname>getProfileId()</methodname>:</para>, +    , +    <programlisting><![CDATA[String profileId = tripit.getProfileId();]]></programlisting>, +    , +    <para>Or if you only need a URL to the user's TripIt profile page, then call <methodname>getProfileUrl()</methodname>:</para>, +    , +    <programlisting><![CDATA[String profileUrl = tripit.getProfileUrl();]]></programlisting>, +    , +  </section>, +, +  <section id="tripit-trips">, +    <title>Getting a user's upcoming trips</title>, +, +    <para>If the user has any upcoming trips planned, your application can access the trip information by calling <methodname>getUpcomingTrips()</methodname>:</para>, +    , +    <programlisting><![CDATA[List<Trip> trips = tripit.getUpcomingTrips();]]></programlisting>, +    , +    <para>This returns a list of <classname>Trip</classname> objects containing details about each trip, such as the start and end dates for the trip, the primary location, and the trip's display name.</para>, +++ b/docs/src/reference/docbook/tripit.xml, +  <para>TripIt is a social network that links together travelers. By connecting with other travelers, you can keep in touch with contacts when your travel plans coincide. Also, aside from its social aspects, TripIt is rather useful for managing a user's travel information.</para>, +  <para>Using Spring Social's <interfacename>TripItOperations</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network.</para>, +  , +  <para>To create an instance of <classname>TripItTemplate</classname>, pass in your application's OAuth 1 credentials along with a user's access token/secret pair to the constructor:</para>, +  , +  <programlisting><![CDATA[String apiKey = "..."; // The application's API/Consumer key, +String apiSecret = "..."; // The application's API/Consumer secret, +String accessToken = "..."; // The access token granted after OAuth authorization, +String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization, +TripItOperations tripit = new TripItTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]></programlisting>, +, +  <para>Optionally, if you're using Spring Social's service provider framework (as described in <xref linkend="serviceprovider"/>), <classname>TripItServiceProvider</classname>'s <methodname>getServiceOperations()</methodname> can handle the creation of a <classname>TripItTemplate</classname> for you:</para>, +  , +  <programlisting><![CDATA[TripItOperations tripit = tripItProvider.getServiceOperations(accountId);]]></programlisting>, +  , +  <para>In this case, <classname>TripItServiceProvider</classname> is being asked to give a <interfacename>TripItOperations</interfacename> constructed using connection data established beforehand using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>.</para>, +  , +  <para>In either event, once you have a <interfacename>TripItOperations</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt.</para>, +, +  <section id="tripit-getProfile">, +    <title>Retrieving a user's TripIt profile data</title>, +, +    <para><interfacename>TripItOperations</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. For example:</para>, +    , +    <programlisting><![CDATA[TripItProfile userProfile = tripit.getUserProfile();]]></programlisting>, +    , +    <para><methodname>getUserProfile()</methodname> returns a <classname>TripItProfile</classname> object that carries details about the user from TripIt. This includes the user's screen name, their display name, their home city, and their company.</para>, +    , +    <para>If all you need is the user's TripIt screen name, you can get that by calling <methodname>getProfileId()</methodname>:</para>, +    , +    <programlisting><![CDATA[String profileId = tripit.getProfileId();]]></programlisting>, +    , +    <para>Or if you only need a URL to the user's TripIt profile page, then call <methodname>getProfileUrl()</methodname>:</para>, +    , +    <programlisting><![CDATA[String profileUrl = tripit.getProfileUrl();]]></programlisting>, +    , +  </section>, +, +  <section id="tripit-trips">, +    <title>Getting a user's upcoming trips</title>, +, +    <para>If the user has any upcoming trips planned, your application can access the trip information by calling <methodname>getUpcomingTrips()</methodname>:</para>, +    , +    <programlisting><![CDATA[List<Trip> trips = tripit.getUpcomingTrips();]]></programlisting>, +    , +    <para>This returns a list of <classname>Trip</classname> objects containing details about each trip, such as the start and end dates for the trip, the primary location, and the trip's display name.</para>, +++ b/docs/src/reference/docbook/twitter.xml, +  <para>Twitter's social offering is rather simple: Enable users to post random thoughts, 140 characters at a time.</para>, +  <para>Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterOperations</interfacename>) offers several options for applications to integrate with the short-spoken Twitter.</para>, +  , +  <para>Creating an instance of <classname>TwitterTemplate</classname> involves invoking its constructor, passing in the application's OAuth credentials and an access token/secret pair authorizing the application to act on a user's behalf. For example:</para>, +  ]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/docs/src/reference/docbook/connecting.xml, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +++ b/build.gradle, +++ b/docs/src/reference/docbook/connecting.xml, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +++ b/docs/src/reference/docbook/implementing.xml, +							For example, Twitter's API provides access to "status timelines", "searches", "lists", "direct messages", "friends", "geo location", and "users"., +    GeoOperations geoOperations();, +, +    public Facebook getApi(String accessToken) {, +				It should be configured with the provided consumerKey and consumerSecret, along with the provider-specific requestTokenUrl, authorizeUrl, authenticateUrl, and accessTokenUrl., +				The authenticateUrl parameter is optional and may be left out if the provider doesn't have an authentication URL that is different than the authorization URL. , +++ b/build.gradle, +++ b/docs/src/reference/docbook/connecting.xml, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +++ b/docs/src/reference/docbook/implementing.xml, +							For example, Twitter's API provides access to "status timelines", "searches", "lists", "direct messages", "friends", "geo location", and "users"., +    GeoOperations geoOperations();, +, +    public Facebook getApi(String accessToken) {, +				It should be configured with the provided consumerKey and consumerSecret, along with the provider-specific requestTokenUrl, authorizeUrl, authenticateUrl, and accessTokenUrl., +				The authenticateUrl parameter is optional and may be left out if the provider doesn't have an authentication URL that is different than the authorization URL. , +++ b/docs/src/reference/docbook/serviceprovider.xml, +    public Connection<A> createConnection(ConnectionData data);, +, +    String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	AccessGrant refreshAccess(String refreshToken, String scope, , +	        MultiValueMap<String, String> additionalParameters);, +, +    public Connection<A> createConnection(ConnectionData data);, +, +    String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters);, +, +				Callers are first expected to call fetchNewRequestToken(String) to obtain a temporary token from the ServiceProvider to use during the authorization session., +    <A> ConnectionFactory<A> getConnectionFactory(Class<A> apiType);, +    Connection<?> getConnection(ConnectionKey connectionKey);, +    <A> Connection<A> getConnection(Class<A> apiType, String providerUserId);	, +, +    <A> Connection<A> getPrimaryConnection(Class<A> apiType);, +++ b/build.gradle, +++ b/docs/src/reference/docbook/connecting.xml, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +++ b/docs/src/reference/docbook/implementing.xml, +							For example, Twitter's API provides access to "status timelines", "searches", "lists", "direct messages", "friends", "geo location", and "users"., +    GeoOperations geoOperations();, +, +    public Facebook getApi(String accessToken) {, +				It should be configured with the provided consumerKey and consumerSecret, along with the provider-specific requestTokenUrl, authorizeUrl, authenticateUrl, and accessTokenUrl., +				The authenticateUrl parameter is optional and may be left out if the provider doesn't have an authentication URL that is different than the authorization URL. , +++ b/docs/src/reference/docbook/serviceprovider.xml, +    public Connection<A> createConnection(ConnectionData data);, +, +    String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	AccessGrant refreshAccess(String refreshToken, String scope, , +	        MultiValueMap<String, String> additionalParameters);, +, +    public Connection<A> createConnection(ConnectionData data);, +, +    String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters);, +, +				Callers are first expected to call fetchNewRequestToken(String) to obtain a temporary token from the ServiceProvider to use during the authorization session., +    <A> ConnectionFactory<A> getConnectionFactory(Class<A> apiType);, +    Connection<?> getConnection(ConnectionKey connectionKey);, +    <A> Connection<A> getConnection(Class<A> apiType, String providerUserId);	, +, +    <A> Connection<A> getPrimaryConnection(Class<A> apiType);, +++ b/docs/src/reference/docbook/signin.xml, +				By configuring ConnectionFactoryLocator and UsersConnectionRepository as scoped proxies, it enables the proxies to be carried along with the sign in attempt in the session rather than the actual objects themselves., +				For example, suppose that an application's security is based on Spring Security and simply uses a user's account ID as their principal. , +    controller.setSignUpUrl("/register");, +public class AccountConnectionSignUp implements ConnectionSignUp {, +    public AccountConnectionSignUp(AccountRepository accountRepository) {, +        Account account = new Account(profile.getUsername(), profile.getFirstName(), profile.getLastName());, +        accountRepository.createAccount(account);, +        return account;, +++ b/build.gradle, +++ b/docs/src/reference/docbook/connecting.xml, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +++ b/docs/src/reference/docbook/implementing.xml, +							For example, Twitter's API provides access to "status timelines", "searches", "lists", "direct messages", "friends", "geo location", and "users"., +    GeoOperations geoOperations();]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +	private final UserRepository userRepository;, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders, UserRepository userRepository) {, +		this.userRepository = userRepository;, +, +		model.addAttribute("user", userRepository.findUserByUsername(user.getName()));, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;]
[+++ b/docs/src/reference/docbook/implementing.xml, +    this.restTemplate = ProtectedResourceClientFactory.create(consumerKey, consumerSecret, accessToken, accessTokenSecret);]
[+++ b/gradle.properties, +version=1.1.0.M4]
[+++ b/build.gradle, +        compile "org.springframework:spring-webmvc:$springVersion", +++ b/build.gradle, +        compile "org.springframework:spring-webmvc:$springVersion", +++ b/docs/src/reference/docbook/implementing.xml, +++ b/build.gradle, +        compile "org.springframework:spring-webmvc:$springVersion", +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://graph.facebook.com/oauth/access_token"));, +++ b/build.gradle, +        compile "org.springframework:spring-webmvc:$springVersion", +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.servlet.tags.RequestContextAwareTag;, +public class FacebookInitTag extends RequestContextAwareTag {, +	private String apiKeyProperty = "facebook.apiKey";, +	/**, +	 * Sets the name of the environment property containing the API key. Ignored if apiKey is set. Defaults to "facebook.apiKey"., +	 * @param apiKeyProperty, +	 */, +	public void setApiKeyProperty(String apiKeyProperty) {, +		this.apiKeyProperty = apiKeyProperty;, +	}, +, +	protected int doStartTagInternal() throws Exception {, +		return SKIP_BODY;, +		WebApplicationContext context = getRequestContext().getWebApplicationContext();, +		String apiKey = context.getEnvironment().getProperty(apiKeyProperty);, +		if (apiKey != null) {, +			return apiKey;, +		}, +, +++ b/build.gradle, +        compile "org.springframework:spring-webmvc:$springVersion", +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.servlet.tags.RequestContextAwareTag;, +public class FacebookInitTag extends RequestContextAwareTag {, +	private String apiKeyProperty = "facebook.apiKey";, +	/**, +	 * Sets the name of the environment property containing the API key. Ignored if apiKey is set. Defaults to "facebook.apiKey"., +	 * @param apiKeyProperty, +	 */, +	public void setApiKeyProperty(String apiKeyProperty) {, +		this.apiKeyProperty = apiKeyProperty;, +	}, +, +	protected int doStartTagInternal() throws Exception {, +		return SKIP_BODY;, +		WebApplicationContext context = getRequestContext().getWebApplicationContext();, +		String apiKey = context.getEnvironment().getProperty(apiKeyProperty);, +		if (apiKey != null) {, +			return apiKey;, +		}, +, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/web/FacebookInitTagTest.java, +import org.junit.Ignore;, +	@Ignore("for now"), +++ b/build.gradle, +        compile "org.springframework:spring-webmvc:$springVersion", +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.servlet.tags.RequestContextAwareTag;, +public class FacebookInitTag extends RequestContextAwareTag {, +	private String apiKeyProperty = "facebook.apiKey";, +	/**, +	 * Sets the name of the environment property containing the API key. Ignored if apiKey is set. Defaults to "facebook.apiKey"., +	 * @param apiKeyProperty, +	 */, +	public void setApiKeyProperty(String apiKeyProperty) {, +		this.apiKeyProperty = apiKeyProperty;, +	}, +, +	protected int doStartTagInternal() throws Exception {, +		return SKIP_BODY;, +		WebApplicationContext context = getRequestContext().getWebApplicationContext();, +		String apiKey = context.getEnvironment().getProperty(apiKeyProperty);, +		if (apiKey != null) {, +			return apiKey;, +		}, +, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/web/FacebookInitTagTest.java, +import org.junit.Ignore;, +	@Ignore("for now"), +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, +		super("github", connectionRepository, , +				new OAuth2Template(clientId, clientSecret, "https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://github.com/login/oauth/access_token"));]
[+++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/data.xml, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;]
[+++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/support/AbstractBufferingClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]
[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, +		this.providerAccountIdByMemberAndProviderQuery = SELECT_PROVIDER_ACCOUNT_ID;, +		this.countConnectionsQuery = SELECT_ACCOUNT_CONNECTION_COUNT;, +		this.insertAccountConnectionQuery = INSERT_ACCOUNT_CONNECTION;, +		this.deleteAccountConnectionQuery = DELETE_ACCOUNT_CONNECTION;, +		this.accessTokenByMemberAndProviderQuery = SELECT_ACCESS_TOKEN;, +	}, +, +	public String getProviderAccountIdByMemberAndProviderQuery() {, +		return providerAccountIdByMemberAndProviderQuery;, +	}, +, +	public void setProviderAccountIdByMemberAndProviderQuery(String providerAccountIdByMemberAndProviderQuery) {, +		this.providerAccountIdByMemberAndProviderQuery = providerAccountIdByMemberAndProviderQuery;, +	}, +, +	public String getCountConnectionsQuery() {, +		return countConnectionsQuery;, +	}, +, +	public void setCountConnectionsQuery(String countConnectionsQuery) {, +		this.countConnectionsQuery = countConnectionsQuery;, +	}, +, +	public String getInsertAccountConnectionQuery() {, +		return insertAccountConnectionQuery;, +	}, +, +	public void setInsertAccountConnectionQuery(String insertAccountConnectionQuery) {, +		this.insertAccountConnectionQuery = insertAccountConnectionQuery;, +	}, +, +	public String getDeleteAccountConnectionQuery() {, +		return deleteAccountConnectionQuery;, +	}, +, +	public void setDeleteAccountConnectionQuery(String deleteAccountConnectionQuery) {, +		this.deleteAccountConnectionQuery = deleteAccountConnectionQuery;, +	}, +, +	public String getAccessTokenByMemberAndProviderQuery() {, +		return accessTokenByMemberAndProviderQuery;, +	}, +, +	public void setAccessTokenByMemberAndProviderQuery(String accessTokenByMemberAndProviderQuery) {, +		this.accessTokenByMemberAndProviderQuery = accessTokenByMemberAndProviderQuery;, +		return jdbcTemplate.queryForInt(countConnectionsQuery, accountId, provider) == 1;, +		jdbcTemplate.update(deleteAccountConnectionQuery, accountId, provider);, +		return jdbcTemplate.queryForObject(accessTokenByMemberAndProviderQuery, new RowMapper<OAuthToken>() {, +			return jdbcTemplate.queryForObject(providerAccountIdByMemberAndProviderQuery, String.class, accountId,, +					provider);, +	private String providerAccountIdByMemberAndProviderQuery;, +	private String countConnectionsQuery;, +	private String insertAccountConnectionQuery;, +	private String deleteAccountConnectionQuery;, +	private String accessTokenByMemberAndProviderQuery;, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, +		this.providerAccountIdByMemberAndProviderQuery = SELECT_PROVIDER_ACCOUNT_ID;, +		this.countConnectionsQuery = SELECT_ACCOUNT_CONNECTION_COUNT;, +		this.insertAccountConnectionQuery = INSERT_ACCOUNT_CONNECTION;, +		this.deleteAccountConnectionQuery = DELETE_ACCOUNT_CONNECTION;, +		this.accessTokenByMemberAndProviderQuery = SELECT_ACCESS_TOKEN;, +	}, +, +	public String getProviderAccountIdByMemberAndProviderQuery() {, +		return providerAccountIdByMemberAndProviderQuery;, +	}, +, +	public void setProviderAccountIdByMemberAndProviderQuery(String providerAccountIdByMemberAndProviderQuery) {, +		this.providerAccountIdByMemberAndProviderQuery = providerAccountIdByMemberAndProviderQuery;, +	}, +, +	public String getCountConnectionsQuery() {, +		return countConnectionsQuery;, +	}, +, +	public void setCountConnectionsQuery(String countConnectionsQuery) {, +		this.countConnectionsQuery = countConnectionsQuery;, +	}, +, +	public String getInsertAccountConnectionQuery() {, +		return insertAccountConnectionQuery;, +	}, +, +	public void setInsertAccountConnectionQuery(String insertAccountConnectionQuery) {, +		this.insertAccountConnectionQuery = insertAccountConnectionQuery;, +	}, +, +	public String getDeleteAccountConnectionQuery() {, +		return deleteAccountConnectionQuery;, +	}, +, +	public void setDeleteAccountConnectionQuery(String deleteAccountConnectionQuery) {, +		this.deleteAccountConnectionQuery = deleteAccountConnectionQuery;, +	}, +, +	public String getAccessTokenByMemberAndProviderQuery() {, +		return accessTokenByMemberAndProviderQuery;, +	}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ApiTemplate.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +import org.springframework.web.client.RestTemplate;, +, +/**, + * Base class for OAuth 1-based provider API templates., + * @author Craig Walls, + */, +public abstract class ApiTemplate {, +, +	private String consumerKey;, +	, +	private String consumerSecret;, +	, +	private String accessToken;, +	, +	private String accessTokenSecret;, +	, +	private boolean authorizedForUser;, +	, +	private final RestTemplate restTemplate;, +	, +	/**, +	 * Constructs the API template without user authorization. This is useful for accessing operations on a provider's API that do not require user authorization., +	 */, +	protected ApiTemplate() {, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +	}, +	, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param consumerKey the application's consumer key, +	 * @param consumerSecret the application's consumer secret, +	 * @param accessToken the access token, +	 * @param accessTokenSecret the access token secret, +	 */, +	protected ApiTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		this.consumerKey = consumerKey;, +		this.consumerSecret = consumerSecret;, +		this.accessToken = accessToken;, +		this.accessTokenSecret = accessTokenSecret;, +		this.authorizedForUser = true;, +		restTemplate = ProtectedResourceClientFactory.create(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +	}, +	, +	/**, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring proxy server details., +	 * @param requestFactory the request factory, +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		if(isAuthorizedForUser()) {, +			this.restTemplate.setRequestFactory(ProtectedResourceClientFactory.oauthSigningIfNecessary(requestFactory, consumerKey, consumerSecret, accessToken, accessTokenSecret));, +		} else {, +			this.restTemplate.setRequestFactory(requestFactory);, +		}, +	}, +	, +	public boolean isAuthorizedForUser() {, +		return authorizedForUser;, +	}, +	, +	public RestTemplate getRestTemplate() {, +		return restTemplate;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ApiTemplate.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, +		return new MappingJackson2HttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, +		return new MappingJackson2HttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, +		return new MappingJackson2HttpMessageConverter(); ]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfigurerAdapter.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfigurerAdapter.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/AbstractConnectionRepositoryConfigSupport.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfigurerAdapter.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/AbstractConnectionRepositoryConfigSupport.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, + * Copyright 2015 the original author or authors.]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Inherited;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.Import;, +, +// THROWAWAY, +@Target(ElementType.TYPE), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +@Inherited, +@Import(JdbcConnectionRepositoryRegistrar.class), +public @interface EnableJdbcConnectionRepository {, +, +	String connectionRepositoryId() default "connectionRepository";, +	, +	String usersConnectionRepositoryId() default "usersConnectionRepository";, +	, +	String connectionFactoryLocatorRef() default "connectionFactoryLocator";, +	, +	String dataSourceRef() default "dataSource";, +	, +	String encryptorRef() default "textEncryptor";, +	, +	String userIdSourceRef() default "userIdSource";, +	, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Inherited;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.Import;, +, +// THROWAWAY, +@Target(ElementType.TYPE), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +@Inherited, +@Import(JdbcConnectionRepositoryRegistrar.class), +public @interface EnableJdbcConnectionRepository {, +, +	String connectionRepositoryId() default "connectionRepository";, +	, +	String usersConnectionRepositoryId() default "usersConnectionRepository";, +	, +	String connectionFactoryLocatorRef() default "connectionFactoryLocator";, +	, +	String dataSourceRef() default "dataSource";, +	, +	String encryptorRef() default "textEncryptor";, +	, +	String userIdSourceRef() default "userIdSource";, +	, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +/*, + * Copyright 2012 the original author or authors., + *]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/SpringSocialDialect.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "The consumerKey property cannot be null");, +		Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, +		Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "The consumerKey property cannot be null");, +		Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, +		Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(clientId, "The clientId property cannot be null");, +		Assert.notNull(clientSecret, "The clientSecret property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "The consumerKey property cannot be null");, +		Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, +		Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(clientId, "The clientId property cannot be null");, +		Assert.notNull(clientSecret, "The clientSecret property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +	private static final String AUTHENTICATE_URL = "https://www.someprovider.com/oauth/authenticate";, +, +	private static final String AUTHORIZE_URL = "https://www.someprovider.com/oauth/authorize";, +, +		oauth10a = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10_REVISION_A);, +		oauth10 = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, AUTHENTICATE_URL, ACCESS_TOKEN_URL, OAuth1Version.CORE_10);, +				AUTHORIZE_URL, null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10) {, +		assertEquals(AUTHORIZE_URL + "?oauth_token=request_token",, +		assertEquals(AUTHORIZE_URL + "?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",, +		assertEquals(AUTHORIZE_URL + "?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback&custom_parameter=custom_parameter_value",, +				.expect(requestTo(REQUEST_TOKEN_URL)), +		mockServer.expect(requestTo(REQUEST_TOKEN_URL)), +				.expect(requestTo(ACCESS_TOKEN_URL)), +				.expect(requestTo(ACCESS_TOKEN_URL)), +	, +	// parameter assertion tests, +	, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullConsumerKey() {, +		new OAuth1Template(null, "secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, ACCESS_TOKEN_URL);, +	}, +	, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullConsumerSecret() {, +		new OAuth1Template("key", null, REQUEST_TOKEN_URL, AUTHORIZE_URL, ACCESS_TOKEN_URL);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullRequestTokenUrl() {, +		new OAuth1Template("key", "secret", null, AUTHORIZE_URL, ACCESS_TOKEN_URL);, +	}, +	, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullAuthorizeUrl() {, +		new OAuth1Template("key", "secret", REQUEST_TOKEN_URL, null, ACCESS_TOKEN_URL);, +	}, +	, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullAcessTokenUrl() {, +		new OAuth1Template("key", "secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, null);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void setRequestFactory_null() {, +		oauth10a.setRequestFactory(null);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "The consumerKey property cannot be null");, +		Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, +		Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(clientId, "The clientId property cannot be null");, +		Assert.notNull(clientSecret, "The clientSecret property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	public ApiException(String message) {, +	public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	public ApiException(String message) {, +	public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, +	public DuplicateStatusException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	public ApiException(String message) {, +	public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, +	public DuplicateStatusException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException() {, +		super("The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	public ApiException(String message) {, +	public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, +	public DuplicateStatusException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException() {, +		super("The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException() {, +		super("Insufficient permission for this operation.");, +	public InsufficientPermissionException(String requiredPermission) {, +		super("The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	public ApiException(String message) {, +	public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, +	public DuplicateStatusException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException() {, +		super("The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException() {, +		super("Insufficient permission for this operation.");, +	public InsufficientPermissionException(String requiredPermission) {, +		super("The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, +	public InternalServerErrorException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	public ApiException(String message) {, +	public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, +	public DuplicateStatusException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException() {, +		super("The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException() {, +		super("Insufficient permission for this operation.");, +	public InsufficientPermissionException(String requiredPermission) {, +		super("The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, +	public InternalServerErrorException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, +	public InvalidAuthorizationException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	public ApiException(String message) {, +	public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, +	public DuplicateStatusException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException() {, +		super("The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException() {, +		super("Insufficient permission for this operation.");, +	public InsufficientPermissionException(String requiredPermission) {, +		super("The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, +	public InternalServerErrorException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, +	public InvalidAuthorizationException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, +	public MissingAuthorizationException() {, +		super("Authorization is required for the operation, but the API binding was created without authorization.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	public ApiException(String message) {]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/build.gradle, +    h2Version = '1.3.155', +    jacksonVersion = '1.8.1', +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +    h2Version = '1.3.155', +    jacksonVersion = '1.8.1', +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/reference/docbook/connecting.xml, +        registry.addConnectionFactory(new FacebookConnectionFactory(environment.getProperty("facebook.clientId"),, +        registry.addConnectionFactory(new TwitterConnectionFactory(environment.getProperty("twitter.consumerKey"),, +    public ConnectionRepository connectionRepository(@Value("#{request.userPrincipal}") Principal principal) {, +        return usersConnectionRepository().createConnectionRepository(principal.getName());, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), textEncryptor);, +<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +<bean id="connectionRepository" factory-method="createConnectionRepository" factory-bean="usersConnectionRepository" scope="request">, +    <aop:scoped-proxy />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="text">, +        return new ConnectController(environment.getProperty("application.secureUrl"),, +            connectionFactoryLocator(), connectionRepository());, +    <constructor-arg value="${application.secureUrl}" />, +    <!-- relies on by-type autowiring for the other constructor-args -->, +			In either case, <classname>ConnectController</classname> should be constructed with the base "secure URL" for the application., +			It will use this URL to construct callback URLs used in the authorization flow., +			Since your application URL will typically vary between environments, its value should be externalized., +		</para>, +		<para>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +    ConnectController controller = new ConnectController(environment.getProperty("application.secureUrl"),, +        connectionFactoryLocator(), connectionRepository());, +    <constructor-arg value="${application.secureUrl}" />, +++ b/build.gradle, +    h2Version = '1.3.155', +    jacksonVersion = '1.8.1', +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/reference/docbook/connecting.xml, +        registry.addConnectionFactory(new FacebookConnectionFactory(environment.getProperty("facebook.clientId"),, +        registry.addConnectionFactory(new TwitterConnectionFactory(environment.getProperty("twitter.consumerKey"),, +    public ConnectionRepository connectionRepository(@Value("#{request.userPrincipal}") Principal principal) {, +        return usersConnectionRepository().createConnectionRepository(principal.getName());, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), textEncryptor);, +<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +<bean id="connectionRepository" factory-method="createConnectionRepository" factory-bean="usersConnectionRepository" scope="request">, +    <aop:scoped-proxy />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="text">, +        return new ConnectController(environment.getProperty("application.secureUrl"),, +            connectionFactoryLocator(), connectionRepository());, +    <constructor-arg value="${application.secureUrl}" />, +    <!-- relies on by-type autowiring for the other constructor-args -->, +			In either case, <classname>ConnectController</classname> should be constructed with the base "secure URL" for the application., +			It will use this URL to construct callback URLs used in the authorization flow., +			Since your application URL will typically vary between environments, its value should be externalized., +		</para>, +		<para>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +    ConnectController controller = new ConnectController(environment.getProperty("application.secureUrl"),, +        connectionFactoryLocator(), connectionRepository());, +    <constructor-arg value="${application.secureUrl}" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ForbiddenException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you are attempting to post a duplicate tweet or have reached an update limit., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ForbiddenException extends ApiException {, +, +	public ForbiddenException(String message) {, +		super(message);, +	}, +, +	public ForbiddenException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ForbiddenException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you are attempting to post a duplicate tweet or have reached an update limit., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ForbiddenException extends ApiException {, +, +	public ForbiddenException(String message) {, +		super(message);, +	}, +, +	public ForbiddenException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +import org.springframework.social.ApiException;, +, +/**, + * Exception thrown when attempting an operation that requires a permission not granted to the caller., + * To remedy this kind of error, the application should attempt to reauthorize requesting the additional permission scope and then try again. , + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class InsufficientPermissionException extends ApiException {, +	, +	private final String requiredPermission;, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningUtils signingUtils;, +, +		this.signingUtils = new SigningUtils();, +		Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, +		return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningUtils signingUtils;, +, +		this.signingUtils = new SigningUtils();, +		Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, +		return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	private TimestampGenerator timestampGenerator;, +	, +	SigningUtils() {, +		this.timestampGenerator = new DefaultTimestampGenerator();, +	}, +	, +	public Map<String, String> commonOAuthParameters(String consumerKey) {, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +	public String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +	public String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +	public String spring30buildAuthorizationHeaderValue(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +	String buildBaseString(HttpMethod method, String targetUrl, MultiValueMap<String, String> collectedParameters) {, +	private String normalizeParameters(MultiValueMap<String, String> collectedParameters) {, +	private String calculateSignature(String baseString, String consumerSecret, String tokenSecret) {, +	private String sign(String signatureBaseString, String key) {, +	private MultiValueMap<String, String> readFormParameters(MediaType bodyType, byte[] bodyBytes) {, +	private MultiValueMap<String, String> parseFormParameters(String parameterString) {, +	private String getBaseStringUri(URI uri) {, +	private int getPort(URI uri) {, +	// testing hooks	, +	// tests can implement and inject a custom TimestampGenerator to work with fixed nonce and timestamp values, +	void setTimestampGenerator(TimestampGenerator timestampGenerator) {, +		this.timestampGenerator = timestampGenerator;, +	static interface TimestampGenerator {, +		long generateTimestamp();, +		, +		long generateNonce(long timestamp);, +	}, +	, +	private static class DefaultTimestampGenerator implements TimestampGenerator {, +, +		public long generateTimestamp() {, +			return System.currentTimeMillis() / 1000;, +		}, +		, +		public long generateNonce(long timestamp) {, +			return timestamp + RANDOM.nextInt();		, +		}, +		, +		static final Random RANDOM = new Random();, +		, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningUtils signingUtils;, +, +		this.signingUtils = new SigningUtils();, +		Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, +		return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	private TimestampGenerator timestampGenerator;, +	, +	SigningUtils() {, +		this.timestampGenerator = new DefaultTimestampGenerator();, +	}, +	, +	public Map<String, String> commonOAuthParameters(String consumerKey) {, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +	public String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +	public String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +	public String spring30buildAuthorizationHeaderValue(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +	String buildBaseString(HttpMethod method, String targetUrl, MultiValueMap<String, String> collectedParameters) {, +	private String normalizeParameters(MultiValueMap<String, String> collectedParameters) {, +	private String calculateSignature(String baseString, String consumerSecret, String tokenSecret) {, +	private String sign(String signatureBaseString, String key) {, +	private MultiValueMap<String, String> readFormParameters(MediaType bodyType, byte[] bodyBytes) {]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.M2, +role=buildmaster]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	/**, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +	 */, +	public void setDefaultFailureUrl(String defaultFailureUrl) {, +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +	}, +, +	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {, +		if (detectRejection(request)) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("A rejection was detected. Failing authentication.");, +			}, +			throw new SocialAuthenticationException("Authentication failed because user rejected authorization.");, +		}, +		, +		Authentication auth = null;, +		Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +		String authProviderId = getRequestedProviderId(request);, +		if (!authProviders.isEmpty() && authProviderId != null && authProviders.contains(authProviderId)) {, +			SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(authProviderId);, +			auth = attemptAuthService(authService, request, response);, +			if (auth == null) {, +				throw new AuthenticationServiceException("authentication failed");, +			}, +		}, +		return auth;, +	}, +, +	/**, +	 * Detects a callback request after a user rejects authorization to prevent a never-ending redirect loop., +	 * Default implementation detects a rejection as a request that has one or more parameters, but none of the expected parameters (oauth_token, code, scope)., +	 * May be overridden to customize rejection detection., +	 * @param request the request to check for rejection., +	 * @return true if the request appears to be the result of a rejected authorization; false otherwise., +	 */, +	protected boolean detectRejection(HttpServletRequest request) {, +		Set<?> parameterKeys = request.getParameterMap().keySet();, +		return parameterKeys.size() > 0 , +				&& !parameterKeys.contains("oauth_token") , +				&& !parameterKeys.contains("code") , +				&& !parameterKeys.contains("scope");, +	}, +, +	private static final String DEFAULT_FAILURE_URL = "/signin";, +, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	/**, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +	 */, +	public void setDefaultFailureUrl(String defaultFailureUrl) {, +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +	}, +, +	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {]
[+++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		addTextToMapMessageConverter();, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("code", authorizationCode);, +		requestParameters.set("redirect_uri", redirectUri);, +		requestParameters.set("grant_type", "authorization_code");, +		Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	, +	// private helpers, +	// TODO : Can probably tweak RestTemplate's message converters to deal with this better., +	private String valueOf(Object object) {, +		if (object == null) {, +			return null;, +		} else if (object instanceof List) {, +			List list = (List) object;, +			if (list.size() > 0) {, +				return String.valueOf(list.get(0));, +			}, +			return null;, +		}, +		return String.valueOf(object);, +	}, +, +	/*, +	 * Facebook returns form-encoded results with a content type of "text/plain". The "text/plain" content type prevents, +	 * any of the default encoders from being able to parse the results, even though FormHttpMessageConverter is, +	 * perfectly capable of doing so. This method adds another FormHttpMessageConverter that can read "text/plain" into, +	 * a Map so that this works for Facebook., +	 */, +	private void addTextToMapMessageConverter() {, +		FormHttpMessageConverter messageConverter = new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				return clazz.equals(Map.class) && mediaType != null && mediaType.getType().equals("text"), +						&& mediaType.getSubtype().equals("plain");, +			}, +		};, +		restTemplate.getMessageConverters().add(messageConverter);, +	}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/GenericOAuth1ConnectionFactory.java, +	 * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., +			OAuth1Version oauth1Version,, +		this(providerId, consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authorizeUrl, accessTokenUrl, oauth1Version, apiAdapter);, +	 * @param authenticateUrl The API's OAuth 1.0/1.0a authentication URL. If null, will default to the authorizeUrl., +	 * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., +			OAuth1Version oauth1Version,, +		super(providerId, new GenericOAuth1ServiceProvider(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authenticateUrl, accessTokenUrl, oauth1Version), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/GenericOAuth1ConnectionFactory.java, +	 * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., +			OAuth1Version oauth1Version,, +		this(providerId, consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authorizeUrl, accessTokenUrl, oauth1Version, apiAdapter);, +	 * @param authenticateUrl The API's OAuth 1.0/1.0a authentication URL. If null, will default to the authorizeUrl., +	 * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., +			OAuth1Version oauth1Version,, +		super(providerId, new GenericOAuth1ServiceProvider(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authenticateUrl, accessTokenUrl, oauth1Version), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/GenericOAuth1ServiceProvider.java, +	 * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., +	public GenericOAuth1ServiceProvider(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String authenticateUrl, String accessTokenUrl, OAuth1Version oauth1Version) {, +				accessTokenUrl,, +				oauth1Version));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/GenericOAuth1ConnectionFactory.java, +	 * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., +			OAuth1Version oauth1Version,, +		this(providerId, consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authorizeUrl, accessTokenUrl, oauth1Version, apiAdapter);, +	 * @param authenticateUrl The API's OAuth 1.0/1.0a authentication URL. If null, will default to the authorizeUrl., +	 * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., +			OAuth1Version oauth1Version,, +		super(providerId, new GenericOAuth1ServiceProvider(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authenticateUrl, accessTokenUrl, oauth1Version), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/GenericOAuth1ServiceProvider.java, +	 * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., +	public GenericOAuth1ServiceProvider(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String authenticateUrl, String accessTokenUrl, OAuth1Version oauth1Version) {, +				accessTokenUrl,, +				oauth1Version));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +		this(providerId, appId, appSecret, authorizeUrl, authorizeUrl, accessTokenUrl, false, apiAdapter);, +		this(providerId, appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, false, apiAdapter);, +		this(providerId, appId, appSecret, authorizeUrl, authorizeUrl, accessTokenUrl, useParametersForClientCredentials, apiAdapter);]
[+++ b/docs/src/reference/docbook/implementing.xml, +	<title>Adding support for a service provider</title>, +		Spring Social makes it easy to add support for service providers that are not already supported by the framework., +		If you review the existing client modules, such as spring-social-twitter and spring-social-facebook, you will discover they are implemented in a consistent manner and they apply a set of well-defined extension points., +		In this section, you will learn how to add support for new service providers you wish to integrate into your applications., +	<section id="service-providers-implementing">, +		<title>Process</title>, +		<para>, +			The process of adding client support for a service provider consists of several steps:, +			<orderedlist>, +				<listitem>, +					<para>Create a jar artifact for the code e.g. spring-social-twitter.</para>, +				</listitem>, +				<listitem>, +					<para>Develop or integrate a Java binding to the provider's "Service API" e.g. TwitterApi.</para>, +				</listitem>, +				<listitem>, +					<para>Create a ServiceProvider implementation that allows users to authorize with the provider and obtain Service API instances e.g. TwitterServiceProvider.</para>, +				</listitem>, +				<listitem>, +					<para>Create a ServiceApiAdapter that maps the provider's native Service API onto the uniform ServiceProviderConnection model e.g. TwitterServiceApiAdapter.</para>, +				</listitem>, +				<listitem>, +					<para>Finally, create a ServiceProviderConnectionFactory that wraps the other artifacts up and provides a simple interface for establishing connections e.g. TwitterServiceProviderConnectionFactory</para>, +				</listitem>, +			</orderedlist>, +		</para>, +		<para>, +			The following sections of this chapter walk you through each of the steps with examples., +		</para>, +	</section>, +++ b/docs/src/reference/docbook/implementing.xml, +	<title>Adding support for a service provider</title>, +		Spring Social makes it easy to add support for service providers that are not already supported by the framework., +		If you review the existing client modules, such as spring-social-twitter and spring-social-facebook, you will discover they are implemented in a consistent manner and they apply a set of well-defined extension points., +		In this section, you will learn how to add support for new service providers you wish to integrate into your applications., +	<section id="service-providers-implementing">, +		<title>Process</title>, +		<para>, +			The process of adding client support for a service provider consists of several steps:, +			<orderedlist>, +				<listitem>, +					<para>Create a jar artifact for the code e.g. spring-social-twitter.</para>, +				</listitem>, +				<listitem>, +					<para>Develop or integrate a Java binding to the provider's "Service API" e.g. TwitterApi.</para>, +				</listitem>, +				<listitem>, +					<para>Create a ServiceProvider implementation that allows users to authorize with the provider and obtain Service API instances e.g. TwitterServiceProvider.</para>, +				</listitem>, +				<listitem>, +					<para>Create a ServiceApiAdapter that maps the provider's native Service API onto the uniform ServiceProviderConnection model e.g. TwitterServiceApiAdapter.</para>, +				</listitem>, +				<listitem>, +					<para>Finally, create a ServiceProviderConnectionFactory that wraps the other artifacts up and provides a simple interface for establishing connections e.g. TwitterServiceProviderConnectionFactory</para>, +				</listitem>, +			</orderedlist>, +		</para>, +		<para>, +			The following sections of this chapter walk you through each of the steps with examples., +		</para>, +	</section>, +++ /dev/null, +++ b/docs/src/reference/docbook/implementing.xml, +	<title>Adding support for a service provider</title>, +		Spring Social makes it easy to add support for service providers that are not already supported by the framework., +		If you review the existing client modules, such as spring-social-twitter and spring-social-facebook, you will discover they are implemented in a consistent manner and they apply a set of well-defined extension points., +		In this section, you will learn how to add support for new service providers you wish to integrate into your applications., +	<section id="service-providers-implementing">, +		<title>Process</title>, +		<para>, +			The process of adding client support for a service provider consists of several steps:, +			<orderedlist>, +				<listitem>, +					<para>Create a jar artifact for the code e.g. spring-social-twitter.</para>, +				</listitem>, +				<listitem>, +					<para>Develop or integrate a Java binding to the provider's "Service API" e.g. TwitterApi.</para>, +				</listitem>, +				<listitem>, +					<para>Create a ServiceProvider implementation that allows users to authorize with the provider and obtain Service API instances e.g. TwitterServiceProvider.</para>, +				</listitem>, +				<listitem>, +					<para>Create a ServiceApiAdapter that maps the provider's native Service API onto the uniform ServiceProviderConnection model e.g. TwitterServiceApiAdapter.</para>, +				</listitem>, +				<listitem>, +					<para>Finally, create a ServiceProviderConnectionFactory that wraps the other artifacts up and provides a simple interface for establishing connections e.g. TwitterServiceProviderConnectionFactory</para>, +				</listitem>, +			</orderedlist>, +		</para>, +		<para>, +			The following sections of this chapter walk you through each of the steps with examples., +		</para>, +	</section>, +++ /dev/null, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItTemplate.java, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.ArrayList;, +import java.util.Date;]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2015 the original author or authors., +	private String signupUrl;, +, +	private String connectionAddedRedirectUrl;, +, +	private String defaultFailureUrl;, +, +		if (signupUrl != null) {, +			filter.setSignupUrl(signupUrl);, +		}, +, +		if (connectionAddedRedirectUrl != null) {, +			filter.setConnectionAddedRedirectUrl(connectionAddedRedirectUrl);, +		}, +, +		if (defaultFailureUrl != null) {, +			filter.setDefaultFailureUrl(defaultFailureUrl);, +		}, +		, +	/**, +	 * Sets the URL to land on after an authentication failure so that the user can register with the application., +	 * @param signupUrl the URL to redirect to after an authentication failure, +	 * @return this SpringSocialConfigurer for chained configuration, +	 */, +	public SpringSocialConfigurer signupUrl(String signupUrl) {, +		this.signupUrl = signupUrl;, +		return this;, +	}, +, +	/**, +	 * Sets the URL to land on after an a connection was added., +	 * @param connectionAddedRedirectUrl the URL to redirect after a connection was added, +	 * @return this SpringSocialConfigurer for chained configuration, +	 */, +	public SpringSocialConfigurer connectionAddedRedirectUrl(String connectionAddedRedirectUrl) {, +		this.connectionAddedRedirectUrl = connectionAddedRedirectUrl;, +		return this;, +	}, +, +	/**, +	 * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl the URL to redirect to after an authentication fail or authorization deny, +	 * @return this SpringSocialConfigurer for chained configuration, +	 */, +	public SpringSocialConfigurer defaultFailureUrl(String defaultFailureUrl) {, +		this.defaultFailureUrl = defaultFailureUrl;, +		return this;, +	}, +	]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, +    Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils#doPostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils#doPostSignUp()` to complete the connection:, +        ProviderSignInUtils.doPostSignUp(account.getUsername(), request);, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, +    Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils#doPostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils#doPostSignUp()` to complete the connection:, +        ProviderSignInUtils.doPostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, +    Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils#doPostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils#doPostSignUp()` to complete the connection:, +        ProviderSignInUtils.doPostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException;, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, +    Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils#doPostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils#doPostSignUp()` to complete the connection:, +        ProviderSignInUtils.doPostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException;, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/SessionUserIdSourceTest.java]
[+++ b/build.gradle, +    h2Version = '1.3.154', +++ b/build.gradle, +    h2Version = '1.3.154', +++ b/spring-social-core/src/main/java/sql-error-codes.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">, +, +<!--, +    - Overrides default error codes for H2 to account for new error code, +    - (23505) introduced in H2 1.3.154 that indicates a duplicate key error., +    -, +    - This file is temporary and will be removed in Spring Social 1.1 when, +    - Spring Framework 3.1 is required., +	-->, +<beans>, +, +	<bean id="H2" class="org.springframework.jdbc.support.SQLErrorCodes">, +		<property name="badSqlGrammarCodes">, +			<value>42000,42001,42101,42102,42111,42112,42121,42122,42132</value>, +		</property>, +		<property name="duplicateKeyCodes">, +			<value>23001,23505</value>, +		</property>, +		<property name="dataIntegrityViolationCodes">, +			<value>22003,22012,22025,23000</value>, +		</property>, +		<property name="dataAccessResourceFailureCodes">, +			<value>90046,90100,90117,90121,90126</value>, +		</property>, +		<property name="cannotAcquireLockCodes">, +			<value>50200</value>, +		</property>, +	</bean>, +, +</beans>]
[+++ b/docs/src/info/changelog.txt, +   * The ability to test a connection and refresh an expired connection, +   * The ability to update status across connections in a uniform way, +   * The ability to access user profile data on a connection in a uniform way, +     and use it to pre-populate application registration forms, +   * New query operations for finding connections by provider ID, API binding type,, +     a provider user ID, a combination of provider ID and provider user ID, or, +     a combination of provider ID and API binding type, +   * Enhanced support for extending the framework, including documentation that walks, +     you through the process of adding support for a new service provider, +     signing into a provider such as Twitter or Facebook, +   * Android-ready with the ability to use Android's HttpComponents client when, +     in an Android runtime. Also, see SQLiteConnectionRepository in Spring Android, +     1.0.0.M3 for persisting connections in Android., +   * Many design and architectural improvements driven by community feedback]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUser.java, +package org.springframework.social.security;, +, +import java.util.Collection;, +, +import org.springframework.security.core.GrantedAuthority;, +import org.springframework.security.core.userdetails.User;, +, +/**, + * simple utility class that uses {@link User#getUsername()} as {@link SocialUserDetails#getUserId()}, + * for SocialUserDetails, + *, + * @author stf@molindo.at, + */, +public class SocialUser extends User implements SocialUserDetails {, +, +	private static final long serialVersionUID = 1L;, +, +	public SocialUser(String username, String password, boolean enabled, boolean accountNonExpired,, +			boolean credentialsNonExpired, boolean accountNonLocked, Collection<? extends GrantedAuthority> authorities) {, +		super(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);, +	}, +, +	public SocialUser(String username, String password, Collection<? extends GrantedAuthority> authorities) {, +		super(username, password, authorities);, +	}, +, +	public String getUserId() {, +		return getUsername();, +	}, +}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUser.java, +package org.springframework.social.security;, +, +import java.util.Collection;, +, +import org.springframework.security.core.GrantedAuthority;, +import org.springframework.security.core.userdetails.User;, +, +/**, + * simple utility class that uses {@link User#getUsername()} as {@link SocialUserDetails#getUserId()}, + * for SocialUserDetails, + *, + * @author stf@molindo.at, + */, +public class SocialUser extends User implements SocialUserDetails {, +, +	private static final long serialVersionUID = 1L;, +, +	public SocialUser(String username, String password, boolean enabled, boolean accountNonExpired,, +			boolean credentialsNonExpired, boolean accountNonLocked, Collection<? extends GrantedAuthority> authorities) {, +		super(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);, +	}, +, +	public SocialUser(String username, String password, Collection<? extends GrantedAuthority> authorities) {, +		super(username, password, authorities);, +	}, +, +	public String getUserId() {, +		return getUsername();, +	}, +}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetails.java, +package org.springframework.social.security;, +, +import org.springframework.security.core.userdetails.UserDetails;, +, +public interface SocialUserDetails extends UserDetails {, +, +	/**, +	 * might be same as {@link #getUsername()} if users are identified by username, +	 * , +	 * @return user's id used to assign connections, +	 */, +	String getUserId();, +	, +}]
[+++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItModule.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.tripit.api.impl;, +, +import org.codehaus.jackson.Version;, +import org.codehaus.jackson.map.module.SimpleModule;, +import org.springframework.social.tripit.api.Trip;, +import org.springframework.social.tripit.api.TripItProfile;, +, +/**, + * Jackson module for registering mixin annotations against TripIt model classes., + */, +public class TripItModule extends SimpleModule {, +	, +	public TripItModule() {, +		super("TripItModule", new Version(1, 0, 0, null));, +	}, +	, +	@Override, +	public void setupModule(SetupContext context) {, +		context.setMixInAnnotations(Trip.class, TripMixin.class);, +		context.setMixInAnnotations(TripItProfile.class, TripitProfileMixin.class);, +	}, +, +}, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItModule.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.tripit.api.impl;, +, +import org.codehaus.jackson.Version;, +import org.codehaus.jackson.map.module.SimpleModule;, +import org.springframework.social.tripit.api.Trip;, +import org.springframework.social.tripit.api.TripItProfile;, +, +/**, + * Jackson module for registering mixin annotations against TripIt model classes., + */, +public class TripItModule extends SimpleModule {, +	, +	public TripItModule() {, +		super("TripItModule", new Version(1, 0, 0, null));, +	}, +	, +	@Override, +	public void setupModule(SetupContext context) {, +		context.setMixInAnnotations(Trip.class, TripMixin.class);, +		context.setMixInAnnotations(TripItProfile.class, TripitProfileMixin.class);, +	}, +, +}, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItTemplate.java, +import org.codehaus.jackson.map.ObjectMapper;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +		registerTwitterModule(restTemplate);, +		return restTemplate.getForObject("https://api.tripit.com/v1/get/profile?format=json", TripItProfile.class);, +		return restTemplate.getForObject("https://api.tripit.com/v1/list/trip/traveler/true/past/false?format=json", TripList.class).getList();, +	// private helper, +	, +	private void registerTwitterModule(RestTemplate restTemplate) {, +		List<HttpMessageConverter<?>> converters = restTemplate.getMessageConverters();, +		for (HttpMessageConverter<?> converter : converters) {, +			if(converter instanceof MappingJacksonHttpMessageConverter) {, +				MappingJacksonHttpMessageConverter jsonConverter = (MappingJacksonHttpMessageConverter) converter;, +				ObjectMapper objectMapper = new ObjectMapper();				, +				objectMapper.registerModule(new TripItModule());, +				jsonConverter.setObjectMapper(objectMapper);, +			}, +		}, +	}, +, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItModule.java]
[+++ b/.gitignore, +samples/**/target, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase-2/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +	<modelVersion>4.0.0</modelVersion>, +	<groupId>org.springframework.social.samples</groupId>, +	<artifactId>facebook-showcase-2</artifactId>, +	<name>Spring Social Facebook Showcase 2</name>, +	<packaging>war</packaging>, +	<version>1.0.0.BUILD-SNAPSHOT</version>, +	<properties>, +		<java-version>1.6</java-version>, +		<org.springframework.social-version>1.0.0.BUILD-SNAPSHOT</org.springframework.social-version>, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +		<org.slf4j-version>1.5.10</org.slf4j-version>, +	</properties>, +	<dependencies>, +		<!-- Spring -->, +		<dependency>, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-context</artifactId>, +			<version>${org.springframework-version}</version>, +			<exclusions>, +				<!-- Exclude Commons Logging in favor of SLF4j -->, +				<exclusion>, +					<groupId>commons-logging</groupId>, +					<artifactId>commons-logging</artifactId>, +				 </exclusion>, +			</exclusions>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-webmvc</artifactId>, +			<version>${org.springframework-version}</version>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-aspects</artifactId>, +			<version>${org.springframework-version}</version>, +		</dependency>, +		, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +		    <artifactId>spring-social-client</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +		    <artifactId>spring-social-facebook</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +		    <artifactId>spring-social-webmvc</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +	    , +	    <dependency>, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +        </dependency>, +				, +		<!-- Logging -->, +		<dependency>, +			<groupId>org.slf4j</groupId>]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +			response.setHeader("Pragma", "no-cache");, +			response.setDateHeader("Expires", 1L);, +			response.setHeader("Cache-Control", "no-cache");, +			response.addHeader("Cache-Control", "no-store");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); ]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.javajava, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Strategy interface for registering connection factories., + * Given to configuration in call to {@link SocialConfigurer#addConnectionFactories(ConnectionFactoryConfigurer, org.springframework.core.env.Environment)}., + * There are currently two implementations., + * The default implementation simply registers the given ConnectionFactory with a ConnectionFactoryRegistry., + * If Spring Social's security module is available on the classpath, the implementation given will work with a SocialAuthenticationServiceRegistry and, + * automatically wrap any given ConnectionFactory with a SocialAuthenticationService., + * @author Craig Walls, + */, +public interface ConnectionFactoryConfigurer {, +	, +	/**, +	 * Add a connection factory registry., +	 * If Spring Social's security module is available, the given connection factory will be wrapped as a SocialAuthenticationService., +	 */, +	void addConnectionFactory(ConnectionFactory<?> connectionFactory);, +, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.javajava, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Strategy interface for registering connection factories., + * Given to configuration in call to {@link SocialConfigurer#addConnectionFactories(ConnectionFactoryConfigurer, org.springframework.core.env.Environment)}., + * There are currently two implementations., + * The default implementation simply registers the given ConnectionFactory with a ConnectionFactoryRegistry., + * If Spring Social's security module is available on the classpath, the implementation given will work with a SocialAuthenticationServiceRegistry and, + * automatically wrap any given ConnectionFactory with a SocialAuthenticationService., + * @author Craig Walls, + */, +public interface ConnectionFactoryConfigurer {, +	, +	/**, +	 * Add a connection factory registry., +	 * If Spring Social's security module is available, the given connection factory will be wrapped as a SocialAuthenticationService., +	 */, +	void addConnectionFactory(ConnectionFactory<?> connectionFactory);, +, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.javajava, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0.RELEASE (August 25, 2011), +=============================================, +Bug Fixes, +   * Discontinued use of "../"-based relative URLs when redirecting, +     after deleting a connection to fix redirection when the disconnect, +     form's action URL has a trailing slash. (SOCIAL-238), +, +Improvements, +   * Added schema for JdbcUsersConnectionRepository to reference documentation, +     and briefly described its purpose and location within the core module., +     (SOCIAL-241), +   * ConnectInterceptor.preConnect() now returns a MultiValueMap<String, String>, +     to be able to add parameters to the authorization URL. (SOCIAL-243), +   * New samples illustrating a popup-based connection flow and Spring Social, +     in a Facebook Canvas application., +]
[+++ b/build.gradle, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/build.gradle, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/build.gradle, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/build.gradle, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/build.gradle, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table ServiceProvider (name varchar,, +                    displayName varchar not null,, +                   	implementation varchar not null,, +					apiKey varchar not null,					, +					secret varchar,, +					appId bigint,, +					requestTokenUrl varchar,, +					authorizeUrl varchar,, +					accessTokenUrl varchar,, +					primary key (name));, +, +create table AccountConnection (member bigint,, +					provider varchar,, +					accountId varchar,	, +					profileUrl varchar,, +					primary key (member, provider, accessToken),, +					foreign key (provider) references ServiceProvider(name));, +create index ProviderAccountKey on AccountConnection(accountId);, +++ b/build.gradle, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table ServiceProvider (name varchar,, +                    displayName varchar not null,, +                   	implementation varchar not null,, +					apiKey varchar not null,					, +					secret varchar,, +					appId bigint,, +					requestTokenUrl varchar,, +					authorizeUrl varchar,, +					accessTokenUrl varchar,, +					primary key (name));, +, +create table AccountConnection (member bigint,, +					provider varchar,, +					accountId varchar,	, +					profileUrl varchar,, +					primary key (member, provider, accessToken),, +					foreign key (provider) references ServiceProvider(name));, +create index ProviderAccountKey on AccountConnection(accountId);, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/samples/facebook/db/ServiceProviders-data.sql" />, +++ b/build.gradle, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);]
[+++ b/build.gradle, +        compile project(':spring-social-gowalla') { optional = true }, +project('spring-social-gowalla') {, +    description = 'Spring Social Gowalla', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +++ b/build.gradle, +        compile project(':spring-social-gowalla') { optional = true }, +project('spring-social-gowalla') {, +    description = 'Spring Social Gowalla', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/views/home.jsp, +<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>, +<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>, +<%@ taglib uri="http://www.springframework.org/tags/form" prefix="sf" %>, +<%@ page session="false" %>, +<html>, +<head>, +	<title>Facebook Showcase</title>, +</head>, +<body>, +	<h1>Facebook Showcase</h1>, +, +	<p>Hello, <c:out value="${fbUser.firstName}"/>!  (<a href="<c:url value="/connect/facebook"/>">Disconnect from Facebook</a>)</p>, +	, +	<h3>Post to your Facebook wall</h3>	, +	<form method="POST" action="<c:url value="/wall"/>">, +		<textarea id="message" name="message" rows="5" cols="40"></textarea><br/>, +		<input type="submit" value="Post" />, +	</form>, +</body>, +</html>, +++ b/build.gradle, +        compile project(':spring-social-gowalla') { optional = true }, +project('spring-social-gowalla') {, +    description = 'Spring Social Gowalla', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/views/home.jsp, +<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>, +<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>, +<%@ taglib uri="http://www.springframework.org/tags/form" prefix="sf" %>, +<%@ page session="false" %>, +<html>, +<head>, +	<title>Facebook Showcase</title>, +</head>, +<body>, +	<h1>Facebook Showcase</h1>, +, +	<p>Hello, <c:out value="${fbUser.firstName}"/>!  (<a href="<c:url value="/connect/facebook"/>">Disconnect from Facebook</a>)</p>, +	, +	<h3>Post to your Facebook wall</h3>	, +	<form method="POST" action="<c:url value="/wall"/>">, +		<textarea id="message" name="message" rows="5" cols="40"></textarea><br/>, +		<input type="submit" value="Post" />, +	</form>, +</body>, +</html>, +++ b/samples/gowalla-showcase/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +// -----------------------------------------------------------------------------, +// Main gradle build file for Spring Social's Twitter-Connect Sample, +// @author Craig Walls, +// -----------------------------------------------------------------------------, +, +// -----------------------------------------------------------------------------, +// Configuration for the root project, +// -----------------------------------------------------------------------------, +description = 'Spring Social Twitter Connect']
[+++ b/src/reference/docbook/signin.xml, +					</listitem>]
[+++ b/build.gradle, +    commonsCodecVersion = '1.5', +    springSecurityVersion = '3.1.0.RC2', +        compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { provided = true }, +++ b/build.gradle, +    commonsCodecVersion = '1.5', +    springSecurityVersion = '3.1.0.RC2', +        compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { provided = true }, +++ b/docs/src/reference/docbook/overview.xml, +		, +		<section id="overview-dependencies">, +			<title>Dependencies</title>, +			, +			<para>, +				In addition to Spring Social itself, there are a few additional dependencies you may need to add to your project's build., +			</para>, +			, +			<section id="overview-dependencies-spring">, +				<title>Spring Framework</title>, +				<para>, +					Spring Social depends on the Spring Framework's web module for its REST client support using <classname>RestTemplate</classname>., +					If Spring 3.1 is available, Spring Social will take advantage of some new features in Spring 3.1., +					However, Spring Social does not depend on these new features and will work with Spring 3.0.3 or higher., +				</para>, +				, +				<para>, +					If you want to use Spring Social with Spring 3.0.3 or higher, you'll need to explicitly add the spring-web dependency to your build, specifying the version:, +				</para>, +				, +			    <programlisting language="xml"><![CDATA[, +<dependency>, +  <groupId>org.springframework</groupId>, +  <artifactId>spring-web</artifactId>, +  <version>3.0.5.RELEASE</version>, +</dependency>]]>, +	  			</programlisting>, +	  			, +	  			<para>, +	  				Maven's dependency management favors "nearest" dependencies, so your project's dependency on a specific version of spring-web will override Spring Social's dependency on the 3.1 version., +  				</para>, +  				, +  				<para>, +	  				Gradle, on the other hand, favors the newest dependency., +	  				If you're using Gradle to build your project, you'll need to also set the dependency's <code>force</code> property to <code>true</code> to force Gradle to resolve your chosen version of Spring:, +	  			</para>, +, +			    <programlisting language="java"><![CDATA[, +dependencies { , +	compile ("org.springframework.social:spring-social-core:1.0.0.M3"), +	compile ("org.springframework:spring-web:3.0.3.RELEASE") { force=true }, +}]]>, +	  			</programlisting>, +, +			</section>, +, +			<section id="overview-dependencies-springsecurity">, +				<title>Spring Security</title>, +, +				<para>, +					If you're using Spring Social's JDBC-based connection repository, it will require a <interfacename>TextEncryptor</interfacename> from Spring Security 3.1.0 to encrypt connection data as it is persisted., +					For that, you'll need to add the core module from Spring Security 3.1.0 to your project build:, +				</para>, +, +		    	<programlisting language="xml"><![CDATA[, +<dependency>, +  <groupId>org.springframework.security</groupId>, +  <artifactId>spring-security-core</artifactId>, +  <version>3.1.0.RC2</version>, +</dependency>]]>, +	  			</programlisting>, +, +  			</section>, +, +			<section id="overview-dependencies-commonscodec">, +				<title>Commons Codec</title>, +, +				<para>, +					When using Spring Social to integrate with OAuth 1-based providers, you'll need to add the Commons Codec library to your project:, +				</para>, +			, +		    	<programlisting language="xml"><![CDATA[, +<dependency>, +  <groupId>commons-codec</groupId>, +  <artifactId>commons-codec</artifactId>, +  <version>1.5</version>, +</dependency>]]>, +	  			</programlisting>, +	  			, +  			</section>, +, +			<section id="overview-dependencies-httpcomponents">, +				<title>Apache HttpComponents</title>, +				, +				<para>, +					Spring Social has an optional dependency on Apache's HttpComponents HttpClient as the basis for creating requests when communicating with a service provider., +					If the HttpComponents HttpClient library is present, it will favor it. , +					Otherwise, it will fall back on standard Java facilities for request creation., +				</para>, +, +		    	<programlisting language="xml"><![CDATA[]
[+++ b/docs/src/reference/docbook/connecting.xml, +      	<para>, +      		In the previous chapter, you saw how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> supports authorization and manages connections between an application and an external service provider., +      		But although various implementations of <interfacename>ServiceProvider</interfacename> support the specifics of the authorization protocol for each service provider, they do not handle the overall connection flow. , +      	</para>, +		<para>, +			Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that works with <interfacename>ServiceProvider</interfacename>s to coordinate the connection flow., +			<classname>ConnectController</classname> takes care of redirecting the user to the service provider for authorization and responding to the callback after authorization., +			At each step, <classname>ConnectController</classname> works with a <interfacename>ServiceProvider</interfacename> to handle the finer details such as obtaining a request token and creating connections., +		</para>, +      , +	</section>, +	, +	<section id="section_connecting_service_providers">, +		<title>Registering service providers</title>, +		, +		<para>, +			Because <classname>ConnectController</classname> collaborates with <interfacename>ServiceProvider</interfacename>s to establish connections, you'll need to register one or more <interfacename>ServiceProvider</interfacename> implementations as beans in the Spring context., +			<classname>ConnectController</classname> will discover any bean of type <interfacename>ServiceProvider</interfacename> in the Spring context and use it to handle connections for the service provider it represents., +		</para>, +		, +		<para>, +			The following configuration class registers <interfacename>ServiceProvider</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase.config;, +, +import javax.sql.DataSource;, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.context.annotation.Bean;, +import org.springframework.security.crypto.encrypt.TextEncryptor;, +import org.springframework.social.connect.jdbc.JdbcConnectionRepository;, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.tripit.connect.TripItServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +import org.springframework.stereotype.Component;, +, +@Configuration, +public class ServiceProviders {, +, +    @Bean, +    public TwitterServiceProvider twitter(@Value("#{environment['twitter.clientKey']}") String clientKey,, +            @Value("#{environment['twitter.clientSecret']}") String clientSecret, ConnectionRepository connectionRepository) {, +        return new TwitterServiceProvider(clientKey, clientSecret, connectionRepository);, +    }, +, +    @Bean, +    public FacebookServiceProvider facebook(@Value("#{environment['facebook.apiKey']}") String clientId,, +            @Value("#{environment['facebook.appSecret']}") String clientSecret, ConnectionRepository connectionRepository) {, +        return new FacebookServiceProvider(clientId, clientSecret, connectionRepository);, +    }, +, +    @Bean, +    public TripItServiceProvider tripit(@Value("#{environment['tripit.clientKey']}") String clientKey,, +            @Value("#{environment['tripit.clientSecret']}") String clientSecret, ConnectionRepository connectionRepository) {, +        return new TripItServiceProvider(clientKey, clientSecret, connectionRepository);, +    }, +, +    @Bean, +    public ConnectionRepository connectionRepository(DataSource dataSource, TextEncryptor textEncryptor) {, +        return new JdbcConnectionRepository(dataSource, textEncryptor);, +    }, +, +}]]>, +		</programlisting>, +		, +		<para>, +			Each <interfacename>ServiceProvider</interfacename> is created given the application's client key and secret that were assigned to it when the application was registered with the service provider., +			Because the consumer key and secret may be different across environments (e.g., test, production, etc) it is recommended that these values be externalized. , +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as properties retrieved from the context environment., +		</para>, +, +		<para>, +			The <interfacename>ServiceProvider</interfacename> are also given a <interfacename>ConnectionRepository</interfacename> at construction., +			When managing connections, a <interfacename>ServiceProvider</interfacename> needs a place to store those connections., +			Therefore, a <interfacename>ServiceProvider</interfacename> works through a <interfacename>ConnectionRepository</interfacename> for persistence operations on connections., +			Spring Social supports JDBC-based connection storage with <classname>JdbcConnectionRepository</classname>, which itself is constructed given a <interfacename>DataSource</interfacename> and a <interfacename>TextEncryptor</interfacename>., +		</para>, +, +		<para>, +			<classname>JdbcConnectionRepository</classname> uses a <interfacename>TextEncryptor</interfacename> to encrypt the credentials (e.g., access tokens and secrets) obtained during authorization when writing them to the database., +			Spring Security 3.1 makes a few useful text encryptors available via static factory methods in its <classname>Encryptors</classname> class., +			For example, a no-op text encryptor is useful at development time and can be configured like this:, +		</para>				, +		, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase.config;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Profile;, +import org.springframework.security.crypto.encrypt.Encryptors;, +import org.springframework.security.crypto.encrypt.TextEncryptor;, +, +@Configuration, +@Profile("dev"), +public class NoOpTextEncryptor {, +]
[+++ b/docs/src/reference/docbook/apis.xml, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> via a <interfacename>ServiceProviderConnection</interfacename>. , +			For example, the following snippet calls <methodname>getServiceApi()</methodname> on a connection to retrieve a <interfacename>TwitterApi</interfacename>:, +ServiceProviderConnection<TwitterApi> connection = , +        connectionRepository.findConnectionByServiceApi(TwitterApi);, +TwitterApi twitterApi = connection.getServiceApi();]]>, +ServiceProviderConnection<FacebookApi> connection = , +        connectionRepository.findConnectionByServiceApi(FacebookApi);, +FacebookApi facebookApi = connection.getServiceApi();]]>, +			Spring Social's Facebook API binding is divided into 9 sub-APIs exposes through the methods of <interfacename>FacebookApi</interfacename>:, +		</para>, +, +			<programlisting language="java"><![CDATA[, +public interface FacebookApi extends GraphApi {, +, +	CommentOperations commentOperations();, +, +	EventOperations eventOperations();, +	, +	FeedOperations feedOperations();, +, +	FriendOperations friendOperations();, +	, +	GroupOperations groupOperations();, +, +	LikeOperations likeOperations();, +	, +	MediaOperations mediaOperations();, +	, +	PlacesOperations placesOperations();, +	, +	UserOperations userOperations();, +	, +}]]>, +			</programlisting>, +, +		<para>, +			The sub-API interfaces returned from <interfacename>FacebookApi</interfacename>'s methods are described in <xref linkend="table-facebook-sub-apis" />., +		</para>, +, +		<table xml:id="table-facebook-sub-apis">, +			<title>FacebookApi's Sub-APIs</title>, +			<tgroup cols="2">, +				<colspec align="left" />, +				<colspec colnum="1" colname="col1" colwidth="2*"/>, +				<colspec colnum="2" colname="col2" colwidth="2*"/>, +				<thead>, +					<row>, +						<entry align="center">Sub-API Interface</entry>, +						<entry align="center">Description</entry>, +					</row>, +				</thead>, +				<tbody>, +					<row>, +						<entry>CommentOperations</entry>, +						<entry>Add, delete, and read comments on Facebook objects.</entry>, +					</row>, +					<row>, +						<entry>EventOperations</entry>, +						<entry>Create and maintain events and RSVP to event invitations.</entry>, +					</row>, +					<row>, +						<entry>FeedOperations</entry>, +						<entry>Read and post to a Facebook wall.</entry>, +					</row>, +					<row>, +						<entry>FriendOperations</entry>, +						<entry>Retrieve a user's friends and maintain friend lists.</entry>, +					</row>, +					<row>, +						<entry>GroupOperations</entry>, +						<entry>Retrieve group details and members.</entry>, +					</row>, +					<row>, +						<entry>LikeOperations</entry>, +						<entry>Retrieve a user's interests and likes. Like and unlike objects.</entry>, +					</row>, +					<row>, +						<entry>MediaOperations</entry>, +						<entry>Maintain albums, photos, and videos.</entry>, +					</row>, +					<row>, +						<entry>PlacesOperations</entry>, +						<entry>Checkin to location in Facebook Places and retrieve places a user and their friends have checked into.</entry>, +					</row>, +					<row>, +						<entry>UserOperations</entry>, +						<entry>Retrieve user profile data and profile images.</entry>, +					</row>, +				</tbody>, +			</tgroup>, +		</table>, +, +		<para>, +			The following sections will give an overview of common tasks that can be performed via <interfacename>FacebookApi</interfacename> and its sub-APIs., +			For complete details on all of the operations available, refer to the JavaDoc., +FacebookProfile profile = facebookApi.userOperations().getUserProfile();]]>, +String profileId = facebookApi.userOperations().getProfileId();]]>, +String profileUrl = facebookApi.userOperations().getProfileUrl();]]>, +List<String> friendIds = facebookApi.friendOperations().getFriendIds();]]>]
[+++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param scope optional scope to narrow to when refreshing access; if null, the existing scope is preserved., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param scope optional scope to narrow to when refreshing access; if null, the existing scope is preserved., +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/ProviderSignInAttempt.java, + * For the former scenario, callers should all {@link #connect()} post-signup to establish a connection between a new user account and the provider account., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param scope optional scope to narrow to when refreshing access; if null, the existing scope is preserved., +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/ProviderSignInAttempt.java, + * For the former scenario, callers should all {@link #connect()} post-signup to establish a connection between a new user account and the provider account., +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/ProviderSignInUtils.java]
[+++ b/build.gradle, +		compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, +		    optional = true, +		    transitive = false, +		}, +++ b/build.gradle, +		compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, +		    optional = true, +		    transitive = false, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/build.gradle, +		compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, +		    optional = true, +		    transitive = false, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/build.gradle, +		compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, +		    optional = true, +		    transitive = false, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.Iterator;, +import java.util.Map.Entry;, + * @author Roy Clarkson, +		String clientInfo = "?client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?client_id=" + formEncode(clientId);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiTokens.java, +/*, + * Copyright 2011 the original author or authors.]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/gradle.properties, +springSocialVersion=1.1.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/build.gradle, +    jacksonVersion = '1.8.3', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +    jacksonVersion = '1.8.3', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/build.gradle, +    jacksonVersion = '1.8.3', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-extending-new-api - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, +			<listitem><para>spring-social-extending-existing-api - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>, +++ b/build.gradle, +    jacksonVersion = '1.8.3', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-extending-new-api - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, +			<listitem><para>spring-social-extending-existing-api - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>, +++ b/docs/src/reference/docbook/signin.xml, +							The sign up URL is "/signup" (relative to the application root)., +							The sign up URL is "/signup" (relative to the application root)., +++ b/build.gradle, +    jacksonVersion = '1.8.3', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-extending-new-api - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, +			<listitem><para>spring-social-extending-existing-api - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>, +++ b/docs/src/reference/docbook/signin.xml, +							The sign up URL is "/signup" (relative to the application root)., +							The sign up URL is "/signup" (relative to the application root)., +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +    jacksonVersion = '1.8.3', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration']
[+++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +project('spring-social-github') {, +    description = 'Spring Social GitHub', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +project('spring-social-github') {, +    description = 'Spring Social GitHub', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +++ b/samples/facebook-showcase-2/build.gradle, +// Main gradle build file for Spring Social's Facebook Showcase Sample, +description = 'Spring Social Facebook Connect', +abbreviation = 'FACESHOW', +++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +project('spring-social-github') {, +    description = 'Spring Social GitHub', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +++ b/samples/facebook-showcase-2/build.gradle, +// Main gradle build file for Spring Social's Facebook Showcase Sample, +description = 'Spring Social Facebook Connect', +abbreviation = 'FACESHOW', +++ b/samples/github-showcase/README, +GitHub Showcase, +===============, +This showcase application serves to demonstrate many of the features that Spring Social offers for interacting, +with GitHub. , +, +At this time, this showcase demonstrates:, + - Connecting to GitHub using Spring Social's ConnectController and the OAuth 2 web server flow., + - Specifying an OAuth 2 authorization scope via an optional "scope" parameter to the ConnectController, +   at authorization time, + - Retrieving a user's GitHub ID., + - Retrieving a user's top spots (the spots that the user has checked into most)., + , +To keep things simple this showcase application is a single-user application, assuming that the user's application, +account ID is always 1. A more comprehensive example would be multi-user keeping a store of users, any of which, +may connect their application account with their GitHub profile., +, +The functionality of this showcase sample will be expanded as Spring Social offers more GitHub capability., +++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +project('spring-social-github') {, +    description = 'Spring Social GitHub', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +++ b/samples/facebook-showcase-2/build.gradle, +// Main gradle build file for Spring Social's Facebook Showcase Sample, +description = 'Spring Social Facebook Connect', +abbreviation = 'FACESHOW', +++ b/samples/github-showcase/README, +GitHub Showcase, +===============, +This showcase application serves to demonstrate many of the features that Spring Social offers for interacting, +with GitHub. , +, +At this time, this showcase demonstrates:, + - Connecting to GitHub using Spring Social's ConnectController and the OAuth 2 web server flow., + - Specifying an OAuth 2 authorization scope via an optional "scope" parameter to the ConnectController, +   at authorization time, + - Retrieving a user's GitHub ID., + - Retrieving a user's top spots (the spots that the user has checked into most)., + , +To keep things simple this showcase application is a single-user application, assuming that the user's application, +account ID is always 1. A more comprehensive example would be multi-user keeping a store of users, any of which, +may connect their application account with their GitHub profile., +, +The functionality of this showcase sample will be expanded as Spring Social offers more GitHub capability., +++ b/samples/github-showcase/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]
[+++ b/samples/facebook-showcase-2/README, +Facebook Showcase, +=================, +with Facebook. This particular showcase example leverages Facebook's XFBML and JavaScript APIs to establish, +connections between the application user and their Facebook profile. (Another Facebook showcase sample,, +facebook-showcase-2, demonstrates how to use Spring Social to establish connections following OAuth 2's, +web server flow)., + - Connecting to Facebook via Facebook's <fb:login-button> tag., + - Using Spring Social's @FacebookAccessToken and @FacebookUserId annotations to extract a user's access token, +   and user ID from the cookie that is written after authorization., +++ b/samples/facebook-showcase-2/README, +Facebook Showcase, +=================, +with Facebook. This particular showcase example leverages Facebook's XFBML and JavaScript APIs to establish, +connections between the application user and their Facebook profile. (Another Facebook showcase sample,, +facebook-showcase-2, demonstrates how to use Spring Social to establish connections following OAuth 2's, +web server flow)., + - Connecting to Facebook via Facebook's <fb:login-button> tag., + - Using Spring Social's @FacebookAccessToken and @FacebookUserId annotations to extract a user's access token, +   and user ID from the cookie that is written after authorization., +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/README, +Facebook Showcase, +=================, +with Facebook. This particular showcase example leverages Facebook's XFBML and JavaScript APIs to establish, +connections between the application user and their Facebook profile. (Another Facebook showcase sample,, +facebook-showcase-2, demonstrates how to use Spring Social to establish connections following OAuth 2's, +web server flow)., + - Connecting to Facebook via Facebook's <fb:login-button> tag., + - Using Spring Social's @FacebookAccessToken and @FacebookUserId annotations to extract a user's access token, +   and user ID from the cookie that is written after authorization., +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/AnnotationMethodHandlerAdapterPostProcessor.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.samples.facebook;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.social.facebook.FacebookWebArgumentResolver;, +import org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter;, +, +public class AnnotationMethodHandlerAdapterPostProcessor implements BeanPostProcessor {, +, +	public Object postProcessBeforeInitialization(Object bean, String name), +			throws BeansException {, +		return bean;, +	}, +, +	public Object postProcessAfterInitialization(Object bean, String name) throws BeansException {, +		if (bean instanceof AnnotationMethodHandlerAdapter) {, +			AnnotationMethodHandlerAdapter controllerInvoker = (AnnotationMethodHandlerAdapter) bean;, +			controllerInvoker.setCustomArgumentResolver(new FacebookWebArgumentResolver(facebookApiKey));, +		}, +		return bean;, +	}, +, +	/**, +	 * Needed by {@link FacebookWebArgumentResolver} to resolve Facebook cookies, +	 * such as the user's Facebook ID and Facebook access token., +	 */, +	@Value("#{facebookProvider.apiKey}"), +	private String facebookApiKey;, +	, +}, +++ b/samples/facebook-showcase-2/README, +Facebook Showcase, +=================, +with Facebook. This particular showcase example leverages Facebook's XFBML and JavaScript APIs to establish, +connections between the application user and their Facebook profile. (Another Facebook showcase sample,, +facebook-showcase-2, demonstrates how to use Spring Social to establish connections following OAuth 2's, +web server flow)., + - Connecting to Facebook via Facebook's <fb:login-button> tag., + - Using Spring Social's @FacebookAccessToken and @FacebookUserId annotations to extract a user's access token, +   and user ID from the cookie that is written after authorization., +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/AnnotationMethodHandlerAdapterPostProcessor.java]
[+++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth2AuthenticationServiceTest.java, +			// TODO: This isn't the complete redirect URL, but it's sufficient to verify that the redirect URL was drawn from the request., +			//       Ultimately the OAuth2Template creates the redirect URL, but since that's mocked out in this test, that won't be easily, +			//       done without recreating the functionality of a real OAuth2Template. Instead, we can feel confident that if the redirect, +			//       URL is what we told the mock to return, then the mock must have been given the proper return URL., +			assertEquals("http://facebook.com/auth", e.getRedirectUrl());, +	, +	@Test, +	public void test_withProxyHeaders() throws Exception {, +		@SuppressWarnings("unchecked"), +		final OAuth2ConnectionFactory<Object> factory = mock(OAuth2ConnectionFactory.class);, +		final OAuth2Operations operations = mock(OAuth2Operations.class);, +		final String serverName = "example.com";, +		final AccessGrant accessGrant = new AccessGrant("my_token");, +		final String code = "code";, +		final Connection<Object> connection = DummyConnection.dummy("provider", "user");, +, +		final OAuth2AuthenticationService<Object> authSvc = new OAuth2AuthenticationService<Object>(factory);, +		authSvc.getReturnToUrlParameters().add("param");, +		authSvc.afterPropertiesSet();, +, +		final MockServletContext context = new MockServletContext();, +		final MockHttpSession session = new MockHttpSession(context);, +, +		// mock definitions, +		when(factory.getProviderId()).thenReturn(connection.getKey().getProviderId());, +		when(factory.getOAuthOperations()).thenReturn(operations);, +		when(factory.createConnection(accessGrant)).thenReturn(connection);, +, +		when(, +				operations.buildAuthenticateUrl(oAuth2Parameters("http://x.com/auth/foo?param=param_value"))).thenReturn(, +				"http://facebook.com/auth");, +		when(operations.exchangeForAccess(code, "http://example.com/auth/foo", null)).thenReturn(accessGrant);, +, +		// first phase, +		MockHttpServletRequest request = new MockHttpServletRequest(context, "GET", "/auth/foo");, +		request.setServerName(serverName);, +		request.setSession(session);, +		request.addParameter("param", "param_value");, +		request.addHeader("Host", "x.com");, +		request.addHeader("X-Forwarded-Proto", "http");, +		request.addHeader("X-Forwarded-Port", "80");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		try {, +			SocialAuthenticationToken token = authSvc.getAuthToken(request, response);, +			fail("redirect expected, was token " + token);, +		} catch (SocialAuthenticationRedirectException e) {, +			// TODO: This isn't the complete redirect URL, but it's sufficient to verify that the redirect URL was drawn from the request's, +			//       proxy headers., +			//       Ultimately the OAuth2Template creates the redirect URL, but since that's mocked out in this test, that won't be easily, +			//       done without recreating the functionality of a real OAuth2Template. Instead, we can feel confident that if the redirect, +			//       URL is what we told the mock to return, then the mock must have been given the proper return URL., +			assertEquals("http://facebook.com/auth", e.getRedirectUrl());, +		}, +, +		// second phase, +		request = new MockHttpServletRequest(context, "GET", "/auth/foo");, +		request.setServerName(serverName);, +		request.setSession(session);, +		request.addParameter("code", code);, +		response = new MockHttpServletResponse();, +, +		SocialAuthenticationToken token = authSvc.getAuthToken(request, response);, +		assertNotNull(token);, +		assertTrue(token.getConnection() instanceof Connection);, +		assertFalse(token.isAuthenticated());, +	}, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/src/reference/docbook/signin.xml, +<bean class="org.springframework.social.connect.web.ProviderSignInController">, +<bean class="org.springframework.social.connect.web.ProviderSignInController">, +<bean class="org.springframework.social.connect.web.ProviderSignInController">]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/UsernameAlreadyInUseException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/UsernameAlreadyInUseException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/package-info.java, +/**, + * Spring Social XML configuration namespace, + */, +package org.springframework.social.config.xml;, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]
[+++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/src/info/changelog.txt, +++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/src/info/changelog.txt, +++ b/docs/src/info/notice.txt, +   == Version 2.0, in this case for the Spring Social distribution. ==, +++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/src/info/changelog.txt, +++ b/docs/src/info/notice.txt, +   == Version 2.0, in this case for the Spring Social distribution. ==, +++ b/docs/src/info/readme.txt, +++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/src/info/changelog.txt, +++ b/docs/src/info/notice.txt, +   == Version 2.0, in this case for the Spring Social distribution. ==, +++ b/docs/src/info/readme.txt, +++ b/spring-social-core/src/main/java/org/springframework/social/core/package-info.java, +/**, + * Core Spring Social classes, + */, +package org.springframework.social.core;, +++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/src/info/changelog.txt, +++ b/docs/src/info/notice.txt, +   == Version 2.0, in this case for the Spring Social distribution. ==, +++ b/docs/src/info/readme.txt, +++ b/spring-social-core/src/main/java/org/springframework/social/core/package-info.java, +/**, + * Core Spring Social classes, + */, +package org.springframework.social.core;, +++ b/spring-social-core/src/main/java/org/springframework/social/facebook/package-info.java, +/**, + * FacebookTemplate and supporting classes, + */, +package org.springframework.social.facebook;, +++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/src/info/changelog.txt, +++ b/docs/src/info/notice.txt, +   == Version 2.0, in this case for the Spring Social distribution. ==, +++ b/docs/src/info/readme.txt, +++ b/spring-social-core/src/main/java/org/springframework/social/core/package-info.java, +/**, + * Core Spring Social classes, + */, +package org.springframework.social.core;, +++ b/spring-social-core/src/main/java/org/springframework/social/facebook/package-info.java, +/**, + * FacebookTemplate and supporting classes, + */, +package org.springframework.social.facebook;, +++ b/spring-social-core/src/main/java/org/springframework/social/greenhouse/package-info.java, +/**, + * GreenhouseTemplate and supporting classes, + */, +package org.springframework.social.greenhouse;, +++ b/docs/build.gradle, +description = "Spring Social Documentation", +    title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social]
[+++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/httpclient/HttpComponentsClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support.httpclient;, +, +import java.io.IOException;, +import java.net.URI;, +import java.util.List;, +import java.util.Map;, +, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpEntityEnclosingRequest;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.protocol.HTTP;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.AbstractBufferingClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * {@link org.springframework.http.client.ClientHttpRequest} implementation that uses, + * Apache HTTPComponents HttpClient to execute requests., + *, + * <p>Created via the {@link HttpComponentsClientHttpRequestFactory}., + *, + * @author Oleg Kalnichevski, + * @author Arjen Poutsma, + * @since 3.0, + * @see HttpComponentsClientHttpRequestFactory#createRequest(URI, HttpMethod), + */, +final class HttpComponentsClientHttpRequest extends AbstractBufferingClientHttpRequest {, +, +	private final HttpClient httpClient;, +, +	private final HttpUriRequest httpRequest;, +, +	public HttpComponentsClientHttpRequest(HttpClient httpClient, HttpUriRequest httpRequest) {, +		this.httpClient = httpClient;, +		this.httpRequest = httpRequest;, +	}, +, +	public HttpMethod getMethod() {, +		return HttpMethod.valueOf(httpRequest.getMethod());, +	}, +, +	public URI getURI() {, +		return httpRequest.getURI();, +	}, +, +	@Override, +	protected ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {, +		for (Map.Entry<String, List<String>> entry : headers.entrySet()) {, +			String headerName = entry.getKey();, +			if (!headerName.equalsIgnoreCase(HTTP.CONTENT_LEN) &&, +					!headerName.equalsIgnoreCase(HTTP.TRANSFER_ENCODING)) {, +				for (String headerValue : entry.getValue()) {, +					httpRequest.addHeader(headerName, headerValue);]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +			List<Connection<?>> connections = repo.findConnections(data.getProviderId());]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		return connectView();, +		setNoCache(request);, +			return connectView(providerId); , +			return connectedView(providerId);			, +		return connectionStatusRedirect(providerId);, +	}, +, +	// subclassing hooks, +	, +	/**, +	 * Returns the ConnectionFactoryLocator., +	 */, +	protected ConnectionFactoryLocator getConnectionFactoryLocator() {, +		return connectionFactoryLocator;, +	}, +	, +	/**, +	 * Returns the ConnectionRepository., +	 */, +	protected ConnectionRepository getConnectionRepository() {, +		return connectionRepository;, +	}, +	, +	/**, +	 * Returns a RedirectView with the URL to redirect to after a connection is created or deleted., +	 * Defaults to "/connect/{providerId}" relative to the servlet context path. , +	 * May be overridden to handle custom redirection needs., +	 * @param providerId the ID of the provider for which a connection was created or deleted., +	 */, +	protected RedirectView connectionStatusRedirect(String providerId) {, +		return new RedirectView("/connect/" + providerId, true);, +	}, +, +	/**, +	 * Returns the view name of a general connection status page, typically displaying the user's connection status for all providers., +	 * Defaults to "/connect/status". May be overridden to return a custom view name., +	 */, +	protected String connectView() {, +		return getViewPath() + "status";, +	}, +, +	/**, +	 * Returns the view name of a page to display for a provider when the user is not connected to the provider., +	 * Typically this page would offer the user an opportunity to create a connection with the provider., +	 * Defaults to "connect/{providerId}Connect". May be overridden to return a custom view name., +	 * @param providerId the ID of the provider to display the connection status for., +	 */, +	protected String connectView(String providerId) {, +		return getViewPath() + providerId + "Connect";		, +	}, +, +	/**, +	 * Returns the view name of a page to display for a provider when the user is connected to the provider., +	 * Typically this page would allow the user to disconnect from the provider., +	 * Defaults to "connect/{providerId}Connected". May be overridden to return a custom view name., +	 * @param providerId the ID of the provider to display the connection status for., +	 */, +	protected String connectedView(String providerId) {, +		return getViewPath() + providerId + "Connected";		]
[+++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import static org.junit.Assert.*;, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-config/src/test/resources/org/springframework/social/config/xml/socialNamespaceHandlerTests-serviceProviders.xml, +	<bean id="connectionRepository" class="org.springframework.social.connect.test.StubConnectionRepository" />]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		Assert.notNull(token.getConnection());, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		Assert.notNull(token.getConnection());, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth1AuthenticationServiceTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +		assertTrue(token.getConnection() instanceof Connection);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		Assert.notNull(token.getConnection());, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth1AuthenticationServiceTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +		assertTrue(token.getConnection() instanceof Connection);, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth2AuthenticationServiceTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +import static org.springframework.social.security.test.ArgMatchers.oAuth2Parameters;, +		assertTrue(token.getConnection() instanceof Connection);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, + * Strategy interface used to determine the account ID of the current user.]
[+++ b/gradle.properties, +version=1.1.0.BUILD-SNAPSHOT]
[+++ b/docs/src/reference/docbook/connecting.xml, +            ConnectionFactoryLocator connectionFactoryLocator, Provider<ConnectionRepository> connectionRepositoryProvider) {, +<bean class="org.springframework.social.connect.web.ConnectController">, +        ConnectionFactoryLocator connectionFactoryLocator, Provider<ConnectionRepository> connectionRepositoryProvider) {, +<bean class="org.springframework.social.connect.web.ConnectController">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +	void updateConnection(ServiceProviderConnection<?> connection);, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +	void updateConnection(ServiceProviderConnection<?> connection);, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import java.util.ArrayList;, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	public MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers) {, +		MapSqlParameterSource parameters = new MapSqlParameterSource();, +		parameters.addValue("localUserId", getLocalUserId());, +			parameters.addValue("providerId_" + providerId, providerId);, +			parameters.addValue("providerUserIds_" + providerId, entry.getValue());, +		List<ServiceProviderConnection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, +		MultiValueMap<String, ServiceProviderConnection<?>> connectionsForUsers = new LinkedMultiValueMap<String, ServiceProviderConnection<?>>();, +		for (ServiceProviderConnection<?> connection : resultList) {, +			String providerId = connection.getKey().getProviderId();, +			List<String> userIds = providerUsers.get(providerId);, +			List<ServiceProviderConnection<?>> connections = connectionsForUsers.get(providerId);, +			if (connections == null) {, +				connections = new ArrayList<ServiceProviderConnection<?>>(userIds.size());, +				for (int i = 0; i < userIds.size(); i++) {, +					connections.add(null);, +				}, +				connectionsForUsers.put(providerId, connections);, +			}, +			String providerUserId = connection.getKey().getProviderUserId();, +			int connectionIndex = userIds.indexOf(providerUserId);, +			connections.set(connectionIndex, connection);, +		}, +		return connectionsForUsers;, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and rank = 1", connectionMapper, getLocalUserId(), getProviderId(serviceApiType));, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and providerUserId = ?", connectionMapper, getLocalUserId(), getProviderId(serviceApiType), providerUserId);, +	public void updateConnection(ServiceProviderConnection<?> connection) {, +		ServiceProviderConnectionData data = connection.createData();, +		jdbcTemplate.update("update ServiceProviderConnection set profileName = ?, profileUrl = ?, profilePictureUrl = ?, accessToken = ?, secret = ?, refreshToken = ?, expireTime = ? where localUserId = ? and providerId = ? and providerUserId = ?",, +				data.getProfileName(), data.getProfileUrl(), data.getProfilePictureUrl(), encrypt(data.getAccessToken()), encrypt(data.getSecret()), encrypt(data.getRefreshToken()), data.getExpireTime(),, +				getLocalUserId(), data.getProviderId(), data.getProviderUserId());, +	}, +, +			return new ServiceProviderConnectionData(rs.getString("providerId"), rs.getString("providerUserId"), rs.getString("profileName"), rs.getString("profileUrl"), rs.getString("profilePictureUrl"),, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +	void updateConnection(ServiceProviderConnection<?> connection);, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import java.util.ArrayList;, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	public MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers) {, +		MapSqlParameterSource parameters = new MapSqlParameterSource();, +		parameters.addValue("localUserId", getLocalUserId());, +			parameters.addValue("providerId_" + providerId, providerId);, +			parameters.addValue("providerUserIds_" + providerId, entry.getValue());, +		List<ServiceProviderConnection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, +		MultiValueMap<String, ServiceProviderConnection<?>> connectionsForUsers = new LinkedMultiValueMap<String, ServiceProviderConnection<?>>();, +		for (ServiceProviderConnection<?> connection : resultList) {, +			String providerId = connection.getKey().getProviderId();, +			List<String> userIds = providerUsers.get(providerId);, +			List<ServiceProviderConnection<?>> connections = connectionsForUsers.get(providerId);, +			if (connections == null) {, +				connections = new ArrayList<ServiceProviderConnection<?>>(userIds.size());, +				for (int i = 0; i < userIds.size(); i++) {, +					connections.add(null);, +				}, +				connectionsForUsers.put(providerId, connections);, +			}, +			String providerUserId = connection.getKey().getProviderUserId();, +			int connectionIndex = userIds.indexOf(providerUserId);, +			connections.set(connectionIndex, connection);, +		}, +		return connectionsForUsers;, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and rank = 1", connectionMapper, getLocalUserId(), getProviderId(serviceApiType));, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and providerUserId = ?", connectionMapper, getLocalUserId(), getProviderId(serviceApiType), providerUserId);, +	public void updateConnection(ServiceProviderConnection<?> connection) {, +		ServiceProviderConnectionData data = connection.createData();, +		jdbcTemplate.update("update ServiceProviderConnection set profileName = ?, profileUrl = ?, profilePictureUrl = ?, accessToken = ?, secret = ?, refreshToken = ?, expireTime = ? where localUserId = ? and providerId = ? and providerUserId = ?",, +				data.getProfileName(), data.getProfileUrl(), data.getProfilePictureUrl(), encrypt(data.getAccessToken()), encrypt(data.getSecret()), encrypt(data.getRefreshToken()), data.getExpireTime(),, +				getLocalUserId(), data.getProviderId(), data.getProviderUserId());, +	}, +, +			return new ServiceProviderConnectionData(rs.getString("providerId"), rs.getString("providerUserId"), rs.getString("profileName"), rs.getString("profileUrl"), rs.getString("profilePictureUrl"),, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +	void updateConnection(ServiceProviderConnection<?> connection);]
[+++ b/build.gradle, +project('spring-social-web') {, +    description = 'Spring Web Integration', +++ b/build.gradle, +project('spring-social-web') {, +    description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/build.gradle, +project('spring-social-web') {, +    description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/build.gradle, +project('spring-social-web') {, +    description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/build.gradle, +project('spring-social-web') {, +    description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/settings.gradle, +include 'spring-social-web', +++ b/build.gradle, +project('spring-social-web') {, +    description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/settings.gradle, +include 'spring-social-web', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, String> requestParameters = new HashMap<String, String>();, +		requestParameters.put("client_id", clientId);, +		requestParameters.put("client_secret", clientSecret);, +		requestParameters.put("code", authorizationCode);, +		requestParameters.put("redirect_uri", redirectUri);, +		requestParameters.put("grant_type", "authorization_code");, +		Map<String, String> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(result.get("access_token"), result.get("refresh_token"));, +++ b/build.gradle, +project('spring-social-web') {, +    description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/settings.gradle, +include 'spring-social-web', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, String> requestParameters = new HashMap<String, String>();, +		requestParameters.put("client_id", clientId);, +		requestParameters.put("client_secret", clientSecret);, +		requestParameters.put("code", authorizationCode);, +		requestParameters.put("redirect_uri", redirectUri);, +		requestParameters.put("grant_type", "authorization_code");, +		Map<String, String> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(result.get("access_token"), result.get("refresh_token"));, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/ConnectController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.web.connect;, +, +import java.io.Serializable;, +import java.security.Principal;, +import java.util.Collections;, +import java.util.List;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, +		@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, +		@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AbstractResponseExtractor.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, +		@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AbstractResponseExtractor.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AlbumResponseExtractor.java, +import org.springframework.social.facebook.types.Reference;, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, +		@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AbstractResponseExtractor.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AlbumResponseExtractor.java, +import org.springframework.social.facebook.types.Reference;, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/CheckinResponseExtractor.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, +		@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AbstractResponseExtractor.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AlbumResponseExtractor.java, +import org.springframework.social.facebook.types.Reference;, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/CheckinResponseExtractor.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/CommentResponseExtractor.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, +		@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AbstractResponseExtractor.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AlbumResponseExtractor.java, +import org.springframework.social.facebook.types.Reference;, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/CheckinResponseExtractor.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/CommentResponseExtractor.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/EducationResponseExtractor.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java]
[+++ b/gradle.properties, +springSecurityVersion=5.0.0.M1, +springVersion=5.0.0.RC1, +++ b/gradle.properties, +springSecurityVersion=5.0.0.M1, +springVersion=5.0.0.RC1, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +import java.util.Base64;, +			signatureBytes = Base64.getEncoder().encode(signatureBytes);, +++ b/gradle.properties, +springSecurityVersion=5.0.0.M1, +springVersion=5.0.0.RC1, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +import java.util.Base64;, +			signatureBytes = Base64.getEncoder().encode(signatureBytes);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/PreemptiveBasicAuthClientHttpRequestInterceptor.java, +import java.util.Base64;, +		request.getHeaders().set("Authorization", "Basic " + new String(Base64.getEncoder().encode((username + ":" + password).getBytes(charset)), charset));]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/build.gradle, +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +project('spring-social-test') {, +    description = 'Rest Template Test Support', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +    }, +}, +, +++ b/build.gradle, +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +project('spring-social-test') {, +    description = 'Rest Template Test Support', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-test', +++ b/build.gradle, +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +project('spring-social-test') {, +    description = 'Rest Template Test Support', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-test', +++ /dev/null, +++ b/build.gradle, +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +project('spring-social-test') {, +    description = 'Rest Template Test Support', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-test', +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +project('spring-social-test') {, +    description = 'Rest Template Test Support', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-test', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +        testCompile project(':spring-social-test'), +project('spring-social-test') {, +    description = 'Rest Template Test Support', +    dependencies {]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	public static Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +	private final UserRepository userRepository;, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders, UserRepository userRepository) {, +		this.userRepository = userRepository;, +, +		model.addAttribute("user", userRepository.findUserByUsername(user.getName()));, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;]
[+++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookOperations facebook = facebookProvider.getServiceOperations(1, screenName);, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookOperations facebook = facebookProvider.getServiceOperations(1, screenName);, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="accountIdResolver" />, +	, +	<!-- Account ID resolver used internally by the connect controller -->				, +	<bean id="accountIdResolver" , +			class="org.springframework.social.samples.facebook.FacebookShowcaseAccountIdResolver" />, +, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookOperations facebook = facebookProvider.getServiceOperations(1, screenName);, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="accountIdResolver" />, +	, +	<!-- Account ID resolver used internally by the connect controller -->				, +	<bean id="accountIdResolver" , +			class="org.springframework.social.samples.facebook.FacebookShowcaseAccountIdResolver" />, +, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.connect.jdbc.JdbcServiceProviderFactory">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link ServiceProviderConnection} model and a specific provider API model., + * @author Keith Donald, + * @param <S> the service API, + */, +public interface ServiceApiAdapter<S> {, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#test()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#getUser()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return the uniform service provider user model, +	 */, +	ServiceProviderUser getUser(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#updateStatus(String)} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @param message the status message, +	 */, +	void updateStatus(S serviceApi, String message);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link ServiceProviderConnection} model and a specific provider API model., + * @author Keith Donald, + * @param <S> the service API, + */, +public interface ServiceApiAdapter<S> {, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#test()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#getUser()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return the uniform service provider user model, +	 */, +	ServiceProviderUser getUser(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#updateStatus(String)} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @param message the status message, +	 */, +	void updateStatus(S serviceApi, String message);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties.]
[+++ b/pom.xml, +, +, +		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +		<!-- dist.* properties are used by the antrun tasks below -->, +		<dist.id>spring-social</dist.id>, +		<dist.name>Spring Social</dist.name>, +		<dist.key>SOCIAL</dist.key>, +		<dist.version>${project.version}</dist.version>, +		<dist.releaseType>snapshot</dist.releaseType>, +		<dist.finalName>${dist.id}-${dist.version}</dist.finalName>, +		<dist.fileName>${dist.finalName}.zip</dist.fileName>, +		<dist.filePath>target/${dist.fileName}</dist.filePath>, +		<dist.bucketName>dist.springframework.org</dist.bucketName>, +		<!-- these properties should be in ~/.m2/settings.xml, +		<dist.accessKey>s3 access key</dist.accessKey>, +		<dist.secretKey>s3 secret key</dist.secretKey>, +		-->, +	<profiles>, +		<profile>, +			<id>staging</id>, +			<distributionManagement>, +				<site>, +					<id>spring-site-staging</id>, +					<url>file:///${java.io.tmpdir}/spring-social/docs/${project.version}</url>, +				</site>, +				<repository>, +					<id>spring-milestone-staging</id>, +					<url>file:///${java.io.tmpdir}/spring-social/milestone</url>, +				</repository>, +				<snapshotRepository>, +					<id>spring-snapshot-staging</id>, +					<url>file:///${java.io.tmpdir}/spring-social/snapshot</url>, +				</snapshotRepository>, +			</distributionManagement>, +		</profile>, +	</profiles>, +	<distributionManagement>, +		<!-- see 'staging' profile for dry-run deployment settings -->, +		<downloadUrl>http://www.springsource.com/download/community</downloadUrl>, +		<site>, +			<id>spring-site</id>, +			<url>scp://static.springframework.org/var/www/domains/springframework.org/static/htdocs/spring-social/docs/${project.version}</url>, +		</site>, +		<repository>, +			<id>spring-milestone</id>, +			<name>Spring Milestone Repository</name>, +			<url>s3://maven.springframework.org/milestone</url>, +		</repository>, +		<snapshotRepository>, +			<id>spring-snapshot</id>, +			<name>Spring Snapshot Repository</name>, +			<url>s3://maven.springframework.org/snapshot</url>, +		</snapshotRepository>, +	</distributionManagement>	, +	]
[+++ b/gradle.properties, +junitVersion=4.11, +httpComponentsVersion=4.3.1, +springVersion=4.1.6.BUILD-SNAPSHOT, +springSnapshotVersion=latest.integration, +hamcrestVersion=1.3, +version=1.1.2.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +servletApiVersion=3.0.1, +springReleaseVersion=latest.release, +mockitoVersion=1.10.8, +javaxInjectVersion=1, +thymeleafVersion=2.1.2.RELEASE]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	// sublassing hooks, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	// sublassing hooks, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	// sublassing hooks, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionKey.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false.]
[+++ b/build.gradle, +, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public String getConsumerKey() {, +		return consumerKey;, +	}, +, +	public String getConsumerSecret() {, +		return consumerSecret;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public String getConsumerKey() {, +		return consumerKey;, +	}, +, +	public String getConsumerSecret() {, +		return consumerSecret;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	private final String clientId;, +, +	private final String clientSecret;, +	, +	public AbstractOAuth2ServiceProvider(String id, String clientId, String clientSecret, ConnectionRepository connectionRepository, OAuth2Operations oauth2Operations) {, +		this.clientId = clientId;, +		this.clientSecret = clientSecret;, +	public String getClientId() {, +		return clientId;, +	}, +, +	public String getClientSecret() {, +		return clientSecret;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public String getConsumerKey() {, +		return consumerKey;, +	}, +, +	public String getConsumerSecret() {, +		return consumerSecret;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	private final String clientId;, +, +	private final String clientSecret;, +	, +	public AbstractOAuth2ServiceProvider(String id, String clientId, String clientSecret, ConnectionRepository connectionRepository, OAuth2Operations oauth2Operations) {, +		this.clientId = clientId;, +		this.clientSecret = clientSecret;, +	public String getClientId() {, +		return clientId;, +	}, +, +	public String getClientSecret() {, +		return clientSecret;, +	}, +, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/OAuth2ServiceProviderTest.java, +import static org.junit.Assert.*;, +			super("test", "key", "secret", connectionRepository, new StubOAuth2Operations());, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public String getConsumerKey() {, +		return consumerKey;, +	}, +, +	public String getConsumerSecret() {, +		return consumerSecret;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	private final String clientId;, +, +	private final String clientSecret;, +	, +	public AbstractOAuth2ServiceProvider(String id, String clientId, String clientSecret, ConnectionRepository connectionRepository, OAuth2Operations oauth2Operations) {, +		this.clientId = clientId;, +		this.clientSecret = clientSecret;, +	public String getClientId() {, +		return clientId;, +	}, +, +	public String getClientSecret() {, +		return clientSecret;, +	}, +, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/OAuth2ServiceProviderTest.java, +import static org.junit.Assert.*;, +			super("test", "key", "secret", connectionRepository, new StubOAuth2Operations());, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), getIntegerValue(result, "expires_in"), result);, +	}, +, +	// Retrieves object from map into an Integer, regardless of the object's actual type. Allows for flexibility in object type (eg, "3600" vs 3600)., +	private Integer getIntegerValue(Map<String, Object> map, String key) {, +		Object object = map.get(key);		 , +		return object != null ? , +				Integer.valueOf(String.valueOf(object)) : // normalize to String before creating integer value; , +				null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), getIntegerValue(result, "expires_in"), result);, +	}, +, +	// Retrieves object from map into an Integer, regardless of the object's actual type. Allows for flexibility in object type (eg, "3600" vs 3600)., +	private Integer getIntegerValue(Map<String, Object> map, String key) {, +		Object object = map.get(key);		 , +		return object != null ? , +				Integer.valueOf(String.valueOf(object)) : // normalize to String before creating integer value; , +				null;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	}, +, +	@Test, +	public void exchangeForAccess_jsonResponse_expiresInAsString() {, +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken_expiresInAsString.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +		long approximateExpirationTime = System.currentTimeMillis() + 40735000;, +		long actualExpirationTime = (long) accessGrant.getExpireTime();, +		//allow for 1 second of wiggle room on expiration time., +		assertTrue(approximateExpirationTime - actualExpirationTime < 1000);, +		assertEquals("read", accessGrant.getScope());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), getIntegerValue(result, "expires_in"), result);, +	}, +, +	// Retrieves object from map into an Integer, regardless of the object's actual type. Allows for flexibility in object type (eg, "3600" vs 3600)., +	private Integer getIntegerValue(Map<String, Object> map, String key) {, +		Object object = map.get(key);		 , +		return object != null ? , +				Integer.valueOf(String.valueOf(object)) : // normalize to String before creating integer value; , +				null;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	}, +, +	@Test, +	public void exchangeForAccess_jsonResponse_expiresInAsString() {, +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken_expiresInAsString.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +		long approximateExpirationTime = System.currentTimeMillis() + 40735000;, +		long actualExpirationTime = (long) accessGrant.getExpireTime();, +		//allow for 1 second of wiggle room on expiration time., +		assertTrue(approximateExpirationTime - actualExpirationTime < 1000);, +		assertEquals("read", accessGrant.getScope());, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken_expiresInAsString.json, +{, +	"expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, +	"scope":"read",, +	"expires_in":"40735",, +	"username":"cwagon",, +	"access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, +	"refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}]
[+++ b/docs/src/reference/docbook/apis.xml, +++ b/docs/src/reference/docbook/apis.xml, +++ b/docs/src/reference/docbook/signin.xml, +			In order to ease sign in for their users, many applications allow sign in with a service provider such as Twitter or Facebook., +			With this authentication technique, the user signs into (or may already be signed into) his or her provider account., +			The application then tries to match that provider account to a local user account., +			If a match is found, the user is automatically signed into the application., +			Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user with the application., +    <constructor-arg value="${application.secureUrl}" />, +    <!-- relies on by-type autowiring for the other constructor-args -->    , +			The <classname>ProviderSignInController</classname> bean requires a single explicit <code><![CDATA[<constructor-arg>]]></code> value to specify the application's base secure URL., +			<listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow by redirecting to the provider's authentication endpoint.</para></listitem>, +			<listitem><para><code>GET /signin/{providerId}?code={verifier}</code> - Receives the authentication callback from the provider, accepting a code. Exchanges this code for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +			<listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow. This involves fetching a request token from the provider and then redirecting to Provider's authentication endpoint.</para></listitem>, +			<listitem><para><code>GET /signin/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +				<listitem><para>A <interfacename>ConnectionFactoryLocator</interfacename> to lookup the ConnectionFactory used to create the Connection to the provider.</para></listitem>, +				<listitem><para>A <interfacename>UsersConnectionRepository</interfacename> to find the user that has the connection to the provider user attempting to sign-in.</para></listitem>, +				<listitem><para>A <interfacename>ConnectionRepository</interfacename> to persist a new connection when a new user signs up with the application after a failed sign-in attempt.</para></listitem>, +				<listitem><para>A <interfacename>SignInService</interfacename> to sign a user into the application when a matching connection is found.</para></listitem>, +@Service, +        SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(localUserId, null, null));, +			If <classname>ProviderSignInController</classname> can't find a local user associated with a provider user attempting to sign-in, it will put the sign-in on hold and redirect the user to an application sign up page., +			For example, the following configuration of <classname>ProviderSignInController</classname> sets the sign up URL to "/register": , +    <property name="signupUrl" value="/register" />]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInAttempt.java, +import org.springframework.social.connect.DuplicateConnectionException;, +	 * @throws DuplicateConnectionException if the user already has this connection, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInAttempt.java, +import org.springframework.social.connect.DuplicateConnectionException;, +	 * @throws DuplicateConnectionException if the user already has this connection, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, +	private final SignInAdapter signInAdapter;, +	private String signUpUrl = "/signup";, +	private String postSignInUrl = "/";, +	private final String controllerCallbackUrl;, +	 * @param signInAdapter an adapter between this controller and the local application's user sign-in system., +			Provider<ConnectionRepository> connectionRepositoryProvider, SignInAdapter signInAdapter) {, +		this.signInAdapter = signInAdapter;, +		this.controllerCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	 * Sets the URL to redirect the user to if no local user account can be mapped when signing in using a provider., +	 * Defaults to "/signup". , +	 * @param signUpUrl the URL of the sign up page., +	public void setSignUpUrl(String signUpUrl) {, +		this.signUpUrl = signUpUrl; , + 	 * Sets the URL to redirect the user to after signing in using a provider., + 	 * Defaults to "/"., +	 * @param postSignInUrl the postSignIn URL, +	public void setPostSignInUrl(String postSignInUrl) {, +		this.postSignInUrl = postSignInUrl;, +	public RedirectView signIn(@PathVariable String providerId, WebRequest request) {, +			return new RedirectView(oauth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request));, +			return new RedirectView(oauth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request));, +			return new RedirectView(customAuthUrl(connectionFactory, request));, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String)}., +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String)}., +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl(providerId, request), null);, +	 * Default implementation throws an {@link UnsupportedOperationException} indicating the custom {@link ConnectionFactory} is not supported., +	protected String customAuthUrl(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		throw new UnsupportedOperationException("Sign in using provider '" + connectionFactory.getProviderId() + "' not supported");		, +	private String oauth1Url(OAuth1ConnectionFactory<?> connectionFactory, WebRequest request) {, +		OAuth1Operations oauth1Ops = ((OAuth1ConnectionFactory<?>) connectionFactory).getOAuthOperations();, +		OAuthToken requestToken;, +		String authenticateUrl;, +		if (oauth1Ops.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			requestToken = oauth1Ops.fetchRequestToken(callbackUrl(connectionFactory.getProviderId(), request), null);				, +			authenticateUrl = oauth1Ops.buildAuthenticateUrl(requestToken.getValue(), OAuth1Parameters.NONE);, +		} else {, +			requestToken = oauth1Ops.fetchRequestToken(null, null);				, +			authenticateUrl = oauth1Ops.buildAuthenticateUrl(requestToken.getValue(), new OAuth1Parameters(callbackUrl(connectionFactory.getProviderId(), request)));, +		}, +		request.setAttribute(OAUTH_TOKEN_ATTRIBUTE, requestToken, WebRequest.SCOPE_SESSION);, +		return authenticateUrl;, +	}, +, +	private String oauth2Url(OAuth2ConnectionFactory<?> connectionFactory, WebRequest request) {, +		OAuth2Operations oauth2Ops = ((OAuth2ConnectionFactory<?>) connectionFactory).getOAuthOperations();, +		String authenticateUrl = oauth2Ops.buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE, new OAuth2Parameters(callbackUrl(connectionFactory.getProviderId(), request), request.getParameter("scope")));, +		return authenticateUrl;, +	}, +, +	private String callbackUrl(String providerId, WebRequest request) {, +		return controllerCallbackUrl + "/" + providerId;, +			return redirect(signUpUrl);, +			signInAdapter.signIn(localUserId);		, +			return redirect(postSignInUrl);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInAttempt.java, +import org.springframework.social.connect.DuplicateConnectionException;, +	 * @throws DuplicateConnectionException if the user already has this connection, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, +	private final SignInAdapter signInAdapter;, +	private String signUpUrl = "/signup";, +	private String postSignInUrl = "/";, +	private final String controllerCallbackUrl;, +	 * @param signInAdapter an adapter between this controller and the local application's user sign-in system., +			Provider<ConnectionRepository> connectionRepositoryProvider, SignInAdapter signInAdapter) {, +		this.signInAdapter = signInAdapter;, +		this.controllerCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	 * Sets the URL to redirect the user to if no local user account can be mapped when signing in using a provider., +	 * Defaults to "/signup". , +	 * @param signUpUrl the URL of the sign up page., +	public void setSignUpUrl(String signUpUrl) {, +		this.signUpUrl = signUpUrl; , + 	 * Sets the URL to redirect the user to after signing in using a provider., + 	 * Defaults to "/"., +	 * @param postSignInUrl the postSignIn URL, +	public void setPostSignInUrl(String postSignInUrl) {, +		this.postSignInUrl = postSignInUrl;, +	public RedirectView signIn(@PathVariable String providerId, WebRequest request) {, +			return new RedirectView(oauth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request));, +			return new RedirectView(oauth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request));, +			return new RedirectView(customAuthUrl(connectionFactory, request));, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String)}., +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String)}., +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl(providerId, request), null);, +	 * Default implementation throws an {@link UnsupportedOperationException} indicating the custom {@link ConnectionFactory} is not supported., +	protected String customAuthUrl(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		throw new UnsupportedOperationException("Sign in using provider '" + connectionFactory.getProviderId() + "' not supported");		, +	private String oauth1Url(OAuth1ConnectionFactory<?> connectionFactory, WebRequest request) {, +		OAuth1Operations oauth1Ops = ((OAuth1ConnectionFactory<?>) connectionFactory).getOAuthOperations();, +		OAuthToken requestToken;, +		String authenticateUrl;, +		if (oauth1Ops.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			requestToken = oauth1Ops.fetchRequestToken(callbackUrl(connectionFactory.getProviderId(), request), null);				, +			authenticateUrl = oauth1Ops.buildAuthenticateUrl(requestToken.getValue(), OAuth1Parameters.NONE);]
[+++ b/docs/src/reference/docbook/overview.xml, +  <title>Spring Social Overview</title>, +++ b/docs/src/reference/docbook/overview.xml, +  <title>Spring Social Overview</title>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +			for (Iterator<Entry<String, List<String>>> additionalParams = additionalParameters.entrySet().iterator(); additionalParams.hasNext();) {, +		MultiValueMap<String, String> customAuthorizeParameters = getCustomAuthorizationParameters();, +		if (customAuthorizeParameters == null) {, +			if(clientAdditionalParameters != null) {, +				customAuthorizeParameters.putAll(clientAdditionalParameters);, +			}, +			return customAuthorizeParameters;, +++ b/docs/src/reference/docbook/overview.xml, +  <title>Spring Social Overview</title>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +			for (Iterator<Entry<String, List<String>>> additionalParams = additionalParameters.entrySet().iterator(); additionalParams.hasNext();) {, +		MultiValueMap<String, String> customAuthorizeParameters = getCustomAuthorizationParameters();, +		if (customAuthorizeParameters == null) {, +			if(clientAdditionalParameters != null) {, +				customAuthorizeParameters.putAll(clientAdditionalParameters);, +			}, +			return customAuthorizeParameters;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.social.test.client.RequestMatchers.*;, +import static org.springframework.social.test.client.ResponseCreators.*;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private OAuth1Template customOauth10;, +, +, +		customOauth10 = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL,, +				"https://www.someprovider.com/oauth/authorize", null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10) {, +			protected MultiValueMap<String,String> getCustomAuthorizationParameters() {, +				System.out.println("CUSTOM PARAMETERS");, +				MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();, +				parameters.set("custom_parameter", "custom_parameter_value");, +				return parameters;, +			};, +		};, +	public void buildAuthorizeUrl_customAuthorizeParameters() {, +		assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback&custom_parameter=custom_parameter_value",, +				customOauth10.buildAuthorizeUrl("request_token", new OAuth1Parameters("http://www.someclient.com/oauth/callback")));, +	}, +, +	@Test]
[+++ b/gradle.properties, +springVersion=5.0.0.M3]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import javax.servlet.http.HttpSession;, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +	, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import javax.servlet.http.HttpSession;, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +	, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	private String defaultFailureUrl;, +, +		if (defaultFailureUrl != null) {, +			filter.setDefaultFailureUrl(defaultFailureUrl);, +		}, +		, +	 * Sets the URL to land on after a failed login., +	 * @param postFailureUrl the URL to redirect to after a failed login, +	 * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl the URL to redirect to after an authentication fail or authorization deny, +	 * @return this SpringSocialConfigurer for chained configuration, +		this.defaultFailureUrl = defaultFailureUrl;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import javax.servlet.http.HttpSession;, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +	, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	private String defaultFailureUrl;, +, +		if (defaultFailureUrl != null) {, +			filter.setDefaultFailureUrl(defaultFailureUrl);, +		}, +		, +	 * Sets the URL to land on after a failed login., +	 * @param postFailureUrl the URL to redirect to after a failed login, +	 * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl the URL to redirect to after an authentication fail or authorization deny, +	 * @return this SpringSocialConfigurer for chained configuration, +		this.defaultFailureUrl = defaultFailureUrl;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +		StringBuffer sb = getProxyHeaderAwareRequestURL(request);, +	protected StringBuffer getProxyHeaderAwareRequestURL(HttpServletRequest request), +, +	{, +		String host = request.getHeader("Host");, +		if ( StringUtils.isEmpty(host) ), +		{, +			return request.getRequestURL();, +		}, +		StringBuffer sb = new StringBuffer();, +		String schemeHeader = request.getHeader("X-Forwarded-Proto");, +		String portHeader = request.getHeader("X-Forwarded-Port");, +		String scheme = StringUtils.isEmpty(schemeHeader) ? "http" : schemeHeader;, +		String port = StringUtils.isEmpty(portHeader) ? "80" : portHeader;, +		if ( scheme.equals("http") && port.equals("80") ), +		{, +			port = "";, +		}, +		if ( scheme.equals("https") && port.equals("443") ), +		{, +			port = "";, +		}, +		sb.append(scheme);, +		sb.append("://");, +		sb.append(host);, +		if ( StringUtils.hasLength(port) ), +		{, +			sb.append(":");, +			sb.append(port);, +		}, +		sb.append(request.getRequestURI());, +		return sb;, +	}]
[+++ b/.gitmodules, +[submodule "buildSrc"], +	path = buildSrc, +	url = git://github.com/SpringSource/spring-build-gradle.git, +++ b/.gitmodules, +[submodule "buildSrc"], +	path = buildSrc, +	url = git://github.com/SpringSource/spring-build-gradle.git, +++ b/build.gradle, + import org.springframework.build.Version, +// @author Chris Beams, +apply plugin: 'base', +apply plugin: 'idea', +, +def buildSrcDir = "$rootDir/buildSrc", +apply from: "$buildSrcDir/wrapper.gradle", +apply from: "$buildSrcDir/maven-root-pom.gradle", +, +    version = new Version(springSocialVersion), +        mavenRepo urls: 'http://maven.springframework.org/snapshot', +        mavenCentral(), +    // add tasks for creating source jars and generating poms etc, +    apply from: "$buildSrcDir/maven-deployment.gradle", +, +    // add tasks for finding and publishing .xsd files, +    apply from: "$buildSrcDir/schema-publication.gradle", +// -----------------------------------------------------------------------------, +// Configuration for the docs subproject, +// -----------------------------------------------------------------------------, +project('docs') {, +    apply from: "$buildSrcDir/docs.gradle", +}, +++ b/.gitmodules, +[submodule "buildSrc"], +	path = buildSrc, +	url = git://github.com/SpringSource/spring-build-gradle.git, +++ b/build.gradle, + import org.springframework.build.Version, +// @author Chris Beams, +apply plugin: 'base', +apply plugin: 'idea', +, +def buildSrcDir = "$rootDir/buildSrc", +apply from: "$buildSrcDir/wrapper.gradle", +apply from: "$buildSrcDir/maven-root-pom.gradle", +, +    version = new Version(springSocialVersion), +        mavenRepo urls: 'http://maven.springframework.org/snapshot', +        mavenCentral(), +    // add tasks for creating source jars and generating poms etc, +    apply from: "$buildSrcDir/maven-deployment.gradle", +, +    // add tasks for finding and publishing .xsd files, +    apply from: "$buildSrcDir/schema-publication.gradle", +// -----------------------------------------------------------------------------, +// Configuration for the docs subproject, +// -----------------------------------------------------------------------------, +project('docs') {, +    apply from: "$buildSrcDir/docs.gradle", +}, +++ b/buildSrc, +Subproject commit 1aa2ac99e88cb108d4996cde527c5449ef24c6e3, +++ b/.gitmodules, +[submodule "buildSrc"], +	path = buildSrc, +	url = git://github.com/SpringSource/spring-build-gradle.git, +++ b/build.gradle, + import org.springframework.build.Version, +// @author Chris Beams, +apply plugin: 'base', +apply plugin: 'idea', +, +def buildSrcDir = "$rootDir/buildSrc", +apply from: "$buildSrcDir/wrapper.gradle", +apply from: "$buildSrcDir/maven-root-pom.gradle", +, +    version = new Version(springSocialVersion), +        mavenRepo urls: 'http://maven.springframework.org/snapshot', +        mavenCentral(), +    // add tasks for creating source jars and generating poms etc, +    apply from: "$buildSrcDir/maven-deployment.gradle", +, +    // add tasks for finding and publishing .xsd files, +    apply from: "$buildSrcDir/schema-publication.gradle", +// -----------------------------------------------------------------------------, +// Configuration for the docs subproject, +// -----------------------------------------------------------------------------, +project('docs') {, +    apply from: "$buildSrcDir/docs.gradle", +}, +++ b/buildSrc, +Subproject commit 1aa2ac99e88cb108d4996cde527c5449ef24c6e3, +++ /dev/null, +++ b/.gitmodules, +[submodule "buildSrc"], +	path = buildSrc, +	url = git://github.com/SpringSource/spring-build-gradle.git, +++ b/build.gradle, + import org.springframework.build.Version, +// @author Chris Beams]
[+++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2010 the original author or authors., + * Exception indicating that the authorization used during an operation invocation are invalid., +		super("The authorization invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2010 the original author or authors., + * Exception indicating that the authorization used during an operation invocation are invalid., +		super("The authorization invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Copyright 2010 the original author or authors., + * Exception indicating that an operation requiring authorization was attempted using an API binding that was created without authorization., +		super("Authorization is required for the operation, but the API binding was created without authorization.");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +	, +	private static boolean listBasedInterceptors = false;, +	, +	private static Method setInterceptorsMethod;, +	, +	static {, +		if (interceptorsSupported) {, +			try {, +				setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, +				listBasedInterceptors = true;, +			} catch (NoSuchMethodException e) {, +				try {, +					setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, +				} catch (NoSuchMethodException shouldntHappen) {}, +			}, +		}, +	}, +, +			OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, +			try {, +				if (listBasedInterceptors) {, +					List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +					interceptors.add(interceptor);, +					setInterceptorsMethod.invoke(client, interceptors);			, +				} else {, +					setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +				}, +			} catch (Exception shouldntHappen) {}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +	, +	private static boolean listBasedInterceptors = false;, +	, +	private static Method setInterceptorsMethod;, +	, +	static {, +		if (interceptorsSupported) {, +			try {, +				setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, +				listBasedInterceptors = true;, +			} catch (NoSuchMethodException e) {, +				try {, +					setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, +				} catch (NoSuchMethodException shouldntHappen) {}, +			}, +		}, +	}, +, +			OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, +			try {, +				if (listBasedInterceptors) {, +					List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +					interceptors.add(interceptor);, +					setInterceptorsMethod.invoke(client, interceptors);			, +				} else {, +					setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +				}, +			} catch (Exception shouldntHappen) {}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +	public static RestTemplate create(String accessToken, OAuth2Version version) {, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +		if (interceptorsSupported) {, +			// favored, +			OAuth2RequestInterceptor interceptor = new OAuth2RequestInterceptor(accessToken, version);, +			try {, +				if (listBasedInterceptors) {, +					List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +					interceptors.add(interceptor);, +					setInterceptorsMethod.invoke(client, interceptors);			, +				} else {, +					setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +				}, +			} catch (Exception shouldntHappen) {}, +		} else {, +			// 3.0.x compatibility, +			client.setRequestFactory(new Spring30OAuth2RequestFactory(client.getRequestFactory(), accessToken, version));, +		}, +		return client;				, +	}, +, +	public static ClientHttpRequestFactory addOAuthSigning(ClientHttpRequestFactory requestFactory, String accessToken, OAuth2Version version) {, +		if (interceptorsSupported) {, +			return requestFactory;, +		}, +		return new Spring30OAuth2RequestFactory(requestFactory, accessToken, version);, +	}, +]
[+++ b/docs/src/reference/docbook/index.xml, +    <title>Interacting</title>, +++ b/docs/src/reference/docbook/index.xml, +    <title>Interacting</title>, +++ b/docs/src/reference/docbook/signin.xml, +  <para>To make it easier for users to sign in to your application, Spring Social makes it possible for them to authenticate to your application by signing into either Twitter or Facebook.</para>, +  , +  <section xml:id="signin_with_twitter">, +      <title>Sign in with Twitter</title>, +      , +      <para>Spring Social's <classname>TwitterSigninController</classname> is a Spring MVC controller that processes the "Sign in with Twitter" flow described at <ulink url="http://dev.twitter.com/pages/sign_in_with_twitter"/>. Essentially, this process is an OAuth 1 authorization flow, quite similar to the flow that <classname>ConnectController</classname> processes for connecting an account with Twitter. The key difference is that instead of presenting the user with an authorization page that asks for permission to be granted to the application, the sign in flow presents a simple authentication page that only asks the user to sign in to Twitter.</para>, +      , +      <para>At the end of process, <classname>TwitterSigninController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application.</para>, +      , +      <para>To add "Sign in with Twitter" capability to your Spring application, configure <classname>TwitterSigninController</classname> as a bean in your Spring MVC application:</para>, +      , +      <programlisting><![CDATA[<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +	<constructor-arg ref="connectionRepository" />, +	<constructor-arg ref="signinGateway" />, +	<constructor-arg value="http://localhost:8080/myapplication" />, +</bean>]]></programlisting>, +, +      <para><classname>TwitterSigninController</classname> is constructed with three arguments:</para>, +      , +      <itemizedlist>, +          <listitem><para>A reference to a connection repository bean. After signing into Twitter, <classname>TwitterSigninController</classname> will use the connection repository to find an account ID that is connected to the Twitter profile.</para></listitem>, +          <listitem><para>A reference to an implementation of <interfacename>SignInControllerGateway</interfacename>, used to perform the actual authentication into the application.</para></listitem>, +          <listitem><para>The application's base URL, used to construct a callback URL for the OAuth flow.</para></listitem>, +      </itemizedlist>, +, +      <para><classname>TwitterSigninController</classname> supports the following flow:</para>, +, +      <itemizedlist>, +          <listitem><para><code>POST /signin/twitter</code> - Initiates the "Sign in with Twitter" flow, fetching a request token from Twitter and redirecting to Twitter's authentication page.</para></listitem>, +          <listitem><para><code>GET /signin/twitter?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from Twitter, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in gateway. </para>, +          <itemizedlist>, +              <listitem><para>If the received access token doesn't match any existing connection, <classname>TwitterSigninController</classname> will proceed to a no-connection view. The default no-connection view is "redirect:/signup".</para></listitem>, +          </itemizedlist>, +          </listitem>, +      </itemizedlist>, +, +      <para><classname>TwitterSigninController</classname> handles the authentication flow with Twitter, but relies on an implementation of <interfacename>SignInControllerGateway</interfacename> to perform the actual authentication into the application. <interfacename>SignInControllerGateway</interfacename> is defined as follows:</para>, +, +      <programlisting><![CDATA[public interface SignInControllerGateway {, +	void signIn(Serializable accountId);	, +}]]></programlisting>, +, +      <para>Different applications will implement security differently, so each application must implement <interfacename>SignInControllerGateway</interfacename> in a way that fits its unique security scheme.</para>, +      , +      <para>As an example, suppose that an application's security is based Spring Security and simply uses a user's account ID as their principal. In that case, a simple implementation of <interfacename>SignInControllerGateway</interfacename> might look like this:</para>, +, +      <programlisting><![CDATA[package org.springframework.social.showcase;, +import java.io.Serializable;, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +	public void signIn(Serializable accountId) {, +		SecurityContextHolder.getContext().setAuthentication(, +				new UsernamePasswordAuthenticationToken(accountId, null, null));, +	}, +}]]></programlisting>, +, +      <para>The last thing to do is to add a "Sign in with Twitter" button to your application:</para>, +          , +      <programlisting><![CDATA[<form id="tw_signin" action="<c:url value="/signin/twitter"/>" method="POST">, +	<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +</form>]]></programlisting>, +, +      <para>Clicking this button will trigger a POST request to "/signin/twitter", kicking off the Twitter sign in flow. If the user has not yet signed into Twitter, the user will be presented with the following page from Twitter:</para>, +, +    <mediaobject>, +      <imageobject role="fo">, +          <imagedata fileref="images/sign-in-with-twitter.png", +            format="PNG" align="center" scale="40"/>, +      </imageobject>, +      <imageobject role="html">, +          <imagedata fileref="images/sign-in-with-twitter.png" format="PNG" align="center" scale="40"/>, +      </imageobject>, +    </mediaobject>, +, +    <para>After signing in, the flow will redirect back to the application to complete the sign in process.</para>, +    , +    <para>If the user has already signed into Twitter prior to clicking the sign in button, Twitter will redirect the flow back to the application without presenting the user with a sign in page.</para>, +  </section>, +, +  <section xml:id="signin_with_facebook">, +      <title>Sign in with Facebook</title>, +      , +      <para>Spring Social's <classname>FacebookSigninController</classname>, when paired with Facebook's <code><![CDATA[<fb:login-button>]]></code> XFBML tag<footnote><para><ulink url="http://developers.facebook.com/docs/reference/plugins/login/"/></para></footnote>, enables a user to authenticate to an application by first signing into Facebook.</para>, +      , +      <para>Facebook's XFBML tag collection includes <code><![CDATA[<fb:login-button>]]></code>, which displays a login button. When a user clicks on that button, they will be presented with a Facebook Login dialog that looks similar to this:</para>, +      , +      <mediaobject>, +        <imageobject role="fo">, +            <imagedata fileref="images/sign-in-with-facebook.png", +              format="PNG" align="center" scale="40"/>, +        </imageobject>, +        <imageobject role="html">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, +	 * The key that identifies this ServiceProviderConnection., +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties., +	 * If false, indicates calls to the {@link #getServiceApi() serviceApi} will fail., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * An expired connection cannot be used; calls to {@link #test()} return false, and any service API invocations fail., +	 * If expired, you may call {@link #refresh()} to renew the connection., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +	 * Used to renew an expired connection., +	 * If the refresh operation is successful, {@link #hasExpired()} returns false., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, this method is a no-op., +	 * This method is a no-op if a status concept is not supported by the service provider., +	 * Sync's this connection object with the current state of the external user's profile., +	 * Used to support the transfer of connection state between layers of the application, such as to the database layer., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, +	 * The key that identifies this ServiceProviderConnection., +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties., +	 * If false, indicates calls to the {@link #getServiceApi() serviceApi} will fail., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * An expired connection cannot be used; calls to {@link #test()} return false, and any service API invocations fail., +	 * If expired, you may call {@link #refresh()} to renew the connection., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +	 * Used to renew an expired connection., +	 * If the refresh operation is successful, {@link #hasExpired()} returns false., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, this method is a no-op., +	 * This method is a no-op if a status concept is not supported by the service provider., +	 * Sync's this connection object with the current state of the external user's profile., +	 * Used to support the transfer of connection state between layers of the application, such as to the database layer., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +/**, + * A data transfer object that allows the internal state of a ServiceProviderConnection to be persisted and transferred between layers of an application., + * Some fields may be null depending on the specific type of ServiceProviderConnection., + * For example, an OAuth2ServiceProviderConnection has a null 'secret' field while an OAuth1ServiceProviderConnection has null 'refreshToken' and 'expireTime' fields., + * @author Keith Donald, + * @see ServiceProviderConnection#createData(), + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, +	 * The key that identifies this ServiceProviderConnection., +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties., +	 * If false, indicates calls to the {@link #getServiceApi() serviceApi} will fail., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * An expired connection cannot be used; calls to {@link #test()} return false, and any service API invocations fail., +	 * If expired, you may call {@link #refresh()} to renew the connection., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +	 * Used to renew an expired connection., +	 * If the refresh operation is successful, {@link #hasExpired()} returns false., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, this method is a no-op., +	 * This method is a no-op if a status concept is not supported by the service provider., +	 * Sync's this connection object with the current state of the external user's profile., +	 * Used to support the transfer of connection state between layers of the application, such as to the database layer., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +/**, + * A data transfer object that allows the internal state of a ServiceProviderConnection to be persisted and transferred between layers of an application., + * Some fields may be null depending on the specific type of ServiceProviderConnection., + * For example, an OAuth2ServiceProviderConnection has a null 'secret' field while an OAuth1ServiceProviderConnection has null 'refreshToken' and 'expireTime' fields., + * @author Keith Donald, + * @see ServiceProviderConnection#createData(), + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +/**, + * Data access interface for saving and restoring ServiceProviderConnection objects from a persistent store., + * @author Keith Donald, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, +	 * The key that identifies this ServiceProviderConnection., +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties., +	 * If false, indicates calls to the {@link #getServiceApi() serviceApi} will fail., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * An expired connection cannot be used; calls to {@link #test()} return false, and any service API invocations fail., +	 * If expired, you may call {@link #refresh()} to renew the connection., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +	 * Used to renew an expired connection.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/RevokedAuthorizationException.java, +		this("Unknown");, +	}, +	, +	public RevokedAuthorizationException(String reason) {, +		super("The authorization has been revoked. Reason: " + reason);]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.List;, +	public static Map<String, String> getFacebookCookieData(Cookie[] cookies, String apiKey, String appSecret) {, +					Map<String, String> cookieData = extractDataFromCookie(cookie.getValue().trim());, +					String signature = calculateSignature(appSecret, cookieData);, +					if (signature.equals(cookieData.get("sig"))) {, +						return cookieData;, +					}, +					System.out.println(signature);, +					break;, +	private static String calculateSignature(String appSecret, Map<String, String> cookieData) {, +		String payload = "";, +		List<String> keys = new ArrayList<String>(cookieData.keySet());, +		Collections.sort(keys);, +		for (String key : keys) {, +			if (!key.equals("sig")) {, +				payload += key + "=" + cookieData.get(key);, +			}, +		}, +		return md5(payload + appSecret);, +	}, +, +	private static String md5(String in) {, +		try {, +			MessageDigest md = MessageDigest.getInstance("MD5");, +, +			byte[] hash = md.digest(in.getBytes("UTF-8"));, +, +			StringBuffer sb = new StringBuffer();, +			for (byte b : hash) {, +				if (b >= 0 && b < 16), +					sb.append('0');, +				sb.append(Integer.toHexString(b & 0xff));, +			}, +, +			return sb.toString();, +		} catch (NoSuchAlgorithmException wontHappen) {, +			return null;, +		} catch (UnsupportedEncodingException wontHappen) {, +			return null;, +		}, +	}, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.List;, +	public static Map<String, String> getFacebookCookieData(Cookie[] cookies, String apiKey, String appSecret) {, +					Map<String, String> cookieData = extractDataFromCookie(cookie.getValue().trim());, +					String signature = calculateSignature(appSecret, cookieData);, +					if (signature.equals(cookieData.get("sig"))) {, +						return cookieData;, +					}, +					System.out.println(signature);, +					break;, +	private static String calculateSignature(String appSecret, Map<String, String> cookieData) {, +		String payload = "";, +		List<String> keys = new ArrayList<String>(cookieData.keySet());, +		Collections.sort(keys);, +		for (String key : keys) {, +			if (!key.equals("sig")) {, +				payload += key + "=" + cookieData.get(key);, +			}, +		}, +		return md5(payload + appSecret);, +	}, +, +	private static String md5(String in) {, +		try {, +			MessageDigest md = MessageDigest.getInstance("MD5");, +, +			byte[] hash = md.digest(in.getBytes("UTF-8"));, +, +			StringBuffer sb = new StringBuffer();, +			for (byte b : hash) {, +				if (b >= 0 && b < 16), +					sb.append('0');, +				sb.append(Integer.toHexString(b & 0xff));, +			}, +, +			return sb.toString();, +		} catch (NoSuchAlgorithmException wontHappen) {, +			return null;, +		} catch (UnsupportedEncodingException wontHappen) {, +			return null;, +		}, +	}, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +	private final String appSecret;, +, +			String apiKey, String appSecret) {, +		// TODO: The Facebook service provider could be looked up here and could expose its API key as a, +		// property. Then this controller could just get the API key and app secret from the provider., +		this.appSecret = appSecret;, +		Map<String, String> cookieData = FacebookCookieParser.getFacebookCookieData(request.getCookies(), apiKey,]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/docs/src/reference/docbook/implementing.xml, +		<section id="service-providers-implementing-serviceproviderconnectionfactory-oauth1">]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +	private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +	private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +	private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +	public void signIn_nonExistentProvider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, +			new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		providerSignInController.afterPropertiesSet();, +		MockMvc mockMvc = standaloneSetup(providerSignInController).build();, +		mockMvc.perform(post("/signin/nonExistentOAuth1Provider")), +			.andExpect(redirectedUrl("/signin?error=provider"));, +	}, +, +	@Test]
[+++ b/samples/facebook-showcase/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +// -----------------------------------------------------------------------------, +// Main gradle build file for Spring Social's Facebook Showcase Sample, +// @author Craig Walls, +// -----------------------------------------------------------------------------, +, +// -----------------------------------------------------------------------------, +// Configuration for the root project, +// -----------------------------------------------------------------------------, +description = 'Spring Social Facebook Showcase', +abbreviation = 'FACESHOW', +, +apply plugin: 'java' // tasks for conventional java lifecycle, +apply plugin: 'maven' // `gradle install` to push jars to local .m2 cache, +apply plugin: 'eclipse' // `gradle eclipse` to generate .classpath/.project, +apply plugin: 'idea' // `gradle idea` to generate .ipr/.iml, +apply plugin: 'war', +apply plugin: 'jetty', +, +task wrapper(type: Wrapper) {, +    gradleVersion = '0.9.1', +}, +  , +group = 'org.springframework.social.samples', +version = '1.0.0.BUILD-SNAPSHOT', +, +def localMavenRepo = new File("${System.properties.'user.home'}/.m2/repository").toURL().toString(), +, +repositories {, +    mavenRepo urls: localMavenRepo, +    mavenRepo urls: 'http://maven.springframework.org/release', +    mavenRepo urls: 'http://maven.springframework.org/milestone', +    mavenRepo urls: 'http://maven.springframework.org/snapshot', +    mavenCentral(), +}, +, +dependencies {, +    compile "org.springframework:spring-context:3.0.5.RELEASE", +    compile "org.springframework:spring-webmvc:3.0.5.RELEASE", +    compile "org.springframework:spring-aspects:3.0.5.RELEASE", +	compile "com.h2database:h2:1.2.143", +	compile "org.aspectj:aspectjrt:1.6.9", +	compile 'org.slf4j:slf4j-api:1.5.10', +	compile 'org.slf4j:jcl-over-slf4j:1.5.10', +	compile 'org.slf4j:slf4j-log4j12:1.5.10', +	compile "log4j:log4j:1.2.15", +	compile "javax.inject:javax.inject:1", +	compile "org.springframework.social:spring-social-core:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-connect:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-connect-web:1.0.0.BUILD-SNAPSHOT", +	compile "org.scribe:scribe:1.0.7", +	providedRuntime ("javax.servlet:servlet-api:2.5") { provided = true }, +	providedRuntime ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, +	compile "javax.servlet:jstl:1.2", +}, +++ b/samples/facebook-showcase/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +// -----------------------------------------------------------------------------, +// Main gradle build file for Spring Social's Facebook Showcase Sample, +// @author Craig Walls, +// -----------------------------------------------------------------------------, +, +// -----------------------------------------------------------------------------, +// Configuration for the root project, +// -----------------------------------------------------------------------------, +description = 'Spring Social Facebook Showcase', +abbreviation = 'FACESHOW', +, +apply plugin: 'java' // tasks for conventional java lifecycle, +apply plugin: 'maven' // `gradle install` to push jars to local .m2 cache, +apply plugin: 'eclipse' // `gradle eclipse` to generate .classpath/.project]
[+++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, +			GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, +			String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, +			GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, +			String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/src/main/resources/org/springframework/social/samples/github/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, +			GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, +			String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/src/main/resources/org/springframework/social/samples/github/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-connection-repository data-source="dataSource" />, +	<bean id="serviceProviderFactory" class="org.springframework.social.provider.ContextServiceProviderFactory" />, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, +			GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, +			String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/src/main/resources/org/springframework/social/samples/github/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-connection-repository data-source="dataSource" />, +	<bean id="serviceProviderFactory" class="org.springframework.social.provider.ContextServiceProviderFactory" />, +++ b/samples/twitter-showcase/pom.xml]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +	private final String consumerKey;, +	private final String consumerSecret;, +	private final String requestTokenUrl;, +	private final UriTemplate authorizeUrlTemplate;, +	private final String accessTokenUrl;, +	private final RestTemplate restTemplate;, +		this.restTemplate = new RestTemplate();, +		List<HttpMessageConverter<?>> converters = Arrays.<HttpMessageConverter<?>> asList(, +				new StringHttpMessageConverter(), new FormHttpMessageConverter());, +		this.restTemplate.setMessageConverters(converters);]
[+++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create a source project for the client code e.g. <code>spring-social-twitter</code>.</para>, +					<para>Develop or integrate a Java binding to the provider's "Service API" e.g. <code>TwitterApi</code>.</para>, +					<para>Create a ServiceProvider implementation that allows users to authorize with the provider and obtain Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, +					<para>Create a ServiceApiAdapter that maps the provider's native Service API onto the uniform ServiceProviderConnection model e.g. <code>TwitterServiceApiAdapter</code>.</para>, +					<para>Finally, create a ServiceProviderConnectionFactory that wraps the other artifacts up and provides a simple interface for establishing connections e.g. <code>TwitterServiceProviderConnectionFactory</code></para>, +	<section id="service-providers-implementing-project">, +		<title>Creating a source project for the provider client code</title>, +		<para>, +			A Spring Social provider client is simply a standard Java project that builds a jar artifact e.g. spring-social-twitter.jar., +			We do recommend the actual code structure follow several packaging guidelines described below., +			To make this as easy as possible to do, we have also created a template project you may use as a starting point., +		</para>, +		<section id="service-providers-implementing-project-structure">, +			<title>Code structure recommendations</title>, +			<para>, +				We recommend all code for a new Spring Social client module fall within the <code>org.springframework.social.{providerId}</code> base package,, +				where {providerId} is the unique identifier you assign to the service provider you are adding support for., +				Consider some of the providers already supported by the framework as examples:, +				<table xml:id="service-providers-implementing-project-structure-examples">, +					<title>Spring Social Client Projects</title>, +					<tgroup cols="3">, +						<colspec align="left" />, +						<colspec colnum="1" colname="col1" colwidth="2*" />, +						<colspec colnum="2" colname="col2" colwidth="2*" />, +						<colspec colnum="3" colname="col3" colwidth="2*" />, +						<thead>, +							<row>, +								<entry align="center">Provider ID</entry>, +								<entry align="center">Artifact Name</entry>, +								<entry align="center">Base Package</entry>, +							</row>, +						</thead>, +						<tbody>, +							<row>, +								<entry>facebook</entry>, +								<entry>spring-social-facebook</entry>, +								<entry>org.springframework.social.facebook</entry>, +							</row>					, +							<row>, +								<entry>twitter</entry>, +								<entry>spring-social-twitter</entry>, +								<entry>org.springframework.social.twitter</entry>, +							</row>					, +						</tbody>, +					</tgroup>, +				</table>, +			</para>, +			<para>, +				Within the base package, we recommend the following subpackage structure:, +				<table>, +					<tgroup cols="2">, +						<colspec align="left" />, +						<colspec colnum="1" colname="col1" colwidth="2*" />, +						<colspec colnum="2" colname="col2" colwidth="2*" />, +						<thead>, +							<row>, +								<entry align="center">Subpackage</entry>, +								<entry align="center">Description</entry>, +							</row>, +						</thead>, +						<tbody>, +							<row>, +								<entry>api</entry>, +								<entry>Contains the public interface defining the Java binding to the service provider's API.</entry>, +							</row>					, +							<row>, +								<entry>api.impl</entry>, +								<entry>Contains the primary implementation of the Java API binding.</entry>, +							</row>					, +							<row>, +								<entry>connect</entry>, +								<entry>Contains the types necessary to establish connections to the service provider.</entry>, +							</row>					, +						</tbody>					, +					</tgroup>, +				</table>, +			</para>, +			<para>, +				You can see this recommended structure in action by reviewing one of the other client modules such as spring-social-twitter:`, +				<mediaobject>, +					<imageobject role="fo">, +						<imagedata fileref="images/spring-social-twitter-example.png" format="PNG" align="center" />, +					</imageobject>, +					<imageobject role="html">, +						<imagedata fileref="images/spring-social-twitter-example.png" format="PNG" align="center" />, +					</imageobject>, +				</mediaobject>, +			</para>, +			<para>, +				Here, the central service API type, TwitterApi, is located in the api package along with its supporting operations types and data transfer object types., +				The primary implementation of that interface, TwitterTemplate, is located in the api.impl package (along with other package-private impl types have that been excluded from this view)., +				Finally, the connect package contains the implementation of various connect SPIs that enable connections to the provider to be established and persisted., +			</para>, +		</section>, +	</section>, +++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create a source project for the client code e.g. <code>spring-social-twitter</code>.</para>, +					<para>Develop or integrate a Java binding to the provider's "Service API" e.g. <code>TwitterApi</code>.</para>, +					<para>Create a ServiceProvider implementation that allows users to authorize with the provider and obtain Service API instances e.g. <code>TwitterServiceProvider</code>.</para>]
[+++ b/.travis.yml, +language: java, +jdk: oraclejdk8]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, +	private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +			MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, +			if (parameters != null) {, +				additionalParameters.putAll(parameters);, +		return additionalParameters;, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, +	private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +			MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, +			if (parameters != null) {, +				additionalParameters.putAll(parameters);, +		return additionalParameters;, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +import org.springframework.util.MultiValueMap;, +	 * May be used to store custom connection attributes in the session before redirecting the user to the provider's site or to contribute parameters to the authorization URL., +	 * @return Additional parameters to be passed on the authorization URL. May return null if the interceptor doesn't contribute any parameters., +	MultiValueMap<String, String> preConnect(ConnectionFactory<S> connectionFactory, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, +	private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +			MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, +			if (parameters != null) {, +				additionalParameters.putAll(parameters);, +		return additionalParameters;, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +import org.springframework.util.MultiValueMap;, +	 * May be used to store custom connection attributes in the session before redirecting the user to the provider's site or to contribute parameters to the authorization URL., +	 * @return Additional parameters to be passed on the authorization URL. May return null if the interceptor doesn't contribute any parameters., +	MultiValueMap<String, String> preConnect(ConnectionFactory<S> connectionFactory, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import org.springframework.util.MultiValueMap;, +		return buildOAuthUrl(connectionFactory, request, null);, +	}, +	, +	/**, +	 * Builds the provider URL to redirect the user to for connection authorization., +	 * @param connectionFactory the service provider's connection factory e.g. FacebookConnectionFactory, +	 * @param request the current web request, +	 * @param additionalParameters parameters to add to the authorization URL., +	 * @return the URL to redirect the user to for authorization, +	 * @throws IllegalArgumentException if the connection factory is not OAuth1 based., +	 */, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request, additionalParameters);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request, additionalParameters);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(null, additionalParameters));, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl(request), additionalParameters));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl(request), request.getParameter("scope"), null, additionalParameters);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, +	private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +			MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, +			if (parameters != null) {, +				additionalParameters.putAll(parameters);, +		return additionalParameters;, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +import org.springframework.util.MultiValueMap;, +	 * May be used to store custom connection attributes in the session before redirecting the user to the provider's site or to contribute parameters to the authorization URL., +	 * @return Additional parameters to be passed on the authorization URL. May return null if the interceptor doesn't contribute any parameters., +	MultiValueMap<String, String> preConnect(ConnectionFactory<S> connectionFactory, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import org.springframework.util.MultiValueMap;, +		return buildOAuthUrl(connectionFactory, request, null);, +	}, +	, +	/**, +	 * Builds the provider URL to redirect the user to for connection authorization., +	 * @param connectionFactory the service provider's connection factory e.g. FacebookConnectionFactory, +	 * @param request the current web request, +	 * @param additionalParameters parameters to add to the authorization URL., +	 * @return the URL to redirect the user to for authorization, +	 * @throws IllegalArgumentException if the connection factory is not OAuth1 based., +	 */, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request, additionalParameters);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request, additionalParameters);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(null, additionalParameters));, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl(request), additionalParameters));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl(request), request.getParameter("scope"), null, additionalParameters);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +import static org.junit.Assert.*;, +import java.util.List;]
[+++ b/build.gradle, +	javaxInjectVersion = '1', +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/build.gradle, +	javaxInjectVersion = '1', +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname> is constructed with three arguments:, +    <constructor-arg ref="#{environment['application.url']}" />, +    <constructor-arg value="#{environment['facebook.appId']}" />, +    <constructor-arg value="#{environment['facebook.appSecret']}" />, +			It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname> to create a connection after signup., +++ b/build.gradle, +	javaxInjectVersion = '1', +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname> is constructed with three arguments:, +    <constructor-arg ref="#{environment['application.url']}" />, +    <constructor-arg value="#{environment['facebook.appId']}" />, +    <constructor-arg value="#{environment['facebook.appSecret']}" />, +			It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname> to create a connection after signup., +++ /dev/null, +++ b/build.gradle, +	javaxInjectVersion = '1', +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname> is constructed with three arguments:, +    <constructor-arg ref="#{environment['application.url']}" />, +    <constructor-arg value="#{environment['facebook.appId']}" />, +    <constructor-arg value="#{environment['facebook.appSecret']}" />, +			It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname> to create a connection after signup., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +		// TODO add 3.0.x compatibility, +			new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)	, +		});, +++ b/build.gradle, +	javaxInjectVersion = '1', +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname> is constructed with three arguments:, +    <constructor-arg ref="#{environment['application.url']}" />, +    <constructor-arg value="#{environment['facebook.appId']}" />, +    <constructor-arg value="#{environment['facebook.appSecret']}" />, +			It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname> to create a connection after signup., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +		// TODO add 3.0.x compatibility, +			new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)	, +		});, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	public static String buildAuthorizationHeaderValue(String targetUrl, Map<String, String> oauthParameters, Map<String, String> additionalParameters, HttpMethod method, String consumerSecret, String tokenSecret) {, +++ b/build.gradle, +	javaxInjectVersion = '1', +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname> is constructed with three arguments:, +    <constructor-arg ref="#{environment['application.url']}" />, +    <constructor-arg value="#{environment['facebook.appId']}" />, +    <constructor-arg value="#{environment['facebook.appSecret']}" />, +			It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname> to create a connection after signup., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +		// TODO add 3.0.x compatibility, +			new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)	, +		});, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	public static String buildAuthorizationHeaderValue(String targetUrl, Map<String, String> oauthParameters, Map<String, String> additionalParameters, HttpMethod method, String consumerSecret, String tokenSecret) {, +++ /dev/null, +++ b/build.gradle, +	javaxInjectVersion = '1', +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +        compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname> is constructed with three arguments:, +    <constructor-arg ref="#{environment['application.url']}" />, +    <constructor-arg value="#{environment['facebook.appId']}" />, +    <constructor-arg value="#{environment['facebook.appSecret']}" />, +			It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname> to create a connection after signup., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +		// TODO add 3.0.x compatibility, +			new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)	]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */]
[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.springframework.social.connect.web.test.StubOAuthTemplateBehavior.*;, +import org.springframework.social.connect.web.test.StubOAuthTemplateBehavior;, +	// OAuth 1, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +	// OAuth 2, +	, +	@Test, +	public void connect_OAuth2Provider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL));, +	}, +, +	@Test, +	public void connect_OAuth2Provider_withScope() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider").param("scope", "read,write")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL + "&scope=read%2Cwrite"));, +	}, +	, +	@Test, +	public void oauth2Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth2Provider"));		, +		mockMvc.perform(get("/connect/oauth2Provider").param("code", "oauth2Code")), +			.andExpect(redirectedUrl("/connect/oauth2Provider"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth2Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth2Provider", connections.get(0).getKey().getProviderId());, +	}, +, +	@Test, +	public void oauth2Callback_exceptionWhileFetchingAccessToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth2Provider"));		, +		mockMvc.perform(get("/connect/oauth2Provider").param("code", "oauth2Code")), +			.andExpect(redirectedUrl("/connect/oauth2Provider"));, +		assertNull(connectionRepository.findConnections("oauth2Provider"));		, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.springframework.social.connect.web.test.StubOAuthTemplateBehavior.*;, +import org.springframework.social.connect.web.test.StubOAuthTemplateBehavior;, +	// OAuth 1, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +	// OAuth 2, +	, +	@Test, +	public void connect_OAuth2Provider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL));, +	}, +, +	@Test, +	public void connect_OAuth2Provider_withScope() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider").param("scope", "read,write")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL + "&scope=read%2Cwrite"));, +	}, +	, +	@Test, +	public void oauth2Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth2Provider"));		, +		mockMvc.perform(get("/connect/oauth2Provider").param("code", "oauth2Code")), +			.andExpect(redirectedUrl("/connect/oauth2Provider"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth2Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth2Provider", connections.get(0).getKey().getProviderId());, +	}, +, +	@Test]
[+++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse as usual:, +, + File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, + ./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +===============================================================================, +++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse as usual:, +, + File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, + ./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +===============================================================================, +++ /dev/null]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/docs/src/reference/docbook/overview.xml, +    <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke Service APIs on behalf of Users.</para>, +      <para>What makes these applications a little different than traditional applications is that the data that they collect represent some facet of their users' lives. What's more, these applications are more than willing to share that data with other applications, as long as the user gives permission to do so. This means that although these social networks are great at bringing people together, as software services they also excel at bringing applications together.</para>, +      <para>To illustrate, imagine that Paul is a member of an online movie club. A function of the movie club application is to recommend movies for its members to watch and to let its members maintain a list of movies that they have seen and those that they plan to see. When Paul sees a movie, he signs into the movie club site, checks the movie off of his viewing list, and indicates if he liked the movie or not. Based on his responses, the movie club application can tailor future recommendations for Paul to see.</para>, +      <para>In the narrative above, Facebook is the service provider, the movie club application is the service consumer, and Paul is the user of both. The movie club application may interact with Facebook on behalf of Paul, accessing whatever Facebook data and functionality that Paul permits, including seeing Paul's list of friends and posting messages to his Facebook wall.</para>, +      <para>With Spring Social, your application can play the part of the service consumer, interacting with a service provider on behalf of its users. The key features of Spring Social are:</para>, +          <listitem><para>A "Connect Framework that handles the core authorization and connection flow with Service Providers.</para></listitem>, +          <listitem><para>A "Connect Controller" that handles the OAuth exchange between a service provider, consumer, and user in a web application environment.</para></listitem>, +          <listitem><para>Java bindings to popular service provider APIs including Facebook, Twitter, LinkedIn, TripIt, GitHub, and Gowalla.</para></listitem>, +          <listitem><para>A "Signin Controller" that allows users to authenticate with your application by signing in with their Provider accounts, such as their Twitter or Facebook accounts.</para></listitem>, +              <entry>Spring Social's ServiceProvider connect framework and OAuth client support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname> which uses the ServiceProvider framework to manage connections in a web application environment.</entry>, +              <entry>Spring Social's Facebook API binding</entry>, +              <entry>Spring Social's Twitter API binding.</entry>, +              <entry>Spring Social's LinkedIn API binding.</entry>, +              <entry>Spring Social's GitHub API binding.</entry>, +              <entry>Spring Social's Gowalla API binding.</entry>, +              <entry>Spring Social's TripIt API binding.</entry>, +              <entry>Support for testing ServiceProvider implementations and API bindings.</entry>, +	  <para>The remaining modules are elective, depending on which of the supported service providers you intend for your application to interact with. For example, you'll only need the GitHub module if your application needs to invoke the Github API:</para>, +			If you are developing against a milestone version, such as 1.0.0.M3, you will need to add the following repository in order to resolve the artifact:]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="serviceprovider" xmlns:xlink="http://www.w3.org/1999/xlink">, +		<para>, +			The <code>spring-social-core</code> module includes a <emphasis>Service Provider 'Connect' Framework</emphasis> for managing connections to Software-as-a-Service (SaaS) providers such as Facebook and Twitter., +			This framework allows your application to establish connections between local user accounts and accounts those users have with external service providers.  , +			Once a connection is established, it can be be used to obtain a strongly-typed Java binding to the ServiceProvider's API, giving your application the ability to invoke the API on behalf of the user., +		</para>, +		<para>, +			To illustrate, consider Facebook as an example ServiceProvider., +			Suppose your application, AcmeApp, allows users to share content with their Facebook friends., +			To support this, a connection needs to be established between a user's AcmeApp account and her Facebook account., +			Once established, a FacebookApi instance can be obtained and used to post the content to the user's wall., +			Spring Social's 'Connect' framework provides a clean API for managing service provider connections such as this., +		</para>, +		<para>, +			The <interfacename>ServiceProvider&lt;S&gt;</interfacename> interface defines the central API for managing connections to an external service provider such as Facebook:, +			<programlisting language="java"><![CDATA[, +public interface ServiceProvider<S> {, +    String getId();, +    , +    boolean isConnected(Serializable accountId);, +    , +    List<ServiceProviderConnection<S>> getConnections(Serializable accountId);, +, +}]]>, +			</programlisting>, +		</para>, +		<para>, +			The &lt;S&gt; parameterized type represents the Java binding to the ServiceProvider's API., +			For example, the Facebook ServiceProvider implementation is parameterized as ServiceProvider&lt;FacebookApi&gt;, where FacebookApi is the Java interface that may be used to invoke Facebook's graph API on behalf of a user., +		</para>, +		<para>, +			Each ServiceProvider is identified by an ID, as returned by the <methodname>getId()</methodname> method., +			This id should be unique across all ServiceProviders registered with your application., +		</para>, +		<para>, +			A single local user account can have one-to-many connections established with a ServiceProvider,, +			where each connection represents a link between the local user's account and an external account the user has on the provider's system., +			<methodname>isConnected()</methodname> checks to see if <emphasis>any</emphasis> connections exist between a user account and the service provider., +			If there are connections, <methodname>getConnections()</methodname> returns them in rank order., +		</para>, +		<para>, +			Once you have a reference to a ServiceProviderConnection, you can do the following:, +			<programlisting language="java"><![CDATA[, +public interface ServiceProviderConnection<S> {, +, +    S getServiceApi();, +, +    void disconnect();, +	, +}]]>, +			</programlisting>, +		</para>, +		<para>, +			<methodname>getServiceApi()</methodname> returns a Java binding to the ServiceProvider's API for the external user account associated with the connection., +			The API can then be used to access and update user data on the provider's system., +		</para>, +		<para>, +			<methodname>disconnect()</methodname> may be used to remove the connection with the ServiceProvider, if it is no longer desired., +		</para>, +		<para>, +			To put this API into action, consider Twitter as an example ServiceProvider., +			Suppose user 'kdonald' of AcmeApp has three Twitter accounts and has connected with each of them:, +			<orderedlist>, +				<listitem><para>ServiceProvider#getId() would return 'twitter'.</para></listitem>, +				<listitem><para>ServiceProvider#isConnected("kdonald") would return 'true'.</para></listitem>, +				<listitem><para>ServiceProvider#getConnections("kdonald") would return a 'connections' List with three elements, one for each Twitter account.</para></listitem>, +				<listitem><para>connections.get(0) would return the 'connection' to the first Twitter account, and connection.getServiceApi() would return a TwitterApi that can access and update information about that Twitter account.</para></listitem>, +				<listitem><para>connections.get(1) and connections.get(2) would allow AcmeApp to access and update information about the second and third Twitter accounts, respectively.</para></listitem>				, +				<listitem><para>connection.disconnect() can be called to remove a connection, at which the linked Twitter account is no longer accessible to the application.</para></listitem>				, +			</orderedlist>, +		</para>, +	</section>, +	<section>, +		<title>Establishing Connections</title>		, +++ b/docs/src/reference/docbook/serviceprovider.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="serviceprovider" xmlns:xlink="http://www.w3.org/1999/xlink">, +		<para>, +			The <code>spring-social-core</code> module includes a <emphasis>Service Provider 'Connect' Framework</emphasis> for managing connections to Software-as-a-Service (SaaS) providers such as Facebook and Twitter., +			This framework allows your application to establish connections between local user accounts and accounts those users have with external service providers.  , +			Once a connection is established, it can be be used to obtain a strongly-typed Java binding to the ServiceProvider's API, giving your application the ability to invoke the API on behalf of the user., +		</para>, +		<para>, +			To illustrate, consider Facebook as an example ServiceProvider., +			Suppose your application, AcmeApp, allows users to share content with their Facebook friends., +			To support this, a connection needs to be established between a user's AcmeApp account and her Facebook account., +			Once established, a FacebookApi instance can be obtained and used to post the content to the user's wall., +			Spring Social's 'Connect' framework provides a clean API for managing service provider connections such as this., +		</para>, +		<para>, +			The <interfacename>ServiceProvider&lt;S&gt;</interfacename> interface defines the central API for managing connections to an external service provider such as Facebook:, +			<programlisting language="java"><![CDATA[, +public interface ServiceProvider<S> {, +    String getId();, +    , +    boolean isConnected(Serializable accountId);, +    , +    List<ServiceProviderConnection<S>> getConnections(Serializable accountId);, +, +}]]>]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 22, 2011), +   * Fixed Spring 3.0 compatibility issues (SOCIAL-152), +   * Converted LinkedInTemplate response binding to be JSON-based, fixing a, +     problem with Android compatibility (SOCIAL-148), +   * Fixed several JSON deserialization issues by either adding new fields to, +     the model classes or by setting Jackson to ignore unknown properties., +   * Made javax.Inject dependency a required dependency of spring-social-web (SOCIAL-158), +   * Added setRequestFactory() methods to OAuth1Template and OAuth2Template to, +     allow for customization of the request factory (SOCIAL-133), +   * AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding now create a RestTemplate, +     with a minimal set of message converters. In doing so, they set "UTF-8" character, +     set on FormHttpMessageConverter. (SOCIAL-170), +   * Handle DuplicateKeyException, putting "social.addConnection.duplicate" in request, +     as flash variable and then into model so that view can inform user of the problem., +   * Fixed Android 8 (and lower) compatibility issue by creating a HttpComponents, +     request factory that does not put an "Expect: 100-continue" header in the, +     request (SOCIAL-144), +   * Added setSignUpUrl() to ProviderSignInController to enable configuration of, +     the sign up page location (SOCIAL-183), +   * Changed TwitterErrorHandler and FacebookErrorHandler to those an, +     UncategorizedApiException if an error response body is non-JSON (and thus does, +     not match the expected error message response). (SOCIAL-173), +   * Made the applicationUrl property of ConnectController and ProviderSignInController, +     optional, constructing the callback URL from information in the request (SOCIAL-187), +   * Create new SimpleDateFormat as-needed to fix thread safety problem (SOCIAL-198), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 22, 2011), +   * Fixed Spring 3.0 compatibility issues (SOCIAL-152), +   * Converted LinkedInTemplate response binding to be JSON-based, fixing a, +     problem with Android compatibility (SOCIAL-148), +   * Fixed several JSON deserialization issues by either adding new fields to, +     the model classes or by setting Jackson to ignore unknown properties., +   * Made javax.Inject dependency a required dependency of spring-social-web (SOCIAL-158), +   * Added setRequestFactory() methods to OAuth1Template and OAuth2Template to, +     allow for customization of the request factory (SOCIAL-133), +   * AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding now create a RestTemplate, +     with a minimal set of message converters. In doing so, they set "UTF-8" character, +     set on FormHttpMessageConverter. (SOCIAL-170), +   * Handle DuplicateKeyException, putting "social.addConnection.duplicate" in request, +     as flash variable and then into model so that view can inform user of the problem., +   * Fixed Android 8 (and lower) compatibility issue by creating a HttpComponents, +     request factory that does not put an "Expect: 100-continue" header in the, +     request (SOCIAL-144), +   * Added setSignUpUrl() to ProviderSignInController to enable configuration of, +     the sign up page location (SOCIAL-183), +   * Changed TwitterErrorHandler and FacebookErrorHandler to those an, +     UncategorizedApiException if an error response body is non-JSON (and thus does, +     not match the expected error message response). (SOCIAL-173), +   * Made the applicationUrl property of ConnectController and ProviderSignInController, +     optional, constructing the callback URL from information in the request (SOCIAL-187), +   * Create new SimpleDateFormat as-needed to fix thread safety problem (SOCIAL-198), +++ b/docs/src/reference/docbook/connecting.xml, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 22, 2011), +   * Fixed Spring 3.0 compatibility issues (SOCIAL-152), +   * Converted LinkedInTemplate response binding to be JSON-based, fixing a, +     problem with Android compatibility (SOCIAL-148), +   * Fixed several JSON deserialization issues by either adding new fields to, +     the model classes or by setting Jackson to ignore unknown properties., +   * Made javax.Inject dependency a required dependency of spring-social-web (SOCIAL-158), +   * Added setRequestFactory() methods to OAuth1Template and OAuth2Template to, +     allow for customization of the request factory (SOCIAL-133), +   * AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding now create a RestTemplate, +     with a minimal set of message converters. In doing so, they set "UTF-8" character, +     set on FormHttpMessageConverter. (SOCIAL-170), +   * Handle DuplicateKeyException, putting "social.addConnection.duplicate" in request, +     as flash variable and then into model so that view can inform user of the problem., +   * Fixed Android 8 (and lower) compatibility issue by creating a HttpComponents, +     request factory that does not put an "Expect: 100-continue" header in the, +     request (SOCIAL-144), +   * Added setSignUpUrl() to ProviderSignInController to enable configuration of, +     the sign up page location (SOCIAL-183), +   * Changed TwitterErrorHandler and FacebookErrorHandler to those an, +     UncategorizedApiException if an error response body is non-JSON (and thus does, +     not match the expected error message response). (SOCIAL-173), +   * Made the applicationUrl property of ConnectController and ProviderSignInController, +     optional, constructing the callback URL from information in the request (SOCIAL-187), +   * Create new SimpleDateFormat as-needed to fix thread safety problem (SOCIAL-198), +++ b/docs/src/reference/docbook/connecting.xml, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +++ b/docs/src/reference/docbook/implementing.xml, +							For example, Twitter's API provides access to "status timelines", "searches", "lists", "direct messages", "friends", "geo location", and "users"., +    GeoOperations geoOperations();, +, +    public Facebook getApi(String accessToken) {, +				It should be configured with the provided consumerKey and consumerSecret, along with the provider-specific requestTokenUrl, authorizeUrl, authenticateUrl, and accessTokenUrl., +				The authenticateUrl parameter is optional and may be left out if the provider doesn't have an authentication URL that is different than the authorization URL. , +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 22, 2011), +   * Fixed Spring 3.0 compatibility issues (SOCIAL-152), +   * Converted LinkedInTemplate response binding to be JSON-based, fixing a, +     problem with Android compatibility (SOCIAL-148)]
[+++ b/build.gradle, +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +++ b/build.gradle, +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * A command that signs up a new user in the event no user id could be mapped from a {@link Connection}., + * Allows for implicitly creating a local user record from connection data during a provider sign-in attempt., + * @see UsersConnectionRepository#findUserIdWithConnection(Connection), + * @author Keith Donald, + */, +public interface ConnectionSignUp {, +, +	/**, +	 * Sign up a new user of the application from the connection., +	 * @param connection the connection, +	 * @return the new user id, +	 */, +	String execute(Connection<?> connection);, +, +}, +++ b/build.gradle, +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * A command that signs up a new user in the event no user id could be mapped from a {@link Connection}., + * Allows for implicitly creating a local user record from connection data during a provider sign-in attempt., + * @see UsersConnectionRepository#findUserIdWithConnection(Connection), + * @author Keith Donald, + */, +public interface ConnectionSignUp {, +, +	/**, +	 * Sign up a new user of the application from the connection., +	 * @param connection the connection, +	 * @return the new user id, +	 */, +	String execute(Connection<?> connection);, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoOpConnectionSignUp.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * A UserCreator that doesn't do anything., + * @author Keith Donald, + */, +public final class NoOpConnectionSignUp implements ConnectionSignUp {, +, +	public static final ConnectionSignUp INSTANCE = new NoOpConnectionSignUp();, +	]
[+++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, +		assertTrue(localUserIds.contains("1"));, +		assertTrue(localUserIds.contains("2"));, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, +		assertTrue(localUserIds.contains("1"));, +		assertTrue(localUserIds.contains("2"));, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/SigningSupportTest.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +	, +	private void assertAuthorizationHeader(String authorizationHeader, String expectedSignature) {, +		List<String> headerElements = normalizedHeaderElements(authorizationHeader);, +		assertEquals("OAuth", headerElements.get(0));, +		assertEquals("oauth_consumer_key=\"9djdj82h48djs9d2\"", headerElements.get(1));, +		assertEquals("oauth_nonce=\"987654321\"", headerElements.get(2));, +		assertEquals("oauth_signature=\""+expectedSignature+"\"", headerElements.get(3));, +		assertEquals("oauth_signature_method=\"HMAC-SHA1\"", headerElements.get(4));, +		assertEquals("oauth_timestamp=\"123456789\"", headerElements.get(5));, +		assertEquals("oauth_token=\"kkk9d7dh3k39sjv7\"", headerElements.get(6));, +		assertEquals("oauth_version=\"1.0\"", headerElements.get(7));, +	}, +, +	private List<String> normalizedHeaderElements(String authorizationHeader) {, +		List<String> headerElements = new ArrayList<>();, +		for (String element : authorizationHeader.split("[,\\s]")) {, +			if (element.trim().length() > 0) {, +				headerElements.add(element.trim());, +			}, +		}, +		Collections.sort(headerElements);, +		return headerElements;, +	}, +]
[+++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create a ServiceProvider that allows users to authorize with the remote provider and obtain authorized Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, +				As part of the spring-social-test module, Spring Social includes a framework for unit testing API bindings., +		<para>, +			As described in the previous section, a client binding to a secure API such as Facebook or Twitter requires valid user authorization credentials to work., +			Such credentials are generally obtained by having your application conduct an authorization "dance" or handshake with the service provider., +			Spring Social provides the ServiceProvider&lt;S&gt; abstraction to handle this "authorization dance"., +			The abstraction also acts as a factory for native Service API (S) instances., +		</para>, +		<para>, +			Since the authorization dance is protocol-specific, a ServiceProvider specialization exists for each authorization protocol., +			For example, if you are connecting to a OAuth2-based provider, you would implement OAuth2ServiceProvider., +			After you've done this, your implementation can be used to conduct the OAuth2 dance and obtain an authorized Service API instance., +			This is typically done in the context of a ServiceProviderConnectionFactory as part of establishing a new connection to the provider., +			The following sections describe the implementation steps for each ServiceProvider type., +		</para>, +				Parameterize &lt;S&gt; to be the Java binding to the ServiceProvider's's API., +				Define a single constructor that accepts an clientId and clientSecret., +				Finally, implement getServiceApi(String) to return a new Service API instance., +				See <code>org.springframework.social.facebook.connect.FacebookServiceProvider</code> as an example OAuth2ServiceProvider:, +        super(new OAuth2Template(clientId, clientSecret,, +           "https://graph.facebook.com/oauth/authorize",, +           "https://graph.facebook.com/oauth/access_token"));, +				In the constructor, you should call super, passing up the configured OAuth2Template that implements OAuth2Operations., +				In getServiceApi(String), you should construct your Service API implementation, passing it the access token needed to make authorized requests for protected resources., +				Parameterize &lt;S&gt; to be the Java binding to the ServiceProvider's API., +				Finally, implement getServiceApi(String, String) to return a new Service API instance., +				See <code>org.springframework.social.twitter.connect.TwitterServiceProvider</code> as an example OAuth1ServiceProvider:, +				In getServiceApi(String, String), you should construct your Service API implementation, passing it the four tokens needed to make authorized requests for protected resources., +		<para>, +			Consult the JavaDoc API of the various service provider types for more information and subclassing options., +		</para>, +		<para>, +			As discussed in the previous chapter, one of the roles of a ServiceProviderConnection is to provide a common abstraction for a linked user account that is applied across all service providers., +			The role of the ServiceApiAdapter is to map a provider's native Service API onto this uniform ServiceProviderConnection model., +			A connection delegates to its adapter to perform operations such as testing the validity of its API credentials, setting metadata values, fetching a user profile, and updating user status:, +			<programlisting language="java"><![CDATA[, +public interface ServiceApiAdapter<S> {, +, +    boolean test(S serviceApi);, +			, +    void setConnectionValues(S serviceApi, ServiceProviderConnectionValues values);, +, +    ServiceProviderUserProfile fetchUserProfile(S serviceApi);, +	, +    void updateStatus(S serviceApi, String message);, +	, +}]]>, +			</programlisting>, +			<para>, +				Consider <code>org.springframework.social.twitter.connect.TwitterServiceApiAdapter</code> as an example implementation:, +			</para>, +			<programlisting language="java"><![CDATA[, +public class TwitterServiceApiAdapter implements ServiceApiAdapter<TwitterApi> {, +, +    public boolean test(TwitterApi serviceApi) {, +        try {, +            serviceApi.userOperations().getUserProfile();, +            return true;, +        } catch (BadCredentialsException e) {, +            return false;, +        }, +    }, +, +    public void setConnectionValues(TwitterApi serviceApi, ServiceProviderConnectionValues values) {, +        TwitterProfile profile = serviceApi.userOperations().getUserProfile();, +        values.setProviderUserId(Long.toString(profile.getId()));, +        values.setDisplayName("@" + profile.getScreenName());, +        values.setProfileUrl(profile.getProfileUrl());, +        values.setImageUrl(profile.getProfileImageUrl());, +    }, +    , +    public ServiceProviderUserProfile fetchUserProfile(TwitterApi serviceApi) {, +        TwitterProfile profile = serviceApi.userOperations().getUserProfile();, +        return new ServiceProviderUserProfileBuilder().setName(profile.getName()).setUsername(profile.getScreenName()).build();, +    }, +    , +    public void updateStatus(TwitterApi serviceApi, String message) {, +        serviceApi.timelineOperations().updateStatus(message);	, +    }, +	, +}]]>, +			</programlisting>, +		</para>, +		<para>, +			As you can see, test(...) returns true if the API instance is functional and false if it is not., +			setConnectionValues(...) sets the connection's providerUserId, displayName, profileUrl, and imageUrl properties from TwitterProfile data., +			fetchUserProfile(...) maps a TwitterProfile onto the normalized ServiceProviderUserProfile model., +			updateStatus(...) update's the user's Twitter status., +			Consult the JavaDoc for ServiceApiAdapter and ServiceProviderConnection for more information and implementation guidance., +			We also recommend reviewing the other ServiceApiAdapter implementations for additional examples., +		</para>, +++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create a ServiceProvider that allows users to authorize with the remote provider and obtain authorized Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, +				As part of the spring-social-test module, Spring Social includes a framework for unit testing API bindings., +		<para>, +			As described in the previous section, a client binding to a secure API such as Facebook or Twitter requires valid user authorization credentials to work., +			Such credentials are generally obtained by having your application conduct an authorization "dance" or handshake with the service provider., +			Spring Social provides the ServiceProvider&lt;S&gt; abstraction to handle this "authorization dance"., +			The abstraction also acts as a factory for native Service API (S) instances.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ReconnectFilter.java, +		return httpRequest.getServletPath().substring(CONNECT_PATH_LENGTH).replace("/", "");, +	private static final int CONNECT_PATH_LENGTH = CONNECT_PATH.length();, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ReconnectFilter.java, +		return httpRequest.getServletPath().substring(CONNECT_PATH_LENGTH).replace("/", "");, +	private static final int CONNECT_PATH_LENGTH = CONNECT_PATH.length();, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ReconnectFilterTest.java, +/*, + * Copyright 2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web;, +, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +, +import java.io.IOException;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +, +import org.junit.Test;, +import org.springframework.mock.web.MockFilterChain;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +import org.springframework.social.UserIdSource;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.UsersConnectionRepository;, +, +public class ReconnectFilterTest {, +, +	@Test, +	public void shouldPerformRefreshPostRequest() throws Exception {, +		performFilterForPostRequest("/connect/google", "google");, +		performFilterForPostRequest("/connect/google/", "google");, +	}, +, +	private void performFilterForPostRequest(String servletPath, String providerId) throws IOException, ServletException {, +		UsersConnectionRepository uconnRepo = mock(UsersConnectionRepository.class);, +		UserIdSource userIdSource = new UserIdSource() {, +			public String getUserId() {, +				return "habuma";, +			}, +		};, +, +		ConnectionRepository connRepo = mock(ConnectionRepository.class);, +		when(uconnRepo.createConnectionRepository("habuma")).thenReturn(connRepo);, +		ReconnectFilter filter = new ReconnectFilter(uconnRepo, userIdSource);, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setMethod("GET");, +		request.setServletPath(servletPath);, +		request.addParameter("reconnect", "true");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		MockFilterChain chain = new MockFilterChain();, +		filter.doFilter(request, response, chain);, +		HttpServletRequest redirectRequest = (HttpServletRequest) chain.getRequest();, +		assertEquals("POST", redirectRequest.getMethod());, +		assertEquals(servletPath, redirectRequest.getServletPath());, +		, +		verify(connRepo).removeConnections(providerId);, +	}, +	, +}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + * OAuth10Operations implementation that uses REST-template to make the OAuth calls.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +        private String applicationUrl;, +, +		this.applicationUrl = applicationUrl;, +		if (this.applicationUrl != null) {, +			this.connectSupport.setApplicationUrl(applicationUrl);, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +        private String applicationUrl;, +, +		this.applicationUrl = applicationUrl;, +		if (this.applicationUrl != null) {, +			this.connectSupport.setApplicationUrl(applicationUrl);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +	@Test, +	public void constructor() {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, +			new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		providerSignInController.setApplicationUrl("my.url");, +	}, +]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 6, 2011), +======================================================, +Notable, +   * Extracted provider-specific modules to separate projects, +   * Renamed {Provider}Api interfaces to {Provider}.java, +     (e.g. TwitterApi is now Twitter), +, +New Features, +   * Enabled use of Spring Social behind a proxy, +   * Facebook API binding:, +     * Photo and video upload, +     * Facebook search, +     * Facebook pages, +   * Twitter API binding:, +     * Block API, +     * Notifications API, +     * Geo API, +, +Bug Fixes, +   * SOCIAL-152: Spring Social depends upon some Spring 3.1M1 (or unreleased, +        3.0.6) classes., +   * SOCIAL-148: LinkedInTemplate not working on Android because of , +        javax.xml.bind.annotation.XmlRootElement dependency, +   * SOCIAL-145: Deserialization error on WorkEntry when entry contains location,, +        position, or description., +   * SOCIAL-158: javax.Inject dependency is marked optional on spring-social-web, +        and it is required, +   * SOCIAL-133: RestTemplate not injected into OAuth2Template, +   * SOCIAL-168: Servlet path must be configurable in the redirect URL generation , +        of ConnectController, +   * SOCIAL-170: Wrong character set when Spring Social is used with Spring 3.0.x, +   * SOCIAL-142: DuplicateKeyException not handled properly when attempting to, +        insert a connection that already exists, +   * SOCIAL-102: ConnectController should handle ConnectionAlreadyExistsException, +        more gracefully, +   * SOCIAL-174: Facebook feed deserialization fails when a post comments field, +        doesn't have data, +   * SOCIAL-173: TwitterErrorHandler and FacebookErrorHandler should not fail on, +        non-JSON error bodies., +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +, +	public ServiceProviderUser getUser(Object serviceApi) {, +		return EMPTY_PROFILE;, +	private static final ServiceProviderUser EMPTY_PROFILE = new ServiceProviderUser(null, null, null, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +, +	public ServiceProviderUser getUser(Object serviceApi) {, +		return EMPTY_PROFILE;, +	private static final ServiceProviderUser EMPTY_PROFILE = new ServiceProviderUser(null, null, null, null);, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +, +	public ServiceProviderUser getUser(Object serviceApi) {, +		return EMPTY_PROFILE;, +	private static final ServiceProviderUser EMPTY_PROFILE = new ServiceProviderUser(null, null, null, null);, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +, +	public ServiceProviderUser getUser(Object serviceApi) {, +		return EMPTY_PROFILE;, +	private static final ServiceProviderUser EMPTY_PROFILE = new ServiceProviderUser(null, null, null, null);, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +, +	public ServiceProviderUser getUser(Object serviceApi) {, +		return EMPTY_PROFILE;, +	private static final ServiceProviderUser EMPTY_PROFILE = new ServiceProviderUser(null, null, null, null);, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/spi/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.spi;, +, +import org.springframework.social.connect.ServiceProviderConnection;, +, +/**, + * An adapter that bridges between the uniform {@link ServiceProviderConnection} model and a specific provider API model., + * @author Keith Donald, + * @param <S> the service API, + */, +public interface ServiceApiAdapter<S> {, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#test()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#getUser()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return the uniform service provider user model, +	 */, +	ServiceProviderUser getUser(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#updateStatus(String)} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @param message the status message, +	 */, +	void updateStatus(S serviceApi, String message);, +	]
[+++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(255) not null,                  , +    secret varchar(255),, +    refreshToken varchar(255),, +++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(255) not null,                  , +    secret varchar(255),, +    refreshToken varchar(255),, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.SessionStrategy;, +import org.springframework.social.connect.web.HttpSessionSessionStrategy;, +import org.springframework.web.context.request.ServletWebRequest;, +	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();	, +, +	/**, +	 * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., +	 * The default strategy is to set the data as attributes in the HTTP Session., +	 * @param sessionStrategy the session strategy., +	 */, +	public void setSessionStrategy(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +, +				sessionStrategy.setAttribute(new ServletWebRequest(request), ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(token.getConnection()));]
[+++ b/.gitignore, +**/.classpath, +**/.project]
[+++ b/docs/src/reference/docbook/overview.xml, +				If you are using Spring Social with Spring Framework 3.0.x (3.0.5 or >), make sure you explicitly add the spring-web dependency to your build:, +    <version>3.0.7.RELEASE</version>, +    <version>3.1.0.RELEASE</version>, +				Although shown here to depend on version 4.1.2 of the HttpClient library, Spring Social can also work with 4.0.X versions of HttpClient.]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/ConnectController.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +public class ConnectController implements BeanFactoryAware {, +	public ConnectController(String applicationUrl) {, +	// implementing BeanFactoryAware, +	, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		this.serviceProviderLocator = new ServiceProviderLocator((ListableBeanFactory) beanFactory);, +	}, +, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/ConnectController.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +public class ConnectController implements BeanFactoryAware {, +	public ConnectController(String applicationUrl) {, +	// implementing BeanFactoryAware, +	, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		this.serviceProviderLocator = new ServiceProviderLocator((ListableBeanFactory) beanFactory);, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/ServiceProviderLocator.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.web.connect;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.social.connect.ServiceProvider;, +, +/**, + * Looks up service providers, by name, from the application context., + * @author Craig Walls, + */, +class ServiceProviderLocator {, +, +	private final Map<String, ServiceProvider<?>> serviceProviders;, +, +	public ServiceProviderLocator(ListableBeanFactory beanFactory) {, +		Map<String, ServiceProvider> providers = BeanFactoryUtils.beansOfTypeIncludingAncestors(beanFactory, ServiceProvider.class);, +		serviceProviders = new HashMap<String, ServiceProvider<?>>(providers.size(), 1);, +		for (ServiceProvider<?> provider : providers.values()) {, +			serviceProviders.put(provider.getId(), provider);, +		}, +	}, +	, +	public ServiceProvider<?> getServiceProvider(String id) {, +		return serviceProviders.get(id);, +	}, +	, +}]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * If the request went through an load balancer or proxy, the URL's scheme, host, and/or port may point at an internal server which is not appropriate as an external callback URL., +	 * For those cases you can set application URL to the base external URL for the application and it will be used to construct the callback URL instead of determining the callback URL from the request., +	public void setApplicationUrl(URL applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * If the request went through an load balancer or proxy, the URL's scheme, host, and/or port may point at an internal server which is not appropriate as an external callback URL., +	 * For those cases you can set application URL to the base external URL for the application and it will be used to construct the callback URL instead of determining the callback URL from the request., +	public void setApplicationUrl(URL applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	 * If the request goes through an load balancer or proxy, the URL's scheme, host, and/or port may point at an internal server which is not appropriate as an external callback URL., +	 * For those cases you can set application URL to the base external URL for the application and it will be used to construct the callback URL instead of determining the callback URL from the request., +	public void setApplicationUrl(URL applicationUrl) {]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, new OAuth2Parameters(callbackUrl));, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, new OAuth2Parameters(callbackUrl));, +String authorizeUrl = oauth1Operations.buildAuthorizeUrl(requestToken, OAuth1Parameters.NONE);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authenticateUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +, +	private final OAuth1Operations oauth1Operations;, +			String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +, +	public OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	@Override, +	protected final S getApi(Connection connection) {, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +, +	private final OAuth1Operations oauth1Operations;, +			String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +, +	public OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	@Override, +	protected final S getApi(Connection connection) {, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	}, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +, +	private final OAuth1Operations oauth1Operations;, +			String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +, +	public OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	@Override, +	protected final S getApi(Connection connection) {, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	}, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +, +	private final OAuth1Operations oauth1Operations;, +			String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +, +	public OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	@Override, +	protected final S getApi(Connection connection) {, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/OAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +	 * The service interface for invoking OAuth1 operations against this provider., +	 */, +	OAuth1Operations getOAuthOperations();, +, +	/**, +	 * @param accessToken the access token returned from {@link OAuth1Operations#exchangeForAccessToken(AuthorizedRequestToken)}., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +, +	private final OAuth1Operations oauth1Operations;, +			String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +, +	public OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	@Override, +	protected final S getApi(Connection connection) {, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	}]
[+++ b/build.gradle, +, +++ b/build.gradle, +, +++ b/gradle.properties, +h2Version               = 1.3.175, +hamcrestVersion         = 1.3, +httpComponentsVersion   = 4.3.1, +jacksonVersion          = 2.3.2, +javaxInjectVersion      = 1, +junitVersion            = 4.11, +mockitoVersion          = 1.9.5, +servletApiVersion       = 3.0.1, +springVersion           = 4.0.3.RELEASE, +springReleaseVersion    = latest.release, +springSnapshotVersion   = latest.integration, +springSecurityVersion   = 3.2.3.RELEASE, +thymeleafVersion        = 2.1.2.RELEASE, +jspApiVersion           = 2.2.1]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.hamcrest.core.StringContains.*;, +import org.springframework.test.web.client.RequestMatcher;, +		customOauth10 = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10) {, +		, +				.andExpect(headerContains("Authorization", "oauth_callback=\"http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback\"")), +, +	// private helper, +	@SuppressWarnings("unchecked"), +	private RequestMatcher headerContains(String name, String substring) {, +		return header(name, containsString(substring));, +	}, +]
[+++ b/src/dist/changelog.txt, +Spring Social 2.0.0.M2 (January 20, 2017), +=========================================, +This release primarily addresses Thymeleaf 3 compatibility., +In addition, a few other enhancements and bug fixes, +have been applied:, +, +  * Extract Thymeleaf 2 support from spring-social-web, +    module into spring-social-web-thymeleaf2 module., +  * Thymeleaf 3 support is in new spring-social-web-thymeleaf3, +    module., +  * Only set refresh token if given refresh token is non-null,, +    thereby avoiding loss of refresh token during connection, +    refresh. (Issue #21, Pull request #218), +  * Make JdbcConnectionRepository and InMemoryConnectionRepository, +    public so that they behave correctly when working with , +    Spring Boot DevTools. (Pull request #215), +]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social]
[+++ b/README, +================================ Spring Social ===============================, +Spring Social is an extension of the Spring Framework that helps you connect your, +applications with Software-as-a-Service (SaaS) providers such as Facebook and Twitter., +, +To get up and running quickly using the project, see the Quickstart:, +https://github.com/SpringSource/spring-social/wiki/Quick-Start, +, +-------------------------------------------------------------------------------, +To get the code and build from source, do the following:, +, +git clone git://github.com/SpringSource/spring-social.git, +cd spring-social, +./gradlew build, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, +./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse:, +File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, +./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +, +-------------------------------------------------------------------------------, +Note that the core Spring Social project no longer contains provider modules., +Each of the provider modules is now in its own project., +This will enable those modules to progress and release on a separate schedule, +than Spring Social and be able to react more quickly to changes in the provider's, +API without the need to wait for a Spring Social release., +, +The SaaS provider-specific projects can be cloned from the following GitHub URLs:, +, +Twitter: git://github.com/SpringSource/spring-social-twitter.git, +Facebook: git://github.com/SpringSource/spring-social-facebook.git, +LinkedIn: git://github.com/SpringSource/spring-social-linkedin.git, +TripIt: git://github.com/SpringSource/spring-social-tripit.git, +GitHub: git://github.com/SpringSource/spring-social-github.git, +Gowalla: git://github.com/SpringSource/spring-social-gowalla.git, +, +Each of these projects uses the same build submodule as Spring Social. Thus,, +you'll need to either clone them with the --recursive switch or init/update the, +submodule as described above from Spring Social., +===============================================================================, +++ b/README, +================================ Spring Social ===============================, +Spring Social is an extension of the Spring Framework that helps you connect your, +applications with Software-as-a-Service (SaaS) providers such as Facebook and Twitter., +, +To get up and running quickly using the project, see the Quickstart:, +https://github.com/SpringSource/spring-social/wiki/Quick-Start, +, +-------------------------------------------------------------------------------, +To get the code and build from source, do the following:, +, +git clone git://github.com/SpringSource/spring-social.git, +cd spring-social, +./gradlew build, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, +./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse:, +File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, +./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +, +-------------------------------------------------------------------------------, +Note that the core Spring Social project no longer contains provider modules., +Each of the provider modules is now in its own project., +This will enable those modules to progress and release on a separate schedule, +than Spring Social and be able to react more quickly to changes in the provider's, +API without the need to wait for a Spring Social release., +, +The SaaS provider-specific projects can be cloned from the following GitHub URLs:, +, +Twitter: git://github.com/SpringSource/spring-social-twitter.git]
[+++ b/build.gradle, +      h2Version = '1.3.170', +      httpComponentsVersion = '4.2.3', +      junitVersion = '4.11', +      springVersion = '3.2.1.RELEASE', +        testCompile ("org.springframework:spring-test:$springVersion"), +        testCompile ("org.springframework:spring-test:$springVersion"), +++ b/build.gradle, +      h2Version = '1.3.170', +      httpComponentsVersion = '4.2.3', +      junitVersion = '4.11', +      springVersion = '3.2.1.RELEASE', +        testCompile ("org.springframework:spring-test:$springVersion"), +        testCompile ("org.springframework:spring-test:$springVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/build.gradle, +      h2Version = '1.3.170', +      httpComponentsVersion = '4.2.3', +      junitVersion = '4.11', +      springVersion = '3.2.1.RELEASE', +        testCompile ("org.springframework:spring-test:$springVersion"), +        testCompile ("org.springframework:spring-test:$springVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/build.gradle, +      h2Version = '1.3.170', +      httpComponentsVersion = '4.2.3', +      junitVersion = '4.11', +      springVersion = '3.2.1.RELEASE', +        testCompile ("org.springframework:spring-test:$springVersion"), +        testCompile ("org.springframework:spring-test:$springVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth2AuthenticationServiceTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.social.security.test.ArgMatchers.*;, +++ b/build.gradle, +      h2Version = '1.3.170', +      httpComponentsVersion = '4.2.3', +      junitVersion = '4.11', +      springVersion = '3.2.1.RELEASE', +        testCompile ("org.springframework:spring-test:$springVersion"), +        testCompile ("org.springframework:spring-test:$springVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth2AuthenticationServiceTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.social.security.test.ArgMatchers.*;, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;, +import org.springframework.test.web.servlet.MockMvc;, +++ b/build.gradle, +      h2Version = '1.3.170', +      httpComponentsVersion = '4.2.3', +      junitVersion = '4.11', +      springVersion = '3.2.1.RELEASE', +        testCompile ("org.springframework:spring-test:$springVersion"), +        testCompile ("org.springframework:spring-test:$springVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth2AuthenticationServiceTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.social.security.test.ArgMatchers.*;, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;, +import org.springframework.test.web.servlet.MockMvc;, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;, +import org.springframework.test.web.servlet.MockMvc;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +		if (localUserIds.size() == 0 && connectionSignUp != null) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +		if (localUserIds.size() == 0 && connectionSignUp != null) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import org.springframework.social.connect.ConnectionSignUp;, +	public void findUserIdWithConnectionNoConnection_withWorkingConnectionSignUp() {		, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("12345"));, +		usersConnectionRepository.setConnectionSignUp(new ConnectionSignUp() {, +			public String execute(Connection<?> connection) {, +				return "batman";, +			}, +		});, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, +		assertEquals(1, userIds.size());, +		assertEquals("batman", userIds.get(0));, +	}, +, +	@Test]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthClientRequestSigner.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.provider.oauth;, +, +import java.util.Map;, +, +import org.springframework.http.client.ClientHttpRequest;, +, +/**, + * Strategy interface for signing a client request with the necessary, + * information for it to be OAuth-authenticated. Implementations of this, + * interface will vary for different versions of OAuth., + * , + * @author Craig Walls, + */, +public interface OAuthClientRequestSigner {, +	void sign(ClientHttpRequest request, Map<String, String> bodyParameters);, +}, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthClientRequestSigner.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.provider.oauth;, +, +import java.util.Map;, +, +import org.springframework.http.client.ClientHttpRequest;, +, +/**, + * Strategy interface for signing a client request with the necessary, + * information for it to be OAuth-authenticated. Implementations of this, + * interface will vary for different versions of OAuth., + * , + * @author Craig Walls, + */, +public interface OAuthClientRequestSigner {, +	void sign(ClientHttpRequest request, Map<String, String> bodyParameters);, +}, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthSigningClientHttpRequest.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.provider.oauth;, +, +import java.io.IOException;, +import java.net.URI;, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.MediaType;, +import org.springframework.http.client.AbstractClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, +	private OAuthToken accessToken;, +	public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, +		// TODO: implement me, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, +	private OAuthToken accessToken;, +	public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, +		// TODO: implement me, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, +	private OAuthToken accessToken;, +	public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, +		// TODO: implement me, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.UUID;, +import javax.crypto.Mac;, +import javax.crypto.spec.SecretKeySpec;, +, +import org.apache.commons.codec.binary.Base64;, +		Map<String, String> oauthParameters = getCommonOAuthParameters();, +		String authHeader = buildAuthorizationHeader(tokenUrl, oauthParameters, Collections.<String, String> emptyMap(), HttpMethod.POST, tokenSecret);, +	private Map<String, String> getCommonOAuthParameters() {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		oauthParameters.put("oauth_timestamp", String.valueOf(System.currentTimeMillis() / 1000));, +		oauthParameters.put("oauth_nonce", UUID.randomUUID().toString());, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +, +	, +	// private helpers, +, +	private String buildAuthorizationHeader(String targetUrl, HttpMethod method, Map<String, String> parameters, OAuthToken accessToken) {, +		Map<String, String> oauthParameters = getCommonOAuthParameters();, +		oauthParameters.put("oauth_token", accessToken.getValue());, +		return buildAuthorizationHeader(targetUrl, oauthParameters, parameters, method, accessToken.getSecret());, +	}, +, +	private String buildAuthorizationHeader(String targetUrl, Map<String, String> oauthParameters,, +			Map<String, String> additionalParameters, HttpMethod method, String tokenSecret) {, +		String baseString = buildBaseString(targetUrl, oauthParameters, additionalParameters, method);, +		String signature = calculateSignature(baseString, tokenSecret);, +		String header = "OAuth ";, +		for (String key : oauthParameters.keySet()) {, +			header += key + "=\"" + encode(oauthParameters.get(key)) + "\", ";, +		}, +		header += "oauth_signature=\"" + encode(signature) + "\"";, +		return header;, +	}, +, +	private String buildBaseString(String targetUrl, Map<String, String> parameters, Map<String, String> additionalParameters, HttpMethod method) {, +		Map<String, String> allParameters = new HashMap<String, String>(parameters);, +		allParameters.putAll(additionalParameters);, +		String baseString = method.toString() + "&" + encode(targetUrl) + "&";, +		List<String> keys = new ArrayList<String>(allParameters.keySet());, +		Collections.sort(keys);, +		String separator = "";, +		for (String key : keys) {, +			baseString += encode(separator + key + "=" + encode(allParameters.get(key)).replace("+", "%20"));, +			separator = "&";, +		}, +		return baseString;, +	}, +, +	private String calculateSignature(String baseString, String tokenSecret) {, +		String key = consumerSecret + "&" + (tokenSecret == null ? "" : tokenSecret);, +		return sign(baseString, key);, +	}, +, +	private String sign(String signatureBaseString, String key) {, +		try {, +			Mac mac = Mac.getInstance(HMAC_SHA1_MAC_NAME);, +			SecretKeySpec spec = new SecretKeySpec(key.getBytes(), HMAC_SHA1_MAC_NAME);, +			mac.init(spec);, +			byte[] text = signatureBaseString.getBytes("UTF-8");, +			byte[] signatureBytes = mac.doFinal(text);, +			signatureBytes = Base64.encodeBase64(signatureBytes);, +			String signature = new String(signatureBytes, "UTF-8");, +			return signature;]
[+++ b/build.gradle, +      httpComponentsVersion = '4.3.1', +      servletApiVersion = '3.0.1', +      springVersion = '4.0.0.RELEASE', +      springSecurityVersion = '3.2.0.RELEASE', +        testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +      testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +++ b/build.gradle, +      httpComponentsVersion = '4.3.1', +      servletApiVersion = '3.0.1', +      springVersion = '4.0.0.RELEASE', +      springSecurityVersion = '3.2.0.RELEASE', +        testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +      testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +import java.net.URI;, +import org.apache.http.client.protocol.HttpClientContext;, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.client.HttpClients;, +import org.apache.http.protocol.HttpContext;, +import org.springframework.http.HttpMethod;, +			, +				protected HttpContext createHttpContext(HttpMethod httpMethod, URI uri) {, +					HttpClientContext context = new HttpClientContext();, +					context.setAttribute("http.protocol.expect-continue", false);, +					return context;, +				}, +			, +			, +				CloseableHttpClient httpClient = HttpClients.custom(), +						.setProxy(proxy), +						.build();, +			, +			, +++ b/build.gradle, +      httpComponentsVersion = '4.3.1', +      servletApiVersion = '3.0.1', +      springVersion = '4.0.0.RELEASE', +      springSecurityVersion = '3.2.0.RELEASE', +        testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +      testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +import java.net.URI;, +import org.apache.http.client.protocol.HttpClientContext;, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.client.HttpClients;, +import org.apache.http.protocol.HttpContext;, +import org.springframework.http.HttpMethod;, +			, +				protected HttpContext createHttpContext(HttpMethod httpMethod, URI uri) {, +					HttpClientContext context = new HttpClientContext();, +					context.setAttribute("http.protocol.expect-continue", false);, +					return context;, +				}, +			, +			, +				CloseableHttpClient httpClient = HttpClients.custom(), +						.setProxy(proxy), +						.build();, +			, +			, +++ b/spring-social-core/src/test/java/org/springframework/social/support/ClientHttpRequestFactorySelectorTest.java, +import org.junit.Ignore;, +	@Ignore("It's unclear how to read proxy settings from the request factory in HttpClient 4.3.x"), +	@Ignore("It's unclear how to read proxy settings from the request factory in HttpClient 4.3.x"), +	@Ignore("It's unclear how to read proxy settings from the request factory in HttpClient 4.3.x"), +++ b/build.gradle, +      httpComponentsVersion = '4.3.1', +      servletApiVersion = '3.0.1', +      springVersion = '4.0.0.RELEASE', +      springSecurityVersion = '3.2.0.RELEASE', +        testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +      testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +import java.net.URI;, +import org.apache.http.client.protocol.HttpClientContext;, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.client.HttpClients;, +import org.apache.http.protocol.HttpContext;, +import org.springframework.http.HttpMethod;, +			, +				protected HttpContext createHttpContext(HttpMethod httpMethod, URI uri) {, +					HttpClientContext context = new HttpClientContext();, +					context.setAttribute("http.protocol.expect-continue", false);, +					return context;, +				}, +			, +			, +				CloseableHttpClient httpClient = HttpClients.custom(), +						.setProxy(proxy), +						.build();, +			]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +package org.springframework.social.showcase.facebook;, +, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.facebook.FacebookOperations;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +import org.springframework.web.context.request.WebRequest;, +, +public class PostToWallAfterConnectInterceptor implements ConnectInterceptor<FacebookOperations> {, +, +	public void preConnect(ServiceProvider<FacebookOperations> provider, WebRequest request) {, +		if (StringUtils.hasText(request.getParameter(POST_TO_WALL_PARAMETER))) {, +			request.setAttribute(POST_TO_WALL_ATTRIBUTE, Boolean.TRUE, WebRequest.SCOPE_SESSION);, +		}, +	}, +, +	public void postConnect(ServiceProvider<FacebookOperations> provider,, +			ServiceProviderConnection<FacebookOperations> connection, WebRequest request) {, +		if (request.getAttribute(POST_TO_WALL_ATTRIBUTE, WebRequest.SCOPE_SESSION) != null) {, +			try {, +				connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +			} catch (DuplicateTweetException e) {, +			}, +			request.removeAttribute(POST_TO_WALL_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		}, +	}, +, +	private static final String POST_TO_WALL_PARAMETER = "postToWall";, +, +	private static final String POST_TO_WALL_ATTRIBUTE = "facebookConnect." + POST_TO_WALL_PARAMETER;, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +package org.springframework.social.showcase.facebook;, +, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.facebook.FacebookOperations;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +import org.springframework.web.context.request.WebRequest;, +, +public class PostToWallAfterConnectInterceptor implements ConnectInterceptor<FacebookOperations> {, +, +	public void preConnect(ServiceProvider<FacebookOperations> provider, WebRequest request) {, +		if (StringUtils.hasText(request.getParameter(POST_TO_WALL_PARAMETER))) {, +			request.setAttribute(POST_TO_WALL_ATTRIBUTE, Boolean.TRUE, WebRequest.SCOPE_SESSION);, +		}, +	}, +, +	public void postConnect(ServiceProvider<FacebookOperations> provider,, +			ServiceProviderConnection<FacebookOperations> connection, WebRequest request) {, +		if (request.getAttribute(POST_TO_WALL_ATTRIBUTE, WebRequest.SCOPE_SESSION) != null) {, +			try {, +				connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +			} catch (DuplicateTweetException e) {, +			}, +			request.removeAttribute(POST_TO_WALL_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		}, +	}, +, +	private static final String POST_TO_WALL_PARAMETER = "postToWall";, +, +	private static final String POST_TO_WALL_ATTRIBUTE = "facebookConnect." + POST_TO_WALL_PARAMETER;, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +package org.springframework.social.showcase.twitter;, +, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.twitter.TwitterOperations;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +import org.springframework.web.context.request.WebRequest;, +, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void preConnect(ServiceProvider<TwitterOperations> provider, WebRequest request) {, +		if (StringUtils.hasText(request.getParameter(POST_TWEET_PARAMETER))) {, +			request.setAttribute(POST_TWEET_ATTRIBUTE, Boolean.TRUE, WebRequest.SCOPE_SESSION);, +		}, +	}, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,, +			ServiceProviderConnection<TwitterOperations> connection, WebRequest request) {, +		if (request.getAttribute(POST_TWEET_ATTRIBUTE, WebRequest.SCOPE_SESSION) != null) {, +			try {, +				connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +			} catch (DuplicateTweetException e) {, +			}, +			request.removeAttribute(POST_TWEET_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		}, +	}, +, +	private static final String POST_TWEET_PARAMETER = "postTweet";, +]
[+++ b/src/reference/docbook/index.xml, +      <year>2011-2013</year>]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/gradle.properties, +++ b/build.gradle, +++ b/gradle.properties, +++ b/settings.gradle, +++ b/build.gradle, +++ b/gradle.properties, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/src/dist/changelog.txt, +Spring Social 2.0.0.M3 (? ?, 2017), +==================================, +  * Remove Thymeleaf 2 support., +]
[+++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<form action="<c:url value="/connect/twitter/signin" />" method="post">, +	<button type="submit">Sign In With Twitter</button>, +</form>, +, +<form action="<c:url value="/connect/facebook/signin" />" method="post">, +	<button type="submit">Sign In With Facebook</button>, +</form>, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<form action="<c:url value="/connect/twitter/signin" />" method="post">, +	<button type="submit">Sign In With Twitter</button>, +</form>, +, +<form action="<c:url value="/connect/facebook/signin" />" method="post">, +	<button type="submit">Sign In With Facebook</button>, +</form>, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Serializable findAccountIdByAccessToken(String provider, String accessToken) {, +		List<Serializable> matches = jdbcTemplate.query("select accountId from Connection where providerId = ? and accessToken = ?", new RowMapper<Serializable>() {, +			public Serializable mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return (Serializable) rs.getObject("accountId");, +			}, +		}, provider, encrypt(accessToken));, +, +		return !matches.isEmpty() ? matches.get(0) : null;, +	}, +, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<form action="<c:url value="/connect/twitter/signin" />" method="post">, +	<button type="submit">Sign In With Twitter</button>, +</form>, +, +<form action="<c:url value="/connect/facebook/signin" />" method="post">, +	<button type="submit">Sign In With Facebook</button>, +</form>, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Serializable findAccountIdByAccessToken(String provider, String accessToken) {, +		List<Serializable> matches = jdbcTemplate.query("select accountId from Connection where providerId = ? and accessToken = ?", new RowMapper<Serializable>() {, +			public Serializable mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return (Serializable) rs.getObject("accountId");, +			}, +		}, provider, encrypt(accessToken));, +, +		return !matches.isEmpty() ? matches.get(0) : null;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionRepository.java, +	/**, +	 * Looks up an account ID that is connected to a provider for a given access token., +	 */, +	Serializable findAccountIdByAccessToken(String provider, String accessToken);, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml]
[+++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +			String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +			String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1EnabledRestTemplateFactory.java, +import org.springframework.social.oauth.OAuthClientRequestAuthorizer;, +		return new OAuthEnabledRestTemplate(getAuthorizer());, +	protected abstract OAuthClientRequestAuthorizer getAuthorizer();, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +			String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1EnabledRestTemplateFactory.java, +import org.springframework.social.oauth.OAuthClientRequestAuthorizer;, +		return new OAuthEnabledRestTemplate(getAuthorizer());, +	protected abstract OAuthClientRequestAuthorizer getAuthorizer();, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +			String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1EnabledRestTemplateFactory.java, +import org.springframework.social.oauth.OAuthClientRequestAuthorizer;, +		return new OAuthEnabledRestTemplate(getAuthorizer());, +	protected abstract OAuthClientRequestAuthorizer getAuthorizer();, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth1/SSOAuth1ClientRequestAuthorizer.java, +package org.springframework.social.oauth1;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth.consumer.OAuthConsumerSupport;, +import org.springframework.security.oauth.consumer.ProtectedResourceDetails;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public class SSOAuth1ClientRequestAuthorizer extends OAuth1ClientRequestAuthorizer {, +	private final OAuthConsumerSupport oauthSupport;, +	private final SSOAuthAccessTokenServices tokenServices;, +	private final ProtectedResourceDetails protectedResourceDetails;, +, +	public SSOAuth1ClientRequestAuthorizer(OAuthConsumerSupport oauthSupport,, +			ProtectedResourceDetails protectedResourceDetails, SSOAuthAccessTokenServices tokenServices) {, +		this.oauthSupport = oauthSupport;, +		this.tokenServices = tokenServices;, +		this.protectedResourceDetails = protectedResourceDetails;, +	}, +, +	public String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters) {, +, +		OAuthConsumerToken accessToken = resolveAccessToken();, +		if (accessToken == null) {, +			return null;, +		}, +, +		return oauthSupport.getAuthorizationHeader(protectedResourceDetails, accessToken, url, method.name(),, +				parameters);, +	}, +, +	private OAuthConsumerToken resolveAccessToken() {, +		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +		if (authentication == null) {, +			throw new AuthenticationCredentialsNotFoundException("No credentials found");, +		}, +, +		OAuthConsumerToken accessToken = tokenServices.getToken(protectedResourceDetails.getId(),, +				authentication.getPrincipal());, +		return accessToken;]
[+++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItModule.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.tripit.api.impl;, +, +import org.codehaus.jackson.Version;, +import org.codehaus.jackson.map.module.SimpleModule;, +import org.springframework.social.tripit.api.Trip;, +import org.springframework.social.tripit.api.TripItProfile;, +, +/**, + * Jackson module for registering mixin annotations against TripIt model classes., + */, +public class TripItModule extends SimpleModule {, +	, +	public TripItModule() {, +		super("TripItModule", new Version(1, 0, 0, null));, +	}, +	, +	@Override, +	public void setupModule(SetupContext context) {, +		context.setMixInAnnotations(Trip.class, TripMixin.class);, +		context.setMixInAnnotations(TripItProfile.class, TripitProfileMixin.class);, +	}, +, +}, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItModule.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.tripit.api.impl;, +, +import org.codehaus.jackson.Version;, +import org.codehaus.jackson.map.module.SimpleModule;, +import org.springframework.social.tripit.api.Trip;, +import org.springframework.social.tripit.api.TripItProfile;, +, +/**, + * Jackson module for registering mixin annotations against TripIt model classes., + */, +public class TripItModule extends SimpleModule {, +	, +	public TripItModule() {, +		super("TripItModule", new Version(1, 0, 0, null));, +	}, +	, +	@Override, +	public void setupModule(SetupContext context) {, +		context.setMixInAnnotations(Trip.class, TripMixin.class);, +		context.setMixInAnnotations(TripItProfile.class, TripitProfileMixin.class);, +	}, +, +}, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItTemplate.java, +import org.codehaus.jackson.map.ObjectMapper;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +		registerTwitterModule(restTemplate);, +		return restTemplate.getForObject("https://api.tripit.com/v1/get/profile?format=json", TripItProfile.class);, +		return restTemplate.getForObject("https://api.tripit.com/v1/list/trip/traveler/true/past/false?format=json", TripList.class).getList();, +	// private helper, +	, +	private void registerTwitterModule(RestTemplate restTemplate) {, +		List<HttpMessageConverter<?>> converters = restTemplate.getMessageConverters();, +		for (HttpMessageConverter<?> converter : converters) {, +			if(converter instanceof MappingJacksonHttpMessageConverter) {, +				MappingJacksonHttpMessageConverter jsonConverter = (MappingJacksonHttpMessageConverter) converter;, +				ObjectMapper objectMapper = new ObjectMapper();				, +				objectMapper.registerModule(new TripItModule());, +				jsonConverter.setObjectMapper(objectMapper);, +			}, +		}, +	}, +, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItModule.java]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.authentication.AuthenticationTrustResolverImpl;, +	private AuthenticationTrustResolverImpl authenticationTrustResolver = new AuthenticationTrustResolverImpl();, +, +		// Check if not already authenticated or is already logged in anonymous., +		if (auth == null || !auth.isAuthenticated() || authenticationTrustResolver.isAnonymous(auth)) {]
[+++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (must not be null)., +++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (must not be null)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (must not be null)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (must not be null)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (must not be null)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software]
[+++ b/build.gradle, +    h2Version = '1.3.156', +++ b/build.gradle, +    h2Version = '1.3.156', +++ b/docs/src/reference/docbook/connecting.xml, +        registry.addConnectionFactory(new FacebookConnectionFactory(, +            environment.getProperty("facebook.clientId"),, +        registry.addConnectionFactory(new TwitterConnectionFactory(, +            environment.getProperty("twitter.consumerKey"),, +    public ConnectionRepository connectionRepository(, +            @Value("#{request.userPrincipal}") Principal principal) {, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), , +                textEncryptor);, +<bean id="connectionFactoryLocator" , +      class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" , +      class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +<bean id="connectionRepository" factory-method="createConnectionRepository" , +      factory-bean="usersConnectionRepository" scope="request">, +    <aop:scoped-proxy proxy-target-class="false" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" , +              factory-method="noOpText" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" , +              factory-method="text">, +        return new ConnectController(connectionFactoryLocator(), , +                connectionRepository());, +    <!-- relies on by-type autowiring for the constructor-args -->, +			When coordinating a connection with a service provider, <classname>ConnectController</classname> constructs a callback URL for the provider to redirect to after the user grants authorization., +			By default <classname>ConnectController</classname> uses information from the request to determine the protocol, host name, and port number to use when creating the callback URL., +			This is fine in many cases, but if your application is hosted behind a proxy those details may point to an internal server and will not be suitable for constructing a public callback URL., +		</para>, +		<para>, +			If you have this problem, you can set the <code>applicationUrl</code> property to the base external URL of your application., +			<classname>ConnectController</classname> will use that URL to construct the callback URL instead of using information from the request., +			For example:, +		</para>, +		<programlisting language="java"><![CDATA[, +@Configuration, +public class SocialConfig {, +, +    @Bean, +    public ConnectController connectController() {, +        ConnectController controller = new ConnectController(, +                connectionFactoryLocator(), connectionRepository());, +        controller.setApplicationUrl(environment.getProperty("application.url"));, +        return controller;, +    }, +    , +}]]>, +		</programlisting>, +		, +		<para>, +			Or if you prefer XML configuration:, +		</para>, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.connect.web.ConnectController">, +    <!-- relies on by-type autowiring for the constructor-args -->, +    <property name="applicationUrl" value="${application.url}" />, +</bean>]]>, +		</programlisting>, +		<para>, +			Just as with the authorization keys and secrets, we recommend that you externalize the application URL because it will likely vary across different deployment environments., +		</para>, +		<para>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/>, +    </button></p>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/>, +    </button></p>, +    ConnectController controller = new ConnectController(connectionFactoryLocator(), , +            connectionRepository());, +++ b/build.gradle, +    h2Version = '1.3.156', +++ b/docs/src/reference/docbook/connecting.xml, +        registry.addConnectionFactory(new FacebookConnectionFactory(, +            environment.getProperty("facebook.clientId"),, +        registry.addConnectionFactory(new TwitterConnectionFactory(, +            environment.getProperty("twitter.consumerKey"),, +    public ConnectionRepository connectionRepository(, +            @Value("#{request.userPrincipal}") Principal principal) {, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), , +                textEncryptor);, +<bean id="connectionFactoryLocator" , +      class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" , +      class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +<bean id="connectionRepository" factory-method="createConnectionRepository" , +      factory-bean="usersConnectionRepository" scope="request">, +    <aop:scoped-proxy proxy-target-class="false" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" , +              factory-method="noOpText" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" , +              factory-method="text">, +        return new ConnectController(connectionFactoryLocator(), , +                connectionRepository());, +    <!-- relies on by-type autowiring for the constructor-args -->, +			When coordinating a connection with a service provider, <classname>ConnectController</classname> constructs a callback URL for the provider to redirect to after the user grants authorization., +			By default <classname>ConnectController</classname> uses information from the request to determine the protocol, host name, and port number to use when creating the callback URL., +			This is fine in many cases, but if your application is hosted behind a proxy those details may point to an internal server and will not be suitable for constructing a public callback URL., +		</para>, +		<para>]
[+++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		addTextToMapMessageConverter();, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("code", authorizationCode);, +		requestParameters.set("redirect_uri", redirectUri);, +		requestParameters.set("grant_type", "authorization_code");, +		Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	, +	// private helpers, +	// TODO : Can probably tweak RestTemplate's message converters to deal with this better., +	private String valueOf(Object object) {, +		if (object == null) {, +			return null;, +		} else if (object instanceof List) {, +			List list = (List) object;, +			if (list.size() > 0) {, +				return String.valueOf(list.get(0));, +			}, +			return null;, +		}, +		return String.valueOf(object);, +	}, +, +	/*, +	 * Facebook returns form-encoded results with a content type of "text/plain". The "text/plain" content type prevents, +	 * any of the default encoders from being able to parse the results, even though FormHttpMessageConverter is, +	 * perfectly capable of doing so. This method adds another FormHttpMessageConverter that can read "text/plain" into, +	 * a Map so that this works for Facebook., +	 */, +	private void addTextToMapMessageConverter() {, +		FormHttpMessageConverter messageConverter = new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				return clazz.equals(Map.class) && mediaType != null && mediaType.getType().equals("text"), +						&& mediaType.getSubtype().equals("plain");, +			}, +		};, +		restTemplate.getMessageConverters().add(messageConverter);, +	}]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.RC3, +role=buildmaster]
[+++ b/gradle.properties, +version=1.1.4.BUILD-SNAPSHOT]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private RestTemplate restTemplate;, +		getRestTemplate().setRequestFactory(requestFactory);, +		if (!useParametersForClientAuthentication) {, +			restTemplate.getInterceptors().add(new PreemptiveBasicAuthClientHttpRequestInterceptor(clientId, clientSecret));, +		}, +		return extractAccessGrant(getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class));, +		// Lazily create RestTemplate to make sure all parameters have had a chance to be set., +		// Can't do this InitializingBean.afterPropertiesSet() because it will often be created directly and not as a bean., +		if (restTemplate == null) {, +			restTemplate = createRestTemplate();, +		}]
[+++ b/samples/twitter-showcase/pom.xml, +		    <artifactId>spring-social-core</artifactId>, +++ b/samples/twitter-showcase/pom.xml, +		    <artifactId>spring-social-core</artifactId>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.connect.ServiceProviderConnection;, +++ b/samples/twitter-showcase/pom.xml, +		    <artifactId>spring-social-core</artifactId>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.connect.ServiceProviderConnection;, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you are attempting to post a duplicate tweet or have reached an update limit., +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you are attempting to post a duplicate tweet or have reached an update limit., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * @param <S> the Service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you are attempting to post a duplicate tweet or have reached an update limit., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * @param <S> the Service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Exception class indicating a problem occurred performing an operation against a service provider., + * This exception class is abstract, as it is too generic for actual use., + * When a SocialException is thrown, it should be one of the more specific subclasses., +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you are attempting to post a duplicate tweet or have reached an update limit., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * @param <S> the Service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Exception class indicating a problem occurred performing an operation against a service provider., + * This exception class is abstract, as it is too generic for actual use., + * When a SocialException is thrown, it should be one of the more specific subclasses., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * Find the id of the <i>single</i> local user that has the given {@link ServiceProviderConnection}., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign a local application user in using his or her provider account., +	 * May never return null if this method implicitly creates a local user account from the connection if no such local account already exists., +	 * All operations on the returned repository instance are relative to the local user., +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you are attempting to post a duplicate tweet or have reached an update limit., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * @param <S> the Service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Exception class indicating a problem occurred performing an operation against a service provider., + * This exception class is abstract, as it is too generic for actual use., + * When a SocialException is thrown, it should be one of the more specific subclasses., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * Find the id of the <i>single</i> local user that has the given {@link ServiceProviderConnection}., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign a local application user in using his or her provider account., +	 * May never return null if this method implicitly creates a local user account from the connection if no such local account already exists., +	 * All operations on the returned repository instance are relative to the local user., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUserProfile.java, +	/**, +	 * Shared, empty profile that when used indicates no profile data is available (all property values are null)., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you are attempting to post a duplicate tweet or have reached an update limit., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * @param <S> the Service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Exception class indicating a problem occurred performing an operation against a service provider., + * This exception class is abstract, as it is too generic for actual use., + * When a SocialException is thrown, it should be one of the more specific subclasses., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * Find the id of the <i>single</i> local user that has the given {@link ServiceProviderConnection}., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign a local application user in using his or her provider account., +	 * May never return null if this method implicitly creates a local user account from the connection if no such local account already exists., +	 * All operations on the returned repository instance are relative to the local user., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUserProfile.java, +	/**, +	 * Shared, empty profile that when used indicates no profile data is available (all property values are null)., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUserProfileBuilder.java, +	 * Sets the profile name field., +	 * Note: parses the name string and sets the individual firstName and lastName fields as well., +	 * Sets the profile firstName field., +	 * Sets the profile lastName field., +	 * Sets the profile email field., +	 * Sets the profile username field., +	 * Builds the user profile., +	 * Call this method after setting all profile field values., +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token.]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.1 Release (December 15, 2011), +===============================================]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MapServiceProviderConnectionFactoryLocator.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, +	private final SignInControllerGateway signinGateway;, +	public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, +		this.signinGateway = signinGateway;, +, +			signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, +	private final SignInControllerGateway signinGateway;, +	public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, +		this.signinGateway = signinGateway;, +, +			signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupForm.java, +	@NotEmpty, +	@Size(min = 6, message = "must be at least 6 characters"), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, +	private final SignInControllerGateway signinGateway;, +	public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, +		this.signinGateway = signinGateway;, +, +			signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupForm.java, +	@NotEmpty, +	@Size(min = 6, message = "must be at least 6 characters"), +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="signinGateway" />, +		<constructor-arg ref="signinGateway" />, +	<bean id="signinGateway" class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +	, +	, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, +	private final SignInControllerGateway signinGateway;, +	public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, +		this.signinGateway = signinGateway;, +, +			signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupForm.java, +	@NotEmpty, +	@Size(min = 6, message = "must be at least 6 characters"), +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="signinGateway" />, +		<constructor-arg ref="signinGateway" />, +	<bean id="signinGateway" class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +	, +	, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +	<link rel="stylesheet" href="<c:url value="/resources/form.css" />" type="text/css" media="screen" />, +		FB.Event.subscribe('auth.sessionChange', function(response) { if (response.session) {} else {} });, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, +	private final SignInControllerGateway signinGateway;, +	public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, +		this.signinGateway = signinGateway;, +, +			signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupForm.java, +	@NotEmpty, +	@Size(min = 6, message = "must be at least 6 characters"), +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="signinGateway" />, +		<constructor-arg ref="signinGateway" />, +	<bean id="signinGateway" class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +	, +	, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +	<link rel="stylesheet" href="<c:url value="/resources/form.css" />" type="text/css" media="screen" />, +		FB.Event.subscribe('auth.sessionChange', function(response) { if (response.session) {} else {} });, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signup.jsp, +<html>, +<head>, +	<title>Spring Social Showcase: Sign Up</title>, +	<link rel="stylesheet" href="<c:url value="/resources/form.css" />" type="text/css" media="screen" />, +</head>, +<body>, +	<h1>Spring Social Showcase: Sign Up</h1>, +	, +</body>, +</html>, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, +	private final SignInControllerGateway signinGateway;, +	public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, +		this.signinGateway = signinGateway;, +, +			signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupForm.java, +	@NotEmpty, +	@Size(min = 6, message = "must be at least 6 characters"), +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="signinGateway" />, +		<constructor-arg ref="signinGateway" />, +	<bean id="signinGateway" class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +	, +	, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +	<link rel="stylesheet" href="<c:url value="/resources/form.css" />" type="text/css" media="screen" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this(accessToken, null);, +	public AccessGrant(String accessToken, String refreshToken) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this(accessToken, null);, +	public AccessGrant(String accessToken, String refreshToken) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this(accessToken, null);, +	public AccessGrant(String accessToken, String refreshToken) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this(accessToken, null);, +	public AccessGrant(String accessToken, String refreshToken) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this(accessToken, null);, +	public AccessGrant(String accessToken, String refreshToken) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/OAuth2ServiceProviderTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this(accessToken, null);, +	public AccessGrant(String accessToken, String refreshToken) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/OAuth2ServiceProviderTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +		return new AccessGrant("12345", "23456");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-github/src/main/java/org/springframework/social/github/api/GitHubApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.github.api;, +, +import org.springframework.social.github.api.impl.GitHubTemplate;, +, +/**, + * Interface specifying a basic set of operations for interacting with GitHub., + * Implemented by {@link GitHubTemplate}. Not often used directly, but a useful, + * option to enhance testability, as it can easily be mocked or stubbed., + * , + * Many of the methods contained in this interface require OAuth authentication, + * with GitHub. When a method's description speaks of the "current user", it is, + * referring to the user for whom the access token has been issued., + * , + * @author Craig Walls, + */, +public interface GitHubApi {, +, +	/**, +	 * Retrieves the user's GitHub profile ID., +	 * , +	 * @return the user's GitHub profile ID., +	 */, +	String getProfileId();, +, +	/**, +	 * Retrieves the user's GitHub profile details., +	 * , +	 * @return the user's GitHub profile, +	 */, +	GitHubUserProfile getUserProfile();, +, +	/**, +	 * Retrieve the URL to the user's GitHub profile., +	 * , +	 * @return the URL to the user's GitHub profile., +	 */, +	String getProfileUrl();, +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-github/src/main/java/org/springframework/social/github/api/GitHubApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.github.api;, +, +import org.springframework.social.github.api.impl.GitHubTemplate;, +, +/**, + * Interface specifying a basic set of operations for interacting with GitHub., + * Implemented by {@link GitHubTemplate}. Not often used directly, but a useful, + * option to enhance testability, as it can easily be mocked or stubbed., + * , + * Many of the methods contained in this interface require OAuth authentication, + * with GitHub. When a method's description speaks of the "current user", it is, + * referring to the user for whom the access token has been issued.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	/**, +	 * Creates a memento that can be used to persist the state of this connection., +	 */, +	ServiceProviderConnectionMemento createMemento();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	/**, +	 * Creates a memento that can be used to persist the state of this connection., +	 */, +	ServiceProviderConnectionMemento createMemento();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	public abstract ServiceProviderConnection<S> createConnection(ServiceProviderConnectionMemento memento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	/**, +	 * Creates a memento that can be used to persist the state of this connection., +	 */, +	ServiceProviderConnectionMemento createMemento();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	public abstract ServiceProviderConnection<S> createConnection(ServiceProviderConnectionMemento memento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionMemento.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +public class ServiceProviderConnectionMemento {, +	, +	private String providerId;, +	, +	private String providerUserId;, +	, +	private String profileName;, +	, +	private String profileUrl;, +	, +	private String profilePictureUrl;, +	, +	private String accessToken;, +	, +	private String secret;, +	, +	private String refreshToken;, +	, +	private Long expireTime;, +, +	public ServiceProviderConnectionMemento(String providerId, String providerUserId, String profileName, String profileUrl, String profilePictureUrl, String accessToken, String secret, String refreshToken, Long expireTime) {, +		this.providerId = providerId;, +		this.providerUserId = providerUserId;, +		this.profileName = profileName;, +		this.profileUrl = profileUrl;, +		this.profilePictureUrl = profilePictureUrl;, +		this.accessToken = accessToken;, +		this.secret = secret;, +		this.refreshToken = refreshToken;, +		this.expireTime = expireTime;, +	}, +, +	public String getProviderId() {, +		return providerId;, +	}, +, +	public String getProviderUserId() {, +		return providerUserId;, +	}, +, +	public String getProfileName() {, +		return profileName;, +	}, +, +	public String getProfileUrl() {, +		return profileUrl;, +	}, +, +	public String getProfilePictureUrl() {, +		return profilePictureUrl;, +	}, +, +	public String getAccessToken() {, +		return accessToken;, +	}, +, +	public String getSecret() {, +		return secret;, +	}, +, +	public String getRefreshToken() {, +		return refreshToken;, +	}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.springframework.http.HttpMethod.POST;, +import static org.springframework.social.test.client.RequestMatchers.body;, +import static org.springframework.social.test.client.RequestMatchers.method;, +import static org.springframework.social.test.client.RequestMatchers.requestTo;, +import static org.springframework.social.test.client.ResponseCreators.withResponse;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.springframework.http.HttpMethod.POST;, +import static org.springframework.social.test.client.RequestMatchers.body;, +import static org.springframework.social.test.client.RequestMatchers.method;, +import static org.springframework.social.test.client.RequestMatchers.requestTo;, +import static org.springframework.social.test.client.ResponseCreators.withResponse;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +	public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, +	ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.springframework.http.HttpMethod.POST;, +import static org.springframework.social.test.client.RequestMatchers.body;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/docs/src/reference/docbook/signin.xml, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>, +++ b/docs/src/reference/docbook/signin.xml, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +import javax.servlet.jsp.tagext.TagSupport;, +public class FacebookInitTag extends TagSupport {, +	private String appId;, +	 * Sets the application's Facebook ID., +	 * @param appId, +	public void setAppId(String appId) {, +		this.appId = appId;, +	public int doStartTag() throws JspException {, +			pageContext.getOut().append("FB.init({appId: '" + appId + "', status: true, cookie: true, xfbml: true});");, +++ b/docs/src/reference/docbook/signin.xml, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +import javax.servlet.jsp.tagext.TagSupport;, +public class FacebookInitTag extends TagSupport {, +	private String appId;, +	 * Sets the application's Facebook ID., +	 * @param appId, +	public void setAppId(String appId) {, +		this.appId = appId;, +	public int doStartTag() throws JspException {, +			pageContext.getOut().append("FB.init({appId: '" + appId + "', status: true, cookie: true, xfbml: true});");, +++ b/spring-social-facebook/src/main/resources/META-INF/facebook.tld, +				<description>The application's Facebook ID</description>, +				<name>appId</name>, +++ b/docs/src/reference/docbook/signin.xml, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +import javax.servlet.jsp.tagext.TagSupport;, +public class FacebookInitTag extends TagSupport {, +	private String appId;, +	 * Sets the application's Facebook ID., +	 * @param appId, +	public void setAppId(String appId) {, +		this.appId = appId;, +	public int doStartTag() throws JspException {, +			pageContext.getOut().append("FB.init({appId: '" + appId + "', status: true, cookie: true, xfbml: true});");, +++ b/spring-social-facebook/src/main/resources/META-INF/facebook.tld, +				<description>The application's Facebook ID</description>, +				<name>appId</name>, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/web/FacebookInitTagTest.java, +		tag.setAppId("test-id");, +			"<script type='text/javascript'>FB.init({appId: 'test-id', status: true, cookie: true, xfbml: true});</script>",]
[+++ b/docs/src/reference/docbook/facebook.xml, +  <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, +  <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, +  , +  <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, +FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceOperations</classname>:</para>, +  , +  <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getServiceOperations(accountId);]]></programlisting>, +, +  <para>Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookOperations</interfacename> created using the connection details for the given account ID. The connection should have been created beforehand via the service provider's <methodname>connect()</methodname> method or using <classname>ConnectController</classname>.</para>  , +, +  <para>With a <interfacename>FacebookOperations</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. These will be covered in the following sections.</para>, +, +  <section id="facebook-getProfile">, +    <title>Retrieving a user's profile data</title>, +, +    <para>You can retrieve a user's Facebook profile data using <interfacename>FacebookOperations</interfacename>' <methodname>getUserProfile()</methodname> method:</para>, +    , +    <programlisting><![CDATA[FacebookProfile profile = facebook.getUserProfile();]]></programlisting>, +    , +    <para>The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name, their email address, and their Facebook ID.</para>, +    , +    <para>If all you need is the user's Facebook ID, you can call <methodname>getProfileId()</methodname> instead:</para>, +    , +    <programlisting><![CDATA[String profileId = facebook.getProfileId();]]></programlisting>, +    , +    <para>Or if you want the user's Facebook URL, you can call <methodname>getProfileUrl()</methodname>:</para>, +    , +    <programlisting><![CDATA[String profileUrl = facebook.getProfileUrl();]]></programlisting>, +    , +  <section id="facebook-friends">, +    <title>Getting a user's Facebook friends</title>, +, +    <para>An essential feature of Facebook and other social networks is creating a network of friends or contacts. You can access the user's list of Facebook friends by calling the <methodname>getFriendIds()</methodname> method:</para>, +    , +    <programlisting><![CDATA[List<String> friendIds = facebook.getFriendIds();]]></programlisting>, +    , +    <para>This returns a list of Facebook IDs belonging to the current user's list of friends. This is just a list of <classname>String</classname> IDs, so to retrieve an individual user's profile data, you can turn around and call the <methodname>getUserProfile()</methodname>, passing in one of those IDs to retrieve the profile data for an individual user:</para>, +    , +    <programlisting><![CDATA[FacebookProfile firstFriend = facebook.getUserProfile(friendIds.get(0));]]></programlisting>, +    , +  </section>, +  , +  <section id="facebook-status">, +    <title>Posting to a user's wall</title>, +, +    <para>To post a message to the user's Facebook wall, call the <methodname>updateStatus()</methodname> method, passing in the message to be posted:</para>, +    , +    <programlisting><![CDATA[facebook.updateStatus("I'm trying out Spring Social!");]]></programlisting>, +    , +    <para>If you'd like to attach a link to the status message, you can do so by passing in a <classname>FacebookLink</classname> object along with the message:</para>, +    , +    <programlisting><![CDATA[FacebookLink link = new FacebookLink("http://www.springsource.org/spring-social", , +        "Spring Social", , +        "The Spring Social Project", , +        "Spring Social is an extension to Spring to enable integration with social networks.");, +facebook.updateStatus("I'm trying out Spring Social!", link);]]></programlisting>, +    , +    <para>When constructing the <classname>FacebookLink</classname> object, the first parameter is the link's URL, the second parameter is the name of the link, the third parameter is a caption, and the fourth is a description of the link.</para>, +  </section>, +  , +  <section id="facebook-publishing">, +    <title>Publishing to Facebook</title>, +, +    <para>Facebook's Graph API allows authenticated users to publish data to several of its object types. <interfacename>FacebookOperations</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method.</para>, +    , +    <para>For example, in the previous section you saw how to post a message to the user's Facebook wall using <methodname>updateStatus()</methodname>. Alternatively you could have accomplished the same thing using <methodname>publish()</methodname> like this:</para>, +    , +    <programlisting><![CDATA[MultiValueMap<String, String> data = new LinkedMultiValueMap<String, String>();, +data.set("message", message);, +publish("me", "feed", data);]]></programlisting>, +, +    <para>The first argument to the <methodname>publish()</methodname> method is the object to publish to--in this case "me" indicates the authenticated user. The second argument is the connection associated with the object--"feed" indicates that it is the user's Facebook wall. Finally, the third argument is a <classname>MultiValueMap</classname> containing data to be published. In this case, it only contains a "message" to be posted to the user's wall.</para> , +, +    <para>You can read more about what graph API objects and connections Facebook supports for publishing at <ulink url="http://developers.facebook.com/docs/api#editing"/></para>, +  </section>, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, +  <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, +  , +  <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, +FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceOperations</classname>:</para>, +  , +  <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getServiceOperations(accountId);]]></programlisting>, +, +  <para>Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookOperations</interfacename> created using the connection details for the given account ID. The connection should have been created beforehand via the service provider's <methodname>connect()</methodname> method or using <classname>ConnectController</classname>.</para>  , +, +  <para>With a <interfacename>FacebookOperations</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. These will be covered in the following sections.</para>, +, +  <section id="facebook-getProfile">, +    <title>Retrieving a user's profile data</title>, +, +    <para>You can retrieve a user's Facebook profile data using <interfacename>FacebookOperations</interfacename>' <methodname>getUserProfile()</methodname> method:</para>, +    , +    <programlisting><![CDATA[FacebookProfile profile = facebook.getUserProfile();]]></programlisting>, +    ]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +		configureRestTemplate(restTemplate);, +		configureRestTemplate(restTemplate);, +	 * Subclassing hook to enable customization of the RestTemplate used to consume provider API resources., +	 * An example use case might be to configure a custom error handler., +	 * @param restTemplate the RestTemplate to configure., +	 */, +	protected void configureRestTemplate(RestTemplate restTemplate) {		, +	}, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +		configureRestTemplate(restTemplate);, +		configureRestTemplate(restTemplate);, +	 * Subclassing hook to enable customization of the RestTemplate used to consume provider API resources., +	 * An example use case might be to configure a custom error handler., +	 * @param restTemplate the RestTemplate to configure., +	 */, +	protected void configureRestTemplate(RestTemplate restTemplate) {		, +	}, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		configureRestTemplate(restTemplate);, +		configureRestTemplate(restTemplate);, +	 * Subclassing hook to enable customization of the RestTemplate used to consume provider API resources., +	 * An example use case might be to configure a custom error handler., +	 * @param restTemplate the RestTemplate to configure., +	 */, +	protected void configureRestTemplate(RestTemplate restTemplate) {		, +	}, +, +	/**]
[+++ b/.gitignore, +**/.settings, +**/bin]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.web.filter.HiddenHttpMethodFilter;, +	 * Note: requires {@link HiddenHttpMethodFilter} to be registered with the '_method' request parameter set to 'DELETE' to convert web browser POSTs to DELETE requests., +	 * Note: requires {@link HiddenHttpMethodFilter} to be registered with the '_method' request parameter set to 'DELETE' to convert web browser POSTs to DELETE requests.]
[+++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, +	@Override, +	public void signIn(Serializable accountId) {, +		SecurityContextHolder.getContext().setAuthentication(, +				new UsernamePasswordAuthenticationToken(accountId, null, null));, +	}, +, +}, +++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, +	@Override, +	public void signIn(Serializable accountId) {, +		SecurityContextHolder.getContext().setAuthentication(, +				new UsernamePasswordAuthenticationToken(accountId, null, null));, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ProviderSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +	</bean>, +	, +	<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +	</bean>, +	, +++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, +	@Override, +	public void signIn(Serializable accountId) {, +		SecurityContextHolder.getContext().setAuthentication(, +				new UsernamePasswordAuthenticationToken(accountId, null, null));, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ProviderSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +	</bean>, +	, +	<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +	</bean>, +	, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/signin/**" access="permitAll" />, +++ b/build.gradle, +        compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;, +	private AuthenticationFailureHandler failureHandler = new SimpleUrlAuthenticationFailureHandler();, +		, +		getFailureHandler().onAuthenticationFailure(request, response, failed);, +	public void setPostFailureUrl(String postFailureUrl) {, +		AuthenticationFailureHandler failureHandler = getFailureHandler();, +		if (failureHandler instanceof SimpleUrlAuthenticationFailureHandler) {, +			SimpleUrlAuthenticationFailureHandler h = (SimpleUrlAuthenticationFailureHandler) failureHandler;, +			h.setDefaultFailureUrl(postFailureUrl);, +		} else {, +			throw new IllegalStateException("can't set postFailureUrl on unknown failureHandler, type is " + failureHandler.getClass().getName());, +		}, +	}, +	, +	public AuthenticationFailureHandler getFailureHandler() {, +		return failureHandler;, +	}, +, +	public void setFailureHandler(AuthenticationFailureHandler failureHandler) {, +		this.failureHandler = failureHandler;, +	}, +]
[+++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Oct 12 11:51:42 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Oct 12 11:51:42 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/gradlew, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, +    ls=`ls -ld "$PRG"`, +    link=`expr "$ls" : '.*-> \(.*\)$'`, +    if expr "$link" : '/.*' > /dev/null; then, +        PRG="$link", +    else, +        PRG=`dirname "$PRG"`"/$link", +    fi, +done, +SAVED="`pwd`", +cd "`dirname \"$PRG\"`/" >/dev/null, +APP_HOME="`pwd -P`", +cd "$SAVED" >/dev/null, +# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +DEFAULT_JVM_OPTS="", +, +nonstop=false, +  NONSTOP* ), +    nonstop=true, +    ;;, +if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then, +    JAVACMD=`cygpath --unix "$JAVACMD"`, +# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong, +if [[ "$(uname)" == "Darwin" ]] && [[ "$HOME" == "$PWD" ]]; then, +  cd "$(dirname "$0")", +fi, +, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Oct 12 11:51:42 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/gradlew, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, +    ls=`ls -ld "$PRG"`, +    link=`expr "$ls" : '.*-> \(.*\)$'`, +    if expr "$link" : '/.*' > /dev/null; then, +        PRG="$link", +    else, +        PRG=`dirname "$PRG"`"/$link", +    fi, +done, +SAVED="`pwd`", +cd "`dirname \"$PRG\"`/" >/dev/null, +APP_HOME="`pwd -P`", +cd "$SAVED" >/dev/null, +# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +DEFAULT_JVM_OPTS="", +, +nonstop=false, +  NONSTOP* ), +    nonstop=true, +    ;;, +if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then, +    JAVACMD=`cygpath --unix "$JAVACMD"`, +# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong, +if [[ "$(uname)" == "Darwin" ]] && [[ "$HOME" == "$PWD" ]]; then, +  cd "$(dirname "$0")", +fi, +, +++ b/gradlew.bat, +@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +set DEFAULT_JVM_OPTS=, +, +@rem Get command-line arguments, handling Windows variants, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE')]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * This may be useful when overriding {@link #addCustomAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., +	protected void addCustomAuthorizationParameters(MultiValueMap<String, String> parameters) {, +		addCustomAuthorizationParameters(parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * This may be useful when overriding {@link #addCustomAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., +	protected void addCustomAuthorizationParameters(MultiValueMap<String, String> parameters) {, +		addCustomAuthorizationParameters(parameters);, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +			protected void addCustomAuthorizationParameters(MultiValueMap<String,String> parameters) {]
[+++ b/build.gradle, +        classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), +        dependencies {, +            springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/build.gradle, +        classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), +        dependencies {, +            springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/build.gradle, +        classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), +        dependencies {, +            springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/build.gradle, +        classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), +        dependencies {, +            springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, +			String providerId = getProviderId(apiType);, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, +		List<?> connections = findConnectionsToProvider(getProviderId(apiType));, +	public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, +		String providerId = getProviderId(apiType);, +	private <S> String getProviderId(Class<S> apiType) {, +		return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, +			String providerId = getProviderId(apiType);, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, +		List<?> connections = findConnectionsToProvider(getProviderId(apiType));, +	public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, +		String providerId = getProviderId(apiType);, +	private <S> String getProviderId(Class<S> apiType) {, +		return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +	public <S> ConnectionFactory<S> getConnectionFactory(Class<S> apiType) {, +		String providerId = apiTypeIndex.get(apiType);, +			throw new IllegalArgumentException("No connection factory for API [" + apiType.getName() + "] is registered");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, +			String providerId = getProviderId(apiType);, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, +		List<?> connections = findConnectionsToProvider(getProviderId(apiType));, +	public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, +		String providerId = getProviderId(apiType);, +	private <S> String getProviderId(Class<S> apiType) {, +		return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +	public <S> ConnectionFactory<S> getConnectionFactory(Class<S> apiType) {, +		String providerId = apiTypeIndex.get(apiType);, +			throw new IllegalArgumentException("No connection factory for API [" + apiType.getName() + "] is registered");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +		Class<?> apiType = GenericTypeResolver.resolveTypeArgument(serviceProvider.getClass(), ServiceProvider.class);, +		if (apiType.isInterface()) {, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class[] { apiType }, new ApiInvocationHandler());, +	private class ApiInvocationHandler implements InvocationHandler {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, +			String providerId = getProviderId(apiType);, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, +		List<?> connections = findConnectionsToProvider(getProviderId(apiType));, +	public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, +		String providerId = getProviderId(apiType);, +	private <S> String getProviderId(Class<S> apiType) {, +		return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +	public <S> ConnectionFactory<S> getConnectionFactory(Class<S> apiType) {, +		String providerId = apiTypeIndex.get(apiType);, +			throw new IllegalArgumentException("No connection factory for API [" + apiType.getName() + "] is registered");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +		Class<?> apiType = GenericTypeResolver.resolveTypeArgument(serviceProvider.getClass(), ServiceProvider.class);, +		if (apiType.isInterface()) {, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class[] { apiType }, new ApiInvocationHandler());, +	private class ApiInvocationHandler implements InvocationHandler {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +		public boolean test(TestFacebookApi api) {, +		public void setConnectionValues(TestFacebookApi api, ConnectionValues values) {, +		public UserProfile fetchUserProfile(TestFacebookApi api) {, +		public void updateStatus(TestFacebookApi api, String message) {, +		public boolean test(TestTwitterApi api) {, +		public void setConnectionValues(TestTwitterApi api, ConnectionValues values) {, +		public UserProfile fetchUserProfile(TestTwitterApi api) {, +		public void updateStatus(TestTwitterApi api, String message) {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	/**, +	 * Creates an instance of a UserProfile., +	 * @param name The user's full name, +	 * @param firstName The user's first name, +	 * @param lastName The user's last name, +	 * @param email The user's email address, +	 * @param username The user's username, +	 * @deprecated Use other constructor instead, +	 */, +	@Deprecated, +	public UserProfile(String name, String firstName, String lastName, String email, String username) {, +		this(null, name, firstName, lastName, email, username);, +	}, +	, +	/**, +	 * Creates an instance of a UserProfile., +	 * @param id The user ID, +	 * @param name The user's full name, +	 * @param firstName The user's first name, +	 * @param lastName The user's last name, +	 * @param email The user's email address, +	 * @param username The user's username, +	 */]
[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" autowire="constructor" />]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.inject.Inject;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +	private String viewUrl = "/connect/";, +, +	 * Sets the url to return on successfull connect., +	 *, +	 * @param viewUrl The url to return to., +	 */, +	public void setViewUrl(String viewUrl) {, +		this.viewUrl = viewUrl;, +	}, +	, +	/**, +, +	/**, +	 * Returns the view to return on successfull connect., +	 *, +	 * @return the view url to return on successfull connect., +	 */, +	protected String getViewUrl() {, +		return viewUrl;, +	}, +	, +		String path = getViewUrl() + providerId + getPathExtension(servletRequest);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	// sublassing hooks, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	// sublassing hooks, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	// sublassing hooks, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionKey.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * The key that identifies this ServiceProviderConnection., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +public class ServiceProviderConnectionData {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	// sublassing hooks, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionKey.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsToProviders();, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java]
[+++ b/docs/src/reference/docbook/apis.xml, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TwitterApi twitterApi = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(TwitterApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(FacebookApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +LinkedInApi linkedinApi = new LinkedInTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(LinkedInApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TripItApi tripitApi = new TripItTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(TripItApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(GitHubApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(GowallaApi.class);, +++ b/docs/src/reference/docbook/apis.xml, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TwitterApi twitterApi = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(TwitterApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(FacebookApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +LinkedInApi linkedinApi = new LinkedInTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(LinkedInApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TripItApi tripitApi = new TripItTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(TripItApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(GitHubApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(GowallaApi.class);, +++ b/docs/src/reference/docbook/connecting.xml, +      		In <xref linkend="serviceprovider"/>, you learned how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> can be used to manage user connections the link your application's user accounts with accounts on external service providers., +			Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that coordinates the connection flow between an application and service providers., +		<title>Configuring connection support</title> <!-- Needs a better title? -->, +		<para>, +			As <classname>ConnectController</classname> directs the connection flow, it depends on a couple of other objects to assist in the creation and persistence of connections., +			<classname>ConnectController</classname> works with one or more <interfacename>ServiceProviderConnectionFactory</interfacename>s to exchange authorization details with the provider and to create connections., +			Once a connection has been established, <classname>ConnectController</classname> hands it off to a <interfacename>ServiceProviderConnectionRepository</interfacename> to be persisted. , +		</para>, +		, +		<para>, +			Spring Social comes with an implementation of <interfacename>ServiceProviderConnectionFactory</interfacename> for each of the supported service providers:, +		</para>, +		, +		<itemizedlist>, +			<listitem><para><classname>TwitterServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>FacebookServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>LinkedInServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>TripItServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>GitHubServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>GowallaTwitterServiceProviderConnectionFactory</classname></para></listitem>, +		</itemizedlist>, +		, +		<para>, +			<classname>ConnectController</classname> relies on an implementation of <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> (see <xref linkend="service-providers-establishing-connections-connection-factory-registry"/>) to help it find a connection factory for a specific provider., +			Spring Social's <classname>MapServiceProviderConnectionFactoryRegistry</classname> is an implementation of <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> that keeps a Map-based registry of connection factories., +			The following configuration class registers a <classname>MapServiceProviderConnectionFactoryRegistry</classname> with <interfacename>ServiceProviderConnectionFactory</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style: 		, +		</para>, +, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase.config;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.social.connect.ServiceProviderConnectionFactory;, +import org.springframework.social.connect.ServiceProviderConnectionFactoryLocator;, +import org.springframework.social.connect.support.MapServiceProviderConnectionFactoryRegistry;, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.connect.FacebookServiceProviderConnectionFactory;, +import org.springframework.social.tripit.api.TripItApi;, +import org.springframework.social.tripit.connect.TripItServiceProviderConnectionFactory;, +import org.springframework.social.twitter.api.TwitterApi;, +import org.springframework.social.twitter.connect.TwitterServiceProviderConnectionFactory;, +public class ServiceProviderConnectionFactoryLocatorConfig {, +	, +    @Value("${twitter.consumerKey}"), +    private String twitterConsumerKey;, +	, +    @Value("${twitter.consumerSecret}"), +    private String twitterConsumerSecret;, +, +    @Value("${facebook.appId}"), +    private String facebookClientId;, +	, +    @Value("${facebook.appSecret}"), +    private String facebookClientSecret;, +, +    @Value("${tripit.consumerKey}"), +    private String tripItConsumerKey;, +	, +    @Value("${tripit.consumerSecret}"), +    private String tripItConsumerSecret;, +    public ServiceProviderConnectionFactoryLocator serviceProviderConnectionFactoryLocator() {, +        MapServiceProviderConnectionFactoryRegistry registry = new MapServiceProviderConnectionFactoryRegistry();, +        registry.addConnectionFactory(, +                new TwitterServiceProviderConnectionFactory(twitterConsumerKey, twitterConsumerSecret));, +        registry.addConnectionFactory(, +                new FacebookServiceProviderConnectionFactory(facebookClientId, facebookClientSecret));, +        registry.addConnectionFactory(, +                new TripItServiceProviderConnectionFactory(tripItConsumerKey, tripItConsumerSecret));]
[+++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-movies - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, +			<listitem><para>spring-social-twitter4j - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, null, accessTokenUrl, version);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String authenticateUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, authenticateUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, null, accessTokenUrl, version);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String authenticateUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, authenticateUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl) {, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, null, accessTokenUrl, version);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String authenticateUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, authenticateUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl) {, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, +	}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookOAuth2Template.java, +	public FacebookOAuth2Template(String clientId, String clientSecret) {, +		super(clientId, clientSecret, "https://graph.facebook.com/oauth/authorize", "https://graph.facebook.com/oauth/access_token");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, null, accessTokenUrl, version);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String authenticateUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, authenticateUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl) {, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, +	}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookOAuth2Template.java, +	public FacebookOAuth2Template(String clientId, String clientSecret) {, +		super(clientId, clientSecret, "https://graph.facebook.com/oauth/authorize", "https://graph.facebook.com/oauth/access_token");, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +		super(new FacebookOAuth2Template(clientId, clientSecret));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, null, accessTokenUrl, version);, +	}, +, +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String authenticateUrl, String accessTokenUrl) {, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, authenticateUrl, OAuth1Version.CORE_10_REVISION_A);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl) {, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, +	}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookOAuth2Template.java, +	public FacebookOAuth2Template(String clientId, String clientSecret) {, +		super(clientId, clientSecret, "https://graph.facebook.com/oauth/authorize", "https://graph.facebook.com/oauth/access_token");, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +		super(new FacebookOAuth2Template(clientId, clientSecret));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, +		super(new OAuth2Template(clientId, clientSecret, "https://github.com/login/oauth/authorize", "https://github.com/login/oauth/access_token"));]
[+++ b/docs/src/reference/docbook/connecting.xml, +			<classname>ConnectController</classname> relies on an implementation of <interfacename>ConnectionFactoryLocator</interfacename> (see <xref linkend="service-providers-establishing-connections-connection-factory-registry"/>) to find a connection factory for a specific provider., +			If we wanted to add support for connecting to other providers, we would simply register their connection factories here., +			When restoring connections, it will use the <interfacename>ConnectionFactoryLocator</interfacename> to locate ConnectionFactory instances., +<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="text">]
[+++ b/README.md, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +- GitHub: [GitHub][github-gh] | [Reference][github-ref] | [API][github-api], +[twitter-ref]: http://docs.spring.io/spring-social-twitter/docs/current/reference/html, +[twitter-api]: http://docs.spring.io/spring-social-twitter/docs/current/api, +[facebook-ref]: http://docs.spring.io/spring-social-facebook/docs/current/reference/html, +[facebook-api]: http://docs.spring.io/spring-social-facebook/docs/current/api, +[linkedin-ref]: http://docs.spring.io/spring-social-linkedin/docs/current/reference/html, +[linkedin-api]: http://docs.spring.io/spring-social-linkedin/docs/current/api, +[tripit-ref]: http://docs.spring.io/spring-social-tripit/docs/current/reference/html, +[tripit-api]: http://docs.spring.io/spring-social-tripit/docs/current/api, +[github-ref]: http://docs.spring.io/spring-social-github/docs/current/reference/html, +[github-api]: http://docs.spring.io/spring-social-github/docs/current/api, +++ b/README.md, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +- GitHub: [GitHub][github-gh] | [Reference][github-ref] | [API][github-api], +[twitter-ref]: http://docs.spring.io/spring-social-twitter/docs/current/reference/html, +[twitter-api]: http://docs.spring.io/spring-social-twitter/docs/current/api, +[facebook-ref]: http://docs.spring.io/spring-social-facebook/docs/current/reference/html, +[facebook-api]: http://docs.spring.io/spring-social-facebook/docs/current/api, +[linkedin-ref]: http://docs.spring.io/spring-social-linkedin/docs/current/reference/html, +[linkedin-api]: http://docs.spring.io/spring-social-linkedin/docs/current/api, +[tripit-ref]: http://docs.spring.io/spring-social-tripit/docs/current/reference/html, +[tripit-api]: http://docs.spring.io/spring-social-tripit/docs/current/api, +[github-ref]: http://docs.spring.io/spring-social-github/docs/current/reference/html, +[github-api]: http://docs.spring.io/spring-social-github/docs/current/api, +++ b/build.gradle, +        classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), +        testCompile("junit:junit:${junitVersion}"), +        dependencies {, +            springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/README.md, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +- GitHub: [GitHub][github-gh] | [Reference][github-ref] | [API][github-api], +[twitter-ref]: http://docs.spring.io/spring-social-twitter/docs/current/reference/html, +[twitter-api]: http://docs.spring.io/spring-social-twitter/docs/current/api, +[facebook-ref]: http://docs.spring.io/spring-social-facebook/docs/current/reference/html, +[facebook-api]: http://docs.spring.io/spring-social-facebook/docs/current/api, +[linkedin-ref]: http://docs.spring.io/spring-social-linkedin/docs/current/reference/html, +[linkedin-api]: http://docs.spring.io/spring-social-linkedin/docs/current/api, +[tripit-ref]: http://docs.spring.io/spring-social-tripit/docs/current/reference/html, +[tripit-api]: http://docs.spring.io/spring-social-tripit/docs/current/api, +[github-ref]: http://docs.spring.io/spring-social-github/docs/current/reference/html, +[github-api]: http://docs.spring.io/spring-social-github/docs/current/api, +++ b/build.gradle, +        classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), +        testCompile("junit:junit:${junitVersion}"), +        dependencies {, +            springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(255) not null,                  , +    secret varchar(255),, +    refreshToken varchar(255),, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/README.md, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +- GitHub: [GitHub][github-gh] | [Reference][github-ref] | [API][github-api], +[twitter-ref]: http://docs.spring.io/spring-social-twitter/docs/current/reference/html, +[twitter-api]: http://docs.spring.io/spring-social-twitter/docs/current/api, +[facebook-ref]: http://docs.spring.io/spring-social-facebook/docs/current/reference/html, +[facebook-api]: http://docs.spring.io/spring-social-facebook/docs/current/api, +[linkedin-ref]: http://docs.spring.io/spring-social-linkedin/docs/current/reference/html, +[linkedin-api]: http://docs.spring.io/spring-social-linkedin/docs/current/api, +[tripit-ref]: http://docs.spring.io/spring-social-tripit/docs/current/reference/html, +[tripit-api]: http://docs.spring.io/spring-social-tripit/docs/current/api, +[github-ref]: http://docs.spring.io/spring-social-github/docs/current/reference/html, +[github-api]: http://docs.spring.io/spring-social-github/docs/current/api, +++ b/build.gradle, +        classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), +        testCompile("junit:junit:${junitVersion}"), +        dependencies {, +            springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(255) not null,                  , +    secret varchar(255),, +    refreshToken varchar(255),, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +h2Version=1.4.190, +springSecurityVersion=4.0.3.RELEASE, +junitVersion=4.12, +httpComponentsVersion=4.5.1, +springVersion=4.1.8.RELEASE, +version=1.1.3.BUILD-SNAPSHOT, +servletApiVersion=3.1.0, +mockitoVersion=1.10.19, +++ b/README.md, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +- GitHub: [GitHub][github-gh] | [Reference][github-ref] | [API][github-api], +[twitter-ref]: http://docs.spring.io/spring-social-twitter/docs/current/reference/html]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social]
[+++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +++ /dev/null, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.social.security;, +, +import org.springframework.social.SocialException;, +, +@SuppressWarnings("serial"), +public class SocialAuthenticationException extends SocialException {, +, +	public SocialAuthenticationException() {, +		super("");, +	}, +, +	public SocialAuthenticationException(String message) {, +		super(message);, +	}, +, +	public SocialAuthenticationException(Throwable cause) {, +		super("", cause);, +	}, +, +	public SocialAuthenticationException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.social.security;, +, +import org.springframework.social.SocialException;, +, +@SuppressWarnings("serial"), +public class SocialAuthenticationException extends SocialException {, +, +	public SocialAuthenticationException() {, +		super("");, +	}, +, +	public SocialAuthenticationException(String message) {, +		super(message);, +	}, +, +	public SocialAuthenticationException(Throwable cause) {, +		super("", cause);, +	}, +, +	public SocialAuthenticationException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.social.security;]
[+++ b/docs/src/reference/docbook/overview.xml, +  <title>Spring Social overview</title>]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import java.lang.annotation.Annotation;, +import java.util.Map;, +, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.social.config.support.ProviderConfigurationSupport;, +import org.springframework.social.config.xml.ApiHelper;, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Abstract base class for building provider-specific implementations of {@link ImportBeanDefinitionRegistrar} for configuring a connection factory and an API binding bean., + * @author Craig Walls, + */, +public abstract class AbstractProviderConfigRegistrarSupport extends ProviderConfigurationSupport implements ImportBeanDefinitionRegistrar {, +	, +	/**, +	 * Constructs , +	 * @param connectionFactoryClass, +	 * @param apiHelperClass, +	 */, +	public AbstractProviderConfigRegistrarSupport(Class<? extends Annotation> providerConfigAnnotation, Class<? extends ConnectionFactory<?>> connectionFactoryClass,, +			Class<? extends ApiHelper<?>> apiHelperClass) {, +		super(connectionFactoryClass, apiHelperClass);, +		this.providerConfigAnnotation = providerConfigAnnotation;, +	}, +	, +	public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {, +		Map<String, Object> allAttributes = metadata.getAnnotationAttributes(providerConfigAnnotation.getName());		, +		registerBeanDefinitions(registry, allAttributes);		, +	}, +, +	@Override, +	protected String getAppId(Map<String, Object> allAttributes) {, +		return (String) allAttributes.get("appId");, +	}, +	, +	@Override, +	protected String getAppSecret(Map<String, Object> allAttributes) {, +		return (String) allAttributes.get("appSecret");, +	}, +	, +	private final Class<? extends Annotation> providerConfigAnnotation;, +, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import java.lang.annotation.Annotation;, +import java.util.Map;, +, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.social.config.support.ProviderConfigurationSupport;, +import org.springframework.social.config.xml.ApiHelper;, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Abstract base class for building provider-specific implementations of {@link ImportBeanDefinitionRegistrar} for configuring a connection factory and an API binding bean., + * @author Craig Walls, + */, +public abstract class AbstractProviderConfigRegistrarSupport extends ProviderConfigurationSupport implements ImportBeanDefinitionRegistrar {, +	, +	/**, +	 * Constructs , +	 * @param connectionFactoryClass]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +			The API can be used to access and update user data on the provider's system., +			To put this framework into action, consider Twitter as an example ServiceProvider., +	<section id="service-providers-establishing-connections">, +		<para>, +			So far we have discussed how existing connections are managed using the ServiceProvider framework, but we have not yet discussed how new connections are established., +			The manner in which connections between local user accounts and external provider accounts are established varies based on the authorization protocol used by the ServiceProvider., +			Some service providers use OAuth, others use Basic Auth, others may require something else., +			Spring Social currently provides native support for OAuth-based service providers, including support for OAuth 1 and OAuth 2., +			This covers the leading social networks, such as Facebook and Twitter, all of which use OAuth to secure their APIs., +			Support for other authorization protocols can be added by extending the framework., +		</para>, +		<para>, +			Because each authorization protocol is different, protocol-specific details are kept out of the base ServiceProvider interface., +			Sub-interfaces have been defined for each protocol, reflecting a distinct ServiceProvider type., +			In the following sections, we will discuss each type of ServiceProvider supported by the framework., +			Each section will also describe the protocol-specific flow required to establish a new connection., +		</para>, +		<section id="service-providers-oauth2">, +			<title>OAuth2 Service Providers</title>, +			<programlisting language="java"><![CDATA[, +public interface OAuth2ServiceProvider<S> extends ServiceProvider<S> {, +    OAuth2Operations getOAuthOperations();, +    ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessGrant);, +}]]>, +			</programlisting>, +			<programlisting language="java"><![CDATA[, +public interface OAuth2Operations {, +    String buildAuthorizeUrl(String redirectUri, String scope);, +    AccessGrant exchangeForAccess(String authorizationGrant, String redirectUri);, +, +}]]>, +			</programlisting>			, +			<para>, +				The OAuth 2 flow is illustrated below:, +			</para>, +					<imagedata fileref="images/oauth2_flow.png" format="PNG" align="center" scale="70"/>, +					<imagedata fileref="images/oauth2_flow.png" format="PNG" align="center" scale="0"/>, +      		<para>, +				As you can see, there is a back-and-forth conversation that takes place between the consumer and the service provider to establish authorization for the consumer., +				This exchange, commonly known as the "OAuth Dance", follows these steps:, +			</para>, +			<orderedlist>, +				<listitem><para>The flow starts with the consumer redirecting the user's browser to the provider's authorization page. Unlike OAuth 1, there is no concept of request token in OAuth 2.</para></listitem>, +				<listitem><para>The service provider prompts the user to authorize the consumer application and the user agrees. (As with OAuth 1, this is the only step where the user participates in the flow.)</para></listitem>, +				<listitem><para>The service provider redirects the user's browser to the consumer's redirect URI, with an authorization code as a parameter.</para></listitem>, +				<listitem><para>The consumer exchanges the authorization code for an access token.</para></listitem>, +				<listitem><para>The service provider issues an access token to the consumer. The "dance" is complete.</para></listitem>, +				<listitem><para>The consumer makes calls against the service API, passing the access token along as evidence of its right to access the provider on behalf of the user.</para></listitem>, +			</orderedlist>, +		</section>, +		<section id="service-providers-oauth1">, +			<title>OAuth1 Service Providers</title>, +			<programlisting language="java"><![CDATA[, +public interface OAuth1ServiceProvider<S> extends ServiceProvider<S> {, +    OAuth1Operations getOAuthOperations();, +    ServiceProviderConnection<S> connect(Serializable accountId, OAuthToken accessToken);, +, +}]]>, +			</programlisting>, +			<programlisting language="java"><![CDATA[, +public interface OAuth1Operations {, +, +    OAuthToken fetchNewRequestToken(String callbackUrl);, +, +    String buildAuthorizeUrl(String requestToken);, +, +    OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken);, +, +}]]>, +			</programlisting>			, +			<para>, +				The OAuth 1 flow is illustrated below:, +			</para>, +			<mediaobject>, +				<imageobject role="fo">, +					<imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="70"/>, +				</imageobject>, +				<imageobject role="html">, +					<imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="0"/>, +				</imageobject>, +			</mediaobject>, +		</section>, +		<para>, +			Generally, application code will not work with these interfaces directly., +			Instead, you'll leverage Spring Social's <classname>ConnectController</classname> (see <xref linkend="connecting"/>) to handle the authorization flow for you., +			You may, however, use the <methodname>getConnections()</methodname> to access the service API for a given connection. This will be covered in more detail in <xref linkend="apis"/>., +		</para>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/.gitignore, +**/build, +**/src/test/java/exploration, +.gradle, +spring-social-core/src/test/java/exploration, +**/.classpath, +**/.project, +**/.settings, +**/bin, +++ b/.gitignore, +**/build, +**/src/test/java/exploration, +.gradle, +spring-social-core/src/test/java/exploration, +**/.classpath, +**/.project, +**/.settings, +**/bin, +++ b/build.gradle, +    h2Version = '1.3.156', +    jacksonVersion = '1.8.2', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/.gitignore, +**/build, +**/src/test/java/exploration, +.gradle, +spring-social-core/src/test/java/exploration, +**/.classpath, +**/.project, +**/.settings, +**/bin, +++ b/build.gradle, +    h2Version = '1.3.156', +    jacksonVersion = '1.8.2', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt, +======================================================, +++ b/.gitignore, +**/build, +**/src/test/java/exploration, +.gradle, +spring-social-core/src/test/java/exploration, +**/.classpath, +**/.project, +**/.settings, +**/bin, +++ b/build.gradle, +    h2Version = '1.3.156', +    jacksonVersion = '1.8.2', +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt, +======================================================, +++ b/settings.gradle, +include 'spring-social-security', +++ b/.gitignore, +**/build, +**/src/test/java/exploration, +.gradle, +spring-social-core/src/test/java/exploration, +**/.classpath, +**/.project, +**/.settings, +**/bin, +++ b/build.gradle, +    h2Version = '1.3.156', +    jacksonVersion = '1.8.2', +    springSecurityWebVersion = '3.1.0.RC2']
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType,allAttributes);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType,Map<String, Object> allAttributes) {, +		BeanDefinition helperBD = getApiHelperBeanDefinitionBuilder(allAttributes).getBeanDefinition();, +	/**, +	 * Subclassing hook to allow api helper bean to be configured with attributes from annotation, +	 */, +	protected BeanDefinitionBuilder getApiHelperBeanDefinitionBuilder(Map<String, Object> allAttributes), +	{, +		return BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource");, +	}, +]
[+++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +			if (newUserId != null), +			{, +		}, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +			if (newUserId != null), +			{, +		}, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +	, +	@Test, +	public void findUserIdWithConnectionNoConnection_withConnectionSignUpReturningNull() {		, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("12345"));, +		usersConnectionRepository.setConnectionSignUp(new ConnectionSignUp() {, +			public String execute(Connection<?> connection) {, +				return null;, +			}, +		});, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, +		assertEquals(0, userIds.size());, +	}, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +			if (newUserId != null), +			{, +		}, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +	, +	@Test, +	public void findUserIdWithConnectionNoConnection_withConnectionSignUpReturningNull() {		, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("12345"));, +		usersConnectionRepository.setConnectionSignUp(new ConnectionSignUp() {, +			public String execute(Connection<?> connection) {, +				return null;, +			}, +		});, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, +		assertEquals(0, userIds.size());, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +			if (newUserId != null), +			{, +		}, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +	, +	@Test, +	public void findUserIdWithConnectionNoConnection_withConnectionSignUpReturningNull() {		, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("12345"));, +		usersConnectionRepository.setConnectionSignUp(new ConnectionSignUp() {, +			public String execute(Connection<?> connection) {, +				return null;, +			}, +		});, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, +		assertEquals(0, userIds.size());, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ /dev/null, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +			if (newUserId != null)]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth1ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String, String) API binding}., +	 * @return the binding to the service provider's API, +	A getApi(String accessToken, String secret);, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth1ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String, String) API binding}., +	 * @return the binding to the service provider's API, +	A getApi(String accessToken, String secret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth2ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String) API binding}., +	 * @return a binding to the service provider's API, +	A getApi(String accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth1ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String, String) API binding}., +	 * @return the binding to the service provider's API, +	A getApi(String accessToken, String secret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth2ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String) API binding}., +	 * @return a binding to the service provider's API, +	A getApi(String accessToken);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.connect;, +, +import org.springframework.social.BadCredentialsException;, +import org.springframework.social.connect.ApiAdapter;, +import org.springframework.social.connect.ConnectionValues;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.connect.UserProfileBuilder;, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.FacebookProfile;, +, +/**, + * Facebook API adapter implementation., + * @author Keith Donald, + */, +public class FacebookApiAdapter implements ApiAdapter<FacebookApi> {, +, +	public boolean test(FacebookApi api) {, +		try {, +			api.userOperations().getUserProfile();, +			return true;, +		} catch (BadCredentialsException e) {, +			return false;, +		}, +	}, +, +	public void setConnectionValues(FacebookApi api, ConnectionValues values) {, +		FacebookProfile profile = api.userOperations().getUserProfile();, +		values.setProviderUserId(profile.getId());, +		values.setDisplayName(profile.getUsername());, +		values.setProfileUrl("http://facebook.com/#!/profile.php?id=" + profile.getId());, +		values.setImageUrl("http://graph.facebook.com/" + profile.getId() + "/picture");, +	}, +, +	public UserProfile fetchUserProfile(FacebookApi api) {]
[+++ b/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, +	<classpathentry kind="src" output="target/classes" path="src/main/java"/>, +	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources"/>, +	<classpathentry kind="src" output="target/test-classes" path="src/test/java"/>, +	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>, +	<classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER">, +		<attributes>, +			<attribute name="org.eclipse.jst.component.nondependency" value=""/>, +		</attributes>, +	</classpathentry>, +	<classpathentry kind="con" path="org.eclipse.jst.j2ee.internal.module.container"/>, +	<classpathentry kind="output" path="target/classes"/>, +</classpath>, +++ b/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, +	<classpathentry kind="src" output="target/classes" path="src/main/java"/>, +	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources"/>, +	<classpathentry kind="src" output="target/test-classes" path="src/test/java"/>, +	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>, +	<classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER">, +		<attributes>, +			<attribute name="org.eclipse.jst.component.nondependency" value=""/>, +		</attributes>, +	</classpathentry>, +	<classpathentry kind="con" path="org.eclipse.jst.j2ee.internal.module.container"/>, +	<classpathentry kind="output" path="target/classes"/>, +</classpath>, +++ b/.gitignore, +++ b/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, +	<classpathentry kind="src" output="target/classes" path="src/main/java"/>, +	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources"/>, +	<classpathentry kind="src" output="target/test-classes" path="src/test/java"/>, +	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>, +	<classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER">, +		<attributes>, +			<attribute name="org.eclipse.jst.component.nondependency" value=""/>, +		</attributes>, +	</classpathentry>, +	<classpathentry kind="con" path="org.eclipse.jst.j2ee.internal.module.container"/>, +	<classpathentry kind="output" path="target/classes"/>, +</classpath>, +++ b/.gitignore, +++ b/.project, +<?xml version="1.0" encoding="UTF-8"?>, +<projectDescription>, +	<name>spring-social</name>, +	<comment></comment>, +	<projects>, +	</projects>, +	<buildSpec>, +		<buildCommand>, +			<name>org.eclipse.jdt.core.javabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>org.eclipse.wst.common.project.facet.core.builder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>org.eclipse.wst.validation.validationbuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>org.maven.ide.eclipse.maven2Builder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +	</buildSpec>, +	<natures>, +		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>, +		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>, +		<nature>org.maven.ide.eclipse.maven2Nature</nature>, +		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>, +		<nature>org.eclipse.jdt.core.javanature</nature>, +	</natures>, +</projectDescription>, +++ b/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, +	<classpathentry kind="src" output="target/classes" path="src/main/java"/>, +	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources"/>, +	<classpathentry kind="src" output="target/test-classes" path="src/test/java"/>, +	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>, +	<classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER">, +		<attributes>, +			<attribute name="org.eclipse.jst.component.nondependency" value=""/>, +		</attributes>, +	</classpathentry>, +	<classpathentry kind="con" path="org.eclipse.jst.j2ee.internal.module.container"/>, +	<classpathentry kind="output" path="target/classes"/>, +</classpath>, +++ b/.gitignore]
[+++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE, +version=1.2.0.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +thymeleafVersion=2.1.2.RELEASE, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE, +version=1.2.0.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +thymeleafVersion=2.1.2.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * Default implementation detects a rejection as a request that has one or more parameters, +	 * (except 'state' parameter which can be used by application), but none of the expected parameters (oauth_token, code, scope)., +		if ((parameterKeys.size() == 1) && (parameterKeys.contains("state"))) {, +		    return false;, +		}, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE, +version=1.2.0.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +thymeleafVersion=2.1.2.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * Default implementation detects a rejection as a request that has one or more parameters, +	 * (except 'state' parameter which can be used by application), but none of the expected parameters (oauth_token, code, scope)., +		if ((parameterKeys.size() == 1) && (parameterKeys.contains("state"))) {, +		    return false;, +		}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, +import org.springframework.dao.DataAccessException;, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE, +version=1.2.0.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +thymeleafVersion=2.1.2.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * Default implementation detects a rejection as a request that has one or more parameters, +	 * (except 'state' parameter which can be used by application), but none of the expected parameters (oauth_token, code, scope)., +		if ((parameterKeys.size() == 1) && (parameterKeys.contains("state"))) {, +		    return false;, +		}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, +import org.springframework.dao.DataAccessException;, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +			params.add("state", generateState(connectionFactory, request));, +	private String generateState(OAuth2ConnectionFactory<?> connectionFactory, HttpServletRequest request) {, +	    final String state = request.getParameter("state");, +	    return (state != null) ? state : connectionFactory.generateState();, +	}, +, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE]
[+++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/social-connection.xml, +	xmlns:social="http://www.springframework.org/schema/spring-social", +	xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, +		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">]
[+++ b/build.gradle, +    jacksonVersion = '1.8.4', +++ b/build.gradle, +    jacksonVersion = '1.8.4', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +Improvements, +   * ProviderSignInController now handles callbacks from the provider when the, +     user denies authorization by redirecting to the application's sign in page., +     (SOCIAL-236), +   * If multiple matching connections are found during provider sign in, redirect, +     to the sign in page to offer the user a chance to sign in through some other, +     means (username/password, via a different provider, etc). (SOCIAL-237), +, +++ b/build.gradle, +    jacksonVersion = '1.8.4', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +Improvements, +   * ProviderSignInController now handles callbacks from the provider when the, +     user denies authorization by redirecting to the application's sign in page., +     (SOCIAL-236), +   * If multiple matching connections are found during provider sign in, redirect, +     to the sign in page to offer the user a chance to sign in through some other, +     means (username/password, via a different provider, etc). (SOCIAL-237), +, +++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-movies - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, +			<listitem><para>spring-social-twitter4j - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>, +++ b/build.gradle, +    jacksonVersion = '1.8.4', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +Improvements, +   * ProviderSignInController now handles callbacks from the provider when the, +     user denies authorization by redirecting to the application's sign in page., +     (SOCIAL-236), +   * If multiple matching connections are found during provider sign in, redirect, +     to the sign in page to offer the user a chance to sign in through some other, +     means (username/password, via a different provider, etc). (SOCIAL-237), +, +++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-movies - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, +			<listitem><para>spring-social-twitter4j - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>, +++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +, +		, +			<note>, +				<para>, +					Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>., +					Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow., +					The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above., +				</para>, +			</note>, +, +++ b/build.gradle, +    jacksonVersion = '1.8.4', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +Improvements, +   * ProviderSignInController now handles callbacks from the provider when the, +     user denies authorization by redirecting to the application's sign in page., +     (SOCIAL-236), +   * If multiple matching connections are found during provider sign in, redirect, +     to the sign in page to offer the user a chance to sign in through some other, +     means (username/password, via a different provider, etc). (SOCIAL-237), +, +++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-movies - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, +			<listitem><para>spring-social-twitter4j - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>, +++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#findPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#findPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Find all connections the current user has across all providers., +	MultiValueMap<String, Connection<?>> findAllConnections();, +	 * Returns true if the current user is connected to the provider by the given id e.g. 'facebook'., +	 * @param providerId the provider id, +	 * @return true if yes, false otherwise, +	 */, +	public boolean isConnected(String providerId);, +	, +	/**, +	 * Returns true if the current user is connected to the provider of the given API type e.g. Facebook.class., +	 * Useful as a strongly-typed alternative to {@link #isConnected(String))}., +	 * @param apiType the apiType e.g. Facebook, +	 * @return true if yes, false otherwise, +	 */, +	public boolean isConnected(Class<?> apiType);, +	, +	/**, +	 * Find the connections the current user has to the provider registered by the given id e.g. 'facebook'., +	List<Connection<?>> findConnections(String providerId);, +	 * Find the connections the current user has to the provider of the given API e.g. Facebook.class., +	 * Returns the equivalent of {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized Connection instances e.g. <code>List&lt;Connection&lt;Facebook&gt;&gt;</code>., +	 * @param <A> the API parameterized type, +	 * @param apiType the service API type e.g. Facebook.class or Twitter.class, +	 * @return the connections, +	 */, +	<A> List<Connection<A>> findConnections(Class<A> apiType);, +	, +	/**, +	 * Find the connections the current user has to the given provider users., +	MultiValueMap<String, Connection<?>> findConnectionsToUsers(MultiValueMap<String, String> providerUserIds);, +	 * Find a connection for the current user by its key, which consists of the providerId + providerUserId., +	 * Find the connection between the current user and the given provider user., +	 * @param apiType the service type e.g. Facebook.class or Twitter.class, +	 * @throws NoSuchConnectionException if the user is not connected to the provider , +	<A> Connection<A> findConnection(Class<A> apiType, String providerUserId);, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * If the user has multiple connections to the provider associated with the given apiType, this method returns the one with the top rank (or priority)., +	 * Useful for direct use by application code to obtain a parameterized Connection instance., +	 * @param <A> the service api parameterized type, +	 * @param apiType the service type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, +	 * @throws NotConnectedException if the user is not connected to the provider of the API, +	<A> Connection<A> findPrimaryConnection(Class<A> apiType);, +	 * Add a new connection to this repository for the current user., +	 * After the connection is added, it can be retrieved later using one of the finders defined in this interface., +	void removeConnections(String providerId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#findPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Find all connections the current user has across all providers., +	MultiValueMap<String, Connection<?>> findAllConnections();, +	 * Returns true if the current user is connected to the provider by the given id e.g. 'facebook'., +	 * @param providerId the provider id, +	 * @return true if yes, false otherwise, +	 */, +	public boolean isConnected(String providerId);, +	, +	/**, +	 * Returns true if the current user is connected to the provider of the given API type e.g. Facebook.class., +	 * Useful as a strongly-typed alternative to {@link #isConnected(String))}., +	 * @param apiType the apiType e.g. Facebook, +	 * @return true if yes, false otherwise, +	 */, +	public boolean isConnected(Class<?> apiType);, +	, +	/**, +	 * Find the connections the current user has to the provider registered by the given id e.g. 'facebook'., +	List<Connection<?>> findConnections(String providerId);, +	 * Find the connections the current user has to the provider of the given API e.g. Facebook.class., +	 * Returns the equivalent of {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized Connection instances e.g. <code>List&lt;Connection&lt;Facebook&gt;&gt;</code>., +	 * @param <A> the API parameterized type, +	 * @param apiType the service API type e.g. Facebook.class or Twitter.class, +	 * @return the connections, +	 */, +	<A> List<Connection<A>> findConnections(Class<A> apiType);, +	, +	/**, +	 * Find the connections the current user has to the given provider users., +	MultiValueMap<String, Connection<?>> findConnectionsToUsers(MultiValueMap<String, String> providerUserIds);, +	 * Find a connection for the current user by its key, which consists of the providerId + providerUserId., +	 * Find the connection between the current user and the given provider user., +	 * @param apiType the service type e.g. Facebook.class or Twitter.class, +	 * @throws NoSuchConnectionException if the user is not connected to the provider , +	<A> Connection<A> findConnection(Class<A> apiType, String providerUserId);, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * If the user has multiple connections to the provider associated with the given apiType, this method returns the one with the top rank (or priority)., +	 * Useful for direct use by application code to obtain a parameterized Connection instance., +	 * @param <A> the service api parameterized type, +	 * @param apiType the service type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, +	 * @throws NotConnectedException if the user is not connected to the provider of the API, +	<A> Connection<A> findPrimaryConnection(Class<A> apiType);, +	 * Add a new connection to this repository for the current user.]
[+++ b/pom.xml, +, +		<!-- Joda Date/Time -->, +		<dependency>, +			<groupId>joda-time</groupId>, +			<artifactId>joda-time</artifactId>, +			<version>1.6</version>, +		</dependency>, +++ b/pom.xml, +, +		<!-- Joda Date/Time -->, +		<dependency>, +			<groupId>joda-time</groupId>, +			<artifactId>joda-time</artifactId>, +			<version>1.6</version>, +		</dependency>, +++ b/src/main/java/org/springframework/social/account/AccountAlreadyConnectedException.java, +package org.springframework.social.account;, +, +@SuppressWarnings("serial"), +public final class AccountAlreadyConnectedException extends Exception {, +, +	private final String provider;, +	, +	private final String accountId;, +, +	public AccountAlreadyConnectedException(String provider, String accountId) {, +		super("account already connected");, +		this.provider = provider;, +		this.accountId = accountId;, +	}, +, +	public String getProvider() {, +		return provider;, +	}, +	, +	public String getAccountId() {, +		return accountId;, +	}, +	, +}, +++ b/pom.xml, +, +		<!-- Joda Date/Time -->, +		<dependency>, +			<groupId>joda-time</groupId>, +			<artifactId>joda-time</artifactId>, +			<version>1.6</version>, +		</dependency>, +++ b/src/main/java/org/springframework/social/account/AccountAlreadyConnectedException.java, +package org.springframework.social.account;, +, +@SuppressWarnings("serial"), +public final class AccountAlreadyConnectedException extends Exception {, +, +	private final String provider;, +	, +	private final String accountId;, +, +	public AccountAlreadyConnectedException(String provider, String accountId) {, +		super("account already connected");, +		this.provider = provider;, +		this.accountId = accountId;, +	}, +, +	public String getProvider() {, +		return provider;, +	}, +	, +	public String getAccountId() {, +		return accountId;, +	}, +	, +}, +++ b/src/main/java/org/springframework/social/account/AccountException.java, +package org.springframework.social.account;, +, +@SuppressWarnings("serial"), +public abstract class AccountException extends RuntimeException {, +, +	public AccountException(String message) {, +		super(message);, +	}, +, +	public AccountException(String message, Throwable cause) {, +		super(message, cause);, +	}, +	, +}, +++ b/pom.xml, +, +		<!-- Joda Date/Time -->, +		<dependency>, +			<groupId>joda-time</groupId>, +			<artifactId>joda-time</artifactId>, +			<version>1.6</version>, +		</dependency>, +++ b/src/main/java/org/springframework/social/account/AccountAlreadyConnectedException.java, +package org.springframework.social.account;, +]
[+++ b/docs/src/reference/docbook/apis.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="apis" xmlns:xlink="http://www.w3.org/1999/xlink">, +		<para>, +			After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. , +			Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application., +		</para>, +		<para>, +			Each service provider exposes their data and functionality through an API. , +			Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface., +		</para>, +		<para>, +			Spring Social comes with six provider API templates/operations for the following service providers:, +		</para>, +			<listitem><para>Facebook</para></listitem>, +			<listitem><para>GitHub</para></listitem>, +			<listitem><para>Gowalla</para></listitem>, +	<section xml:id="section_api_twitter">, +		<title>Twitter</title>, +        , +		<para>, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterOperations</interfacename>) offers several options for applications to integrate with Twitter., +		</para>, +		, +		<para>, +			Creating an instance of <classname>TwitterTemplate</classname> involves invoking its constructor, passing in the application's OAuth credentials and an access token/secret pair authorizing the application to act on a user's behalf. , +			For example:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +String apiKey = "..."; // The application's API/Consumer key, +String apiSecret = "..."; // The application's API/Consumer secret, +String accessToken = "..."; // The access token granted after OAuth authorization, +String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization, +TwitterOperations twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +		</programlisting>, +		, +		<para>, +			In addition, <classname>TwitterTemplate</classname> has a default constructor that creates an instance without any OAuth credentials:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +TwitterOperations twitter = new TwitterTemplate();]]>, +		</programlisting>, +		, +		<para>, +			When constructed with the default constructor, <classname>TwitterTemplate</classname> will allow a few simple operations that do not require authorization, such as searching. , +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +		</para>, +		, +		<para>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterOperations</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +			For instance:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +TwitterOperations twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +		</programlisting>, +		, +		<para>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterOperations</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +		</para>, +		, +		<para>, +			Once you have <interfacename>TwitterOperations</interfacename>, you can perform a variety of operations against Twitter., +		</para>, +, +		<section id="twitter-getProfile">, +			<title>Retrieving a user's Twitter profile data</title>, +			, +			<para>, +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +			</para>, +			, +			<programlisting language="java"><![CDATA[, +TwitterProfile profile = twitter.getUserProfile();]]>, +			</programlisting>, +			, +			<para>, +				This returns a <classname>TwitterProfile</classname> object containing profile data for the authenticated user. , +				This profile information includes the user's Twitter screen name, their name, location, description, and the date that they created their Twitter account. , +				Also included is a URL to their profile image., +			</para>, +			, +			<para>, +				If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:, +			</para>, +			, +			<programlisting language="java"><![CDATA[, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +			</programlisting>, +			, +			<para>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +			</para>, +			, +			<programlisting language="java"><![CDATA[]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +public class ConnectionFactoryRegistry implements ConnectionFactoryLocator {]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/build.gradle, +        compile project(':spring-social-web') { optional = true }, +        compile project(':spring-social-web') { optional = true }, +++ b/build.gradle, +        compile project(':spring-social-web') { optional = true }, +        compile project(':spring-social-web') { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.facebook.web.FacebookSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +		<constructor-arg value="0b754d95f9c9899b0d6c4454b6f2dde7" />, +	</bean>, +	, +++ b/build.gradle, +        compile project(':spring-social-web') { optional = true }, +        compile project(':spring-social-web') { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.facebook.web.FacebookSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +		<constructor-arg value="0b754d95f9c9899b0d6c4454b6f2dde7" />, +	</bean>, +	, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<!-- TWITTER SIGNIN -->, +, +	<script type='text/javascript'>	, +		FB.init({appId: '0b754d95f9c9899b0d6c4454b6f2dde7', status: true, cookie: true, xfbml: true});, +	</script>	, +++ b/build.gradle, +        compile project(':spring-social-web') { optional = true }, +        compile project(':spring-social-web') { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.facebook.web.FacebookSigninController">, +		<constructor-arg ref="connectionRepository" />, +		<constructor-arg>, +			<bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, +		</constructor-arg>, +		<constructor-arg value="0b754d95f9c9899b0d6c4454b6f2dde7" />, +	</bean>, +	, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<!-- TWITTER SIGNIN -->, +, +	<script type='text/javascript'>	, +		FB.init({appId: '0b754d95f9c9899b0d6c4454b6f2dde7', status: true, cookie: true, xfbml: true});, +	</script>	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.web;, +, +import static org.springframework.web.bind.annotation.RequestMethod.*;, +, +import java.io.Serializable;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.Cookie;, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.web.connect.SignInControllerGateway;, +import org.springframework.stereotype.Controller;, +import org.springframework.web.bind.annotation.RequestMapping;, +, +@Controller, +@RequestMapping("/signin/"), +public class FacebookSigninController {, +, +	private static final String FACEBOOK_PROVIDER_ID = "facebook";, +, +	private final ConnectionRepository connectionRepository;, +, +	private final SignInControllerGateway signinGateway;, +, +	private String noConnectionView = "redirect:/";, +, +	private final String apiKey;, +, +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInControllerGateway signinGateway,, +			String apiKey) {]
[+++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +	}, +, +++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SessionUserIdSource.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web;, +, +import org.springframework.social.UserIdSource;, +import org.springframework.web.context.request.RequestContextHolder;, +, +/**, + * {@link UserIdSource} implementation that uses the session ID as the user ID., + * Convenient for applications that don't maintain their own notion of a user., + * , + * Relies on {@link RequestContextHolder} for obtaining the session ID. , + * Will throw an {@link IllegalStateException} if there are no request attributes bound to the current thread., + * , + * @author Craig Walls, + */, +public class SessionUserIdSource implements UserIdSource {, +, +	@Override, +	public String getUserId() {, +		return RequestContextHolder.currentRequestAttributes().getSessionId();, +	}, +	, +}, +++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SessionUserIdSource.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web;, +, +import org.springframework.social.UserIdSource;, +import org.springframework.web.context.request.RequestContextHolder;, +, +/**, + * {@link UserIdSource} implementation that uses the session ID as the user ID., + * Convenient for applications that don't maintain their own notion of a user., + * , + * Relies on {@link RequestContextHolder} for obtaining the session ID. , + * Will throw an {@link IllegalStateException} if there are no request attributes bound to the current thread., + * , + * @author Craig Walls, + */, +public class SessionUserIdSource implements UserIdSource {, +, +	@Override, +	public String getUserId() {, +		return RequestContextHolder.currentRequestAttributes().getSessionId();, +	}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("code", authorizationCode);, +		requestParameters.set("redirect_uri", redirectUri);, +		requestParameters.set("grant_type", "authorization_code");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("code", authorizationCode);, +		requestParameters.set("redirect_uri", redirectUri);, +		requestParameters.set("grant_type", "authorization_code");, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookConnectController.java, +	public FacebookConnectController(ServiceProvider<FacebookOperations> facebookProvider,, +			AccountIdResolver accountIdResolver) {, +	 * Configure the list of interceptors that should receive callbacks during, +	 * the connection process., +			Class<?> providerType = GenericTypeResolver.resolveTypeArgument(interceptor.getClass(),, +					ConnectInterceptor.class);, +	public String connectAccountToFacebook(@FacebookAccessToken(required = false) String accessToken,, +			@FacebookUserId(required = false) String facebookUserId, WebRequest request) {, +			oauth2Provider.connect(accountIdResolver.resolveAccountId(), new AccessGrant(accessToken, null));, +			postConnect(facebookProvider, request);, +, +			// FlashMap.setSuccessMessage("Your Greenhouse account is now connected to your Facebook account!");, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	private void postConnect(ServiceProvider<?> provider, WebRequest request) {, +			interceptor.postConnect(provider, request);]
[+++ b/gradle.properties, +springVersion=5.0.0.BUILD-SNAPSHOT]
[+++ b/docs/src/info/changelog.txt, +     (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ b/docs/src/info/changelog.txt, +     (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ /dev/null, +++ b/docs/src/info/changelog.txt, +     (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ /dev/null, +++ b/docs/src/reference/docbook/connecting.xml, +			The following class constructs a <classname>ConnectionFactoryRegistry</classname> containing <interfacename>ConnectionFactory</interfacename>s for Twitter and Facebook using Spring's Java configuration style: 		, +			Here, three connection factories--one each for Twitter and Facebook--are registered with <classname>ConnectionFactoryRegistry</classname> via the <methodname>addConnectionFactory()</methodname> method., +++ b/docs/src/info/changelog.txt, +     (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ /dev/null, +++ b/docs/src/reference/docbook/connecting.xml, +			The following class constructs a <classname>ConnectionFactoryRegistry</classname> containing <interfacename>ConnectionFactory</interfacename>s for Twitter and Facebook using Spring's Java configuration style: 		, +			Here, three connection factories--one each for Twitter and Facebook--are registered with <classname>ConnectionFactoryRegistry</classname> via the <methodname>addConnectionFactory()</methodname> method., +++ b/docs/src/reference/docbook/index.xml, +++ b/docs/src/info/changelog.txt, +     (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ /dev/null, +++ b/docs/src/reference/docbook/connecting.xml, +			The following class constructs a <classname>ConnectionFactoryRegistry</classname> containing <interfacename>ConnectionFactory</interfacename>s for Twitter and Facebook using Spring's Java configuration style: 		, +			Here, three connection factories--one each for Twitter and Facebook--are registered with <classname>ConnectionFactoryRegistry</classname> via the <methodname>addConnectionFactory()</methodname> method., +++ b/docs/src/reference/docbook/index.xml, +++ b/docs/src/reference/docbook/overview.xml, +      , +      <para>, +      	In addition, there are a handful of provider-specific modules that extend Spring Social to enable integration with popular SaaS providers, including Facebook and Twitter., +      </para>, +		<para>, +			The remaining modules are elective, depending on which of the supported service providers you intend for your application to interact with. , +			For example, you'll only need the Twitter module if your application needs to connect with Twitter and invoke the Twitter API., +		</para>, +			If you are developing against a milestone or release candidate version, such as 1.0.0.RC1, you will need to add the following repository in order to resolve the artifact:, +					Spring Social requires <ulink url="http://www.springsource.org/documentation">Spring Framework</ulink> 3.0.5 and above., +					However, Spring Social does not depend on these new features and will work with Spring 3.0.5 or higher., +					If you want to use Spring Social with Spring 3.0.5, you'll need to explicitly add the spring-web dependency to your build, specifying the version:, +	compile ("org.springframework.social:spring-social-core:1.0.0.RC1"), +	compile ("org.springframework:spring-web:3.0.5.RELEASE") { force=true }, +				In addition to the modules that make up Spring Social, there are also several provider-specific modules that provide connectivity and API bindings for popular SaaS providers., +				<title>Spring Social Provider Modules</title>, +				<tgroup cols="3">, +					<colspec colnum="3" colname="col3" colwidth="2*"/>, +							<entry align="center">Maven group ID</entry>, +							<entry align="center">Maven artifact ID</entry>, +						  <entry><ulink url="http://static.springsource.org/spring-social-facebook/docs/1.0.x/reference/html/">Spring Social Facebook</ulink></entry>, +						  <entry>org.springframework.social</entry>, +						  <entry><ulink url="http://static.springsource.org/spring-social-twitter/docs/1.0.x/reference/html/">Spring Social Twitter</ulink></entry>, +						  <entry>org.springframework.social</entry>, +						  <entry><ulink url="http://static.springsource.org/spring-social-linkedin/docs/1.0.x/reference/html/">Spring Social LinkedIn</ulink></entry>, +						  <entry>org.springframework.social</entry>, +						  <entry><ulink url="http://static.springsource.org/spring-social-tripit/docs/1.0.x/reference/html/">Spring Social TripIt</ulink></entry>, +						  <entry>org.springframework.social</entry>, +						</row>, +						<row>, +						  <entry><ulink url="http://static.springsource.org/spring-social-github/docs/1.0.x/reference/html/">Spring Social GitHub</ulink></entry>, +						  <entry>org.springframework.social</entry>, +						  <entry>spring-social-github</entry>, +						</row>, +						<row>, +						  <entry><ulink url="http://static.springsource.org/spring-social-gowalla/docs/1.0.x/reference/html/">Spring Social Gowalla</ulink></entry>, +						  <entry>org.springframework.social</entry>, +						  <entry>spring-social-gowalla</entry>, +  				Note that each of the provider modules will progress and release on a different schedule than Spring Social., +  			, +  			<para>, +  				Refer to each provider module's reference documentation for details on connectivity and the API binding., +  			</para>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */, +	String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication. The authenticate URL, +	 * differs from the authorizationUrl slightly in that it does not require the user to, +	 * authorize the app multiple times. This provides a better user experience for, +	 * "Sign in with Provider" scenarios. Use of implicit grant is discouraged unless, +	 * there is no other option available. Use, +	 * {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */, +	String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */, +	String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication. The authenticate URL, +	 * differs from the authorizationUrl slightly in that it does not require the user to, +	 * authorize the app multiple times. This provides a better user experience for, +	 * "Sign in with Provider" scenarios. Use of implicit grant is discouraged unless, +	 * there is no other option available. Use, +	 * {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */, +	String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters) {, +		return buildAuthUrl(authorizeUrl, grantType, parameters);, +	}, +, +	public String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters) {, +		return authenticateUrl != null ? buildAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 14, 2011), +Compatibility Notes, +   * Extracted provider-specific modules to separate projects., +   * Renamed {Provider}Api.java interfaces to {Provider}.java., +   * Renamed several operations in ConnectionRepository (see JavaDocs/source for details)., +   * Renamed AbstractOAuth1ApiTemplate and AbstractOAuth2ApiTemplate to AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding, respectively., +   * Simplified ConnectController and ProviderSignInController constructors (see JavaDocs/source for details)., +   * Moved ConnectController & ProviderSignInController's applicationUrl property from constructor to setter and made optional., +   * Renamed ConnectController#postLoginUrl property to postSignInUrl for consistency., +   * Renamed SignInService to SignInAdapter for clarity & added Connection, HttpServletRequest, and HttpServletResponse parameters to signIn method signature., +   * Factored out web.ConnectSupport from ConnectController and ProviderSignInController for reusability., +   * Removed commons-codec dependency; spring-security-crypto is now used for Base64 encoding as well as encryption., +   * Added ConnectionSignUp command to sign-in up a new user from a Connection automatically, +   * Introduced super ApiBinding interface with isAuthorized() tester that can be used to determine if the application has been authorized to invoke the API on behalf of a user., +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 14, 2011), +Compatibility Notes, +   * Extracted provider-specific modules to separate projects., +   * Renamed {Provider}Api.java interfaces to {Provider}.java., +   * Renamed several operations in ConnectionRepository (see JavaDocs/source for details)., +   * Renamed AbstractOAuth1ApiTemplate and AbstractOAuth2ApiTemplate to AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding, respectively., +   * Simplified ConnectController and ProviderSignInController constructors (see JavaDocs/source for details)., +   * Moved ConnectController & ProviderSignInController's applicationUrl property from constructor to setter and made optional., +   * Renamed ConnectController#postLoginUrl property to postSignInUrl for consistency., +   * Renamed SignInService to SignInAdapter for clarity & added Connection, HttpServletRequest, and HttpServletResponse parameters to signIn method signature., +   * Factored out web.ConnectSupport from ConnectController and ProviderSignInController for reusability., +   * Removed commons-codec dependency; spring-security-crypto is now used for Base64 encoding as well as encryption., +   * Added ConnectionSignUp command to sign-in up a new user from a Connection automatically, +   * Introduced super ApiBinding interface with isAuthorized() tester that can be used to determine if the application has been authorized to invoke the API on behalf of a user., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 14, 2011), +Compatibility Notes, +   * Extracted provider-specific modules to separate projects., +   * Renamed {Provider}Api.java interfaces to {Provider}.java., +   * Renamed several operations in ConnectionRepository (see JavaDocs/source for details)., +   * Renamed AbstractOAuth1ApiTemplate and AbstractOAuth2ApiTemplate to AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding, respectively., +   * Simplified ConnectController and ProviderSignInController constructors (see JavaDocs/source for details)., +   * Moved ConnectController & ProviderSignInController's applicationUrl property from constructor to setter and made optional., +   * Renamed ConnectController#postLoginUrl property to postSignInUrl for consistency., +   * Renamed SignInService to SignInAdapter for clarity & added Connection, HttpServletRequest, and HttpServletResponse parameters to signIn method signature., +   * Factored out web.ConnectSupport from ConnectController and ProviderSignInController for reusability., +   * Removed commons-codec dependency; spring-security-crypto is now used for Base64 encoding as well as encryption., +   * Added ConnectionSignUp command to sign-in up a new user from a Connection automatically, +   * Introduced super ApiBinding interface with isAuthorized() tester that can be used to determine if the application has been authorized to invoke the API on behalf of a user., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.net.MalformedURLException;, +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made, +	 * and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInInterceptor.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.WebRequest;, +, +/**, + * Listens for service provider sign in events., + * Allows for custom logic to be executed before and after sign in is performed via a specific service provider., + * Note that this interceptor only handles events during {@link ProviderSignInController}'s flow., + * It does not handle events that take place in the case where {@link ProviderSignInController} redirects to the application-defined signup process., + * In that case, interceptors are not necessary and any post-signup logic can be performed using the connection carried in the {@link ProviderSignInAttempt}., + * @author Craig Walls, + * @param <S> The service API hosted by the intercepted service provider., + */, +public interface ProviderSignInInterceptor<S> {, +	, +	/**, +	 * Called during sign in initiation, immediately before user authorization., +	 * May be used to store custom connection attributes in the session before redirecting the user to the provider's site or to contribute parameters to the authorization URL., +	 */, +	void preSignIn(ConnectionFactory<S> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +, +	/**, +	 * Called immediately after the sign in is complete., +	 * Used to invoke the service API on behalf of the user upon signing in., +	 */, +	void postSignIn(Connection<S> connection, WebRequest request);, +	, +}]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Apr 27, 2011), +==============================================, +New Features, +   * Many improvements to service provider "connect" framework, +   * New ProviderSignInController for signing into an application by first, +     signing into a provider such as Twitter or Facebook., +   * A more complete Twitter API binding, including..., +     * Reading, sending, and deleting direct messages, +     * Retrieving a user's friends and followers and (un)following other users, +     * Maintaining and subscribing to lists, +     * Reading daily/weekly/local/current trends, +     * Maintaining saved searches, +     * Search for users, +     * Getting suggestions on who to follow, +   * A more complete Facebook API binding, including..., +     * Reading, posting, and deleting comments, +     * Maintaining events, +     * Retrieving and RSVP'ing to a user's invitations, +     * Reading and posting to feeds, +     * Maintaining friend lists, +     * Retrieving a user's friends, +     * Reading group information and members, +     * Reading a user's interests and likes (e.g. movies, books, music, etc), +     * Liking and unliking, +     * Retrieving photo albums, photos, and video data, +     * Facebook Places checkins, +   * Updated Spring Social showcase sample, +   * Updated documentation, +, +Bug fixes:, +   * SOCIAL-76: TwitterTemplate converts Cyrillic letters to ?, +   * SOCIAL-118: ServiceProviderConnections API assumes stored connection/key validity, +, +, +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	public String providerPage(@PathVariable String providerId, WebRequest request, Model model) {, +		handleDuplicateConnectionException(request, model);, +			request.setAttribute(DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE, e, WebRequest.SCOPE_SESSION);, +	private void handleDuplicateConnectionException(WebRequest request, Model model) {, +		DuplicateConnectionException exception = (DuplicateConnectionException) request.getAttribute(DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		request.removeAttribute(DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		if(exception != null) {, +			model.addAttribute(DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE, Boolean.TRUE);, +		}, +	}, +, +	private static final String DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE = "_duplicateConnectionException";, +]
[+++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg ref="#{environment['application.url']}" />, +			It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname> to create a connection after signup., +		<para>[[[TODO: Document the deferred connection-after-signup stuff!!!]]]</para>, +		]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 *     "facebook" -&gt; Connection("Keith Donald") ,, +	 *     "twitter"  -&gt; Connection("kdonald"), Connection("springsource"), +	 * Returns an empty map if the user has no connections., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 *     "facebook" -&gt; Connection("Keith Donald") ,, +	 *     "twitter"  -&gt; Connection("kdonald"), Connection("springsource"), +	 * Returns an empty map if the user has no connections., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + *        .apply(new SpringSocialConfigurer());, +	 * Constructs a SpringSocialConfigurer.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.Iterator;, +import java.util.Map.Entry;, + * @author Roy Clarkson, +		String clientInfo = "?client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?client_id=" + formEncode(clientId);, +	public final String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state, grantType, additionalParameters);, +	public String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state, grantType, additionalParameters) : buildAuthorizeUrl(redirectUri, null, state, grantType, additionalParameters);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		if (grantType == GrantType.AuthorizationCode) {, +			oauthUrl.append('&').append("response_type").append('=').append("code");, +		} else if (grantType == GrantType.ImplicitGrant) {, +			oauthUrl.append('&').append("response_type").append('=').append("token");, +		}, +		if (additionalParameters != null) {, +			for (Iterator<Entry<String, List<String>>> params = additionalParameters.entrySet().iterator(); params.hasNext();) {, +				Entry<String, List<String>> param = params.next();, +				for (Iterator<String> paramValues = param.getValue().iterator(); paramValues.hasNext();) {, +					oauthUrl.append('&').append(param.getKey()).append('=').append(formEncode(paramValues.next()));, +				}, +			}, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;]
[+++ b/build.gradle, +        gradleVersion = "1.12", +++ b/build.gradle, +        gradleVersion = "1.12", +++ b/gradle.properties, +version                 = 1.1.1.BUILD-SNAPSHOT, +++ b/build.gradle, +        gradleVersion = "1.12", +++ b/gradle.properties, +version                 = 1.1.1.BUILD-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +        gradleVersion = "1.12", +++ b/gradle.properties, +version                 = 1.1.1.BUILD-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 30 12:43:52 CDT 2014, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-bin.zip]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/FriendTemplateTest.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/FriendTemplateTest.java, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/FriendTemplateTest.java, +++ /dev/null, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/TripItServiceProvider.java, +			"https://www.tripit.com/oauth/authorize", null,			, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/FriendTemplateTest.java, +++ /dev/null, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/TripItServiceProvider.java, +			"https://www.tripit.com/oauth/authorize", null,			, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageOperations.java, +	 * @param messageId, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (String string : strings) {, +				builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/FriendTemplateTest.java, +++ /dev/null, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/TripItServiceProvider.java, +			"https://www.tripit.com/oauth/authorize", null,			, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageOperations.java, +	 * @param messageId, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +import org.springframework.web.client.RestTemplate;, +	private final RestTemplate restTemplate;, +	private TwitterProfileResponseExtractor profileExtractor;, +	public FriendTemplate(LowLevelTwitterApi lowLevelApi, RestTemplate restTemplate) {, +		this.restTemplate = restTemplate;, +		return restTemplate.getForObject(FRIEND_IDS_URL + "?user_id={userId}", List.class, userId);, +		return restTemplate.getForObject(FRIEND_IDS_URL + "?screen_name={screenName}", List.class, screenName);, +		return restTemplate.getForObject(FOLLOWER_IDS_URL + "?user_id={userId}", List.class, userId);, +		return restTemplate.getForObject(FOLLOWER_IDS_URL + "?screen_name={screenName}", List.class, screenName);, +		return this.friendshipAssist(FOLLOW_URL + "?user_id={user_id}", userId);, +		return this.friendshipAssist(FOLLOW_URL + "?screen_name={screen_name}", screenName);, +		return this.friendshipAssist(UNFOLLOW_URL + "?user_id={user_id}", userId);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +/**, + * A data access interface for managing a global store of LocalUser-to-ServiceProviderUser Connections., + * Provides data access operations that apply across multiple local user records., + * Also acts as a factory for a local-user-specific {@link ServiceProviderConnectionRepository}., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository, + */, +	/**, +	 * Find the id of the <i>single</i> local user who has a {@link ServiceProviderConnection} with the given key., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign the local application user in using his or her provider account., +	 * Returns null if there is not exactly one local user connected to the provider user., +	 * @param connectionKey the key identifying a provider user, +	 */, +	/**, +	 * Find the ids of the local users who are connected to the specific provider user accounts., +	 * @param providerId the provider id, e.g. "facebook", +	 * @param providerUserIds the set of provider user ids e.g. ("125600", "131345", "54321")., +	 * @return the set of local user ids connected to those service provider users, or empty if none., +	 */, +	Set<String> findLocalUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +	/**, +	 * Create a single-user {@link ServiceProviderConnectionRepository} instance for the local user assigned the given id., +	 * @param localUserId the id of the local user account., +	 * @return the ServiceProviderConnectionRepository, exposing a number of operations for accessing and updating the given local user's provider connections., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Album.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.api;, +, +import java.util.Date;, +, +, +/**, + * Model class representing a Facebook photo album., + * @author Craig Walls, + */, +public class Album {, +, +	private String id;, +, +	private Reference from;, +, +	private String name;, +, +	private String description;, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	public static Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));, +		oauthParameters.put("oauth_nonce", Long.toString(generateNonce(timestamp)));, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	public static String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +	public static String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.putAll(readFormParameters(request.getHeaders().getContentType(), body));, +		additionalParameters.putAll(parseFormParameters(request.getURI().getQuery()));, +	// spring 3.0 compatibility only: planned for removal in Spring Social 1.1, +, +	public static String spring30buildAuthorizationHeaderValue(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.putAll(readFormParameters(request.getHeaders().getContentType(), body));, +		additionalParameters.putAll(parseFormParameters(request.getURI().getQuery()));, +	private static long generateTimestamp() {, +		return System.currentTimeMillis() / 1000;]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		return new RedirectView(providerId, true);]
[+++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a Twitter service provider -->, +++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a Twitter service provider -->, +++ b/samples/gowalla-showcase/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a Twitter service provider -->, +++ b/samples/gowalla-showcase/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/GowallaSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API']
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;]
[+++ /dev/null, +++ /dev/null, +++ b/README.md, +# Spring Social, +, +[Spring Social] is an extension of the [Spring Framework] that helps you connect your applications with Software-as-a-Service (SaaS) providers such as Facebook and Twitter., +, +, +## Features, +, +- An extensible service provider framework that greatly simplifies the process of connecting local user accounts to hosted provider accounts., +, +- A connect controller that handles the authorization flow between your Java/Spring web application, a service provider, and your users., +, +- Java bindings to popular service provider APIs such as Facebook, Twitter, LinkedIn, TripIt, and GitHub., +, +- A sign-in controller that enables users to authenticate with your application by signing in through a service provider., +, +- Much more..., +, +, +## Download Artifacts, +, +See [downloading Spring artifacts] for Maven repository information. Unable to use Maven or other transitive dependency management tools? See [building a distribution with dependencies]., +, +### Dependencies, +, +```xml, +<dependency>, +    <groupId>org.springframework.social</groupId>, +    <artifactId>spring-social-core</artifactId>, +    <version>${org.springframework.social-version}</version>, +</dependency>, +, +<dependency>, +    <groupId>org.springframework.social</groupId>, +    <artifactId>spring-social-web</artifactId>, +    <version>${org.springframework.social-version}</version>, +</dependency>, +```, +, +### Repositories, +, +```xml, +<repository>, +    <id>spring-repo</id>, +    <name>Spring Repository</name>, +    <url>http://repo.spring.io/release</url>, +</repository>   , +    , +<repository>, +    <id>spring-milestone</id>, +    <name>Spring Milestone Repository</name>, +    <url>http://repo.spring.io/milestone</url>, +</repository>, +, +<repository>, +    <id>spring-snapshot</id>, +    <name>Spring Snapshot Repository</name>, +    <url>http://repo.spring.io/snapshot</url>, +</repository>, +```, +, +, +## Spring Social Modules, +, +The core [Spring Social] project does not contain provider modules. Each of the provider modules is in its own project. This enables those modules to progress and release on a separate schedule than Spring Social and be able to react more quickly to changes in the provider's API without the need to wait for a Spring Social release. The SaaS provider-specific projects can be cloned from the following GitHub URLs:, +, +- Twitter: [GitHub][twitter-gh] | [Reference][twitter-ref] | [API][twitter-api], +, +- Facebook: [GitHub][facebook-gh] | [Reference][facebook-ref] | [API][facebook-api], +, +- LinkedIn: [GitHub][linkedin-gh] | [Reference][linkedin-ref] | [API][linkedin-api], +, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +, +- GitHub: [GitHub][github-gh] | [Reference][github-ref] | [API][github-api], +, +, +## Documentation, +, +See the current [Javadoc] and [reference docs]. To get up and running quickly using the project, see the [Quick Start] guide., +, +, +## Sample Applications, +, +Several example projects are available in the [samples repository]., +, +, +## Issue Tracking, +, +Report issues via the [Spring Social JIRA]. While JIRA is preferred, [GitHub issues] are also welcome. Understand our issue management process by reading about [the lifecycle of an issue]., +, +, +## Build from Source, +, +1. Clone the repository from GitHub:, +, +    ```sh, +    $ git clone https://github.com/spring-projects/spring-social.git]
[+++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/serviceprovider.xml, +						With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user., +						With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user., +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/serviceprovider.xml, +						With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user., +						With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user., +++ b/settings.gradle, +include 'spring-social-config', +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/serviceprovider.xml, +						With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user., +						With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user., +++ b/settings.gradle, +include 'spring-social-config', +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.w3c.dom.Element;, +, +class ServiceProviderElementParser implements BeanDefinitionParser {, +	, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String beanId = element.getAttribute("id");, +		String providerClassName = element.getAttribute("class");, +		String clientKey = element.getAttribute("app-key");, +		String clientSecret = element.getAttribute("app-secret");, +		String connectionRepository = element.getAttribute("connection-repository");, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(providerClassName);, +		providerBeanBuilder.addConstructorArgValue(clientKey);]
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Operations.java, +	 * @param accessToken the access token and secret, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Operations.java, +	 * @param accessToken the access token and secret, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Operations.java, +	 * @param accessToken the access token and secret, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth2/AccessGrant.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.security.oauth.client.oauth2;, +, +import java.io.Serializable;, +, +/**, + * OAuth2 access token., + * @author Keith Donald, + */, +public final class AccessGrant implements Serializable {, +, +	private final String accessToken;, +	, +	private final String refreshToken;, +, +	public AccessGrant(String accessToken, String refreshToken) {, +		this.accessToken = accessToken;, +		this.refreshToken = refreshToken;, +	}, +, +	/**, +	 * The access token value., +	 */, +	public String getAccessToken() {, +		return accessToken;, +	}, +, +	/**, +	 * The refresh token that can be used to renew the access token., +	 */, +	public String getRefreshToken() {, +		return refreshToken;, +	}, +, +}, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Operations.java, +	 * @param accessToken the access token and secret, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth2/AccessGrant.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.security.oauth.client.oauth2;, +, +import java.io.Serializable;, +, +/**, + * OAuth2 access token., + * @author Keith Donald, + */, +public final class AccessGrant implements Serializable {, +, +	private final String accessToken;, +	, +	private final String refreshToken;, +, +	public AccessGrant(String accessToken, String refreshToken) {, +		this.accessToken = accessToken;, +		this.refreshToken = refreshToken;, +	}, +, +	/**, +	 * The access token value., +	 */, +	public String getAccessToken() {]
[+++ b/src/dist/changelog.txt, +Spring Social 1.0.3 Release (June 6, 2013), +==========================================, +This release was pushed to support Spring Social Twitter 1.0.4 so that a, +TwitterTemplate can be created using application-only authorization (e.g.,, +OAuth 2's client credentials grant)., +, +Improvements:, +  * Support OAuth 2's password grant and client credentials grant (SOCIAL-324)., +]
[+++ b/samples/spring-social-showcase/README, +Spring Social Showcase, +======================, +++ b/samples/spring-social-showcase/README, +Spring Social Showcase, +======================, +++ b/samples/spring-social-showcase/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +	<modelVersion>4.0.0</modelVersion>, +	<groupId>org.springframework.social.samples</groupId>, +	<artifactId>spring-social-showcase</artifactId>, +	<name>Spring Social Showcase</name>, +	<packaging>war</packaging>, +	<version>1.0.0.BUILD-SNAPSHOT</version>, +	<properties>, +		<java-version>1.6</java-version>, +		<org.springframework.social-version>1.0.0.BUILD-SNAPSHOT</org.springframework.social-version>, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +		<org.springframework.security-version>3.1.0.CI-SNAPSHOT</org.springframework.security-version>, +		<org.slf4j-version>1.5.10</org.slf4j-version>, +	</properties>, +	<dependencies>, +		<!-- Spring -->, +		<dependency>, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-context</artifactId>, +			<version>${org.springframework-version}</version>, +			<exclusions>, +				<!-- Exclude Commons Logging in favor of SLF4j -->, +				<exclusion>, +					<groupId>commons-logging</groupId>, +					<artifactId>commons-logging</artifactId>, +				 </exclusion>, +			</exclusions>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-webmvc</artifactId>, +			<version>${org.springframework-version}</version>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-aspects</artifactId>, +			<version>${org.springframework-version}</version>, +		</dependency>, +		, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +		    <artifactId>spring-social-core</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +		    <artifactId>spring-social-twitter</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +		    <artifactId>spring-social-web</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +, +		<!-- Security -->	    , +		<dependency>, +			<groupId>org.springframework.security</groupId>, +			<artifactId>spring-security-web</artifactId>, +			<version>${org.springframework.security-version}</version>, +			<exclusions>, +				<!-- Exclude Commons Logging in favor of SLF4j -->, +				<exclusion>, +					<groupId>commons-logging</groupId>, +					<artifactId>commons-logging</artifactId>, +				</exclusion>, +				<!-- Not required, since we don't use method-level security with pointcut expressions -->, +				<exclusion>, +					<groupId>org.aspectj</groupId>, +					<artifactId>aspectjweaver</artifactId>, +				</exclusion>, +			</exclusions>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.security</groupId>, +			<artifactId>spring-security-taglibs</artifactId>, +			<version>${org.springframework.security-version}</version>, +			<exclusions>, +				<!-- Exclude Commons Logging in favor of SLF4j -->, +				<exclusion>, +					<groupId>commons-logging</groupId>, +					<artifactId>commons-logging</artifactId>, +				</exclusion>, +			</exclusions>, +		</dependency>, +		<dependency>]
[+++ b/docs/src/reference/docbook/connecting.xml, +    <title>Creating connections with <classname>ConnectController</classname></title>, +	<constructor-arg value="http://localhost:8080/myapplication" />, +, +    <para><classname>ConnectController</classname> is constructed with three arguments:</para>, +    , +    <itemizedlist>, +        <listitem><para>A reference to an instance of a <interfacename>ServiceProviderFactory</interfacename> to assist <classname>ConnectController</classname> in obtaining service providers.</para></listitem>, +        <listitem><para>A reference to an instance of an <interfacename>AccountIdResolver</interfacename> so that <classname>ConnectController</classname> will know which application account to create connections for.</para></listitem>, +        <listitem><para>The base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para></listitem>, +    </itemizedlist>, +, +    <para><classname>ConnectController</classname> also supports a registration-then-connect flow, which is covered in <xref linkend="registration-flow"/>.</para>, +, +        <para><classname>ConnectController</classname> will respond to this request by first checking to see if a connection already exists between the user's account and Twitter. If not, then it will with a view that should offer the user an opportunity to create the connection. Otherwise, it will respond with a view to inform the user that a connection already exists.</para>, +      <para>If the application's request token were "vPyVSe"<footnote><para>This is just an example. Actual request tokens are typically much longer.</para></footnote>, then the browser would be redirected to https://twitter.com/oauth/authorize?oauth_token=vPyVSe and a page similar to the following would be displayed to the user (from Twitter)<footnote><para>If the user has not yet signed into Twitter, the authorization page will also include a username and password field for authentication into Twitter.</para></footnote>:</para>, +      <para>Thus, if the application's Facebook client ID is "0b754" and it's redirect URI is "http://www.mycoolapp.com/connect/facebook", then the browser would be redirected to <![CDATA[https://graph.facebook.com/oauth/authorize?client_id=0b754&redirect_uri=http://www.mycoolapp.com/connect/facebook]]> and Facebook would display the following authorization page to the user:</para>, +        <para>In the previous example of authorizing an application to interact with a user's Facebook profile, you notice that the application is only requesting access to the user's basic profile information. But there's much more that an application can do on behalf of a user with Facebook than simply harvest their profile data. For example, how can an application gain authorization to post to a user's Facebook wall?</para>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in a <code>verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +  <section id="registration-flow">, +      <title>Registering users with social profile data</title>, +      , +      <para>A convenient feature of many social-ready applications is the ability for a new user to register with the application, creating their new account with data extracted from one of their social network profiles. It's convenient to the user, as they won't have to enter all of their information and can be assured that the data is consistent. It's also convenient for the social application, as it can trust that some of the data has already been vetted by the social provider (such as confirming email addresses).</para>, +      , +      <para>In the connection flow described in <xref linkend="connect-controller"/>, <classname>ConnectController</classname> assumes that the user already has created an account with the application and simply wants to connect that account to one of their social network profiles. But <classname>ConnectController</classname> also supports a register-then-connect flow that enables a new user to create a new account using social profile data and then connect that account as part of the registration process.</para>, +      , +      <para>The register-then-connect flow is quite similar to the connect flow, but with a few small differences.</para>, +      , +      <orderedlist>, +          <listitem><para><code>GET /connect/{provider}/register</code> - Displays a web page showing connection status to the provider.</para></listitem>, +          <listitem><para><code>POST /connect/{provider}</code> - Initiates the register-then-connect flow.</para></listitem>, +          <listitem><para><code>GET /connect/{provider}?oauth_token={token}</code> or <code>GET /connect/{provider}?code={code}</code>- Receives the authorization callback from the provider, accepting a request token or code. After requesting an access token, the user will be redirected to a registration form with an object containing the user profile data in the request.</para></listitem>, +          <listitem><para><code>GET /connect/{provider}/register</code> - The application should redirect to this URL after a successful registration to resume the flow and complete the connection.</para></listitem>, +          <listitem><para><code>DELETE /connect/{provider}</code> - Severs a connection with the provider.</para></listitem>, +      </orderedlist>, +      , +      <para>Unlike the connect flow where step 3 both retrieves an access token from the provider and establishes the connection, step 3 in the register-then-connect flow only retrieves the access token. It cannot create the connection since the user has not yet registered and there is no account to connect with.</para>, +      , +      <para>Once <classname>ConnectController</classname> has an access token, it stores it away (in the session) and sends the user to a registration form. The view name of the registration form is derived from the provider name. If the provider name is "github", then the registration view name will be "connect/githubRegister".</para>, +      , +      <para>Before going to the registration view, however, <classname>ConnectController</classname> retrieves a user profile object from the provider and places it into the request as an attribute named "{provider}UserProfile". If the provider's name is "github", then the attribute name is "githubUserProfile". This object can be used to prepopulate the application's registration form with data from the user's social profile. The type of the profile object will vary from provider to provider and is determined by the object returned from the provider implementation's <methodname>getProviderUserProfile()</methodname> method.</para>, +      , +      <para>The application is expected to provider a controller to handler submission of the registration form and, after successful registration, redirect the browser to <classname>ConnectController</classname>'s via the "/connect/{provider}/register" URL.</para>, +      , +      <para>For example, the GitHub showcase sample has a Spring MVC controller with the following handler method to process registration form submission:</para>, +      , +      , +        <programlisting><![CDATA[@RequestMapping(value = "/signup", method = RequestMethod.POST), +   public String register(ShowcaseUser user) {, +   , +      // ... create a new account, +   , +      return "redirect:/connect/github/register";, +   }]]></programlisting>, +      , +      <para>After the account has been created, the controller redirects to "/connect/github/register", which is handled by <classname>ConnectController</classname>. <classname>ConnectController</classname> will then pull the access token from the session and use it to complete the connection between the newly created account and the user's social profile.</para>, +  </section>, +    <para>When the user clicks on the "Connect to Facebook" button, they will be presented with the following authorization dialog<footnote><para>If the user hasn't yet signed in to Facebook, they will first be prompted with a signin page by Facebook.</para></footnote>:</para>, +    ]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +, +	public void addAll(K key, List<? extends V> values) {, +		throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, +	}, +, +	@Override, +	public void addAll(MultiValueMap<K, V> values) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +, +	public void addAll(K key, List<? extends V> values) {, +		throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, +	}, +, +	@Override, +	public void addAll(MultiValueMap<K, V> values) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/TreeMultiValueMap.java, +	public void addAll(K key, List<? extends V> newValues) {, +			values = new LinkedList<>();, +			values.addAll(newValues);, +		}, +, +	@Override, +	public void addAll(MultiValueMap<K, V> values) {, +		Set<java.util.Map.Entry<K, List<V>>> entries = values.entrySet();, +		for (Entry<K, List<V>> entry : entries) {, +			this.addAll(entry.getKey(), entry.getValue());, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +, +	public void addAll(K key, List<? extends V> values) {, +		throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, +	}, +, +	@Override, +	public void addAll(MultiValueMap<K, V> values) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/TreeMultiValueMap.java, +	public void addAll(K key, List<? extends V> newValues) {, +			values = new LinkedList<>();, +			values.addAll(newValues);, +		}, +, +	@Override, +	public void addAll(MultiValueMap<K, V> values) {, +		Set<java.util.Map.Entry<K, List<V>>> entries = values.entrySet();, +		for (Entry<K, List<V>> entry : entries) {, +			this.addAll(entry.getKey(), entry.getValue());, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ParameterMap.java, +import java.util.Map.Entry;, +	public void addAll(String key, List<? extends String> newValues) {, +		List<String> values = this.parameters.get(key);, +			values = new LinkedList<>();, +		this.parameters.put(key, values);, +	}, +	@Override, +	public void addAll(MultiValueMap<String, String> values) {, +		Set<java.util.Map.Entry<String, List<String>>> entries = values.entrySet();, +		for (Entry<String, List<String>> entry : entries) {, +			this.addAll(entry.getKey(), entry.getValue());, +		}, +	}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiTokens.java, +/*, + * Copyright 2011 the original author or authors.]
[+++ b/build.gradle, +        classpath('org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'), +        classpath('org.asciidoctor:asciidoctor-java-integration:0.1.4.preview.1'), +// Set up different subproject lists for individual configuration, +ext.javaProjects = subprojects.findAll { project -> project.name != 'docs' && project.name != 'manual' }, +ext.coreModuleProjects = javaProjects, +, +// Task for creating the distro zip, +task dist(type: Zip) {, +    dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' || task.name.endsWith('Zip') || task.name.endsWith('generatePom') }, +    classifier = 'dist', +    evaluationDependsOn(':docs'), +    evaluationDependsOn(':docs:manual'), +    def zipRootDir = "${project.name}-$version", +    into(zipRootDir) {, +        from(rootDir) {, +            include '*.txt', +        into('docs') {, +            with(project(':docs').apiSpec), +            with(project(':docs:manual').spec), +        into('dist') {, +            from coreModuleProjects.collect {project -> project.libsDir }, +    archives dist, +    archives project(':docs').docsZip, +    archives project(':docs').schemaZip, +++ b/build.gradle, +        classpath('org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'), +        classpath('org.asciidoctor:asciidoctor-java-integration:0.1.4.preview.1'), +// Set up different subproject lists for individual configuration, +ext.javaProjects = subprojects.findAll { project -> project.name != 'docs' && project.name != 'manual' }, +ext.coreModuleProjects = javaProjects, +, +// Task for creating the distro zip, +task dist(type: Zip) {, +    dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' || task.name.endsWith('Zip') || task.name.endsWith('generatePom') }, +    classifier = 'dist', +    evaluationDependsOn(':docs'), +    evaluationDependsOn(':docs:manual'), +    def zipRootDir = "${project.name}-$version", +    into(zipRootDir) {, +        from(rootDir) {, +            include '*.txt', +        into('docs') {, +            with(project(':docs').apiSpec), +            with(project(':docs:manual').spec), +        into('dist') {, +            from coreModuleProjects.collect {project -> project.libsDir }, +    archives dist, +    archives project(':docs').docsZip, +    archives project(':docs').schemaZip, +++ b/docs/docs.gradle, +    // Docbook and Javadoc building and uploading tasks, +apply plugin: 'base', +, +task docs {, +    dependsOn 'manual:asciidoctor', 'apidocs', +}, +, +project('manual') {, +    apply plugin: 'base', +    apply plugin: 'asciidoctor', +, +    ext.expandPlaceholders = "", +, +    asciidoctor {, +        options = [, +          eruby: 'erubis',, +          attributes: [, +              copycss : '',, +              icons : 'font',, +              'source-highlighter': 'prettify',, +              sectanchors : '',, +              toc2: '',, +              idprefix: '',, +              idseparator: '-',, +              doctype: 'book',, +              numbered: '',, +              'spring-social-version' : project.version,, +              'spring-version' : springVersion,, +              revnumber : project.version, +          ], +        ], +    }, +, +, +    ext.spec = copySpec {, +        into ('reference/htmlsingle') {, +            from(asciidoctor.outputDir), +            exclude 'build', 'Guardfile', +        }, +    }, +}, +, +task apidocs(type: Javadoc) {, +    destinationDir = new File(buildDir, 'apidocs'), +    title = "Spring Social $version API", +, +    source coreModuleProjects.collect { project ->, +        project.sourceSets.main.allJava, +    }]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authenticateUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);]
[+++ b/docs/src/info/changelog.txt, +  * A handful of documentation fixes (SOCIAL-249 and SOCIAL-273), +, +Improvements]
[+++ b/build.gradle, +    ext.springReleaseVersion    = "latest.release", +    ext.springSnapshotVersion   = "latest.integration", +        springReleaseTestRuntime.extendsFrom testRuntime, +    // Test against latest Spring Framework release, +    configurations.springReleaseTestRuntime {, +        resolutionStrategy.eachDependency { DependencyResolveDetails details ->, +            if (details.requested.group == 'org.springframework') {, +                details.useVersion springReleaseVersion, +            }, +        }, +    }, +, +    // Test against latest Spring Framework snapshot, +    task springReleaseTest(type: Test) {, +        classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime, +        getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/")), +        getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/")), +    }, +    check.dependsOn springReleaseTest, +, +    configure([test, springReleaseTest, springSnapshotTest]) {, +++ b/build.gradle, +    ext.springReleaseVersion    = "latest.release", +    ext.springSnapshotVersion   = "latest.integration", +        springReleaseTestRuntime.extendsFrom testRuntime, +    // Test against latest Spring Framework release, +    configurations.springReleaseTestRuntime {, +        resolutionStrategy.eachDependency { DependencyResolveDetails details ->, +            if (details.requested.group == 'org.springframework') {, +                details.useVersion springReleaseVersion, +            }, +        }, +    }, +, +    // Test against latest Spring Framework snapshot, +    task springReleaseTest(type: Test) {, +        classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime, +        getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/")), +        getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/")), +    }, +    check.dependsOn springReleaseTest, +, +    configure([test, springReleaseTest, springSnapshotTest]) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +++ b/build.gradle, +    ext.springReleaseVersion    = "latest.release", +    ext.springSnapshotVersion   = "latest.integration", +        springReleaseTestRuntime.extendsFrom testRuntime, +    // Test against latest Spring Framework release, +    configurations.springReleaseTestRuntime {, +        resolutionStrategy.eachDependency { DependencyResolveDetails details ->, +            if (details.requested.group == 'org.springframework') {, +                details.useVersion springReleaseVersion, +            }, +        }, +    }, +, +    // Test against latest Spring Framework snapshot, +    task springReleaseTest(type: Test) {, +        classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime, +        getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/")), +        getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/")), +    }, +    check.dependsOn springReleaseTest, +, +    configure([test, springReleaseTest, springSnapshotTest]) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 */ , +	@Deprecated, +	String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		try {, +			return Integer.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value;			, +		} catch (NumberFormatException e) {, +			return null;, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		try {, +			return Integer.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value;			, +		} catch (NumberFormatException e) {, +			return null;, +		}, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	public void exchangeForAccess_jsonResponse_expiresInAsNonNumericString() {, +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken_expiresInAsNonNumericString.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +		assertNull(accessGrant.getExpireTime());, +		assertEquals("read", accessGrant.getScope());, +	}, +, +	@Test, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		try {, +			return Integer.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value;			, +		} catch (NumberFormatException e) {, +			return null;, +		}, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	public void exchangeForAccess_jsonResponse_expiresInAsNonNumericString() {, +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken_expiresInAsNonNumericString.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +		assertNull(accessGrant.getExpireTime());, +		assertEquals("read", accessGrant.getScope());, +	}, +, +	@Test, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken_expiresInAsNonNumericString.json, +{, +	"expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, +	"scope":"read",, +	"expires_in":"Not a number",, +	"username":"cwagon",, +	"access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, +	"refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}]
[+++ b/.gitignore, +**/src/test/java/exploration, +++ b/.gitignore, +**/src/test/java/exploration, +++ b/build.gradle, +    }, +}, +, +project('spring-social-facebook') {, +    description = 'Spring Social Facebook', +    dependencies {, +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +project('spring-social-linkedin') {, +    description = 'Spring Social LinkedIn', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile project(':spring-social-core'), +    }, +}, +, +project('spring-social-tripit') {, +    description = 'Spring Social TripIt', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +project('spring-social-twitter') {, +    description = 'Spring Social Twitter', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +, +++ b/.gitignore, +**/src/test/java/exploration, +++ b/build.gradle, +    }, +}, +, +project('spring-social-facebook') {, +    description = 'Spring Social Facebook', +    dependencies {, +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +project('spring-social-linkedin') {, +    description = 'Spring Social LinkedIn', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile project(':spring-social-core'), +    }, +}, +, +project('spring-social-tripit') {, +    description = 'Spring Social TripIt', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +project('spring-social-twitter') {, +    description = 'Spring Social Twitter', +    dependencies {, +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +        compile project(':spring-social-core'), +        compile project(':spring-social-oauth'), +    }, +}, +, +]
[+++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	, +	public String toString() {, +		return providerId + ":" + providerUserId;, +	}, +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	, +	public String toString() {, +		return providerId + ":" + providerUserId;, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Semantically equivalent to {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Semantically equivalent to {@link #findConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	, +	public String toString() {, +		return providerId + ":" + providerUserId;, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Semantically equivalent to {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Semantically equivalent to {@link #findConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +++ /dev/null, +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	, +	public String toString() {, +		return providerId + ":" + providerUserId;, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Semantically equivalent to {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Semantically equivalent to {@link #findConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	, +	public String toString() {, +		return providerId + ":" + providerUserId;, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Semantically equivalent to {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Semantically equivalent to {@link #findConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	, +	public String toString() {, +		return providerId + ":" + providerUserId;, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Semantically equivalent to {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Semantically equivalent to {@link #findConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token.]
[+++ b/docs/src/reference/docbook/apis.xml]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/GraphApi.java, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/GraphApi.java, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +		RestTemplate client = new RestTemplate();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/GraphApi.java, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/UserOperations.java, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java]
[+++ b/build.gradle, +      thymeleafVersion = '2.0.19', +        compile ("org.thymeleaf:thymeleaf:2.0.19", optional), +        compile ("org.thymeleaf:thymeleaf-spring3:2.0.19", optional), +++ b/build.gradle, +      thymeleafVersion = '2.0.19', +        compile ("org.thymeleaf:thymeleaf:2.0.19", optional), +        compile ("org.thymeleaf:thymeleaf-spring3:2.0.19", optional), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web.thymeleaf;, +, +import org.springframework.social.connect.ConnectionRepository;, +import org.thymeleaf.Arguments;, +import org.thymeleaf.context.IContext;, +import org.thymeleaf.dom.Element;, +import org.thymeleaf.exceptions.ConfigurationException;, +import org.thymeleaf.processor.attr.AbstractConditionalVisibilityAttrProcessor;, +import org.thymeleaf.spring3.context.SpringWebContext;, +, +/**, + * Implementation of the Spring Social Thymeleaf dialect's <code>social:connected</code> attribute., + * Conditionally renders content based on whether or not the current user is connected to the provider whose ID is given as the attribute value., + * @author Craig Walls, + */, +class ConnectedAttrProcessor extends AbstractConditionalVisibilityAttrProcessor {, +, +	public ConnectedAttrProcessor() {, +		super("connected");, +	}, +, +	@Override, +	public int getPrecedence() {, +		return 300;, +	}, +, +	@Override, +	protected boolean isVisible(Arguments arguments, Element element, String attributeName) {, +		final String providerId = element.getAttributeValue(attributeName);, +		if (providerId == null || providerId.trim().equals("")) {, +			return false;, +		}, +		, +		final IContext context = arguments.getContext();, +		if (!(context instanceof SpringWebContext)) {, +			throw new ConfigurationException(, +					"Thymeleaf execution context is not a Spring web context (implementation of " +, +					SpringWebContext.class.getName() + ". Spring Social integration can only be used in " +, +					"web environements with a Spring application context.");, +		}, +		final SpringWebContext springContext = (SpringWebContext) context;, +		, +		ConnectionRepository connectionRepository = springContext.getApplicationContext().getBean(ConnectionRepository.class);, +		return connectionRepository.findConnections(providerId).size() > 0;, +	}, +, +}, +++ b/build.gradle, +      thymeleafVersion = '2.0.19', +        compile ("org.thymeleaf:thymeleaf:2.0.19", optional), +        compile ("org.thymeleaf:thymeleaf-spring3:2.0.19", optional), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web.thymeleaf;, +, +import org.springframework.social.connect.ConnectionRepository;, +import org.thymeleaf.Arguments;, +import org.thymeleaf.context.IContext;, +import org.thymeleaf.dom.Element;, +import org.thymeleaf.exceptions.ConfigurationException;, +import org.thymeleaf.processor.attr.AbstractConditionalVisibilityAttrProcessor;, +import org.thymeleaf.spring3.context.SpringWebContext;]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		// TODO : Facebook returns the token as URL-encoded with text/plain content type. Test for other providers.]
[+++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +		Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +			Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/build.gradle, +project('spring-social-config') {, +    description = 'Spring Social Configuration', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-core'), +        compile project(':spring-social-facebook') { optional = true }, +        compile project(':spring-social-gowalla') { optional = true }, +        compile project(':spring-social-linkedin') { optional = true }, +        compile project(':spring-social-tripit') { optional = true }, +        compile project(':spring-social-twitter') { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +    }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Spring Social Configuration', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-core'), +        compile project(':spring-social-facebook') { optional = true }, +        compile project(':spring-social-gowalla') { optional = true }, +        compile project(':spring-social-linkedin') { optional = true }, +        compile project(':spring-social-tripit') { optional = true }, +        compile project(':spring-social-twitter') { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +    }, +}, +, +++ b/samples/twitter-showcase/build.gradle, +	compile "org.springframework.social:spring-social-config:1.0.0.BUILD-SNAPSHOT", +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Spring Social Configuration', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-core'), +        compile project(':spring-social-facebook') { optional = true }, +        compile project(':spring-social-gowalla') { optional = true }, +        compile project(':spring-social-linkedin') { optional = true }, +        compile project(':spring-social-tripit') { optional = true }, +        compile project(':spring-social-twitter') { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +    }, +}, +, +++ b/samples/twitter-showcase/build.gradle, +	compile "org.springframework.social:spring-social-config:1.0.0.BUILD-SNAPSHOT", +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +				xmlns:social="http://www.springframework.org/schema/spring-social", +				xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Spring Social Configuration', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-core'), +        compile project(':spring-social-facebook') { optional = true }, +        compile project(':spring-social-gowalla') { optional = true }, +        compile project(':spring-social-linkedin') { optional = true }, +        compile project(':spring-social-tripit') { optional = true }, +        compile project(':spring-social-twitter') { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +    }, +}, +, +++ b/samples/twitter-showcase/build.gradle, +	compile "org.springframework.social:spring-social-config:1.0.0.BUILD-SNAPSHOT", +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +				xmlns:social="http://www.springframework.org/schema/spring-social", +				xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, +++ b/settings.gradle, +include 'spring-social-config', +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Spring Social Configuration', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-core'), +        compile project(':spring-social-facebook') { optional = true }, +        compile project(':spring-social-gowalla') { optional = true }, +        compile project(':spring-social-linkedin') { optional = true }, +        compile project(':spring-social-tripit') { optional = true }, +        compile project(':spring-social-twitter') { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +    }, +}, +, +++ b/samples/twitter-showcase/build.gradle, +	compile "org.springframework.social:spring-social-config:1.0.0.BUILD-SNAPSHOT", +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +				xmlns:social="http://www.springframework.org/schema/spring-social", +				xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, +++ b/settings.gradle]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +			return applicationUrl + connectPath(nativeRequest);, +	private String connectPath(HttpServletRequest request) {, +		String pathInfo = request.getPathInfo();, +		return request.getServletPath() + (pathInfo != null ? pathInfo : "");, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +			return applicationUrl + connectPath(nativeRequest);, +	private String connectPath(HttpServletRequest request) {, +		String pathInfo = request.getPathInfo();, +		return request.getServletPath() + (pathInfo != null ? pathInfo : "");, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +	public void buildOAuthUrl_OAuth10_withContextPath() {, +		ConnectSupport support = new ConnectSupport();, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setRequestURI("/appname/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?oauth_callback=http://somesite.com/appname/connect/someprovider", url);, +	}, +	, +	@Test, +		mockRequest.setServletPath("/connect/someprovider");, +	public void buildOAuthUrl_OAuth10_withApplicationUrlAndNonDefaultServletPath() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setApplicationUrl(new URL("http://somehost:8080/spring-social-showcase"));, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/foo");, +		mockRequest.setPathInfo("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?oauth_callback=http://somehost:8080/spring-social-showcase/foo/connect/someprovider", url);, +	}, +, +	@Test, +	public void buildOAuthUrl_OAuth10_withApplicationUrlHavingDeepPath() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setApplicationUrl(new URL("http://ec2.instance.com:8080/spring-social/showcase"));, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?oauth_callback=http://ec2.instance.com:8080/spring-social/showcase/connect/someprovider", url);, +	}, +	, +	@Test, +	public void buildOAuthUrl_OAuth2_withContextPath() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setApplicationUrl(new URL("https://someothersite.com:1234"));, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/appname/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth2ConnectionFactory(), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?redirect_uri=https://someothersite.com:1234/appname/connect/someprovider", url);, +	}, +	, +	@Test, +		mockRequest.setServletPath("/connect/someprovider");, +	public void buildOAuthUrl_OAuth2_withApplicationUrlAndNonDefaultServletPath() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setApplicationUrl(new URL("https://someothersite.com:1234/spring-social-showcase"));, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/foo");, +		mockRequest.setPathInfo("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth2ConnectionFactory(), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?redirect_uri=https://someothersite.com:1234/spring-social-showcase/foo/connect/someprovider", url);, +	}, +, +	@Test, +	public void buildOAuthUrl_OAuth2_withApplicationUrlHavingDeepPath() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setApplicationUrl(new URL("http://ec2.instance.com:8080/spring-social/showcase"));, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth2ConnectionFactory(), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?redirect_uri=http://ec2.instance.com:8080/spring-social/showcase/connect/someprovider", url);, +	}, +, +	@Test]
[+++ b/.gitignore, +.DS_Store, +++ b/.gitignore, +.DS_Store, +++ b/docs/src/reference/docbook/overview.xml, +              <entry>Spring Social's ServiceProvider connect framework and OAuth support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname> which uses the ServiceProvider framework to manage connections in a web application environment</entry>, +              <entry>spring-social-twitter</entry>, +              <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, +            </row>, +            <row>, +              <entry>spring-social-linkedin</entry>, +              <entry>Includes Spring Social's LinkedIn API.</entry>, +            </row>, +            <row>, +	  <para>To let Spring Social handle the back-and-forth authorization handshake between a web application and a service provider, you'll need the web module:</para>]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		return connectionStatusRedirect(providerId, request);, +		return connectionStatusRedirect(providerId, request);, +	public RedirectView removeConnections(@PathVariable String providerId, NativeWebRequest request) {, +		return connectionStatusRedirect(providerId, request);, +	public RedirectView removeConnection(@PathVariable String providerId, @PathVariable String providerUserId, NativeWebRequest request) {, +		return connectionStatusRedirect(providerId, request);, +	protected RedirectView connectionStatusRedirect(String providerId, NativeWebRequest request) {, +		String servletPath = request.getNativeRequest(HttpServletRequest.class).getServletPath();, +		String providerConnectPath = "/connect/" + providerId;, +		// If DispatcherServlet is mapped to "/", the servlet path will start with "/connect/{providerId}"; , +		// otherwise it will be whatever DispatcherServlet is mapped to., +		if (!servletPath.startsWith(providerConnectPath)) {, +			providerConnectPath = servletPath + providerConnectPath;, +		}, +		return new RedirectView(providerConnectPath, true);]
[+++ b/docs/src/reference/docbook/implementing.xml, +		<title>Process overview</title>]
[+++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() throws MalformedURLException {, +        controller.setApplicationUrl(new URL(environment.getProperty("application.url"));, +			<listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, +			<listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, +			<para>, +				Optionally, you may choose to display a page that shows connection status for all providers., +				In that case, the link might look like this:, +			</para>, +			<programlisting language="xml"><![CDATA[, +<a href="<c:url value="/connect" />">Your connections</a>]]>, +			</programlisting>, +			<para>, +				The view name that <classname>ConnectController</classname> responds with for this URL is "connect/status"., +			</para>, +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() throws MalformedURLException {, +        controller.setApplicationUrl(new URL(environment.getProperty("application.url"));, +			<listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, +			<listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, +			<para>, +				Optionally, you may choose to display a page that shows connection status for all providers., +				In that case, the link might look like this:, +			</para>, +			<programlisting language="xml"><![CDATA[, +<a href="<c:url value="/connect" />">Your connections</a>]]>, +			</programlisting>, +			<para>, +				The view name that <classname>ConnectController</classname> responds with for this URL is "connect/status"., +			</para>, +++ b/docs/src/reference/docbook/overview.xml, +			Over half a billion of this world's internet users have flocked to these services to keep frequent contact with family, friends, and colleagues., +    <version>3.1.0.RC3</version>, +    <version>4.1.2</version>, +				Each binding, such as Facebook or Twitter, transitively depends on Jackson 1.8.5, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. , +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() throws MalformedURLException {, +        controller.setApplicationUrl(new URL(environment.getProperty("application.url"));, +			<listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, +			<listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, +			<para>, +				Optionally, you may choose to display a page that shows connection status for all providers., +				In that case, the link might look like this:, +			</para>, +			<programlisting language="xml"><![CDATA[, +<a href="<c:url value="/connect" />">Your connections</a>]]>, +			</programlisting>, +			<para>, +				The view name that <classname>ConnectController</classname> responds with for this URL is "connect/status"., +			</para>, +++ b/docs/src/reference/docbook/overview.xml, +			Over half a billion of this world's internet users have flocked to these services to keep frequent contact with family, friends, and colleagues., +    <version>3.1.0.RC3</version>, +    <version>4.1.2</version>, +				Each binding, such as Facebook or Twitter, transitively depends on Jackson 1.8.5, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. , +++ b/docs/src/reference/docbook/serviceprovider.xml, +params.setRedirectUri("https://my-callback-url");, +AccessGrant accessGrant = oauthOperations.exchangeForAccess(authorizationCode, "https://my-callback-url", null);, +params.setRedirectUri("https://my-callback-url");, +OAuthToken requestToken = oauthOperations.fetchRequestToken("https://my-callback-url", null);, +    new AuthorizedRequestToken(requestToken, oauthVerifier), null);, +    String findUserIdWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() throws MalformedURLException {, +        controller.setApplicationUrl(new URL(environment.getProperty("application.url"));, +			<listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, +			<listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, +			<para>, +				Optionally, you may choose to display a page that shows connection status for all providers., +				In that case, the link might look like this:, +			</para>, +			<programlisting language="xml"><![CDATA[, +<a href="<c:url value="/connect" />">Your connections</a>]]>, +			</programlisting>, +			<para>, +				The view name that <classname>ConnectController</classname> responds with for this URL is "connect/status"., +			</para>, +++ b/docs/src/reference/docbook/overview.xml, +			Over half a billion of this world's internet users have flocked to these services to keep frequent contact with family, friends, and colleagues., +    <version>3.1.0.RC3</version>, +    <version>4.1.2</version>, +				Each binding, such as Facebook or Twitter, transitively depends on Jackson 1.8.5, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. , +++ b/docs/src/reference/docbook/serviceprovider.xml, +params.setRedirectUri("https://my-callback-url");, +AccessGrant accessGrant = oauthOperations.exchangeForAccess(authorizationCode, "https://my-callback-url", null);, +params.setRedirectUri("https://my-callback-url");, +OAuthToken requestToken = oauthOperations.fetchRequestToken("https://my-callback-url", null);, +    new AuthorizedRequestToken(requestToken, oauthVerifier), null);, +    String findUserIdWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/signin.xml, +public ProviderSignInController providerSignInController() throws MalformedURLException {, +    controller.setApplicationUrl(new URL(environment.getProperty("application.url")));]
[+++ b/samples/twitter-connect/src/main/webapp/WEB-INF/spring/security-oauth-consumer.xml, +	<bean id="twitterProvider" factory-bean="serviceProviderFactory" factory-method="getServiceProvider">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL , +	String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL , +	String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return buildOAuthUrl(authorizeUrl, grantType, parameters);, +	public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	private String buildOAuthUrl(String baseOauthUrl, GrantType grantType, AuthorizationParameters parameters) {, +		StringBuilder oauthUrl = new StringBuilder(baseOauthUrl).append('&').append("redirect_uri").append('=').append(formEncode(parameters.getRedirectUri()));, +		if (grantType == GrantType.AUTHORIZATION_CODE) {, +		} else if (grantType == GrantType.IMPLICIT_GRANT) {, +		if (parameters.getScope() != null) {, +			oauthUrl.append('&').append("scope").append('=').append(formEncode(parameters.getScope()));, +		if (parameters.getState() != null) {, +			oauthUrl.append('&').append("state").append('=').append(formEncode(parameters.getState()));	, +		if (parameters.getAdditionalParameters() != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.getAdditionalParameters().entrySet().iterator(); additionalParams.hasNext();) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL , +	String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return buildOAuthUrl(authorizeUrl, grantType, parameters);, +	public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	private String buildOAuthUrl(String baseOauthUrl, GrantType grantType, AuthorizationParameters parameters) {, +		StringBuilder oauthUrl = new StringBuilder(baseOauthUrl).append('&').append("redirect_uri").append('=').append(formEncode(parameters.getRedirectUri()));, +		if (grantType == GrantType.AUTHORIZATION_CODE) {, +		} else if (grantType == GrantType.IMPLICIT_GRANT) {, +		if (parameters.getScope() != null) {, +			oauthUrl.append('&').append("scope").append('=').append(formEncode(parameters.getScope()));, +		if (parameters.getState() != null) {, +			oauthUrl.append('&').append("state").append('=').append(formEncode(parameters.getState()));	, +		if (parameters.getAdditionalParameters() != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.getAdditionalParameters().entrySet().iterator(); additionalParams.hasNext();) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +import org.springframework.social.oauth2.GrantType;, +				public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters params) {, +				public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters params) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL , +	String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return buildOAuthUrl(authorizeUrl, grantType, parameters);, +	public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	private String buildOAuthUrl(String baseOauthUrl, GrantType grantType, AuthorizationParameters parameters) {, +		StringBuilder oauthUrl = new StringBuilder(baseOauthUrl).append('&').append("redirect_uri").append('=').append(formEncode(parameters.getRedirectUri()));, +		if (grantType == GrantType.AUTHORIZATION_CODE) {, +		} else if (grantType == GrantType.IMPLICIT_GRANT) {, +		if (parameters.getScope() != null) {, +			oauthUrl.append('&').append("scope").append('=').append(formEncode(parameters.getScope()));, +		if (parameters.getState() != null) {, +			oauthUrl.append('&').append("state").append('=').append(formEncode(parameters.getState()));	, +		if (parameters.getAdditionalParameters() != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.getAdditionalParameters().entrySet().iterator(); additionalParams.hasNext();) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +import org.springframework.social.oauth2.GrantType;, +				public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters params) {, +				public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters params) {, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +import org.springframework.social.oauth2.GrantType;, +	public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return "http://springsource.org/oauth/authorize?scope=" + parameters.getScope();, +	public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return buildAuthorizeUrl(grantType, parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java]
[+++ b/docs/src/reference/docbook/connecting.xml, +				Here's an XML equivalent of the <classname>JdbcUsersConnectionRepository</classname> and <classname>ConnectionRepository</classname> configurations shown before:, +</bean>, +, +<bean id="connectionRepository" factory-method="createConnectionRepository" factory-bean="usersConnectionRepository" scope="request">, +    <constructor-arg value="#{request.userPrincipal.name}" />]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private String connectionAddingFailureRedirectUrl = "/";, +, +	/**, +	 * an authenticated user can add additional connections. after successfully authorizing, the user, +	 * will be redirected to this URL, +	 */, +	/**, +	 * redirect the user after an attempt to add an additional authentication failed. After the failure, +	 * the user is still authenticated, so redirecting to something like {@value #DEFAULT_FAILURE_URL} might, +	 * not make sense, +	 */, +	public void setConnectionAddingFailureRedirectUrl(String connectionAddingFailureRedirectUrl) {, +		this.connectionAddingFailureRedirectUrl = connectionAddingFailureRedirectUrl;, +	}, +, +	/**, +	 * @return the authenticated user token, or null if authentication is incomplete., +	 * @throws AuthenticationException if authentication fails., +	 * @see AbstractAuthenticationProcessingFilter#attemptAuthentication(HttpServletRequest, HttpServletResponse), +	 */, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response), +			throws SocialAuthenticationRedirectException, AuthenticationException {, +, +		} else {, +			throw new SocialAuthenticationRedirectException(connectionAddingFailureRedirectUrl);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, +		protectedResourceRequest.getHeaders().set("Authorization", oauth2Version.getAuthorizationHeaderValue(accessToken));]
[+++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/httpclient/HttpComponentsClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support.httpclient;, +, +import java.io.IOException;, +import java.net.URI;, +import java.util.List;, +import java.util.Map;, +, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpEntityEnclosingRequest;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.protocol.HTTP;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.AbstractBufferingClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * {@link org.springframework.http.client.ClientHttpRequest} implementation that uses, + * Apache HTTPComponents HttpClient to execute requests., + *, + * <p>Created via the {@link HttpComponentsClientHttpRequestFactory}., + *, + * @author Oleg Kalnichevski, + * @author Arjen Poutsma, + * @since 3.0, + * @see HttpComponentsClientHttpRequestFactory#createRequest(URI, HttpMethod), + */, +final class HttpComponentsClientHttpRequest extends AbstractBufferingClientHttpRequest {, +, +	private final HttpClient httpClient;, +, +	private final HttpUriRequest httpRequest;, +, +	public HttpComponentsClientHttpRequest(HttpClient httpClient, HttpUriRequest httpRequest) {, +		this.httpClient = httpClient;, +		this.httpRequest = httpRequest;, +	}, +, +	public HttpMethod getMethod() {, +		return HttpMethod.valueOf(httpRequest.getMethod());, +	}, +, +	public URI getURI() {, +		return httpRequest.getURI();, +	}, +, +	@Override]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, + * A data access interface for managing a global store of users connections to service providers., + * Provides data access operations that apply across multiple user records., + * Also acts as a factory for a user-specific {@link ConnectionRepository}., +	 * Find the id of the <i>single</i> user that has the given {@link Connection}., +	 * May never return null if this method implicitly creates a user account from the connection if no such user account already exists., +	 * Find the ids of the users who are connected to the specific provider user accounts., +	 * @return the set of user ids connected to those service provider users, or empty if none., +	 * Create a single-user {@link ConnectionRepository} instance for the user assigned the given id., +	 * All operations on the returned repository instance are relative to the user., +	 * @return the ConnectionRepository, exposing a number of operations for accessing and updating the given user's provider connections.]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Checkin.java, +	private Page place;, +	private Checkin(String id, Page place, Reference from, Reference application, Date createdTime) {, +	public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Checkin.java, +	private Page place;, +	private Checkin(String id, Page place, Reference from, Reference application, Date createdTime) {, +	public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/CheckinPost.java, +	private Page place;, +	public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Checkin.java, +	private Page place;, +	private Checkin(String id, Page place, Reference from, Reference application, Date createdTime) {, +	public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/CheckinPost.java, +	private Page place;, +	public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Facebook.java, +	 * API for working with Facebook pages., +	 */, +	PageOperations pageOperations();, +	, +	/**, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Checkin.java, +	private Page place;, +	private Checkin(String id, Page place, Reference from, Reference application, Date createdTime) {, +	public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/CheckinPost.java, +	private Page place;, +	public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Facebook.java, +	 * API for working with Facebook pages., +	 */, +	PageOperations pageOperations();, +	, +	/**, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Page.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.api;, +, +/**, + * Model class representing a Facebook page., + * A Facebook page could represent any number of things, including businesses, government agencies, people, organizations, etc., + * A page may even represent a place that a user may check into using Facebook Places, if the page has location data., + * The data available for a page will vary depending on the category it belongs to and what data the page administrator has entered., + * @author Craig Walls, + */, +public class Page {, +, +	private final String id;, +, +	private final String name;, +, +	private final String category;, +, +	private final String link;, +, +	private String description;, +	, +	private Location location;, +	, +	private String website;, +	, +	private String picture;, +	, +	private String phone;, +	, +	private String affiliation;, +	, +	private String companyOverview;, +	, +	private int fanCount;, +	, +	private int likes;, +	, +	private int checkins;, +, +	public Page(String id, String name, String link, String category) {, +		this.id = id;, +		this.name = name;, +		this.link = link;, +		this.category = category;, +	}, +, +	public String getId() {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +		Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +		Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +	@Override, +	public void addAll(K key, List<V> values) {, +		throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +		Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +	@Override, +	public void addAll(K key, List<V> values) {, +		throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/TreeMultiValueMap.java, +	@Override, +	public void addAll(K key, List<V> newValues) {, +		List<V> values = this.targetMap.get(key);, +		if (values == null) {, +			values = new LinkedList<V>();, +			this.targetMap.put(key, values);, +		}, +		values.addAll(newValues);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +		Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +	@Override, +	public void addAll(K key, List<V> values) {, +		throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/TreeMultiValueMap.java, +	@Override, +	public void addAll(K key, List<V> newValues) {, +		List<V> values = this.targetMap.get(key);, +		if (values == null) {, +			values = new LinkedList<V>();, +			this.targetMap.put(key, values);, +		}, +		values.addAll(newValues);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +import org.apache.http.conn.ssl.NoopHostnameVerifier;, +import org.apache.http.ssl.SSLContexts;, +					.setSSLContext(getSSLContext()), +					.setSSLHostnameVerifier(new NoopHostnameVerifier()), +				return SSLContexts.custom().useProtocol("SSL").loadTrustMaterial(trustStore, allTrust).build();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +		Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +	@Override, +	public void addAll(K key, List<V> values) {, +		throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/TreeMultiValueMap.java, +	@Override, +	public void addAll(K key, List<V> newValues) {, +		List<V> values = this.targetMap.get(key);, +		if (values == null) {, +			values = new LinkedList<V>();, +			this.targetMap.put(key, values);, +		}, +		values.addAll(newValues);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +import org.apache.http.conn.ssl.NoopHostnameVerifier;, +import org.apache.http.ssl.SSLContexts;, +					.setSSLContext(getSSLContext()), +					.setSSLHostnameVerifier(new NoopHostnameVerifier()), +				return SSLContexts.custom().useProtocol("SSL").loadTrustMaterial(trustStore, allTrust).build();, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ParameterMap.java, +	@Override, +	public void addAll(String key, List<String> newValues) {, +		List<String> values = parameters.get(key);, +		if (values == null) {, +			values = new LinkedList<String>();, +			this.parameters.put(key, values);, +		}, +		values.addAll(newValues);, +	}, +, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +		Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +	@Override, +	public void addAll(K key, List<V> values) {, +		throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/TreeMultiValueMap.java]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, +	private final SignInControllerService signinService;, +	 * , +	 * @param connectionRepository, +	 *            a connection repository used to lookup the account ID connected to the Facebook profile., +	 * @param signinService, +	 *            the signin strategy used to authenticate the user with the application., +	 * @param apiKey, +	 *            the Facebook API key used to retrieve the Facebook cookie containing the access token., +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInControllerService signinService,, +		this.signinService = signinService;, +		signinService.signIn(accountId);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, +	private final SignInControllerService signinService;, +	 * , +	 * @param connectionRepository, +	 *            a connection repository used to lookup the account ID connected to the Facebook profile., +	 * @param signinService, +	 *            the signin strategy used to authenticate the user with the application., +	 * @param apiKey, +	 *            the Facebook API key used to retrieve the Facebook cookie containing the access token., +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInControllerService signinService,, +		this.signinService = signinService;, +		signinService.signIn(accountId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, +	private final SignInControllerService signinService;, +	 * , +	 * @param connectionRepository, +	 *            a connection repository used to lookup the account ID connected to the Twitter profile., +	 * @param signinService, +	 *            the signin strategy used to authenticate the user with the application., +	 * @param applicationUrl, +	 *            the base secure URL for this application, used to construct the callback URL passed to the service, +	 *            providers at the beginning of the connection process., +	public TwitterSigninController(ConnectionRepository connectionRepository, SignInControllerService signinService,, +		this.signinService = signinService;, +		signinService.signIn(accountId);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, +	private final SignInControllerService signinService;, +	 * , +	 * @param connectionRepository, +	 *            a connection repository used to lookup the account ID connected to the Facebook profile., +	 * @param signinService, +	 *            the signin strategy used to authenticate the user with the application., +	 * @param apiKey, +	 *            the Facebook API key used to retrieve the Facebook cookie containing the access token., +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInControllerService signinService,, +		this.signinService = signinService;, +		signinService.signIn(accountId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, +	private final SignInControllerService signinService;, +	 * , +	 * @param connectionRepository, +	 *            a connection repository used to lookup the account ID connected to the Twitter profile., +	 * @param signinService, +	 *            the signin strategy used to authenticate the user with the application., +	 * @param applicationUrl, +	 *            the base secure URL for this application, used to construct the callback URL passed to the service, +	 *            providers at the beginning of the connection process., +	public TwitterSigninController(ConnectionRepository connectionRepository, SignInControllerService signinService,, +		this.signinService = signinService;, +		signinService.signIn(accountId);, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, +	private final SignInControllerService signinService;, +	 * , +	 * @param connectionRepository, +	 *            a connection repository used to lookup the account ID connected to the Facebook profile., +	 * @param signinService, +	 *            the signin strategy used to authenticate the user with the application., +	 * @param apiKey, +	 *            the Facebook API key used to retrieve the Facebook cookie containing the access token., +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInControllerService signinService,, +		this.signinService = signinService;, +		signinService.signIn(accountId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, +	private final SignInControllerService signinService;, +	 * , +	 * @param connectionRepository, +	 *            a connection repository used to lookup the account ID connected to the Twitter profile., +	 * @param signinService, +	 *            the signin strategy used to authenticate the user with the application., +	 * @param applicationUrl, +	 *            the base secure URL for this application, used to construct the callback URL passed to the service, +	 *            providers at the beginning of the connection process., +	public TwitterSigninController(ConnectionRepository connectionRepository, SignInControllerService signinService,, +		this.signinService = signinService;, +		signinService.signIn(accountId);, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/SignInControllerService.java, +/*, + * Copyright 2011 the original author or authors., + *]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	protected RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	protected RestTemplate getRestTemplate() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookOAuth2Template.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import java.util.Map;, +, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.oauth2.OAuth2Template;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.client.RestTemplate;, +, +/**, + * Facebook-specific extension of OAuth2Template to use a RestTemplate that recognizes form-encoded responses as "text/plain"., + * Facebook token responses are form-encoded results with a content type of "text/plain", which prevents the FormHttpMessageConverter, + * registered by default from parsing the results., + * @author Craig Walls, + */, +public class FacebookOAuth2Template extends OAuth2Template {, +, +	public FacebookOAuth2Template(String clientId, String clientSecret, String authorizeUrl, String authenticateUrl, String accessTokenUrl) {, +		super(clientId, clientSecret, authorizeUrl, authenticateUrl, accessTokenUrl);, +	}, +, +	@Override, +	protected RestTemplate createRestTemplate() {, +		RestTemplate restTemplate = new RestTemplate();, +		FormHttpMessageConverter messageConverter = new FormHttpMessageConverter() {, +			@Override, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				return clazz.equals(Map.class) && mediaType != null && mediaType.getType().equals("text"), +					&& mediaType.getSubtype().equals("plain");, +			}, +		};, +		restTemplate.getMessageConverters().add(messageConverter);, +		return restTemplate;, +	}, +	, +	@Override, +	protected AccessGrant postForAccessGrant(String accessTokenUrl, MultiValueMap<String, String> parameters) {, +		MultiValueMap<String, String> response = (MultiValueMap<String, String>) getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class);, +		String accessToken = response.getFirst("access_token");, +		String expires = response.getFirst("expires");, +		Long expireTime = expires != null ? System.currentTimeMillis() + Long.valueOf(expires) * 1000 : null;, +		return new AccessGrant(accessToken, null, null, expireTime);, +	}, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	protected RestTemplate getRestTemplate() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookOAuth2Template.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import java.util.Map;, +, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.oauth2.OAuth2Template;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.client.RestTemplate;, +, +/**, + * Facebook-specific extension of OAuth2Template to use a RestTemplate that recognizes form-encoded responses as "text/plain"., + * Facebook token responses are form-encoded results with a content type of "text/plain", which prevents the FormHttpMessageConverter, + * registered by default from parsing the results., + * @author Craig Walls]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 23, 2011)]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +package org.springframework.social.oauth1;, +, +import org.springframework.web.client.RestTemplate;, +, +public class ProtectedResourceClientFactory {, +, +	public static RestTemplate create(String apiKey, String apiSecret, String accessToken, String accessTokenSecret) {, +		// TODO Auto-generated method stub, +		return null;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +package org.springframework.social.oauth1;, +, +import org.springframework.web.client.RestTemplate;, +, +public class ProtectedResourceClientFactory {, +, +	public static RestTemplate create(String apiKey, String apiSecret, String accessToken, String accessTokenSecret) {, +		// TODO Auto-generated method stub, +		return null;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +package org.springframework.social.oauth2;, +, +import org.springframework.web.client.RestTemplate;, +, +public class ProtectedResourceClientFactory {, +, +	public static RestTemplate standard(String accessToken) {, +		return null;, +	}, +	, +	public static RestTemplate draft10(String accessToken) {, +		return null;, +	}, +, +	public static RestTemplate draft8(String accessToken) {, +		return null;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +package org.springframework.social.oauth1;, +, +import org.springframework.web.client.RestTemplate;, +, +public class ProtectedResourceClientFactory {, +, +	public static RestTemplate create(String apiKey, String apiSecret, String accessToken, String accessTokenSecret) {, +		// TODO Auto-generated method stub, +		return null;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +package org.springframework.social.oauth2;, +, +import org.springframework.web.client.RestTemplate;, +, +public class ProtectedResourceClientFactory {, +, +	public static RestTemplate standard(String accessToken) {, +		return null;, +	}, +	, +	public static RestTemplate draft10(String accessToken) {, +		return null;, +	}, +, +	public static RestTemplate draft8(String accessToken) {, +		return null;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpRequestDecorator.java, +package org.springframework.social.support;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.support.HttpRequestWrapper;, +, +public class HttpRequestDecorator extends HttpRequestWrapper {, +, +	private HttpHeaders httpHeaders;, +, +	private boolean targetHeadersAdded;, +	, +	public HttpRequestDecorator(HttpRequest targetRequest) {, +		super(targetRequest);, +	}, +	, +	public HttpHeaders getHeaders() {, +		if (!targetHeadersAdded) {, +			this.httpHeaders = new HttpHeaders();, +			httpHeaders.putAll(getRequest().getHeaders());]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler;, +	, +	public final void doFilter(final ServletRequest req, final ServletResponse res, final FilterChain chain), +		doFilter((HttpServletRequest) req, (HttpServletResponse) res, chain);, +	}, +	public void doFilter(final HttpServletRequest request, final HttpServletResponse response, final FilterChain chain), +			throws IOException, ServletException {, +		if (!response.isCommitted()) {, +			chain.doFilter(request, response);, +		if (getRequestedProviderId(request) != null) {, +			// only redirect explicit auth, +	}, +	public void setPostLoginUrl(String postLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setDefaultTargetUrl(postLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set postLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +, +		if (successHandler == null) {, +			throw new NullPointerException("successHandler");, +		}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler;, +	, +	public final void doFilter(final ServletRequest req, final ServletResponse res, final FilterChain chain), +		doFilter((HttpServletRequest) req, (HttpServletResponse) res, chain);, +	}, +	public void doFilter(final HttpServletRequest request, final HttpServletResponse response, final FilterChain chain), +			throws IOException, ServletException {, +		if (!response.isCommitted()) {, +			chain.doFilter(request, response);, +		if (getRequestedProviderId(request) != null) {, +			// only redirect explicit auth, +	}, +	public void setPostLoginUrl(String postLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setDefaultTargetUrl(postLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set postLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +, +		if (successHandler == null) {, +			throw new NullPointerException("successHandler");, +		}, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +		env.filter.setPostLoginUrl("/success");, +		assertEquals("/success", env.res.getRedirectedUrl());]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +			List<ClientHttpRequestInterceptor> interceptors = restTemplate.getInterceptors();, +			if (interceptors == null) {   // defensively initialize list if it is null. (See SOCIAL-430), +				interceptors = new ArrayList<ClientHttpRequestInterceptor>();, +				restTemplate.setInterceptors(interceptors);, +			}, +			interceptors.add(new PreemptiveBasicAuthClientHttpRequestInterceptor(clientId, clientSecret));]
[+++ b/pom.xml, +        <org.springframework-version>3.0.4.RELEASE</org.springframework-version>]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/SigningUtilsTest.java, +package org.springframework.social.oauth1;, +, +import static org.junit.Assert.*;, +, +import java.net.URI;, +import java.util.Map;, +, +import org.junit.Test;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +import org.springframework.util.LinkedMultiValueMap;, +, +public class SigningUtilsTest {, +, +	@Test, +	public void buildAuthorizationHeader() throws Exception {, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters("9djdj82h48djs9d2");, +		oauthParameters.put("oauth_token", "kkk9d7dh3k39sjv7");, +		LinkedMultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.add("b5", "=%3D");, +		additionalParameters.add("a3", "a");, +		additionalParameters.add("c@", "");, +		additionalParameters.add("a2", "r b");, +		additionalParameters.add("c2", "");, +		additionalParameters.add("a3", "2 q");, +		String authorizationHeader = SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, new URI("http://example.com/request"), oauthParameters, additionalParameters, "consumer_secret", "token_secret");, +		assertAuthorizationHeader(authorizationHeader);, +	}, +, +	@Test, +	public void buildAuthorizationHeaderValue() throws Exception {, +		HttpRequest request = new SimpleClientHttpRequestFactory().createRequest(new URI("http://example.com/request?b5=%3D%253D&a3=a&c%40=&a2=r%20b"), HttpMethod.POST);, +		String authorizationHeader = SigningUtils.buildAuthorizationHeaderValue(request, "c2&a3=2+q".getBytes(), "9djdj82h48djs9d2", "consumer_secret", "kkk9d7dh3k39sjv7", "token_secret");, +		assertAuthorizationHeader(authorizationHeader);, +	}, +	, +	@Test, +	public void spring30buildAuthorizationHeaderValue() throws Exception {, +		ClientHttpRequest request = new SimpleClientHttpRequestFactory().createRequest(new URI("http://example.com/request?b5=%3D%253D&a3=a&c%40=&a2=r%20b"), HttpMethod.POST);, +		String authorizationHeader = SigningUtils.spring30buildAuthorizationHeaderValue(request, "c2&a3=2+q".getBytes(), "9djdj82h48djs9d2", "consumer_secret", "kkk9d7dh3k39sjv7", "token_secret");, +		assertAuthorizationHeader(authorizationHeader);, +	}, +, +	private void assertAuthorizationHeader(String authorizationHeader) {, +		// TODO: Only tests that the elements of the header are present and that most values are correct., +		//       Testing the nonce, timestamp, and signature values is tricky, so those values aren't asserted., +		String[] headerElements = authorizationHeader.split(", ");, +		assertEquals("OAuth oauth_version=\"1.0\"", headerElements[0]);, +		assertTrue(headerElements[1].matches("oauth_nonce=\"(.*)\"")); // TODO: Test nonce better, +		assertEquals("oauth_signature_method=\"HMAC-SHA1\"", headerElements[2]);		, +		assertEquals("oauth_consumer_key=\"9djdj82h48djs9d2\"", headerElements[3]);, +		assertEquals("oauth_token=\"kkk9d7dh3k39sjv7\"", headerElements[4]);, +		assertTrue(headerElements[5].matches("oauth_timestamp=\"(.*)\""));	// TODO: Test timestamp better, +		assertTrue(headerElements[6].matches("oauth_signature=\"(.*)\""));	// TODO: Test signature better	, +	}, +, +	@Test, +	public void buildBaseString_specificationExample() {, +		/*, +		 * Tests the buildBaseString() method using the example given in the OAuth 1 spec, +		 * at http://tools.ietf.org/html/rfc5849#section-3.4.1 as the test data., +		 */, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters("9djdj82h48djs9d2");, +		oauthParameters.put("oauth_token", "kkk9d7dh3k39sjv7");, +		LinkedMultiValueMap<String, String> collectedParameters = new LinkedMultiValueMap<String, String>();, +		collectedParameters.add("b5", "=%3D");, +		collectedParameters.add("a3", "a");, +		collectedParameters.add("c@", "");, +		collectedParameters.add("a2", "r b");, +		collectedParameters.add("c2", "");, +		collectedParameters.add("a3", "2 q");, +		collectedParameters.setAll(oauthParameters);, +		String baseString = SigningUtils.buildBaseString(HttpMethod.POST, "http://example.com/request", collectedParameters);, +		, +		String[] baseStringParts = baseString.split("&");, +		assertEquals(3, baseStringParts.length);, +		assertEquals("POST", baseStringParts[0]);, +		assertEquals("http%3A%2F%2Fexample.com%2Frequest", baseStringParts[1]);, +			, +		String[] parameterParts = baseStringParts[2].split("%26");, +, +		assertEquals(12, parameterParts.length);, +		assertEquals("a2%3Dr%2520b", parameterParts[0]);, +		assertEquals("a3%3D2%2520q", parameterParts[1]);, +		assertEquals("a3%3Da", parameterParts[2]);, +		assertEquals("b5%3D%253D%25253D", parameterParts[3]);, +		assertEquals("c%2540%3D", parameterParts[4]);, +		assertEquals("c2%3D", parameterParts[5]);, +		assertEquals("oauth_consumer_key%3D9djdj82h48djs9d2", parameterParts[6]);, +		assertTrue(parameterParts[7].startsWith("oauth_nonce%3D"));, +		assertEquals("oauth_signature_method%3DHMAC-SHA1", parameterParts[8]);, +		assertTrue(parameterParts[9].startsWith("oauth_timestamp%3D"));, +		assertEquals("oauth_token%3Dkkk9d7dh3k39sjv7", parameterParts[10]);, +		assertEquals("oauth_version%3D1.0", parameterParts[11]);, +	}, +	, +	@Test]
[+++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException() {, +		super("Insufficent permission for this operation.");, +		this.requiredPermission = null;, +	}, +, +	/**, +	 * The permission required to access the resource., +	 * May be null if the required permission is unknown., +	 */]
[+++ b/docs/src/reference/docbook/connecting.xml, +      		In <xref linkend="serviceprovider"/>, you learned how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> can be used to manage user connections that link your application's user accounts with accounts on external service providers., +		<title>Configuring ConnectController</title>		, +			The following class constructs a <classname>ConnectionFactoryRegistry</classname> containing <interfacename>ConnectionFactory</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style: 		, +public class ConnectionFactoryConfig {, +    @Value("${twitter.consumerKey}"), +    private String twitterConsumerKey;, +	, +    @Value("${twitter.consumerSecret}"), +    private String twitterConsumerSecret;, +, +    @Value("${facebook.clientId}"), +    private String facebookClientId;, +	, +    @Value("${facebook.clientSecret}"), +    private String facebookClientSecret;, +, +    @Value("${tripit.consumerKey}"), +    private String tripItConsumerKey;, +	, +    @Value("${tripit.consumerSecret}"), +    private String tripItConsumerSecret;, +	, +			Here, three connection factories--one each for Twitter, Facebook, and TripIt--are registered with <classname>ConnectionFactoryRegistry</classname> via the <methodname>addConnectionFactory()</methodname> method. , +			Because consumer keys and secrets may be different across environments (e.g., test, production, etc) it is recommended that these values be externalized., +			<classname>ConnectController</classname> will use the <interfacename>ConnectionFactory</interfacename>s that it obtains through <classname>ConnectionFactoryLocator</classname> to perform the authorization exchange with each provider and ultimately to create a connection., +			Once a connection has been created, it must be persisted and associated with the user's account., +			The  <classname>Principal</classname> is passed to the <interfacename>UsersConnectionRepository</interfacename>'s <methodname>createConnectionRepository()</methodname> method to create a <interfacename>ConnectionRepository</interfacename> for the current user in the context of the current web request., +			Here's one configured using Spring's Java configuration style:, +			It will use the <interfacename>DataSource</interfacename> to access the RDBMS when persisting and restoring connections., +			When restoring connections, it will use the <interfacename>ConnectionFactoryLocator</interfacename> to create the Connection instances from ConnectionData., +        return Encryptors.text(password, salt);, +				This is functionally equivalent to the Java-based configuration of <classname>ConnectionFactoryRegistry</classname> shown before., +				The only casual difference is that the connection factories are injected as a list into the <code>connectionFactories</code> property rather than with the <methodname>addConnectionFactory()</methodname> method., +              factory-method="text">, +    public ConnectController connectController(@Value("${application.secureUrl}") String applicationUrl,, +            ConnectionFactoryLocator connectionFactoryLocator,, +            Provider<ConnectionRepository> connectionRepositoryProvider) {, +        return new ConnectController(applicationUrl, connectionFactoryLocator, connectionRepositoryProvider);, +    <constructor-arg value="${application.secureUrl}" />, +    <!-- relies on by-type autowiring for the other constructor-args -->, +			<classname>ConnectController</classname> supports authorization flows for either OAuth 1 or OAuth 2, relying on <interfacename>OAuth1Operations</interfacename> or <interfacename>OAuth2Operations</interfacename> to handle the specifics for each protocol., +			<classname>ConnectController</classname> will obtain the appropriate OAuth operations interface from one of the provider connection factories registered with <classname>ConnectionFactoryRegistry</classname>., +				Continuing with the Twitter example, a JSP view resolved from "connect/twitterConnect" might include the following form:, +public interface ConnectInterceptor<A> {, +	void preConnect(ConnectionFactory<A> connectionFactory, WebRequest request);, +	void postConnect(Connection<A> connection, WebRequest request);, +public ConnectController connectController(@Value("${application.secureUrl}") applicationUrl,, +        ConnectionFactoryLocator connectionFactoryLocator, , +		Provider<ConnectionRepository> connectionRepositoryProvider) {, +    ConnectController controller = new ConnectController(applicationUrl, connectionFactoryLocator, connectionRepositoryProvider);, +    <constructor-arg value="${application.secureUrl}" />]
[+++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +public class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +, +	private final OAuth1Template oauthTemplate;, +, +	public OAuth1ClientRequestAuthorizer(OAuth1Template oauthTemplate) {, +		this.oauthTemplate = oauthTemplate;, +	}, +					oauthTemplate.buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +public class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +, +	private final OAuth1Template oauthTemplate;, +, +	public OAuth1ClientRequestAuthorizer(OAuth1Template oauthTemplate) {, +		this.oauthTemplate = oauthTemplate;, +	}, +					oauthTemplate.buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +++ b/src/main/java/org/springframework/social/oauth/OAuth1EnabledRestTemplateFactory.java, +package org.springframework.social.oauth;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +, +public abstract class OAuth1EnabledRestTemplateFactory implements FactoryBean<OAuthEnabledRestTemplate>,, +		ApplicationContextAware {, +, +	protected ApplicationContext applicationContext;, +, +	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {, +		this.applicationContext = applicationContext;, +	}, +, +	public OAuthEnabledRestTemplate getObject() throws Exception {, +		return new OAuthEnabledRestTemplate(new OAuth1ClientRequestAuthorizer(getOAuth1Template()));, +	}, +, +	public Class<?> getObjectType() {, +		return OAuthEnabledRestTemplate.class;, +	}, +, +	public boolean isSingleton() {, +		return true;, +	}, +, +	protected abstract OAuth1Template getOAuth1Template();, +}, +++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +public class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +, +	private final OAuth1Template oauthTemplate;, +, +	public OAuth1ClientRequestAuthorizer(OAuth1Template oauthTemplate) {, +		this.oauthTemplate = oauthTemplate;, +	}, +					oauthTemplate.buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +++ b/src/main/java/org/springframework/social/oauth/OAuth1EnabledRestTemplateFactory.java, +package org.springframework.social.oauth;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +, +public abstract class OAuth1EnabledRestTemplateFactory implements FactoryBean<OAuthEnabledRestTemplate>,, +		ApplicationContextAware {, +, +	protected ApplicationContext applicationContext;, +, +	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {, +		this.applicationContext = applicationContext;, +	}, +, +	public OAuthEnabledRestTemplate getObject() throws Exception {, +		return new OAuthEnabledRestTemplate(new OAuth1ClientRequestAuthorizer(getOAuth1Template()));, +	}, +, +	public Class<?> getObjectType() {, +		return OAuthEnabledRestTemplate.class;, +	}, +, +	public boolean isSingleton() {, +		return true;, +	}, +, +	protected abstract OAuth1Template getOAuth1Template();, +}, +++ b/src/main/java/org/springframework/social/oauth/OAuth1Template.java, +package org.springframework.social.oauth;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +, +public interface OAuth1Template {, +	String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +}]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			logger.error("Exception while building authorization URL: ", e);, +			logger.error("Exception while completing OAuth 1.0(a) connection: ", e);, +			logger.error("Exception while completing OAuth 2 connection: ", e);]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +	private String scope;, +			String scope = getScope(); // TODO set scope, +	public String getScope() {, +		return scope;, +	}, +, +	/**, +	 * @param scope OAuth scope to use, i.e. requested permissions, +	 */, +	public void setScope(String scope) {, +		this.scope = scope;, +	}, +, +	]
[+++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	 * @return the permission required to access the resource, +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	 * @return the permission required to access the resource, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +	 * @return The id of the provider the connection is associated with., +	 * @return The id of the provider user this connection is connected to., +	 * @return A display name for the connection., +	 * @return A link to the provider's user profile page., +	 * @return An image visualizing the connection., +	 * @return The access token required to make authorized API calls., +	 * @return The secret token needed to make authorized API calls., +	 * @return A token use to renew this connection. Optional., +	 * @return The time the connection expires. Optional., +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	 * @return the permission required to access the resource, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +	 * @return The id of the provider the connection is associated with., +	 * @return The id of the provider user this connection is connected to., +	 * @return A display name for the connection., +	 * @return A link to the provider's user profile page., +	 * @return An image visualizing the connection., +	 * @return The access token required to make authorized API calls., +	 * @return The secret token needed to make authorized API calls., +	 * @return A token use to renew this connection. Optional., +	 * @return The time the connection expires. Optional., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	 * @return The id of the provider as it is registered in the system., +	 * @return The id of the external provider user representing the remote end of the connection., +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	 * @return the permission required to access the resource, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +	 * @return The id of the provider the connection is associated with., +	 * @return The id of the provider user this connection is connected to., +	 * @return A display name for the connection., +	 * @return A link to the provider's user profile page., +	 * @return An image visualizing the connection., +	 * @return The access token required to make authorized API calls., +	 * @return The secret token needed to make authorized API calls., +	 * @return A token use to renew this connection. Optional., +	 * @return The time the connection expires. Optional., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	 * @return The id of the provider as it is registered in the system.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +			addCustomParameters(params);, +	protected void addCustomParameters(OAuth2Parameters params) {, +	}]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth1AuthenticationService.java, +			OAuth1Parameters params;, +			if (ops.getVersion() == OAuth1Version.CORE_10) {, +				params = new OAuth1Parameters();, +				params.setCallbackUrl(returnToUrl);, +			} else {, +				params = OAuth1Parameters.NONE;, +			}, +			, +			String oAuthUrl = ops.buildAuthenticateUrl(requestToken.getValue(), params);, +			, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth1AuthenticationService.java, +			OAuth1Parameters params;, +			if (ops.getVersion() == OAuth1Version.CORE_10) {, +				params = new OAuth1Parameters();, +				params.setCallbackUrl(returnToUrl);, +			} else {, +				params = OAuth1Parameters.NONE;, +			}, +			, +			String oAuthUrl = ops.buildAuthenticateUrl(requestToken.getValue(), params);, +			, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +			OAuth2Parameters params =  new OAuth2Parameters();, +			params.setRedirectUri(returnToUrl);, +			params.setScope(scope);, +					GrantType.AUTHORIZATION_CODE, params);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth1AuthenticationService.java, +			OAuth1Parameters params;, +			if (ops.getVersion() == OAuth1Version.CORE_10) {, +				params = new OAuth1Parameters();, +				params.setCallbackUrl(returnToUrl);, +			} else {, +				params = OAuth1Parameters.NONE;, +			}, +			, +			String oAuthUrl = ops.buildAuthenticateUrl(requestToken.getValue(), params);, +			, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +			OAuth2Parameters params =  new OAuth2Parameters();, +			params.setRedirectUri(returnToUrl);, +			params.setScope(scope);, +					GrantType.AUTHORIZATION_CODE, params);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java]
[+++ b/docs/src/reference/docbook/apis.xml, +			From a user's perspective, Twitter's function is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +			In contrast, Twitter's API is rather rich, enabling applications to interact with Twitter in ways that may not be obvious from the humble tweet box., +			Spring Social offers interaction with Twitter's service API through the <interfacename>TwitterApi</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>.			, +TwitterApi twitterApi = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitterApi = new TwitterTemplate();]]>, +			Attempting other operations, such as tweeting will fail with an <classname>IllegalStateException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on a <interfacename>ServiceProviderConnection</interfacename>. , +List<ServiceProviderConnection<TwitterApi>> connections = connectionRepository.finConnectionsToProvider("twitter");, +TwitterApi twitterApi = connections.get(0).getServiceApi();]]>, +			Here, <interfacename>ServiceProviderConnectionRepository</interfacename> is being asked for all of the connections that the current user has with Twitter., +			From the first connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection credentials received when the connection was established., +			Once you have a <interfacename>TwitterApi</interfacename>, you can perform a several operations against Twitter., +			<interfacename>TwitterApi</interfacename> is defined as follows:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +public interface TwitterApi {, +, +    boolean isAuthorizedForUser();, +, +    DirectMessageOperations directMessageOperations();, +	, +    FriendOperations friendOperations();, +, +    ListOperations listOperations();, +, +    SearchOperations searchOperations();, +, +    TimelineOperations timelineOperations();, +, +    UserOperations userOperations();, +, +}]]>, +		</programlisting>		, +		, +		<para>, +			The <methodname>isAuthorizedForUser</methodname> helps determine if the <interfacename>TwitterApi</interfacename> instance has been created with credentials to perform on behalf of a user., +			It will return true if it is capable of performing operations requiring authorization; false otherwise. 			, +		</para>, +		, +		<para>, +			The remaining six methods return sub-APIs, partitioning the Twitter service API into divisions targeting specific facets of Twitter functionality., +			These sub-APIs are defined by interfaces described in <xref linkend="table-twitter-sub-apis" />., +		</para>, +		, +		<table xml:id="table-twitter-sub-apis">, +			<title>TwitterApi's Sub-APIs</title>, +			<tgroup cols="2">, +				<colspec align="left" />, +				<colspec colnum="1" colname="col1" colwidth="2*"/>, +				<colspec colnum="2" colname="col2" colwidth="2*"/>, +				<thead>, +					<row>, +						<entry align="center">Sub-API Interface</entry>, +						<entry align="center">Description</entry>, +					</row>, +				</thead>, +				<tbody>, +					<row>, +						<entry>DirectMessageOperations</entry>, +						<entry>Reading and sending direct messages.</entry>, +					</row>, +					<row>, +						<entry>FriendOperations</entry>, +						<entry>Retrieving a user's list of friends and followers and following/unfollowing users.</entry>, +					</row>, +					<row>, +						<entry>ListOperations</entry>, +						<entry>Maintaining, subscribing to, and unsubscripting from user lists</entry>, +					</row>, +					<row>, +						<entry>SearchOperations</entry>, +						<entry>Searching tweets and viewing search trends</entry>, +					</row>, +					<row>, +						<entry>TimelineOperations</entry>, +						<entry>Reading timelines and posting tweets.</entry>, +					</row>, +					<row>, +						<entry>UserOperations</entry>, +						<entry>Retrieving user profile data.</entry>, +					</row>, +				</tbody>, +			</tgroup>, +		</table>, +		, +		<para>, +			What follows is a survey of common tasks you may perform with <interfacename>TwitterApi</interfacename> and its sub-APIs., +			For complete details on the Spring Social's entire Twitter API binding, refer to the JavaDoc., +				To get a user's Twitter profile, call <interfacename>UserOperations</interfacename>' <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitterApi.userOperations().getUserProfile();]]>, +TwitterProfile profile = twitterApi.userOperations().getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>UserOperations.getScreenName()</methodname>:, +String profileId = twitterApi.userOperations().getScreenName();]]>, +				To post a message to Twitter the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method provided by <interfacename>TimelineOperations</interfacename>:, +twitterApi.timelineOperations().updateStatus("Spring Social is awesome!")]]>, +twitterApi.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitterApi.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitterApi.timelineOperations().retweet(tweetId);]]>]
[+++ b/docs/src/reference/docbook/implementing.xml, +			By now, you should have an API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform Connection model.]
[+++ b/docs/src/reference/docbook/connecting.xml, +    <para>To simplify an application's role in the OAuth dance, Spring Social provides <classname>ConnectController</classname>. <classname>ConnectController</classname> is a Spring MVC controller that handles the application's part in the OAuth dance.</para>, +, +    <para>To use <classname>ConnectController</classname>, configure it along with other controllers in your application's Spring MVC configuration:</para>, +        <listitem><para><code>GET /connect/{provider}</code> - Displays a web page showing connection status to the provider.</para></listitem>, +        <listitem><para><code>POST /connect/{provider}</code> - Initiates the connection flow with the provider.</para></listitem>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}</code> - Receives the authorization callback from the provider, accepting a request token. Uses the request token to request an access token and complete the connection.</para></listitem>, +        <listitem><para><code>DELETE /connect/{provider}</code> - Severs a connection with the provider.</para></listitem>, +        <listitem><para><code>GET /connect/{provider}?code={code}</code> - Receives the authorization callback from the provider, accepting an authorization code. Uses the code to request an access token and complete the connection.</para></listitem>, +      <para>Before the connection flow starts in earnest, a web application may choose to show a page that offers the user information on their connection status and offer them the opportunity to create a connection between their account and their social profile. <classname>ConnectController</classname> can display such a page if the browser navigates to <code>/connect/{provider}</code>.</para>, +      <para>For example, to display a connection status page for Twitter, where the provider name is "twitter", your application should provide a link similar to this:</para>, +        <note>, +            <para>Although the view names are derived from the provider name, it may be possible to specify these view names in a future version of Spring Social. Follow <ulink url="https://jira.springframework.org/browse/SOCIAL-91" /> for more details.</para>, +        </note>, +            , +        , +      <para>To kick off the connection flow, the application should <code>POST</code> to <code>/connect/{provider}</code>. Continuing with the Twitter example, the JSP resolved from "connect/twitterConnect" might include the following form:</para>, +      <programlisting><![CDATA[<form action="<c:url value="/connect/twitter" />" method="POST">, +</form>]]></programlisting>, +      <para>(If the user has not yet signed into Twitter, the authorization page will also included a username and password field for authentication into Twitter.)</para>, +      <programlisting><![CDATA[https://graph.facebook.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}]]></programlisting>, +      <para>Thus, if the application's Facebook client ID is "0b754d95f9c9899b0d6c4456B4f2EdD7" and it's redirect URI is "http://www.mycoolapp.com/connect/facebook", then the browser would be redirected to <![CDATA[https://graph.facebook.com/oauth/authorize?client_id=0b754d95f9c9899b0d6c4456B4f2EdD7&redirect_uri=http://www.mycoolapp.com/connect/facebook]]> and Facebook would display the following authorization page to the user:</para>, +            <imagedata fileref="images/facebook-authorize-basic.png", +            <imagedata fileref="images/facebook-authorize-basic.png" format="PNG" align="center" scale="40"/>, +      <!-- TODO: Grab screen shot of simple authorization with Facebook then use existing screenshot to discuss scope attribute -->, +      <para>The behavior varies from provider to provider when the user denies the authorization. For instance, Twitter will simply show a page telling the user that they denied the application access and does not redirect back to the application's callback URL. Facebook, on the other hand, will redirect back to the callback URL with error information as request parameters.</para>, +      , +      <section id="connect-controller-flow-3-scope">, +        <title>Authorization scope</title>, +, +        <para>In the previous example of authorizing an application to interact with a user's Facebook profile, you notice that the application is only being given access to the user's basic profile information. But there's much more that an application can do on behalf of a user with Facebook than simply harvest their profile data. For example, how can an application gain authorization to post to a user's Facebook wall?</para>, +        , +        <para>OAuth 2 authorization may optionally include a scope parameter that indicates the type of authorization being requested. On the provider, the "scope" parameter should be passed along on the authorization URL. In the case of Facebook, that means that the Facebook authorization URL pattern should be as follows:</para>, +        , +<programlisting><![CDATA[https://graph.facebook.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}]]></programlisting>, +, +        <para><classname>ConnectController</classname> accepts a "scope" parameter at authorization and passes its value along to the provider's authorization URL. For example, to request permission to post to a user's Facebook wall, the connect form might look like this:</para>, +, +              <programlisting><![CDATA[<form action="<c:url value="/connect/twitter" />" method="POST">, +    <input type="hidden" name="scope" value="publish_stream,offline_access" />, +    <p>You haven't created any connections with Twitter yet. Click the button to create, +       a connection between your account and your Twitter profile. , +       (You'll be redirected to Twitter where you'll be asked to authorize the connection.)</p>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +</form>]]></programlisting>, +              , +        <para>The hidden "scope" field contains the scope values to be passed along to Facebook's authorization URL. In this case, "publish_stream" requests permission to post to a user's wall. In addition, "offline_access" requests permission to access Facebook on behalf of a user even when the user isn't using the application.</para>, +        , +        <note>, +            <para>OAuth 2 access tokens typically expire after some period of time. Per the OAuth 2 specification, an application may continue accessing a provider after a token expires by using a refresh token to either renew an expired access token or receive a new access token (all without troubling the user to re-authorize the application).</para>, +            , +            <para>Facebook does not currently support refresh tokens. Moreover, Facebook access tokens expire after about 2 hours. So, to avoid having to ask your users to re-authorize ever 2 hours, the best way to keep a long-lived access token is to request "offline_access".</para>, +        </note>, +, +        <para>When asking for "publish_stream,offline_access" authorization, the user will be prompted with the following authorization page from Facebook:</para>, +, +        <mediaobject>, +          <imageobject role="fo">, +              <imagedata fileref="images/facebook-authorize-scoped.png", +                format="PNG" align="center" scale="40"/>, +          </imageobject>, +          <imageobject role="html">, +              <imagedata fileref="images/facebook-authorize-scoped.png" format="PNG" align="center" scale="40"/>, +          </imageobject>, +        </mediaobject>, +        , +        <para>Scope values are provider-specific, so check with the service provider's documentation for the available scopes. Facebook scopes are documented at <ulink url="http://developers.facebook.com/docs/authentication/permissions" />.</para>, +        , +      </section>, +      <para><classname>ConnectController</classname> will handle the callback request and trade in the verifier/code for an access token. Once the access token has been received, the OAuth dance is complete and the application may use the access token to interact with the provider on behalf of the user. The last thing that <classname>ConnectController</classname> does is to hand off the access token to the <interfacename>ServiceProvider</interfacename> implementation to be stored for future user.</para>, +      <para>To delete a connection via <classname>ConnectController</classname>, submit a DELETE request to "/connect/{provider}".</para>, +      , +      <para>In order to support this through a form in a web browser, you'll need to have Spring's <ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html"><classname>HiddenHttpMethodFilter</classname></ulink> configured in your application's web.xml. Then you can provide a disconnect button via a form like this:</para>, +      , +      , +        <programlisting><![CDATA[<form action="<c:url value="/connect/twitter" />" method="post">, +   <div class="formInfo">, +      <p>Spring Social Showcase is connected to your Twitter account., +         Click the button if you wish to disconnect.</p>, +   </div>, +   <button type="submit">Disconnect</button>	, +   <input type="hidden" name="_method" value="delete" />, +</form>]]></programlisting>, +      , +      , +      <para>When this form is submitted, <classname>ConnectController</classname> will call the <methodname>disconnect()</methodname> method on the <interfacename>ServiceProvider</interfacename> implementation to remove the connection.</para>, +    <para>In the course of creating a connection with a service provider, you may want to interject additional functionality into the OAuth flow. For instance, perhaps you'd like to automatically post a tweet to a user's Twitter timeline immediately upon creating the connection.</para>, +    , +    <para><classname>ConnectController</classname> may be configured with one or more connection interceptors that it will call at points in the OAuth flow. These interceptors are defined by the <interfacename>ConnectInterceptor</interfacename> interface:</para>, +    , +    <programlisting><![CDATA[public interface ConnectInterceptor<S> {, +   void preConnect(ServiceProvider<S> provider, WebRequest request);, +   void postConnect(ServiceProvider<S> provider, WebRequest request);, +}]]></programlisting>, +, +    <para>The <methodname>preConnect()</methodname> method will be called by <classname>ConnectController</classname> just before redirecting the browser to the provider's authorization page. <methodname>postConnect()</methodname> will be called immediately after a connection has been established between the member account and the provider profile.</para>, +    , +    <para>For example, suppose that after a connection is made, you want to immediately tweet that connection to the user's Twitter timeline. To accomplish that, you might write the following connection interceptor:</para>, +    , +    <programlisting><![CDATA[package org.springframework.social.samples.twitter;]
[+++ b/gradle.properties, +version=1.1.0.BUILD-SNAPSHOT]
[+++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +/**, + * Interface specifying a basic set of operations for interacting with Facebook., + * Implemented by FacebookTemplate. Not often used directly, but a useful option, + * to enhance testability, as it can easily be mocked or stubbed., + * , + * Many of the methods contained in this interface require an access token from, + * Facebook. When a method's description speaks of the "current user", it is, + * referring to the user for whom the access token has been issued., + * , + * @author Craig Walls, + */, +	/**, +	 * Retrieve the current user's Facebook profile information., +	 * , +	 * @param accessToken, +	 * @return the user's profile information., +	 */, +, +	/**, +	 * Get a list of the user's friends., +	 * , +	 * @param accessToken, +	 * @return a list of <code>String</code>s where each entry is the Facebook, +	 *         ID of one of the user's friends., +	 */, +, +	/**, +	 * Posts a message to the current user's wall., +	 * , +	 * @param accessToken, +	 * @param message, +	 *            The message to post, +	 */, +, +	/**, +	 * Posts a message to the current user's wall along with a link., +	 * , +	 * @param accessToken, +	 * @param message, +	 * @param link, +	 */, +, +, +	/**, +	 * Retrieves the current user's profile picture as an array of bytes., +	 * , +	 * @param accessToken, +	 * @return the user's profile picture in bytes., +	 */, +, +	/**, +	 * Retrieves a user's profile picture as an array of bytes., +	 * , +	 * @param accessToken, +	 * @param profileId, +	 *            the Facebook ID of the user., +	 * @return the user's profile picture in bytes., +	 */, +++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +/**, + * Interface specifying a basic set of operations for interacting with Facebook., + * Implemented by FacebookTemplate. Not often used directly, but a useful option, + * to enhance testability, as it can easily be mocked or stubbed., + * , + * Many of the methods contained in this interface require an access token from, + * Facebook. When a method's description speaks of the "current user", it is, + * referring to the user for whom the access token has been issued., + * , + * @author Craig Walls, + */, +	/**, +	 * Retrieve the current user's Facebook profile information., +	 * , +	 * @param accessToken, +	 * @return the user's profile information., +	 */, +, +	/**, +	 * Get a list of the user's friends., +	 * , +	 * @param accessToken, +	 * @return a list of <code>String</code>s where each entry is the Facebook, +	 *         ID of one of the user's friends., +	 */, +, +	/**, +	 * Posts a message to the current user's wall., +	 * , +	 * @param accessToken, +	 * @param message, +	 *            The message to post, +	 */, +, +	/**, +	 * Posts a message to the current user's wall along with a link., +	 * , +	 * @param accessToken, +	 * @param message, +	 * @param link]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	public String getDisplayName();, +, +	/**, +	 * The public URL of the connected user's profile at the provider's site., +	 * A client application may use this value along with the displayName to generate a link to the user's profile on the provider's system., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getProfileUrl();, +, +	/**, +	 * A link to a image that visualizes this connection., +	 * Should visually distinguish this connection from others with the same provider., +	 * Generally the small/thumbnail version of the connected provider user's profile picture., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getImageUrl();, +	 * Fetch a normalized model of the user's profile on the provider system., +	 * Capable of exposing the user's name, email, and username., +	 * What is actually exposed depends on the provider and scope of this connection., +	 */, +	ServiceProviderUserProfile fetchUserProfile();, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	public String getDisplayName();, +, +	/**, +	 * The public URL of the connected user's profile at the provider's site., +	 * A client application may use this value along with the displayName to generate a link to the user's profile on the provider's system., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getProfileUrl();, +, +	/**, +	 * A link to a image that visualizes this connection., +	 * Should visually distinguish this connection from others with the same provider., +	 * Generally the small/thumbnail version of the connected provider user's profile picture., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getImageUrl();, +	 * Fetch a normalized model of the user's profile on the provider system., +	 * Capable of exposing the user's name, email, and username., +	 * What is actually exposed depends on the provider and scope of this connection., +	 */, +	ServiceProviderUserProfile fetchUserProfile();, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile.]
[+++ b/build.gradle, +, +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$version") { transitive = false }, +      testCompile "com.h2database:h2:$h2Version", +    }, +}, +, +++ b/build.gradle, +, +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$version") { transitive = false }, +      testCompile "com.h2database:h2:$h2Version", +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-config', +++ b/build.gradle, +, +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$version") { transitive = false }, +      testCompile "com.h2database:h2:$h2Version", +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-config', +++ b/spring-social-config/.springBeans, +<?xml version="1.0" encoding="UTF-8"?>, +<beansProjectDescription>, +	<version>1</version>, +	<pluginVersion><![CDATA[2.8.1.201111220115-RELEASE]]></pluginVersion>, +	<configSuffixes>, +		<configSuffix><![CDATA[xml]]></configSuffix>, +	</configSuffixes>, +	<enableImports><![CDATA[false]]></enableImports>, +	<configs>, +		<config>src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml</config>, +	</configs>, +	<configSets>, +	</configSets>, +</beansProjectDescription>, +++ b/build.gradle, +, +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$version") { transitive = false }, +      testCompile "com.h2database:h2:$h2Version", +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-config', +++ b/spring-social-config/.springBeans, +<?xml version="1.0" encoding="UTF-8"?>, +<beansProjectDescription>, +	<version>1</version>, +	<pluginVersion><![CDATA[2.8.1.201111220115-RELEASE]]></pluginVersion>, +	<configSuffixes>, +		<configSuffix><![CDATA[xml]]></configSuffix>, +	</configSuffixes>, +	<enableImports><![CDATA[false]]></enableImports>, +	<configs>, +		<config>src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml</config>, +	</configs>, +	<configSets>, +	</configSets>, +</beansProjectDescription>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,]
[+++ b/build.gradle, +      springSecurityVersion = '3.2.0.RC1', +        compile ("org.springframework.security:spring-security-config:$springSecurityVersion", optional), +++ b/build.gradle, +      springSecurityVersion = '3.2.0.RC1', +        compile ("org.springframework.security:spring-security-config:$springSecurityVersion", optional), +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +++ b/build.gradle, +      springSecurityVersion = '3.2.0.RC1', +        compile ("org.springframework.security:spring-security-config:$springSecurityVersion", optional), +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialAuthenticationConfigurer.java, +package org.springframework.social.security;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.security.authentication.AuthenticationManager;, +import org.springframework.security.authentication.AuthenticationProvider;, +import org.springframework.security.config.annotation.SecurityConfigurerAdapter;, +import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;, +import org.springframework.social.connect.UsersConnectionRepository;, +, +/**, + * Configurer that adds a {@link SocialAuthenticationProvider} to Spring Security's authentication manager., + * @author Craig Walls, + */, +public class SpringSocialAuthenticationConfigurer extends SecurityConfigurerAdapter<AuthenticationManager, AuthenticationManagerBuilder> {, +, +	private UsersConnectionRepository usersConnectionRepository;, +, +	private SocialUserDetailsService socialUsersDetailsService;, +	, +	public SpringSocialAuthenticationConfigurer(UsersConnectionRepository usersConnectionRepository, SocialUserDetailsService socialUsersDetailsService) {, +		this.usersConnectionRepository = usersConnectionRepository;, +		this.socialUsersDetailsService = socialUsersDetailsService;, +	}, +	, +	@Override, +	public void configure(AuthenticationManagerBuilder builder) throws Exception {, +		builder.authenticationProvider(socialAuthenticationProvider());, +	}, +	, +	@Bean, +	public AuthenticationProvider socialAuthenticationProvider() {, +		return new SocialAuthenticationProvider(usersConnectionRepository, socialUsersDetailsService);, +	}, +	, +}, +++ b/build.gradle, +      springSecurityVersion = '3.2.0.RC1', +        compile ("org.springframework.security:spring-security-config:$springSecurityVersion", optional), +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialAuthenticationConfigurer.java, +package org.springframework.social.security;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.security.authentication.AuthenticationManager;, +import org.springframework.security.authentication.AuthenticationProvider;, +import org.springframework.security.config.annotation.SecurityConfigurerAdapter;, +import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;, +import org.springframework.social.connect.UsersConnectionRepository;, +, +/**, + * Configurer that adds a {@link SocialAuthenticationProvider} to Spring Security's authentication manager., + * @author Craig Walls, + */, +public class SpringSocialAuthenticationConfigurer extends SecurityConfigurerAdapter<AuthenticationManager, AuthenticationManagerBuilder> {, +, +	private UsersConnectionRepository usersConnectionRepository;, +, +	private SocialUserDetailsService socialUsersDetailsService;, +	, +	public SpringSocialAuthenticationConfigurer(UsersConnectionRepository usersConnectionRepository, SocialUserDetailsService socialUsersDetailsService) {, +		this.usersConnectionRepository = usersConnectionRepository;, +		this.socialUsersDetailsService = socialUsersDetailsService;, +	}, +	, +	@Override, +	public void configure(AuthenticationManagerBuilder builder) throws Exception {, +		builder.authenticationProvider(socialAuthenticationProvider());, +	}, +	, +	@Bean, +	public AuthenticationProvider socialAuthenticationProvider() {, +		return new SocialAuthenticationProvider(usersConnectionRepository, socialUsersDetailsService);, +	}, +	, +}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialHttpConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.social.connect.DuplicateConnectionException;, +	public String providerPage(@PathVariable String providerId, Model model) {, +		addConnection(request, connectionFactory, connection);, +		addConnection(request, connectionFactory, connection);, +	private void addConnection(WebRequest request, ConnectionFactory<?> connectionFactory, Connection<?> connection) {, +		try {, +			getConnectionRepository().addConnection(connection);	, +			postConnect(connectionFactory, connection, request);, +		} catch (DuplicateConnectionException e) {, +			// TODO: Need to somehow tell provider page that the connection already exists., +			//       A FlashMap mechanism would be handy here, but would require that the developer setup the FlashMapFilter, +			//       Could put in session and remove in providerPage()., +			//       Could pass along in request parameter to provider page; but that would limiting, +		}, +	}]
[+++ b/.gitignore, +samples/**/.springBeans, +++ b/.gitignore, +samples/**/.springBeans, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractOAuth1ServiceProvider.java, +import java.io.Serializable;, +, +import org.scribe.extractors.BaseStringExtractorImpl;, +import org.scribe.extractors.HeaderExtractorImpl;, +import org.scribe.extractors.TokenExtractorImpl;, +import org.scribe.model.OAuthConfig;, +import org.scribe.model.Verb;, +import org.scribe.model.Verifier;, +import org.scribe.oauth.OAuth10aServiceImpl;, +import org.scribe.oauth.OAuthService;, +import org.scribe.services.HMACSha1SignatureService;, +import org.scribe.services.TimestampServiceImpl;, +	public void connect(Serializable accountId, AuthorizedRequestToken requestToken) {, +		OAuthToken accessToken = getAccessToken(requestToken);, +		S serviceOperations = createServiceOperations(accessToken);, +		String providerAccountId = fetchProviderAccountId(serviceOperations);, +		connectionRepository.addConnection(accountId, getName(), accessToken, providerAccountId,, +				buildProviderProfileUrl(providerAccountId, serviceOperations));, +	}, +, +	public void connect(Serializable accountId, String redirectUri, String code) {, +		throw new IllegalStateException(, +				"Connections with redirectUri and code are not supported for an OAuth 1-based service provider");, +	}, +, +, +	// internal helpers, +	protected OAuthService getOAuthService() {, +		return getOAuthService(null);, +	}, +, +	protected OAuthService getOAuthService(String callbackUrl) {, +		OAuthConfig config = new OAuthConfig();, +		config.setRequestTokenEndpoint(parameters.getRequestTokenUrl());, +		config.setAccessTokenEndpoint(parameters.getAccessTokenUrl());, +		config.setAccessTokenVerb(Verb.POST);, +		config.setRequestTokenVerb(Verb.POST);, +		config.setApiKey(parameters.getApiKey());, +		config.setApiSecret(parameters.getSecret());, +		if (callbackUrl != null) {, +			config.setCallback(callbackUrl);, +		}, +		return new OAuth10aServiceImpl(new HMACSha1SignatureService(), new TimestampServiceImpl(),, +				new BaseStringExtractorImpl(), new HeaderExtractorImpl(), new TokenExtractorImpl(),, +				new TokenExtractorImpl(), config);, +	}, +, +	private OAuthToken getAccessToken(AuthorizedRequestToken requestToken) {, +		Token accessToken = getOAuthService().getAccessToken(, +				new Token(requestToken.getValue(), requestToken.getSecret()), new Verifier(requestToken.getVerifier()));, +		return new OAuthToken(accessToken.getToken(), accessToken.getSecret());, +	}, +++ b/.gitignore, +samples/**/.springBeans, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractOAuth1ServiceProvider.java, +import java.io.Serializable;, +, +import org.scribe.extractors.BaseStringExtractorImpl;, +import org.scribe.extractors.HeaderExtractorImpl;, +import org.scribe.extractors.TokenExtractorImpl;, +import org.scribe.model.OAuthConfig;, +import org.scribe.model.Verb;, +import org.scribe.model.Verifier;, +import org.scribe.oauth.OAuth10aServiceImpl;, +import org.scribe.oauth.OAuthService;, +import org.scribe.services.HMACSha1SignatureService;, +import org.scribe.services.TimestampServiceImpl;, +	public void connect(Serializable accountId, AuthorizedRequestToken requestToken) {, +		OAuthToken accessToken = getAccessToken(requestToken);, +		S serviceOperations = createServiceOperations(accessToken);, +		String providerAccountId = fetchProviderAccountId(serviceOperations);, +		connectionRepository.addConnection(accountId, getName(), accessToken, providerAccountId,, +				buildProviderProfileUrl(providerAccountId, serviceOperations));, +	}, +, +	public void connect(Serializable accountId, String redirectUri, String code) {, +		throw new IllegalStateException(, +				"Connections with redirectUri and code are not supported for an OAuth 1-based service provider");, +	}, +, +, +	// internal helpers, +	protected OAuthService getOAuthService() {, +		return getOAuthService(null);, +	}, +, +	protected OAuthService getOAuthService(String callbackUrl) {, +		OAuthConfig config = new OAuthConfig();, +		config.setRequestTokenEndpoint(parameters.getRequestTokenUrl());, +		config.setAccessTokenEndpoint(parameters.getAccessTokenUrl());, +		config.setAccessTokenVerb(Verb.POST);, +		config.setRequestTokenVerb(Verb.POST);, +		config.setApiKey(parameters.getApiKey());, +		config.setApiSecret(parameters.getSecret());, +		if (callbackUrl != null) {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +			if (listBasedInterceptors) {, +				setInterceptorsMethod.invoke(client, interceptors);			, +			} else {, +				setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +	private static Method setInterceptorsMethod;, +	, +	private static boolean listBasedInterceptors = false;, +	, +	static {, +		try {, +			// Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, +			// doesn't initialize the interceptors list., +			setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, +			listBasedInterceptors = true;, +		} catch (NoSuchMethodException e) {, +			try {, +				setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, +			} catch (NoSuchMethodException shouldntHappen) {}, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +			if (listBasedInterceptors) {, +				setInterceptorsMethod.invoke(client, interceptors);			, +			} else {, +				setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +	private static Method setInterceptorsMethod;, +	, +	private static boolean listBasedInterceptors = false;, +	, +	static {, +		try {, +			// Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, +			// doesn't initialize the interceptors list., +			setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, +			listBasedInterceptors = true;, +		} catch (NoSuchMethodException e) {, +			try {, +				setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, +			} catch (NoSuchMethodException shouldntHappen) {}, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +			if (listBasedInterceptors) {, +				setInterceptorsMethod.invoke(client, interceptors);			, +			} else {, +				setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +	private static Method setInterceptorsMethod;, +	, +	private static boolean listBasedInterceptors = false;, +	, +	static {, +		try {, +			// Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, +			// doesn't initialize the interceptors list., +			setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, +			listBasedInterceptors = true;, +		} catch (NoSuchMethodException e) {, +			try {, +				setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, +			} catch (NoSuchMethodException shouldntHappen) {}, +		}, +	}, +]
[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/GowallaProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/GowallaProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/JdbcConnectionRepositoryElementParser.java, +package org.springframework.social.connect.config;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.security.encrypt.NoOpStringEncryptor;, +import org.springframework.social.connect.jdbc.JdbcAccountConnectionRepository;, +import org.w3c.dom.Element;, +, +public class JdbcConnectionRepositoryElementParser implements BeanDefinitionParser {, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(JdbcAccountConnectionRepository.class);, +, +		String jdbcTemplate = element.getAttribute("jdbc-template");, +		beanBuilder.addConstructorArgReference(jdbcTemplate);, +, +		String stringEncryptor = element.getAttribute("string-encryptor");, +		if (stringEncryptor != null && !stringEncryptor.isEmpty()) {, +			beanBuilder.addConstructorArgReference(stringEncryptor);, +		} else {, +			beanBuilder.addConstructorArgValue(NoOpStringEncryptor.getInstance());, +		}, +, +		AbstractBeanDefinition beanDefinition = beanBuilder.getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition("jdbcAccountConnectionRepository", beanDefinition);, +, +		return beanDefinition;, +	}, +}, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/GowallaProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/JdbcConnectionRepositoryElementParser.java, +package org.springframework.social.connect.config;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.security.encrypt.NoOpStringEncryptor;, +import org.springframework.social.connect.jdbc.JdbcAccountConnectionRepository;, +import org.w3c.dom.Element;, +, +public class JdbcConnectionRepositoryElementParser implements BeanDefinitionParser {, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(JdbcAccountConnectionRepository.class);, +, +		String jdbcTemplate = element.getAttribute("jdbc-template");, +		beanBuilder.addConstructorArgReference(jdbcTemplate);, +, +		String stringEncryptor = element.getAttribute("string-encryptor");, +		if (stringEncryptor != null && !stringEncryptor.isEmpty()) {, +			beanBuilder.addConstructorArgReference(stringEncryptor);, +		} else {]
[+++ b/docs/src/info/notice.txt, +   The names "Spring", "Spring Framework", and "Spring Social" must, +++ b/docs/src/info/notice.txt, +   The names "Spring", "Spring Framework", and "Spring Social" must, +++ b/gradle/dist.gradle, +                    metadata(name: 'project.name', value: 'Spring Social'), +++ b/docs/src/info/notice.txt, +   The names "Spring", "Spring Framework", and "Spring Social" must, +++ b/gradle/dist.gradle, +                    metadata(name: 'project.name', value: 'Spring Social'), +++ b/gradle/maven-deployment.gradle, + * This process is customized to add ASL license information., +++ b/docs/src/info/notice.txt, +   The names "Spring", "Spring Framework", and "Spring Social" must, +++ b/gradle/dist.gradle, +                    metadata(name: 'project.name', value: 'Spring Social'), +++ b/gradle/maven-deployment.gradle, + * This process is customized to add ASL license information., +++ /dev/null, +++ b/docs/src/info/notice.txt, +   The names "Spring", "Spring Framework", and "Spring Social" must, +++ b/gradle/dist.gradle, +                    metadata(name: 'project.name', value: 'Spring Social'), +++ b/gradle/maven-deployment.gradle, + * This process is customized to add ASL license information., +++ /dev/null, +++ /dev/null, +++ b/docs/src/info/notice.txt, +   The names "Spring", "Spring Framework", and "Spring Social" must, +++ b/gradle/dist.gradle, +                    metadata(name: 'project.name', value: 'Spring Social'), +++ b/gradle/maven-deployment.gradle, + * This process is customized to add ASL license information., +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +			setInterceptor(client, new OAuth1RequestInterceptor(credentials));, +	private static void setInterceptor(RestTemplate client, ClientHttpRequestInterceptor interceptor) {, +			// Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, +			// doesn't initialize the interceptors list., +			List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +			interceptors.add(interceptor);, +			setInterceptors(client, new ClientHttpRequestInterceptor[] { interceptor });, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +			setInterceptor(client, new OAuth1RequestInterceptor(credentials));, +	private static void setInterceptor(RestTemplate client, ClientHttpRequestInterceptor interceptor) {, +			// Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, +			// doesn't initialize the interceptors list., +			List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +			interceptors.add(interceptor);, +			setInterceptors(client, new ClientHttpRequestInterceptor[] { interceptor });, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +			setInterceptor(client, new OAuth2RequestInterceptor(accessToken, version));, +	private static void setInterceptor(RestTemplate client, ClientHttpRequestInterceptor interceptor) {, +			// Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, +			// doesn't initialize the interceptors list., +			List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +			interceptors.add(interceptor);, +			setInterceptors(client, new ClientHttpRequestInterceptor[] { interceptor });]
[+++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SignInAttempts.java, +package org.springframework.social.security;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.HttpSession;, +, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionKey;, +, +/**, + * , + * @author Craig Walls, + * @author Stefan Fussennegger, + */, +class SignInAttempts {, +	, +	private static final String ATTR_SIGN_IN_ATTEMPT = SignInAttempts.class.getName();, +	, +	private Map<ConnectionKey, ConnectionData> attempts = new HashMap<ConnectionKey, ConnectionData>();, +	, +	/**, +	 * @return always <code>true</code>, +	 */, +	public static boolean add(HttpSession session, ConnectionData data) {, +		SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +		if (signInAttempts == null) {, +			session.setAttribute(ATTR_SIGN_IN_ATTEMPT, signInAttempts = new SignInAttempts()); , +		}, +		return signInAttempts.addAttempt(data);, +	}, +	, +	/**, +	 * @return unmodifiable list, +	 */, +	public static Collection<ConnectionData> get(HttpSession session) {, +		SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +		if(signInAttempts == null) {, +			return Collections.emptyList();, +		} else {, +			return signInAttempts.getAttempts();, +		}, +	}, +, +	public static boolean remove(HttpSession session, ConnectionKey key) {, +		SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +		return signInAttempts != null ? signInAttempts.removeAttempt(key) : false;, +	}, +	, +	public static void clear(HttpSession session) {, +		session.removeAttribute(ATTR_SIGN_IN_ATTEMPT);, +	}, +	, +	private SignInAttempts() {, +	}, +	, +	/**, +	 * @return <code>true</code> if previous connection was replaced, +	 */, +	private boolean addAttempt(ConnectionData data) {, +		return attempts.put(key(data), data) != null;, +	}, +	, +	private boolean removeAttempt(ConnectionKey key) {, +		return attempts.remove(key) != null;, +	}, +	, +	private Collection<ConnectionData> getAttempts() {, +		return attempts.values();, +	}, +	, +	public static ConnectionKey key(ConnectionData data) {, +		return new ConnectionKey(data.getProviderId(), data.getProviderUserId());, +	}, +}, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SignInAttempts.java, +package org.springframework.social.security;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.HttpSession;, +, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionKey;, +]
[+++ b/docs/src/info/changelog.txt, +  * Added new configureRestTemplate() subclassing hook to AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding, +    so that subclasses can configure the RestTemplate without writing that configuration code in the constructor., +  * Added getFormMessageConverter(), getJsonMessageConverter(), and getByteArrayMessageConverter() hooks to , +    AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding for convenient per-converter customization.]
[+++ b/docs/src/info/readme.txt, +Visit the Spring Social home at http://www.springsource.org/spring-social, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */]
[+++ b/pom.xml, +        <org.springframework-version>3.0.5.BUILD-SNAPSHOT</org.springframework-version>, +		<!-- Scribe -->, +		<dependency>, +			<groupId>org.scribe</groupId>, +			<artifactId>scribe</artifactId>, +			<version>1.0.2</version>, +		</dependency>				, +		, +		<repository>, +			<id>self.provided</id>, +			<name>Self-Provided Dependencies</name>, +			<url>file://${project.basedir}/lib</url>, +		</repository>, +++ b/pom.xml, +        <org.springframework-version>3.0.5.BUILD-SNAPSHOT</org.springframework-version>, +		<!-- Scribe -->, +		<dependency>, +			<groupId>org.scribe</groupId>, +			<artifactId>scribe</artifactId>, +			<version>1.0.2</version>, +		</dependency>				, +		, +		<repository>, +			<id>self.provided</id>, +			<name>Self-Provided Dependencies</name>, +			<url>file://${project.basedir}/lib</url>, +		</repository>, +++ b/src/main/java/org/springframework/social/core/AccountNotConnectedException.java, +package org.springframework.social.core;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/pom.xml, +        <org.springframework-version>3.0.5.BUILD-SNAPSHOT</org.springframework-version>, +		<!-- Scribe -->, +		<dependency>, +			<groupId>org.scribe</groupId>, +			<artifactId>scribe</artifactId>, +			<version>1.0.2</version>, +		</dependency>				, +		, +		<repository>, +			<id>self.provided</id>, +			<name>Self-Provided Dependencies</name>, +			<url>file://${project.basedir}/lib</url>, +		</repository>, +++ b/src/main/java/org/springframework/social/core/AccountNotConnectedException.java, +package org.springframework.social.core;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/pom.xml, +        <org.springframework-version>3.0.5.BUILD-SNAPSHOT</org.springframework-version>, +		<!-- Scribe -->, +		<dependency>, +			<groupId>org.scribe</groupId>, +			<artifactId>scribe</artifactId>, +			<version>1.0.2</version>, +		</dependency>				, +		, +		<repository>, +			<id>self.provided</id>, +			<name>Self-Provided Dependencies</name>, +			<url>file://${project.basedir}/lib</url>]
[+++ b/build.gradle, +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth1/StubOAuth1Operations.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.oauth1.AuthorizedRequestToken;, +import org.springframework.social.oauth1.OAuth1Operations;, +import org.springframework.social.oauth1.OAuth1Parameters;, +import org.springframework.social.oauth1.OAuth1Version;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.util.MultiValueMap;, +, +class StubOAuth1Operations implements OAuth1Operations {, +, +	public OAuth1Version getVersion() {, +		return OAuth1Version.CORE_10_REVISION_A;, +	}, +	, +	public OAuthToken fetchRequestToken(String callbackUrl, MultiValueMap<String, String> additionalParameters) {, +		return new OAuthToken("12345", "23456");, +	}, +, +	public String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters) {, +		return "http://springsource.org/oauth/authorize?request_token=" + requestToken;, +	}, +, +	public String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters) {, +		return "http://springsource.org/oauth/authenticate?request_token=" + requestToken;, +	}, +, +	public OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken, MultiValueMap<String, String> additionalParameters) {, +		return new OAuthToken("34567", "45678");, +	}, +	, +}, +++ b/build.gradle, +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth1/StubOAuth1Operations.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.oauth1.AuthorizedRequestToken;, +import org.springframework.social.oauth1.OAuth1Operations;, +import org.springframework.social.oauth1.OAuth1Parameters;, +import org.springframework.social.oauth1.OAuth1Version;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.util.MultiValueMap;, +, +class StubOAuth1Operations implements OAuth1Operations {, +, +	public OAuth1Version getVersion() {, +		return OAuth1Version.CORE_10_REVISION_A;, +	}, +	, +	public OAuthToken fetchRequestToken(String callbackUrl, MultiValueMap<String, String> additionalParameters) {, +		return new OAuthToken("12345", "23456");, +	}, +, +	public String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters) {, +		return "http://springsource.org/oauth/authorize?request_token=" + requestToken;, +	}, +, +	public String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters) {, +		return "http://springsource.org/oauth/authenticate?request_token=" + requestToken;, +	}, +]
[+++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, +    <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures.</para>, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, +    <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures.</para>, +++ b/samples/spring-social-showcase/pom.xml, +		<org.springframework-version>3.1.0.M1</org.springframework-version>, +		<org.springframework.security-version>3.1.0.RC1</org.springframework.security-version>, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, +    <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures.</para>, +++ b/samples/spring-social-showcase/pom.xml, +		<org.springframework-version>3.1.0.M1</org.springframework-version>, +		<org.springframework.security-version>3.1.0.RC1</org.springframework.security-version>, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, +    <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures.</para>, +++ b/samples/spring-social-showcase/pom.xml, +		<org.springframework-version>3.1.0.M1</org.springframework-version>, +		<org.springframework.security-version>3.1.0.RC1</org.springframework.security-version>, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml, +        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd, +        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, +    <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures.</para>, +++ b/samples/spring-social-showcase/pom.xml, +		<org.springframework-version>3.1.0.M1</org.springframework-version>, +		<org.springframework.security-version>3.1.0.RC1</org.springframework.security-version>, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml, +        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd, +        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, +    <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures.</para>, +++ b/samples/spring-social-showcase/pom.xml, +		<org.springframework-version>3.1.0.M1</org.springframework-version>, +		<org.springframework.security-version>3.1.0.RC1</org.springframework.security-version>, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml, +        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd, +        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, +    <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures.</para>, +++ b/samples/spring-social-showcase/pom.xml, +		<org.springframework-version>3.1.0.M1</org.springframework-version>, +		<org.springframework.security-version>3.1.0.RC1</org.springframework.security-version>, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml, +        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd, +        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, +    <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures.</para>, +++ b/samples/spring-social-showcase/pom.xml, +		<org.springframework-version>3.1.0.M1</org.springframework-version>, +		<org.springframework.security-version>3.1.0.RC1</org.springframework.security-version>, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml, +        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd, +        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml]
[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    commonsHttpClientVersion = '3.1', +    jacksonVersion = '1.5.3', +    jodaVersion = '1.6', +    junitVersion = '4.7', +        compile ("commons-codec:commons-codec:1.4") { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +++ /dev/null, +++ b/build.gradle, +    commonsHttpClientVersion = '3.1', +    jacksonVersion = '1.5.3', +    jodaVersion = '1.6', +    junitVersion = '4.7', +        compile ("commons-codec:commons-codec:1.4") { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 15, 2011), +++ /dev/null, +++ b/build.gradle, +    commonsHttpClientVersion = '3.1', +    jacksonVersion = '1.5.3', +    jodaVersion = '1.6', +    junitVersion = '4.7', +        compile ("commons-codec:commons-codec:1.4") { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 15, 2011), +++ b/readme.txt, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse as usual:, +, + File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, + ./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +===============================================================================, +++ /dev/null, +++ b/build.gradle, +    commonsHttpClientVersion = '3.1', +    jacksonVersion = '1.5.3', +    jodaVersion = '1.6', +    junitVersion = '4.7', +        compile ("commons-codec:commons-codec:1.4") { optional = true }, +        testCompile "com.h2database:h2:1.2.143", +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 15, 2011), +++ b/readme.txt, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.io.IOException;, +, +			try {, +				return attemptAuthService(authService, request, response);, +			} catch (SocialAuthenticationRedirectException redirect) {, +				try {, +					response.sendRedirect(redirect.getRedirectUrl());, +				} catch (IOException e) {, +					throw new SocialAuthenticationException("failed to send redirect from SocialAuthenticationRedirectException", e);, +				return null;, +		} else {, +			return null;, +		}, +			// providerUserId already connected to userId, +			// providerUserId already connected to different userId and no multi user allowed, +		Connection<?> connection = token.getConnection();, +		if (userId == null || connection == null) {, +			logger.warn("can't add connection without userId or connection");, +			return;, +		}, +		connection = addConnection(authService, userId, connection.createData());]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +import org.springframework.social.connect.DuplicateConnectionException;, +import org.springframework.social.connect.NoSuchConnectionException;, +	private final String tablePrefix;, +, +	public JdbcConnectionRepository(String userId, JdbcTemplate jdbcTemplate, ConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor, String tablePrefix) {, +		this.tablePrefix = tablePrefix;, +		List<Connection<?>> resultList = jdbcTemplate.query(selectFromUserConnection() + " where userId = ? order by providerId, rank", connectionMapper, userId);, +		return jdbcTemplate.query(selectFromUserConnection() + " where userId = ? and providerId = ? order by rank", connectionMapper, userId, providerId);, +		List<Connection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(selectFromUserConnection() + " where userId = :userId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, +			return jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and providerUserId = ?", connectionMapper, userId, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +			return (Connection<S>) jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and rank = 1", connectionMapper, userId, providerId);, +			int rank = jdbcTemplate.queryForInt("(select ifnull(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +			jdbcTemplate.update("insert into " + tablePrefix + "UserConnection (userId, providerId, providerUserId, rank, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",, +		jdbcTemplate.update("update " + tablePrefix + "UserConnection set displayName = ?, profileUrl = ?, imageUrl = ?, accessToken = ?, secret = ?, refreshToken = ?, expireTime = ? where userId = ? and providerId = ? and providerUserId = ?",, +		jdbcTemplate.update("delete from " + tablePrefix + "UserConnection where userId = ? and providerId = ?", userId, providerId);, +		jdbcTemplate.update("delete from " + tablePrefix + "UserConnection where userId = ? and providerId = ? and providerUserId = ?", userId, connectionKey.getProviderId(), connectionKey.getProviderUserId());		, +	private String selectFromUserConnection() {, +		return "select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from " + tablePrefix + "UserConnection";, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +import org.springframework.social.connect.DuplicateConnectionException;, +import org.springframework.social.connect.NoSuchConnectionException;, +	private final String tablePrefix;, +, +	public JdbcConnectionRepository(String userId, JdbcTemplate jdbcTemplate, ConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor, String tablePrefix) {, +		this.tablePrefix = tablePrefix;, +		List<Connection<?>> resultList = jdbcTemplate.query(selectFromUserConnection() + " where userId = ? order by providerId, rank", connectionMapper, userId);, +		return jdbcTemplate.query(selectFromUserConnection() + " where userId = ? and providerId = ? order by rank", connectionMapper, userId, providerId);, +		List<Connection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(selectFromUserConnection() + " where userId = :userId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, +			return jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and providerUserId = ?", connectionMapper, userId, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +			return (Connection<S>) jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and rank = 1", connectionMapper, userId, providerId);, +			int rank = jdbcTemplate.queryForInt("(select ifnull(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +			jdbcTemplate.update("insert into " + tablePrefix + "UserConnection (userId, providerId, providerUserId, rank, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",, +		jdbcTemplate.update("update " + tablePrefix + "UserConnection set displayName = ?, profileUrl = ?, imageUrl = ?, accessToken = ?, secret = ?, refreshToken = ?, expireTime = ? where userId = ? and providerId = ? and providerUserId = ?",, +		jdbcTemplate.update("delete from " + tablePrefix + "UserConnection where userId = ? and providerId = ?", userId, providerId);, +		jdbcTemplate.update("delete from " + tablePrefix + "UserConnection where userId = ? and providerId = ? and providerUserId = ?", userId, connectionKey.getProviderId(), connectionKey.getProviderUserId());		, +	private String selectFromUserConnection() {, +		return "select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from " + tablePrefix + "UserConnection";, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import org.springframework.social.connect.UsersConnectionRepository;, +	private String tablePrefix = DEFAULT_TABLE_PREFIX;, +, +	/**, +	 * Sets a table name prefix. This will be prefixed to all the table names before queries are executed. Defaults to ""., +	 * This is can be used to qualify the table name with a schema or to distinguish Spring Social tables from other application tables. , +	 * @param tablePrefix the tablePrefix to set, +	 */, +	public void setTablePrefix(String tablePrefix) {, +		this.tablePrefix = tablePrefix;, +	}, +, +			return jdbcTemplate.queryForObject("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +		return new NamedParameterJdbcTemplate(jdbcTemplate).query("select userId from " + tablePrefix + "UserConnection where providerId = :providerId and providerUserId in (:providerUserIds)", parameters,, +		return new JdbcConnectionRepository(userId, jdbcTemplate, connectionFactoryLocator, textEncryptor, tablePrefix);, +	private static final String DEFAULT_TABLE_PREFIX = "";, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +import org.springframework.social.connect.DuplicateConnectionException;, +import org.springframework.social.connect.NoSuchConnectionException;, +	private final String tablePrefix;, +, +	public JdbcConnectionRepository(String userId, JdbcTemplate jdbcTemplate, ConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor, String tablePrefix) {, +		this.tablePrefix = tablePrefix;, +		List<Connection<?>> resultList = jdbcTemplate.query(selectFromUserConnection() + " where userId = ? order by providerId, rank", connectionMapper, userId);, +		return jdbcTemplate.query(selectFromUserConnection() + " where userId = ? and providerId = ? order by rank", connectionMapper, userId, providerId);, +		List<Connection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(selectFromUserConnection() + " where userId = :userId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, +			return jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and providerUserId = ?", connectionMapper, userId, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +			return (Connection<S>) jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and rank = 1", connectionMapper, userId, providerId);, +			int rank = jdbcTemplate.queryForInt("(select ifnull(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +			jdbcTemplate.update("insert into " + tablePrefix + "UserConnection (userId, providerId, providerUserId, rank, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",, +		jdbcTemplate.update("update " + tablePrefix + "UserConnection set displayName = ?, profileUrl = ?, imageUrl = ?, accessToken = ?, secret = ?, refreshToken = ?, expireTime = ? where userId = ? and providerId = ? and providerUserId = ?",, +		jdbcTemplate.update("delete from " + tablePrefix + "UserConnection where userId = ? and providerId = ?", userId, providerId);, +		jdbcTemplate.update("delete from " + tablePrefix + "UserConnection where userId = ? and providerId = ? and providerUserId = ?", userId, connectionKey.getProviderId(), connectionKey.getProviderUserId());		, +	private String selectFromUserConnection() {, +		return "select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from " + tablePrefix + "UserConnection";, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import org.springframework.social.connect.UsersConnectionRepository;, +	private String tablePrefix = DEFAULT_TABLE_PREFIX;, +, +	/**, +	 * Sets a table name prefix. This will be prefixed to all the table names before queries are executed. Defaults to ""., +	 * This is can be used to qualify the table name with a schema or to distinguish Spring Social tables from other application tables. , +	 * @param tablePrefix the tablePrefix to set, +	 */, +	public void setTablePrefix(String tablePrefix) {, +		this.tablePrefix = tablePrefix;, +	}, +, +			return jdbcTemplate.queryForObject("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +		return new NamedParameterJdbcTemplate(jdbcTemplate).query("select userId from " + tablePrefix + "UserConnection where providerId = :providerId and providerUserId in (:providerUserIds)", parameters,, +		return new JdbcConnectionRepository(userId, jdbcTemplate, connectionFactoryLocator, textEncryptor, tablePrefix);, +	private static final String DEFAULT_TABLE_PREFIX = "";, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryPrefixedTableTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]
[+++ b/samples/twitter-connect/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.samples.twitter;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +, +import javax.inject.Inject;, +, +import org.springframework.social.connect.AccountConnection;, +import org.springframework.social.connect.providers.TwitterServiceProvider;, +import org.springframework.social.twitter.TwitterOperations;, +import org.springframework.stereotype.Controller;, +import org.springframework.ui.Model;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RequestMethod;, +, +@Controller, +public class TweetController {, +	private final TwitterServiceProvider twitterProvider;, +, +	@Inject, +	public TweetController(TwitterServiceProvider twitterProvider) {, +		this.twitterProvider = twitterProvider;, +	}, +, +	@RequestMapping(value = "/", method = RequestMethod.GET), +	public String home(Model model) {, +		Collection<AccountConnection> connections = twitterProvider.getConnections();, +		if (connections.size() > 0) {, +			model.addAttribute(connections);, +			model.addAttribute(new TweetForm());, +			return "tweet";, +		}, +		return "redirect:/connect/twitter";, +	}, +, +	@RequestMapping(value = "/tweet", method = RequestMethod.POST), +	public String postTweet(TweetForm tweetForm) {, +		List<String> tweetToScreenNames = new ArrayList<String>();, +		if (tweetForm.isTweetToAll()) {, +			Collection<AccountConnection> connections = twitterProvider.getConnections();, +			for (AccountConnection accountConnection : connections) {, +				tweetToScreenNames.add(accountConnection.getProviderAccountId());, +			}, +		} else {, +			tweetToScreenNames.add(tweetForm.getScreenName());, +		}, +, +		for (String screenName : tweetToScreenNames) {, +			TwitterOperations twitter = twitterProvider.getServiceOperations(screenName);, +			twitter.updateStatus(tweetForm.getMessage());, +		}, +, +		return "redirect:/";, +	}, +}, +++ b/samples/twitter-connect/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.samples.twitter;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +, +import javax.inject.Inject;, +, +import org.springframework.social.connect.AccountConnection;, +import org.springframework.social.connect.providers.TwitterServiceProvider;, +import org.springframework.social.twitter.TwitterOperations;, +import org.springframework.stereotype.Controller;]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import java.util.List;, +, +import org.springframework.social.facebook.types.Checkin;, +, +/**, + * Defines the operations for interacting with a user's Facebook checkins., + * @author Craig Walls, + */, +public interface CheckinOperations {, +	, +	/**, +	 * Retrieves a list of checkins for the authenticated user., +	 * Requires "user_checkins" or "friends_checkins" permission., +	 * @return a list {@link Checkin}s for the user, or an empty list if not available., +	 */, +	List<Checkin> getCheckins();, +, +	/**, +	 * Retrieves a list of checkins for the specified object., +	 * If the object is a user, this returns checkins for places the user has checked into., +	 * If the object is a page, then this returns checkins that the user's friends has made to the location that the page represents., +	 * Requires "user_checkins" or "friends_checkins" permission., +	 * @param objectId either a Facebook user ID or page ID, +	 * @return a list {@link Checkin}s, or an empty list if not available., +	 */, +	List<Checkin> getCheckins(String objectId);, +, +	/**, +	 * Retrieves details for a single checkin., +	 * @param checkinId the checkin ID, +	 * @return a {@link Checkin}, +	 */, +	Checkin getCheckin(String checkinId);, +	, +	/**, +	 * Checks the authenticated user into the specified location., +	 * @param placeId the ID of the place to check into., +	 * @param latitude the latitude of the place., +	 * @param longitude the longitude of the place., +	 * @return the ID of the checkin., +	 */, +	String checkin(String placeId, double latitude, double longitude);, +, +	/**, +	 * Checks the authenticated user into the specified location., +	 * @param placeId the ID of the place to check into., +	 * @param latitude the latitude of the place., +	 * @param longitude the longitude of the place., +	 * @param a message to post along with the checkin., +	 * @param tags a varargs list of user IDs to tag on the checkin., +	 * @return the ID of the checkin., +	 */, +	String checkin(String placeId, double latitude, double longitude, String message, String... tags);, +	, +}, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import java.util.List;, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * If you need that capability, see {@link UsersConnectionRepository}., + * @see UsersConnectionRepository, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * If you need that capability, see {@link UsersConnectionRepository}., + * @see UsersConnectionRepository, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * If you need that capability, see {@link UsersConnectionRepository}., + * @see UsersConnectionRepository, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.util.Set;, +, +/**, + * A data access interface for managing a global store of LocalUser-to-ServiceProviderUser Connections., + * Provides data access operations that apply across multiple local user records., + * Also acts as a factory for a local-user-specific {@link ConnectionRepository}., + * @author Keith Donald, + * @see ConnectionRepository, + */, +public interface UsersConnectionRepository {, +, +	/**, +	 * Find the id of the <i>single</i> local user that has the given {@link Connection}., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign a local application user in using his or her provider account., +	 * Returns null if there is not exactly one local user connected to the provider user., +	 * May never return null if this method implicitly creates a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	 */, +	String findUserIdWithConnection(Connection<?> connection);, +, +	/**, +	 * Find the ids of the local users who are connected to the specific provider user accounts., +	 * @param providerId the provider id, e.g. "facebook", +	 * @param providerUserIds the set of provider user ids e.g. ("125600", "131345", "54321")., +	 * @return the set of local user ids connected to those service provider users, or empty if none., +	 */, +	Set<String> findUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +	, +	/**, +	 * Create a single-user {@link ConnectionRepository} instance for the local user assigned the given id., +	 * All operations on the returned repository instance are relative to the local user., +	 * @param userId the id of the local user account., +	 * @return the ServiceProviderConnectionRepository, exposing a number of operations for accessing and updating the given local user's provider connections., +	 */, +	ConnectionRepository createConnectionRepository(String userId);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * If you need that capability, see {@link UsersConnectionRepository}., + * @see UsersConnectionRepository, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.util.Set;, +, +/**, + * A data access interface for managing a global store of LocalUser-to-ServiceProviderUser Connections., + * Provides data access operations that apply across multiple local user records., + * Also acts as a factory for a local-user-specific {@link ConnectionRepository}., + * @author Keith Donald, + * @see ConnectionRepository, + */, +public interface UsersConnectionRepository {, +, +	/**]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.social.connect.ConnectionRepository;, +				if (!authService.getConnectionCardinality().isAuthenticatePossible()) {, +					return null;, +				}, +					return addConnection(authService, request, userId, (ConnectionData) principal);, +				}, +			}, +		}, +		return null;, +	}, +, +	protected Authentication addConnection(final SocialAuthenticationService<?> authService,, +			final HttpServletRequest request, String userId, final ConnectionData data) {, +, +		HashSet<String> userIdSet = new HashSet<String>();, +		userIdSet.add(data.getProviderUserId());, +		Set<String> connectedUserIds = usersConnectionRepository, +				.findUserIdsConnectedTo(data.getProviderId(), userIdSet);, +		if (connectedUserIds.contains(userId)) {, +			// already connected, +			return null;, +		} else if (!authService.getConnectionCardinality().isMultiUserId() && !connectedUserIds.isEmpty()) {, +			return null;, +		}, +, +		ConnectionRepository repo = usersConnectionRepository.createConnectionRepository(userId);, +, +		if (!authService.getConnectionCardinality().isMultiProviderUserId()) {, +			List<Connection<?>> connections = repo.findConnectionsToProvider(data.getProviderId());, +			if (!connections.isEmpty()) {, +				// TODO maybe throw an exception to allow UI feedback?, +				return null;, +			}, +, +		}, +, +		// add new connection, +		Connection<?> connection = authService.getConnectionFactory().createConnection(data);, +		repo.addConnection(connection);, +		throw new SocialAuthenticationRedirectException(authService.getConnectionAddedRedirectUrl(request, connection));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.social.connect.ConnectionRepository;, +				if (!authService.getConnectionCardinality().isAuthenticatePossible()) {, +					return null;, +				}, +					return addConnection(authService, request, userId, (ConnectionData) principal);, +				}, +			}, +		}, +		return null;, +	}, +, +	protected Authentication addConnection(final SocialAuthenticationService<?> authService,, +			final HttpServletRequest request, String userId, final ConnectionData data) {, +, +		HashSet<String> userIdSet = new HashSet<String>();, +		userIdSet.add(data.getProviderUserId());, +		Set<String> connectedUserIds = usersConnectionRepository, +				.findUserIdsConnectedTo(data.getProviderId(), userIdSet);, +		if (connectedUserIds.contains(userId)) {, +			// already connected, +			return null;, +		} else if (!authService.getConnectionCardinality().isMultiUserId() && !connectedUserIds.isEmpty()) {, +			return null;, +		}, +, +		ConnectionRepository repo = usersConnectionRepository.createConnectionRepository(userId);, +, +		if (!authService.getConnectionCardinality().isMultiProviderUserId()) {, +			List<Connection<?>> connections = repo.findConnectionsToProvider(data.getProviderId());, +			if (!connections.isEmpty()) {, +				// TODO maybe throw an exception to allow UI feedback?, +				return null;, +			}, +, +		}, +, +		// add new connection, +		Connection<?> connection = authService.getConnectionFactory().createConnection(data);, +		repo.addConnection(connection);, +		throw new SocialAuthenticationRedirectException(authService.getConnectionAddedRedirectUrl(request, connection));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/AbstractSocialAuthenticationService.java, +	private AuthenticationMode authenticationMode = null;, +	private ConnectionCardinality connectionCardinality = ConnectionCardinality.ONE_TO_ONE;, +	public ConnectionCardinality getConnectionCardinality() {, +		return connectionCardinality;, +	}, +, +	public void setConnectionCardinality(ConnectionCardinality connectionCardinality) {, +		if (connectionCardinality == null) {, +			throw new NullPointerException("connectionCardinality");, +		}, +		this.connectionCardinality = connectionCardinality;, +	}, +]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigNamespaceHandler.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigNamespaceHandler.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ApiHelper.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigNamespaceHandler.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ApiHelper.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigNamespaceHandler.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ApiHelper.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * Copyright 2013 the original author or authors.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, + * For the former scenario, callers should invoke {@link #addConnection(String,ConnectionFactoryLocator,UsersConnectionRepository)} post-signup to establish a connection between a new user account and the provider account., +	public ProviderSignInAttempt(Connection<?> connection) {, +	public Connection<?> getConnection(ConnectionFactoryLocator connectionFactoryLocator) {, +	void addConnection(String userId, ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {, +		connectionRepository.createConnectionRepository(userId).addConnection(getConnection(connectionFactoryLocator));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, + * For the former scenario, callers should invoke {@link #addConnection(String,ConnectionFactoryLocator,UsersConnectionRepository)} post-signup to establish a connection between a new user account and the provider account., +	public ProviderSignInAttempt(Connection<?> connection) {, +	public Connection<?> getConnection(ConnectionFactoryLocator connectionFactoryLocator) {, +	void addConnection(String userId, ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {, +		connectionRepository.createConnectionRepository(userId).addConnection(getConnection(connectionFactoryLocator));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			ProviderSignInAttempt signInAttempt = new ProviderSignInAttempt(connection);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, + * For the former scenario, callers should invoke {@link #addConnection(String,ConnectionFactoryLocator,UsersConnectionRepository)} post-signup to establish a connection between a new user account and the provider account., +	public ProviderSignInAttempt(Connection<?> connection) {, +	public Connection<?> getConnection(ConnectionFactoryLocator connectionFactoryLocator) {, +	void addConnection(String userId, ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {, +		connectionRepository.createConnectionRepository(userId).addConnection(getConnection(connectionFactoryLocator));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			ProviderSignInAttempt signInAttempt = new ProviderSignInAttempt(connection);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInUtils.java, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.UsersConnectionRepository;, +	private ConnectionFactoryLocator connectionFactoryLocator;, +	private UsersConnectionRepository connectionRepository;, +, +	public ProviderSignInUtils( ConnectionFactoryLocator connectionFactoryLocator,UsersConnectionRepository connectionRepository) {, +		this(new HttpSessionSessionStrategy(),connectionFactoryLocator,connectionRepository);, +	public ProviderSignInUtils(SessionStrategy sessionStrategy,ConnectionFactoryLocator connectionFactoryLocator,UsersConnectionRepository connectionRepository) {, +		this.connectionFactoryLocator = connectionFactoryLocator;, +		this.connectionRepository = connectionRepository;, +		ProviderSignInAttempt signInAttempt = getProviderUserSignInAttempt(request);, +		return signInAttempt != null ? signInAttempt.getConnection(connectionFactoryLocator) : null;, +			signInAttempt.addConnection(userId,connectionFactoryLocator,connectionRepository);, +	private ProviderSignInAttempt getProviderUserSignInAttempt(RequestAttributes request) {, +		return (ProviderSignInAttempt)sessionStrategy.getAttribute(request, ProviderSignInAttempt.SESSION_ATTRIBUTE);]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +	private final OAuth1Operations oauth1Operations;, +	, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +	private final OAuth1Operations oauth1Operations;, +	, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +	private final OAuth1Operations oauth1Operations;, +	, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +	private final OAuth1Operations oauth1Operations;, +	, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/OAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +	 * The service interface for invoking OAuth1 operations against this provider., +	 */, +	OAuth1Operations getOAuth1Operations();, +	, +	/**, +	 * @param accessToken the access token returned from {@link OAuth1Operations#exchangeForAccessToken(AuthorizedRequestToken)}., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +	private final OAuth1Operations oauth1Operations;, +	, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/OAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +	 * The service interface for invoking OAuth1 operations against this provider., +	 */, +	OAuth1Operations getOAuth1Operations();, +	, +	/**, +	 * @param accessToken the access token returned from {@link OAuth1Operations#exchangeForAccessToken(AuthorizedRequestToken)}., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +	private final OAuth1Operations oauth1Operations;, +	, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {]
[+++ b/build.gradle, +    springVersion = '3.1.0.M2', +++ b/build.gradle, +    springVersion = '3.1.0.M2', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release (September 8, 2011), +===============================================, +  * OAuth-encode consumer/token secrets when creating an OAuth 1 signature key (SOCIAL-248)., +  * Handle signature differences between Spring 3.1M2 and Spring 3.1RC1 RestTemplate.setInterceptors() , +    (SOCIAL-247)., +++ b/build.gradle, +    springVersion = '3.1.0.M2', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release (September 8, 2011), +===============================================, +  * OAuth-encode consumer/token secrets when creating an OAuth 1 signature key (SOCIAL-248)., +  * Handle signature differences between Spring 3.1M2 and Spring 3.1RC1 RestTemplate.setInterceptors() , +    (SOCIAL-247)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import java.lang.reflect.Method;, +import java.util.List;, +			setInterceptors(client, interceptors);, +	/*, +	 * Sets interceptors on a Spring 3.1 RestTemplate. , +	 * Handles the differences between 3.1M2 and 3.1RC1 setInterceptors() method signatures., +	 * To be removed when Spring 3.1RC1 is released. , +	 */, +	private static void setInterceptors(RestTemplate client, LinkedList<ClientHttpRequestInterceptor> interceptors) {, +		try {, +			Method method = RestTemplate.class.getMethod("setInterceptors", List.class);, +			method.invoke(client, interceptors);, +		} catch (NoSuchMethodException e) {, +			setInterceptors(client, interceptors.toArray(new ClientHttpRequestInterceptor[0]));, +		} catch (Exception shouldntHappen) {}, +	}, +	, +	private static void setInterceptors(RestTemplate client, ClientHttpRequestInterceptor[] interceptors) {, +		try {, +			Method method = RestTemplate.class.getMethod("setInterceptors", interceptors.getClass());, +			method.invoke(client, new Object[] {interceptors});, +		} catch (Exception shouldntHappen) {}, +	}, +	, +	, +++ b/build.gradle, +    springVersion = '3.1.0.M2', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release (September 8, 2011), +===============================================, +  * OAuth-encode consumer/token secrets when creating an OAuth 1 signature key (SOCIAL-248)., +  * Handle signature differences between Spring 3.1M2 and Spring 3.1RC1 RestTemplate.setInterceptors() , +    (SOCIAL-247)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import java.lang.reflect.Method;, +import java.util.List;, +			setInterceptors(client, interceptors);, +	/*, +	 * Sets interceptors on a Spring 3.1 RestTemplate. , +	 * Handles the differences between 3.1M2 and 3.1RC1 setInterceptors() method signatures., +	 * To be removed when Spring 3.1RC1 is released. , +	 */, +	private static void setInterceptors(RestTemplate client, LinkedList<ClientHttpRequestInterceptor> interceptors) {, +		try {, +			Method method = RestTemplate.class.getMethod("setInterceptors", List.class);, +			method.invoke(client, interceptors);, +		} catch (NoSuchMethodException e) {, +			setInterceptors(client, interceptors.toArray(new ClientHttpRequestInterceptor[0]));, +		} catch (Exception shouldntHappen) {}, +	}, +	, +	private static void setInterceptors(RestTemplate client, ClientHttpRequestInterceptor[] interceptors) {, +		try {, +			Method method = RestTemplate.class.getMethod("setInterceptors", interceptors.getClass());, +			method.invoke(client, new Object[] {interceptors});, +		} catch (Exception shouldntHappen) {}, +	}, +	, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import java.lang.reflect.Method;, +import java.util.List;, +			setInterceptors(client, interceptors);, +	/*, +	 * Sets interceptors on a Spring 3.1 RestTemplate. , +	 * Handles the differences between 3.1M2 and 3.1RC1 setInterceptors() method signatures., +	 * To be removed when Spring 3.1RC1 is released. , +	 */, +	private static void setInterceptors(RestTemplate client, LinkedList<ClientHttpRequestInterceptor> interceptors) {, +		try {, +			Method method = RestTemplate.class.getMethod("setInterceptors", List.class);, +			method.invoke(client, interceptors);, +		} catch (NoSuchMethodException e) {, +			setInterceptors(client, interceptors.toArray(new ClientHttpRequestInterceptor[0]));, +		} catch (Exception shouldntHappen) {}, +	}, +	, +	private static void setInterceptors(RestTemplate client, ClientHttpRequestInterceptor[] interceptors) {, +		try {, +			Method method = RestTemplate.class.getMethod("setInterceptors", interceptors.getClass());, +			method.invoke(client, new Object[] {interceptors});]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + *        .apply(new SpringSocialHttpConfigurer());]
[+++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.io.IOException;, +import java.net.URI;, +import java.util.List;, +import java.util.Map;, +, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpEntityEnclosingRequest;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.protocol.HTTP;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.AbstractBufferingClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * {@link org.springframework.http.client.ClientHttpRequest} implementation that uses, + * Apache HTTPComponents HttpClient to execute requests., + *, + * <p>Created via the {@link HttpComponentsClientHttpRequestFactory}., + *, + * @author Oleg Kalnichevski, + * @author Arjen Poutsma, + * @author Roy Clarkson, + * @since 3.0, + * @see HttpComponentsClientHttpRequestFactory#createRequest(URI, HttpMethod), + */, +final class HttpComponentsClientHttpRequest extends AbstractBufferingClientHttpRequest {, +, +	private final HttpClient httpClient;, +, +	private final HttpUriRequest httpRequest;, +, +	public HttpComponentsClientHttpRequest(HttpClient httpClient, HttpUriRequest httpRequest) {, +		this.httpClient = httpClient;, +		this.httpRequest = httpRequest;, +	}, +, +	public HttpMethod getMethod() {, +		return HttpMethod.valueOf(httpRequest.getMethod());, +	}, +, +	public URI getURI() {, +		return httpRequest.getURI();, +	}, +]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +OAuth2Parameters params = new OAuth2Parameters();, +params.setCallbackUrl("https://my-callback-url");, +String authorizeUrl = oauthOperations.buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, params);, +, +// upon receiving the callback from the provider:, +AccessGrant accessGrant = oauthOperations.exchangeForAccess(authorizationCode, "https://my-callback-url");, +OAuth2Parameters params = new OAuth2Parameters();, +params.setCallbackUrl("https://my-callback-url");, +String authorizeUrl = oauthOperations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, params);, +, +// upon receiving the callback from the provider:, +String requestToken = oauthOperations.fetchRequestToken("https://my-callback-url");, +, +// upon receiving the callback from the provider:, +, +]
[+++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +        dependencyManagement {, +            springIoTestRuntime {, +                imports {, +                    mavenBom "io.spring.platform:platform-bom:${platformVersion}", +                }, +            }, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +        dependencyManagement {, +            springIoTestRuntime {, +                imports {, +                    mavenBom "io.spring.platform:platform-bom:${platformVersion}", +                }, +            }, +++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(512) not null,, +    secret varchar(512),, +    refreshToken varchar(512),, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, +    Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils#doPostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils#doPostSignUp()` to complete the connection:, +        ProviderSignInUtils.doPostSignUp(account.getUsername(), request);, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +        dependencyManagement {, +            springIoTestRuntime {, +                imports {, +                    mavenBom "io.spring.platform:platform-bom:${platformVersion}", +                }, +            }, +++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(512) not null,, +    secret varchar(512),, +    refreshToken varchar(512),, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, +    Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils#doPostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils#doPostSignUp()` to complete the connection:, +        ProviderSignInUtils.doPostSignUp(account.getUsername(), request);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);, +, +	private final String id;, +	public UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, +		this.id = id;, +		this.name = name;, +		this.firstName = firstName;, +		this.lastName = lastName;, +		this.email = email;, +		this.username = username;, +	}, +, +	/**, +	 * The user's id in the provider, +	 * May be null if not exposed/supported by the provider., +	 * @return the user's id in the provider, +	 */, +	public String getId() {, +		return id;, +	}, +, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), +        dependencyManagement {, +            springIoTestRuntime {, +                imports {, +                    mavenBom "io.spring.platform:platform-bom:${platformVersion}", +                }, +            }, +++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(512) not null,, +    secret varchar(512),, +    refreshToken varchar(512),, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, +    Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils#doPostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils#doPostSignUp()` to complete the connection:, +        ProviderSignInUtils.doPostSignUp(account.getUsername(), request);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);, +, +	private final String id;, +	public UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, +		this.id = id;, +		this.name = name;]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, +  <section id="facebook-template">, +    <title><classname>FacebookTemplate</classname></title>, +    <para></para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, +  <section id="facebook-template">, +    <title><classname>FacebookTemplate</classname></title>, +    <para></para>, +++ /dev/null, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, +  <section id="facebook-template">, +    <title><classname>FacebookTemplate</classname></title>, +    <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, +  <section id="gowalla-template">, +    <title><classname>GowallaTemplate</classname></title>, +    <para></para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, +  <section id="facebook-template">, +    <title><classname>FacebookTemplate</classname></title>, +    <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, +  <section id="gowalla-template">, +    <title><classname>GowallaTemplate</classname></title>, +    <para></para>, +++ b/docs/src/reference/docbook/index.xml, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, +  <section id="facebook-template">, +    <title><classname>FacebookTemplate</classname></title>, +    <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, +  <section id="gowalla-template">, +    <title><classname>GowallaTemplate</classname></title>, +    <para></para>, +++ b/docs/src/reference/docbook/index.xml, +++ b/docs/src/reference/docbook/linkedin.xml, +  <section id="linkedin-template">, +    <title><classname>LinkedInTemplate</classname></title>, +    <para></para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, +  <section id="facebook-template">, +    <title><classname>FacebookTemplate</classname></title>, +    <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, +  <section id="gowalla-template">, +    <title><classname>GowallaTemplate</classname></title>, +    <para></para>, +++ b/docs/src/reference/docbook/index.xml, +++ b/docs/src/reference/docbook/linkedin.xml, +  <section id="linkedin-template">, +    <title><classname>LinkedInTemplate</classname></title>, +    <para></para>, +++ b/docs/src/reference/docbook/tripit.xml, +  <section id="tripit-template">, +    <title><classname>TripItTemplate</classname></title>, +    <para></para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, +  <section id="facebook-template">, +    <title><classname>FacebookTemplate</classname></title>, +    <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, +  <section id="gowalla-template">, +    <title><classname>GowallaTemplate</classname></title>, +    <para></para>, +++ b/docs/src/reference/docbook/index.xml, +++ b/docs/src/reference/docbook/linkedin.xml, +  <section id="linkedin-template">, +    <title><classname>LinkedInTemplate</classname></title>, +    <para></para>, +++ b/docs/src/reference/docbook/tripit.xml, +  <section id="tripit-template">, +    <title><classname>TripItTemplate</classname></title>, +    <para></para>, +++ b/docs/src/reference/docbook/twitter.xml, +  <section id="twitter-template">, +    <title><classname>TwitterTemplate</classname></title>, +    <para></para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, +  <section id="facebook-template">, +    <title><classname>FacebookTemplate</classname></title>, +    <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, +  <section id="gowalla-template">, +    <title><classname>GowallaTemplate</classname></title>, +    <para></para>]
[+++ b/build.gradle, +project("spring-social-autoconfigure") {, +    description = "Spring Social Boot Auto-Configuration", +    dependencies {, +      compile project(":spring-social-config"), +      compile project(":spring-social-core"), +      compile project(":spring-social-web"), +      compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"), +    }, +}, +, +++ b/build.gradle, +project("spring-social-autoconfigure") {, +    description = "Spring Social Boot Auto-Configuration", +    dependencies {, +      compile project(":spring-social-config"), +      compile project(":spring-social-core"), +      compile project(":spring-social-web"), +      compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"), +    }, +}, +, +++ b/gradle.properties, +springBootVersion=2.0.0.M6, +++ b/build.gradle, +project("spring-social-autoconfigure") {, +    description = "Spring Social Boot Auto-Configuration", +    dependencies {, +      compile project(":spring-social-config"), +      compile project(":spring-social-core"), +      compile project(":spring-social-web"), +      compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"), +    }, +}, +, +++ b/gradle.properties, +springBootVersion=2.0.0.M6, +++ b/settings.gradle, +include 'spring-social-autoconfigure', +++ b/build.gradle, +project("spring-social-autoconfigure") {, +    description = "Spring Social Boot Auto-Configuration", +    dependencies {, +      compile project(":spring-social-config"), +      compile project(":spring-social-core"), +      compile project(":spring-social-web"), +      compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"), +    }, +}, +, +++ b/gradle.properties, +springBootVersion=2.0.0.M6, +++ b/settings.gradle, +include 'spring-social-autoconfigure', +++ b/spring-social-autoconfigure/src/main/java/org/springframework/social/autoconfigure/SocialAutoConfigurerAdapter.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, + package org.springframework.social.autoconfigure;, +, +import org.springframework.core.env.Environment;, +import org.springframework.social.config.annotation.ConnectionFactoryConfigurer;, +import org.springframework.social.config.annotation.SocialConfigurerAdapter;, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Base class for auto-configured {@link SocialConfigurerAdapter}s., + *, + * @author Craig Walls, + * @author Phillip Webb, + * @since 1.4.0, + */, +public abstract class SocialAutoConfigurerAdapter extends SocialConfigurerAdapter {, +, +	@Override, +	public void addConnectionFactories(ConnectionFactoryConfigurer configurer,, +			Environment environment) {, +		configurer.addConnectionFactory(createConnectionFactory());, +	}, +, +	protected abstract ConnectionFactory<?> createConnectionFactory();, +, +}, +++ b/build.gradle, +project("spring-social-autoconfigure") {, +    description = "Spring Social Boot Auto-Configuration", +    dependencies {]
[+++ b/docs/src/reference/docbook/overview.xml, +          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with Service Providers.</para></listitem>, +++ b/docs/src/reference/docbook/overview.xml, +          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with Service Providers.</para></listitem>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +<img src="${connection.imageUrl}" /> <a href="${connection.profileUrl}">${connection.displayName}</a>]]>			, +			In this case, sync() can be called to synchronize these values if the user's profile is updated., +}]]>	, +			</programlisting>, +			<para>, +				Example usage of a ServiceProviderConnectionFactoryLocator is shown below:, +			</para>, +			<programlisting language="java"><![CDATA[, +// generic lookup by providerId, +ServiceProviderConnectionFactory<?> connectionFactory = locator.getConnectionFactory("facebook");, +, +// typed lookup by service api type, +ServiceProviderConnectionFactory<FacebookApi> connectionFactory = locator.getConnectionFactory(FacebookApi.class);]]>	, +			This makes things convenient for the user since a connection can simply be restored from its persistent form and does not need to be established again., +				Spring Social provides a JdbcMultiUserServiceProviderConnectionRepository implementation capable of persisting connections to a RDBMS., +				The database schema designed to back this repository is defined in JdbcMultiUserServiceProviderConnectionRepository.sql., +			<para>, +				The example code below demonstrates construction and usage of a JdbcMultiUserServiceProviderConnectionRepository:, +			</para>, +			<programlisting language="java"><![CDATA[, +// JDBC DataSource pointing to the DB where connection data is stored, +DataSource dataSource = ...;, +// locator for factories needed to construct ServiceProviderConnections when restoring from persistent form, +ServiceProviderConnectionFactoryLocator connectionFactoryLocator = ...;, +// encryptor of connection authorization credentials, +TextEncryptor encryptor = ...;, +, +JdbcMultiUserServiceProviderConnectionRepository multiUserRepository =, +    new JdbcMultiUserServiceProviderConnectionRepository(dataSource, connectionFactoryLocator, encryptor);, +, +// create a connection repository for the single-user 'kdonald', +ServiceProviderConnectionRepository repository = multiUserRepository.createConnectionRepository("kdonald");, +, +// find kdonald's primary Facebook connection, +ServiceProviderConnection<FacebookApi> connection = repository.findPrimeryConnectionToServiceApi(FacebookApi.class);]]>, +			</programlisting>]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +++ b/.gitignore, +.classpath, +.project, +.settings, +++ b/pom.xml, +							<header>Spring Mobile</header>, +++ b/.gitignore, +.classpath, +.project, +.settings, +++ b/pom.xml, +							<header>Spring Mobile</header>, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +++ b/pom.xml, +							<header>Spring Mobile</header>, +++ /dev/null, +++ b/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +package org.springframework.social.facebook;, +, +import static java.util.Arrays.*;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.http.MediaType;, +import org.springframework.http.ResponseEntity;, +import org.springframework.http.client.CommonsClientHttpRequestFactory;, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.client.RestTemplate;, +, +public class FacebookTemplate implements FacebookOperations {, +	private RestTemplate restTemplate;, +	, +	public FacebookTemplate() {, +		MappingJacksonHttpMessageConverter jsonMessageConverter = new MappingJacksonHttpMessageConverter();, +		jsonMessageConverter.setSupportedMediaTypes(asList(new MediaType("text", "javascript")) );, +		this.restTemplate = new RestTemplate();, +		restTemplate.setRequestFactory(new CommonsClientHttpRequestFactory());, +		this.restTemplate.getMessageConverters().add(jsonMessageConverter);, +	}, +, +	public FacebookUserInfo getUserInfo(String accessToken) {, +		return restTemplate.getForObject(OBJECT_URL + ACCESS_TOKEN_PARAM, FacebookUserInfo.class, "me", accessToken);, +    }, +, +	public List<String> getFriendIds(String accessToken) {, +		Map<String, List<Map<String, String>>> results = , +			restTemplate.getForObject(CONNECTION_URL + ACCESS_TOKEN_PARAM, Map.class, , +					CURRENT_USER, FRIENDS, accessToken);		, +		List<Map<String, String>> friends = results.get("data");, +		, +		List<String> friendIds = new ArrayList<String>();, +		for (Map<String, String> friendData : friends) {, +	        friendIds.add(friendData.get("id"));, +        }, +	    return friendIds;, +    }, +	, +	public void postToWall(String accessToken, String message) {, +		MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();, +		map.set("message", message);, +		publish(accessToken, CURRENT_USER, FEED, map);, +	}, +	, +	public void postToWall(String accessToken, String message, FacebookLink link) {, +		MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();, +		map.set("link", link.getLink());, +		map.set("name", link.getName());, +		map.set("caption", link.getCaption());, +		map.set("description", link.getDescription());, +		map.set("message", message);, +		publish(accessToken, CURRENT_USER, FEED, map);, +	}, +	, +	public void publish(String accessToken, String object, String connection, MultiValueMap<String, String> data) {, +		MultiValueMap<String, String> requestData = new LinkedMultiValueMap<String, String>(data);, +		requestData.add("access_token", accessToken);, +		restTemplate.postForLocation(CONNECTION_URL, requestData, object, connection);, +	}, +	, +	public byte[] getProfilePicture(String accessToken) {, +		return getProfilePicture(accessToken, "me");, +	}, +, +	public byte[] getProfilePicture(String accessToken, String profileId) {, +		ResponseEntity<byte[]> imageBytes = restTemplate.getForEntity(PROFILE_LARGE_PICTURE_URL, , +				byte[].class, profileId, accessToken);, +		return imageBytes.getBody();, +	}]
[+++ b/gradle.properties, +springSocialVersion=1.0.2.RELEASE, +role=buildmaster]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Get a connection for the current user by its key, which consists of the providerId + providerUserId., +	Connection<?> getConnection(ConnectionKey connectionKey);, +	 * Get a connection between the current user and the given provider user., +	 * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +	 * @throws NoSuchConnectionException if no such connection exists for the current user, +	<A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, +	 * Get the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	<A> Connection<A> getPrimaryConnection(Class<A> apiType);, +, +	/**, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * Semantically equivalent to {@link #getPrimaryConnection(Class)} but returns null if no connection is found instead of throwing an exception., +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, or <code>null</code> if not found, +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Get a connection for the current user by its key, which consists of the providerId + providerUserId., +	Connection<?> getConnection(ConnectionKey connectionKey);, +	 * Get a connection between the current user and the given provider user., +	 * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +	 * @throws NoSuchConnectionException if no such connection exists for the current user, +	<A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, +	 * Get the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	<A> Connection<A> getPrimaryConnection(Class<A> apiType);, +, +	/**, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * Semantically equivalent to {@link #getPrimaryConnection(Class)} but returns null if no connection is found instead of throwing an exception., +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, or <code>null</code> if not found, +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * @see ConnectionRepository#getConnection(ConnectionKey), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Get a connection for the current user by its key, which consists of the providerId + providerUserId., +	Connection<?> getConnection(ConnectionKey connectionKey);, +	 * Get a connection between the current user and the given provider user., +	 * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +	 * @throws NoSuchConnectionException if no such connection exists for the current user, +	<A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, +	 * Get the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	<A> Connection<A> getPrimaryConnection(Class<A> apiType);, +, +	/**, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * Semantically equivalent to {@link #getPrimaryConnection(Class)} but returns null if no connection is found instead of throwing an exception., +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, or <code>null</code> if not found, +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * @see ConnectionRepository#getConnection(ConnectionKey), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NotConnectedException.java, + * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Get a connection for the current user by its key, which consists of the providerId + providerUserId., +	Connection<?> getConnection(ConnectionKey connectionKey);, +	 * Get a connection between the current user and the given provider user., +	 * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +	 * @throws NoSuchConnectionException if no such connection exists for the current user, +	<A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, +	 * Get the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	<A> Connection<A> getPrimaryConnection(Class<A> apiType);, +, +	/**, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * Semantically equivalent to {@link #getPrimaryConnection(Class)} but returns null if no connection is found instead of throwing an exception., +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, or <code>null</code> if not found, +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * @see ConnectionRepository#getConnection(ConnectionKey), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NotConnectedException.java, + * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Connection<?> getConnection(ConnectionKey connectionKey) {, +	public <A> Connection<A> getConnection(Class<A> apiType, String providerUserId) {, +		return (Connection<A>) getConnection(new ConnectionKey(providerId, providerUserId));, +	@SuppressWarnings("unchecked"), +	public <A> Connection<A> getPrimaryConnection(Class<A> apiType) {, +		String providerId = getProviderId(apiType);, +		Connection<A> connection = (Connection<A>) findPrimaryConnection(providerId);, +		if (connection == null) {, +			throw new NotConnectedException(providerId);, +		}, +		return connection;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * This can be used to plug in a different HttpClient to do things like configure custom SSL settings., +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		restTemplate.setRequestFactory(requestFactory);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * This can be used to plug in a different HttpClient to do things like configure custom SSL settings., +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		restTemplate.setRequestFactory(requestFactory);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * This can be used to plug in a different HttpClient to do things like configure custom SSL settings., +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		restTemplate.setRequestFactory(requestFactory);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * This can be used to plug in a different HttpClient to do things like configure custom SSL settings., +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		this.restTemplate.setRequestFactory(requestFactory);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * This can be used to plug in a different HttpClient to do things like configure custom SSL settings., +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		restTemplate.setRequestFactory(requestFactory);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * This can be used to plug in a different HttpClient to do things like configure custom SSL settings., +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		this.restTemplate.setRequestFactory(requestFactory);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +		if (HTTP_COMPONENTS_AVAILABLE) {, +			return HttpComponentsClientRequestFactoryCreator.createRequestFactory(proxyHost, proxyPort);, +	public static ClientHttpRequestFactory bufferRequests(ClientHttpRequestFactory requestFactory) {, +	private static boolean HTTP_COMPONENTS_AVAILABLE = ClassUtils.isPresent("org.apache.http.client.HttpClient", ClientHttpRequestFactory.class.getClassLoader());, +	private static class HttpComponentsClientRequestFactoryCreator {, +		, +		public static ClientHttpRequestFactory createRequestFactory(String proxyHost, int proxyPort) {, +			HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();, +			if (proxyHost != null) {, +				DefaultHttpClient httpClient = new DefaultHttpClient();, +				HttpHost proxy = new HttpHost(proxyHost, proxyPort);, +				httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);, +				requestFactory.setHttpClient(httpClient);, +			}			, +			return requestFactory;			, +		}, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * This can be used to plug in a different HttpClient to do things like configure custom SSL settings., +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		restTemplate.setRequestFactory(requestFactory);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiTemplate.java]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	protected static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	protected static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +	protected static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +		<section id="service-providers-establishing-connections-connection-factory-registry">, +			<title>Registering ServiceProviderConnectionFactory instances</title>, +			<para>, +				As you will see in subsequent sections of this reference guide, Spring Social provides infrastructure for establishing connections to one or more providers in a dynamic, self-service manner., +				For example, one client application may allow users to connect to Facebook, Twitter, and LinkedIn. Another might integrate Github and Pivotal Tracker., +				To make the set of connectable providers easy to manage and locate, Spring Social provides a registry for centralizing connection factory instances:, +			</para>, +			<programlisting language="java"><![CDATA[, +MapServiceProviderConnectionFactoryRegistry registry = new MapServiceProviderConnectionFactoryRegistry();, +registry.addConnectionFactory(new FacebookServiceProviderConnectionFactory());, +registry.addConnectionFactory(new TwitterServiceProviderConnectionFactory());, +registry.addConnectionFactory(new LinkedInServiceProviderConnectionFactory());]]>	, +			</programlisting>, +			<para>, +				This registry implements a locator interface that other objects can use to lookup connection factories dynamically:, +			</para>, +			<programlisting language="java"><![CDATA[, +public interface ServiceProviderConnectionLocator {, +, +    ServiceProviderConnectionFactory<?> getConnectionFactory(String providerId);, +, +    <S> ServiceProviderConnectionFactory<S> getConnectionFactory(Class<S> serviceApiType);, +	, +    Set<String> registeredProviderIds();, +, +}, +]]>	, +			</programlisting>, +		</section>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +		<section id="service-providers-establishing-connections-connection-factory-registry">, +			<title>Registering ServiceProviderConnectionFactory instances</title>, +			<para>, +				As you will see in subsequent sections of this reference guide, Spring Social provides infrastructure for establishing connections to one or more providers in a dynamic, self-service manner., +				For example, one client application may allow users to connect to Facebook, Twitter, and LinkedIn. Another might integrate Github and Pivotal Tracker., +				To make the set of connectable providers easy to manage and locate, Spring Social provides a registry for centralizing connection factory instances:, +			</para>, +			<programlisting language="java"><![CDATA[, +MapServiceProviderConnectionFactoryRegistry registry = new MapServiceProviderConnectionFactoryRegistry();, +registry.addConnectionFactory(new FacebookServiceProviderConnectionFactory());, +registry.addConnectionFactory(new TwitterServiceProviderConnectionFactory());, +registry.addConnectionFactory(new LinkedInServiceProviderConnectionFactory());]]>	, +			</programlisting>, +			<para>, +				This registry implements a locator interface that other objects can use to lookup connection factories dynamically:, +			</para>, +			<programlisting language="java"><![CDATA[, +public interface ServiceProviderConnectionLocator {, +, +    ServiceProviderConnectionFactory<?> getConnectionFactory(String providerId);, +, +    <S> ServiceProviderConnectionFactory<S> getConnectionFactory(Class<S> serviceApiType);, +	, +    Set<String> registeredProviderIds();, +, +}, +]]>	, +			</programlisting>, +		</section>, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.sql, +create table ServiceProviderConnection (localUserId varchar not null,, +					providerId varchar not null,, +					providerUserId varchar,, +					rank int not null,, +					displayName varchar,, +					profileUrl varchar,, +					imageUrl varchar,, +					accessToken varchar not null,					, +					secret varchar,, +					refreshToken varchar,, +					expireTime bigint,, +					primary key (localUserId, providerId, providerUserId));, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +/**, + * A data access interface for managing a global store of LocalUser-to-ServiceProviderUser Connections., + * Provides data access operations that apply across multiple local user records., + * Also acts as a factory for a local-user-specific {@link ServiceProviderConnectionRepository}., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository, + */, +	/**, +	 * Find the id of the <i>single</i> local user who has a {@link ServiceProviderConnection} with the given key., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign the local application user in using his or her provider account., +	 * Returns null if there is not exactly one local user connected to the provider user., +	 * @param connectionKey the key identifying a provider user, +	 */, +	/**, +	 * Find the ids of the local users who are connected to the specific provider user accounts., +	 * @param providerId the provider id, e.g. "facebook", +	 * @param providerUserIds the set of provider user ids e.g. ("125600", "131345", "54321")., +	 * @return the set of local user ids connected to those service provider users, or empty if none., +	 */, +	Set<String> findLocalUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +	/**, +	 * Create a single-user {@link ServiceProviderConnectionRepository} instance for the local user assigned the given id., +	 * @param localUserId the id of the local user account., +	 * @return the ServiceProviderConnectionRepository, exposing a number of operations for accessing and updating the given local user's provider connections., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java]
[+++ b/samples/spring-social-showcase/pom.xml, +			<plugin>, +				<groupId>org.codehaus.mojo</groupId>, +				<artifactId>properties-maven-plugin</artifactId>, +				<version>1.0-alpha-2</version>, +				<executions>, +					<execution>, +						<phase>generate-resources</phase>, +						<goals>, +							<goal>write-active-profile-properties</goal>, +						</goals>, +					<configuration>, +						<!-- Writes properties defined in current active profile(s) to application.properties, which is picked up by PropertyPlaceholderConfigurer in the classpath -->, +						<outputFile>${project.build.outputDirectory}/application.properties</outputFile>, +					</configuration>, +					</execution>, +			 	</executions>, +			</plugin>]
[+++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.json, +{, +	"expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, +	"scope":"read",, +	"username":"cwagon",, +	"expires_in":40735,, +	"access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, +	"refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.json, +{, +	"expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, +	"scope":"read",, +	"username":"cwagon",, +	"expires_in":40735,, +	"access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, +	"refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}, +++ /dev/null, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.json, +{, +	"expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, +	"scope":"read",, +	"username":"cwagon",, +	"expires_in":40735,, +	"access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, +	"refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}, +++ /dev/null, +++ /dev/null, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.json, +{, +	"expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, +	"scope":"read",, +	"username":"cwagon",, +	"expires_in":40735,, +	"access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, +	"refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.json, +{, +	"expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, +	"scope":"read",, +	"username":"cwagon",, +	"expires_in":40735,, +	"access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, +	"refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/comment/CommentTemplateTest.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.comment;, +, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.social.test.client.RequestMatchers.*;, +import static org.springframework.social.test.client.ResponseCreators.*;, +, +import java.util.List;, +, +import org.junit.Test;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.social.facebook.AbstractFacebookApiTest;, +import org.springframework.social.facebook.shared.Reference;, +, +/**, + * @author Craig Walls, + */, +public class CommentTemplateTest extends AbstractFacebookApiTest {, +	, +	@Test, +	public void getComments() {, +		mockServer.expect(requestTo("https://graph.facebook.com/123456/comments")), +			.andExpect(method(GET)), +			.andExpect(header("Authorization", "OAuth someAccessToken")), +			.andRespond(withResponse(new ClassPathResource("comments.json", getClass()), responseHeaders));, +		, +		List<Comment> comments = facebook.commentOperations().getComments("123456");, +		assertEquals(2, comments.size());, +		Comment comment1 = comments.get(0);, +		assertEquals("1533260333", comment1.getFrom().getId());]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	public String getDisplayName();, +, +	/**, +	 * The public URL of the connected user's profile at the provider's site., +	 * A client application may use this value along with the displayName to generate a link to the user's profile on the provider's system., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getProfileUrl();, +, +	/**, +	 * A link to a image that visualizes this connection., +	 * Should visually distinguish this connection from others with the same provider., +	 * Generally the small/thumbnail version of the connected provider user's profile picture., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getImageUrl();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	public String getDisplayName();, +, +	/**, +	 * The public URL of the connected user's profile at the provider's site., +	 * A client application may use this value along with the displayName to generate a link to the user's profile on the provider's system., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getProfileUrl();, +, +	/**, +	 * A link to a image that visualizes this connection., +	 * Should visually distinguish this connection from others with the same provider., +	 * Generally the small/thumbnail version of the connected provider user's profile picture., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getImageUrl();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	public String getDisplayName();, +, +	/**, +	 * The public URL of the connected user's profile at the provider's site., +	 * A client application may use this value along with the displayName to generate a link to the user's profile on the provider's system., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getProfileUrl();, +, +	/**, +	 * A link to a image that visualizes this connection.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.MediaType;, +	// subclassing hooks, +, +	protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> body) {, +		return new OAuthToken(accessToken, secret);, +	}, +, +	private RestTemplate createRestTemplate() {, +		RestTemplate restTemplate = new RestTemplate();, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(1);, +		converters.add(new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				// always read MultiValueMaps as x-www-url-formencoded even if contentType not set properly by provider				, +				return MultiValueMap.class.isAssignableFrom(clazz);, +			}, +		});, +		restTemplate.setMessageConverters(converters);, +		return restTemplate;, +	}, +	, +		return createAccessToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.MediaType;, +	// subclassing hooks, +, +	protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> body) {, +		return new OAuthToken(accessToken, secret);, +	}, +, +	private RestTemplate createRestTemplate() {, +		RestTemplate restTemplate = new RestTemplate();, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(1);, +		converters.add(new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				// always read MultiValueMaps as x-www-url-formencoded even if contentType not set properly by provider				, +				return MultiValueMap.class.isAssignableFrom(clazz);, +			}, +		});, +		restTemplate.setMessageConverters(converters);, +		return restTemplate;, +	}, +	, +		return createAccessToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	private final String scope;, +, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expireTime) {, +		this.scope = scope;, +	 * The refresh token that can be used to renew the access token., +	 * May be null if the provider does not support refresh tokens., +	public String getRefreshToken() {, +		return refreshToken;, +	}, +, +	/**, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.MediaType;, +	// subclassing hooks, +, +	protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> body) {, +		return new OAuthToken(accessToken, secret);, +	}, +, +	private RestTemplate createRestTemplate() {, +		RestTemplate restTemplate = new RestTemplate();, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(1);, +		converters.add(new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				// always read MultiValueMaps as x-www-url-formencoded even if contentType not set properly by provider				, +				return MultiValueMap.class.isAssignableFrom(clazz);, +			}, +		});, +		restTemplate.setMessageConverters(converters);, +		return restTemplate;, +	}, +	, +		return createAccessToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	private final String scope;, +, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expireTime) {, +		this.scope = scope;, +	 * The refresh token that can be used to renew the access token., +	 * May be null if the provider does not support refresh tokens., +	public String getRefreshToken() {, +		return refreshToken;, +	}, +, +	/**, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +import org.springframework.social.support.httpclient.HttpComponentsClientHttpRequestFactory;, +import org.springframework.util.ClassUtils;, +, +/**, + * Chooses a request factory. Picks an Apache HttpComponents HttpClient factory if Apache HttpComponents HttpClient is in the classpath., + * If not, falls back to SimpleClientHttpRequestFactory., + * @author Craig Walls, + */, +public class ClientHttpRequestFactorySelector {, +	, +	public static ClientHttpRequestFactory getRequestFactory() {, +		if (httpComponentsAvailable) {, +			return new HttpComponentsClientHttpRequestFactory();, +		} else {, +			return new SimpleClientHttpRequestFactory();, +		}		, +	}, +	, +	private static boolean httpComponentsAvailable = ClassUtils.isPresent("org.apache.http.client.HttpClient", ClientHttpRequestFactory.class.getClassLoader());, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");]
[+++ b/build.gradle, +        maven { url 'http://repo.spring.io/plugins-release' }, +        maven { url "http://repo.spring.io/libs-snapshot" }, +++ b/build.gradle, +        maven { url 'http://repo.spring.io/plugins-release' }, +        maven { url "http://repo.spring.io/libs-snapshot" }, +++ b/src/reference/docbook/connecting.xml, +				In order to support this through a form in a web browser, you'll need to have Spring's <ulink url="http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html"><classname>HiddenHttpMethodFilter</classname></ulink> configured in your application's web.xml. , +++ b/build.gradle, +        maven { url 'http://repo.spring.io/plugins-release' }, +        maven { url "http://repo.spring.io/libs-snapshot" }, +++ b/src/reference/docbook/connecting.xml, +				In order to support this through a form in a web browser, you'll need to have Spring's <ulink url="http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html"><classname>HiddenHttpMethodFilter</classname></ulink> configured in your application's web.xml. , +++ b/src/reference/docbook/overview.xml, +		<url>http://repo.spring.io/libs-milestone-local</url>, +		<url>http://repo.spring.io/libs-snapshot-local</url>, +						  <entry><ulink url="http://docs.spring.io/spring-social-facebook/docs/1.0.x/reference/html/">Spring Social Facebook</ulink></entry>, +						  <entry><ulink url="http://docs.spring.io/spring-social-twitter/docs/1.0.x/reference/html/">Spring Social Twitter</ulink></entry>, +						  <entry><ulink url="http://docs.spring.io/spring-social-linkedin/docs/1.0.x/reference/html/">Spring Social LinkedIn</ulink></entry>, +						  <entry><ulink url="http://docs.spring.io/spring-social-tripit/docs/1.0.x/reference/html/">Spring Social TripIt</ulink></entry>, +						  <entry><ulink url="http://docs.spring.io/spring-social-github/docs/1.0.x/reference/html/">Spring Social GitHub</ulink></entry>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, +		this.id = id;, +		this.name = name;, +		this.firstName = firstName;, +		this.lastName = lastName;, +		this.email = email;, +		this.username = username;, +	}, +]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +			User user = new SocialUser("foo", "bar", authorities);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +			User user = new SocialUser("foo", "bar", authorities);, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationProviderTest.java, +		final DummyUserDetails userDetails = new DummyUserDetails("user1", "pass", "moderator");, +		Mockito.when(userDetailsService.loadUserByUserId("user1")).thenReturn(userDetails);, +		Mockito.when(userDetailsService.loadUserByUserId("user2")).thenReturn(new DummyUserDetails("user2", "pass", "moderator"));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +			User user = new SocialUser("foo", "bar", authorities);, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationProviderTest.java, +		final DummyUserDetails userDetails = new DummyUserDetails("user1", "pass", "moderator");, +		Mockito.when(userDetailsService.loadUserByUserId("user1")).thenReturn(userDetails);, +		Mockito.when(userDetailsService.loadUserByUserId("user2")).thenReturn(new DummyUserDetails("user2", "pass", "moderator"));, +++ b/spring-social-security/src/test/java/org/springframework/social/security/test/DummyUserDetails.java, +import org.springframework.social.security.SocialUserDetails;, +public class DummyUserDetails implements SocialUserDetails {, +	public String getUserId() {, +		return getUsername();, +	}, +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		} else if (userIds.size() == 1){, +		} else {, +			return redirect(signInUrl + "?signInError=multiple");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +		super("Insufficient permission for this operation.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +		super("Insufficient permission for this operation.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;]
[+++ b/build.gradle, +    ext.jacksonVersion          = "2.3.0", +    ext.springVersion           = "4.0.2.RELEASE", +    ext.springSecurityVersion   = "3.2.0.RELEASE", +++ b/build.gradle, +    ext.jacksonVersion          = "2.3.0", +    ext.springVersion           = "4.0.2.RELEASE", +    ext.springSecurityVersion   = "3.2.0.RELEASE", +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	public void setAlwaysUsePostLoginUrl(boolean alwaysUsePostLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setAlwaysUseDefaultTargetUrl(alwaysUsePostLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set alwaysUsePostLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +	, +++ b/build.gradle, +    ext.jacksonVersion          = "2.3.0", +    ext.springVersion           = "4.0.2.RELEASE", +    ext.springSecurityVersion   = "3.2.0.RELEASE", +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	public void setAlwaysUsePostLoginUrl(boolean alwaysUsePostLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setAlwaysUseDefaultTargetUrl(alwaysUsePostLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set alwaysUsePostLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +	, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	private String postLoginUrl;, +	, +	private String postFailureUrl;, +, +	private boolean alwaysUsePostLoginUrl = false;, +, +		, +		if (postLoginUrl != null) {, +			filter.setPostLoginUrl(postLoginUrl);, +			filter.setAlwaysUsePostLoginUrl(alwaysUsePostLoginUrl);, +		}, +		, +		if (postFailureUrl != null) {, +			filter.setPostFailureUrl(postFailureUrl);, +		}, +		, +	/**, +	 * Sets the URL to land on after a successful login., +	 */, +	public SpringSocialConfigurer postLoginUrl(String postLoginUrl) {, +		this.postLoginUrl = postLoginUrl;, +		return this;, +	}, +	, +	/**, +	 * If true, always redirect to postLoginUrl, even if a pre-signin target is in the request cache., +	 */, +	public SpringSocialConfigurer alwaysUsePostLoginUrl(boolean alwaysUsePostLoginUrl) {, +		this.alwaysUsePostLoginUrl = alwaysUsePostLoginUrl;, +		return this;, +	}, +	, +	/**, +	 * Sets the URL to land on after a failed login., +	 */, +	public SpringSocialConfigurer postFailureUrl(String postFailureUrl) {, +		this.postFailureUrl = postFailureUrl;, +		return this;, +	}, +	]
[+++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitter.getUserProfile();]]>, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +String profileId = twitter.getProfileId();]]>, +				To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:, +twitter.updateStatus("Spring Social is awesome!")]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.retweet(tweetId);]]>, +				<classname>TwitterTemplate</classname> also supports reading of tweets from one of the available Twitter timelines. , +				To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline</methodname> method:, +List<Tweet> tweets = twitter.getPublicTimeline();]]>, +List<Tweet> tweets = twitter.getHomeTimeline();]]>, +List<Tweet> tweets = twitter.getFriendsTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline("rclarkson");]]>, +List<Tweet> tweets = twitter.getMentions();]]>, +				<classname>TwitterTemplate</classname> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method., +SearchResults results = twitter.search("#spring");]]>, +SearchResults results = twitter.search("#spring", 2, 10);]]>, +SearchResults results = twitter.search("#spring", 2, 10, 145962, 210112);]]>, +				<classname>TwitterTemplate</classname>'s <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:, +twitter.sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>, +				<classname>TwitterTemplate</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:, +List<DirectMessage> twitter.getDirectMessagesReceived();]]>, +++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitter.getUserProfile();]]>, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +String profileId = twitter.getProfileId();]]>, +				To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:, +twitter.updateStatus("Spring Social is awesome!")]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.retweet(tweetId);]]>, +				<classname>TwitterTemplate</classname> also supports reading of tweets from one of the available Twitter timelines. , +				To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline</methodname> method:, +List<Tweet> tweets = twitter.getPublicTimeline();]]>, +List<Tweet> tweets = twitter.getHomeTimeline();]]>, +List<Tweet> tweets = twitter.getFriendsTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline("rclarkson");]]>, +List<Tweet> tweets = twitter.getMentions();]]>, +				<classname>TwitterTemplate</classname> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method., +SearchResults results = twitter.search("#spring");]]>, +SearchResults results = twitter.search("#spring", 2, 10);]]>, +SearchResults results = twitter.search("#spring", 2, 10, 145962, 210112);]]>, +				<classname>TwitterTemplate</classname>'s <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:, +twitter.sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>, +				<classname>TwitterTemplate</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:, +List<DirectMessage> twitter.getDirectMessagesReceived();]]>, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequestFactory.java, +		if (ClassUtils.hasConstructor(ThreadSafeClientConnManager.class, new Class<?>[]{SchemeRegistry.class})) {, +++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitter.getUserProfile();]]>, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +String profileId = twitter.getProfileId();]]>, +				To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:, +twitter.updateStatus("Spring Social is awesome!")]]>]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Jan ??, 2011), +==============================================, +For release notes see:, + https://jira.springframework.org/secure/ReleaseNote.jspa?projectId=10481&version=11738, +, +New Features, +   * New connection framework to handle the application side of the "OAuth Dance"., +   * Expanded TwitterOperations interface:, +     * Posting location metadata along with Tweet, +     * Retrieving user, friends, public, and home timelines, +     * Send and receive direct messages, +     * Retrieving a user's full Twitter profile, +   * New social templates (minimal functionality in this release):, +     * Gowalla - Retrieve user's top checkins, +     * GitHub - Retrieve a user's profile data, +   * Small showcase samples, +     * Facebook sample showing how to connect using <fb:login-button>, +     * Facebook sample showing how to connect using OAuth 2 web server profile, +     * Twitter sample showing how to connect with OAuth 1.0a, +     * Gowalla sample showing how to connect using OAuth 2 web server profile, +     * GitHub sample showing how to connect using OAuth 2 web server profile and, +       how to perform a register-then-connect flow, +   * More documentation!, +, +Bug fixes:, +, +    , +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Jan ??, 2011), +==============================================, +For release notes see:, + https://jira.springframework.org/secure/ReleaseNote.jspa?projectId=10481&version=11738, +, +New Features, +   * New connection framework to handle the application side of the "OAuth Dance"., +   * Expanded TwitterOperations interface:, +     * Posting location metadata along with Tweet, +     * Retrieving user, friends, public, and home timelines, +     * Send and receive direct messages, +     * Retrieving a user's full Twitter profile, +   * New social templates (minimal functionality in this release):, +     * Gowalla - Retrieve user's top checkins, +     * GitHub - Retrieve a user's profile data, +   * Small showcase samples, +     * Facebook sample showing how to connect using <fb:login-button>, +     * Facebook sample showing how to connect using OAuth 2 web server profile, +     * Twitter sample showing how to connect with OAuth 1.0a, +     * Gowalla sample showing how to connect using OAuth 2 web server profile, +     * GitHub sample showing how to connect using OAuth 2 web server profile and, +       how to perform a register-then-connect flow, +   * More documentation!, +, +Bug fixes:, +, +    , +, +++ b/docs/src/reference/docbook/connecting.xml, +<bean class="org.springframework.social.web.connect.ConnectController">, +import org.springframework.social.provider.ServiceProvider;, +import org.springframework.social.web.connect.ConnectInterceptor;, +    <bean class="org.springframework.social.web.connect.ConnectController">, +    <programlisting><![CDATA[<bean class="org.springframework.social.facebook.connect.FacebookConnectController">, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Jan ??, 2011), +==============================================, +For release notes see:, + https://jira.springframework.org/secure/ReleaseNote.jspa?projectId=10481&version=11738, +, +New Features, +   * New connection framework to handle the application side of the "OAuth Dance"., +   * Expanded TwitterOperations interface:, +     * Posting location metadata along with Tweet, +     * Retrieving user, friends, public, and home timelines, +     * Send and receive direct messages, +     * Retrieving a user's full Twitter profile, +   * New social templates (minimal functionality in this release):, +     * Gowalla - Retrieve user's top checkins, +     * GitHub - Retrieve a user's profile data, +   * Small showcase samples, +     * Facebook sample showing how to connect using <fb:login-button>, +     * Facebook sample showing how to connect using OAuth 2 web server profile, +     * Twitter sample showing how to connect with OAuth 1.0a, +     * Gowalla sample showing how to connect using OAuth 2 web server profile, +     * GitHub sample showing how to connect using OAuth 2 web server profile and, +       how to perform a register-then-connect flow, +   * More documentation!, +, +Bug fixes:, +, +    , +, +++ b/docs/src/reference/docbook/connecting.xml, +<bean class="org.springframework.social.web.connect.ConnectController">, +import org.springframework.social.provider.ServiceProvider;, +import org.springframework.social.web.connect.ConnectInterceptor;, +    <bean class="org.springframework.social.web.connect.ConnectController">, +    <programlisting><![CDATA[<bean class="org.springframework.social.facebook.connect.FacebookConnectController">, +++ b/docs/src/reference/docbook/serviceprovider.xml]
[+++ b/pom.xml, +		<!-- For resolving Scribe dependency; temporary awaiting its arrival in central -->, +		<repository>, +			<id>org.springframework.maven.external</id>, +			<name>Spring Maven External Libraries Repository</name>, +			<url>http://maven.springframework.org/external</url>, +			<snapshots><enabled>false</enabled></snapshots>			, +		</repository>	]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import org.springframework.social.twitter.support.json.DirectMessageList;, +		return getLowLevelTwitterApi().fetchObject("direct_messages.json", DirectMessageList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("direct_messages/sent.json", DirectMessageList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import org.springframework.social.twitter.support.json.DirectMessageList;, +		return getLowLevelTwitterApi().fetchObject("direct_messages.json", DirectMessageList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("direct_messages/sent.json", DirectMessageList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +import org.springframework.social.twitter.support.json.LongIdsList;, +import org.springframework.social.twitter.support.json.LongList;, +import org.springframework.social.twitter.support.json.TwitterProfileList;, +		return getLowLevelTwitterApi().fetchObject("statuses/friends.json", TwitterProfileList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/friends.json", TwitterProfileList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("friends/ids.json", LongList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("friends/ids.json", LongList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/followers.json", TwitterProfileList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/followers.json", TwitterProfileList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("followers/ids.json", LongList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("followers/ids.json", LongList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("friendships/incoming.json", LongIdsList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("friendships/outgoing.json", LongIdsList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import org.springframework.social.twitter.support.json.DirectMessageList;, +		return getLowLevelTwitterApi().fetchObject("direct_messages.json", DirectMessageList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("direct_messages/sent.json", DirectMessageList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +import org.springframework.social.twitter.support.json.LongIdsList;, +import org.springframework.social.twitter.support.json.LongList;, +import org.springframework.social.twitter.support.json.TwitterProfileList;, +		return getLowLevelTwitterApi().fetchObject("statuses/friends.json", TwitterProfileList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/friends.json", TwitterProfileList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("friends/ids.json", LongList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("friends/ids.json", LongList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/followers.json", TwitterProfileList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/followers.json", TwitterProfileList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("followers/ids.json", LongList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("followers/ids.json", LongList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("friendships/incoming.json", LongIdsList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("friendships/outgoing.json", LongIdsList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +import org.springframework.social.twitter.support.json.TwitterProfileUsersList;, +import org.springframework.social.twitter.support.json.UserListList;, +		return getLowLevelTwitterApi().fetchObject(userId + "/lists.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/lists.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(userId + "/lists/" + listId + ".json", UserList.class);, +		return getLowLevelTwitterApi().fetchObject(screenName + "/lists/" + listSlug + ".json", UserList.class);, +		return getLowLevelTwitterApi().publish(userApi.getProfileId() + "/lists.json", request, UserList.class);, +		return getLowLevelTwitterApi().publish(userApi.getProfileId() + "/lists/" + listId + ".json", request, UserList.class);, +		return getLowLevelTwitterApi().fetchObject(userId + "/" + listId + "/members.json", TwitterProfileUsersList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/" + listSlug + "/members.json", TwitterProfileUsersList.class).getList();, +		return getLowLevelTwitterApi().publish(userApi.getProfileId() + "/" + listId + "/members/create_all.json", request, UserList.class);, +		return getLowLevelTwitterApi().publish(userApi.getProfileId() + "/" + listSlug + "/members/create_all.json", request, UserList.class);, +		return getLowLevelTwitterApi().fetchObject(userId + "/" + listId + "/subscribers.json", TwitterProfileUsersList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/" + listSlug + "/subscribers.json", TwitterProfileUsersList.class).getList();, +		return getLowLevelTwitterApi().publish(ownerId + "/" + listId + "/subscribers.json", data, UserList.class);, +		return getLowLevelTwitterApi().publish(ownerScreenName + "/" + listSlug + "/subscribers.json", data, UserList.class);, +		return getLowLevelTwitterApi().fetchObject(userId + "/lists/memberships.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/lists/memberships.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(userId + "/lists/subscriptions.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/lists/subscriptions.json", UserListList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import org.springframework.social.twitter.support.json.DirectMessageList;, +		return getLowLevelTwitterApi().fetchObject("direct_messages.json", DirectMessageList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("direct_messages/sent.json", DirectMessageList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +import org.springframework.social.twitter.support.json.LongIdsList;, +import org.springframework.social.twitter.support.json.LongList;, +import org.springframework.social.twitter.support.json.TwitterProfileList;, +		return getLowLevelTwitterApi().fetchObject("statuses/friends.json", TwitterProfileList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/friends.json", TwitterProfileList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("friends/ids.json", LongList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("friends/ids.json", LongList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/followers.json", TwitterProfileList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/followers.json", TwitterProfileList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("followers/ids.json", LongList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("followers/ids.json", LongList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("friendships/incoming.json", LongIdsList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("friendships/outgoing.json", LongIdsList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +import org.springframework.social.twitter.support.json.TwitterProfileUsersList;, +import org.springframework.social.twitter.support.json.UserListList;, +		return getLowLevelTwitterApi().fetchObject(userId + "/lists.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/lists.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(userId + "/lists/" + listId + ".json", UserList.class);, +		return getLowLevelTwitterApi().fetchObject(screenName + "/lists/" + listSlug + ".json", UserList.class);, +		return getLowLevelTwitterApi().publish(userApi.getProfileId() + "/lists.json", request, UserList.class);, +		return getLowLevelTwitterApi().publish(userApi.getProfileId() + "/lists/" + listId + ".json", request, UserList.class);, +		return getLowLevelTwitterApi().fetchObject(userId + "/" + listId + "/members.json", TwitterProfileUsersList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/" + listSlug + "/members.json", TwitterProfileUsersList.class).getList();, +		return getLowLevelTwitterApi().publish(userApi.getProfileId() + "/" + listId + "/members/create_all.json", request, UserList.class);, +		return getLowLevelTwitterApi().publish(userApi.getProfileId() + "/" + listSlug + "/members/create_all.json", request, UserList.class);, +		return getLowLevelTwitterApi().fetchObject(userId + "/" + listId + "/subscribers.json", TwitterProfileUsersList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/" + listSlug + "/subscribers.json", TwitterProfileUsersList.class).getList();, +		return getLowLevelTwitterApi().publish(ownerId + "/" + listId + "/subscribers.json", data, UserList.class);, +		return getLowLevelTwitterApi().publish(ownerScreenName + "/" + listSlug + "/subscribers.json", data, UserList.class);, +		return getLowLevelTwitterApi().fetchObject(userId + "/lists/memberships.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/lists/memberships.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(userId + "/lists/subscriptions.json", UserListList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(screenName + "/lists/subscriptions.json", UserListList.class).getList();]
[+++ b/gradle.properties]
[+++ b/readme.txt, +is omitted, doing so becomes a multi-step process of: , +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update]
[+++ b/docs/src/reference/docbook/connecting.xml, +        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +        if (authentication == null) {, +            throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, +        }, +        return usersConnectionRepository().createConnectionRepository(authentication.getName());, +++ b/docs/src/reference/docbook/connecting.xml, +        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +        if (authentication == null) {, +            throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, +        }, +        return usersConnectionRepository().createConnectionRepository(authentication.getName());, +++ b/docs/src/reference/docbook/signin.xml, +				<listitem><para>A <interfacename>UsersConnectionRepository</interfacename> to find the user that has the connection to the provider user attempting to sign in.</para></listitem>, +				In the event that the sign in attempt fails, the sign in attempt will be stored in the session to be used to present a sign-up page to the user (see <xref linkend="signin_signup"/>)., +				By configuring ConnectionFactoryLocator and UsersConnectionRepository as scoped proxies, it enables the proxies to be carried long with the sign in attempt in the session rather than the actual objects themselves., +			If <classname>ProviderSignInController</classname> can't find a local user associated with a provider user attempting to sign in, there may be an opportunity to have the user sign up with the application., +			Leveraging the information about the user received from the provider, the user may be presented with a pre-filled sign up form to explicitly sign up with the application., +			It's also possible to use the user's provider data to implicitly create a new local application user without presenting a sign up form. , +		</para>, +		<section xml:id="signin_signup_explicit">, +			<title>Signing up with a sign up form</title>					, +			<para>, +				You can override that default by setting the <code>signUpUrl</code> property on the controller. , +    <property name="signUpUrl" value="/register" />, +				This information can be used to prepopulate the sign up form and then, after successful sign up, to establish a connection between the new account and the provider account.			, +		<section xml:id="signin_signup_implicit">, +			<title>Implicit sign up</title>	, +			<para>, +				To enable implicit sign up, you must create an implementation of the <interfacename>ConnectionSignUp</interfacename> interface and inject an instance of that <interfacename>ConnectionSignUp</interfacename> to the connection repository., +				The <interfacename>ConnectionSignUp</interfacename> interface is simple, with only a single method to implement:, +			</para>				, +			<programlisting language="java"><![CDATA[, +public interface ConnectionSignUp {, +    String execute(Connection<?> connection);, +}]]>, +			</programlisting>, +, +			<para>, +				The <methodname>execute()</methodname> method is given a <interfacename>Connection</interfacename> that it can use to retrieve information about the user., +				It can then use that information to create a new local application user and return the new local user ID., +				For example, the following implementation fetches the user's provider profile and uses it to create a new account: , +			</para>, +			<programlisting language="java"><![CDATA[, +public class ShowcaseConnectionSignUp implements ConnectionSignUp {, +, +	private final AccountRepository accountRepository;, +, +	public ShowcaseConnectionSignUp(AccountRepository accountRepository) {, +		this.accountRepository = accountRepository;, +	}, +, +	public String execute(Connection<?> connection) {, +	    UserProfile profile = connection.fetchUserProfile();, +	    Account account = createAccount(profile);, +	    return account != null ? account.getUsername() : null;, +	}, +, +	private Account createAccount(UserProfile profile) {, +		if(profile == null || profile.getUsername() == null) {, +			return null;, +		}, +		return new Account(profile.getUsername(), profile.getFirstName(), profile.getLastName());, +	}, +	, +}]]>, +			</programlisting>			, +			<para>, +				If <methodname>execute()</methodname> returns null, then it indicates that the user could not be implicitly signed up., +				In that case, <classname>ProviderSignInController</classname>'s explicit sign up flow will be in effect and the browser will be redirected to the sign up form., +			</para>, +			<para>, +				Once you've written a <interfacename>ConnectionSignUp</interfacename> for your application, you'll need to inject it into the <interfacename>UsersConnectionRepository</interfacename>., +				In Java-based configuration: , +			</para>, +			<programlisting language="java"><![CDATA[, +@Bean, +@Scope(value="singleton", proxyMode=ScopedProxyMode.INTERFACES) , +public UsersConnectionRepository usersConnectionRepository(AccountRepository accountRepository) {, +  JdbcUsersConnectionRepository repository = new JdbcUsersConnectionRepository(, +          dataSource, connectionFactoryLocator(), Encryptors.noOpText());, +  repository.setConnectionSignUp(new AccountConnectionSignUp(accountRepository));, +  return repository;, +}]]>, +			</programlisting>	, +		</section>, +	</section>	]
[+++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 14, 2011), +   * SOCIAL-152: Spring Social depends upon some Spring 3.1M1 (or unreleased, +        3.0.6) classes., +   * SOCIAL-148: LinkedInTemplate not working on Android because of , +        javax.xml.bind.annotation.XmlRootElement dependency, +   * SOCIAL-145: Deserialization error on WorkEntry when entry contains location,, +        position, or description., +   * SOCIAL-158: javax.Inject dependency is marked optional on spring-social-web, +        and it is required, +   * SOCIAL-133: RestTemplate not injected into OAuth2Template, +   * SOCIAL-168: Servlet path must be configurable in the redirect URL generation , +        of ConnectController, +   * SOCIAL-170: Wrong character set when Spring Social is used with Spring 3.0.x, +   * SOCIAL-142: DuplicateKeyException not handled properly when attempting to, +        insert a connection that already exists, +   * SOCIAL-102: ConnectController should handle ConnectionAlreadyExistsException, +        more gracefully, +   * SOCIAL-174: Facebook feed deserialization fails when a post comments field, +        doesn't have data, +   * SOCIAL-173: TwitterErrorHandler and FacebookErrorHandler should not fail on, +        non-JSON error bodies., +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 14, 2011), +   * SOCIAL-152: Spring Social depends upon some Spring 3.1M1 (or unreleased, +        3.0.6) classes., +   * SOCIAL-148: LinkedInTemplate not working on Android because of , +        javax.xml.bind.annotation.XmlRootElement dependency, +   * SOCIAL-145: Deserialization error on WorkEntry when entry contains location,, +        position, or description., +   * SOCIAL-158: javax.Inject dependency is marked optional on spring-social-web, +        and it is required, +   * SOCIAL-133: RestTemplate not injected into OAuth2Template, +   * SOCIAL-168: Servlet path must be configurable in the redirect URL generation , +        of ConnectController, +   * SOCIAL-170: Wrong character set when Spring Social is used with Spring 3.0.x, +   * SOCIAL-142: DuplicateKeyException not handled properly when attempting to, +        insert a connection that already exists, +   * SOCIAL-102: ConnectController should handle ConnectionAlreadyExistsException, +        more gracefully, +   * SOCIAL-174: Facebook feed deserialization fails when a post comments field, +        doesn't have data, +   * SOCIAL-173: TwitterErrorHandler and FacebookErrorHandler should not fail on, +        non-JSON error bodies., +++ b/docs/src/reference/docbook/connecting.xml, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs a connection with the provider.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs a connection with the provider.</para></listitem>, +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/info/changelog.txt]
[+++ b/gradle.properties, +springSecurityVersion=5.0.0.M2, +++ b/gradle.properties, +springSecurityVersion=5.0.0.M2, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +		return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +		return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +		return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +		return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +		return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +		return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +		return restTemplate.getForObject(buildUri(userId + "/lists/" + listId + "/statuses.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri(screenName + "/lists/" + listSlug + "/statuses.json"), TweetList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +		return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +		return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +		return restTemplate.getForObject(buildUri(userId + "/lists/" + listId + "/statuses.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri(screenName + "/lists/" + listSlug + "/statuses.json"), TweetList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/SearchTemplate.java, +		return restTemplate.getForObject(buildUri("saved_searches.json"), SavedSearchList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +		return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +		return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +		return restTemplate.getForObject(buildUri(userId + "/lists/" + listId + "/statuses.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri(screenName + "/lists/" + listSlug + "/statuses.json"), TweetList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/SearchTemplate.java, +		return restTemplate.getForObject(buildUri("saved_searches.json"), SavedSearchList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TimelineTemplate.java, +		return restTemplate.getForObject(buildUri("statuses/public_timeline.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/home_timeline.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/friends_timeline.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/user_timeline.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/user_timeline.json", Collections.singletonMap("screen_name", screenName)), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/user_timeline.json", Collections.singletonMap("user_id", String.valueOf(userId))), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/mentions.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/retweeted_by_me.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/retweeted_to_me.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/retweets_of_me.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/retweets/" + tweetId + ".json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/" + tweetId + "/retweeted_by.json"), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/" + tweetId + "/retweeted_by/ids.json"), LongList.class);, +		return restTemplate.getForObject(buildUri("favorites.json"), TweetList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +		return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +		return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, +		return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +		return restTemplate.getForObject(buildUri(userId + "/lists/" + listId + "/statuses.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri(screenName + "/lists/" + listSlug + "/statuses.json"), TweetList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/SearchTemplate.java, +		return restTemplate.getForObject(buildUri("saved_searches.json"), SavedSearchList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TimelineTemplate.java, +		return restTemplate.getForObject(buildUri("statuses/public_timeline.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/home_timeline.json"), TweetList.class);, +		return restTemplate.getForObject(buildUri("statuses/friends_timeline.json"), TweetList.class);]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String OAUTH_CALLBACK = "oauth_callback";, +	public static final OAuth1Parameters NONE = new OAuth1Parameters();, +		return getFirst(OAUTH_CALLBACK);, +	public void setCallbackUrl(String callbackUrl) {, +		set(OAUTH_CALLBACK, callbackUrl);, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String OAUTH_CALLBACK = "oauth_callback";, +	public static final OAuth1Parameters NONE = new OAuth1Parameters();, +		return getFirst(OAUTH_CALLBACK);, +	public void setCallbackUrl(String callbackUrl) {, +		set(OAUTH_CALLBACK, callbackUrl);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * This may be useful when overriding {@link #customAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., +	 * Subclassing hook to add custom authorization parameters to the authorization URL., +	 * Default implementation adds no parameters., +	protected void customAuthorizationParameters(MultiValueMap<String, String> parameters) {, +		customAuthorizationParameters(parameters);, +		if (parameters != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.entrySet().iterator(); additionalParams.hasNext();) {, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String OAUTH_CALLBACK = "oauth_callback";, +	public static final OAuth1Parameters NONE = new OAuth1Parameters();, +		return getFirst(OAUTH_CALLBACK);, +	public void setCallbackUrl(String callbackUrl) {, +		set(OAUTH_CALLBACK, callbackUrl);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * This may be useful when overriding {@link #customAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., +	 * Subclassing hook to add custom authorization parameters to the authorization URL., +	 * Default implementation adds no parameters., +	protected void customAuthorizationParameters(MultiValueMap<String, String> parameters) {, +		customAuthorizationParameters(parameters);, +		if (parameters != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.entrySet().iterator(); additionalParams.hasNext();) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth2Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String STATE = "state";, +	private static final String SCOPE = "scope";, +	private static final String REDIRECT_URI = "redirect_uri";, +	 * Returns the authorization callback url; this value must match the redirectUri registered with the provider (optional per the OAuth 2 spec, but required by most OAuth 2 providers). , +		return getFirst(REDIRECT_URI);, +	 * Sets the authorization callback url; this value must match the redirectUri registered with the provider (optional per the OAuth 2 spec, but required by most OAuth 2 providers). , +	 */, +	public void setRedirectUri(String redirectUri) {, +		set(REDIRECT_URI, redirectUri);, +	}, +, +	/**, +	 * Returns the permissions the application is seeking with the authorization (optional)., +		return getFirst(SCOPE);, +	 * Sets the permissions the application is seeking with the authorization (optional)., +	 */, +	public void setScope(String scope) {, +		set(SCOPE, scope);, +	}, +, +	/**, +	 * Returns an opaque key that must be included in the provider's authorization callback (optional)., +		return getFirst(STATE);, +	 * Sets an opaque key that must be included in the provider's authorization callback (optional)., +	public void setState(String state) {, +		set(STATE, state);, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String OAUTH_CALLBACK = "oauth_callback";, +	public static final OAuth1Parameters NONE = new OAuth1Parameters();, +		return getFirst(OAUTH_CALLBACK);, +	public void setCallbackUrl(String callbackUrl) {, +		set(OAUTH_CALLBACK, callbackUrl);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * This may be useful when overriding {@link #customAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., +	 * Subclassing hook to add custom authorization parameters to the authorization URL.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import javax.servlet.http.HttpServletRequest;, +, +		return request.getNativeRequest(HttpServletRequest.class).getRequestURL().toString();]
[+++ b/docs/src/info/changelog.txt, +  * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/info/changelog.txt, +  * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() {, +        controller.setApplicationUrl(environment.getProperty("application.url");, +++ b/docs/src/info/changelog.txt, +  * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() {, +        controller.setApplicationUrl(environment.getProperty("application.url");, +++ b/docs/src/reference/docbook/signin.xml, +public ProviderSignInController providerSignInController() {, +    controller.setApplicationUrl(environment.getProperty("application.url"));, +++ b/docs/src/info/changelog.txt, +  * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() {, +        controller.setApplicationUrl(environment.getProperty("application.url");, +++ b/docs/src/reference/docbook/signin.xml, +public ProviderSignInController providerSignInController() {, +    controller.setApplicationUrl(environment.getProperty("application.url"));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	public void setApplicationUrl(String applicationUrl) {, +++ b/docs/src/info/changelog.txt, +  * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() {, +        controller.setApplicationUrl(environment.getProperty("application.url");, +++ b/docs/src/reference/docbook/signin.xml, +public ProviderSignInController providerSignInController() {, +    controller.setApplicationUrl(environment.getProperty("application.url"));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	public void setApplicationUrl(String applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private String applicationUrl;, +	public void setApplicationUrl(String applicationUrl) {, +++ b/docs/src/info/changelog.txt, +  * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() {, +        controller.setApplicationUrl(environment.getProperty("application.url");, +++ b/docs/src/reference/docbook/signin.xml, +public ProviderSignInController providerSignInController() {, +    controller.setApplicationUrl(environment.getProperty("application.url"));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	public void setApplicationUrl(String applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private String applicationUrl;, +	public void setApplicationUrl(String applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	public void setApplicationUrl(String applicationUrl) {, +++ b/docs/src/info/changelog.txt, +  * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/reference/docbook/connecting.xml, +    public ConnectController connectController() {, +        controller.setApplicationUrl(environment.getProperty("application.url");, +++ b/docs/src/reference/docbook/signin.xml, +public ProviderSignInController providerSignInController() {, +    controller.setApplicationUrl(environment.getProperty("application.url"));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	public void setApplicationUrl(String applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private String applicationUrl;, +	public void setApplicationUrl(String applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	public void setApplicationUrl(String applicationUrl) {, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +		support.setApplicationUrl("https://someothersite.com:1234");, +		support.setApplicationUrl("http://somehost:8080/spring-social-showcase");, +		support.setApplicationUrl("http://ec2.instance.com:8080/spring-social/showcase");, +		support.setApplicationUrl("https://someothersite.com:1234");, +		support.setApplicationUrl("https://someothersite.com:1234");, +		support.setApplicationUrl("https://someothersite.com:1234");, +		support.setApplicationUrl("https://someothersite.com:1234/spring-social-showcase");, +		support.setApplicationUrl("http://ec2.instance.com:8080/spring-social/showcase");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +import java.io.Serializable;, +, +public interface Connection<A> extends Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +import java.io.Serializable;, +, +public interface Connection<A> extends Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, +	private transient final ApiAdapter<A> apiAdapter;, +	private transient final Object monitor = new Object();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +import java.io.Serializable;, +, +public interface Connection<A> extends Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, +	private transient final ApiAdapter<A> apiAdapter;, +	private transient final Object monitor = new Object();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +	private transient final OAuth2ServiceProvider<A> serviceProvider;, +	private transient A api;, +	private transient A apiProxy;]
[+++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg ref="twitterProvider" />, +			<classname>TwitterSigninController</classname> is constructed with four arguments:, +			<listitem><para>A reference to a <classname>TwitterServiceProvider</classname> bean. <classname>TwitterSigninController</classname> will use this to negotiate the connection with Twitter.</para></listitem>, +    <constructor-arg ref="facebookProvider" />, +			It also needs a reference to a <classname>FacebookServiceProvider</classname> bean that it will use to negotiate the connection with Facebook.]
[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/SessionUserIdSourceTest.java]
[+++ b/gradle.properties, +version=1.1.0.M2]
[+++ b/gradle.properties, +h2Version               = 1.3.175, +hamcrestVersion         = 1.3, +httpComponentsVersion   = 4.3.1, +junitVersion            = 4.11, +mockitoVersion          = 1.10.8, +servletApiVersion       = 3.0.1, +springVersion           = 4.1.6.RELEASE, +springReleaseVersion    = latest.release, +springSnapshotVersion   = latest.integration, +springSecurityVersion   = 3.2.7.RELEASE, +jspApiVersion           = 2.2.1]
[+++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +                srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Strategy interface for registering connection factories., + * Given to configuration in call to {@link SocialConfigurer#addConnectionFactories(ConnectionFactoryConfigurer, org.springframework.core.env.Environment)}., + * There are currently two implementations., + * The default implementation simply registers the given ConnectionFactory with a ConnectionFactoryRegistry., + * If Spring Social's security module is available on the classpath, the implementation given will work with a SocialAuthenticationServiceRegistry and, + * automatically wrap any given ConnectionFactory with a SocialAuthenticationService., + * @author Craig Walls, + */, +public interface ConnectionFactoryConfigurer {, +	, +	/**, +	 * Add a connection factory registry., +	 * If Spring Social's security module is available, the given connection factory will be wrapped as a SocialAuthenticationService., +	 */, +	void addConnectionFactory(ConnectionFactory<?> connectionFactory);, +, +}, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Strategy interface for registering connection factories., + * Given to configuration in call to {@link SocialConfigurer#addConnectionFactories(ConnectionFactoryConfigurer, org.springframework.core.env.Environment)}., + * There are currently two implementations., + * The default implementation simply registers the given ConnectionFactory with a ConnectionFactoryRegistry., + * If Spring Social's security module is available on the classpath, the implementation given will work with a SocialAuthenticationServiceRegistry and, + * automatically wrap any given ConnectionFactory with a SocialAuthenticationService., + * @author Craig Walls, + */, +public interface ConnectionFactoryConfigurer {, +	, +	/**, +	 * Add a connection factory registry., +	 * If Spring Social's security module is available, the given connection factory will be wrapped as a SocialAuthenticationService., +	 */, +	void addConnectionFactory(ConnectionFactory<?> connectionFactory);, +, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 15, 2011), +   * New service provider framework to model interaction with service providers., +   * New connect controller to handle the application's role in the "OAuth Dance", +     for both OAuth 1 and OAuth 2 service providers., +   * New TwitterSigninController that enables a user to sign into an application by, +     signing into Twitter., +   * New FacebookSigninController   that enables a user to sign into an application by, +     signing into Facebook., +   * SOCIAL-52: TwitterTemplate doesn't work with other Locale than Locale.ENGLISH, +   * SOCIAL-53: Cannot run app based on spring-social under Jetty 7.2.1, +   * SOCIAL-59: Can't send asterisks in tweets, +   * SOCIAL-86: IllegalArgumentException: Non-serializable attribute oauthToken, +   * SOCIAL-92: getCreatedAt return null due to Unparseable date in TwitterTemplate]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +import java.net.URI;, +import java.util.Collections;, +import java.util.Map;, +, +import org.springframework.social.util.URIBuilder;, +, +	private final boolean isAuthorizedForUser;, +	public AbstractTwitterOperations(boolean isAuthorizedForUser) {, +		this.isAuthorizedForUser = isAuthorizedForUser;, +		if(!isAuthorizedForUser) {, +	, +	protected URI buildUri(String path) {, +		return buildUri(path, Collections.<String, String>emptyMap());, +	}, +	, +	protected URI buildUri(String path, Map<String, String> params) {, +		URIBuilder uriBuilder = URIBuilder.fromUri(API_URL_BASE + path);, +		for (String paramName : params.keySet()) {, +			uriBuilder.queryParam(paramName, String.valueOf(params.get(paramName)));, +		}, +		URI uri = uriBuilder.build();, +		return uri;, +	}, +	, +	private static final String API_URL_BASE = "https://api.twitter.com/1/";, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +import java.net.URI;, +import java.util.Collections;, +import java.util.Map;, +, +import org.springframework.social.util.URIBuilder;, +, +	private final boolean isAuthorizedForUser;, +	public AbstractTwitterOperations(boolean isAuthorizedForUser) {, +		this.isAuthorizedForUser = isAuthorizedForUser;, +		if(!isAuthorizedForUser) {, +	, +	protected URI buildUri(String path) {, +		return buildUri(path, Collections.<String, String>emptyMap());, +	}, +	, +	protected URI buildUri(String path, Map<String, String> params) {, +		URIBuilder uriBuilder = URIBuilder.fromUri(API_URL_BASE + path);, +		for (String paramName : params.keySet()) {, +			uriBuilder.queryParam(paramName, String.valueOf(params.get(paramName)));, +		}, +		URI uri = uriBuilder.build();, +		return uri;, +	}, +	, +	private static final String API_URL_BASE = "https://api.twitter.com/1/";, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import java.util.Collections;, +import org.springframework.web.client.RestTemplate;, +	private final RestTemplate restTemplate;, +	public DirectMessageTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser) {, +		super(isAuthorizedForUser);, +		this.restTemplate = restTemplate;, +		return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class).getList();, +		return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class).getList();, +		restTemplate.postForObject(buildUri("direct_messages/new.json", Collections.<String, String>emptyMap()), data, String.class);, +		restTemplate.postForObject(buildUri("direct_messages/new.json", Collections.<String, String>emptyMap()), data, String.class);, +		restTemplate.delete(buildUri("direct_messages/destroy/" + messageId + ".json", Collections.<String, String>emptyMap()));, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +import java.net.URI;, +import java.util.Collections;, +import java.util.Map;, +, +import org.springframework.social.util.URIBuilder;, +, +	private final boolean isAuthorizedForUser;, +	public AbstractTwitterOperations(boolean isAuthorizedForUser) {, +		this.isAuthorizedForUser = isAuthorizedForUser;, +		if(!isAuthorizedForUser) {, +	, +	protected URI buildUri(String path) {, +		return buildUri(path, Collections.<String, String>emptyMap());, +	}, +	, +	protected URI buildUri(String path, Map<String, String> params) {, +		URIBuilder uriBuilder = URIBuilder.fromUri(API_URL_BASE + path);, +		for (String paramName : params.keySet()) {, +			uriBuilder.queryParam(paramName, String.valueOf(params.get(paramName)));, +		}, +		URI uri = uriBuilder.build();, +		return uri;, +	}, +	, +	private static final String API_URL_BASE = "https://api.twitter.com/1/";, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import java.util.Collections;, +import org.springframework.web.client.RestTemplate;, +	private final RestTemplate restTemplate;, +	public DirectMessageTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser) {, +		super(isAuthorizedForUser);, +		this.restTemplate = restTemplate;]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInUtils.java, +	 * Must be called before handlePostSignUp() or else the sign-in attempt will have been cleared from the session.]
[+++ b/build.gradle, +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web;, +, +import static org.hamcrest.beans.SamePropertyValuesAs.*;, +import static org.springframework.test.web.server.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.server.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.server.setup.MockMvcBuilders.*;, +, +import org.junit.Ignore;, +import org.junit.Test;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +import org.springframework.social.connect.web.test.TestApi;, +import org.springframework.social.connect.web.test.StubOAuth1ConnectionFactory;, +import org.springframework.social.connect.web.test.StubOAuth2ConnectionFactory;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.test.web.server.MockMvc;, +, +, +public class ConnectControllerTest {, +	, +	private static final String OAUTH2_AUTHORIZE_URL = "https://someprovider.com/oauth/authorize?client_id=clientId&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A80%2Fconnect%2Foauth2Provider";, +, +	@Test, +	@Ignore("Revisit this and assert/fix expectations"), +	public void connect_noSuchProvider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/noSuchProvider"));, +	}, +, +	@Test, +	public void connect_OAuth2Provider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL));, +	}, +, +	@Test, +	public void connect_OAuth2Provider_withScope() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider").param("scope", "read,write")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL + "&scope=read%2Cwrite"));, +	}, +, +	@Test, +	public void connect_OAuth1Provider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("https://someprovider.com/oauth/authorize?oauth_token=requestToken")), +			.andExpect(request().sessionAttribute("oauthToken", samePropertyValuesAs(new OAuthToken("requestToken", "requestTokenSecret"))));, +	}, +}, +++ b/build.gradle, +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred while consuming a provider API., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ApiException extends SocialException {, +, +	public ApiException(String message) {, +		super(message);, +	}, +, +	public ApiException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred while consuming a provider API., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ApiException extends SocialException {, +, +	public ApiException(String message) {, +		super(message);, +	}, +, +	public ApiException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred while consuming a provider API., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ApiException extends SocialException {, +, +	public ApiException(String message) {, +		super(message);, +	}, +, +	public ApiException(String message, Throwable cause) {, +		super(message, cause);]
[+++ b/.gitignore, +build, +**/build, +.gradle, +++ b/.gitignore, +build, +**/build, +.gradle, +++ b/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +// -----------------------------------------------------------------------------, +// Main gradle build file for Spring Social, +//, +// - run `./gradlew(.bat) build` to kick off a complete compile-test-package, +//, +// @author Craig Walls, +// -----------------------------------------------------------------------------, +, +, +// -----------------------------------------------------------------------------, +// Configuration for the root project, +// -----------------------------------------------------------------------------, +apply from: "$rootDir/gradle/version.gradle", +apply plugin: 'idea', +, +// used for artifact names, building doc upload urls, etc., +description = 'Spring Social', +abbreviation = 'INT', +, +// -----------------------------------------------------------------------------, +// Configuration for all projects including this one (the root project), +//, +// @see settings.gradle for list of all subprojects, +// -----------------------------------------------------------------------------, +allprojects {, +    // group will translate to groupId during pom generation and deployment, +    group = 'org.springframework.social', +, +    // version will be used in maven pom generation as well as determining, +    // where artifacts should be deployed, based on release type of snapshot,, +    // milestone or release., +    // @see org.springframework.build.Version under buildSrc/ for more info, +    // @see gradle.properties for the declaration of this property., +    version = createVersion(springSocialVersion), +, +    // default set of maven repositories to be used when resolving dependencies, +    repositories {, +        mavenRepo urls: 'http://maven.springframework.org/snapshot', +        mavenCentral(), +        mavenRepo urls: 'http://maven.springframework.org/release', +        mavenRepo urls: 'http://maven.springframework.org/milestone', +        mavenRepo urls: 'http://repository.springsource.com/maven/bundles/external', +        mavenRepo urls: 'http://repository.springsource.com/maven/bundles/release', +        mavenRepo urls: 'http://repository.springsource.com/maven/bundles/milestone', +    }, +}, +, +, +// -----------------------------------------------------------------------------, +// Create collections of subprojects - each will receive their own configuration, +// - all subprojects that start with spring-social-* are 'java projects', +// - documentation-related subprojects are not collected here, +//, +// @see configure(*) sections below, +// -----------------------------------------------------------------------------, +, +javaprojects = subprojects.findAll { project ->, +    project.path.startsWith(':spring-social-'), +}, +, +// -----------------------------------------------------------------------------, +// Configuration for all java subprojects, +// -----------------------------------------------------------------------------, +configure(javaprojects) {, +, +    apply plugin: 'java' // tasks for conventional java lifecycle, +    apply plugin: 'maven' // `gradle install` to push jars to local .m2 cache, +    apply plugin: 'eclipse' // `gradle eclipse` to generate .classpath/.project, +    apply plugin: 'idea' // `gradle idea` to generate .ipr/.iml, +, +    // set up dedicated directories for jars and source jars., +    // this makes it easier when putting together the distribution, +    libsBinDir = new File(libsDir, 'bin'), +    libsSrcDir = new File(libsDir, 'src'), +]
[+++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +import org.springframework.social.twitter.support.json.TweetList;, +		return getLowLevelTwitterApi().fetchObject("{userId}/lists/{listId}/statuses.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("{screenName}/lists/{screenName}/statuses.json", TweetList.class).getList();, +			getLowLevelTwitterApi().fetchObject(path, String.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +import org.springframework.social.twitter.support.json.TweetList;, +		return getLowLevelTwitterApi().fetchObject("{userId}/lists/{listId}/statuses.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("{screenName}/lists/{screenName}/statuses.json", TweetList.class).getList();, +			getLowLevelTwitterApi().fetchObject(path, String.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/LowLevelTwitterApi.java, +	 * @param type the Java type to return., +	 * @param type the Java type to return., +	<T> T publish(String path, MultiValueMap<String, Object> data, Class<T> type, Map<String, String> queryParams);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +import org.springframework.social.twitter.support.json.TweetList;, +		return getLowLevelTwitterApi().fetchObject("{userId}/lists/{listId}/statuses.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("{screenName}/lists/{screenName}/statuses.json", TweetList.class).getList();, +			getLowLevelTwitterApi().fetchObject(path, String.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/LowLevelTwitterApi.java, +	 * @param type the Java type to return., +	 * @param type the Java type to return., +	<T> T publish(String path, MultiValueMap<String, Object> data, Class<T> type, Map<String, String> queryParams);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/SearchTemplate.java, +import org.springframework.social.twitter.support.json.DailyTrendsList;, +import org.springframework.social.twitter.support.json.WeeklyTrendsList;, +		return getLowLevelTwitterApi().fetchObject(path, DailyTrendsList.class).getList().get(0);, +		return getLowLevelTwitterApi().fetchObject(path, DailyTrendsList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(path, WeeklyTrendsList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +import org.springframework.social.twitter.support.json.TweetList;, +		return getLowLevelTwitterApi().fetchObject("{userId}/lists/{listId}/statuses.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("{screenName}/lists/{screenName}/statuses.json", TweetList.class).getList();, +			getLowLevelTwitterApi().fetchObject(path, String.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/LowLevelTwitterApi.java, +	 * @param type the Java type to return., +	 * @param type the Java type to return., +	<T> T publish(String path, MultiValueMap<String, Object> data, Class<T> type, Map<String, String> queryParams);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/SearchTemplate.java, +import org.springframework.social.twitter.support.json.DailyTrendsList;, +import org.springframework.social.twitter.support.json.WeeklyTrendsList;, +		return getLowLevelTwitterApi().fetchObject(path, DailyTrendsList.class).getList().get(0);, +		return getLowLevelTwitterApi().fetchObject(path, DailyTrendsList.class).getList();, +		return getLowLevelTwitterApi().fetchObject(path, WeeklyTrendsList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TimelineTemplate.java, +import org.springframework.social.twitter.support.json.TweetList;, +		return getLowLevelTwitterApi().fetchObject("statuses/public_timeline.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/home_timeline.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/friends_timeline.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/user_timeline.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/user_timeline.json", TweetList.class, Collections.singletonMap("screen_name", screenName)).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/user_timeline.json", TweetList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/mentions.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/retweeted_by_me.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/retweeted_to_me.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/retweets_of_me.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("statuses/show/" + tweetId + ".json", Tweet.class);, +		return getLowLevelTwitterApi().fetchObject("statuses/retweets/" + tweetId + ".json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("favorites.json", TweetList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +import org.springframework.social.twitter.support.json.TweetList;, +		return getLowLevelTwitterApi().fetchObject("{userId}/lists/{listId}/statuses.json", TweetList.class).getList();, +		return getLowLevelTwitterApi().fetchObject("{screenName}/lists/{screenName}/statuses.json", TweetList.class).getList();, +			getLowLevelTwitterApi().fetchObject(path, String.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/LowLevelTwitterApi.java, +	 * @param type the Java type to return., +	 * @param type the Java type to return., +	<T> T publish(String path, MultiValueMap<String, Object> data, Class<T> type, Map<String, String> queryParams);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/SearchTemplate.java, +import org.springframework.social.twitter.support.json.DailyTrendsList;]
[+++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1ConnectionFactory.java, +	 * Get the ServiceProvider's {@link OAuth1Operations} that allows the client application to conduct the OAuth1 flow with the provider., +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1ConnectionFactory.java, +	 * Get the ServiceProvider's {@link OAuth1Operations} that allows the client application to conduct the OAuth1 flow with the provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			String redirectUrl = signInAdapter.signIn(userId, connection, request);, +			if(redirectUrl != null) {, +				return redirect(redirectUrl);, +			}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			String redirectUrl = signInAdapter.signIn(userId, connection, request);, +			if(redirectUrl != null) {, +				return redirect(redirectUrl);, +			}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SignInAdapter.java, +	 * @return the URL that ProviderSignInController should redirect to after sign in. May be null, indicating that ProviderSignInController, +	 * should redirect to its postSignInUrl., +	String signIn(String userId, Connection<?> connection, NativeWebRequest request);]
[+++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TwitterShowcaseController.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TwitterShowcaseController.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TwitterShowcaseController.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/facebookConnected.jsp, +<c:if test="${not empty message}">, +<div class="${message.type.cssClass}">${message.text}</div>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/readme.txt, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process., +, +If you encounter heap space errors during the build, increase the heap size for, +gradle:, + GRADLE_OPTS="-Xmx1024m", +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse as usual:, +, + File -> Import -> Existing projects into workspace, +, +Browse to the 'spring-social' root directory. All projects should import, +free of errors., +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, + ./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +, +===============================================================================]
[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +				xmlns:social="http://www.springframework.org/schema/social-connect", +				xsi:schemaLocation="http://www.springframework.org/schema/social-connect http://www.springframework.org/schema/social/social-connect-1.0.xsd, +		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +, +	<!-- , +		Could be replaced with:		, +		<social:jdbc-service-provider-factory />, +		, +		  or, +		, +		<social:context-service-provider-factory />, +	 -->	, +	<!--  This wouldn't be necessary as it would be the default -->, +	<!-- , +	-->, +	<!-- , +		Could be replaced with:		, +		<social:jdbc-connection-repository />, +	 -->	, +	<bean id="connectionRepository" class="org.springframework.social.connect.jdbc.JdbcAccountConnectionRepository">, +		<constructor-arg ref="jdbcTemplate" />, +		<constructor-arg ref="stringEncryptor" />, +	</bean>, +	, +	<social:twitter-provider consumer-key="YR571S2JiVBOFyJS5MEg" , +							 consumer-secret="Kb8hS0luftwCJX3qVoyiLUMfZDtK1EozFoUkjNLUMx4" />, +, +	<!-- 	, +	<social:service-provider id="twitter" , +							 class="org.springframework.social.connect.providers.TwitterServiceProvider" , +							 consumer-key="YR571S2JiVBOFyJS5MEg" , +							 consumer-secret="Kb8hS0luftwCJX3qVoyiLUMfZDtK1EozFoUkjNLUMx4" , +							 request-token-url="http://twitter.com/oauth/request_token" , +							 authorization-url="https://twitter.com/oauth/authorize?oauth_token={requestToken}", +							 access-token-url="https://twitter.com/oauth/access_token" />, +	-->, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +				xmlns:social="http://www.springframework.org/schema/social-connect", +				xsi:schemaLocation="http://www.springframework.org/schema/social-connect http://www.springframework.org/schema/social/social-connect-1.0.xsd, +		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +, +	<!-- , +		Could be replaced with:		, +		<social:jdbc-service-provider-factory />, +		, +		  or, +		, +		<social:context-service-provider-factory />, +	 -->	, +	<!--  This wouldn't be necessary as it would be the default -->, +	<!-- , +	-->, +	<!-- , +		Could be replaced with:		, +		<social:jdbc-connection-repository />, +	 -->	, +	<bean id="connectionRepository" class="org.springframework.social.connect.jdbc.JdbcAccountConnectionRepository">, +		<constructor-arg ref="jdbcTemplate" />, +		<constructor-arg ref="stringEncryptor" />, +	</bean>, +	, +	<social:twitter-provider consumer-key="YR571S2JiVBOFyJS5MEg" , +							 consumer-secret="Kb8hS0luftwCJX3qVoyiLUMfZDtK1EozFoUkjNLUMx4" />, +, +	<!-- 	, +	<social:service-provider id="twitter" , +							 class="org.springframework.social.connect.providers.TwitterServiceProvider" , +							 consumer-key="YR571S2JiVBOFyJS5MEg" , +							 consumer-secret="Kb8hS0luftwCJX3qVoyiLUMfZDtK1EozFoUkjNLUMx4" , +							 request-token-url="http://twitter.com/oauth/request_token" , +							 authorization-url="https://twitter.com/oauth/authorize?oauth_token={requestToken}", +							 access-token-url="https://twitter.com/oauth/access_token" />, +	-->, +++ b/spring-social-connect/src/main/java/org/springframework/security/encrypt/NoOpStringEncryptor.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.security.encrypt;, +, +/**, + * A String Encryptor that does nothing. Useful for testing., + * @author Keith Donald, + */, +public class NoOpStringEncryptor implements StringEncryptor {, +]
[+++ b/docs/src/reference/docbook/signin.xml, +public interface SignInService<T extends Serializable> {, +    void signIn(T accountId);	, +public class AccountIdAsPrincipalSigninService implements SignInService<Long> {, +    public void signIn(Long accountId) {, +++ b/docs/src/reference/docbook/signin.xml, +public interface SignInService<T extends Serializable> {, +    void signIn(T accountId);	, +public class AccountIdAsPrincipalSigninService implements SignInService<Long> {, +    public void signIn(Long accountId) {, +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/SignInService.java, +public interface SignInService<T extends Serializable> {, +	void signIn(T accountId);]
[+++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg ref="signinService" />, +			<listitem><para>A reference to an implementation of <interfacename>SignInService</interfacename>, used to perform the actual authentication into the application.</para></listitem>, +			<listitem><para><code>GET /signin/twitter?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from Twitter, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +			<classname>TwitterSigninController</classname> handles the authentication flow with Twitter, but relies on an implementation of <interfacename>SignInService</interfacename> to perform the actual authentication into the application. <interfacename>SignInService</interfacename> is defined as follows:, +public interface SignInService {, +			Different applications will implement security differently, so each application must implement <interfacename>SignInService</interfacename> in a way that fits its unique security scheme., +			In that case, a simple implementation of <interfacename>SignInService</interfacename> might look like this:, +import org.springframework.social.web.connect.SignInService;, +public class AccountIdAsPrincipalSigninService implements SignInService {, +    <constructor-arg ref="signinService" />, +			As with <classname>TwitterSigninController</classname>, <classname>FacebookSigninController</classname> depends on a connection repository to lookup connections and a sign in service to handle the actual application authentication.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * If not specified, OAuth callback URLs are generated from web request info. , +	 * In this case, the request URI may contain a scheme, host, and/or port value that points to an internal server not appropriate for an external callback URL., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * If not specified, OAuth callback URLs are generated from web request info. , +	 * In this case, the request URI may contain a scheme, host, and/or port value that points to an internal server not appropriate for an external callback URL., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	 * If not specified, OAuth callback URLs are generated from web request info., +	 * In this case, the request URI may contain a scheme, host, and/or port value that points to an internal server not appropriate for an external callback URL., +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest))}., +	public RedirectView oauth1Callback(@PathVariable String providerId, NativeWebRequest request) {, +		return handleSignIn(connection, request);, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest))}., +	public RedirectView oauth2Callback(@PathVariable String providerId, @RequestParam("code") String code, NativeWebRequest request) {, +		return handleSignIn(connection, request);, +	private RedirectView handleSignIn(Connection<?> connection, NativeWebRequest request) {, +			signInAdapter.signIn(userId, connection, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * If not specified, OAuth callback URLs are generated from web request info. , +	 * In this case, the request URI may contain a scheme, host, and/or port value that points to an internal server not appropriate for an external callback URL., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	 * If not specified, OAuth callback URLs are generated from web request info., +	 * In this case, the request URI may contain a scheme, host, and/or port value that points to an internal server not appropriate for an external callback URL., +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest))}., +	public RedirectView oauth1Callback(@PathVariable String providerId, NativeWebRequest request) {, +		return handleSignIn(connection, request);, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest))}., +	public RedirectView oauth2Callback(@PathVariable String providerId, @RequestParam("code") String code, NativeWebRequest request) {, +		return handleSignIn(connection, request);, +	private RedirectView handleSignIn(Connection<?> connection, NativeWebRequest request) {, +			signInAdapter.signIn(userId, connection, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SignInAdapter.java, +import org.springframework.web.context.request.NativeWebRequest;, +	 * @param a reference to the current web request; is a "native" web request instance providing access to the native, +	 * request and response objects, such as a HttpServletRequest and HttpServletResponse, if needed, +	void signIn(String userId, Connection<?> connection, NativeWebRequest request);]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/docs/src/reference/docbook/implementing.xml, +		In this chapter, you will learn how to add support for new service providers you wish to integrate into your applications.]
[+++ b/gradle.properties, +springBootVersion=2.0.0.RC2]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		String servletPath = request.getNativeRequest(HttpServletRequest.class).getServletPath();]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +/**, + * {@link UsersConnectionRepository} that stores connections in memory., + * Intended for testing and small-scale applications as a convenient alternative to JdbcUsersConnectionRepository and an in-memory H2 database., + * Not intended for production use, as it will be cleared out when the application exits., + * @author Craig Walls, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +/**, + * {@link UsersConnectionRepository} that stores connections in memory., + * Intended for testing and small-scale applications as a convenient alternative to JdbcUsersConnectionRepository and an in-memory H2 database., + * Not intended for production use, as it will be cleared out when the application exits., + * @author Craig Walls, + */, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10aServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10aOperations;, +, +public abstract class AbstractOAuth10aServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10aServiceProvider<S> {, +, +	private final OAuth10aOperations oauth1Operations;, +, +	public AbstractOAuth10aServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10aOperations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10aOperations getOAuth10aOperations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10aServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10aOperations;, +, +public abstract class AbstractOAuth10aServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10aServiceProvider<S> {, +, +	private final OAuth10aOperations oauth1Operations;, +, +	public AbstractOAuth10aServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10aOperations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * If the request went through an load balancer or proxy, the URL's scheme, host, and/or port may point at an internal server which is not appropriate as an external callback URL., +	 * For those cases you can set application URL to the base external URL for the application and it will be used to construct the callback URL instead of determining the callback URL from the request., +	public void setApplicationUrl(URL applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * If the request went through an load balancer or proxy, the URL's scheme, host, and/or port may point at an internal server which is not appropriate as an external callback URL., +	 * For those cases you can set application URL to the base external URL for the application and it will be used to construct the callback URL instead of determining the callback URL from the request., +	public void setApplicationUrl(URL applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	 * If the request goes through an load balancer or proxy, the URL's scheme, host, and/or port may point at an internal server which is not appropriate as an external callback URL., +	 * For those cases you can set application URL to the base external URL for the application and it will be used to construct the callback URL instead of determining the callback URL from the request., +	public void setApplicationUrl(URL applicationUrl) {]
[+++ b/docs/src/reference/docbook/apis.xml, +          <listitem><para>Twitter</para></listitem>, +              "Spring Social is an extension to Spring to enable applications to connect with service providers.");, +  <section xml:id="section_api_gowalla">, +      <title>Gowalla</title>, +        <para>Gowalla is a location-based social network where users may check in to various locations they visit and earn pins and stamps for having checked in a locations that achieve some goal (for example, a "Lucha Libre" pin may be earned by having checked into 10 different Mexican food restaurants).</para>, +, +        <para>Spring Social supports interaction with Gowalla through the <interfacename>GowallaOperations</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>.</para>, +, +        <para>To obtain an instance of <classname>GowallaTemplate</classname>, you can instantiate it by passing an authorized access token to its constructor:</para>, +, +        <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Gowalla after OAuth authorization, +      GowallaOperations gowalla = new GowallaTemplate(accessToken);]]></programlisting>, +, +        <para>If you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>GowallaTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>GowallaServiceProvider</classname>'s <methodname>getConnections()</methodname> method:</para>, +, +        <programlisting><![CDATA[GowallaOperations gowalla = gowallaProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +, +        <para>Here, <classname>GowallaServiceProvider</classname> is being asked for a <interfacename>GowallaOperations</interfacename> that was created using the connection details for the given account ID. The connection should have been created beforehand via the service provider's <methodname>connect()</methodname> method or using <classname>ConnectController</classname>.</para>  , +, +        <para>With a <interfacename>GowallaOperations</interfacename> in hand, there are a handful of operations it provides to interact with Gowalla on behalf of the user. These will be covered in the following sections.</para>, +, +        <section id="gowalla-getProfile">, +          <title>Retrieving a user's profile data</title>, +, +          <para>You can retrieve a user's Gowalla profile using the <methodname>getUserProfile()</methodname> method:</para>, +, +          <programlisting><![CDATA[GowallaProfile profile = gowalla.getUserProfile();]]></programlisting>, +, +          <para>This will return the Gowalla profile data for the authenticated user. If you want to retrieve profile data for another user, you can pass the user's profile ID into <methodname>getUserProfile()</methodname>:</para>, +, +          <programlisting><![CDATA[GowallaProfile profile = gowalla.getUserProfile("habuma");]]></programlisting>, +, +          <para>The <classname>GowallaProfile</classname> object contains basic information about the Gowalla user such as their first and last names, their hometown, and the number of pins and stamps that they have earned.</para>, +, +          <para>If all you want is the authenticated user's profile ID, you can get that by calling the <methodname>getProfileId()</methodname>:</para>, +, +          <programlisting><![CDATA[String profileId = gowalla.getProfileId();]]></programlisting>, +, +          <para>Or if you want the URL to the user's profile page at Gowalla, use the <methodname>getProfileUrl()</methodname> method:</para>, +, +          <programlisting><![CDATA[String profileUrl = gowalla.getProfileUrl();]]></programlisting>, +, +        </section>, +, +        <section id="gowalla-checkins">, +          <title>Getting a user's checkins</title>, +, +          <para><interfacename>GowallaOperations</interfacename> also allows you to learn about the user's favorite checkin spots. The <methodname>getTopCheckins()</methodname> method will provide a list of the top 10 places that the user has visited:</para>, +, +          <programlisting><![CDATA[List<Checkin> topCheckins = gowalla.getTopCheckins();]]></programlisting>, +, +          <para>Each member of the returns list is a <classname>Checkin</classname> object that includes the name of the location as well as the number of times that the user has checked in at that location.</para>, +        </section>, +  </section>, +  <section xml:id="section_api_linkedin">, +      <title>LinkedIn</title>, +        <para>LinkedIn is a social networking site geared toward professionals. It enables its users to maintain and correspond with a network of contacts they have are professionally linked to.</para>, +, +        <para>Spring Social offers integration with LinkedIn via <interfacename>LinkedInOperations</interfacename> and its implementation, <classname>LinkedInTemplate</classname>.</para>, +, +        <para>To create an instance of <classname>LinkedInTemplate</classname>, you may pass in your application's OAuth 1 credentials, along with an access token/secret pair to the constructor:</para>, +, +        <programlisting><![CDATA[String apiKey = "..."; // The application's API/Consumer key, +      String apiSecret = "..."; // The application's API/Consumer secret, +      String accessToken = "..."; // The access token granted after OAuth authorization, +      String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization, +      LinkedInOperations linkedin = new LinkedInTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]></programlisting>, +, +        <para>If you're using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>LinkedInTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>LinkedInServiceProvider</classname>'s <methodname>getConnections()</methodname> method. For example:</para>, +, +        <programlisting><![CDATA[LinkedInOperations linkedin = linkedinProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +, +        <para>In this case, the <methodname>getServiceOperations()</methodname> is asked to return a <interfacename>LinkedInOperations</interfacename> instance created using connection details established using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>.</para>, +, +        <para>Once you have a <interfacename>LinkedInOperations</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for.</para>, +, +        <section id="linkedin-getProfile">, +          <title>Retrieving a user's LinkedIn profile data</title>, +, +          <para>To retrieve the authenticated user's profile data, call the <methodname>getUserProfile()</methodname> method:</para>, +, +          <programlisting><![CDATA[LinkedInProfile profile = linkedin.getUserProfile();]]></programlisting>, +, +          <para>The data returned in the <classname>LinkedInProfile</classname> includes the user's LinkedIn ID, first and last names, their "headline", the industry they're in, and URLs for the public and standard profile pages.</para>, +, +          <para>If it's only the user's LinkedIn ID you need, then you can get that by calling the <methodname>getProfileId()</methodname> method:</para>, +, +          <programlisting><![CDATA[String profileId = linkedin.getProfileId();]]></programlisting>, +, +          <para>Or if you only need a URL for the user's public profile page, call <methodname>getProfileUrl()</methodname>:</para>, +, +          <programlisting><![CDATA[String profileUrl = linkedin.getProfileUrl();]]></programlisting>, +, +        </section>, +, +        <section id="linkedin-connections">, +            <title>Getting a user's LinkedIn connections</title>, +, +            <para>To retrieve a list of LinkedIn users to whom the user is connected, call the <methodname>getConnections()</methodname> method:</para>]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.web;, +, +import java.io.UnsupportedEncodingException;, +import java.net.URLDecoder;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.Cookie;, +, +/**, + * Helper class that helps extract data from a Facebook cookie., + * @author Craig Walls, + */, +class FacebookCookieParser {, +, +	/**, +	 * Looks for a Facebook cookie for the given API Key and returns its data as key/value pairs in a Map., +	 */, +	public static Map<String, String> getFacebookCookieData(Cookie[] cookies, String apiKey) {, +		if (cookies != null) {, +			for (Cookie cookie : cookies) {, +				if (cookie.getName().equals("fbs_" + apiKey)) {, +					return extractDataFromCookie(cookie.getValue());, +				}, +			}, +		}, +, +		return Collections.<String, String> emptyMap();, +	}, +, +	private static Map<String, String> extractDataFromCookie(String cookieValue) {, +		HashMap<String, String> data = new HashMap<String, String>();, +		String[] fields = cookieValue.split("\\&");, +		for (String field : fields) {, +			String[] keyValue = field.split("\\=");, +			try {, +				data.put(keyValue[0], URLDecoder.decode(keyValue[1], "UTF-8"));, +			} catch (UnsupportedEncodingException wontHappen) {, +			}, +		}, +		return data;, +	}, +, +	private FacebookCookieParser() {, +	}, +, +}, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.web;, +, +import java.io.UnsupportedEncodingException;, +import java.net.URLDecoder;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.Cookie;, +, +/**, + * Helper class that helps extract data from a Facebook cookie., + * @author Craig Walls, + */, +class FacebookCookieParser {, +, +	/**]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 22, 2011), +   * Fixed Spring 3.0 compatibility issues (SOCIAL-152), +   * Converted LinkedInTemplate response binding to be JSON-based, fixing a, +     problem with Android compatibility (SOCIAL-148), +   * Fixed several JSON deserialization issues by either adding new fields to, +     the model classes or by setting Jackson to ignore unknown properties., +   * Made javax.Inject dependency a required dependency of spring-social-web (SOCIAL-158), +   * Added setRequestFactory() methods to OAuth1Template and OAuth2Template to, +     allow for customization of the request factory (SOCIAL-133), +   * AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding now create a RestTemplate, +     with a minimal set of message converters. In doing so, they set "UTF-8" character, +     set on FormHttpMessageConverter. (SOCIAL-170), +   * Handle DuplicateKeyException, putting "social.addConnection.duplicate" in request, +     as flash variable and then into model so that view can inform user of the problem., +   * Fixed Android 8 (and lower) compatibility issue by creating a HttpComponents, +     request factory that does not put an "Expect: 100-continue" header in the, +     request (SOCIAL-144), +   * Added setSignUpUrl() to ProviderSignInController to enable configuration of, +     the sign up page location (SOCIAL-183), +   * Changed TwitterErrorHandler and FacebookErrorHandler to those an, +     UncategorizedApiException if an error response body is non-JSON (and thus does, +     not match the expected error message response). (SOCIAL-173), +   * Made the applicationUrl property of ConnectController and ProviderSignInController, +     optional, constructing the callback URL from information in the request (SOCIAL-187), +   * Create new SimpleDateFormat as-needed to fix thread safety problem (SOCIAL-198)]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	public AccessGrant(String accessToken) {, +		this(accessToken, null);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	public AccessGrant(String accessToken) {, +		this(accessToken, null);, +	}, +	, +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/OAuth2ProviderSignInAccount.java, +		serviceProvider.connect(accountId, new AccessGrant(accessToken));		]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 *     "facebook" -&gt; [ Connection("Keith Donald") ] ,, +	 *     "github"   -&gt; [ ], +	 *     "twitter"  -&gt; [ Connection("kdonald"), Connection("springsource") ], +	 * The method always returns a map with keys representing all registered providers., +	 * For providers with no connection, a map contains an empty list as a value.]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, +	public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, +	public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, +	public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, +	public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, +	public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TwitterTemplate.java, +import org.springframework.social.twitter.support.DirectMessageApiTemplate;, +import org.springframework.social.twitter.support.FriendsApiTemplate;, +import org.springframework.social.twitter.support.SearchApiTemplate;, +import org.springframework.social.twitter.support.TweetApiTemplate;, +import org.springframework.social.twitter.support.TwitterResponseStatusCodeTranslator;, +import org.springframework.social.twitter.support.UserApiTemplate;, +	public static final String API_URL_BASE = "https://api.twitter.com/1/";, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, +	public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TwitterTemplate.java, +import org.springframework.social.twitter.support.DirectMessageApiTemplate;, +import org.springframework.social.twitter.support.FriendsApiTemplate;, +import org.springframework.social.twitter.support.SearchApiTemplate;, +import org.springframework.social.twitter.support.TweetApiTemplate;, +import org.springframework.social.twitter.support.TwitterResponseStatusCodeTranslator;, +import org.springframework.social.twitter.support.UserApiTemplate;, +	public static final String API_URL_BASE = "https://api.twitter.com/1/";, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, +	public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TwitterTemplate.java, +import org.springframework.social.twitter.support.DirectMessageApiTemplate;, +import org.springframework.social.twitter.support.FriendsApiTemplate;, +import org.springframework.social.twitter.support.SearchApiTemplate;, +import org.springframework.social.twitter.support.TweetApiTemplate;, +import org.springframework.social.twitter.support.TwitterResponseStatusCodeTranslator;, +import org.springframework.social.twitter.support.UserApiTemplate;, +	public static final String API_URL_BASE = "https://api.twitter.com/1/";, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/support/DirectMessageApiTemplate.java, +package org.springframework.social.twitter.support;, +, +import java.text.DateFormat;, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.ArrayList;, +import java.util.Date;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +import org.springframework.http.ResponseEntity;, +import org.springframework.social.ResponseStatusCodeTranslator;, +import org.springframework.social.SocialException;, +import org.springframework.social.twitter.DirectMessage;, +import org.springframework.social.twitter.DirectMessageApi;, +import org.springframework.social.twitter.TwitterTemplate;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	public String getDisplayName();, +, +	/**, +	 * The public URL of the connected user's profile at the provider's site., +	 * A client application may use this value along with the displayName to generate a link to the user's profile on the provider's system., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getProfileUrl();, +, +	/**, +	 * A link to a image that visualizes this connection., +	 * Should visually distinguish this connection from others with the same provider., +	 * Generally the small/thumbnail version of the connected provider user's profile picture., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getImageUrl();, +	 * Fetch a normalized model of the user's profile on the provider system., +	 * Capable of exposing the user's name, email, and username., +	 * What is actually exposed depends on the provider and scope of this connection., +	 */, +	ServiceProviderUserProfile fetchUserProfile();, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	public String getDisplayName();, +, +	/**, +	 * The public URL of the connected user's profile at the provider's site., +	 * A client application may use this value along with the displayName to generate a link to the user's profile on the provider's system., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getProfileUrl();, +, +	/**, +	 * A link to a image that visualizes this connection., +	 * Should visually distinguish this connection from others with the same provider., +	 * Generally the small/thumbnail version of the connected provider user's profile picture., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile., +	 * @see #sync(), +	 */, +	public String getImageUrl();, +	 * Fetch a normalized model of the user's profile on the provider system., +	 * Capable of exposing the user's name, email, and username., +	 * What is actually exposed depends on the provider and scope of this connection., +	 */, +	ServiceProviderUserProfile fetchUserProfile();, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	 * A display name or label for this connection., +	 * Should be suitable for display on a UI and distinguish this connection from others with the same provider., +	 * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., +	 * May be null if this information is not public or not provided., +	 * The value of this property may change if the user updates his or her profile.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * @see ConnectionRepository#addConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * @see ConnectionRepository#addConnection(Connection), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, +	 * @param connectionFactoryLocatorProvider the provider of the locator of {@link ConnectionFactory connection factories} that can be used for sign-in;, +	 * @param connectionRepositoryProvider the provider of the current user's {@link ConnectionRepository} instance;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * @see ConnectionRepository#addConnection(Connection), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, +	 * @param connectionFactoryLocatorProvider the provider of the locator of {@link ConnectionFactory connection factories} that can be used for sign-in;, +	 * @param connectionRepositoryProvider the provider of the current user's {@link ConnectionRepository} instance;, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * @param connectionFactoryLocator the locator for {@link ConnectionFactory} instances needed to establish connections, +	 * @param connectionRepositoryProvider the provider of the current user's {@link ConnectionRepository} needed to persist connections]
[+++ b/docs/src/reference/docbook/overview.xml, +    <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke APIs on behalf of Users.</para>, +          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with service providers.</para></listitem>, +              <entry>Spring Social's Connect Framework and OAuth client support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname> which uses the Connect Framework to manage connections in a web application environment.</entry>, +              <entry>Support for testing Connect implementations and API bindings.</entry>, +++ b/docs/src/reference/docbook/overview.xml, +    <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke APIs on behalf of Users.</para>, +          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with service providers.</para></listitem>, +              <entry>Spring Social's Connect Framework and OAuth client support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname> which uses the Connect Framework to manage connections in a web application environment.</entry>, +              <entry>Support for testing Connect implementations and API bindings.</entry>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +			The <interfacename>Connection&lt;S&gt;</interfacename> interface models a connection to an external service provider such as Facebook:, +public interface Connection<A> {, +    ConnectionKey getKey();, +    UserProfile fetchUserProfile();, +    A getApi();, +    ConnectionData createData();, +			Each connection is uniquely identified by a composite key consisting of a providerId (e.g. 'facebook') and connected providerUserId (e.g. '1255689239', for Keith Donald's Facebook ID)., +			A connection's parameterized type &lt;A&gt; represents the Java binding to the ServiceProvider's native API., +			An instance of this API binding can be obtained by calling <code>getApi()</code>., +			As an example, a Facebook connection instance would be parameterized as Connection&lt;FacebookApi&gt;., +			<code>getApi()</code> would return a FacebookApi instance that provides a Java binding to Facebook's graph API for a specific Facebook user., +			To put this model into action, suppose we have a reference to a Connection&lt;TwitterApi&gt; instance., +				<listitem><para>Connection#getKey() would return ('twitter', '14718006') where '14718006' is @kdonald's Twitter-assigned user id that never changes.</para></listitem>, +				<listitem><para>Connection#getDisplayName() would return '@kdonald'.</para></listitem>, +				<listitem><para>Connection#getProfileUrl() would return 'http://twitter.com/kdonald'.</para></listitem>, +				<listitem><para>Connection#getImageUrl() would return 'http://a0.twimg.com/profile_images/105951287/IMG_5863_2_normal.jpg'.</para></listitem>, +				<listitem><para>Connection#sync() would synchronize the state of the connection with @kdonald's profile.</para></listitem>				, +						Connection#test() would return true indicating the authorization credentials associated with the Twitter connection are valid., +				<listitem><para>Connection#hasExpired() would return false.</para></listitem>, +				<listitem><para>Connection#refresh() would not do anything since connections to Twitter do not expire.</para></listitem>, +				<listitem><para>Connection#fetchUserProfile() would make a remote API call to Twitter to get @kdonald's profile data and normalize it into a ServiceProviderUser model.</para></listitem>, +				<listitem><para>Connection#updateStatus(String) would post a status update to @kdonald's timeline.</para></listitem>, +				<listitem><para>Connection#getServiceApi() would return a TwitterApi giving the client application access to the full capabilities of Twitter's native API.</para></listitem>, +				<listitem><para>Connection#createData() would return ConnectionData that could be serialized and used to restore the connection at a later time.</para></listitem>, +			Each authorization protocol is treated as an implementation detail where protocol-specifics are kept out of the core Connection API., +			A ConnectionFactory abstraction encapsulates the construction of connections that use a specific authorization protocol., +			In the following sections, we will discuss the major ConnectionFactory classes provided by the framework., +				In Spring Social, a OAuth2ConnectionFactory is used to establish connections with a OAuth2-based service provider:, +public class OAuth2ConnectionFactory<S> extends ConnectionFactory<S> {, +    public Connection<S> createConnection(AccessGrant accessGrant);, +			 	The example code below shows use of a FacebookConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above., +				Here, FacebookConnectionFactory is a subclass of OAuth2ConnectionFactory:, +FacebookConnectionFactory connectionFactory = new FacebookConnectionFactory("clientId", "clientSecret");, +Connection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);]]>, +FacebookConnectionFactory connectionFactory = new FacebookConnectionFactory("clientId", "clientSecret");, +Connection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);]]>, +			In Spring Social, the OAuth1ConnectionFactory allows you to create connections to a OAuth1-based Service Provider:			, +public class OAuth1ConnectionFactory<S> extends ConnectionFactory<S> {, +    public Connection<S> createConnection(OAuthToken accessToken);, +				The example code below shows use of a TwitterConnectionFactory to create a connection to Facebook using the OAuth1 server-side flow illustrated above., +				Here, TwitterConnectionFactory is a subclass of OAuth1ConnectionFactory:, +TwitterConnectionFactory connectionFactory = new TwitterConnectionFactory("consumerKey", "consumerSecret");, +Connection<TwitterApi> connection = connectionFactory.createConnection(accessToken);]]>, +			<title>Registering ConnectionFactory instances</title>, +ConnectionFactoryRegistry registry = new ConnectionFactoryRegistry();, +registry.addConnectionFactory(new FacebookConnectionFactory("clientId", "clientSecret"));, +registry.addConnectionFactory(new TwitterConnectionFactory("consumerKey", "consumerSecret"));, +registry.addConnectionFactory(new LinkedInConnectionFactory("consumerKey", "consumerSecret"));]]>	, +public interface ConnectionFactoryLocator {, +    ConnectionFactory<?> getConnectionFactory(String providerId);, +    <S> ConnectionFactory<S> getConnectionFactory(Class<S> serviceApiType);, +				Example usage of a ConnectionFactoryLocator is shown below:, +ConnectionFactory<?> connectionFactory = locator.getConnectionFactory("facebook");, +ConnectionFactory<FacebookApi> connectionFactory = locator.getConnectionFactory(FacebookApi.class);]]>	, +			Spring Social provides a ConnectionRepository interface for managing the persistence of a user's connections:, +public interface ConnectionRepository {, +    MultiValueMap<String, Connection<?>> findConnections();, +    List<Connection<?>> findConnectionsToProvider(String providerId);, +    MultiValueMap<String, Connection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUserIds);, +    Connection<?> findConnection(ConnectionKey connectionKey);, +    <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType);, +    <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId);	, +    <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType);, +    void addConnection(Connection<?> connection);, +    void updateConnection(Connection<?> connection);, +    void removeConnection(ConnectionKey connectionKey);, +			As you can see, this interface provides a number of operations for adding, updating, removing, and finding Connections., +			In a multi-user web application environment, this implies ConnectionRepository instances will be request-scoped., +			For multi-user environments, Spring Social provides a UsersConnectionRepository that provides access to the global store of connections across all users:, +public interface UsersConnectionRepository {, +    String findUserIdWithConnection(Connection connection);, +    Set<String> findUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +    ConnectionRepository createConnectionRepository(String userId);, +			As you can see, this repository acts as a factory for ConnectionRepository instances scoped to a single user, as well as exposes a number of multi-user operations., +				Spring Social provides a JdbcUsersConnectionRepository implementation capable of persisting connections to a RDBMS., +				The database schema designed to back this repository is defined in JdbcUsersConnectionRepository.sql., +				The example code below demonstrates construction and usage of a JdbcUsersConnectionRepository:, +// locator for factories needed to construct Connections when restoring from persistent form, +ConnectionFactoryLocator connectionFactoryLocator = ...;, +UsersConnectionRepository usersConnectionRepository =, +    new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, encryptor);, +ConnectionRepository repository = usersConnectionRepository.createConnectionRepository("kdonald");, +Connection<FacebookApi> connection = repository.findPrimaryConnectionToApi(FacebookApi.class);]]>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +	private String scope = null;, +	, +	 * Sets the default value to send in the scope parameter during authorization., +	 * Null by default, meaning that no scope parameter will be sent and the default scope will be determined by the provider., +	 * @param scope The default value to send as scope during authorization., +	 */, +	public void setScope(String scope) {, +		this.scope = scope;, +	}, +	, +	public String getScope() {, +		return scope;, +	}, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +	private String scope = null;, +	, +	 * Sets the default value to send in the scope parameter during authorization., +	 * Null by default, meaning that no scope parameter will be sent and the default scope will be determined by the provider., +	 * @param scope The default value to send as scope during authorization., +	 */, +	public void setScope(String scope) {, +		this.scope = scope;, +	}, +	, +	public String getScope() {, +		return scope;, +	}, +, +	/**, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +		String defaultScope = connectionFactory.getScope();, +		OAuth2Parameters parameters = getOAuth2Parameters(request, defaultScope, additionalParameters);, +	private OAuth2Parameters getOAuth2Parameters(NativeWebRequest request, String defaultScope, MultiValueMap<String, String> additionalParameters) {, +		} else if (defaultScope != null) {, +			parameters.setScope(defaultScope);]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2RequestInterceptorTest.java, +		OAuth2RequestInterceptor interceptor = new OAuth2RequestInterceptor("access_token", OAuth2Version.STANDARD);, +		OAuth2RequestInterceptor interceptor = new OAuth2RequestInterceptor("access_token", OAuth2Version.DRAFT_10);, +		OAuth2RequestInterceptor interceptor = new OAuth2RequestInterceptor("access_token", OAuth2Version.DRAFT_8);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException() {, +		super("Insufficent permission for this operation.");, +		this.requiredPermission = null;, +	}, +, +	/**, +	 * The permission required to access the resource., +	 * May be null if the required permission is unknown., +	 */]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn, Map<String, Object> response) {, +	private Long getIntegerValue(Map<String, Object> map, String key) {, +			return Long.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value;			, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn, Map<String, Object> response) {, +	private Long getIntegerValue(Map<String, Object> map, String key) {, +			return Long.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value;			, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn, Map<String, Object> response) {, +	private Long getIntegerValue(Map<String, Object> map, String key) {, +			return Long.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value;			, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, +		Connection<TestFacebookApi> connection = facebookConnectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +		Connection<TestFacebookApi> connection = facebookConnectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn, Map<String, Object> response) {, +	private Long getIntegerValue(Map<String, Object> map, String key) {, +			return Long.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value;			, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +		Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, +		Connection<TestFacebookApi> connection = facebookConnectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +		Connection<TestFacebookApi> connection = facebookConnectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +					return new AccessGrant("765432109", "read", "654321098", 3600L);, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +		return new AccessGrant("12345", null, "23456", 3600L);, +		return new AccessGrant("12345", null, "23456", 3600L);, +		return new AccessGrant("12345", null,  "23456", 3600L);, +		return new AccessGrant("12345", null,  "23456", 3600L);, +		return new AccessGrant("12345", null,  null, 3600L);, +		return new AccessGrant("12345", null,  null, 3600L);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors.]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	<S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +	<S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, +	/**, +	 * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., +	 * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized ServiceProviderConnection instances e.g. <code>List&lt;ServiceProviderConnection&lt;FacebookApi&gt;&gt;</code>., +	 * @param <S> the service api parameterized type, +	 * @param serviceApiType the service api type e.g. FacebookApi.class or TwitterApi.class, +	 * @return the service provider connection, +	 */, +	<S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	<S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +	<S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, +	/**, +	 * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., +	 * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized ServiceProviderConnection instances e.g. <code>List&lt;ServiceProviderConnection&lt;FacebookApi&gt;&gt;</code>., +	 * @param <S> the service api parameterized type, +	 * @param serviceApiType the service api type e.g. FacebookApi.class or TwitterApi.class, +	 * @return the service provider connection, +	 */, +	<S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	public <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType) {, +	public <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType) {, +	public <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId) {, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	<S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +	<S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, +	/**, +	 * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., +	 * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized ServiceProviderConnection instances e.g. <code>List&lt;ServiceProviderConnection&lt;FacebookApi&gt;&gt;</code>., +	 * @param <S> the service api parameterized type, +	 * @param serviceApiType the service api type e.g. FacebookApi.class or TwitterApi.class, +	 * @return the service provider connection, +	 */, +	<S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	public <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType) {, +	public <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType) {, +	public <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId) {, +++ /dev/null, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	<S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +	<S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, +	/**, +	 * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., +	 * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized ServiceProviderConnection instances e.g. <code>List&lt;ServiceProviderConnection&lt;FacebookApi&gt;&gt;</code>., +	 * @param <S> the service api parameterized type, +	 * @param serviceApiType the service api type e.g. FacebookApi.class or TwitterApi.class, +	 * @return the service provider connection, +	 */, +	<S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	public <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType) {, +	public <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType) {, +	public <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId) {, +++ /dev/null, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +		populator.addScript(new ClassPathResource("JdbcMultiUserServiceProviderConnectionRepository.sql", getClass()));, +	public void findPrimaryConnectionToServiceApi() {, +		assertFacebookConnection(connectionRepository.findPrimaryConnectionToServiceApi(TestFacebookApi.class));, +	public void findPrimaryConnectionToServiceApiSelectFromMultipleByRank() {, +		assertFacebookConnection(connectionRepository.findPrimaryConnectionToServiceApi(TestFacebookApi.class));, +	public void findPrimaryConnectionToServiceApiNoSuchConnection() {, +		assertNull(connectionRepository.findPrimaryConnectionToServiceApi(TestFacebookApi.class));, +	public void findConnectionsToServiceApi() {, +		List<ServiceProviderConnection<TestFacebookApi>> connections = connectionRepository.findConnectionsToServiceApi(TestFacebookApi.class);, +	public void findConnectionToServiceApiForUser() {, +		assertFacebookConnection(connectionRepository.findConnectionToServiceApiForUser(TestFacebookApi.class, "9"));]
[+++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, +	httpComponentsVersion = '4.1.1', +		compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, +		RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/httpclient/HttpComponentsClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support.httpclient;, +, +import java.io.IOException;, +import java.net.URI;, +import java.util.List;, +import java.util.Map;, +, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpEntityEnclosingRequest;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.protocol.HTTP;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.AbstractBufferingClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * {@link org.springframework.http.client.ClientHttpRequest} implementation that uses, + * Apache HTTPComponents HttpClient to execute requests., + *, + * <p>Created via the {@link HttpComponentsClientHttpRequestFactory}., + *, + * @author Oleg Kalnichevski, + * @author Arjen Poutsma, + * @since 3.0, + * @see HttpComponentsClientHttpRequestFactory#createRequest(URI, HttpMethod), + */, +final class HttpComponentsClientHttpRequest extends AbstractBufferingClientHttpRequest {, +, +	private final HttpClient httpClient;, +, +	private final HttpUriRequest httpRequest;, +, +	public HttpComponentsClientHttpRequest(HttpClient httpClient, HttpUriRequest httpRequest) {, +		this.httpClient = httpClient;, +		this.httpRequest = httpRequest;, +	}, +, +	public HttpMethod getMethod() {, +		return HttpMethod.valueOf(httpRequest.getMethod());, +	}, +, +	public URI getURI() {, +		return httpRequest.getURI();, +	}, +, +	@Override, +	protected ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {, +		for (Map.Entry<String, List<String>> entry : headers.entrySet()) {, +			String headerName = entry.getKey();, +			if (!headerName.equalsIgnoreCase(HTTP.CONTENT_LEN) &&, +					!headerName.equalsIgnoreCase(HTTP.TRANSFER_ENCODING)) {, +				for (String headerValue : entry.getValue()) {, +					httpRequest.addHeader(headerName, headerValue);]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/showcase/db/Account.sql" />, +		<jdbc:script location="classpath:/org/springframework/social/showcase/db/data.sql" />, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/showcase/db/Account.sql" />, +		<jdbc:script location="classpath:/org/springframework/social/showcase/db/data.sql" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<logout logout-url="/signout" delete-cookies="JSESSIONID" />, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/showcase/db/Account.sql" />, +		<jdbc:script location="classpath:/org/springframework/social/showcase/db/data.sql" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<logout logout-url="/signout" delete-cookies="JSESSIONID" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/home.jsp, +	<li><a href="facebook">Facebook</a> (Connected? <c:out value="${facebook_status}"/>)</li>, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/showcase/db/Account.sql" />, +		<jdbc:script location="classpath:/org/springframework/social/showcase/db/data.sql" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<logout logout-url="/signout" delete-cookies="JSESSIONID" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/home.jsp, +	<li><a href="facebook">Facebook</a> (Connected? <c:out value="${facebook_status}"/>)</li>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/web.xml, +	, +		<!-- Enables support for DELETE and PUT request methods with web browser clients -->, +	<filter>, +		<filter-name>hiddenHttpMethodFilter</filter-name>]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/Comment.java, +package org.springframework.social.facebook;, +, +import java.util.Date;, +import java.util.List;, +, +/**, + * Represents a comment., + * @author Craig Walls, + */, +public class Comment {, +	private final String id;, +	private final String message;, +	private final Date createdDate;, +	private final Reference from;, +	private final List<Reference> likes;, +, +	public Comment(String id, String message, Date createdDate, Reference from, List<Reference> likes) {, +		this.id = id;, +		this.message = message;, +		this.createdDate = createdDate;, +		this.from = from;, +		this.likes = likes;, +	}, +, +	public String getId() {, +		return id;, +	}, +, +	public String getMessage() {, +		return message;, +	}, +, +	public Date getCreatedDate() {, +		return createdDate;, +	}, +, +	public Reference getFrom() {, +		return from;, +	}, +, +	public List<Reference> getLikes() {, +		return likes;, +	}, +, +}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/Comment.java, +package org.springframework.social.facebook;, +, +import java.util.Date;, +import java.util.List;, +, +/**, + * Represents a comment., + * @author Craig Walls, + */, +public class Comment {, +	private final String id;, +	private final String message;, +	private final Date createdDate;, +	private final Reference from;, +	private final List<Reference> likes;, +, +	public Comment(String id, String message, Date createdDate, Reference from, List<Reference> likes) {, +		this.id = id;, +		this.message = message;, +		this.createdDate = createdDate;, +		this.from = from;, +		this.likes = likes;, +	}, +, +	public String getId() {, +		return id;, +	}, +, +	public String getMessage() {, +		return message;, +	}, +, +	public Date getCreatedDate() {, +		return createdDate;, +	}, +, +	public Reference getFrom() {, +		return from;, +	}, +, +	public List<Reference> getLikes() {, +		return likes;, +	}, +, +}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]
[+++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(512) not null,, +    secret varchar(512),, +    refreshToken varchar(512),, +++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(512) not null,, +    secret varchar(512),, +    refreshToken varchar(512),, +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedOperations.java, +import org.springframework.social.facebook.types.Post;, +	 * @return a list of {@link Post}s for the authenticated user. , +	List<Post> getFeed();, +	 * @return a list of {@link Post}s for the specified user. , +	List<Post> getFeed(String ownerId);, +	 * @return a list of {@link Post}s from the authenticated user's home feed., +	List<Post> getHomeFeed();, +	 * @return a list of {@link Post}s from the specified user's home feed., +	List<Post> getHomeFeed(String userId);, +	 * @return the requested {@link Post}, +	Post getFeedEntry(String entryId);, +	 * @return a list of status {@link Post}s. , +	List<Post> getStatuses();, +	 * @return a list of status {@link Post}s. , +	List<Post> getStatuses(String userId);, +	 * @return a list of link {@link Post}s. , +	List<Post> getLinks();, +	 * @return a list of link {@link Post}s. , +	List<Post> getLinks(String ownerId);, +	 * @return a list of note {@link Post}s. , +	List<Post> getNotes();, +	 * @return a list of note {@link Post}s. , +	List<Post> getNotes(String ownerId);, +	 * @return a list of post {@link Post}s. , +	List<Post> getPosts();, +	 * @return a list of post {@link Post}s. , +	List<Post> getPosts(String ownerId);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedOperations.java, +import org.springframework.social.facebook.types.Post;, +	 * @return a list of {@link Post}s for the authenticated user. , +	List<Post> getFeed();, +	 * @return a list of {@link Post}s for the specified user. , +	List<Post> getFeed(String ownerId);, +	 * @return a list of {@link Post}s from the authenticated user's home feed., +	List<Post> getHomeFeed();, +	 * @return a list of {@link Post}s from the specified user's home feed., +	List<Post> getHomeFeed(String userId);, +	 * @return the requested {@link Post}, +	Post getFeedEntry(String entryId);, +	 * @return a list of status {@link Post}s. , +	List<Post> getStatuses();, +	 * @return a list of status {@link Post}s. , +	List<Post> getStatuses(String userId);, +	 * @return a list of link {@link Post}s. , +	List<Post> getLinks();, +	 * @return a list of link {@link Post}s. , +	List<Post> getLinks(String ownerId);, +	 * @return a list of note {@link Post}s. , +	List<Post> getNotes();, +	 * @return a list of note {@link Post}s. , +	List<Post> getNotes(String ownerId);, +	 * @return a list of post {@link Post}s. , +	List<Post> getPosts();, +	 * @return a list of post {@link Post}s. , +	List<Post> getPosts(String ownerId);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedTemplate.java, +import org.springframework.social.facebook.support.json.PostList;, +import org.springframework.social.facebook.types.Post;, +	public List<Post> getFeed() {, +	public List<Post> getFeed(String ownerId) {, +		return graphApi.fetchConnections(ownerId, "feed", PostList.class).getList();, +	public List<Post> getHomeFeed() {, +	public List<Post> getHomeFeed(String userId) {, +		return graphApi.fetchConnections(userId, "home", PostList.class).getList();, +	public List<Post> getStatuses() {, +	public List<Post> getStatuses(String userId) {, +		return graphApi.fetchConnections(userId, "statuses", PostList.class).getList();, +	public List<Post> getLinks() {, +	public List<Post> getLinks(String ownerId) {, +		return graphApi.fetchConnections(ownerId, "links", PostList.class).getList();, +	public Post getNote(String noteId) {, +		return graphApi.fetchObject(noteId, Post.class);, +	public List<Post> getNotes() {, +	public List<Post> getNotes(String ownerId) {, +		return graphApi.fetchConnections(ownerId, "notes", PostList.class).getList();, +	public List<Post> getPosts() {, +	public List<Post> getPosts(String ownerId) {, +		return graphApi.fetchConnections(ownerId, "posts", PostList.class).getList();, +	public Post getFeedEntry(String entryId) {, +		return graphApi.fetchObject(entryId, Post.class);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedOperations.java, +import org.springframework.social.facebook.types.Post;, +	 * @return a list of {@link Post}s for the authenticated user. , +	List<Post> getFeed();, +	 * @return a list of {@link Post}s for the specified user. , +	List<Post> getFeed(String ownerId);, +	 * @return a list of {@link Post}s from the authenticated user's home feed., +	List<Post> getHomeFeed();, +	 * @return a list of {@link Post}s from the specified user's home feed., +	List<Post> getHomeFeed(String userId);, +	 * @return the requested {@link Post}, +	Post getFeedEntry(String entryId);, +	 * @return a list of status {@link Post}s. , +	List<Post> getStatuses();, +	 * @return a list of status {@link Post}s. , +	List<Post> getStatuses(String userId);, +	 * @return a list of link {@link Post}s. , +	List<Post> getLinks();, +	 * @return a list of link {@link Post}s. ]
[+++ b/docs/src/reference/docbook/overview.xml, +					Although shown here to depend on version 4.1.1 of the HttpClient library, Spring Social can also with with 4.0.X versions of HttpClient.]
[+++ b/build.gradle, +      jacksonVersion = '2.2.1', +        testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +        testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +++ b/build.gradle, +      jacksonVersion = '2.2.1', +        testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +        testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +	 * This implementation creates a RestTemplate with a minimal set of HTTP message converters ({@link FormHttpMessageConverter} and {@link MappingJackson2HttpMessageConverter})., +		converters.add(new MappingJackson2HttpMessageConverter());, +++ b/build.gradle, +      jacksonVersion = '2.2.1', +        testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +        testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +	 * This implementation creates a RestTemplate with a minimal set of HTTP message converters ({@link FormHttpMessageConverter} and {@link MappingJackson2HttpMessageConverter})., +		converters.add(new MappingJackson2HttpMessageConverter());, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java]
[+++ b/pom.xml, +			<version>1.0.3</version>]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (July 25, 2011), +=======================================================, +Bug Fixes, +   * Display a message indicating a user should sign-up after a provider, +     sign-in is unable to find a matching local user. (SOCIAL-207), +   * When ConnectController is given an application URL, it now uses the, +     entire URL to construct the callback URL instead of piecing together, +     the callback URL from specific parts of it. (SOCIAL-200), +   * Use coalesce function in SQL rather than ifnull for greater DB, +     compatibility. (SOCIAL-226), +   * Added cache-control headers in response for ConnectController status, +     pages to prevent caching. (SOCIAL-224), +   * Made ConnectionKey to implement Serializable, so that DuplicateConnectionException, +     can be serialized in the session. (SOCIAL-225), +, +=======================================================]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken) access token}., +	 * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., +	 * @return a temporary request token use for authorization and exchanged for an access token , +	 * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;]
[+++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeSocialAuthenticationService.java, +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeSocialAuthenticationService.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubConnectionRepository.java, +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeSocialAuthenticationService.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubConnectionRepository.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubUsersConnectionRepository.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +, +/**, + * Strategy interface used by {@link SocialAuthenticationFilter} to determine the account ID of the current user., + * @author Stefan Fussennegger, + * @author Craig Walls, + */, +public interface UserIdSource {, +, +	/**, +	 * Returns an account ID., +	 */, +	String getUserId();, +, +}, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;]
[+++ b/docs/src/reference/docbook/connecting.xml, +			Each <interfacename>ServiceProvider</interfacename> should be configured with the client key and secret that were assigned to it when the application was registered with the service provider., +++ b/docs/src/reference/docbook/connecting.xml, +			Each <interfacename>ServiceProvider</interfacename> should be configured with the client key and secret that were assigned to it when the application was registered with the service provider., +++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg value="#{environment['facebook.appId']}" />, +    <constructor-arg value="#{environment['facebook.appSecret']}" />, +			Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook app id and secret that were issued to the application when it was first registered in Facebook. , +			It uses the app id to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures., +			The <code><![CDATA[<facebook:init>]]></code> will initialize the Facebook JavaScript library with your application's app id., +			This is the appId assigned to your application when you registered it with Facebook., +			It retrieves the appId from a Spring context's environment property whose name is "facebook.appId"., +			If that property is not set or if you'd rather specify the appId explicitly, you can do so by setting the <code>appId</code> attribute:, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>]
[+++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-canvas - Demonstrates how to use Spring Social within a Facebook Canvas application.</para></listitem>]
[+++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="connectionRepository" />, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/signin" access="permitAll" />, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/signin" access="permitAll" />, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/facebookConnect.jsp, +	<p>...or...</p>, +	, +		<input type="hidden" name="huh" value="What the crap?" />, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/signin" access="permitAll" />, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/facebookConnect.jsp, +	<p>...or...</p>, +	, +		<input type="hidden" name="huh" value="What the crap?" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<p>If you've previously established a connection with Twitter or Facebook, you may signin to the Spring Social Showcase , +by signing into one of these social networks.</p>, +<form action="<c:url value="/connect/twitter/signin" />" method="post">, +	<button type="submit">Sign In With Twitter</button>, +</form>, +, +<form action="<c:url value="/connect/facebook/signin" />" method="post">, +	<button type="submit">Sign In With Facebook</button>, +</form>, +, +<p>Or you may signin using a username and password:</p>, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/signin" access="permitAll" />, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/facebookConnect.jsp, +	<p>...or...</p>, +	, +		<input type="hidden" name="huh" value="What the crap?" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<p>If you've previously established a connection with Twitter or Facebook, you may signin to the Spring Social Showcase , +by signing into one of these social networks.</p>, +<form action="<c:url value="/connect/twitter/signin" />" method="post">, +	<button type="submit">Sign In With Twitter</button>, +</form>, +, +<form action="<c:url value="/connect/facebook/signin" />" method="post">, +	<button type="submit">Sign In With Facebook</button>, +</form>, +, +<p>Or you may signin using a username and password:</p>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(requestTokenUrl, requestTokenParameters, null);, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, requestToken.getSecret());, +	private OAuthToken getTokenFromProvider(String tokenUrl, Map<String, String> tokenRequestParameters, String tokenSecret) {, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, tokenSecret));, +		HttpEntity<String> request = new HttpEntity<String>(headers);, +	private String getAuthorizationHeaderValue(String tokenUrl, Map<String, String> tokenRequestParameters, String tokenSecret) {, +		return SigningUtils.buildAuthorizationHeaderValue(tokenUrl, oauthParameters, Collections.<String, String> emptyMap(), HttpMethod.POST, consumerSecret, tokenSecret);		, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider && other.providerUserId == null;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider && other.providerUserId == null;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/ConnectionKeyTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import static org.junit.Assert.*;, +, +import org.junit.Test;, +, +public class ConnectionKeyTest {, +	, +	@Test, +	public void equals() {, +		ConnectionKey key1 = new ConnectionKey("provider1", "providerUser1");, +		ConnectionKey key2 = new ConnectionKey("provider1", "providerUser1");, +, +		// reflexive, +		assertEquals(key1, key1);, +		, +		// symmetric, +		assertEquals(key1, key2);, +		assertEquals(key2, key1);, +	}, +, +	@Test, +	public void equals_nullProviderUserId() {, +		ConnectionKey key1 = new ConnectionKey("provider1", null);, +		ConnectionKey key2 = new ConnectionKey("provider1", null);, +, +		// reflexive, +		assertEquals(key1, key1);, +		, +		// symmetric, +		assertEquals(key1, key2);, +		assertEquals(key2, key1);, +	}, +, +	@Test, +	public void equals_notEqual() {, +		ConnectionKey key1 = new ConnectionKey("provider1", "providerUser1");, +		ConnectionKey key2 = new ConnectionKey("provider2", "providerUser1");, +		ConnectionKey key3 = new ConnectionKey("provider1", "providerUser2");, +		ConnectionKey key4 = new ConnectionKey("provider1", null);, +		, +		assertFalse(key1.equals(key2));, +		assertFalse(key2.equals(key1));, +		assertFalse(key1.equals(key3));, +		assertFalse(key3.equals(key1));, +		assertFalse(key2.equals(key3));, +		assertFalse(key3.equals(key2));, +		assertFalse(key1.equals(key4));, +		assertFalse(key4.equals(key1));, +	}, +, +	@Test, +	public void hashCode_providerIdOnly() {, +		ConnectionKey key = new ConnectionKey("provider1", null);, +		assertEquals("provider1".hashCode(), key.hashCode());, +	}, +, +	@Test, +	public void hashCode_providerIdAndProviderUserId() {, +		ConnectionKey key = new ConnectionKey("provider1", "providerUser1");, +		assertEquals("provider1".hashCode() + "providerUser1".hashCode(), key.hashCode());, +	}, +, +	@Test, +	public void toString_providerIdAndProviderUserId() {, +		ConnectionKey key = new ConnectionKey("provider1", "providerUser1");, +		assertEquals("provider1:providerUser1", key.toString());, +	}, +	, +	@Test, +	public void toString_providerIdOnly() {, +		ConnectionKey key = new ConnectionKey("provider1", null);, +		assertEquals("provider1:null", key.toString());, +	}, +}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.client.ClientHttpRequestFactory;, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * @param requestFactory, +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		this.restTemplate.setRequestFactory(requestFactory);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.client.ClientHttpRequestFactory;, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * @param requestFactory, +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		this.restTemplate.setRequestFactory(requestFactory);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.http.client.ClientHttpRequestFactory;, +	/**, +	 * Set the request factory on the underlying RestTemplate., +	 * @param requestFactory, +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		this.restTemplate.setRequestFactory(requestFactory);, +	}, +]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.GenericTypeResolver;, +	private final static Log logger = LogFactory.getLog(AbstractConnectionFactoryBeanDefinitionParser.class);, +, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiHelperClass) {, +		this.apiHelperClass = apiHelperClass;, +		this.apiBindingType = GenericTypeResolver.resolveTypeArgument(connectionFactoryClass, ConnectionFactory.class);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactory for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactoryLocator bean");, +		}		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering API Helper bean for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		String helperId = "__" + ClassUtils.getShortNameAsProperty(apiBindingType) + "ApiHelper";, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(helperId, helperBD);, +		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Creating API Binding bean for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		BeanDefinition bindingBD = BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();, +		bindingBD.setFactoryBeanName(helperId);, +		bindingBD.setFactoryMethodName("getApi");, +		bindingBD.setScope("request");, +		BeanDefinitionHolder scopedProxyBDH = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(bindingBD, ClassUtils.getShortNameAsProperty(apiBindingType)), parserContext.getRegistry(), false);, +		parserContext.getRegistry().registerBeanDefinition(scopedProxyBDH.getBeanName(), scopedProxyBDH.getBeanDefinition());, +		return scopedProxyBDH.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.GenericTypeResolver;, +	private final static Log logger = LogFactory.getLog(AbstractConnectionFactoryBeanDefinitionParser.class);, +, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiHelperClass) {, +		this.apiHelperClass = apiHelperClass;, +		this.apiBindingType = GenericTypeResolver.resolveTypeArgument(connectionFactoryClass, ConnectionFactory.class);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactory for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactoryLocator bean");, +		}		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering API Helper bean for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		String helperId = "__" + ClassUtils.getShortNameAsProperty(apiBindingType) + "ApiHelper";, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(helperId, helperBD);, +		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Creating API Binding bean for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		BeanDefinition bindingBD = BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();, +		bindingBD.setFactoryBeanName(helperId);, +		bindingBD.setFactoryMethodName("getApi");, +		bindingBD.setScope("request");, +		BeanDefinitionHolder scopedProxyBDH = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(bindingBD, ClassUtils.getShortNameAsProperty(apiBindingType)), parserContext.getRegistry(), false);, +		parserContext.getRegistry().registerBeanDefinition(scopedProxyBDH.getBeanName(), scopedProxyBDH.getBeanDefinition());, +		return scopedProxyBDH.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ApiHelper.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +/**, + * Interface defining the operations required for an API helper., + * An API helper will be used to either fetch or intantiate an instance of the API binding class., + * @author Craig Walls, + *, + * @param <T> The API type that this helper will return, + */, +public interface ApiHelper<T> {, +, +	T getApi();, +, +}]
[+++ b/gradle.properties, +springSecurityVersion=3.2.9.RELEASE, +httpComponentsVersion=4.3.6, +aspectjVersion=1.8.5, +springVersion=4.1.8.RELEASE, +springSnapshotVersion=latest.integration, +hamcrestVersion=1.3, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +jspApiVersion=2.2.1, +mockitoVersion=1.10.19, +javaxInjectVersion=1]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +/**, + * Interface defining the Twitter operations for working with direct messages., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +/**, + * Interface defining the Twitter operations for working with direct messages., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendsApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +/**, + * Interface defining the operations for working with a user's friends and followers., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +/**, + * Interface defining the Twitter operations for working with direct messages., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendsApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +/**, + * Interface defining the operations for working with a user's friends and followers., + * @author Craig Walls, + */]
[+++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ /dev/null, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ /dev/null, +++ /dev/null, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderUserSignInAttempt.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.signin.web;, +, +import java.io.Serializable;, +, +import javax.inject.Provider;, +, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.connect.ServiceProviderConnectionRepository;, +, +/**, + * Models an attempt to sign-in to the application using a provider user identity., + * Instances are created when the provider sign-in process could not be completed because no local user is associated with the provider user., + * This could happen because the user has not yet signed up with the application, or has not yet connected their local application identity with the their provider identity., + * For the former scenario, callers should invoke {@link #addConnection()} post-signup to establish a connection between a new user account and the provider account., + * For the latter, existing users should sign-in using their local application credentials and formally connect to the provider they also wish to authenticate with., + * @author Keith Donald, + */, +@SuppressWarnings("serial"), +public class ProviderUserSignInAttempt implements Serializable {, +, +	/**, +	 * Name of the session attribute ProviderSignInAttempt instances are indexed under., +	 */, +	static final String SESSION_ATTRIBUTE = ProviderUserSignInAttempt.class.getName();, +, +	// TODO: ServiceProviderConnections are not inherently Serializable: this may present a problem in a clustered web environment., +	// Consider storing a ServiceProviderConnectionData here along with a Provider<ServiceProviderConnectionFactory>., +	private final ServiceProviderConnection<?> connection;, +	, +	private final Provider<ServiceProviderConnectionRepository> connectionRepositoryProvider;, +		, +	public ProviderUserSignInAttempt(ServiceProviderConnection<?> connection, Provider<ServiceProviderConnectionRepository> connectionRepositoryProvider) {, +		this.connection = connection;, +		this.connectionRepositoryProvider = connectionRepositoryProvider;		, +	}, +	, +	/**, +	 * Get the connection to the provider user account the client attempted to sign-in as., +	 * Using this connection you may fetch a {@link ServiceProviderConnection#fetchUserProfile() provider user profile} and use that to pre-populate a local user registration/signup form., +	 * You can also lookup the id of the provider and use that to display a provider-specific user-sign-in-attempt flash message e.g. "Your Facebook Account is not connected to a Local account. Please sign up.", +	 */, +	public ServiceProviderConnection<?> getConnection() {, +		return connection;, +	}, +	, +	/**, +	 * Connect the new local user to the provider., +	 */, +	void addConnection() {, +		connectionRepositoryProvider.get().addConnection(connection);, +	}, +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	/**, +	 * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., +	 * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., +	 * Simply carries the error parameters through to the sign-in page., +	 */, +	@RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), +	public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , +			@RequestParam("error") String error, , +			@RequestParam(value="error_description", required=false) String errorDescription,, +			@RequestParam(value="error_uri", required=false) String errorUri,, +			NativeWebRequest request) {, +		logger.warn("Error during authorization: " + error);, +		URIBuilder uriBuilder = URIBuilder.fromUri(signInUrl).queryParam("error", error);, +		if (errorDescription != null ) { uriBuilder.queryParam("error_description", errorDescription); }, +		if (errorUri != null ) { uriBuilder.queryParam("error_uri", errorUri); }, +		return redirect(uriBuilder.build().toString());, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	/**, +	 * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., +	 * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., +	 * Simply carries the error parameters through to the sign-in page., +	 */, +	@RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), +	public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , +			@RequestParam("error") String error, , +			@RequestParam(value="error_description", required=false) String errorDescription,, +			@RequestParam(value="error_uri", required=false) String errorUri,, +			NativeWebRequest request) {, +		logger.warn("Error during authorization: " + error);, +		URIBuilder uriBuilder = URIBuilder.fromUri(signInUrl).queryParam("error", error);, +		if (errorDescription != null ) { uriBuilder.queryParam("error_description", errorDescription); }, +		if (errorUri != null ) { uriBuilder.queryParam("error_uri", errorUri); }, +		return redirect(uriBuilder.build().toString());, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +	public void oauth2ErrorCallback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		MockMvc mockMvc = standaloneSetup(controller).build();		, +		mockMvc.perform(get("/signin/oauth2Provider").param("error", "access_denied")), +			.andExpect(redirectedUrl("/signin?error=access_denied"));, +		, +	}, +, +	@Test, +	public void oauth2ErrorCallback_withDescriptionAndUri() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		MockMvc mockMvc = standaloneSetup(controller).build();		, +		mockMvc.perform(get("/signin/oauth2Provider"), +				.param("error", "access_denied"), +				.param("error_description", "The user said no."), +				.param("error_uri", "http://provider.com/user/said/no")), +			.andExpect(redirectedUrl("/signin?error=access_denied&error_description=The+user+said+no.&error_uri=http%3A%2F%2Fprovider.com%2Fuser%2Fsaid%2Fno"));, +	}, +, +	@Test]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest)}, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest)}., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest)}, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest)}., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SignInAdapter.java, +	 * @param request a reference to the current web request; is a "native" web request instance providing access to the native]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +	<title>Service provider 'connect' framework</title>]
[+++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, +		facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/data.xml, +++ b/build.gradle, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;]
[+++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.social.security;, +, +import org.springframework.social.SocialException;, +, +@SuppressWarnings("serial"), +public class SocialAuthenticationException extends SocialException {, +, +	public SocialAuthenticationException() {, +		super("");, +	}, +, +	public SocialAuthenticationException(String message) {, +		super(message);, +	}, +, +	public SocialAuthenticationException(Throwable cause) {, +		super("", cause);, +	}, +, +	public SocialAuthenticationException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedOperations.java, +import org.springframework.social.facebook.types.LinkPost;, +import org.springframework.social.facebook.types.NotePost;, +import org.springframework.social.facebook.types.Post;, +import org.springframework.social.facebook.types.StatusPost;, +	 * @return a list of {@link Post}s for the authenticated user. , +	List<Post> getFeed();, +	 * @return a list of {@link Post}s for the specified user. , +	List<Post> getFeed(String ownerId);, +	 * @return a list of {@link Post}s from the authenticated user's home feed., +	List<Post> getHomeFeed();, +	 * @return a list of {@link Post}s from the specified user's home feed., +	List<Post> getHomeFeed(String userId);, +	 * @return the requested {@link Post}, +	Post getFeedEntry(String entryId);, +	 * @return a list of status {@link Post}s. , +	List<StatusPost> getStatuses();, +	 * @return a list of status {@link Post}s. , +	List<StatusPost> getStatuses(String userId);, +	 * @return a list of link {@link Post}s. , +	List<LinkPost> getLinks();, +	 * @return a list of link {@link Post}s. , +	List<LinkPost> getLinks(String ownerId);, +	 * @return a list of note {@link Post}s. , +	List<NotePost> getNotes();, +	 * @return a list of note {@link Post}s. , +	List<NotePost> getNotes(String ownerId);, +	 * @return a list of post {@link Post}s. , +	List<Post> getPosts();, +	 * @return a list of post {@link Post}s. , +	List<Post> getPosts(String ownerId);, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedOperations.java, +import org.springframework.social.facebook.types.LinkPost;, +import org.springframework.social.facebook.types.NotePost;, +import org.springframework.social.facebook.types.Post;, +import org.springframework.social.facebook.types.StatusPost;, +	 * @return a list of {@link Post}s for the authenticated user. , +	List<Post> getFeed();, +	 * @return a list of {@link Post}s for the specified user. , +	List<Post> getFeed(String ownerId);, +	 * @return a list of {@link Post}s from the authenticated user's home feed., +	List<Post> getHomeFeed();, +	 * @return a list of {@link Post}s from the specified user's home feed., +	List<Post> getHomeFeed(String userId);, +	 * @return the requested {@link Post}, +	Post getFeedEntry(String entryId);, +	 * @return a list of status {@link Post}s. , +	List<StatusPost> getStatuses();, +	 * @return a list of status {@link Post}s. , +	List<StatusPost> getStatuses(String userId);, +	 * @return a list of link {@link Post}s. , +	List<LinkPost> getLinks();, +	 * @return a list of link {@link Post}s. , +	List<LinkPost> getLinks(String ownerId);, +	 * @return a list of note {@link Post}s. , +	List<NotePost> getNotes();, +	 * @return a list of note {@link Post}s. , +	List<NotePost> getNotes(String ownerId);, +	 * @return a list of post {@link Post}s. , +	List<Post> getPosts();, +	 * @return a list of post {@link Post}s. , +	List<Post> getPosts(String ownerId);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedTemplate.java, +import org.springframework.social.facebook.support.json.LinkPostList;, +import org.springframework.social.facebook.support.json.NotePostList;, +import org.springframework.social.facebook.support.json.PostList;, +import org.springframework.social.facebook.support.json.StatusPostList;, +import org.springframework.social.facebook.types.LinkPost;, +import org.springframework.social.facebook.types.NotePost;, +import org.springframework.social.facebook.types.Post;, +import org.springframework.social.facebook.types.StatusPost;, +	public List<Post> getFeed() {, +	public List<Post> getFeed(String ownerId) {, +		return graphApi.fetchConnections(ownerId, "feed", PostList.class).getList();, +	public List<Post> getHomeFeed() {, +	public List<Post> getHomeFeed(String userId) {, +		return graphApi.fetchConnections(userId, "home", PostList.class).getList();, +	public List<StatusPost> getStatuses() {, +	public List<StatusPost> getStatuses(String userId) {, +		return graphApi.fetchConnections(userId, "statuses", StatusPostList.class).getList();, +	public List<LinkPost> getLinks() {, +	public List<LinkPost> getLinks(String ownerId) {, +		return graphApi.fetchConnections(ownerId, "links", LinkPostList.class).getList();, +	public List<NotePost> getNotes() {, +	public List<NotePost> getNotes(String ownerId) {, +		return graphApi.fetchConnections(ownerId, "notes", NotePostList.class).getList();, +	public List<Post> getPosts() {, +	public List<Post> getPosts(String ownerId) {, +		return graphApi.fetchConnections(ownerId, "posts", PostList.class).getList();, +	public Post getFeedEntry(String entryId) {, +		return graphApi.fetchObject(entryId, Post.class);, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedOperations.java, +import org.springframework.social.facebook.types.LinkPost;, +import org.springframework.social.facebook.types.NotePost;, +import org.springframework.social.facebook.types.Post;, +import org.springframework.social.facebook.types.StatusPost;]
[+++ b/.gitignore, +src/test/java/exploration]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private String filterProcessesUrl = DEFAULT_FILTER_PROCESSES_URL;, +		super(DEFAULT_FILTER_PROCESSES_URL);, +		this.filterProcessesUrl = filterProcessesUrl;, +	private static final String DEFAULT_FILTER_PROCESSES_URL = "/auth";, +]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., +	 * @return a temporary request token use for authorization and exchanged for an access token , +	 * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., +	 * @return a temporary request token use for authorization and exchanged for an access token , +	 * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + * , + * <h4>Parameter Encoding</h4>, + * , + * <p>The underlying OAuth signing algorithm assumes that query parameters are encoded as application/x-www-form-urlencoded., + * The RestTemplate methods that take String URL templates encode query parameters per RFC 3986 and not form-encoded., + * This leads to problems where certain characters are improperly encoded. Spaces, for example are encoded as %20 instead of +; , + * and an actual + sign is left unencoded (and will be interpreted as a space when decoded as if it were form-encoded).</p>, + * , + * <p>However, RestTemplate's methods that take URIs will leave the URI's parameters untouched. Therefore, when consuming a REST operation, + * with query parameters that require encoding (for example, if passing a + sign in a parameter value) you should use RestTemplate's, + * URI-based methods constructed with form-encoded parameters. See URIBuilder for a convenient way to build up such URIs.</p>, + * , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., +	 * @return a temporary request token use for authorization and exchanged for an access token , +	 * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + * , + * <h4>Parameter Encoding</h4>, + * , + * <p>The underlying OAuth signing algorithm assumes that query parameters are encoded as application/x-www-form-urlencoded., + * The RestTemplate methods that take String URL templates encode query parameters per RFC 3986 and not form-encoded., + * This leads to problems where certain characters are improperly encoded. Spaces, for example are encoded as %20 instead of +; , + * and an actual + sign is left unencoded (and will be interpreted as a space when decoded as if it were form-encoded).</p>, + * , + * <p>However, RestTemplate's methods that take URIs will leave the URI's parameters untouched. Therefore, when consuming a REST operation, + * with query parameters that require encoding (for example, if passing a + sign in a parameter value) you should use RestTemplate's, + * URI-based methods constructed with form-encoded parameters. See URIBuilder for a convenient way to build up such URIs.</p>, + * , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	 * The elements in additionalParameters are expected to not be encoded.]
[+++ b/build.gradle, +        compile project (':spring-social-web'), +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, +	public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , +			throws SocialAuthenticationRedirectException, AuthenticationException {, +	private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, +	private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection, authServiceLocator, usersConnectionRepository));, +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, +	public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , +			throws SocialAuthenticationRedirectException, AuthenticationException {, +	private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, +	private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection, authServiceLocator, usersConnectionRepository));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +import org.springframework.social.connect.ConnectionData;, +                ConnectionData connectionData = connection.createData();, +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, +	public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , +			throws SocialAuthenticationRedirectException, AuthenticationException {, +	private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, +	private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection, authServiceLocator, usersConnectionRepository));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +import org.springframework.social.connect.ConnectionData;, +                ConnectionData connectionData = connection.createData();, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, +	public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , +			throws SocialAuthenticationRedirectException, AuthenticationException {, +	private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, +	private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection, authServiceLocator, usersConnectionRepository));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +import org.springframework.social.connect.ConnectionData;, +                ConnectionData connectionData = connection.createData();, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, +	public static final String SESSION_ATTRIBUTE = ProviderSignInAttempt.class.getName();]
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/ClientRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.security.oauth.client;, +, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +, +/**, + * Note: temporary implementation until ClientRequestInterceptor concept introduced in Spring Framework., + * , + * A client request for a resource protected by OAuth., + * Used to sign the request with OAuth credentials before it is executed., + * @author Keith Donald, + */, +public final class ClientRequest {, +	, +	private final HttpHeaders headers;, +	, +	private final byte[] body;, +	, +	private final URI uri;, +	, +	private final HttpMethod method;, +, +	public ClientRequest(HttpHeaders headers, byte[] body, URI uri, HttpMethod method) {, +		this.headers = headers;, +		this.body = body;, +		this.uri = uri;, +		this.method = method;, +	}, +, +	/**, +	 * The request headers., +	 * Will usually be modified during the signing process; for example, to add an Authorization header., + 	 */, +	public HttpHeaders getHeaders() {, +		return headers;, +	}, +, +	/**, +	 * The request body., +	 * Needed for signature generation for OAuth 1 requests., +	 */, +	public byte[] getBody() {, +		return body;, +	}, +, +	/**, +	 * The target resource URL., +	 * Needed for signature generation for OAuth 1 requests. , +	 */, +	public URI getUri() {, +		return uri;, +	}, +, +	/**, +	 * The request method., +	 * Needed for signature generation for OAuth 1 requests. , +	 */, +	public HttpMethod getMethod() {, +		return method;, +	}, +	, +}, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/ClientRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.security.oauth.client;, +, +import java.net.URI;, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +		ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +		ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +		ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oauth1.getRestTemplate());, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oauth1.getRestTemplate());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +		ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oauth1.getRestTemplate());, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oauth1.getRestTemplate());, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +				.getRestTemplate());]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	private static void setInterceptor(RestTemplate client, Object interceptor) {, +				interceptors.add((ClientHttpRequestInterceptor) interceptor);, +				setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { (ClientHttpRequestInterceptor) interceptor }});, +		if (interceptorsSupported) {, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	private static void setInterceptor(RestTemplate client, Object interceptor) {, +				interceptors.add((ClientHttpRequestInterceptor) interceptor);, +				setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { (ClientHttpRequestInterceptor) interceptor }});, +		if (interceptorsSupported) {, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +	private static void setInterceptor(RestTemplate client, Object interceptor) {, +				interceptors.add((ClientHttpRequestInterceptor) interceptor);, +				setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { (ClientHttpRequestInterceptor) interceptor }});, +		if (interceptorsSupported) {, +	}]
[+++ b/docs/src/reference/docbook/signin.xml, +import org.springframework.social.web.signin.SignInService;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10aServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10aOperations;, +, +public abstract class AbstractOAuth10aServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10aServiceProvider<S> {, +, +	private final OAuth10aOperations oauth1Operations;, +, +	public AbstractOAuth10aServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10aOperations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10aOperations getOAuth10aOperations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10aServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10aOperations;, +, +public abstract class AbstractOAuth10aServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10aServiceProvider<S> {, +, +	private final OAuth10aOperations oauth1Operations;, +, +	public AbstractOAuth10aServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10aOperations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +]
[+++ b/.gitignore, +spring-social-core/src/test/java/exploration, +++ b/.gitignore, +spring-social-core/src/test/java/exploration, +++ b/spring-social-core/src/test/java/org/springframework/social/twitter/TwitterTemplateTest.java, +	@SuppressWarnings("unchecked")]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import java.util.List;, +, +import org.springframework.social.facebook.types.Checkin;, +, +/**, + * Defines the operations for interacting with a user's Facebook checkins., + * @author Craig Walls, + */, +public interface CheckinApi {, +	, +	/**, +	 * Retrieves a list of checkins for the authenticated user., +	 * Requires "user_checkins" or "friends_checkins" permission., +	 * @return a list {@link Checkin}s for the user, or an empty list if not available., +	 */, +	List<Checkin> getCheckins();, +, +	/**, +	 * Retrieves a list of checkins for the specified object., +	 * If the object is a user, this returns checkins for places the user has checked into., +	 * If the object is a page, then this returns checkins that the user's friends has made to the location that the page represents., +	 * Requires "user_checkins" or "friends_checkins" permission., +	 * @param objectId either a Facebook user ID or page ID, +	 * @return a list {@link Checkin}s, or an empty list if not available., +	 */, +	List<Checkin> getCheckins(String objectId);, +, +	/**, +	 * Retrieves details for a single checkin., +	 * @param checkinId the checkin ID, +	 * @return a {@link Checkin}, +	 */, +	Checkin getCheckin(String checkinId);, +	, +	/**, +	 * Checks the authenticated user into the specified location., +	 * @param placeId the ID of the place to check into., +	 * @param latitude the latitude of the place., +	 * @param longitude the longitude of the place., +	 * @return the ID of the checkin., +	 */, +	String checkin(String placeId, double latitude, double longitude);, +, +	/**, +	 * Checks the authenticated user into the specified location., +	 * @param placeId the ID of the place to check into., +	 * @param latitude the latitude of the place., +	 * @param longitude the longitude of the place., +	 * @param a message to post along with the checkin., +	 * @param tags a varargs list of user IDs to tag on the checkin., +	 * @return the ID of the checkin., +	 */, +	String checkin(String placeId, double latitude, double longitude, String message, String... tags);, +	, +}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import java.util.List;, +, +import org.springframework.social.facebook.types.Checkin;, +, +/**, + * Defines the operations for interacting with a user's Facebook checkins., + * @author Craig Walls, + */, +public interface CheckinApi {]
[+++ b/docs/src/reference/docbook/implementing.xml, +				Each request made to the API's "resource server" needs to be signed with the authorization credentials provided during construction., +			<para>, +				Spring Social includes a framework for testing API bindings in the spring-social-test module., +				This framework consists of a "MockRestServiceServer" that can be used to mock out API calls to the remote service provider., +				This allows for the development of independent, performant, automated unit tests that verify client API binding and object mapping behavior., +			</para>, +			<para>, +				To use, first create a MockRestServiceServer against the RestTemplate instance used by your API implementation:, +			</para>, +			<programlisting language="java"><![CDATA[, +TwitterTemplate twitter = new TwitterTemplate("API_KEY", "API_SECRET", "ACCESS_TOKEN", "ACCESS_TOKEN_SECRET");, +MockRestServer mockServer = MockRestServiceServer.createServer(twitter.getRestTemplate());]]>, +			</programlisting>, +			<para>, +				Then for each test case record expectations about how the server should be invoked and answer what it should respond with:, +			</para>, +			<programlisting language="java"><![CDATA[, +@Test, +public void getUserProfile() throws Exception {, +    HttpHeaders responseHeaders = new HttpHeaders();, +    responseHeaders.setContentType(MediaType.APPLICATION_JSON);, +    , +    mockServer.expect(requestTo("https://api.twitter.com/1/account/verify_credentials.json")), +        .andExpect(method(GET)), +        .andRespond(withResponse(jsonResource("verify-credentials"), responseHeaders));, +, +    TwitterProfile profile = twitter.userOperations().getUserProfile();, +    assertEquals(161064614, profile.getId());, +    assertEquals("artnames", profile.getScreenName());, +}]]>, +			</programlisting>, +			<para>, +				In the example above the response body is written from a verify-credentials.json file located in the same package as the test class:, +			</para>, +			<programlisting language="java"><![CDATA[, +private Resource jsonResource(String filename) {, +    return new ClassPathResource(filename + ".json", getClass());, +}]]>, +			</programlisting>, +			<para>, +				The content of the file should mirror the content the remote service provider would return, allowing the client JSON deserialization behavior to be fully tested:, +			</para>, +			<programlisting language="java"><![CDATA[, +{, +    "id":161064614,, +    "screen_name":"artnames", +}]]>, +			</programlisting>			]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.util.HashMap;, +import org.springframework.web.bind.annotation.RequestParam;, +	 * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., +	 * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., +	 */, +	@RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), +	public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , +			@RequestParam("error") String error, , +			@RequestParam(value="error_description", required=false) String errorDescription,, +			@RequestParam(value="error_uri", required=false) String errorUri,, +			NativeWebRequest request) {, +		Map<String, String> errorMap = new HashMap<String, String>();, +		errorMap.put("error", error);, +		if (errorDescription != null) { errorMap.put("errorDescription", errorDescription); }, +		if (errorUri != null) { errorMap.put("errorUri", errorUri); }, +		request.setAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, errorMap, RequestAttributes.SCOPE_SESSION);, +		return connectionStatusRedirect(providerId, request);, +	}, +, +	/**, +		model.addAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, request.getAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, RequestAttributes.SCOPE_SESSION));, +		request.removeAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +	private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +, +	private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.util.HashMap;, +import org.springframework.web.bind.annotation.RequestParam;, +	 * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., +	 * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., +	 */, +	@RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), +	public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , +			@RequestParam("error") String error, , +			@RequestParam(value="error_description", required=false) String errorDescription,, +			@RequestParam(value="error_uri", required=false) String errorUri,, +			NativeWebRequest request) {, +		Map<String, String> errorMap = new HashMap<String, String>();, +		errorMap.put("error", error);, +		if (errorDescription != null) { errorMap.put("errorDescription", errorDescription); }, +		if (errorUri != null) { errorMap.put("errorUri", errorUri); }, +		request.setAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, errorMap, RequestAttributes.SCOPE_SESSION);, +		return connectionStatusRedirect(providerId, request);, +	}, +, +	/**, +		model.addAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, request.getAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, RequestAttributes.SCOPE_SESSION));, +		request.removeAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +	private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +, +	private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import java.util.HashMap;, +	@Test, +	public void oauth2ErrorCallback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertEquals(0, connectionRepository.findConnections("oauth2Provider").size());		, +		HashMap<String, String> expectedError = new HashMap<String, String>();, +		expectedError.put("error", "access_denied");, +		expectedError.put("errorDescription", "The user said no.");, +		expectedError.put("errorUri", "http://provider.com/user/said/no");, +		mockMvc.perform(get("/connect/oauth2Provider").param("error", "access_denied"), +													  .param("error_description", "The user said no."), +													  .param("error_uri", "http://provider.com/user/said/no")), +			.andExpect(redirectedUrl("/connect/oauth2Provider")), +			.andExpect(request().sessionAttribute("social_authorization_error", notNullValue())), +			.andExpect(request().sessionAttribute("social_authorization_error", expectedError));, +	}, +, +	@Test, +	public void oauth2ErrorCallback_noDescriptionOrUri() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertEquals(0, connectionRepository.findConnections("oauth2Provider").size());		, +		HashMap<String, String> expectedError = new HashMap<String, String>();, +		expectedError.put("error", "access_denied");, +		mockMvc.perform(get("/connect/oauth2Provider").param("error", "access_denied")), +			.andExpect(redirectedUrl("/connect/oauth2Provider")), +			.andExpect(request().sessionAttribute("social_authorization_error", notNullValue())), +			.andExpect(request().sessionAttribute("social_authorization_error", expectedError));, +	}, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +import java.io.Serializable;, +, +@SuppressWarnings("serial"), +public final class ConnectionKey implements Serializable {]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +	public void signIn_nonExistentProvider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, +			new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		providerSignInController.afterPropertiesSet();, +		MockMvc mockMvc = standaloneSetup(providerSignInController).build();, +		mockMvc.perform(post("/signin/nonExistentOAuth1Provider")), +			.andExpect(redirectedUrl("/signin?error=provider"));, +	}, +, +	@Test]
[+++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String connectionSignUpRef) {, +		BeanDefinitionBuilder usersConnectionRepositoryBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef);, +		if (connectionSignUpRef != null && connectionSignUpRef.length() > 0) {, +			usersConnectionRepositoryBeanBuilder.addPropertyReference("connectionSignUp", connectionSignUpRef);, +		}, +		BeanDefinition usersConnectionRepositoryBD = usersConnectionRepositoryBeanBuilder.getBeanDefinition();, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String connectionSignUpRef) {, +		BeanDefinitionBuilder usersConnectionRepositoryBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef);, +		if (connectionSignUpRef != null && connectionSignUpRef.length() > 0) {, +			usersConnectionRepositoryBeanBuilder.addPropertyReference("connectionSignUp", connectionSignUpRef);, +		}, +		BeanDefinition usersConnectionRepositoryBD = usersConnectionRepositoryBeanBuilder.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionSignUpRef = element.getAttribute("connection-signup-ref");, +		return registerJdbcConnectionRepositoryBeans(parserContext.getRegistry(), connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);]
[+++ b/pom.xml, +		, +			<optional>true</optional>, +			<optional>true</optional>]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +						The application exchanges the authorization grant for an access grant., +						The service provider issues the access grant to the application., +						The application uses the AccessGrant to establish a connection between the local user account and the external provider account., +						With the connection established, the application can now obtain reference to the Service API and invoke the provider on behalf of the user., +			OAuth 1 is the previous version of the OAuth protocol., +			It is more complex OAuth 2, and sufficiently different that it is supported separately., +			Twitter, Linked In, and TripIt are some of the well-known ServiceProviders that use OAuth 1., +			In Spring Social, the OAuth1ServiceProvider interface models a service provider based on the OAuth 1 protocol:			, +			<para>, +				Like a OAuth2-based provider, <methodname>getOAuthOperations()</methodname> returns an API to use to conduct the authorization flow, or "OAuth Dance"., +				The result of the OAuth 1 flow is an <classname>OAuthToken</classname> that can be used to establish a connection with a local user account by calling <methodname>connect</methodname>., +				The OAuth1Operations interface is shown below:				, +			</para>, +				Callers are first expected to call fetchNewRequestToken(String) obtain a temporary token from the ServiceProvider to use during the authorization session., +				Next, callers should call buildAuthorizeUrl(String) to construct the URL to redirect the user to for connection authorization., +				Upon user authorization, the authorized request token returned by the provider should be exchanged for an access token., +				The access token should then used to create a connection., +				This flow is illustrated below:				, +				<listitem>, +					<para>, +						The flow starts with the application asking for a request token., +						The purpose of the request token is to obtain user approval and it can only be used to obtain an access token., +						In OAuth 1.0a, the consumer callback URL is passed to the provider when asking for a request token., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider issues a request token to the consumer., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The application redirects the user's browser to the provider's authorization page, passing the request token as a parameter., +						In OAuth 1.0, the callback URL is also passed as a parameter in this step., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider prompts the user to authorize the consumer application and the user agrees. (Note that this is the only step where the user participates in the flow.), +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider redirects the user's browser back to a application (via the callback URL)., +						In OAuth 1.0a, this redirect includes a verifier code as a parameter. At this point, the request token is authorized., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The application exchanges the request token (and the verifier in OAuth 1.0a) for an access token., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider issues an access token to the consumer. The "dance" is complete., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The application uses the access token to establish a connection between the local user account and the external provider account., +						With the connection established, the application can now obtain reference to the Service API and invoke the provider on behalf of the user., +					</para>, +				</listitem>				, +		<para>, +			Working with the service provider framework starts with configuring the service provider in Spring., +			Spring Social's configuration namespace provides a convenient <code> <![CDATA[<social:service-provider>]]></code> element for declaring a service provider:, +      		<programlisting><![CDATA[, +<?xml version="1.0" encoding="UTF-8"?>, +    xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, +                        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +</beans>]]>, +			</programlisting>, +		</para>, +		<para>, +			The <code>class</code> attribute specifies the fully-qualified name of the provider implementation., +			This can be any of the service provider implementations that come with Spring Social or a custom implementation., +			Spring Social comes with the following service provider implementations:, +		</para>, +		<para>, +			The <code>client-key</code> and <code>client-secret</code> attributes specify the key and secret values assigned to your application when you registered it with the provider., +		</para>]
[+++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create an ApiAdapter that maps the provider's native API onto the uniform Connection model e.g. <code>TwitterAdapter</code>.</para>, +				Consider <code>org.springframework.social.twitter.connect.TwitterAdapter</code> as an example implementation:, +public class TwitterAdapter implements ApiAdapter<Twitter> {, +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}Adapter instance. 			, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookAdapter());, +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the consumerKey/consumerSecret, and a new {Provider}Adapter instance. 			, +        super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterAdapter());, +++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create an ApiAdapter that maps the provider's native API onto the uniform Connection model e.g. <code>TwitterAdapter</code>.</para>, +				Consider <code>org.springframework.social.twitter.connect.TwitterAdapter</code> as an example implementation:, +public class TwitterAdapter implements ApiAdapter<Twitter> {, +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}Adapter instance. 			, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookAdapter());, +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the consumerKey/consumerSecret, and a new {Provider}Adapter instance. 			, +        super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterAdapter());, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.connect;, +, +import org.springframework.social.BadCredentialsException;, +import org.springframework.social.connect.ApiAdapter;, +import org.springframework.social.connect.ConnectionValues;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.connect.UserProfileBuilder;, +import org.springframework.social.facebook.api.Facebook;, +import org.springframework.social.facebook.api.FacebookProfile;, +, +/**, + * Facebook ApiAdapter implementation., + * @author Keith Donald, + */, +public class FacebookAdapter implements ApiAdapter<Facebook> {, +, +	public boolean test(Facebook facebook) {, +		try {, +			facebook.userOperations().getUserProfile();, +			return true;, +		} catch (BadCredentialsException e) {, +			return false;, +		}, +	}, +, +	public void setConnectionValues(Facebook facebook, ConnectionValues values) {, +		FacebookProfile profile = facebook.userOperations().getUserProfile();, +		values.setProviderUserId(profile.getId());, +		values.setDisplayName(profile.getUsername());, +		values.setProfileUrl("http://facebook.com/#!/profile.php?id=" + profile.getId());, +		values.setImageUrl("http://graph.facebook.com/" + profile.getId() + "/picture");, +	}, +, +	public UserProfile fetchUserProfile(Facebook facebook) {, +		FacebookProfile profile = facebook.userOperations().getUserProfile();, +		return new UserProfileBuilder().setName(profile.getName()).setFirstName(profile.getFirstName()).setLastName(profile.getLastName())., +			setEmail(profile.getEmail()).setUsername(profile.getUsername()).build();, +	}, +	, +	public void updateStatus(Facebook facebook, String message) {, +		facebook.feedOperations().updateStatus(message);, +	}, +, +}, +++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create an ApiAdapter that maps the provider's native API onto the uniform Connection model e.g. <code>TwitterAdapter</code>.</para>, +				Consider <code>org.springframework.social.twitter.connect.TwitterAdapter</code> as an example implementation:, +public class TwitterAdapter implements ApiAdapter<Twitter> {, +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}Adapter instance. 			, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookAdapter());, +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the consumerKey/consumerSecret, and a new {Provider}Adapter instance. 			, +        super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterAdapter());, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]
[+++ b/build.gradle, +    , +++ b/build.gradle, +    , +++ b/settings.gradle, +++ b/build.gradle, +    , +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProvider.java, +	 * A label suitable for display in a UI, typically used to inform the user which service providers he or she has connected with / may connect with. e.g. Twitter., +	 */, +	String getDisplayName();, +, +	/**, +	 * @throws IllegalStateException if no connections have been established between the account and this provider, +++ b/build.gradle, +    , +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProvider.java, +	 * A label suitable for display in a UI, typically used to inform the user which service providers he or she has connected with / may connect with. e.g. Twitter., +	 */, +	String getDisplayName();, +, +	/**, +	 * @throws IllegalStateException if no connections have been established between the account and this provider, +++ /dev/null, +++ b/build.gradle, +    , +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProvider.java, +	 * A label suitable for display in a UI, typically used to inform the user which service providers he or she has connected with / may connect with. e.g. Twitter., +	 */, +	String getDisplayName();, +, +	/**, +	 * @throws IllegalStateException if no connections have been established between the account and this provider, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    , +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProvider.java, +	 * A label suitable for display in a UI, typically used to inform the user which service providers he or she has connected with / may connect with. e.g. Twitter., +	 */, +	String getDisplayName();, +, +	/**, +	 * @throws IllegalStateException if no connections have been established between the account and this provider, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/package-info.java, +/**, + * JDBC-based implementations of the service provider APIs, supporting storage of provider and connection details in, + * a RDBMS., + */, +package org.springframework.social.provider.jdbc;, +, +++ b/build.gradle, +    , +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProvider.java, +	 * A label suitable for display in a UI, typically used to inform the user which service providers he or she has connected with / may connect with. e.g. Twitter., +	 */, +	String getDisplayName();, +, +	/**, +	 * @throws IllegalStateException if no connections have been established between the account and this provider, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/package-info.java, +/**, + * JDBC-based implementations of the service provider APIs, supporting storage of provider and connection details in, + * a RDBMS., + */, +package org.springframework.social.provider.jdbc;, +, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthClientRequestSigner.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.provider.oauth;, +, +import java.util.Map;, +, +import org.springframework.http.client.ClientHttpRequest;, +, +/**, + * Strategy interface for signing a client request with the necessary]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +	private BeanDefinition registerAuthenticationServiceBean(BeanDefinition authenticationServiceLocatorBD, , +			BeanDefinition authenticationServiceBD, , +			Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>> socialAuthenticationServiceClass) {, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, , +			Class<?> apiBindingType,Map<String, Object> allAttributes) {, +		BeanDefinitionHolder scopedProxyBDH = ScopedProxyUtils.createScopedProxy(, +				new BeanDefinitionHolder(bindingBD, ClassUtils.getShortNameAsProperty(apiBindingType)), registry, false);, +	 * @param allAttributes additional attributes that may be used when creating the API helper bean., +	 * @return a {@link BeanDefinitionBuilder} for the API Helper, +		return BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass), +				.addConstructorArgReference("usersConnectionRepository"), +				.addConstructorArgReference("userIdSource");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +			authorizeUrl.append('&').append("oauth_callback").append("=").append(formEncode(callbackUrl));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +			authorizeUrl.append('&').append("oauth_callback").append("=").append(formEncode(callbackUrl));, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.social.test.client.RequestMatchers.*;, +import static org.springframework.social.test.client.ResponseCreators.*;, +		assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1SigningRequestFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * Request factory that signs RestTemplate requests with an OAuth 1 Authorization header., + * Internally used for Spring 3.0 compatibility only. Spring 3.1 uses request interceptors., + * @author Craig Walls, + */, +class OAuth1SigningRequestFactory implements ClientHttpRequestFactory {, +	private final ClientHttpRequestFactory delegate;, +	private final String consumerKey;, +	private final String consumerSecret;, +	private final String accessToken;, +	private final String accessTokenSecret;, +, +	public OAuth1SigningRequestFactory(ClientHttpRequestFactory delegate, String consumerKey, String consumerSecret,, +			String accessToken, String accessTokenSecret) {, +		this.delegate = delegate;, +		this.consumerKey = consumerKey;, +		this.consumerSecret = consumerSecret;, +		this.accessToken = accessToken;, +		this.accessTokenSecret = accessTokenSecret;, +	}, +, +	public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		return new OAuth1SigningRequest(delegate.createRequest(uri, httpMethod), consumerKey, consumerSecret,, +				accessToken, accessTokenSecret);, +	}	, +, +	private static class OAuth1SigningRequest implements ClientHttpRequest {, +		private final ClientHttpRequest delegate;, +		private ByteArrayOutputStream bodyOutputStream;, +		private final String consumerKey;, +		private final String consumerSecret;, +		private final String accessToken;, +		private final String accessTokenSecret;, +, +		public OAuth1SigningRequest(ClientHttpRequest delegate, String consumerKey, String consumerSecret,, +				String accessToken, String accessTokenSecret) {, +			this.delegate = delegate;, +			this.consumerKey = consumerKey;, +			this.consumerSecret = consumerSecret;, +			this.accessToken = accessToken;, +			this.accessTokenSecret = accessTokenSecret;, +			this.bodyOutputStream = new ByteArrayOutputStream();, +		}, +, +		public ClientHttpResponse execute() throws IOException {, +			byte[] bufferedOutput = bodyOutputStream.toByteArray();, +			String authorizationHeader = SigningUtils.buildAuthorizationHeaderValueFromClientHttpRequest(this,, +					bufferedOutput, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +			delegate.getBody().write(bufferedOutput);, +			delegate.getHeaders().set("Authorization", authorizationHeader);, +			return delegate.execute();, +		}, +, +		public URI getURI() {, +			return delegate.getURI();, +		}, +, +		public HttpMethod getMethod() {, +			return delegate.getMethod();, +		}, +, +		public HttpHeaders getHeaders() {, +			return delegate.getHeaders();, +		}, +, +		public OutputStream getBody() throws IOException {, +			return bodyOutputStream;, +		}, +, +	}, +]
[+++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, String> requestParameters = new HashMap<String, String>();, +		requestParameters.put("client_id", clientId);, +		requestParameters.put("client_secret", clientSecret);, +		requestParameters.put("code", authorizationCode);, +		requestParameters.put("redirect_uri", redirectUri);, +		requestParameters.put("grant_type", "authorization_code");, +		Map<String, String> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(result.get("access_token"), result.get("refresh_token"));, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, String> requestParameters = new HashMap<String, String>();, +		requestParameters.put("client_id", clientId);, +		requestParameters.put("client_secret", clientSecret);, +		requestParameters.put("code", authorizationCode);, +		requestParameters.put("redirect_uri", redirectUri);, +		requestParameters.put("grant_type", "authorization_code");, +		Map<String, String> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(result.get("access_token"), result.get("refresh_token"));, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, +		super("facebook",connectionRepository, new OAuth2Template(clientId, clientSecret,, +				"https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://graph.facebook.com/oauth/access_token"));]
[+++ b/pom.xml, +		<!-- Spring Security OAuth -->		, +		<dependency>, +			<groupId>org.springframework.security.oauth</groupId>, +			<artifactId>spring-security-oauth</artifactId>, +			<version>1.0.0.BUILD-SNAPSHOT</version>, +			<optional>true</optional>, +		</dependency>, +, +			<version>1.0.6</version>, +++ b/pom.xml, +		<!-- Spring Security OAuth -->		, +		<dependency>, +			<groupId>org.springframework.security.oauth</groupId>, +			<artifactId>spring-security-oauth</artifactId>, +			<version>1.0.0.BUILD-SNAPSHOT</version>, +			<optional>true</optional>, +		</dependency>, +, +			<version>1.0.6</version>, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, +				OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/pom.xml, +		<!-- Spring Security OAuth -->		, +		<dependency>, +			<groupId>org.springframework.security.oauth</groupId>, +			<artifactId>spring-security-oauth</artifactId>, +			<version>1.0.0.BUILD-SNAPSHOT</version>, +			<optional>true</optional>, +		</dependency>, +, +			<version>1.0.6</version>, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, +				OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/src/main/java/org/springframework/social/linkedin/LinkedInTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, +				OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/pom.xml, +		<!-- Spring Security OAuth -->		, +		<dependency>, +			<groupId>org.springframework.security.oauth</groupId>, +			<artifactId>spring-security-oauth</artifactId>, +			<version>1.0.0.BUILD-SNAPSHOT</version>, +			<optional>true</optional>, +		</dependency>, +, +			<version>1.0.6</version>, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, +				OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/src/main/java/org/springframework/social/linkedin/LinkedInTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, +				OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/src/main/java/org/springframework/social/oauth1/MissingOAuthLibraryException.java, +package org.springframework.social.oauth1;, +, +import org.springframework.social.core.SocialException;, +, +public class MissingOAuthLibraryException extends SocialException {, +	public MissingOAuthLibraryException(String message) {, +		super(message);, +	}, +}, +++ b/pom.xml, +		<!-- Spring Security OAuth -->		, +		<dependency>, +			<groupId>org.springframework.security.oauth</groupId>, +			<artifactId>spring-security-oauth</artifactId>, +			<version>1.0.0.BUILD-SNAPSHOT</version>, +			<optional>true</optional>, +		</dependency>, +, +			<version>1.0.6</version>, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, +				OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/src/main/java/org/springframework/social/linkedin/LinkedInTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, +				OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/src/main/java/org/springframework/social/oauth1/MissingOAuthLibraryException.java, +package org.springframework.social.oauth1;, +, +import org.springframework.social.core.SocialException;, +, +public class MissingOAuthLibraryException extends SocialException {, +	public MissingOAuthLibraryException(String message) {, +		super(message);, +	}, +}, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1RequestSignerFactory.java, +package org.springframework.social.oauth1;, +, +import org.springframework.util.ClassUtils;, +, +public class OAuth1RequestSignerFactory {, +	private static final boolean s2OAuthPresent = ClassUtils, +			.isPresent("org.springframework.security.oauth.consumer.CoreOAuthConsumerSupport",, +			OAuth1RequestSignerFactory.class.getClassLoader());]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, +		return new MappingJackson2HttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, +		return new MappingJackson2HttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +	 * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., +	protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, +		return new MappingJackson2HttpMessageConverter(); ]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "Constructor argument 'consumerKey' cannot be null.");, +		Assert.notNull(consumerSecret, "Constructor argument 'consumerSecret' cannot be null.");, +		Assert.notNull(accessToken, "Constructor argument 'accessToken' cannot be null.");, +		Assert.notNull(accessTokenSecret, "Constructor argument 'accessTokenSecret' cannot be null.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "Constructor argument 'consumerKey' cannot be null.");, +		Assert.notNull(consumerSecret, "Constructor argument 'consumerSecret' cannot be null.");, +		Assert.notNull(accessToken, "Constructor argument 'accessToken' cannot be null.");, +		Assert.notNull(accessTokenSecret, "Constructor argument 'accessTokenSecret' cannot be null.");, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/AbstractOAuth1ApiBindingTest.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import org.junit.Test;, +, +public class AbstractOAuth1ApiBindingTest {, +, +	@Test(expected=IllegalArgumentException.class), +	public void nullConsumerKey() {, +		new FakeApiBinding(null, "", "", "");, +	}, +, +	@Test(expected=IllegalArgumentException.class), +	public void nullConsumerSecret() {, +		new FakeApiBinding("", null, "", "");, +	}, +, +	@Test(expected=IllegalArgumentException.class), +	public void nullAccessToken() {, +		new FakeApiBinding("", "", null, "");, +	}, +, +	@Test(expected=IllegalArgumentException.class), +	public void nullAccessTokenSecret() {, +		new FakeApiBinding("", "", "", null);, +	}, +, +	private static class FakeApiBinding extends AbstractOAuth1ApiBinding {, +		public FakeApiBinding(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +			super(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +		}, +	}, +, +}]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, +	<P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, +	, +	<P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass);, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, +	<P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, +	, +	<P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass);, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, +	<P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, +	, +	<P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, +	<P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, +	, +	<P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass);, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderRegistry.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.support;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.social.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderRegistry;, +, +public class MapServiceProviderRegistry implements ServiceProviderRegistry {, +, +	private Map<String, ServiceProvider<?>> serviceProviders = new HashMap<String, ServiceProvider<?>>();, +, +	private Map<Class<?>, ServiceProvider<?>> providerClassIndex = new HashMap<Class<?>, ServiceProvider<?>>();, +	, +	public void addServiceProvider(String providerId, ServiceProvider<?> serviceProvider) {, +		if (serviceProviders.containsKey(providerId)) {, +			throw new IllegalArgumentException("A ServiceProvider with id '" + providerId + "' is already registered");, +		}, +		if (providerClassIndex.containsKey(serviceProvider.getClass())) {, +			throw new IllegalArgumentException("A ServiceProvider of class '" + providerClassIndex + "' is already registered");, +		}, +		serviceProviders.put(providerId, serviceProvider);, +		providerClassIndex.put(serviceProvider.getClass(), serviceProvider);, +	}, +	, +	public ServiceProvider<?> getServiceProvider(String providerId) {, +		ServiceProvider<?> provider = serviceProviders.get(providerId);, +		if (provider == null) {, +			throw new IllegalArgumentException("No ServiceProvider with id '" + providerId + "' is registered");, +		}		, +		return provider;, +	}, +, +	@SuppressWarnings("unchecked"), +	public <P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerType) {, +		ServiceProvider<?> provider = getServiceProvider(providerId, providerType);, +		if (!providerType.isAssignableFrom(provider.getClass())) {, +			throw new IllegalArgumentException("ServiceProvider '" + providerId + "' not instance of [" + providerType.getName() + "]");, +		}, +		return (P) provider;, +	}, +, +	@SuppressWarnings("unchecked"), +	public <P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass) {, +		ServiceProvider<?> provider = providerClassIndex.get(providerClass);, +		if (provider == null) {, +			throw new IllegalArgumentException("No ServiceProvider of class [" + providerClass.getName() + "] is registered");, +		}, +		return (P) provider;, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, +	<P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, +	, +	<P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass);, +++ /dev/null]
[+++ b/docs/src/api/overview.html, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top">SpringSource.com</a>., +++ b/docs/src/api/overview.html, +        support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top">SpringSource.com</a>., +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionVersion=0.9-build-daemon-20101027111821+1100]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/AbstractFacebookApiTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.api;, +, +import java.text.DateFormat;, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.Locale;, +, +import org.junit.Before;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +import org.springframework.social.test.client.MockRestServiceServer;, +, +public class AbstractFacebookApiTest {, +	protected static final String ACCESS_TOKEN = "someAccessToken";, +, +	protected FacebookTemplate facebook;, +	protected MockRestServiceServer mockServer;, +	protected HttpHeaders responseHeaders;, +, +	@Before, +	public void setup() {, +		facebook = new FacebookTemplate(ACCESS_TOKEN);, +		mockServer = MockRestServiceServer.createServer(facebook.getRestTemplate());, +		responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(new MediaType("text", "javascript"));, +	}, +, +, +	private static final DateFormat FB_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", Locale.ENGLISH);, +, +	protected Date toDate(String dateString) {, +		try {, +			return FB_DATE_FORMAT.parse(dateString);, +		} catch (ParseException e) {, +			System.out.println(e);, +			return null;, +		}, +	}, +, +}, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/AbstractFacebookApiTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.api;, +, +import java.text.DateFormat;, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.Locale;, +, +import org.junit.Before;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +import org.springframework.social.test.client.MockRestServiceServer;, +, +public class AbstractFacebookApiTest {, +	protected static final String ACCESS_TOKEN = "someAccessToken";, +, +	protected FacebookTemplate facebook;, +	protected MockRestServiceServer mockServer;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Album.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.api;, +, +import java.util.Date;, +, +, +/**, + * Model class representing a Facebook photo album., + * @author Craig Walls, + */, +public class Album {, +, +	private String id;, +, +	private Reference from;, +, +	private String name;]
[+++ b/build.gradle, +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { provided = true }, +++ b/build.gradle, +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { provided = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Useful as a strongly-typed alternative to {@link #isConnected(String)}., +++ b/build.gradle, +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { provided = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Useful as a strongly-typed alternative to {@link #isConnected(String)}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +import org.springframework.security.crypto.codec.Base64;, +			signatureBytes = Base64.encode(signatureBytes);, +++ b/build.gradle, +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { provided = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Useful as a strongly-typed alternative to {@link #isConnected(String)}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +import org.springframework.security.crypto.codec.Base64;, +			signatureBytes = Base64.encode(signatureBytes);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * @param connectionRepository the current user's {@link ConnectionRepository} needed to persist connections; must be a proxy to a request-scoped bean]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1Connection.java, +	private transient final OAuth1ServiceProvider<A> serviceProvider;, +	private transient A api;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the credentials used during an operation invocation are invalid., +		super("The authorization presented to the authorization server is invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the credentials used during an operation invocation are invalid., +		super("The authorization presented to the authorization server is invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception thrown when attempting to invoke an API operation requiring authorization but no authorization has been provided., + * This can occur after constructing an API binding without providing the necessary authorization information, such as an access token., +		super("No authorization has been provided but one is required.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the credentials used during an operation invocation are invalid., +		super("The authorization presented to the authorization server is invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception thrown when attempting to invoke an API operation requiring authorization but no authorization has been provided., + * This can occur after constructing an API binding without providing the necessary authorization information, such as an access token., +		super("No authorization has been provided but one is required.");, +++ b/spring-social-core/src/main/java/org/springframework/social/NotAuthorizedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the credentials used during an operation invocation are invalid., +		super("The authorization presented to the authorization server is invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception thrown when attempting to invoke an API operation requiring authorization but no authorization has been provided., + * This can occur after constructing an API binding without providing the necessary authorization information, such as an access token., +		super("No authorization has been provided but one is required.");, +++ b/spring-social-core/src/main/java/org/springframework/social/NotAuthorizedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/RateLimitExceededException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the credentials used during an operation invocation are invalid., +		super("The authorization presented to the authorization server is invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception thrown when attempting to invoke an API operation requiring authorization but no authorization has been provided., + * This can occur after constructing an API binding without providing the necessary authorization information, such as an access token., +		super("No authorization has been provided but one is required.");, +++ b/spring-social-core/src/main/java/org/springframework/social/NotAuthorizedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/RateLimitExceededException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServerException.java]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +		} catch (Exception e) {, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +		}, +		try {, +		} catch (Exception e) {, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +		}, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +		} catch (Exception e) {, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +		}, +		try {, +		} catch (Exception e) {, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +		}, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +import static java.util.Arrays.*;, +import static org.hamcrest.Matchers.*;, +import static org.springframework.test.web.server.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.server.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.server.setup.MockMvcBuilders.*;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +import org.springframework.social.connect.web.test.StubOAuth1ConnectionFactory;, +import org.springframework.social.connect.web.test.StubOAuth2ConnectionFactory;, +import org.springframework.social.connect.web.test.StubOAuthTemplateBehavior;, +import org.springframework.social.connect.web.test.StubUsersConnectionRepository;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +import org.springframework.test.web.server.MockMvc;, +	// OAuth 1, +	@Test, +	public void signIn_OAuth1Provider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, +				new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null)).build();, +		mockMvc.perform(post("/signin/oauth1Provider")), +			.andExpect(redirectedUrl("https://someprovider.com/oauth/authorize?oauth_token=requestToken")), +			.andExpect(request().sessionAttribute("oauthToken", samePropertyValuesAs(new OAuthToken("requestToken", "requestTokenSecret"))));, +	}, +, +	@Test, +	public void signIn_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, +				new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null)).build();, +		mockMvc.perform(post("/signin/oauth1Provider")), +			.andExpect(redirectedUrl("/signin?error=provider"));, +	}, +, +	@Test, +	public void oauth1Callback_noMatchingUser() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null)).build();		, +		mockMvc.perform(get("/signin/oauth1Provider").param("verifier", "verifier").param("oauth_token", "requestToken")), +			.andExpect(redirectedUrl("/signup")), +			.andExpect(request().sessionAttribute(ProviderSignInAttempt.class.getName(), notNullValue()));, +	public void oauth1Callback_noMatchingUser_customSignUpUrl() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		providerSignInController.setSignUpUrl("/register");, +		MockMvc mockMvc = standaloneSetup(providerSignInController).build();		, +		mockMvc.perform(get("/signin/oauth1Provider").param("verifier", "verifier").param("oauth_token", "requestToken")), +			.andExpect(redirectedUrl("/register")), +			.andExpect(request().sessionAttribute(ProviderSignInAttempt.class.getName(), notNullValue()));, +	public void oauth1Callback_multipleMatchingUsers() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository(Arrays.asList("testuser1", "testuser2"));, +		MockMvc mockMvc = standaloneSetup(new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null)).build();		, +		mockMvc.perform(get("/signin/oauth1Provider").param("verifier", "verifier").param("oauth_token", "requestToken")), +			.andExpect(redirectedUrl("/signin?error=multiple_users"));, +	}, +]
[+++ b/build.gradle, +    ext.javadocLinks = [, +        "http://docs.oracle.com/javase/7/docs/api/",, +        "http://docs.oracle.com/javaee/7/api/",, +        "http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",, +        "http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", +    ] as String[], +, +        description = "Generates project-level javadoc for use in -javadoc jar", +, +        options.links(project.ext.javadocLinks), +        if (JavaVersion.current().isJava8Compatible()) {, +            options.addStringOption('Xdoclint:none', '-quiet'), +        }, +        if (JavaVersion.current().isJava8Compatible()) {, +            options.addStringOption('Xdoclint:none', '-quiet'), +        }, +++ b/build.gradle, +    ext.javadocLinks = [, +        "http://docs.oracle.com/javase/7/docs/api/",, +        "http://docs.oracle.com/javaee/7/api/",, +        "http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",, +        "http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", +    ] as String[], +, +        description = "Generates project-level javadoc for use in -javadoc jar", +, +        options.links(project.ext.javadocLinks), +        if (JavaVersion.current().isJava8Compatible()) {, +            options.addStringOption('Xdoclint:none', '-quiet'), +        }, +        if (JavaVersion.current().isJava8Compatible()) {, +            options.addStringOption('Xdoclint:none', '-quiet'), +        }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/build.gradle, +    ext.javadocLinks = [, +        "http://docs.oracle.com/javase/7/docs/api/",, +        "http://docs.oracle.com/javaee/7/api/",, +        "http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",, +        "http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", +    ] as String[], +, +        description = "Generates project-level javadoc for use in -javadoc jar", +, +        options.links(project.ext.javadocLinks), +        if (JavaVersion.current().isJava8Compatible()) {, +            options.addStringOption('Xdoclint:none', '-quiet'), +        }, +        if (JavaVersion.current().isJava8Compatible()) {, +            options.addStringOption('Xdoclint:none', '-quiet'), +        }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/FormMapHttpMessageConverter.java, + * Message converter that reads form-encoded data into a flat Map&lt;String, String&gt;., +++ b/build.gradle, +    ext.javadocLinks = [, +        "http://docs.oracle.com/javase/7/docs/api/",, +        "http://docs.oracle.com/javaee/7/api/",, +        "http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",, +        "http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", +    ] as String[], +, +        description = "Generates project-level javadoc for use in -javadoc jar", +, +        options.links(project.ext.javadocLinks), +        if (JavaVersion.current().isJava8Compatible()) {, +            options.addStringOption('Xdoclint:none', '-quiet'), +        }, +        if (JavaVersion.current().isJava8Compatible()) {, +            options.addStringOption('Xdoclint:none', '-quiet'), +        }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/FormMapHttpMessageConverter.java, + * Message converter that reads form-encoded data into a flat Map&lt;String, String&gt;., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + * <li>GET /signin/{providerId}?oauth_token&amp;oauth_verifier||code - Receive {providerId} authentication callback and establish the connection.</li>, +	 * @param providerId the provider ID, +	 * @param code the OAuth 2 authorization code, +	 * @param request the web request, +	 * @return A RedirectView to the target page or the signInUrl if an error occurs, +	 * @param providerId The Provider ID, +	 * @param error An error parameter sent on the redirect from the provider, +	 * @param errorDescription An optional error description sent from the provider, +	 * @param errorUri An optional error URI sent from the provider, +	 * @param request The web request, +	 * @return a RedirectView to the signInUrl, +	 * @return A RedirectView to the sign in URL, +++ b/build.gradle, +    ext.javadocLinks = [, +        "http://docs.oracle.com/javase/7/docs/api/",, +        "http://docs.oracle.com/javaee/7/api/",, +        "http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",, +        "http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", +    ] as String[], +, +        description = "Generates project-level javadoc for use in -javadoc jar", +, +        options.links(project.ext.javadocLinks), +        if (JavaVersion.current().isJava8Compatible()) {]
[+++ b/.gitignore, +++ b/.gitignore, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/build.gradle, +        gradleVersion = '1.10', +++ b/build.gradle, +        gradleVersion = '1.10', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +        gradleVersion = '1.10', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Dec 18 14:42:30 CST 2013, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-bin.zip, +++ b/build.gradle, +        gradleVersion = '1.10', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Dec 18 14:42:30 CST 2013, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-bin.zip, +++ b/gradlew, +#!/usr/bin/env bash, +cd "`dirname \"$PRG\"`/" >&-, +cd "$SAVED" >&-]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException(String providerId) {, +		super(providerId, "Insufficient permission for this operation.");, +	public InsufficientPermissionException(String providerId, String requiredPermission) {, +		super(providerId, "The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException(String providerId) {, +		super(providerId, "Insufficient permission for this operation.");, +	public InsufficientPermissionException(String providerId, String requiredPermission) {, +		super(providerId, "The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, +	public InternalServerErrorException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +package org.springframework.social.connect.web;, +, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.Set;, +, +import org.junit.Test;, +import org.mockito.ArgumentMatcher;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.UsersConnectionRepository;, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth1ConnectionFactory;, +import org.springframework.social.connect.support.OAuth2Connection;, +import org.springframework.social.connect.support.OAuth2ConnectionFactory;, +import org.springframework.social.oauth1.AuthorizedRequestToken;, +import org.springframework.social.oauth1.OAuth1Operations;, +import org.springframework.social.oauth1.OAuth1Parameters;, +import org.springframework.social.oauth1.OAuth1ServiceProvider;, +import org.springframework.social.oauth1.OAuth1Version;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.oauth2.GrantType;, +import org.springframework.social.oauth2.OAuth2Operations;, +import org.springframework.social.oauth2.OAuth2Parameters;, +import org.springframework.social.oauth2.OAuth2ServiceProvider;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.ServletWebRequest;, +import org.springframework.web.servlet.view.RedirectView;, +, +public class ProviderSignInControllerTest {, +, +	@Test, +	public void oauth1Callback_noMatchingUser() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth1provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		, +		MockHttpServletRequest nativeRequest = new MockHttpServletRequest();, +		nativeRequest.addParameter("verifier", "verifier");, +		ServletWebRequest request = new ServletWebRequest(nativeRequest);, +		RedirectView redirect = controller.oauth1Callback("oauth1provider", request);, +		assertEquals("/signup", redirect.getUrl());, +		ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) request.getAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +		assertNotNull(signInAttempt);, +		// TODO: Assert attempt contents, +	}, +, +	@Test, +	public void oauth1Callback_noMatchingUser_customSignUpUrl() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth1provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		controller.setSignUpUrl("/register");, +, +		MockHttpServletRequest nativeRequest = new MockHttpServletRequest();, +		nativeRequest.addParameter("verifier", "verifier");, +		ServletWebRequest request = new ServletWebRequest(nativeRequest);, +		RedirectView redirect = controller.oauth1Callback("oauth1provider", request);, +		assertEquals("/register", redirect.getUrl());, +		ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) request.getAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +		assertNotNull(signInAttempt);, +		// TODO: Assert attempt contents, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_noOriginalUrl() {, +		performOAuth1Callback(null, null);, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_noOriginalUrl_withPostSignInUrl() {, +		performOAuth1Callback(null, "/postSignIn");, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_withOriginalUrl() {, +		performOAuth1Callback("/original", null);, +	}, +	, +	@Test, +	public void oauth2Callback_noMatchingUser() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth2provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +			for (Iterator<Entry<String, List<String>>> additionalParams = additionalParameters.entrySet().iterator(); additionalParams.hasNext();) {, +		MultiValueMap<String, String> customAuthorizeParameters = getCustomAuthorizationParameters();, +		if (customAuthorizeParameters == null) {, +			if(clientAdditionalParameters != null) {, +				customAuthorizeParameters.putAll(clientAdditionalParameters);, +			}, +			return customAuthorizeParameters;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +			for (Iterator<Entry<String, List<String>>> additionalParams = additionalParameters.entrySet().iterator(); additionalParams.hasNext();) {, +		MultiValueMap<String, String> customAuthorizeParameters = getCustomAuthorizationParameters();, +		if (customAuthorizeParameters == null) {, +			if(clientAdditionalParameters != null) {, +				customAuthorizeParameters.putAll(clientAdditionalParameters);, +			}, +			return customAuthorizeParameters;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.social.test.client.RequestMatchers.*;, +import static org.springframework.social.test.client.ResponseCreators.*;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private OAuth1Template customOauth10;, +, +, +		customOauth10 = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL,, +				"https://www.someprovider.com/oauth/authorize", null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10) {, +			protected MultiValueMap<String,String> getCustomAuthorizationParameters() {, +				System.out.println("CUSTOM PARAMETERS");, +				MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();, +				parameters.set("custom_parameter", "custom_parameter_value");, +				return parameters;, +			};, +		};, +	public void buildAuthorizeUrl_customAuthorizeParameters() {, +		assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback&custom_parameter=custom_parameter_value",, +				customOauth10.buildAuthorizeUrl("request_token", new OAuth1Parameters("http://www.someclient.com/oauth/callback")));, +	}, +, +	@Test]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 3 (Apr 27, 2011), +   * New ProviderSignInController for signing into an application by first, +     signing into a provider such as Twitter or Facebook, +   * Now supports use in an Android environment and integrated with Spring , +     Android project as of its 1.0.0.M3 release., +   * The ability to test a connection and refresh an expired connection, +   * The ability to update status across connections in a uniform way, +   * The ability to access user profile data on a connection in a uniform way, +     and use it to pre-populate application registration forms, +   * New query operations for finding connections in different ways, +   * Enhanced support for extending the framework, including documentation that walks, +     you through the process of adding support for a new service provider]
[+++ b/gradle.properties, +springSocialVersion=1.0.1.RELEASE, +role=buildmaster]
[+++ b/docs/src/info/changelog.txt, +Known Issues:, +    * SPR-8002: ProviderSignAttempt session-scoped objects not serializable due to javax.inject.Provider serialization issue., +, +++ b/docs/src/info/changelog.txt, +Known Issues:, +    * SPR-8002: ProviderSignAttempt session-scoped objects not serializable due to javax.inject.Provider serialization issue., +, +++ b/docs/src/info/readme.txt, +Spring Social, +-----------------------------------------------------------, +The Spring Social project allows you to integrate the APIs exposed by Software-as-a-Service (SaaS) providers such as Facebook and Twitter into your applications., +It consists of a service provider 'connect' framework, sign-in support, and strongly-typed Java API bindings., +To find out what has changed in this release, see 'changelog.txt', +Please consult the documentation located within the 'docs/reference' directory of this release and also visit the official Spring Social home at:, +http://www.springsource.org/spring-social, +There you will find links to the forum, issue tracker, samples, and other resources.]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +						The application redirects the user to the provider's authorization page, passing the request token as a parameter., +						The service provider prompts the user to authorize the consumer application and the user agrees., +						The service provider redirects the user's browser back to the application (via the callback URL)., +						The application exchanges the authorized request token (including the verifier in OAuth 1.0a) for an access token., +						The service provider issues an access token to the consumer. The "dance" is now complete.]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +      <para>Spring Social's service provider framework handles the details of authorization with a service. Once authorization has been granted, a connection is created between the user's local application account and the authorization credentials. This connection is persisted for future use, so that the user won't need to re-authorize the application as long as the credentials are still valid.</para>, +      , +      <para>The central concept in the service provider framework is the service provider. A service provider represents a service that the application wants to interact with on its users' behalf. The service provider maintains the applications own credentials with the service and is able to negotiate permissions for the application to access the service.</para>, +      , +            <imagedata fileref="images/oauth2_flow.png" format="PNG" align="center" scale="0"/>, +      <para>In Spring Social, service providers are defined by the <interfacename>ServiceProvider</interfacename> interface, which defined the basic operations required to manage connections with a service:</para>, +      , +<programlisting><![CDATA[public interface ServiceProvider<S> {, +	String getId();, +	boolean isConnected(Serializable accountId);, +	List<ServiceProviderConnection<S>> getConnections(Serializable accountId);, +}]]></programlisting>, +, +      <para>Each service provider is identified by an ID, as returned by the <methodname>getId()</methodname> method. This ID is primarily used as a key to lookup a service provider when working through the authorization flow.</para>, +      , +      <para>A user may authorize the application to access multiple service provider profiles, resulting in one or more connections being created between their application account and the service provider. The <methodname>isConnected()</methodname> checks to see if any connections exist between a given account and the provider. If there are any connections, the <methodname>getConnections()</methodname> will return them.</para>, +, +      <para>The <interfacename>ServiceProvider</interfacename> is further defined by two sub-interfaces, one for each supported authorization protocol. <interfacename>OAuth1ServiceProvider</interfacename> defines the service provider operations that are specific to OAuth 1:</para>, +      , +<programlisting><![CDATA[public interface OAuth1ServiceProvider<S> extends ServiceProvider<S> {, +	OAuth1Operations getOAuth1Operations();, +	ServiceProviderConnection<S> connect(Serializable accountId, OAuthToken accessToken);, +}]]></programlisting>, +, +      <para>Likewise, <interfacename>OAuth2ServiceProvider</interfacename> defines service provider operations that pertain to OAuth 2:</para>, +      , +<programlisting><![CDATA[public interface OAuth2ServiceProvider<S> extends ServiceProvider<S> {, +    OAuth2Operations getOAuth2Operations();, +    ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +}]]></programlisting>, +      , +      <para>As you can see, these two sub-interfaces are quite similar, but differ slightly to accommodate the differences in each authorization protocol. The most significant method in each interface is the <methodname>connect()</methodname> which creates a connection given a user's account ID and the authorization credentials. The other method returns an operations API for working with each authorization protocol at a low level.</para>, +      , +      <para>Generally, application code will not work with these interfaces directly. Instead, you'll leverage Spring Social's <classname>ConnectController</classname> (see <xref linkend="connecting"/>) to handle the authorization flow for you. You may, however, use the <methodname>getConnections()</methodname> to access the service API for a given connection. This will be covered in more detail in <xref linkend="apis"/>.</para>, +      <para>Working with the service provider framework starts with configuring the service provider in Spring. Spring Social's configuration namespace provides a convenient <code><![CDATA[<social:service-provider>]]></code> element for declaring a service provider:</para>, +<social:service-provider , +    client-secret="..." />        , +</beans>]]></programlisting>, +      <para>The <code>class</code> attribute specifies the fully-qualified name of the provider implementation. This can be any of the service provider implementations that come with Spring Social or a custom implementation. Spring Social comes with the following service provider implementations:</para>, +, +      <itemizedlist>, +          <listitem><para>org.springframework.social.facebook.connect.FacebookServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.twitter.connect.TwitterServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.linkedin.connect.LinkedInServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.tripit.connect.TripItServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.github.connect.GitHubServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.gowalla.connect.GowallaServiceProvider</para></listitem>, +      </itemizedlist>, +      , +      <para>The <code>client-key</code> and <code>client-secret</code> attributes specify the key and secret values assigned to your application when you registered it with the provider.</para>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/EventsApi.java, +import org.springframework.social.facebook.types.Event;, +import org.springframework.social.facebook.types.EventInvitee;, +import org.springframework.social.facebook.types.UserEvent;, +, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/EventsApi.java, +import org.springframework.social.facebook.types.Event;, +import org.springframework.social.facebook.types.EventInvitee;, +import org.springframework.social.facebook.types.UserEvent;, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookProfile.java, +import org.springframework.social.facebook.types.EducationEntry;, +import org.springframework.social.facebook.types.Reference;, +import org.springframework.social.facebook.types.WorkEntry;]
[+++ b/build.gradle, +        compile project (':spring-social-core'), +      compile project (':spring-social-security', optional), +        compile project (':spring-social-core'), +++ b/build.gradle, +        compile project (':spring-social-core'), +      compile project (':spring-social-security', optional), +        compile project (':spring-social-core'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ProviderConfigRegistrarSupport.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	private final static Log logger = LogFactory.getLog(ProviderConfigRegistrarSupport.class);, +, +	public ProviderConfigRegistrarSupport(Class<? extends Annotation> providerConfigAnnotation, Class<? extends ConnectionFactory<?>> connectionFactoryClass, , +			String socialAuthenticationServiceClassName, Class<? extends ApiHelper<?>> apiHelperClass) {, +		// TODO: Does the above signature create a hard dependency on social security???, +		this.socialAuthenticationServiceClassName = socialAuthenticationServiceClassName;, +		, +		if (isSocialSecurityAvailable() && socialAuthenticationServiceClassName != null) {, +			registerAuthenticationServiceBeanDefinitions(registry, allAttributes);						, +		} else {, +			registerConnectionFactoryBeanDefinitions(registry, allAttributes);			, +		}, +		, +	private static boolean isSocialSecurityAvailable() {, +		try {, +			Class.forName("org.springframework.social.security.SocialAuthenticationServiceLocator");, +			return true;, +		} catch (ClassNotFoundException cnfe) {, +			return false; , +		}, +	}	, +	private void registerConnectionFactoryBeanDefinitions(BeanDefinitionRegistry registry, Map<String, Object> allAttributes) {, +		BeanDefinition connectionFactoryBD = getConnectionFactoryBeanDefinition((String) allAttributes.get("appId"), (String) allAttributes.get("appSecret"), allAttributes);, +		BeanDefinition connectionFactoryLocatorBD = ProviderConfigSupport.registerConnectionFactoryLocatorBean(registry);, +		ProviderConfigSupport.registerConnectionFactoryBean(connectionFactoryLocatorBD, connectionFactoryBD, connectionFactoryClass);, +	}, +, +	private void registerAuthenticationServiceBeanDefinitions(BeanDefinitionRegistry registry, Map<String, Object> allAttributes) {, +		try {, +			Class<? extends SocialAuthenticationService<?>> socialAuthenticationServiceClass = (Class<? extends SocialAuthenticationService<?>>) Class.forName(socialAuthenticationServiceClassName);, +			BeanDefinition authenticationServiceBD = getAuthenticationServiceBeanDefinition((String) allAttributes.get("appId"), (String) allAttributes.get("appSecret"), allAttributes);, +			BeanDefinition connectionFactoryLocatorBD = ProviderConfigSupport.registerConnectionFactoryLocatorBean(registry);, +			ProviderConfigSupport.registerAuthenticationServiceBean(connectionFactoryLocatorBD, authenticationServiceBD, socialAuthenticationServiceClass);, +		} catch (ClassNotFoundException cnfe) {, +			logger.error("Unable to configure SocialAuthenticationService (" + socialAuthenticationServiceClassName + "); Class not found.");, +		}, +	}, +	protected BeanDefinition getAuthenticationServiceBeanDefinition(String appId, String appSecret, Map<String, Object> allAttributes) {, +		try {, +			Class<?> socialAuthenticationServiceClass = Class.forName(socialAuthenticationServiceClassName);, +			return BeanDefinitionBuilder.genericBeanDefinition(socialAuthenticationServiceClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +		} catch (ClassNotFoundException cnfe) {, +			// Fall back on connection factory bean, +			return getConnectionFactoryBeanDefinition(appId, appSecret, allAttributes);, +		}, +	}, +, +	private String socialAuthenticationServiceClassName;, +, +++ b/build.gradle, +        compile project (':spring-social-core'), +      compile project (':spring-social-security', optional), +        compile project (':spring-social-core'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ProviderConfigRegistrarSupport.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	private final static Log logger = LogFactory.getLog(ProviderConfigRegistrarSupport.class);, +, +	public ProviderConfigRegistrarSupport(Class<? extends Annotation> providerConfigAnnotation, Class<? extends ConnectionFactory<?>> connectionFactoryClass, , +			String socialAuthenticationServiceClassName, Class<? extends ApiHelper<?>> apiHelperClass) {, +		// TODO: Does the above signature create a hard dependency on social security???, +		this.socialAuthenticationServiceClassName = socialAuthenticationServiceClassName;, +		, +		if (isSocialSecurityAvailable() && socialAuthenticationServiceClassName != null) {, +			registerAuthenticationServiceBeanDefinitions(registry, allAttributes);						, +		} else {, +			registerConnectionFactoryBeanDefinitions(registry, allAttributes);			, +		}, +		, +	private static boolean isSocialSecurityAvailable() {, +		try {, +			Class.forName("org.springframework.social.security.SocialAuthenticationServiceLocator");, +			return true;, +		} catch (ClassNotFoundException cnfe) {, +			return false; , +		}, +	}	, +	private void registerConnectionFactoryBeanDefinitions(BeanDefinitionRegistry registry, Map<String, Object> allAttributes) {, +		BeanDefinition connectionFactoryBD = getConnectionFactoryBeanDefinition((String) allAttributes.get("appId"), (String) allAttributes.get("appSecret"), allAttributes);, +		BeanDefinition connectionFactoryLocatorBD = ProviderConfigSupport.registerConnectionFactoryLocatorBean(registry);, +		ProviderConfigSupport.registerConnectionFactoryBean(connectionFactoryLocatorBD, connectionFactoryBD, connectionFactoryClass);, +	}, +, +	private void registerAuthenticationServiceBeanDefinitions(BeanDefinitionRegistry registry, Map<String, Object> allAttributes) {, +		try {, +			Class<? extends SocialAuthenticationService<?>> socialAuthenticationServiceClass = (Class<? extends SocialAuthenticationService<?>>) Class.forName(socialAuthenticationServiceClassName);, +			BeanDefinition authenticationServiceBD = getAuthenticationServiceBeanDefinition((String) allAttributes.get("appId"), (String) allAttributes.get("appSecret"), allAttributes);]
[+++ b/docs/src/reference/docbook/overview.xml, +    <version>3.1.0.RC2.crypto</version>, +	  		, +	  		<note>, +	  			<para>, +	  				Between Spring Security versions 3.1.0.RC1 and 3.1.0.RC2 the crypto module was merged into Spring Security's core module., +	  				Unfortunately, this would mean that even if you only need the functionality of the crypto module, you'd need to depend on the core module., +	  				To avoid the unnecessary dependency on the core module, Spring Security 3.1.0.RC3 will once again have a separate crypto module., +	  			</para>, +	  			<para>, +	  				At the time that this reference documentation is being written, Spring Security 3.1.0.RC3 has not yet been released., +	  				So that you can depend on the crypto module independently with Spring Security 3.1.0.RC2, a special "RC2.crypto" version of the crypto module may be used., +	  				Once Spring Security 3.1.0.RC3 is available, you may use version "3.1.0.RC3" of the crypto module without the ".crypto" suffix., +	  			</para>, +	  			<para>, +	  				In any event, you only need to add the dependency to the crypto module if you're application is not already depending on Spring Security., +	  			</para>, +	  		</note>]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.2 Release (January ??, 2011), +==============================================, +Bug Fixes, +  * Handle errors from provider during connection/sign-in process more gracefully. (SOCIAL-280), +  * Properly set valuesInitialized flag in AbstractConnection after a profile has been set the first, +    time to avoid unnecessary fetches from the provider. (SOCIAL-282), +  * Guard against potential NullPointerException in JdbcConnectionRepository.findConnectionToUsers()., +    (SOCIAL-283), +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +		this(providerId, message, null);, +		this.providerId = providerId;]
[+++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInConnectionFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.linkedin.connect;, +, +import org.springframework.social.connect.support.OAuth1ConnectionFactory;, +import org.springframework.social.linkedin.api.LinkedInApi;, +, +/**, + * LinkedIn ConnectionFactory implementation., + * @author Keith Donald, + */, +public class LinkedInConnectionFactory extends OAuth1ConnectionFactory<LinkedInApi>{, +, +	public LinkedInConnectionFactory(String consumerKey, String consumerSecret) {, +		super("linkedin", new LinkedInServiceProvider(consumerKey, consumerSecret), new LinkedInApiAdapter());, +	}, +, +}, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInConnectionFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.linkedin.connect;, +, +import org.springframework.social.connect.support.OAuth1ConnectionFactory;, +import org.springframework.social.linkedin.api.LinkedInApi;, +, +/**, + * LinkedIn ConnectionFactory implementation., + * @author Keith Donald, + */, +public class LinkedInConnectionFactory extends OAuth1ConnectionFactory<LinkedInApi>{, +, +	public LinkedInConnectionFactory(String consumerKey, String consumerSecret) {, +		super("linkedin", new LinkedInServiceProvider(consumerKey, consumerSecret), new LinkedInApiAdapter());, +	}, +, +}, +++ /dev/null]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		HttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class);, +		String path = "/connect/" + providerId + getPathExtension(servletRequest);, +		if (prependServletPath(servletRequest)) {, +			path = servletRequest.getServletPath() + path;, +	private String getPathExtension(HttpServletRequest request) {, +		String fileName = WebUtils.extractFullFilenameFromUrlPath(request.getRequestURI());		]
[+++ b/spring-social-core/src/test/resources/org/springframework/social/connect/jdbc/Schema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/spring-social-core/src/test/resources/org/springframework/social/connect/jdbc/Schema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		return registerJdbcConnectionRepositoryBeans(parserContext.getRegistry(), connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		return registerJdbcConnectionRepositoryBeans(parserContext.getRegistry(), connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		return registerJdbcConnectionRepositoryBeans(parserContext.getRegistry(), connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		return registerJdbcConnectionRepositoryBeans(parserContext.getRegistry(), connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		return registerJdbcConnectionRepositoryBeans(parserContext.getRegistry(), connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +@EnableJdbcConnectionRepository]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiTokens.java, +/*, + * Copyright 2011 the original author or authors.]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentTemplate.java, +import org.springframework.social.facebook.support.json.ReferenceList;, +		return graphApi.fetchConnections(objectId, "likes", ReferenceList.class).getList();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentTemplate.java, +import org.springframework.social.facebook.support.json.ReferenceList;, +		return graphApi.fetchConnections(objectId, "likes", ReferenceList.class).getList();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/EventInviteeMixin.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import org.codehaus.jackson.annotate.JsonCreator;, +import org.codehaus.jackson.annotate.JsonProperty;, +import org.codehaus.jackson.map.annotate.JsonDeserialize;, +import org.springframework.social.facebook.support.json.RsvpStatusDeserializer;, +import org.springframework.social.facebook.types.RsvpStatus;, +, +public class EventInviteeMixin {, +	, +	@JsonCreator, +	public EventInviteeMixin(, +			@JsonProperty("id") String id, , +			@JsonProperty("name") String name, , +			@JsonProperty("rsvp_status") @JsonDeserialize(using=RsvpStatusDeserializer.class) RsvpStatus rsvpStatus) {}, +	, +}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentTemplate.java, +import org.springframework.social.facebook.support.json.ReferenceList;, +		return graphApi.fetchConnections(objectId, "likes", ReferenceList.class).getList();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/EventInviteeMixin.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import org.codehaus.jackson.annotate.JsonCreator;, +import org.codehaus.jackson.annotate.JsonProperty;, +import org.codehaus.jackson.map.annotate.JsonDeserialize;, +import org.springframework.social.facebook.support.json.RsvpStatusDeserializer;, +import org.springframework.social.facebook.types.RsvpStatus;, +, +public class EventInviteeMixin {, +	, +	@JsonCreator, +	public EventInviteeMixin(, +			@JsonProperty("id") String id, , +			@JsonProperty("name") String name, , +			@JsonProperty("rsvp_status") @JsonDeserialize(using=RsvpStatusDeserializer.class) RsvpStatus rsvpStatus) {}, +	, +}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/EventOperations.java, +import org.springframework.social.facebook.types.Invitation;, +	 * @return a list {@link Invitation}s for the user, or an empty list if not available., +	List<Invitation> getInvitations();, +	 * @return a list {@link Invitation}s for the user, or an empty list if not available., +	List<Invitation> getInvitations(String userId);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentTemplate.java, +import org.springframework.social.facebook.support.json.ReferenceList;, +		return graphApi.fetchConnections(objectId, "likes", ReferenceList.class).getList();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/EventInviteeMixin.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.servlet.http.HttpServletResponse;, +	public String connectionStatus(NativeWebRequest request, Model model) {, +		setNoCache(request);, +	public String connectionStatus(@PathVariable String providerId, NativeWebRequest request, Model model) {, +		setNoCache(request);, +	private void setNoCache(NativeWebRequest request) {, +		HttpServletResponse response = request.getNativeResponse(HttpServletResponse.class);, +		if (response != null) {, +			response.addHeader("Cache-Control", "no-cache");, +		}, +	}, +]
[+++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +httpComponentsVersion=4.3.6, +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +httpComponentsVersion=4.3.6, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +import java.security.KeyManagementException;, +import java.security.KeyStore;, +import java.security.KeyStoreException;, +import java.security.NoSuchAlgorithmException;, +import org.apache.http.conn.ssl.SSLContexts;, +			return HttpClients.custom(), +					.setProxy(proxy), +					.setSslcontext(getSSLContext()), +					.setHostnameVerifier(SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER), +					.build();, +		}, +, +		private static SSLContext getSSLContext() {, +				KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());, +				TrustStrategy allTrust = new TrustStrategy() {, +					@Override, +				};, +				return SSLContexts.custom().useSSL().loadTrustMaterial(trustStore, allTrust).build();, +			} catch (KeyStoreException e) {, +				e.printStackTrace();, +			} catch (KeyManagementException e) {, +				e.printStackTrace();, +			} catch (NoSuchAlgorithmException e) {, +				e.printStackTrace();, +			return null;]
[+++ b/docs/src/reference/docbook/implementing.xml, +			By now, you should have a API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform Connection model., +				Create a subclass of OAuth2ConnectionFactory&lt;A&gt; named {ProviderId}ConnectionFactory and parameterize A to be the Java binding to the service provider's API., +				Create a subclass of OAuth1ConnectionFactory&lt;A&gt; named {ProviderId}ConnectionFactory and parameterize A to be the Java binding to the service provider's API.]
[+++ b/.gitignore, +.idea, +++ b/.gitignore, +.idea, +++ b/build.gradle, +        testCompile("org.springframework:spring-aop:${springVersion}"), +        testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), +        testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/.gitignore, +.idea, +++ b/build.gradle, +        testCompile("org.springframework:spring-aop:${springVersion}"), +        testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), +        testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson; Greg Turnquist, +[[section_creatingAProviderProject]], +=== Extending an existing Service Provider, +, +Are you already using an existing provider like Spring Social GitHub? You may run into the situation where the Spring Social API doesn't cover every operation you need. Or you may wish to apply extra behavior like caching certain operations. This section explores extension points Spring Social's core includes., +, +[[]], +==== Adding extra operations, +, +If you look at the implementation you are using, it probably has a core template, like GitHubTemplate. But what if it doesn't have the operation you are looking for? You can either wait for the team to develop it, or write it yourself., +, +To write your own extension, simply extend the core class and add your own implementation:, +, +[source,java], +----, +public class ExtendedGitHubTemplate extends GitHubTemplate {, +, +    public static final String API_URL_BASE = "https://api.github.com";, +, +    public ExtendedGitHubTemplate(String githubToken) {, +        super(githubToken);, +    }, +, +    public List<GitHubRepo> findAllRepositories(String type, String name) {, +        return asList(this.getRestTemplate().getForObject(, +                API_URL_BASE + "/{type}/{name}/repos?per_page=100",, +                GitHubRepo[].class, type, name));, +    }, +----, +, +This fragment extends Spring Social GitHub's `GitHubTemplate`. It adds a new method, `findAllRepositories`. By extending the core template, you are granted access to an already-connected `RestTemplate` via `getRestTemplate()`. You have to assemble the URI yourself, but online documentation from the provider puts the power in your hands., +, +[[]], +==== Augmenting Spring Social's RestTemplate, +, +By design, Spring Social uses an embedded `RestTemplate` to do the legwork of interacting with the provider. That way, if you are using more than one Spring Social project, each one's individual instance won't collide with other. As a side effect, it may seem hard to apply something like caching. It's not., +, +Spring Social's `AbstractOAuth2ApiBinding`, the root of all OAuth2-based provider templates, provides a hook ot post process the `RestTemplate` when it gets created., +, +[source,java], +----, +public class ExtendedGitHubTemplate extends GitHubTemplate {, +, +    ..., +, +    @Override, +    protected RestTemplate postProcess(RestTemplate restTemplate) {, +        AspectJProxyFactory factory = new AspectJProxyFactory(restTemplate);, +        factory.addAspect(RestTemplateAspect.class);, +        factory.setProxyTargetClass(true);, +        return factory.getProxy(), +    }, +----, +, +In this example, the code extends `GitHubTemplate` and then overrides sthe `postProcess()` method. In Spring Social core, the *restTemplate* is simply passed through during creation and nothing is changed. In this example, the code creates an AspectJ proxy, adds some `RestTemplateAspect` advice, sets the factory to proxy the class and not its interface, and then returns back a proxy., +, +You can already do things like wrap `GitHubTemplate` operations with caching. This hook enables you to apply any type of advice directly to the `RestTemplate`., +, +, +++ b/.gitignore, +.idea, +++ b/build.gradle, +        testCompile("org.springframework:spring-aop:${springVersion}"), +        testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), +        testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson; Greg Turnquist, +[[section_creatingAProviderProject]], +=== Extending an existing Service Provider, +, +Are you already using an existing provider like Spring Social GitHub? You may run into the situation where the Spring Social API doesn't cover every operation you need. Or you may wish to apply extra behavior like caching certain operations. This section explores extension points Spring Social's core includes., +, +[[]], +==== Adding extra operations, +, +If you look at the implementation you are using, it probably has a core template, like GitHubTemplate. But what if it doesn't have the operation you are looking for? You can either wait for the team to develop it, or write it yourself., +, +To write your own extension, simply extend the core class and add your own implementation:, +, +[source,java], +----, +public class ExtendedGitHubTemplate extends GitHubTemplate {, +, +    public static final String API_URL_BASE = "https://api.github.com";, +]
[+++ b/.gitignore, +exploration, +++ b/.gitignore, +exploration, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Version.java, +			return "Bearer " + accessToken;, +++ b/.gitignore, +exploration, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Version.java, +			return "Bearer " + accessToken;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2RequestInterceptorTest.java, +import static org.junit.Assert.*;, +		assertThatInterceptorWritesAuthorizationHeader(interceptor, "Bearer access_token");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import java.lang.annotation.Annotation;, +import java.util.Map;, +, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.social.config.support.ProviderConfigurationSupport;, +import org.springframework.social.config.xml.ApiHelper;, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Abstract base class for building provider-specific implementations of {@link ImportBeanDefinitionRegistrar} for configuring a connection factory and an API binding bean., + * @author Craig Walls, + */, +public abstract class AbstractProviderConfigRegistrarSupport extends ProviderConfigurationSupport implements ImportBeanDefinitionRegistrar {, +	, +	/**, +	 * Constructs , +	 * @param connectionFactoryClass, +	 * @param apiHelperClass, +	 */, +	public AbstractProviderConfigRegistrarSupport(Class<? extends Annotation> providerConfigAnnotation, Class<? extends ConnectionFactory<?>> connectionFactoryClass,, +			Class<? extends ApiHelper<?>> apiHelperClass) {, +		super(connectionFactoryClass, apiHelperClass);, +		this.providerConfigAnnotation = providerConfigAnnotation;, +	}, +	, +	public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {, +		Map<String, Object> allAttributes = metadata.getAnnotationAttributes(providerConfigAnnotation.getName());		, +		registerBeanDefinitions(registry, allAttributes);		, +	}, +, +	@Override, +	protected String getAppId(Map<String, Object> allAttributes) {, +		return (String) allAttributes.get("appId");, +	}, +	, +	@Override, +	protected String getAppSecret(Map<String, Object> allAttributes) {, +		return (String) allAttributes.get("appSecret");, +	}, +	, +	private final Class<? extends Annotation> providerConfigAnnotation;, +, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import java.lang.annotation.Annotation;, +import java.util.Map;, +, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.social.config.support.ProviderConfigurationSupport;, +import org.springframework.social.config.xml.ApiHelper;, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Abstract base class for building provider-specific implementations of {@link ImportBeanDefinitionRegistrar} for configuring a connection factory and an API binding bean., + * @author Craig Walls, + */, +public abstract class AbstractProviderConfigRegistrarSupport extends ProviderConfigurationSupport implements ImportBeanDefinitionRegistrar {, +	, +	/**, +	 * Constructs , +	 * @param connectionFactoryClass]
[+++ b/samples/spring-social-showcase/pom.xml, +		<!-- For Hibernate Validator -->, +		<repository>, +			<id>org.jboss.repository.releases</id>, +			<name>JBoss Maven Release Repository</name>, +			<url>http://repository.jboss.org/nexus/content/repositories/releases</url>, +			<snapshots><enabled>false</enabled></snapshots>, +		</repository>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/src/reference/docbook/overview.xml, +		<url>http://repo.springsource.org/libs-milestone-local</url>, +		<url>http://repo.springsource.org/libs-snapshot-local</url>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<MultiValueMap> response = getRestOperations().exchange(tokenUrl, HttpMethod.POST, request,, +				MultiValueMap.class);, +		@SuppressWarnings("unchecked"), +		MultiValueMap<String, String> responseMap = response.getBody();, +		return new OAuthToken(responseMap.getFirst("oauth_token"), responseMap.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<MultiValueMap> response = getRestOperations().exchange(tokenUrl, HttpMethod.POST, request,, +				MultiValueMap.class);, +		@SuppressWarnings("unchecked"), +		MultiValueMap<String, String> responseMap = response.getBody();, +		return new OAuthToken(responseMap.getFirst("oauth_token"), responseMap.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oauth1.getRestOperations());, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		mockServer.expect(requestTo("https://www.someprovider.com/oauth/requestToken")), +				.andExpect(method(POST)), +				.andExpect(headerContains("Authorization", "oauth_callback=\"http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback\"")), +				.andExpect(headerContains("Authorization", "oauth_version=\"1.0\"")), +				.andExpect(headerContains("Authorization", "oauth_signature_method=\"HMAC-SHA1\"")), +				.andExpect(headerContains("Authorization", "oauth_consumer_key=\"consumer_key\"")), +				.andExpect(headerContains("Authorization", "oauth_nonce=\"")), +				.andExpect(headerContains("Authorization", "oauth_signature=\"")), +				.andExpect(headerContains("Authorization", "oauth_timestamp=\"")), +				.andRespond(withResponse(new ClassPathResource("requestToken.formencoded", getClass()), responseHeaders));, +, +		OAuthToken requestToken = oauth1.fetchNewRequestToken("http://www.someclient.com/oauth/callback");, +		assertEquals("1234567890", requestToken.getValue());, +		assertEquals("abcdefghijklmnop", requestToken.getSecret());, +		MockRestServiceServer mockServer = MockRestServiceServer, +				.createServer((RestTemplate) oauth1.getRestOperations());, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		mockServer, +				.expect(requestTo("http://www.someprovider.com/oauth/accessToken")), +				.andExpect(method(POST)), +				.andExpect(headerContains("Authorization", "oauth_version=\"1.0\"")), +				.andExpect(headerContains("Authorization", "oauth_signature_method=\"HMAC-SHA1\"")), +				.andExpect(headerContains("Authorization", "oauth_consumer_key=\"consumer_key\"")), +				.andExpect(headerContains("Authorization", "oauth_token=\"1234567890\"")), +				.andExpect(headerContains("Authorization", "oauth_verifier=\"verifier\"")), +				.andExpect(headerContains("Authorization", "oauth_nonce=\"")), +				.andExpect(headerContains("Authorization", "oauth_signature=\"")), +				.andExpect(headerContains("Authorization", "oauth_timestamp=\"")), +				.andRespond(withResponse(new ClassPathResource("accessToken.formencoded", getClass()), responseHeaders));, +, +		OAuthToken requestToken = new OAuthToken("1234567890", "abcdefghijklmnop");, +		OAuthToken accessToken = oauth1.exchangeForAccessToken(new AuthorizedRequestToken(requestToken, "verifier"));, +		assertEquals("9876543210", accessToken.getValue());, +		assertEquals("ponmlkjihgfedcba", accessToken.getSecret());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<MultiValueMap> response = getRestOperations().exchange(tokenUrl, HttpMethod.POST, request,, +				MultiValueMap.class);, +		@SuppressWarnings("unchecked"), +		MultiValueMap<String, String> responseMap = response.getBody();, +		return new OAuthToken(responseMap.getFirst("oauth_token"), responseMap.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oauth1.getRestOperations());, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		mockServer.expect(requestTo("https://www.someprovider.com/oauth/requestToken")), +				.andExpect(method(POST)), +				.andExpect(headerContains("Authorization", "oauth_callback=\"http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback\"")), +				.andExpect(headerContains("Authorization", "oauth_version=\"1.0\"")), +				.andExpect(headerContains("Authorization", "oauth_signature_method=\"HMAC-SHA1\"")), +				.andExpect(headerContains("Authorization", "oauth_consumer_key=\"consumer_key\"")), +				.andExpect(headerContains("Authorization", "oauth_nonce=\"")), +				.andExpect(headerContains("Authorization", "oauth_signature=\"")), +				.andExpect(headerContains("Authorization", "oauth_timestamp=\"")), +				.andRespond(withResponse(new ClassPathResource("requestToken.formencoded", getClass()), responseHeaders));, +, +		OAuthToken requestToken = oauth1.fetchNewRequestToken("http://www.someclient.com/oauth/callback");, +		assertEquals("1234567890", requestToken.getValue());, +		assertEquals("abcdefghijklmnop", requestToken.getSecret());, +		MockRestServiceServer mockServer = MockRestServiceServer, +				.createServer((RestTemplate) oauth1.getRestOperations());, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		mockServer, +				.expect(requestTo("http://www.someprovider.com/oauth/accessToken"))]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +    String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +    String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters);]
[+++ b/docs/src/reference/docbook/apis.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="apis", +    xmlns:xlink="http://www.w3.org/1999/xlink">, +  <title>Interacting with social APIs</title>, +  , +  <section xml:id="section_api_introduction">, +      <title>Introduction</title>, +  </section>, +  , +  <section xml:id="section_api_facebook">, +      <title>Facebook</title>, +, +        <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, +, +        <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, +, +        <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, +      FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +, +        <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>FacebookServiceProvider</classname>'s <methodname>getConnections()</methodname> method:</para>, +, +        <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +, +        <para>Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookOperations</interfacename> created using the connection details for the given account ID. The connection should have been created beforehand via the service provider's <methodname>connect()</methodname> method or using <classname>ConnectController</classname>.</para>  , +, +        <para>With a <interfacename>FacebookOperations</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. These will be covered in the following sections.</para>, +, +        <section id="facebook-getProfile">, +          <title>Retrieving a user's profile data</title>, +, +          <para>You can retrieve a user's Facebook profile data using <interfacename>FacebookOperations</interfacename>' <methodname>getUserProfile()</methodname> method:</para>, +, +          <programlisting><![CDATA[FacebookProfile profile = facebook.getUserProfile();]]></programlisting>, +, +          <para>The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name, their email address, and their Facebook ID.</para>, +, +          <para>If all you need is the user's Facebook ID, you can call <methodname>getProfileId()</methodname> instead:</para>, +, +          <programlisting><![CDATA[String profileId = facebook.getProfileId();]]></programlisting>, +, +          <para>Or if you want the user's Facebook URL, you can call <methodname>getProfileUrl()</methodname>:</para>, +, +          <programlisting><![CDATA[String profileUrl = facebook.getProfileUrl();]]></programlisting>, +, +        </section>, +, +        <section id="facebook-friends">, +          <title>Getting a user's Facebook friends</title>, +, +          <para>An essential feature of Facebook and other social networks is creating a network of friends or contacts. You can access the user's list of Facebook friends by calling the <methodname>getFriendIds()</methodname> method:</para>, +, +          <programlisting><![CDATA[List<String> friendIds = facebook.getFriendIds();]]></programlisting>, +, +          <para>This returns a list of Facebook IDs belonging to the current user's list of friends. This is just a list of <classname>String</classname> IDs, so to retrieve an individual user's profile data, you can turn around and call the <methodname>getUserProfile()</methodname>, passing in one of those IDs to retrieve the profile data for an individual user:</para>, +, +          <programlisting><![CDATA[FacebookProfile firstFriend = facebook.getUserProfile(friendIds.get(0));]]></programlisting>, +, +        </section>, +, +        <section id="facebook-status">, +          <title>Posting to a user's wall</title>, +, +          <para>To post a message to the user's Facebook wall, call the <methodname>updateStatus()</methodname> method, passing in the message to be posted:</para>, +, +          <programlisting><![CDATA[facebook.updateStatus("I'm trying out Spring Social!");]]></programlisting>, +, +          <para>If you'd like to attach a link to the status message, you can do so by passing in a <classname>FacebookLink</classname> object along with the message:</para>, +, +          <programlisting><![CDATA[FacebookLink link = new FacebookLink("http://www.springsource.org/spring-social", , +              "Spring Social", , +              "The Spring Social Project", , +              "Spring Social is an extension to Spring to enable integration with social networks.");, +      facebook.updateStatus("I'm trying out Spring Social!", link);]]></programlisting>, +, +          <para>When constructing the <classname>FacebookLink</classname> object, the first parameter is the link's URL, the second parameter is the name of the link, the third parameter is a caption, and the fourth is a description of the link.</para>, +        </section>, +, +        <section id="facebook-publishing">, +          <title>Publishing to Facebook</title>, +, +          <para>Facebook's Graph API allows authenticated users to publish data to several of its object types. <interfacename>FacebookOperations</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method.</para>, +, +          <para>For example, in the previous section you saw how to post a message to the user's Facebook wall using <methodname>updateStatus()</methodname>. Alternatively you could have accomplished the same thing using <methodname>publish()</methodname> like this:</para>, +, +          <programlisting><![CDATA[MultiValueMap<String, String> data = new LinkedMultiValueMap<String, String>();, +      data.set("message", message);, +      publish("me", "feed", data);]]></programlisting>, +, +          <para>The first argument to the <methodname>publish()</methodname> method is the object to publish to--in this case "me" indicates the authenticated user. The second argument is the connection associated with the object--"feed" indicates that it is the user's Facebook wall. Finally, the third argument is a <classname>MultiValueMap</classname> containing data to be published. In this case, it only contains a "message" to be posted to the user's wall.</para> , +, +          <para>You can read more about what graph API objects and connections Facebook supports for publishing at <ulink url="http://developers.facebook.com/docs/api#editing"/></para>, +        </section>, +  </section>, +  <section xml:id="section_api_github">, +      <title>GitHub</title>, +      <para>Although many developers think of GitHub as Git-based source code hosting, the tagline in GitHub's logo clearly states that GitHub is about "social coding". GitHub is a social network that links developers together and with the projects they follow and/or contribute to.</para>, +, +      <para>Spring Social's <interfacename>GitHubOperations</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform.</para>, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	AuthorizationCode,, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	AuthorizationCode,, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		if (grantType == GrantType.AuthorizationCode) {, +		} else if (grantType == GrantType.ImplicitGrant) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	AuthorizationCode,, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		if (grantType == GrantType.AuthorizationCode) {, +		} else if (grantType == GrantType.ImplicitGrant) {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/json/PostMixin.java, +import org.codehaus.jackson.annotate.JsonIgnoreProperties;, +@JsonIgnoreProperties("actions"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	AuthorizationCode,, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		if (grantType == GrantType.AuthorizationCode) {, +		} else if (grantType == GrantType.ImplicitGrant) {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/json/PostMixin.java, +import org.codehaus.jackson.annotate.JsonIgnoreProperties;, +@JsonIgnoreProperties("actions"), +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/testdata/feed.json, +	         "actions": [, +	            {, +	               "name": "Comment",, +	               "link": "http://www.facebook.com/100001387295207/posts/160064377383138", +	            },, +	            {, +	               "name": "Like",, +	               "link": "http://www.facebook.com/100001387295207/posts/160064377383138", +	            }, +	         ],, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	AuthorizationCode,, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		if (grantType == GrantType.AuthorizationCode) {, +		} else if (grantType == GrantType.ImplicitGrant) {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/json/PostMixin.java, +import org.codehaus.jackson.annotate.JsonIgnoreProperties;, +@JsonIgnoreProperties("actions"), +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/testdata/feed.json, +	         "actions": [, +	            {, +	               "name": "Comment",, +	               "link": "http://www.facebook.com/100001387295207/posts/160064377383138", +	            },, +	            {, +	               "name": "Like",, +	               "link": "http://www.facebook.com/100001387295207/posts/160064377383138", +	            }, +	         ],, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		String actual = oAuth2Template.buildAuthorizeUrl("http://www.someclient.com/connect/foo", "read,write", null, GrantType.AuthorizationCode, null);, +		String actual = oAuth2Template.buildAuthorizeUrl("http://www.someclient.com/connect/foo", "read,write", null, GrantType.ImplicitGrant, null);, +		String actual = oAuth2Template.buildAuthorizeUrl("http://www.someclient.com/connect/foo", null, null, GrantType.AuthorizationCode, null);, +		String actual = oAuth2Template.buildAuthorizeUrl("http://www.someclient.com/connect/foo", "read,write", null, GrantType.ImplicitGrant, params);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	AuthorizationCode,, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		if (grantType == GrantType.AuthorizationCode) {, +		} else if (grantType == GrantType.ImplicitGrant) {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/impl/json/PostMixin.java, +import org.codehaus.jackson.annotate.JsonIgnoreProperties;, +@JsonIgnoreProperties("actions"), +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/testdata/feed.json, +	         "actions": [, +	            {, +	               "name": "Comment",, +	               "link": "http://www.facebook.com/100001387295207/posts/160064377383138", +	            },, +	            {, +	               "name": "Like",, +	               "link": "http://www.facebook.com/100001387295207/posts/160064377383138", +	            }, +	         ],, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		String actual = oAuth2Template.buildAuthorizeUrl("http://www.someclient.com/connect/foo", "read,write", null, GrantType.AuthorizationCode, null);, +		String actual = oAuth2Template.buildAuthorizeUrl("http://www.someclient.com/connect/foo", "read,write", null, GrantType.ImplicitGrant, null);, +		String actual = oAuth2Template.buildAuthorizeUrl("http://www.someclient.com/connect/foo", null, null, GrantType.AuthorizationCode, null);, +		String actual = oAuth2Template.buildAuthorizeUrl("http://www.someclient.com/connect/foo", "read,write", null, GrantType.ImplicitGrant, params);]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return new OAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"));, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return new OAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return new AccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), (Integer) result.get("expires_in"));]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +/**, + * Abstract bean definition parser for declaring {@link ConnectionFactory}s in a Spring application context., + * Automatically creates a {@link ConnectionFactoryLocator} bean if none exists and registers the {@link ConnectionFactory} bean with the {@link ConnectionFactoryLocator}., + * @author Craig Walls, + */, +abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +, +	private Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +, +	/**, +	 * Constructs a connection factory-creating {@link BeanDefinitionParser}., +	 * @param connectionFactoryClass The type of {@link ConnectionFactory} to create. Must have a two-argument constructor taking an application's ID and secret as Strings., +	 */, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass) {, +		this.connectionFactoryClass = connectionFactoryClass;		, +	}, +	, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET));, +		return connectionFactoryLocatorBD;, +	}, +, +	private BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret) {, +		return BeanDefinitionBuilder.genericBeanDefinition(connectionFactoryClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +	}, +, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret) {, +		PropertyValue connectionFactoriesPropertyValue = connectionFactoryLocatorBD.getPropertyValues().getPropertyValue(CONNECTION_FACTORIES);, +		@SuppressWarnings("unchecked"), +		List<BeanDefinition> connectionFactoriesList = connectionFactoriesPropertyValue != null ? , +				(List<BeanDefinition>) connectionFactoriesPropertyValue.getValue() : new ManagedList<BeanDefinition>();, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret));		, +		connectionFactoryLocatorBD.getPropertyValues().addPropertyValue(CONNECTION_FACTORIES, connectionFactoriesList);, +	}, +, +	private BeanDefinition getConnectionFactoryLocatorBeanDefinition(ParserContext parserContext) {, +		String proxyTargetBeanId = CONNECTION_FACTORY_LOCATOR_ID + "_target";, +		if (!parserContext.getRegistry().containsBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID)) {		, +			BeanDefinition connFactoryLocatorBeanDef = BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition();, +			BeanDefinitionHolder proxyTargetBeanDefinitionHolder = new BeanDefinitionHolder(connFactoryLocatorBeanDef, proxyTargetBeanId);, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, ScopedProxyUtils.decorateWithScopedProxy(parserContext, proxyTargetBeanDefinitionHolder, false));, +		}		, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(proxyTargetBeanId);, +		return connectionFactoryLocatorBD;, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +/**, + * Abstract bean definition parser for declaring {@link ConnectionFactory}s in a Spring application context., + * Automatically creates a {@link ConnectionFactoryLocator} bean if none exists and registers the {@link ConnectionFactory} bean with the {@link ConnectionFactoryLocator}., + * @author Craig Walls, + */, +abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +, +	private Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +, +	/**, +	 * Constructs a connection factory-creating {@link BeanDefinitionParser}., +	 * @param connectionFactoryClass The type of {@link ConnectionFactory} to create. Must have a two-argument constructor taking an application's ID and secret as Strings., +	 */, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass) {, +		this.connectionFactoryClass = connectionFactoryClass;		, +	}, +	, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET));, +		return connectionFactoryLocatorBD;, +	}, +, +	private BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret) {, +		return BeanDefinitionBuilder.genericBeanDefinition(connectionFactoryClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +	}, +, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret) {, +		PropertyValue connectionFactoriesPropertyValue = connectionFactoryLocatorBD.getPropertyValues().getPropertyValue(CONNECTION_FACTORIES);, +		@SuppressWarnings("unchecked"), +		List<BeanDefinition> connectionFactoriesList = connectionFactoriesPropertyValue != null ? , +				(List<BeanDefinition>) connectionFactoriesPropertyValue.getValue() : new ManagedList<BeanDefinition>();, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret));		, +		connectionFactoryLocatorBD.getPropertyValues().addPropertyValue(CONNECTION_FACTORIES, connectionFactoriesList);, +	}, +, +	private BeanDefinition getConnectionFactoryLocatorBeanDefinition(ParserContext parserContext) {, +		String proxyTargetBeanId = CONNECTION_FACTORY_LOCATOR_ID + "_target";, +		if (!parserContext.getRegistry().containsBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID)) {		, +			BeanDefinition connFactoryLocatorBeanDef = BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition();, +			BeanDefinitionHolder proxyTargetBeanDefinitionHolder = new BeanDefinitionHolder(connFactoryLocatorBeanDef, proxyTargetBeanId);, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, ScopedProxyUtils.decorateWithScopedProxy(parserContext, proxyTargetBeanDefinitionHolder, false));, +		}		, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(proxyTargetBeanId);, +		return connectionFactoryLocatorBD;, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookConnectionFactoryBeanDefinitionParser.java, +/**]
[+++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/settings.gradle, +include 'spring-social-config', +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/settings.gradle, +include 'spring-social-config', +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.w3c.dom.Element;, +, +class ServiceProviderElementParser implements BeanDefinitionParser {, +	, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String beanId = element.getAttribute("id");, +		String providerClassName = element.getAttribute("class");, +		String clientKey = element.getAttribute("app-key");, +		String clientSecret = element.getAttribute("app-secret");, +		String connectionRepository = element.getAttribute("connection-repository");, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(providerClassName);, +		providerBeanBuilder.addConstructorArgValue(clientKey);, +		providerBeanBuilder.addConstructorArgValue(clientSecret);, +		providerBeanBuilder.addConstructorArgReference(connectionRepository);, +, +		BeanDefinition providerBeanDefinition = providerBeanBuilder.getBeanDefinition();, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);]
[+++ b/samples/twitter-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +	    </dependency>, +	    , +	    <dependency>, +++ b/samples/twitter-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +	    </dependency>, +	    , +	    <dependency>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.provider.ServiceProviderConnection;, +, +		List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, +		List<String> connectionNames = new ArrayList<String>();, +		for (ServiceProviderConnection<TwitterOperations> serviceProviderConnection : connections) {, +			connectionNames.add(serviceProviderConnection.getServiceApi().getProfileId());, +		}, +, +			model.addAttribute("connections", connectionNames);, +, +		List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, +		for (ServiceProviderConnection<TwitterOperations> connection : connections) {, +			TwitterOperations twitter = connection.getServiceApi();, +			if (tweetForm.isTweetToAll() || twitter.getProfileId().equals(tweetForm.getScreenName())) {, +		}, +++ b/samples/twitter-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +	    </dependency>, +	    , +	    <dependency>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.provider.ServiceProviderConnection;, +, +		List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, +		List<String> connectionNames = new ArrayList<String>();, +		for (ServiceProviderConnection<TwitterOperations> serviceProviderConnection : connections) {, +			connectionNames.add(serviceProviderConnection.getServiceApi().getProfileId());, +		}, +, +			model.addAttribute("connections", connectionNames);, +, +		List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, +		for (ServiceProviderConnection<TwitterOperations> connection : connections) {, +			TwitterOperations twitter = connection.getServiceApi();, +			if (tweetForm.isTweetToAll() || twitter.getProfileId().equals(tweetForm.getScreenName())) {, +		}, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/twitter-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +	    </dependency>, +	    , +	    <dependency>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.provider.ServiceProviderConnection;, +, +		List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, +		List<String> connectionNames = new ArrayList<String>();, +		for (ServiceProviderConnection<TwitterOperations> serviceProviderConnection : connections) {, +			connectionNames.add(serviceProviderConnection.getServiceApi().getProfileId());, +		}, +, +			model.addAttribute("connections", connectionNames);, +, +		List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, +		for (ServiceProviderConnection<TwitterOperations> connection : connections) {, +			TwitterOperations twitter = connection.getServiceApi();, +			if (tweetForm.isTweetToAll() || twitter.getProfileId().equals(tweetForm.getScreenName())) {, +		}, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/twitter-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +	    </dependency>, +	    , +	    <dependency>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.provider.ServiceProviderConnection;, +, +		List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, +		List<String> connectionNames = new ArrayList<String>();, +		for (ServiceProviderConnection<TwitterOperations> serviceProviderConnection : connections) {, +			connectionNames.add(serviceProviderConnection.getServiceApi().getProfileId());]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +				<listitem><para>Connection#getApi() would return a TwitterApi giving the client application access to the full capabilities of Twitter's native API.</para></listitem>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	 * @param connectionSignUp a {@link ConnectionSignUp} object]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		, +		// BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, +		//           defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., +		//           Need to create the CF as a bean definition and then register it with the CFL., +		, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		, +		// BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, +		//           defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., +		//           Need to create the CF as a bean definition and then register it with the CFL., +		, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		parserContext.getRegistry().registerBeanDefinition(USERS_CONNECTION_REPOSITORY_ID, decorateWithScopedProxy(USERS_CONNECTION_REPOSITORY_ID, usersConnectionRepositoryBD, parserContext));, +		BeanDefinition connectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition().addConstructorArgValue(USER_ID_STRING_ID).getBeanDefinition();, +		connectionRepositoryBD.setFactoryBeanName(USERS_CONNECTION_REPOSITORY_ID);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY);, +		connectionRepositoryBD.setScope("request");, +		parserContext.getRegistry().registerBeanDefinition(CONNECTION_REPOSITORY_ID, decorateWithScopedProxy(CONNECTION_REPOSITORY_ID, connectionRepositoryBD, parserContext));, +		return connectionRepositoryBD;, +	}, +, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		, +		// BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, +		//           defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., +		//           Need to create the CF as a bean definition and then register it with the CFL., +		, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		parserContext.getRegistry().registerBeanDefinition(USERS_CONNECTION_REPOSITORY_ID, decorateWithScopedProxy(USERS_CONNECTION_REPOSITORY_ID, usersConnectionRepositoryBD, parserContext));, +		BeanDefinition connectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition().addConstructorArgValue(USER_ID_STRING_ID).getBeanDefinition();, +		connectionRepositoryBD.setFactoryBeanName(USERS_CONNECTION_REPOSITORY_ID);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY);, +		connectionRepositoryBD.setScope("request");, +		parserContext.getRegistry().registerBeanDefinition(CONNECTION_REPOSITORY_ID, decorateWithScopedProxy(CONNECTION_REPOSITORY_ID, connectionRepositoryBD, parserContext));, +		return connectionRepositoryBD;, +	}, +, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd, +		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd, +		http://www.springframework.org/schema/social http://www.springframework.org/schema/social/spring-social.xsd">, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		, +		// BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, +		//           defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., +		//           Need to create the CF as a bean definition and then register it with the CFL., +		, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableInMemoryConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Inherited;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.Import;, +import org.springframework.social.connect.ConnectionSignUp;, +import org.springframework.social.connect.mem.InMemoryUsersConnectionRepository;, +, +/**, + * Annotation to enable in-memory persistence of connections., + * Configures a singleton {@link InMemoryUsersConnectionRepository} and a request-scoped InMemoryConnectionRepository. , + * @author Craig Walls, + */, +@Target(ElementType.TYPE), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +@Inherited, +@Import(InMemoryConnectionRepositoryRegistrar.class), +public @interface EnableInMemoryConnectionRepository {, +, +	/**, +	 * The ID to assign to the ConnectionRepository bean., +	 * Defaults to "connectionRepository". , +	 */, +	String connectionRepositoryId() default "connectionRepository";, +	, +	/**, +	 * The ID to assign to the UsersConnectionRepository bean., +	 * Defaults to "usersConnectionRepository". , +	 */, +	String usersConnectionRepositoryId() default "usersConnectionRepository";, +	, +	/**, +	 * The ID of the ConnectionFactoryLocator bean to fetch a ConnectionFactory from when creating/persisting connections., +	 * Defaults to "connectionFactoryLocator". , +	 */, +	String connectionFactoryLocatorRef() default "connectionFactoryLocator";, +	, +	/**, +	 * The ID of a UserIdSource bean used to determine the unique identifier of the current user., +	 * Defaults to "userIdSource". , +	 */, +	String userIdSourceRef() default "userIdSource";, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableInMemoryConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Inherited;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.Import;, +import org.springframework.social.connect.ConnectionSignUp;]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private final static Log logger = LogFactory.getLog(ConnectController.class);, +	, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth2 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private final static Log logger = LogFactory.getLog(ConnectController.class);, +	, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth2 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.web.client.HttpClientErrorException;, +	private final static Log logger = LogFactory.getLog(ConnectSupport.class);, +, +		try {, +		} catch (HttpClientErrorException e) {, +			logger.warn("HttpClientErrorException while completing connection: " + e.getMessage());, +			logger.warn("      Response body: " + e.getResponseBodyAsString());, +			throw e;, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private final static Log logger = LogFactory.getLog(ConnectController.class);, +	, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth2 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.web.client.HttpClientErrorException;, +	private final static Log logger = LogFactory.getLog(ConnectSupport.class);, +, +		try {, +		} catch (HttpClientErrorException e) {, +			logger.warn("HttpClientErrorException while completing connection: " + e.getMessage());, +			logger.warn("      Response body: " + e.getResponseBodyAsString());, +			throw e;, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private final static Log logger = LogFactory.getLog(ProviderSignInController.class);, +	, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth2 callback (" + e.getMessage() + "). Redirecting to " + signInUrl);, +			return redirect(signInUrl);, +		}]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.servlet.http.HttpServletResponse;, +	public String connectionStatus(NativeWebRequest request, Model model) {, +		setNoCache(request);, +	public String connectionStatus(@PathVariable String providerId, NativeWebRequest request, Model model) {, +		setNoCache(request);, +	private void setNoCache(NativeWebRequest request) {, +		HttpServletResponse response = request.getNativeResponse(HttpServletResponse.class);, +		if (response != null) {, +			response.addHeader("Cache-Control", "no-cache");, +		}, +	}, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +import java.io.Serializable;, +, +@SuppressWarnings("serial"), +public final class ConnectionKey implements Serializable {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.Collections;, +import org.springframework.social.support.ParameterMap;, +public final class OAuth1Parameters extends ParameterMap {, +	 * Shared instance for passing zero authorization parameters (common for OAuth 1.0a-based flows)., +	 * The underlying map is immutable., +	 * @see Collections#emptyMap(), +	public static final OAuth1Parameters NONE = new OAuth1Parameters(Collections.<String, List<String>>emptyMap());, +	/**, +	 * Creates a new OAuth1Parameters map that is initially empty., +	 * Use the setter methods to add parameters after construction., +	 * @see #setCallbackUrl(String), +	 * @see #set(String, String), +	 */, +	public OAuth1Parameters() {, +		super();, +	}, +	, +	/**, +	 * Creates a new OAuth1Parameters populated from the initial parameters provided., +	 * @param parameters the initial parameters, +	 * @see #setCallbackUrl(String), +	 */	, +	 * The authorization callback url., +	 * This value must be included for OAuth 1.0 providers (and NOT for OAuth 1.0a), +	/**, +	 * Sets the authorization callback url., +	 * This value must be included for OAuth 1.0 providers (and NOT for OAuth 1.0a)., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.Collections;, +import org.springframework.social.support.ParameterMap;, +public final class OAuth1Parameters extends ParameterMap {, +	 * Shared instance for passing zero authorization parameters (common for OAuth 1.0a-based flows)., +	 * The underlying map is immutable., +	 * @see Collections#emptyMap(), +	public static final OAuth1Parameters NONE = new OAuth1Parameters(Collections.<String, List<String>>emptyMap());, +	/**, +	 * Creates a new OAuth1Parameters map that is initially empty., +	 * Use the setter methods to add parameters after construction., +	 * @see #setCallbackUrl(String), +	 * @see #set(String, String), +	 */, +	public OAuth1Parameters() {, +		super();, +	}, +	, +	/**, +	 * Creates a new OAuth1Parameters populated from the initial parameters provided., +	 * @param parameters the initial parameters, +	 * @see #setCallbackUrl(String), +	 */	, +	 * The authorization callback url., +	 * This value must be included for OAuth 1.0 providers (and NOT for OAuth 1.0a), +	/**, +	 * Sets the authorization callback url., +	 * This value must be included for OAuth 1.0 providers (and NOT for OAuth 1.0a)., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Parameters.java, +import org.springframework.social.support.ParameterMap;, +public final class OAuth2Parameters extends ParameterMap {, +	/**, +	 * Creates a new OAuth2Parameters map that is initially empty., +	 * Use the setter methods to add parameters after construction., +	 * @see #setRedirectUri(String), +	 * @see #setScope(String), +	 * @see #setState(String), +	 * @see #set(String, String), +	 */, +	public OAuth2Parameters() {, +		super();, +	}, +	, +	/**, +	 * Creates a new OAuth2Parameters populated from the initial parameters provided., +	 * @param parameters the initial parameters, +	 * @see #setRedirectUri(String), +	 * @see #setScope(String), +	 * @see #setState(String), +	 */, +	 * The authorization callback url., +	 * This value must match the redirectUri registered with the provider., +	 * This is optional per the OAuth 2 spec, but required by most OAuth 2 providers. , +	 * Sets the authorization callback url., +	 * This value must match the redirectUri registered with the provider., +	 * This is optional per the OAuth 2 spec, but required by most OAuth 2 providers., +	 * The permissions the application is seeking with the authorization (optional)., +	 * An opaque key that must be included in the provider's authorization callback (optional)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.Collections;, +import org.springframework.social.support.ParameterMap;, +public final class OAuth1Parameters extends ParameterMap {, +	 * Shared instance for passing zero authorization parameters (common for OAuth 1.0a-based flows)., +	 * The underlying map is immutable., +	 * @see Collections#emptyMap(), +	public static final OAuth1Parameters NONE = new OAuth1Parameters(Collections.<String, List<String>>emptyMap());, +	/**, +	 * Creates a new OAuth1Parameters map that is initially empty., +	 * Use the setter methods to add parameters after construction., +	 * @see #setCallbackUrl(String)]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String beanId = element.getAttribute("id");, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String beanId = element.getAttribute("id");, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="id" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation>, +						The bean ID, +					</xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String beanId = element.getAttribute("id");, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="id" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation>, +						The bean ID, +					</xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import static org.junit.Assert.*;, +, +		assertEquals("facebookServiceProvider", applicationContext.getBeanNamesForType(FacebookServiceProvider.class)[0]);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String beanId = element.getAttribute("id");, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="id" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation>, +						The bean ID, +					</xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import static org.junit.Assert.*;, +, +		assertEquals("facebookServiceProvider", applicationContext.getBeanNamesForType(FacebookServiceProvider.class)[0]);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider id="facebookServiceProvider", +		class="org.springframework.social.facebook.connect.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String beanId = element.getAttribute("id");, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="id" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation>, +						The bean ID, +					</xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import static org.junit.Assert.*;, +, +		assertEquals("facebookServiceProvider", applicationContext.getBeanNamesForType(FacebookServiceProvider.class)[0]);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider id="facebookServiceProvider", +		class="org.springframework.social.facebook.connect.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, +	private final OAuth10Operations oauth1Operations;, +, +	public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +			String consumerSecret, OAuth10Operations oauth1Operations) {, +		super(id, connectionRepository, consumerKey, consumerSecret);, +		this.oauth1Operations = oauth1Operations;, +	}, +, +	public OAuth10Operations getOAuth10Operations() {, +		return oauth1Operations;, +	}, +]
[+++ b/docs/src/reference/docbook/facebook.xml, +++ b/docs/src/reference/docbook/facebook.xml, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    Configuring service providers, +      - Config-oriented, +        - Generic, +        - Supported providers, +, +, +      - AccountConnectionRepository, +      , +      , +      - ServiceProviderFactory, +  , +, +      - Jdbc-oriented configuration of providers, +      , +      - Using a provider, +        - connection-management, +        - service operations, +        , +  <section xml:id="section_serviceproviderconfig">, +      <title>Configuring Service Providers</title>, +      <para>You can configure a service provider in the Spring application context using Spring Social's Spring configuration namespace:</para>, +      <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans" , +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xmlns:social="http://www.springframework.org/schema/spring-social", +    xsi:schemaLocation="http://www.springframework.org/schema/spring-social , +             http://www.springframework.org/schema/social/spring-social-1.0.xsd, +        http://www.springframework.org/schema/beans , +             http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +    ..., +</beans>]]></programlisting>, +      <para>The <code><![CDATA[<social:service-provider>]]></code> element can be used to configure any service provider in Spring. For example, to configure a Twitter provider:</para>, +<programlisting><![CDATA[<social:service-provider id="twitter", +    consumer-key="twitter_key", +    consumer-secret="twitter_secret", +    display-name="Twitter", +    class="org.springframework.social.connect.providers.TwitterServiceProvider", +    request-token-url="https://twitter.com/oauth/request_token" , +    authorization-url="https://twitter.com/oauth/authorize?oauth_token={requestToken}", +    access-token-url="https://twitter.com/oauth/access_token" />]]></programlisting>, +      <para>The <code>consumer-key</code> and <code>consumer-secret</code> attributes specify the key and secret values assigned to your application when you registered it with the provider.</para>, +      <para>The <code>display-name</code> attribute sets a name that describes the provider in user-friendly terms when referring to the provider in the application's user-interface. This is an optional parameter; if left blank, it will default to the value of the <code>id</code> attribute with the first character capitalized.</para>, +      <para>The <code>request-token-url</code>, <code>authorization-url</code>, and <code>access-token-url</code> attributes set the URLs that Spring should use when coordinating authorization with the provider. The <code>request-token-url</code> is optional; if left blank, the provider is assumed to be an OAuth 2 provider.</para>, +      <para>The <code>class</code> attribute specifies the fully-qualified name of the provider implementation. A service provider implementation should implement the <interfacename>ServiceProvider</interfacename> interface or extend either <classname>AbstractServiceProvider</classname>, <classname>AbstractOAuth1ServiceProvider</classname>, or <classname>AbstractOAuth2ServiceProvider</classname>.</para>, +      <para>To make things simpler, the Spring Social namespace also offers a handful of configuration elements for the service providers for which Spring Social provides implementations (currently Twitter, Facebook, Gowalla, LinkedIn, and TripIt). For example, to configure a Twitter service provider:</para>, +        <programlisting><![CDATA[<social:twitter-provider consumer-key="twitter_key" , +    consumer-secret="twitter_secret" />]]></programlisting>, +        <para>Similarly, a Facebook service provider can be configured like this:</para>, +        <programlisting><![CDATA[<social:facebook-provider consumer-key="facebook_key" , +    consumer-secret="facebook_secret" app-id="1234" />]]></programlisting>, +        <para>Note that the Facebook service provider also takes an <code>app-id</code> attribute. Applications registered with Facebook are assigned an application ID along with the consumer key and secret that may be used by some parts of Facebook's API (such as the "Like" button).</para>, +        , +        <para>For a Gowalla service provider, the following XML may be used:</para>, +        , +        <programlisting><![CDATA[<social:gowalla-provider consumer-key="gowalla_key" , +    consumer-secret="gowalla_secret" />]]></programlisting>, +        , +        <para>Or for a TripIt service provider:</para>, +        , +        <programlisting><![CDATA[<social:tripit-provider consumer-key="tripit_key" , +    consumer-secret="tripit_secret" />]]></programlisting>, +        , +        <para>Finally, a LinkedIn service provider may be configured as follows:</para>, +        , +        <programlisting><![CDATA[<social:linkedin-provider consumer-key="linkedin_key" , +    consumer-secret="linkedin_secret" />]]></programlisting>, +</section>, +<section xml:id="section_knownserviceproviderconfig">, +        <title>Configuring service providers in RDBMS</title>, +        , +        <para>Configuring service providers in Spring configuration is straightforward and very convenient. However, should you need to edit any of the service provider details, you would need to edit the Spring configuration and redeploy your application.</para>, +        , +        <para>One reason that you may need to edit your service provider details is if you reset your client key and secret. Let's say that those values fell into the wrong hands and some other application out there is posing as your application. Most OAuth providers make it easy to assign a new key/secret pair to applications, voiding the previous pair. But if your service provider is configured in Spring configuration, that means you'll need to make the changes, rebuild your application and then redeploy it.</para>, +        , +        <para>Optionally, you may choose to configure your service providers externally in a relational database. Spring Social's <classname>JdbcServiceProviderFactory</classname> can create service providers from configuration details stored in RDBMS.</para>, +            , +        <para>First, you must have a <code>ServiceProvider</code> table in your database. The following DDL creates a table suitable for use with <classname>JdbcServiceProviderFactory</classname>:</para> , +, +        <programlisting><![CDATA[create table ServiceProvider (name varchar,, +    displayName varchar not null,, +    implementation varchar not null,, +    apiKey varchar not null,					, +    secret varchar,, +    appId bigint,, +    requestTokenUrl varchar,, +    authorizeUrl varchar,, +    accessTokenUrl varchar,, +    primary key (name));]]></programlisting>, +, +        <para>With the <code>ServiceProvider</code> table in place, you may insert rows to represent each of the service providers your application will interact with. For example, you may insert a row for a Twitter service provider:</para>, +, +        <programlisting><![CDATA[insert into ServiceProvider (name, displayName, implementation, apiKey, secret, requestTokenUrl, authorizeUrl, , +      accessTokenUrl) values , +   ('twitter', 'Twitter', 'org.springframework.social.connect.providers.TwitterServiceProvider', , +      'twitter_key', 'twitter_secret', 'https://twitter.com/oauth/request_token',, +      'https://twitter.com/oauth/authorize?oauth_token={requestToken}',      , +      'https://twitter.com/oauth/access_token');]]></programlisting>]
[+++ b/docs/src/reference/docbook/facebook.xml, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceProvider</classname>:</para>, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceProvider</classname>:</para>, +++ b/docs/src/reference/docbook/github.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="github", +    xmlns:xlink="http://www.w3.org/1999/xlink">, +  <title>GitHub</title>, +, +  <para>Although many developers thing of GitHub as Git-based source code hosting, the tagline in GitHub's logo clearly states that GitHub is about "social coding". GitHub is a social network that links developers together and with the projects they follow and/or contribute to.</para>, +  , +  <para>Spring Social's <interfacename>GitHubOperations</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform.</para>, +  , +    <para>To obtain an instance of <classname>GitHubTemplate</classname>, you can instantiate it by passing an authorized access token to its constructor:</para>, +, +    <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from GitHub after OAuth authorization, +  GitHubOperations github = new GitHubTemplate(accessToken);]]></programlisting>, +, +    <para>If you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>GitHubTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>GitHubServiceProvider</classname>:</para>, +, +    <programlisting><![CDATA[GitHubOperations github = githubProvider.getServiceOperations(accountId);]]></programlisting>, +, +    <para>Here, <classname>GitHubServiceProvider</classname> is being asked for a <interfacename>GitHubOperations</interfacename> that was created using the connection details for the given account ID. The connection should have been created beforehand via the service provider's <methodname>connect()</methodname> method or using <classname>ConnectController</classname>.</para>  , +, +    <para>With a <interfacename>GitHubOperations</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. These will be covered in the following sections.</para>, +, +  <section id="github-profile">, +    <title>Retrieving a GitHub user's profile</title>, +, +    <para>To get the currently authenticated user's GitHub profile data, call <interfacename>GitHubOperations</interfacename>'s <methodname>getUserProfile()</methodname> method:</para>, +    , +    <programlisting><![CDATA[GitHubUserProfile profile = github.getUserProfile();]]></programlisting>, +    , +    <para>The <classname>GitHubUserProfile</classname> returned from <methodname>getUserProfile()</methodname> includes several useful pieces of information about the user, including their...</para>, +    , +    <itemizedlist>, +        <listitem><para>Name</para></listitem>, +        <listitem><para>Username (ie, login name)</para></listitem>, +        <listitem><para>Company</para></listitem>, +        <listitem><para>Email address</para></listitem>, +        <listitem><para>Location</para></listitem>, +        <listitem><para>Blog URL</para></listitem>, +        <listitem><para>Date they joined GitHub</para></listitem>, +    </itemizedlist>, +, +    <para>If all you need is the user's GitHub username, you can get that by calling the <methodname>getProfileId()</methodname> method:</para>, +    , +    <programlisting><![CDATA[String username = github.getProfileId();]]></programlisting>, +    , +    <para>And if you need a URL to the user's GitHub profile page, you can use the <methodname>getProfileUrl()</methodname> method:</para>, +    , +    <programlisting><![CDATA[String profileUrl = github.getProfileUrl();]]></programlisting>, +    , +  </section>, +</chapter>, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceProvider</classname>:</para>, +++ b/docs/src/reference/docbook/github.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="github", +    xmlns:xlink="http://www.w3.org/1999/xlink">, +  <title>GitHub</title>, +, +  <para>Although many developers thing of GitHub as Git-based source code hosting, the tagline in GitHub's logo clearly states that GitHub is about "social coding". GitHub is a social network that links developers together and with the projects they follow and/or contribute to.</para>, +  , +  <para>Spring Social's <interfacename>GitHubOperations</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform.</para>, +  , +    <para>To obtain an instance of <classname>GitHubTemplate</classname>, you can instantiate it by passing an authorized access token to its constructor:</para>, +, +    <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from GitHub after OAuth authorization, +  GitHubOperations github = new GitHubTemplate(accessToken);]]></programlisting>, +, +    <para>If you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>GitHubTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>GitHubServiceProvider</classname>:</para>, +, +    <programlisting><![CDATA[GitHubOperations github = githubProvider.getServiceOperations(accountId);]]></programlisting>, +, +    <para>Here, <classname>GitHubServiceProvider</classname> is being asked for a <interfacename>GitHubOperations</interfacename> that was created using the connection details for the given account ID. The connection should have been created beforehand via the service provider's <methodname>connect()</methodname> method or using <classname>ConnectController</classname>.</para>  , +, +    <para>With a <interfacename>GitHubOperations</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. These will be covered in the following sections.</para>, +, +  <section id="github-profile">, +    <title>Retrieving a GitHub user's profile</title>, +, +    <para>To get the currently authenticated user's GitHub profile data, call <interfacename>GitHubOperations</interfacename>'s <methodname>getUserProfile()</methodname> method:</para>, +    , +    <programlisting><![CDATA[GitHubUserProfile profile = github.getUserProfile();]]></programlisting>, +    , +    <para>The <classname>GitHubUserProfile</classname> returned from <methodname>getUserProfile()</methodname> includes several useful pieces of information about the user, including their...</para>, +    , +    <itemizedlist>, +        <listitem><para>Name</para></listitem>, +        <listitem><para>Username (ie, login name)</para></listitem>, +        <listitem><para>Company</para></listitem>, +        <listitem><para>Email address</para></listitem>, +        <listitem><para>Location</para></listitem>, +        <listitem><para>Blog URL</para></listitem>, +        <listitem><para>Date they joined GitHub</para></listitem>, +    </itemizedlist>, +]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , + */, +package org.springframework.social.facebook.connect;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , + */, +package org.springframework.social.facebook.connect;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumList.java, +/**, + * Holder class to hold a typed list of Albums, pulled from the "data" field of the JSON object structure., + * This helps Jackson know what type to deserialize list data into. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , + */, +package org.springframework.social.facebook.connect;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumList.java, +/**, + * Holder class to hold a typed list of Albums, pulled from the "data" field of the JSON object structure., + * This helps Jackson know what type to deserialize list data into. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumMixin.java, +/**, + * Annotated mixin to add Jackson annotations to Album. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , + */, +package org.springframework.social.facebook.connect;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumList.java, +/**, + * Holder class to hold a typed list of Albums, pulled from the "data" field of the JSON object structure., + * This helps Jackson know what type to deserialize list data into. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumMixin.java, +/**, + * Annotated mixin to add Jackson annotations to Album. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/CheckinList.java, +/**, + * Holder class to hold a typed list of Checkins, pulled from the "data" field of the JSON object structure., + * This helps Jackson know what type to deserialize list data into. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , + */, +package org.springframework.social.facebook.connect;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumList.java, +/**, + * Holder class to hold a typed list of Albums, pulled from the "data" field of the JSON object structure., + * This helps Jackson know what type to deserialize list data into. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumMixin.java, +/**, + * Annotated mixin to add Jackson annotations to Album. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/CheckinList.java, +/**, + * Holder class to hold a typed list of Checkins, pulled from the "data" field of the JSON object structure., + * This helps Jackson know what type to deserialize list data into. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/CheckinMixin.java, +/**, + * Annotated mixin to add Jackson annotations to Checkin. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , + */, +package org.springframework.social.facebook.connect;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumList.java, +/**, + * Holder class to hold a typed list of Albums, pulled from the "data" field of the JSON object structure., + * This helps Jackson know what type to deserialize list data into. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumMixin.java, +/**, + * Annotated mixin to add Jackson annotations to Album. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/CheckinList.java, +/**, + * Holder class to hold a typed list of Checkins, pulled from the "data" field of the JSON object structure.]
[+++ b/docs/src/reference/docbook/connecting.xml, +			The following Java-based configuration shows how to configure <interfacename>ConnectionRepository</interfacename> bean in request scope for the currently authenticated user:]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.HttpSessionSessionStrategy;, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;]
[+++ b/docs/src/reference/docbook/implementing.xml, +    // creates a RestTemplate that adds the OAuth2-draft10 Authorization header to each request before it is executed, +    restTemplate = ProtectedResourceClientFactory.draft10(accessToken);, +    // creates a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed, +    restTemplate = ProtectedResourceClientFactory.create(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/docs/src/reference/docbook/implementing.xml, +    // creates a RestTemplate that adds the OAuth2-draft10 Authorization header to each request before it is executed, +    restTemplate = ProtectedResourceClientFactory.draft10(accessToken);, +    // creates a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed, +    restTemplate = ProtectedResourceClientFactory.create(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ServiceProviderLocator.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.social.connect.ServiceProvider;, +, +/**, + * Looks up service providers, by name, from the application context., + * @author Craig Walls, + */, +public class ServiceProviderLocator {, +, +	private final Map<String, ServiceProvider<?>> serviceProviders;, +, +	public ServiceProviderLocator(ListableBeanFactory beanFactory) {, +		Map<String, ServiceProvider> providers = BeanFactoryUtils.beansOfTypeIncludingAncestors(beanFactory, ServiceProvider.class);, +		serviceProviders = new HashMap<String, ServiceProvider<?>>(providers.size(), 1);, +		for (ServiceProvider<?> provider : providers.values()) {, +			serviceProviders.put(provider.getId(), provider);, +		}, +	}, +	, +	public ServiceProvider<?> getServiceProvider(String id) {, +		return serviceProviders.get(id);, +	}, +	, +}, +++ b/docs/src/reference/docbook/implementing.xml, +    // creates a RestTemplate that adds the OAuth2-draft10 Authorization header to each request before it is executed, +    restTemplate = ProtectedResourceClientFactory.draft10(accessToken);, +    // creates a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed, +    restTemplate = ProtectedResourceClientFactory.create(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ServiceProviderLocator.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.social.connect.ServiceProvider;, +, +/**, + * Looks up service providers, by name, from the application context., + * @author Craig Walls, + */, +public class ServiceProviderLocator {, +, +	private final Map<String, ServiceProvider<?>> serviceProviders;, +, +	public ServiceProviderLocator(ListableBeanFactory beanFactory) {, +		Map<String, ServiceProvider> providers = BeanFactoryUtils.beansOfTypeIncludingAncestors(beanFactory, ServiceProvider.class);, +		serviceProviders = new HashMap<String, ServiceProvider<?>>(providers.size(), 1);, +		for (ServiceProvider<?> provider : providers.values()) {, +			serviceProviders.put(provider.getId(), provider);, +		}]
[+++ b/docs/src/reference/docbook/connecting.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="connecting" xmlns:xlink="http://www.w3.org/1999/xlink">, +			As <classname>ConnectController</classname> directs the overall connection flow, it depends on several other objects to do its job., +			Before getting into those, first we'll define a single Java @Configuration class where the various Spring Social objects, including ConnectController, will be configured:, +			<programlisting language="java"><![CDATA[, +@Configuration, +public class SocialConfig {, +, +}]]>, +			</programlisting>			, +			Now, <classname>ConnectController</classname> first delegates to one or more ConnectionFactory instances to establish connections to providers on behalf of users., +			Once a connection has been established, it delegates to a <interfacename>ConnectionRepository</interfacename> to persist user connection data., +		</para>, +		<para>, +			Each of the Spring Social provider modules includes a <interfacename>ConnectionFactory</interfacename> implementation:, +			<listitem><para><classname>org.springframework.social.twitter.connect.TwitterConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>org.springframework.social.facebook.connect.FacebookConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>org.springframework.social.linkedin.connect.LinkedInConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>org.springframework.social.tripit.connect.TripItConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>org.springframework.social.github.connect.GitHubConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>org.springframework.social.gowalla.connect.GowallaConnectionFactory</classname></para></listitem>, +			To register one or more ConnectionFactories, simply define a ConnectionFactoryLocator @Bean as follows:, +public class SocialConfig {, +        registry.addConnectionFactory(new FacebookConnectionFactory(environment.getProperty("facebook.clientId"),, +            environment.getProperty("facebook.clientSecret")));, +        registry.addConnectionFactory(new TwitterConnectionFactory(environment.getProperty("twitter.consumerKey"),, +            environment.getProperty("twitter.consumerSecret")));, +    @Inject, +    private Environment environment;, +}]]></programlisting>, +			Above, two connection factories, one for Facebook and one for Twitter, have been registered., +			If you would like to support other providers, simply register their connection factories here., +			Because client ids and secrets may be different across environments (e.g., test, production, etc), we recommend you externalize these values., +			Therefore, when configuring a <interfacename>ConnectionRepository</interfacename> bean for use by ConnectController, it must be scoped such that it can be created on a per-user basis., +			The following Java-based configuration shows how to construct an proxy to a request-scoped <interfacename>ConnectionRepository</interfacename> instance for the currently authenticated user:, +public class SocialConfig {, +, +    @Bean, +    @Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES), +    public ConnectionRepository connectionRepository(@Value("#{request.userPrincipal}") Principal principal) {, +        return usersConnectionRepository().createConnectionRepository(principal.getName());, +    }, +	, +}]]>, +		</programlisting>	, +		<para>, +			The @Bean method above is injected with a <classname>Principal</classname> representing the current user's identity., +			This is passed to UsersConnectionRepository to construct a ConnectionRepository instance for that user., +		</para>	, +		<para>, +			This means that we're also going to need to configure a <interfacename>UsersConnectionRepository</interfacename> @Bean:, +		</para>, +		<programlisting language="java"><![CDATA[, +@Configuration, +public class SocialConfig {, +, +    @Bean, +    public UsersConnectionRepository usersConnectionRepository() {, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), textEncryptor);, +    }, +    private DataSource dataSource;, +    @Inject, +    private TextEncryptor textEncryptor;	, +			UsersConnectionRepository is a singleton data store for connections across all users., +			<classname>JdbcUsersConnectionRepository</classname> is the RDMS-based implementation and needs a <interfacename>DataSource</interfacename>, <interfacename>ConnectionFactoryLocator</interfacename>, and <interfacename>TextEncryptor</interfacename> to do its job., +			<classname>JdbcUsersConnectionRepository</classname> uses the <interfacename>TextEncryptor</interfacename> to encrypt credentials when persisting connections., +public class SecurityConfig {, +, +    @Configuration, +    static class Dev {, +    }, +, +			Notice that the inner configuration class is annotated with <code>@Profile("dev")</code>. , +public class SecurityConfig {, +, +    @Configuration, +    @Profile("prod"), +    static class Prod {, +        public TextEncryptor textEncryptor() {, +            return Encryptors.queryableText(environment.getProperty("security.encryptPassword"),, +                environment.getProperty("security.encryptSalt"));, +        }, +, +        @Inject, +        private Environment environment;, +, +                <constructor-arg value="${facebook.clientId}" />, +                <constructor-arg value="${facebook.clientSecret}" />				, +    <aop:scoped-proxy />, +    <beans profile="prod">, +			With its dependencies configured, <classname>ConnectController</classname> now has what it needs to allow users to establish connections with registered service providers., +			Now, simply add it to your Social @Configuration:, +public class SocialConfig {, +    public ConnectController connectController() {, +        return new ConnectController(environment.getProperty("application.secureUrl"),, +            connectionFactoryLocator(), connectionRepository());, +			In either case, <classname>ConnectController</classname> should be constructed with the base "secure URL" for the application., +			It will use this URL to construct callback URLs used in the authorization flow., +			Since your application URL will typically vary between environments, its value should be externalized., +			<classname>ConnectController</classname> supports authorization flows for OAuth 1 and OAuth 2, relying on <interfacename>OAuth1Operations</interfacename> or <interfacename>OAuth2Operations</interfacename> to handle the specifics for each protocol.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	/**, +	 * Exposes the consumer key to be read by subclasses., +	 * This may be useful when overriding {@link #getCustomAuthorizationParameters()} and the consumer key is required in the authorization request., +	 */, +	/**, +	 * Creates an {@link OAuthToken} given the response from the access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param accessToken the access token value received from the provider., +	 * @param secret the access token secret received from the provider., +	 * @param response all parameters from the response received in the access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> response) {, +		// Doesn't make much sense given that OAuthToken is final, +		// Impossible to create a custom OAuthToken, even though that's what this hook is for, +	/**, +	 * Returns a map of custom authorization parameters., +	 * May be overridden to return any provider-specific parameters that must be passed in the request to the authorization URL., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	/**, +	 * Exposes the consumer key to be read by subclasses., +	 * This may be useful when overriding {@link #getCustomAuthorizationParameters()} and the consumer key is required in the authorization request., +	 */, +	/**, +	 * Creates an {@link OAuthToken} given the response from the access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param accessToken the access token value received from the provider., +	 * @param secret the access token secret received from the provider., +	 * @param response all parameters from the response received in the access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> response) {, +		// Doesn't make much sense given that OAuthToken is final, +		// Impossible to create a custom OAuthToken, even though that's what this hook is for, +	/**, +	 * Returns a map of custom authorization parameters., +	 * May be overridden to return any provider-specific parameters that must be passed in the request to the authorization URL., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	/**, +	 * Creates the {@link RestTemplate} used to communicate with the provider's OAuth 2 API., +	 * This implementation creates a RestTemplate with a minimal set of HTTP message converters ({@link FormHttpMessageConverter} and {@link MappingJacksonHttpMessageConverter})., +	 * May be overridden to customize how the RestTemplate is created., +	 * For example, if the provider returns data in some format other than JSON for form-encoded, you might override to register an appropriate message converter. , +	 */, +	/**, +	 * Posts the request for an access grant to the provider., +	 * May be overridden to customize the access grant request or processing of the response (e.g., to accomodate provider-specific, non-standard parameters)., +	 * @param accessTokenUrl the URL of the provider's access token endpoint., +	 * @param parameters the parameters to post to the access token endpoint., +	 * @return the access grant., +	 */, +	/**, +	 * Creates an {@link AccessGrant} given the response from the access token exchange with the provider., +	 * May be overridden to produce a custom AccessGrant with provider-specific details. , +	 * @param accessToken the access token value received from the provider, +	 * @param scope the scope of the access token, +	 * @param refreshToken a refresh token value received from the provider, +	 * @param expiresIn the time (in seconds) remaining before the access token expires., +	 * @param response all parameters from the response received in the access token exchange., +	 * @return an {@link AccessGrant}, +	 */, +	protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Integer expiresIn, Map<String, Object> response) {, +		// Doesn't make much sense given that AccessGrant is final, +		// Impossible to create a custom AccessGrant, even though that's what this hook is for]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + * ClientHttpRequestInterceptor implementation that adds the OAuth2 access token to protected resource requests before execution., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + * ClientHttpRequestInterceptor implementation that adds the OAuth2 access token to protected resource requests before execution., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.web.client.RestTemplate;, + * Therefore, FacebookTemplate must be given an access token at construction time., +	private final RestTemplate restTemplate;, +	 * @param accessToken An access token given by Facebook after a successful OAuth 2 authentication (or through Facebook's JS library)., +		this.restTemplate = createRestTemplate(accessToken);, +		return restTemplate.getForObject(OBJECT_URL, FacebookProfile.class, "me");, +		ResponseEntity<Map> response = restTemplate.getForEntity(CONNECTION_URL, Map.class, CURRENT_USER_ID, FRIENDS);, +		publish(CURRENT_USER_ID, FEED, map);, +		publish(CURRENT_USER_ID, FEED, map);, +		restTemplate.postForLocation(CONNECTION_URL, requestData, object, connection);, +		return getProfilePicture(CURRENT_USER_ID);, +		ResponseEntity<byte[]> imageBytes = restTemplate.getForEntity(PROFILE_LARGE_PICTURE_URL, byte[].class, profileId);, +	// subclassing hooks, +	, +	protected RestTemplate getRestTemplate() {, +		return restTemplate;, +	}, +	, +	// internal helpers, +	, +	private RestTemplate createRestTemplate(String accessToken) {, +		RestTemplate restTemplate = new RestTemplate();, +		restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] { OAuth2RequestInterceptor.draft10(accessToken) });, +		// Facebook returns JSON data with text/javascript content type, +		MappingJacksonHttpMessageConverter json = new MappingJacksonHttpMessageConverter();, +		json.setSupportedMediaTypes(Arrays.asList(new MediaType("text", "javascript")));, +		restTemplate.getMessageConverters().add(json);, +		return restTemplate;, +	}, +, +	static final String PROFILE_LARGE_PICTURE_URL = "https://graph.facebook.com/{profile}/picture?type=large";, +	static final String CURRENT_USER_ID = "me";, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + * ClientHttpRequestInterceptor implementation that adds the OAuth2 access token to protected resource requests before execution., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.web.client.RestTemplate;, + * Therefore, FacebookTemplate must be given an access token at construction time., +	private final RestTemplate restTemplate;, +	 * @param accessToken An access token given by Facebook after a successful OAuth 2 authentication (or through Facebook's JS library)., +		this.restTemplate = createRestTemplate(accessToken);, +		return restTemplate.getForObject(OBJECT_URL, FacebookProfile.class, "me");, +		ResponseEntity<Map> response = restTemplate.getForEntity(CONNECTION_URL, Map.class, CURRENT_USER_ID, FRIENDS);, +		publish(CURRENT_USER_ID, FEED, map);, +		publish(CURRENT_USER_ID, FEED, map);, +		restTemplate.postForLocation(CONNECTION_URL, requestData, object, connection);, +		return getProfilePicture(CURRENT_USER_ID);, +		ResponseEntity<byte[]> imageBytes = restTemplate.getForEntity(PROFILE_LARGE_PICTURE_URL, byte[].class, profileId);, +	// subclassing hooks, +	, +	protected RestTemplate getRestTemplate() {, +		return restTemplate;, +	}, +	, +	// internal helpers, +	, +	private RestTemplate createRestTemplate(String accessToken) {, +		RestTemplate restTemplate = new RestTemplate();, +		restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] { OAuth2RequestInterceptor.draft10(accessToken) });, +		// Facebook returns JSON data with text/javascript content type, +		MappingJacksonHttpMessageConverter json = new MappingJacksonHttpMessageConverter();, +		json.setSupportedMediaTypes(Arrays.asList(new MediaType("text", "javascript")));, +		restTemplate.getMessageConverters().add(json);, +		return restTemplate;, +	}, +, +	static final String PROFILE_LARGE_PICTURE_URL = "https://graph.facebook.com/{profile}/picture?type=large";, +	static final String CURRENT_USER_ID = "me";, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/FacebookTemplateTest.java, +	, +	, +	// TODO complete with testing of json response reading/request writing behavior, +	// the use of a mock object before was not testing this important interaction, +	]
[+++ b/.gitignore, +*.iml, +*.ipr, +*.iws, +++ b/.gitignore, +*.iml, +*.ipr, +*.iws, +++ b/build.gradle, +, +    jspApiVersion = '2.2.1', +        compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion") { provided = true }, +    metaInf << files("src/main/resources/tld/spring-social.tld"), +++ b/.gitignore, +*.iml, +*.ipr, +*.iws, +++ b/build.gradle, +, +    jspApiVersion = '2.2.1', +        compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion") { provided = true }, +    metaInf << files("src/main/resources/tld/spring-social.tld"), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/taglib/BaseSocialConnectedTag.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web.taglib;, +, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.servlet.tags.RequestContextAwareTag;, +, +/**, + * {@link SocialConnectedTag} and {@link SocialNotConnectedTag} extend to, + * provide functionality within a JSP to determine if you are connected to a, + * provider or not., + * , + * @author Rick Reumann, + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public abstract class BaseSocialConnectedTag extends RequestContextAwareTag {, +, +	protected String provider;, +, +	protected int evaluateBodyIfConnected(boolean evaluateIfConnected) {, +		if (getConnectionRepository().findConnections(provider).size() > 0) {, +			return evaluateIfConnected ? EVAL_BODY_INCLUDE : SKIP_BODY;, +		}, +		return evaluateIfConnected ? SKIP_BODY : EVAL_BODY_INCLUDE;, +	}, +, +	private ConnectionRepository getConnectionRepository() {, +		WebApplicationContext applicationContext = getRequestContext().getWebApplicationContext();, +		return applicationContext.getBean(ConnectionRepository.class);, +	}, +, +	public void setProvider(String provider) {, +		this.provider = provider;, +	}, +, +}, +++ b/.gitignore, +*.iml, +*.ipr, +*.iws, +++ b/build.gradle, +, +    jspApiVersion = '2.2.1', +        compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion") { provided = true }, +    metaInf << files("src/main/resources/tld/spring-social.tld"), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/taglib/BaseSocialConnectedTag.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web.taglib;]
[+++ b/docs/src/reference/docbook/implementing.xml, +				To encapsulate this complexity, for each authorization protocol Spring Social provides a ApiTemplate base class you may extend from to, +public class TwitterTemplate extends AbstractOAuth1ApiTemplate {, +        super(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +    }, +public class FacebookTemplate extends AbstractOAuth2ApiTemplate {, +        super(accessToken);, +    }, +				Once configured as shown above, you simply implement call getRestTemplate() and implement the various API operations., +    return getRestTemplate().getForObject(buildUri("account/verify_credentials.json"), TwitterProfile.class);, +    return getRestTemplate().getForObject(buildUri("users/show.json", Collections.singletonMap("screen_name", screenName)), TwitterProfile.class);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Exception indicating that the authorization used during an operation invocation have expired., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ExpiredAuthorizationException extends NotAuthorizedException {, +, +	public ExpiredAuthorizationException() {, +		super("The authorization has expired.");, +	}, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Exception indicating that the authorization used during an operation invocation have expired., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ExpiredAuthorizationException extends NotAuthorizedException {, +, +	public ExpiredAuthorizationException() {, +		super("The authorization has expired.");, +	}, +	, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Exception indicating that the authorization used during an operation invocation have expired., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ExpiredAuthorizationException extends NotAuthorizedException {, +, +	public ExpiredAuthorizationException() {, +		super("The authorization has expired.");, +	}, +	, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/pom.xml, +		<repository>, +			<!-- necessary for org.springframework.build.aws.maven dependency -->, +			<id>repository.source.maven.release</id>, +			<name>SpringSource Maven Release Repository</name>, +			<url>http://repository.springsource.com/maven/bundles/release</url>, +		</repository>, +		<extensions>, +			<extension>, +				<!-- available only in the springframework maven repository. see <repositories> section below -->, +				<groupId>org.springframework.build.aws</groupId>, +				<artifactId>org.springframework.build.aws.maven</artifactId>, +				<version>3.0.0.RELEASE</version>, +			</extension>, +		</extensions>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred while consuming a provider API., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ProviderApiException extends SocialException {, +, +	public ProviderApiException(String message) {, +		super(message);, +	}, +, +	public ProviderApiException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred while consuming a provider API., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ProviderApiException extends SocialException {, +, +	public ProviderApiException(String message) {, +		super(message);, +	}, +, +	public ProviderApiException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderServerErrorException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +import org.w3c.dom.Element;, +	private static final String CONNECTION_REPOSITORY_ATTRIBUTE = "connection-repository";, +	private static final String DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME = "connectionRepository";, +, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String name = element.getAttribute("id");, +		if (name == null || name.isEmpty()) {, +			name = getDefaultProviderName();, +		}, +, +		return registerServiceProviderBean(element, parserContext, name);, +	}, +, +	protected BeanDefinition registerServiceProviderBean(Element element, ParserContext parserContext, String name) {, +, +		String consumerKey = element.getAttribute("consumer-key");, +		String consumerSecret = element.getAttribute("consumer-secret");, +		String connectionRepositoryBean = getConnectionRepositoryName(element);, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(getImplementationClassName());, +, +	String getConnectionRepositoryName(Element element) {, +		return (element.hasAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) ? element, +				.getAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) : DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME);, +	}, +, +	abstract protected String getImplementationClassName();, +, +	abstract protected String getDefaultProviderName();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +import org.w3c.dom.Element;, +	private static final String CONNECTION_REPOSITORY_ATTRIBUTE = "connection-repository";, +	private static final String DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME = "connectionRepository";, +, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String name = element.getAttribute("id");, +		if (name == null || name.isEmpty()) {, +			name = getDefaultProviderName();, +		}, +, +		return registerServiceProviderBean(element, parserContext, name);, +	}, +, +	protected BeanDefinition registerServiceProviderBean(Element element, ParserContext parserContext, String name) {, +, +		String consumerKey = element.getAttribute("consumer-key");, +		String consumerSecret = element.getAttribute("consumer-secret");, +		String connectionRepositoryBean = getConnectionRepositoryName(element);, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(getImplementationClassName());, +, +	String getConnectionRepositoryName(Element element) {, +		return (element.hasAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) ? element, +				.getAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) : DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME);, +	}, +, +	abstract protected String getImplementationClassName();, +, +	abstract protected String getDefaultProviderName();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +	@Override, +	protected String getDefaultProviderName() {, +		return "facebook";, +	@Override, +	protected String getImplementationClassName() {, +		return FacebookServiceProvider.class.getName();, +, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +import org.w3c.dom.Element;, +	private static final String CONNECTION_REPOSITORY_ATTRIBUTE = "connection-repository";, +	private static final String DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME = "connectionRepository";, +, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String name = element.getAttribute("id");, +		if (name == null || name.isEmpty()) {, +			name = getDefaultProviderName();, +		}, +, +		return registerServiceProviderBean(element, parserContext, name);, +	}, +, +	protected BeanDefinition registerServiceProviderBean(Element element, ParserContext parserContext, String name) {, +, +		String consumerKey = element.getAttribute("consumer-key");, +		String consumerSecret = element.getAttribute("consumer-secret");, +		String connectionRepositoryBean = getConnectionRepositoryName(element);, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(getImplementationClassName());, +, +	String getConnectionRepositoryName(Element element) {, +		return (element.hasAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) ? element, +				.getAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) : DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME);, +	}]
[+++ b/docs/src/reference/docbook/signin.xml]
[+++ b/build.gradle, +    sourceSets {, +        test {, +            resources {, +                srcDirs = ['src/test/java'], +            }, +        }, +    }, +, +, +/*, +    sourceSets {, +        test {, +            resources {, +                // have to add src/main/java here, because that's where the connection schema lives, +                srcDirs = ['src/main/java', 'src/test/java'], +            }, +        }, +    }, +*/, +++ b/build.gradle, +    sourceSets {, +        test {, +            resources {, +                srcDirs = ['src/test/java'], +            }, +        }, +    }, +, +, +/*, +    sourceSets {, +        test {, +            resources {, +                // have to add src/main/java here, because that's where the connection schema lives, +                srcDirs = ['src/main/java', 'src/test/java'], +            }, +        }, +    }, +*/, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +				"socialNamespaceHandlerTest.xml", getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +++ b/build.gradle, +    sourceSets {, +        test {, +            resources {, +                srcDirs = ['src/test/java'], +            }, +        }, +    }, +, +, +/*, +    sourceSets {, +        test {, +            resources {, +                // have to add src/main/java here, because that's where the connection schema lives, +                srcDirs = ['src/main/java', 'src/test/java'], +            }, +        }, +    }, +*/, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +				"socialNamespaceHandlerTest.xml", getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("socialNamespaceHandlerTest.xml",, +				getClass());, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xmlns:jdbc="http://www.springframework.org/schema/jdbc", +	xmlns:social="http://www.springframework.org/schema/spring-social", +	xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, +		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd, +		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +, +	<bean id="connectionRepository" class="org.springframework.social.connect.test.StubConnectionRepository" />, +	, +	<social:service-provider id="tweeter"]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException(String providerId) {, +		super(providerId, "Insufficient permission for this operation.");, +	public InsufficientPermissionException(String providerId, String requiredPermission) {, +		super(providerId, "The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException(String providerId) {, +		super(providerId, "Insufficient permission for this operation.");, +	public InsufficientPermissionException(String providerId, String requiredPermission) {, +		super(providerId, "The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, +	public InternalServerErrorException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java]
[+++ b/pom.xml]
[+++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	public S getServiceApi();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	public S getServiceApi();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/ServiceProviderConnectionImpl.java, +	private boolean disconnected;, +	, +	public S getServiceApi() {, +		if (disconnected) {, +			throw new IllegalStateException("Unable to get Api: this Connection is disconnected");, +		if (disconnected) {, +			throw new IllegalStateException("This connection is already disconnected");, +		}		, +		disconnected = true;, +	}, +	, +	public boolean equals(Object o) {, +		if (!(o instanceof ServiceProviderConnectionImpl)) {, +			return false;, +		}, +		ServiceProviderConnectionImpl<?> other = (ServiceProviderConnectionImpl<?>) o;, +		return id.equals(other.id);, +	}, +	, +	public int hashCode() {, +		return id.hashCode();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	public S getServiceApi();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/ServiceProviderConnectionImpl.java, +	private boolean disconnected;, +	, +	public S getServiceApi() {, +		if (disconnected) {, +			throw new IllegalStateException("Unable to get Api: this Connection is disconnected");, +		if (disconnected) {, +			throw new IllegalStateException("This connection is already disconnected");, +		}		, +		disconnected = true;, +	}, +	, +	public boolean equals(Object o) {, +		if (!(o instanceof ServiceProviderConnectionImpl)) {, +			return false;, +		}, +		ServiceProviderConnectionImpl<?> other = (ServiceProviderConnectionImpl<?>) o;, +		return id.equals(other.id);, +	}, +	, +	public int hashCode() {, +		return id.hashCode();, +++ b/spring-social-client/src/test/java/org/springframework/social/provider/jdbc/JdbcConnectionRepositoryTest.java, +package org.springframework.social.provider.jdbc;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +, +import java.util.List;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;, +import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;, +import org.springframework.security.crypto.encrypt.Encryptors;, +import org.springframework.social.provider.support.Connection;, +, +public class JdbcConnectionRepositoryTest {, +	, +	private EmbeddedDatabase db;, +, +	private JdbcConnectionRepository repository;, +	, +	@Before, +	public void setUp() {, +		EmbeddedDatabaseFactory factory = new EmbeddedDatabaseFactory();, +		factory.setDatabaseType(EmbeddedDatabaseType.H2);, +		ResourceDatabasePopulator populator = new ResourceDatabasePopulator();, +		populator.addScript(new ClassPathResource("Schema.sql", getClass()));, +		factory.setDatabasePopulator(populator);, +		db = factory.getDatabase();, +		this.repository = new JdbcConnectionRepository(db, Encryptors.noOpText());, +	}, +	, +	@After, +	public void tearDown() {, +		if (db != null) {, +			db.shutdown();, +		}, +	}, +	, +	@Test, +	public void saveConnection() {, +		assertEquals(false, repository.isConnected(1L, "facebook"));, +		repository.saveConnection(1L, "facebook", Connection.oauth2("123456789", "987654321"));, +		assertEquals(true, repository.isConnected(1L, "facebook"));		, +		List<Connection> connections = repository.findConnections(1L, "facebook");]
[+++ b/src/main/java/org/springframework/social/oauth1/S2OAuth1ClientRequestSigner.java, +package org.springframework.social.oauth1;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth.consumer.OAuthConsumerSupport;, +import org.springframework.security.oauth.consumer.ProtectedResourceDetails;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +import org.springframework.social.oauth.AccessToken;, +import org.springframework.social.oauth.AccessTokenServices;, +, +/**, + * Extension of {@link OAuth1ClientRequestSigner} that uses Spring Security, + * OAuth's {@link OAuthConsumerSupport} to calculate the authorization header., + * , + * @author Craig Walls, + */, +public class S2OAuth1ClientRequestSigner extends OAuth1ClientRequestSigner {, +	private final OAuthConsumerSupport oauthSupport;, +	private final AccessTokenServices tokenServices;, +	private final ProtectedResourceDetails protectedResourceDetails;, +, +	public S2OAuth1ClientRequestSigner(OAuthConsumerSupport oauthSupport,, +			ProtectedResourceDetails protectedResourceDetails, AccessTokenServices tokenServices) {, +		this.oauthSupport = oauthSupport;, +		this.tokenServices = tokenServices;, +		this.protectedResourceDetails = protectedResourceDetails;, +	}, +, +	public String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters) {, +, +		OAuthConsumerToken accessToken = resolveAccessToken();, +		if (accessToken == null) {, +			return null;, +		}, +, +		return oauthSupport.getAuthorizationHeader(protectedResourceDetails, accessToken, url, method.name(),, +				parameters);, +	}, +, +	private OAuthConsumerToken resolveAccessToken() {, +		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +		if (authentication == null) {, +			throw new AuthenticationCredentialsNotFoundException("No credentials found");, +		}, +, +		AccessToken accessToken = tokenServices.getToken(protectedResourceDetails.getId(),, +				authentication.getPrincipal());, +, +		if (accessToken == null) {, +			return null;, +		}, +, +		OAuthConsumerToken consumerToken = new OAuthConsumerToken();, +		consumerToken.setAccessToken(true);, +		consumerToken.setValue(accessToken.getValue());, +		consumerToken.setSecret(accessToken.getSecret());, +		consumerToken.setResourceId(accessToken.getProviderId());, +, +		return consumerToken;, +	}, +}, +++ b/src/main/java/org/springframework/social/oauth1/S2OAuth1ClientRequestSigner.java, +package org.springframework.social.oauth1;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth.consumer.OAuthConsumerSupport;, +import org.springframework.security.oauth.consumer.ProtectedResourceDetails;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +import org.springframework.social.oauth.AccessToken;, +import org.springframework.social.oauth.AccessTokenServices;, +, +/**, + * Extension of {@link OAuth1ClientRequestSigner} that uses Spring Security, + * OAuth's {@link OAuthConsumerSupport} to calculate the authorization header., + * , + * @author Craig Walls, + */, +public class S2OAuth1ClientRequestSigner extends OAuth1ClientRequestSigner {, +	private final OAuthConsumerSupport oauthSupport;, +	private final AccessTokenServices tokenServices;, +	private final ProtectedResourceDetails protectedResourceDetails;, +, +	public S2OAuth1ClientRequestSigner(OAuthConsumerSupport oauthSupport,, +			ProtectedResourceDetails protectedResourceDetails, AccessTokenServices tokenServices) {, +		this.oauthSupport = oauthSupport;, +		this.tokenServices = tokenServices;, +		this.protectedResourceDetails = protectedResourceDetails;, +	}]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +    String findLocalUserIdWithConnection(ServiceProviderConnection connection);]
[+++ b/docs/src/reference/docbook/overview.xml, +			To obtain the <ulink url="https://github.com/SpringSource/spring-social-samples">https://github.com/SpringSource/spring-social-samples</ulink> code, use the following git command:]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +	/**, +	 * Constructs a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed., +	 */, +			// favored, +			client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)});, +			// 3.0.x compatibility, +			client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), consumerKey, consumerSecret, accessToken, accessTokenSecret));, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +	/**, +	 * Constructs a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed., +	 */, +			// favored, +			client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)});, +			// 3.0.x compatibility, +			client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), consumerKey, consumerSecret, accessToken, accessTokenSecret));, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	// spring 3.0 compatibility only: planned for removal in Spring Social 1.1, +	, +	public static String spring30buildAuthorizationHeaderValueFromClientHttpRequest(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		Map<String, String> oauthParameters = commonOAuthParameters(consumerKey);, +		oauthParameters.put("oauth_token", accessToken);, +		Map<String, String> aditionalParameters = extractBodyParameters(request.getHeaders().getContentType(), body);, +		Map<String, String> queryParameters = extractParameters(request.getURI().getQuery());, +		aditionalParameters.putAll(queryParameters);, +		String baseRequestUrl = getBaseUrlWithoutPortOrQueryString(request.getURI());, +		return SigningUtils.buildAuthorizationHeaderValue(baseRequestUrl, oauthParameters, aditionalParameters, request.getMethod(), consumerSecret, accessTokenSecret);, +	}, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +	/**, +	 * Constructs a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed., +	 */, +			// favored, +			client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)});, +			// 3.0.x compatibility, +			client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), consumerKey, consumerSecret, accessToken, accessTokenSecret));, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	// spring 3.0 compatibility only: planned for removal in Spring Social 1.1, +	, +	public static String spring30buildAuthorizationHeaderValueFromClientHttpRequest(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		Map<String, String> oauthParameters = commonOAuthParameters(consumerKey);, +		oauthParameters.put("oauth_token", accessToken);, +		Map<String, String> aditionalParameters = extractBodyParameters(request.getHeaders().getContentType(), body);, +		Map<String, String> queryParameters = extractParameters(request.getURI().getQuery());, +		aditionalParameters.putAll(queryParameters);, +		String baseRequestUrl = getBaseUrlWithoutPortOrQueryString(request.getURI());, +		return SigningUtils.buildAuthorizationHeaderValue(baseRequestUrl, oauthParameters, aditionalParameters, request.getMethod(), consumerSecret, accessTokenSecret);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/Spring30OAuth1RequestFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * Request factory that signs RestTemplate requests with an OAuth 1 Authorization header., + * Internally used for Spring 3.0 compatibility only., + * Planned for removal in Spring Social 1.1., + * @author Craig Walls, + */, +class Spring30OAuth1RequestFactory implements ClientHttpRequestFactory {, +	, +	private final ClientHttpRequestFactory delegate;, +	, +	private final String consumerKey;]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import static java.util.Arrays.*;, +, +import java.util.List;, +import java.util.Map.Entry;, +, +import org.springframework.util.LinkedMultiValueMap;, +		MultiValueMap<String, String> requestParameters = getRequestParameters(request);, +		OAuth1Parameters parameters = getOAuth1Parameters(request, additionalParameters);, +		parameters.putAll(requestParameters);, +		OAuthToken requestToken = fetchRequestToken(request, requestParameters, oauthOperations);, +	private OAuth1Parameters getOAuth1Parameters(NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth1Parameters parameters = new OAuth1Parameters(additionalParameters);, +		parameters.putAll(getRequestParameters(request));, +		return parameters;, +, +	private OAuthToken fetchRequestToken(NativeWebRequest request, MultiValueMap<String, String> requestParameters, OAuth1Operations oauthOperations) {, +		if (oauthOperations.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			return oauthOperations.fetchRequestToken(callbackUrl(request), requestParameters);, +		}, +		return oauthOperations.fetchRequestToken(null, requestParameters);				, +		parameters.putAll(getRequestParameters(request, "scope"));, +	private MultiValueMap<String, String> getRequestParameters(NativeWebRequest request, String... ignoredParameters) {, +		List<String> ignoredParameterList = asList(ignoredParameters);, +		MultiValueMap<String, String> convertedMap = new LinkedMultiValueMap<String, String>();, +		for (Entry<String, String[]> entry : request.getParameterMap().entrySet()) {, +			if (!ignoredParameterList.contains(entry.getKey())) {, +				convertedMap.put(entry.getKey(), asList(entry.getValue()));, +			}, +		}, +		return convertedMap;, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import static java.util.Arrays.*;, +, +import java.util.List;, +import java.util.Map.Entry;, +, +import org.springframework.util.LinkedMultiValueMap;, +		MultiValueMap<String, String> requestParameters = getRequestParameters(request);, +		OAuth1Parameters parameters = getOAuth1Parameters(request, additionalParameters);, +		parameters.putAll(requestParameters);, +		OAuthToken requestToken = fetchRequestToken(request, requestParameters, oauthOperations);, +	private OAuth1Parameters getOAuth1Parameters(NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth1Parameters parameters = new OAuth1Parameters(additionalParameters);, +		parameters.putAll(getRequestParameters(request));, +		return parameters;, +, +	private OAuthToken fetchRequestToken(NativeWebRequest request, MultiValueMap<String, String> requestParameters, OAuth1Operations oauthOperations) {, +		if (oauthOperations.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			return oauthOperations.fetchRequestToken(callbackUrl(request), requestParameters);, +		}, +		return oauthOperations.fetchRequestToken(null, requestParameters);				, +		parameters.putAll(getRequestParameters(request, "scope"));, +	private MultiValueMap<String, String> getRequestParameters(NativeWebRequest request, String... ignoredParameters) {, +		List<String> ignoredParameterList = asList(ignoredParameters);, +		MultiValueMap<String, String> convertedMap = new LinkedMultiValueMap<String, String>();, +		for (Entry<String, String[]> entry : request.getParameterMap().entrySet()) {, +			if (!ignoredParameterList.contains(entry.getKey())) {, +				convertedMap.put(entry.getKey(), asList(entry.getValue()));, +			}, +		}, +		return convertedMap;, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +	public void buildOAuthUrl_OAuth10a_withAdditionalParametersFromRequest() {, +		ConnectSupport support = new ConnectSupport();, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setRequestURI("/connect/someprovider");, +		mockRequest.addParameter("condiment", "ketchup");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.set("display", "popup");, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10_REVISION_A), request, additionalParameters);, +		assertEquals("https://serviceprovider.com/oauth/authorize?display=popup&condiment=ketchup", url);, +	}, +		, +, +	@Test, +	public void buildOAuthUrl_OAuth2_withAdditionalParameters() throws Exception {, +	@Test, +	public void buildOAuthUrl_OAuth2_withAdditionalParametersFromRequest() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setRequestURI("/connect/someprovider");, +		mockRequest.addParameter("condiment", "ketchup");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		TestOAuth2ConnectionFactory connectionFactory = new TestOAuth2ConnectionFactory();, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.set("display", "popup");, +		String url = support.buildOAuthUrl(connectionFactory, request, additionalParameters);, +		assertEquals("https://serviceprovider.com/oauth/authorize?display=popup&condiment=ketchup&redirect_uri=http://somesite.com/connect/someprovider", url);, +	}, +]
[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ /dev/null, +++ b/spring-social-core/src/main/resources/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);]
[+++ b/build.gradle, +project("spring-social-web-thymeleaf2") {, +    description = "Spring Web Integration", +    dependencies {, +        compile project(":spring-social-core"), +        compile("org.thymeleaf:thymeleaf:$thymeleaf2Version"), +        compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf2Version"), +        testCompile("org.springframework:spring-test:$springVersion"), +    }, +}, +, +project("spring-social-web-thymeleaf3") {, +    description = "Spring Web Integration", +    dependencies {, +        compile project(":spring-social-core"), +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version"), +        compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf3Version"), +        testCompile("org.springframework:spring-test:$springVersion"), +    }, +}, +, +++ b/build.gradle, +project("spring-social-web-thymeleaf2") {, +    description = "Spring Web Integration", +    dependencies {, +        compile project(":spring-social-core"), +        compile("org.thymeleaf:thymeleaf:$thymeleaf2Version"), +        compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf2Version"), +        testCompile("org.springframework:spring-test:$springVersion"), +    }, +}, +, +project("spring-social-web-thymeleaf3") {, +    description = "Spring Web Integration", +    dependencies {, +        compile project(":spring-social-core"), +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version"), +        compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf3Version"), +        testCompile("org.springframework:spring-test:$springVersion"), +    }, +}, +, +++ b/gradle.properties, +springVersion=5.0.0.M4, +thymeleaf2Version=2.1.5.RELEASE, +thymeleaf3Version=3.0.3.RELEASE, +++ b/build.gradle, +project("spring-social-web-thymeleaf2") {, +    description = "Spring Web Integration", +    dependencies {, +        compile project(":spring-social-core"), +        compile("org.thymeleaf:thymeleaf:$thymeleaf2Version"), +        compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf2Version"), +        testCompile("org.springframework:spring-test:$springVersion"), +    }, +}, +, +project("spring-social-web-thymeleaf3") {, +    description = "Spring Web Integration", +    dependencies {, +        compile project(":spring-social-core"), +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version"), +        compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf3Version"), +        testCompile("org.springframework:spring-test:$springVersion"), +    }, +}, +, +++ b/gradle.properties, +springVersion=5.0.0.M4, +thymeleaf2Version=2.1.5.RELEASE, +thymeleaf3Version=3.0.3.RELEASE, +++ b/settings.gradle, +include 'spring-social-web-thymeleaf2', +include 'spring-social-web-thymeleaf3', +++ b/build.gradle, +project("spring-social-web-thymeleaf2") {, +    description = "Spring Web Integration", +    dependencies {, +        compile project(":spring-social-core"), +        compile("org.thymeleaf:thymeleaf:$thymeleaf2Version"), +        compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf2Version"), +        testCompile("org.springframework:spring-test:$springVersion"), +    }, +}, +, +project("spring-social-web-thymeleaf3") {, +    description = "Spring Web Integration", +    dependencies {, +        compile project(":spring-social-core"), +        compile("org.thymeleaf:thymeleaf:$thymeleaf3Version"), +        compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf3Version"), +        testCompile("org.springframework:spring-test:$springVersion"), +    }, +}, +, +++ b/gradle.properties, +springVersion=5.0.0.M4, +thymeleaf2Version=2.1.5.RELEASE, +thymeleaf3Version=3.0.3.RELEASE, +++ b/settings.gradle]
[+++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +			String queryDelimiter = "?";, +			if(URI.create(baseUri).getQuery() != null) {, +				queryDelimiter = "&";, +			}, +			return new URI(baseUri + (builder.length() > 0 ? queryDelimiter + builder.toString() : ""));, +++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +			String queryDelimiter = "?";, +			if(URI.create(baseUri).getQuery() != null) {, +				queryDelimiter = "&";, +			}, +			return new URI(baseUri + (builder.length() > 0 ? queryDelimiter + builder.toString() : ""));, +++ b/spring-social-core/src/test/java/org/springframework/social/util/URIBuilderTest.java, +import static org.junit.Assert.*;, +	public void buildURIWithExistingParameters() {, +		URI uri = URIBuilder.fromUri("http://example.com?foo=bar").build();, +		assertEquals("http://example.com?foo=bar", uri.toString());				, +	}, +, +	@Test, +	public void buildURIWithExistingAndNewParameters() {, +		URI uri = URIBuilder.fromUri("http://example.com?foo=bar&x=1").queryParam("salt", "NaCl").build();, +		assertEquals("http://example.com?foo=bar&x=1&salt=NaCl", uri.toString());				, +	}, +, +	@Test, +++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +			String queryDelimiter = "?";, +			if(URI.create(baseUri).getQuery() != null) {, +				queryDelimiter = "&";, +			}, +			return new URI(baseUri + (builder.length() > 0 ? queryDelimiter + builder.toString() : ""));]
[+++ b/.gitignore, +.DS_Store, +++ b/.gitignore, +.DS_Store, +++ b/docs/src/reference/docbook/overview.xml, +              <entry>Spring Social's ServiceProvider connect framework and OAuth support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname> which uses the ServiceProvider framework to manage connections in a web application environment</entry>, +              <entry>spring-social-twitter</entry>, +              <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, +            </row>, +            <row>, +              <entry>spring-social-linkedin</entry>, +              <entry>Includes Spring Social's LinkedIn API.</entry>, +            </row>, +            <row>, +	  <para>To let Spring Social handle the back-and-forth authorization handshake between a web application and a service provider, you'll need the web module:</para>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ServiceProvider.java, + * OAuth1-based ServiceProvider implementors should extend and implement {@link #getServiceApi(String, String)}., + * They should also define a single constructor that accepts the consumerKey/consumerSecret, + * and internally creates and passes up a {@link OAuth1Operations} instance., +	/**, +	 * Creates a OAuth1ServiceProvider., +	 * @param consumerKey the consumer (or client) key assigned to the application by the provider., +	 * @param consumerSecret the consumer (or client) secret assigned to the application by the provider., +	 * @param oauth1Operations the template that allows the OAuth1-based authorization flow to be conducted with the provider., +	 */, +	// implementing OAuth1ServiceProvider, +	, +	public final OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	}, +	, +	public abstract S getServiceApi(String accessToken, String secret);, +	, +	// subclassing hooks, +	, +	/**, +	 * The consumer (or client) key assigned to the application by the provider., +	 * Exposed to subclasses to support constructing service API instances., +	 * @see #getServiceApi(String, String), +	 */, +	/**, +	 * The consumer (or client) secret assigned to the application by the provider., +	 * Exposed to subclasses to support constructing service API instances., +	 * @see #getServiceApi(String, String), +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ServiceProvider.java, + * OAuth1-based ServiceProvider implementors should extend and implement {@link #getServiceApi(String, String)}., + * They should also define a single constructor that accepts the consumerKey/consumerSecret, + * and internally creates and passes up a {@link OAuth1Operations} instance., +	/**, +	 * Creates a OAuth1ServiceProvider., +	 * @param consumerKey the consumer (or client) key assigned to the application by the provider., +	 * @param consumerSecret the consumer (or client) secret assigned to the application by the provider., +	 * @param oauth1Operations the template that allows the OAuth1-based authorization flow to be conducted with the provider., +	 */, +	// implementing OAuth1ServiceProvider, +	, +	public final OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	}, +	, +	public abstract S getServiceApi(String accessToken, String secret);, +	, +	// subclassing hooks, +	, +	/**, +	 * The consumer (or client) key assigned to the application by the provider., +	 * Exposed to subclasses to support constructing service API instances., +	 * @see #getServiceApi(String, String), +	 */, +	/**, +	 * The consumer (or client) secret assigned to the application by the provider., +	 * Exposed to subclasses to support constructing service API instances., +	 * @see #getServiceApi(String, String), +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	public OAuthToken fetchRequestToken(String callbackUrl, MultiValueMap<String, String> additionalParameters) {, +	public String buildAuthorizeUrl(String requestToken, String callbackUrl) {, +	public String buildAuthenticateUrl(String requestToken, String callbackUrl) {, +	public OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald".]
[+++ b/docs/src/reference/docbook/apis.xml, +      , +      <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, +      , +      <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +      , +      <para>Spring Social comes with six provider API templates/operations for the following service providers:</para>, +      , +      <itemizedlist>, +          <listitem><para>Facebook</para></listitem>, +          <listitem><para>GitHub</para></listitem>, +          <listitem><para>Gowalla</para></listitem>, +          <listitem><para>LinkedIn</para></listitem>, +          <listitem><para>TripIt</para></listitem>, +          <listitem><para>Twitter</para></listitem>, +      </itemizedlist>, +        <para>Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.</para>, +          <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:</para>, +++ b/docs/src/reference/docbook/apis.xml, +      , +      <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, +      , +      <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +      , +      <para>Spring Social comes with six provider API templates/operations for the following service providers:</para>, +      , +      <itemizedlist>, +          <listitem><para>Facebook</para></listitem>, +          <listitem><para>GitHub</para></listitem>, +          <listitem><para>Gowalla</para></listitem>, +          <listitem><para>LinkedIn</para></listitem>, +          <listitem><para>TripIt</para></listitem>, +          <listitem><para>Twitter</para></listitem>, +      </itemizedlist>, +        <para>Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.</para>, +          <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:</para>, +++ b/docs/src/reference/docbook/connecting.xml, +      <para>As seen in the previous chapter, Spring Social's service provider framework supports creating connections with a provider, including a lot of the heavy lifting involved in OAuth authorization. But if you were to use the service provider framework alone to build OAuth into your application, you'd still need to (at very least) write a controller to handle the OAuth callback from the provider after authorization.</para>, +      , +      <para>To simplify an application's role in the OAuth dance, Spring Social provides <classname>ConnectController</classname>. <classname>ConnectController</classname> is a Spring MVC controller that handles the the entire connection flow, regardless of which version of OAuth a service provider implements.</para>, +++ b/docs/src/reference/docbook/apis.xml, +      , +      <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, +      , +      <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +      , +      <para>Spring Social comes with six provider API templates/operations for the following service providers:</para>, +      , +      <itemizedlist>, +          <listitem><para>Facebook</para></listitem>, +          <listitem><para>GitHub</para></listitem>, +          <listitem><para>Gowalla</para></listitem>, +          <listitem><para>LinkedIn</para></listitem>, +          <listitem><para>TripIt</para></listitem>, +          <listitem><para>Twitter</para></listitem>, +      </itemizedlist>, +        <para>Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.</para>, +          <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:</para>, +++ b/docs/src/reference/docbook/connecting.xml, +      <para>As seen in the previous chapter, Spring Social's service provider framework supports creating connections with a provider, including a lot of the heavy lifting involved in OAuth authorization. But if you were to use the service provider framework alone to build OAuth into your application, you'd still need to (at very least) write a controller to handle the OAuth callback from the provider after authorization.</para>, +      , +      <para>To simplify an application's role in the OAuth dance, Spring Social provides <classname>ConnectController</classname>. <classname>ConnectController</classname> is a Spring MVC controller that handles the the entire connection flow, regardless of which version of OAuth a service provider implements.</para>, +++ b/docs/src/reference/docbook/overview.xml, +      <para>Social integration is a three-way conversation between a service provider, a service consumer, and a user who holds an account on both the provider and consumer. All interactions between the consumer and the service provider are scoped to the context of the user's profile on the service provider.</para>, +          , +      <para>In the narrative above, Facebook is the service provider, the movie club application is the service consumer, and Paul is the user of them both. The movie club application may interact with Facebook on behalf of Paul, accessing whatever Facebook data and functionality that Paul permits, including seeing Paul's list of friends and posting messages to his Facebook wall.</para>, +      <para>With Spring Social, an application can play the part of the service consumer, interacting with a service provider on behalf of its users. The key features of Spring Social are:</para>, +      , +      <itemizedlist>, +          <listitem><para>A service provider framework that models the authorization and connection creation process with a service.</para></listitem>, +          <listitem><para>A connection controller that handles the OAuth exchange between a service provider, consumer, and user.</para></listitem>, +          <listitem><para>APIs for several service providers such as Facebook, Twitter, LinkedIn, TripIt, GitHub, and Gowalla.</para></listitem>, +          <listitem><para>A signin controller that enables a user to authenticate to an application by signing into either Facebook or Twitter.</para></listitem>, +      </itemizedlist>, +++ b/docs/src/reference/docbook/apis.xml, +      , +      <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, +      , +      <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +      , +      <para>Spring Social comes with six provider API templates/operations for the following service providers:</para>, +      , +      <itemizedlist>, +          <listitem><para>Facebook</para></listitem>, +          <listitem><para>GitHub</para></listitem>, +          <listitem><para>Gowalla</para></listitem>, +          <listitem><para>LinkedIn</para></listitem>, +          <listitem><para>TripIt</para></listitem>, +          <listitem><para>Twitter</para></listitem>, +      </itemizedlist>, +        <para>Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.</para>, +          <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:</para>, +++ b/docs/src/reference/docbook/connecting.xml, +      <para>As seen in the previous chapter, Spring Social's service provider framework supports creating connections with a provider, including a lot of the heavy lifting involved in OAuth authorization. But if you were to use the service provider framework alone to build OAuth into your application, you'd still need to (at very least) write a controller to handle the OAuth callback from the provider after authorization.</para>, +      , +      <para>To simplify an application's role in the OAuth dance, Spring Social provides <classname>ConnectController</classname>. <classname>ConnectController</classname> is a Spring MVC controller that handles the the entire connection flow, regardless of which version of OAuth a service provider implements.</para>, +++ b/docs/src/reference/docbook/overview.xml, +      <para>Social integration is a three-way conversation between a service provider, a service consumer, and a user who holds an account on both the provider and consumer. All interactions between the consumer and the service provider are scoped to the context of the user's profile on the service provider.</para>, +          , +      <para>In the narrative above, Facebook is the service provider, the movie club application is the service consumer, and Paul is the user of them both. The movie club application may interact with Facebook on behalf of Paul, accessing whatever Facebook data and functionality that Paul permits, including seeing Paul's list of friends and posting messages to his Facebook wall.</para>]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (July 25, 2011), +=======================================================, +Bug Fixes, +   * Display a message indicating a user should sign-up after a provider, +     sign-in is unable to find a matching local user. (SOCIAL-207), +   * When ConnectController is given an application URL, it now uses the, +     entire URL to construct the callback URL instead of piecing together, +     the callback URL from specific parts of it. (SOCIAL-200), +   * Use coalesce function in SQL rather than ifnull for greater DB, +     compatibility. (SOCIAL-226), +   * Added cache-control headers in response for ConnectController status, +     pages to prevent caching. (SOCIAL-224), +   * Made ConnectionKey to implement Serializable, so that DuplicateConnectionException, +     can be serialized in the session. (SOCIAL-225), +, +=======================================================]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	/**, +	 * Returns a RedirectView with the URL to redirect to after a connection is created or deleted., +	 * Defaults to "/connect/{providerId}" relative to the servlet context path. , +	 * May be overridden to handle custom redirection needs., +	 * @param providerId the ID of the provider for which a connection was created or deleted., +	 */, +	protected RedirectView connectionStatusRedirect(String providerId) {, +		return new RedirectView("/connect/" + providerId, true);, +	}, +]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		return session == null || data == null ? false : SignInAttempts.add(session, data);]
[+++ b/build.gradle, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequest.java, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequest.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequestFactory.java, +, +		httpClient = new DefaultHttpClient(connectionManager);, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequest.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequestFactory.java, +, +		httpClient = new DefaultHttpClient(connectionManager);, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpResponse.java, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select ifnull(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/build.gradle, +    springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select ifnull(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.social.security;, +, +import org.springframework.social.SocialException;, +, +@SuppressWarnings("serial"), +public class SocialAuthenticationException extends SocialException {, +, +	public SocialAuthenticationException() {, +		super("");, +	}, +, +	public SocialAuthenticationException(String message) {, +		super(message);, +	}, +, +	public SocialAuthenticationException(Throwable cause) {, +		super("", cause);, +	}, +, +	public SocialAuthenticationException(String message, Throwable cause) {, +		super(message, cause);]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest.java, +import org.junit.Ignore;, +@Ignore("TODO: Reinstate test with generic test provider configuration"), +		// TODO: Test with fake provider, +//		assertNotNull(cfl.getConnectionFactory(Twitter.class));, +		// TODO: Replace with tests using fake provider, +//		assertNull(connectionRepository.findPrimaryConnection(Twitter.class));, +//		ConnectionFactory<Twitter> twitterCF = cfl.getConnectionFactory(Twitter.class);, +//		Connection<Twitter> connection = twitterCF.createConnection(new ConnectionData("twitter", "bob", "Bob McBob", "http://www.twitter.com/mcbob", null, "someToken", "someSecret", null, null));, +//		connectionRepository.addConnection(connection);, +//		assertNotNull(connectionRepository.findPrimaryConnection(Twitter.class));, +//		assertTrue(context.getBean(Twitter.class).isAuthorized());, +//		assertNotNull(twitter);, +//		assertTrue(twitter.isAuthorized());]
[+++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TwitterShowcaseController.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TwitterShowcaseController.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TwitterShowcaseController.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/facebookConnected.jsp, +<c:if test="${not empty message}">, +<div class="${message.type.cssClass}">${message.text}</div>]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release (), +=========================================================, +Bug Fixes, +  * OAuth1Parameters.NONE was accidentally made mutable; it is now back to being immutable as it should be., +  * Updated reference documentation to reflect the minor API changes introduced in RC3., +, +Improvements, +  * Added default constructor to OAuth1Parameters and OAuth2Parameters for more convenient standalone usage.  , +, +   * ConnectInterceptor.preConnect() now accepts a MultiValueMap<String, String>]
[+++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +		<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +		<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +		<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/sign-in-with-twitter-d.png, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +		<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/sign-in-with-twitter-d.png, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +		<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/sign-in-with-twitter-d.png, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private OAuthToken getTokenFromProvider(String tokenUrl, Map<String, String> tokenRequestParameters,, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +		<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/sign-in-with-twitter-d.png, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private OAuthToken getTokenFromProvider(String tokenUrl, Map<String, String> tokenRequestParameters,, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +		<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/sign-in-with-twitter-d.png, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private OAuthToken getTokenFromProvider(String tokenUrl, Map<String, String> tokenRequestParameters,, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/connect/TwitterServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Template;, +		super("twitter", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey,, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, +	<p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +		<button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/sign-in-with-twitter-d.png, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A connection between a local user account and an external service provider account., +	 * The persistence identifier of this service provider connection., +	 * Null if this connection has not yet been persisted., +	ServiceProviderConnectionKey getKey();, +	 * The id of the external provider account representing the remote end of the connection., +	 * May be null if this information is not exposed by the provider., +	 * If present, this value should never change., +	 * Must be present to support sign-in with the provider account., +	String getProviderAccountId();, +	, +	/**, +	 * The display name for the user's profile on the provider's system., +	 * May be null if this information is not public or not provided., +	 * This information may change if the user updates his or her profile., +	 */, +	String getProfileName();, +, +	/**, +	 * The public URL of the user's profile at the provider's site., +	 * May be null if this information is not public or not provided., +	 * This information may change if the user updates his or her profile., +	 */, +	String getProfileUrl();, +, +	/**, +	 * A link to the user's profile picture at the provider's site., +	 * May be null if this information is not public or not provided., +	 * This information may change if the user updates his or her profile., +	 */, +	String getProfilePictureUrl();, +	, +	/**, +	 * If this connection can be used to sign the local user in., +	 * True if sign-in support was specified when the connection was established and nobody else is connected to the {@link #getProviderAccountId() providerAccount}., +	 */, +	boolean supportsSignIn();, +, +	/**, +	 * Test this connection., +	 * If false, indicates that service API calls will fail., +	 */, +	boolean test();, +	, +	/**, +	 * Update the user's status on the provider's system., +	 * Allows a message to be broadcast from the local account to the remote account., +	 * This method will be a no-op if a status concept is not supported by the service provider., +	 * @param message the status message, +	 */, +	void updateStatus(String message);, +	, +	/**, +	 * Sync's this connection object with the current state of the linked provider account., +	 * Will cause locally cached profile fields to update if they have changed on the provider's system. , +	 */, +	void sync();, +	, +	/**, +	 * A Java binding to the Service Provider's native API., +	 */, +	public S getServiceApi();, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A connection between a local user account and an external service provider account., +	 * The persistence identifier of this service provider connection., +	 * Null if this connection has not yet been persisted., +	ServiceProviderConnectionKey getKey();, +	 * The id of the external provider account representing the remote end of the connection., +	 * May be null if this information is not exposed by the provider., +	 * If present, this value should never change., +	 * Must be present to support sign-in with the provider account., +	String getProviderAccountId();, +	]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					// TODO check for existing connection, +					// TODO optionally disallow more than one connection for providerUserId, +					]
[+++ b/.gitignore, +.idea, +++ b/.gitignore, +.idea, +++ b/build.gradle, +        testCompile("org.springframework:spring-aop:${springVersion}"), +        testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), +        testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/.gitignore, +.idea, +++ b/build.gradle, +        testCompile("org.springframework:spring-aop:${springVersion}"), +        testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), +        testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson; Greg Turnquist, +[[section_creatingAProviderProject]], +=== Extending an existing Service Provider, +, +Are you already using an existing provider like Spring Social GitHub? You may run into the situation where the Spring Social API doesn't cover every operation you need. Or you may wish to apply extra behavior like caching certain operations. This section explores extension points Spring Social's core includes., +, +[[]], +==== Adding extra operations, +, +If you look at the implementation you are using, it probably has a core template, like GitHubTemplate. But what if it doesn't have the operation you are looking for? You can either wait for the team to develop it, or write it yourself., +, +To write your own extension, simply extend the core class and add your own implementation:, +, +[source,java], +----, +public class ExtendedGitHubTemplate extends GitHubTemplate {, +, +    public static final String API_URL_BASE = "https://api.github.com";, +, +    public ExtendedGitHubTemplate(String githubToken) {, +        super(githubToken);, +    }, +, +    public List<GitHubRepo> findAllRepositories(String type, String name) {, +        return asList(this.getRestTemplate().getForObject(, +                API_URL_BASE + "/{type}/{name}/repos?per_page=100",, +                GitHubRepo[].class, type, name));, +    }, +----, +, +This fragment extends Spring Social GitHub's `GitHubTemplate`. It adds a new method, `findAllRepositories`. By extending the core template, you are granted access to an already-connected `RestTemplate` via `getRestTemplate()`. You have to assemble the URI yourself, but online documentation from the provider puts the power in your hands., +, +[[]], +==== Augmenting Spring Social's RestTemplate, +, +By design, Spring Social uses an embedded `RestTemplate` to do the legwork of interacting with the provider. That way, if you are using more than one Spring Social project, each one's individual instance won't collide with other. As a side effect, it may seem hard to apply something like caching. It's not., +, +Spring Social's `AbstractOAuth2ApiBinding`, the root of all OAuth2-based provider templates, provides a hook ot post process the `RestTemplate` when it gets created., +, +[source,java], +----, +public class ExtendedGitHubTemplate extends GitHubTemplate {, +, +    ..., +, +    @Override, +    protected RestTemplate postProcess(RestTemplate restTemplate) {, +        AspectJProxyFactory factory = new AspectJProxyFactory(restTemplate);, +        factory.addAspect(RestTemplateAspect.class);, +        factory.setProxyTargetClass(true);, +        return factory.getProxy(), +    }, +----, +, +In this example, the code extends `GitHubTemplate` and then overrides sthe `postProcess()` method. In Spring Social core, the *restTemplate* is simply passed through during creation and nothing is changed. In this example, the code creates an AspectJ proxy, adds some `RestTemplateAspect` advice, sets the factory to proxy the class and not its interface, and then returns back a proxy., +, +You can already do things like wrap `GitHubTemplate` operations with caching. This hook enables you to apply any type of advice directly to the `RestTemplate`., +, +, +++ b/.gitignore, +.idea, +++ b/build.gradle, +        testCompile("org.springframework:spring-aop:${springVersion}"), +        testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), +        testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson; Greg Turnquist, +[[section_creatingAProviderProject]], +=== Extending an existing Service Provider, +, +Are you already using an existing provider like Spring Social GitHub? You may run into the situation where the Spring Social API doesn't cover every operation you need. Or you may wish to apply extra behavior like caching certain operations. This section explores extension points Spring Social's core includes., +, +[[]], +==== Adding extra operations, +, +If you look at the implementation you are using, it probably has a core template, like GitHubTemplate. But what if it doesn't have the operation you are looking for? You can either wait for the team to develop it, or write it yourself., +, +To write your own extension, simply extend the core class and add your own implementation:, +, +[source,java], +----, +public class ExtendedGitHubTemplate extends GitHubTemplate {, +, +    public static final String API_URL_BASE = "https://api.github.com";, +]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MapServiceProviderConnectionFactoryRegistry.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.core.GenericTypeResolver;, +, +public class MapServiceProviderConnectionFactoryRegistry implements ServiceProviderConnectionFactoryLocator {, +, +	private final Map<String, ServiceProviderConnectionFactory<?>> connectionFactories = new HashMap<String, ServiceProviderConnectionFactory<?>>();, +, +	private final Map<Class<?>, String> serviceApiTypeIndex = new HashMap<Class<?>, String>();, +, +	public void addConnectionFactory(ServiceProviderConnectionFactory<?> connectionFactory) {, +		if (connectionFactories.containsKey(connectionFactory.getProviderId())) {, +			throw new IllegalArgumentException("A ConnectionFactory for provider '" + connectionFactory.getProviderId() + "' has already been registered");, +		}, +		Class<?> serviceApiType = GenericTypeResolver.resolveTypeArgument(connectionFactory.getClass(), ServiceProviderConnectionFactory.class);, +		if (serviceApiTypeIndex.containsKey(serviceApiType)) {, +			throw new IllegalArgumentException("A ConnectionFactory for service API [" + serviceApiType.getName() + "] has already been registered");, +		}, +		connectionFactories.put(connectionFactory.getProviderId(), connectionFactory);, +		serviceApiTypeIndex.put(serviceApiType, connectionFactory.getProviderId());, +	}, +	, +	public ServiceProviderConnectionFactory<?> getConnectionFactory(String providerId) {, +		ServiceProviderConnectionFactory<?> connectionFactory = connectionFactories.get(providerId);, +		if (connectionFactory == null) {, +			throw new IllegalArgumentException("No connection factory for ServiceProvider '" + providerId + "' is registered");, +		}, +		return connectionFactory;, +	}, +, +	@SuppressWarnings("unchecked"), +	public <S> ServiceProviderConnectionFactory<S> getConnectionFactory(Class<S> serviceApiType) {, +		String providerId = serviceApiTypeIndex.get(serviceApiType);, +		if (providerId == null) {, +			throw new IllegalArgumentException("No connection factory for ServiceProvider API [" + serviceApiType.getName() + "] is registered");, +		}, +		return (ServiceProviderConnectionFactory<S>) getConnectionFactory(providerId);, +	}, +	, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MapServiceProviderConnectionFactoryRegistry.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.core.GenericTypeResolver;, +, +public class MapServiceProviderConnectionFactoryRegistry implements ServiceProviderConnectionFactoryLocator {, +, +	private final Map<String, ServiceProviderConnectionFactory<?>> connectionFactories = new HashMap<String, ServiceProviderConnectionFactory<?>>();, +, +	private final Map<Class<?>, String> serviceApiTypeIndex = new HashMap<Class<?>, String>();, +, +	public void addConnectionFactory(ServiceProviderConnectionFactory<?> connectionFactory) {, +		if (connectionFactories.containsKey(connectionFactory.getProviderId())) {, +			throw new IllegalArgumentException("A ConnectionFactory for provider '" + connectionFactory.getProviderId() + "' has already been registered");, +		}, +		Class<?> serviceApiType = GenericTypeResolver.resolveTypeArgument(connectionFactory.getClass(), ServiceProviderConnectionFactory.class);, +		if (serviceApiTypeIndex.containsKey(serviceApiType)) {, +			throw new IllegalArgumentException("A ConnectionFactory for service API [" + serviceApiType.getName() + "] has already been registered");, +		}]
[+++ b/docs/src/reference/docbook/implementing.xml, +	<title>Adding Support for a New Service Provider</title>, +		<title>Developing a Java binding to the provider's API</title>, +		<section id="service-provider-implementing-api-new-designing">, +			<title>Designing a new Java API binding</title>, +			<para>, +				API developers retain full control over the design and implementation of their Java bindings., +				That said, we offer several design guidelines in an effort to improve overall consistency and quality:, +				<itemizedlist>, +					<listitem>, +						<para>, +							<emphasis>Favor separating the API binding interface from the implementation.</emphasis>, +							This is illustrated in the spring-social-twitter example in the previous section., +							There, "TwitterApi" is the central API binding type and it is declared in the org.springframework.social.twitter.api package with other public types., +							"TwitterTemplate" is the primary implementation of this interface and is located in the org.springframework.social.twitter.api.impl subpackage along with other package-private implementation types., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							<emphasis>Favor organizing the API binding hierarchically by RESTful resource.</emphasis>, +							REST-based APIs typically expose access to a number of resources in an hierarchical manner., +							For example, Twitter's API provides access to "status timelines", "searches", "lists", "direct messages", "friends", and "users"., +							Rather than add all operations across these resources to a single flat "TwitterApi" interface, the TwitterApi interface is organized hierarchically:, +							<programlisting language="java"><![CDATA[, +public interface TwitterApi {, +	, +    DirectMessageOperations directMessageOperations();, +, +    FriendOperations friendOperations();, +, +    ListOperations listOperations();, +, +    SearchOperations searchOperations();, +	, +    TimelineOperations timelineOperations();, +, +    UserOperations userOperations();, +, +}]]></programlisting>, +						</para>, +						<para>, +							DirectMessageOperations, for example, would contain API bindings to Twitter's "direct_messages" resource:, +							<programlisting language="java"><![CDATA[, +public interface DirectMessageOperations {, +, +    List<DirectMessage> getDirectMessagesReceived();, +, +    List<DirectMessage> getDirectMessagesSent();, +, +    void sendDirectMessage(String toScreenName, String text);, +, +    void sendDirectMessage(long toUserId, String text);, +	, +    void deleteDirectMessage(long messageId);, +}]]>, +							</programlisting>, +						</para>, +					</listitem>, +				</itemizedlist>, +			</para>, +		</section>, +		<section id="service-provider-implementing-api-new-implementing">, +		<section id="service-provider-implementing-api-new-testing">, +			<title>Testing a new Java API binding</title>, +		</section>				, +		<section id="service-provider-implementing-api-existing-integrating">, +++ b/docs/src/reference/docbook/implementing.xml, +	<title>Adding Support for a New Service Provider</title>, +		<title>Developing a Java binding to the provider's API</title>, +		<section id="service-provider-implementing-api-new-designing">, +			<title>Designing a new Java API binding</title>, +			<para>, +				API developers retain full control over the design and implementation of their Java bindings., +				That said, we offer several design guidelines in an effort to improve overall consistency and quality:, +				<itemizedlist>, +					<listitem>, +						<para>, +							<emphasis>Favor separating the API binding interface from the implementation.</emphasis>, +							This is illustrated in the spring-social-twitter example in the previous section., +							There, "TwitterApi" is the central API binding type and it is declared in the org.springframework.social.twitter.api package with other public types., +							"TwitterTemplate" is the primary implementation of this interface and is located in the org.springframework.social.twitter.api.impl subpackage along with other package-private implementation types., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							<emphasis>Favor organizing the API binding hierarchically by RESTful resource.</emphasis>, +							REST-based APIs typically expose access to a number of resources in an hierarchical manner., +							For example, Twitter's API provides access to "status timelines", "searches", "lists", "direct messages", "friends", and "users"., +							Rather than add all operations across these resources to a single flat "TwitterApi" interface, the TwitterApi interface is organized hierarchically:, +							<programlisting language="java"><![CDATA[, +public interface TwitterApi {, +	, +    DirectMessageOperations directMessageOperations();, +, +    FriendOperations friendOperations();, +, +    ListOperations listOperations();, +, +    SearchOperations searchOperations();, +	]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import org.springframework.social.connect.ConnectionRepository;, +			usersConnectionRepository.createConnectionRepository(userId).updateConnection(connection);]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private String callbackUrl;, +	, +	 * Configures a specific callback URL that is to be used instead of calculating one based on the application URL or current request URL., +	 * When set this URL will override the default behavior where the callback URL is derived from the current request and/or a specified application URL., +	 * When set along with applicationUrl, the applicationUrl will be ignored., +	 * @param callbackUrl the callback URL to send to providers during authorization. Default is null. , +	 */, +	public void setCallbackUrl(String callbackUrl) {, +		this.callbackUrl = callbackUrl;, +	}, +, +	/**, +	protected String callbackUrl(NativeWebRequest request) {, +		if (callbackUrl != null) {, +			return callbackUrl;, +		}, +		HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);, +		if (applicationUrl != null) {, +			return applicationUrl + connectPath(nativeRequest);, +		} else {, +			return nativeRequest.getRequestURL().toString();, +		}, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private String callbackUrl;, +	, +	 * Configures a specific callback URL that is to be used instead of calculating one based on the application URL or current request URL., +	 * When set this URL will override the default behavior where the callback URL is derived from the current request and/or a specified application URL., +	 * When set along with applicationUrl, the applicationUrl will be ignored., +	 * @param callbackUrl the callback URL to send to providers during authorization. Default is null. , +	 */, +	public void setCallbackUrl(String callbackUrl) {, +		this.callbackUrl = callbackUrl;, +	}, +, +	/**, +	protected String callbackUrl(NativeWebRequest request) {, +		if (callbackUrl != null) {, +			return callbackUrl;, +		}, +		HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);, +		if (applicationUrl != null) {, +			return applicationUrl + connectPath(nativeRequest);, +		} else {, +			return nativeRequest.getRequestURL().toString();, +		}, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +import static org.junit.Assert.*;, +	@Test, +	public void buildOAuthUrl_OAuth10_withCallbackUrl() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setCallbackUrl("https://overridingcallbackurl.com:4321");, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?oauth_callback=https://overridingcallbackurl.com:4321", url);, +	}, +, +	@Test, +	public void buildOAuthUrl_OAuth10a_withCallbackUrl() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setCallbackUrl("https://overridingcallbackurl.com:4321");, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10_REVISION_A), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize", url);, +	}, +, +	, +	@Test, +	public void buildOAuthUrl_OAuth2_withCallbackUrl() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setCallbackUrl("https://overridingcallbackurl.com:4321");, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth2ConnectionFactory(), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?redirect_uri=https://overridingcallbackurl.com:4321", url);, +	}, +	]
[+++ b/gradle.properties, +springSocialVersion=1.0.2.BUILD-SNAPSHOT, +role=developer]
[+++ b/gradle.properties, +h2Version=1.4.193, +springSecurityVersion=4.2.0.RELEASE, +jacksonVersion=2.8.5]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.util.StringUtils;, +import org.springframework.web.util.UrlPathHelper;, +import org.springframework.web.util.WebUtils;, +	private final UrlPathHelper urlPathHelper = new UrlPathHelper();, +, +		String path = "/connect/" + providerId + getPathExtension(request);, +		HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);, +		if (prependServletPath(nativeRequest)) {, +			path = nativeRequest.getServletPath() + path;, +		return new RedirectView(path, true);, +	private boolean prependServletPath(HttpServletRequest request) {, +		return !this.urlPathHelper.getPathWithinServletMapping(request).equals("");, +	}, +	, +	/*, +	 * Determines the path extension, if any., +	 * Returns the extension, including the period at the beginning, or an empty string if there is no extension., +	 * This makes it possible to append the returned value to a path even if there is no extension., +	 */, +	private String getPathExtension(NativeWebRequest request) {, +		String fileName = WebUtils.extractFullFilenameFromUrlPath(request.getNativeRequest(HttpServletRequest.class).getRequestURI());		, +		String extension = StringUtils.getFilenameExtension(fileName);, +		return extension != null ? "." + extension : "";, +	}, +]
[+++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/main/java/org/springframework/social/facebook/FacebookAccessToken.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the Facebook access token given when the user signed in with Facebook., + * , + * @author Craig Walls, +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/main/java/org/springframework/social/facebook/FacebookAccessToken.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the Facebook access token given when the user signed in with Facebook., + * , + * @author Craig Walls, +++ b/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +		@SuppressWarnings("rawtypes"), +		@SuppressWarnings("unchecked"), +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/main/java/org/springframework/social/facebook/FacebookAccessToken.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the Facebook access token given when the user signed in with Facebook., + * , + * @author Craig Walls, +++ b/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +		@SuppressWarnings("rawtypes"), +		@SuppressWarnings("unchecked"), +++ b/src/main/java/org/springframework/social/facebook/FacebookUserId.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the user's Facebook ID, assuming that user has signed in with Facebook., + * , + * @author Craig Walls, + */, +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/main/java/org/springframework/social/facebook/FacebookAccessToken.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the Facebook access token given when the user signed in with Facebook., + * , + * @author Craig Walls, +++ b/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +		@SuppressWarnings("rawtypes"), +		@SuppressWarnings("unchecked"), +++ b/src/main/java/org/springframework/social/facebook/FacebookUserId.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the user's Facebook ID, assuming that user has signed in with Facebook., + * , + * @author Craig Walls, + */, +++ b/src/main/java/org/springframework/social/facebook/FacebookWebArgumentResolver.java, +/**, + * Web argument resolver that resolves arguments annotated with, + * {@link FacebookAccessToken} or {@link FacebookUserId}., + * , + * @author Craig Walls, + */, +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/main/java/org/springframework/social/facebook/FacebookAccessToken.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the Facebook access token given when the user signed in with Facebook., + * , + * @author Craig Walls, +++ b/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +		@SuppressWarnings("rawtypes"), +		@SuppressWarnings("unchecked"), +++ b/src/main/java/org/springframework/social/facebook/FacebookUserId.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the user's Facebook ID, assuming that user has signed in with Facebook., + * , + * @author Craig Walls, + */, +++ b/src/main/java/org/springframework/social/facebook/FacebookWebArgumentResolver.java, +/**, + * Web argument resolver that resolves arguments annotated with, + * {@link FacebookAccessToken} or {@link FacebookUserId}.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiAdapter.java, +import org.springframework.social.ProviderApiException;, +, +	 * @throws ProviderApiException if there is a problem testing the connection., +	 * @throws ProviderApiException if there is a problem fetching connection information from the provider., +	 * @throws ProviderApiException if there is a problem fetching a user profile from the provider., +	 * @throws ProviderApiException if there is a problem updating the user's status on the provider.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +	protected StringBuffer getProxyHeaderAwareRequestURL(HttpServletRequest request) {, +		if (StringUtils.isEmpty(host)) {, +		if (scheme.equals("http") && port.equals("80")){, +		if (scheme.equals("https") && port.equals("443")){, +		if (StringUtils.hasLength(port)){]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (int i = 1; i < strings.length; i++) {, +				builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (int i = 1; i < strings.length; i++) {, +				builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds();, +	, +	/**, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @param userId the user's ID, +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds(String userId);, +	, +	/**, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (int i = 1; i < strings.length; i++) {, +				builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds();, +	, +	/**, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @param userId the user's ID, +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds(String userId);, +	, +	/**, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +import org.springframework.social.facebook.support.extractors.StringResponseExtractor;, +	, +	, +	private StringResponseExtractor idExtractor;, +	, +		idExtractor = new StringResponseExtractor("id");, +	public List<String> getFriendIds() {, +		return getFriendIds("me");, +	}, +	, +	public List<String> getFriendIds(String userId) {, +		return graphApi.fetchConnections(userId, "friends", idExtractor, "id");, +	}, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +	 * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +			for (int i = 1; i < strings.length; i++) {, +				builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds();, +	, +	/**, +	 * Retrieves a list of the authenticating user's friends' IDs., +	 * @param userId the user's ID, +	 * @return a list of Strings, where each entry is the ID of one of the user's friends., +	 */, +	List<String> getFriendIds(String userId);, +	, +	/**, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +import org.springframework.social.facebook.support.extractors.StringResponseExtractor;, +	, +	, +	private StringResponseExtractor idExtractor;, +	, +		idExtractor = new StringResponseExtractor("id");, +	public List<String> getFriendIds() {, +		return getFriendIds("me");, +	}, +	, +	public List<String> getFriendIds(String userId) {, +		return graphApi.fetchConnections(userId, "friends", idExtractor, "id");, +	}, +	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/StringResponseExtractor.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationToken.java, +	 * @param connection, +	 *            connection data, +	 * @param providerId, +	 *            {@link ServiceProvider} id, +	 * @param details, +	 *            user details, typically as returned by, +	 *            {@link SocialUserDetailsService}, +	 * @param providerAccountData, +	 *            optional extra account data]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +		addTextToMapMessageConverter();, +		Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	, +	// private helpers, +	// TODO : Can probably tweak RestTemplate's message converters to deal with this better., +	private String valueOf(Object object) {, +		if (object == null) {, +			return null;, +		} else if (object instanceof List) {, +			List list = (List) object;, +			if (list.size() > 0) {, +				return String.valueOf(list.get(0));, +			}, +			return null;, +		}, +		return String.valueOf(object);, +	}, +, +	/*, +	 * Facebook returns form-encoded results with a content type of "text/plain". The "text/plain" content type prevents, +	 * any of the default encoders from being able to parse the results, even though FormHttpMessageConverter is, +	 * perfectly capable of doing so. This method adds another FormHttpMessageConverter that can read "text/plain" into, +	 * a Map so that this works for Facebook., +	 */, +	private void addTextToMapMessageConverter() {, +		FormHttpMessageConverter messageConverter = new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				return clazz.equals(Map.class) && mediaType != null && mediaType.getType().equals("text"), +						&& mediaType.getSubtype().equals("plain");, +			}, +		};, +		restTemplate.getMessageConverters().add(messageConverter);, +	}]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java]
[+++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="fa8a9825f555a7a8949ec48fb93bda58" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="fa8a9825f555a7a8949ec48fb93bda58" />, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +import org.springframework.web.client.RestTemplate;, +, +/**, + * Base class for OAuth 1-based provider API templates., + * @author Craig Walls, + */, +public abstract class AbstractOAuth1ApiTemplate {, +	, +	private boolean authorizedForUser;, +	, +	private final RestTemplate restTemplate;, +, +	private OAuth1Credentials oAuth1Credentials;, +	, +	/**, +	 * Constructs the API template without user authorization. This is useful for accessing operations on a provider's API that do not require user authorization., +	 */, +	protected AbstractOAuth1ApiTemplate() {, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +	}, +	, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param consumerKey the application's consumer key, +	 * @param consumerSecret the application's consumer secret, +	 * @param accessToken the access token, +	 * @param accessTokenSecret the access token secret, +	 */, +	protected AbstractOAuth1ApiTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		this.oAuth1Credentials = new OAuth1Credentials(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +		this.authorizedForUser = true;, +		restTemplate = ProtectedResourceClientFactory.create(oAuth1Credentials);, +	}, +	, +	/**, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring proxy server details., +	 * @param requestFactory the request factory, +	 */, +	public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, +		if(isAuthorizedForUser()) {, +			this.restTemplate.setRequestFactory(ProtectedResourceClientFactory.oauthSigningIfNecessary(requestFactory, oAuth1Credentials));, +		} else {, +			this.restTemplate.setRequestFactory(requestFactory);, +		}, +	}, +	, +	public boolean isAuthorizedForUser() {, +		return authorizedForUser;, +	}, +	, +	public RestTemplate getRestTemplate() {, +		return restTemplate;, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +import org.springframework.web.client.RestTemplate;, +, +/**, + * Base class for OAuth 1-based provider API templates., + * @author Craig Walls]
[+++ b/spring-social-core/src/test/java/org/springframework/social/support/ClientHttpRequestFactorySelectorTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.net.URI;, +, +import org.apache.http.HttpHost;, +import org.apache.http.conn.params.ConnRoutePNames;, +import org.junit.After;, +import org.junit.Test;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.ClientHttpResponse;, +, +public class ClientHttpRequestFactorySelectorTest {, +, +	@After, +	public void teardown() {, +		System.getProperties().remove("http.proxyHost");, +		System.getProperties().remove("http.proxyPort");, +	}, +	, +	@Test, +	public void getRequestFactory_noProxy() {, +		HttpComponentsClientHttpRequestFactory requestFactory = (HttpComponentsClientHttpRequestFactory) ClientHttpRequestFactorySelector.getRequestFactory();, +		HttpHost proxy = (HttpHost) requestFactory.getHttpClient().getParams().getParameter(ConnRoutePNames.DEFAULT_PROXY);, +		assertNull(proxy);, +	}, +, +	@Test, +	public void getRequestFactory_withProxy() {, +		System.getProperties().setProperty("http.proxyHost", "someproxyhost");, +		System.getProperties().setProperty("http.proxyPort", "8080");		, +		HttpComponentsClientHttpRequestFactory requestFactory = (HttpComponentsClientHttpRequestFactory) ClientHttpRequestFactorySelector.getRequestFactory();, +		HttpHost proxy = (HttpHost) requestFactory.getHttpClient().getParams().getParameter(ConnRoutePNames.DEFAULT_PROXY);, +		assertNotNull(proxy);, +		assertEquals("someproxyhost", proxy.getHostName());, +		assertEquals(8080, proxy.getPort());, +	}, +, +	@Test, +	public void getRequestFactory_withDefaultProxyPort() {, +		System.getProperties().setProperty("http.proxyHost", "someproxyhost");, +		HttpComponentsClientHttpRequestFactory requestFactory = (HttpComponentsClientHttpRequestFactory) ClientHttpRequestFactorySelector.getRequestFactory();, +		HttpHost proxy = (HttpHost) requestFactory.getHttpClient().getParams().getParameter(ConnRoutePNames.DEFAULT_PROXY);, +		assertNotNull(proxy);, +		assertEquals("someproxyhost", proxy.getHostName());, +		assertEquals(80, proxy.getPort());, +	}, +, +	@Test, +	public void bufferRequests() throws Exception {, +		ClientHttpRequest mockRequest = mock(ClientHttpRequest.class);, +		ClientHttpResponse mockResponse = mock(ClientHttpResponse.class);, +		when(mockResponse.getBody()).thenReturn(new ByteArrayInputStream("Test Body".getBytes()));, +		when(mockRequest.getHeaders()).thenReturn(new HttpHeaders());, +		when(mockRequest.getBody()).thenReturn(new ByteArrayOutputStream());, +		when(mockRequest.execute()).thenReturn(mockResponse);, +		ClientHttpRequestFactory mockRequestFactory = mock(ClientHttpRequestFactory.class);, +		when(mockRequestFactory.createRequest(new URI("http://somehost.com/test"), HttpMethod.GET)).thenReturn(mockRequest);, +		ClientHttpRequestFactory bufferingRequestFactory = ClientHttpRequestFactorySelector.bufferRequests(mockRequestFactory);, +		ClientHttpRequest request = bufferingRequestFactory.createRequest(new URI("http://somehost.com/test"), HttpMethod.GET);, +		ClientHttpResponse response = request.execute();, +		response.getBody();, +		response.getBody();, +		response.getBody();, +		verify(mockRequest, times(1)).getBody();, +	}, +}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, + * The supporting schema is defined in JdbcUsersConnectionRepository.sql.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +			addCustomParameters(params);, +	protected void addCustomParameters(OAuth2Parameters params) {, +	}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.web.client.RestClientException;, +		Map<String, Object> result = getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class);, +		if (result == null) {, +			throw new RestClientException("access token endpoint returned empty result");, +		}, +		return extractAccessGrant(result);]
[+++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String connectionSignUpRef) {, +		BeanDefinitionBuilder usersConnectionRepositoryBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef);, +		if (connectionSignUpRef != null && connectionSignUpRef.length() > 0) {, +			usersConnectionRepositoryBeanBuilder.addPropertyReference("connectionSignUp", connectionSignUpRef);, +		}, +		BeanDefinition usersConnectionRepositoryBD = usersConnectionRepositoryBeanBuilder.getBeanDefinition();, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String connectionSignUpRef) {, +		BeanDefinitionBuilder usersConnectionRepositoryBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef);, +		if (connectionSignUpRef != null && connectionSignUpRef.length() > 0) {, +			usersConnectionRepositoryBeanBuilder.addPropertyReference("connectionSignUp", connectionSignUpRef);, +		}, +		BeanDefinition usersConnectionRepositoryBD = usersConnectionRepositoryBeanBuilder.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionSignUpRef = element.getAttribute("connection-signup-ref");, +		return registerJdbcConnectionRepositoryBeans(parserContext.getRegistry(), connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);]
[+++ b/docs/src/reference/docbook/implementing.xml, +			Define a single constructor that accepts an clientId and clientSecret,, +			Finally, implement getServiceApi(String) to return a new API instance., +    public FacebookServiceProvider(String clientId, String clientSecret) {, +        super(new OAuth2Template(clientId, clientSecret,, +            "https://graph.facebook.com/oauth/authorize", , +    public FacebookApi getServiceApi(String accessToken) {, +			In the constructor, you should call super, passing up the configured OAuth2Template, which implements OAuth2Operations., +			In getServiceApi(String), you should construct your Service API implementation, passing it the access token needed to make requests for protected resources., +			Define a single constructor that accepts a consumerKey and consumerSecret., +			Finally, implement getServiceApi(String, String) to return a new API instance., +    public TwitterServiceProvider(String consumerKey, String consumerSecret) {, +        super(consumerKey, consumerSecret,  new OAuth1Template(consumerKey, consumerSecret, , +                "https://twitter.com/oauth/authorize",, +    public TwitterApi getServiceApi(String accessToken, String secret) {, +        return new TwitterTemplate(getConsumerKey(), getConsumerSecret(), accessToken, secret);, +			In the constructor, you should call super, passing up the the consumerKey, secret, and configured OAuth1Template., +			In getServiceApi(String, String), you should construct your Service API implementation, passing it the four tokens needed to make requests for protected resources.]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +/**, + * A data access interface for managing a global store of LocalUser-to-ServiceProviderUser Connections., + * Provides data access operations that apply across multiple local user records., + * Also acts as a factory for a local-user-specific {@link ServiceProviderConnectionRepository}., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository, + */, +	/**, +	 * Find the id of the <i>single</i> local user who has a {@link ServiceProviderConnection} with the given key., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign the local application user in using his or her provider account., +	 * Returns null if there is not exactly one local user connected to the provider user., +	 * @param connectionKey the key identifying a provider user, +	 */, +	/**, +	 * Find the ids of the local users who are connected to the specific provider user accounts., +	 * @param providerId the provider id, e.g. "facebook", +	 * @param providerUserIds the set of provider user ids e.g. ("125600", "131345", "54321")., +	 * @return the set of local user ids connected to those service provider users, or empty if none., +	 */, +	Set<String> findLocalUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +	/**, +	 * Create a single-user {@link ServiceProviderConnectionRepository} instance for the local user assigned the given id., +	 * @param localUserId the id of the local user account., +	 * @return the ServiceProviderConnectionRepository, exposing a number of operations for accessing and updating the given local user's provider connections., +	 */, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +/**, + * A data access interface for managing a global store of LocalUser-to-ServiceProviderUser Connections., + * Provides data access operations that apply across multiple local user records., + * Also acts as a factory for a local-user-specific {@link ServiceProviderConnectionRepository}., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository, + */, +	/**, +	 * Find the id of the <i>single</i> local user who has a {@link ServiceProviderConnection} with the given key., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign the local application user in using his or her provider account., +	 * Returns null if there is not exactly one local user connected to the provider user., +	 * @param connectionKey the key identifying a provider user, +	 */, +	/**, +	 * Find the ids of the local users who are connected to the specific provider user accounts., +	 * @param providerId the provider id, e.g. "facebook", +	 * @param providerUserIds the set of provider user ids e.g. ("125600", "131345", "54321")., +	 * @return the set of local user ids connected to those service provider users, or empty if none., +	 */, +	Set<String> findLocalUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +	/**, +	 * Create a single-user {@link ServiceProviderConnectionRepository} instance for the local user assigned the given id., +	 * @param localUserId the id of the local user account., +	 * @return the ServiceProviderConnectionRepository, exposing a number of operations for accessing and updating the given local user's provider connections., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to fetch a ServiceProviderConnection , + * and no such connection exists with the provided key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#findConnection(ServiceProviderConnectionKey), + */, +	/**, +	 * The invalid key value., +	 */, +++ b/build.gradle]
[+++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SignInAttempts.java, +package org.springframework.social.security;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.HttpSession;, +, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionKey;, +, +/**, + * , + * @author Craig Walls, + * @author Stefan Fussennegger, + */, +class SignInAttempts {, +	, +	private static final String ATTR_SIGN_IN_ATTEMPT = SignInAttempts.class.getName();, +	, +	private Map<ConnectionKey, ConnectionData> attempts = new HashMap<ConnectionKey, ConnectionData>();, +	, +	/**, +	 * @return always <code>true</code>, +	 */, +	public static boolean add(HttpSession session, ConnectionData data) {, +		SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +		if (signInAttempts == null) {, +			session.setAttribute(ATTR_SIGN_IN_ATTEMPT, signInAttempts = new SignInAttempts()); , +		}, +		return signInAttempts.addAttempt(data);, +	}, +	, +	/**, +	 * @return unmodifiable list, +	 */, +	public static Collection<ConnectionData> get(HttpSession session) {, +		SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);]
[+++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ /dev/null, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ /dev/null, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +		private final List<String> matchingUserIds;, +		private ConnectionRepository connectionRepository;, +		private final String providerId;, +			this.providerId = providerId;, +			this.matchingUserIds = matchingUserIds;, +			connectionRepository = mock(ConnectionRepository.class);, +			return matchingUserIds != null ? matchingUserIds : Collections.<String>emptyList();, +			return connectionRepository;, +					return connection.getKey().getProviderId().equals(providerId) && connection.getKey().getProviderUserId().equals("testuser");, +			verify(connectionRepository, times(1)).updateConnection(argThat(matcher));, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ /dev/null, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +		private final List<String> matchingUserIds;, +		private ConnectionRepository connectionRepository;, +		private final String providerId;, +			this.providerId = providerId;, +			this.matchingUserIds = matchingUserIds;, +			connectionRepository = mock(ConnectionRepository.class);, +			return matchingUserIds != null ? matchingUserIds : Collections.<String>emptyList();, +			return connectionRepository;, +					return connection.getKey().getProviderId().equals(providerId) && connection.getKey().getProviderUserId().equals("testuser");, +			verify(connectionRepository, times(1)).updateConnection(argThat(matcher));, +++ /dev/null, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ /dev/null, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +		private final List<String> matchingUserIds;, +		private ConnectionRepository connectionRepository;, +		private final String providerId;, +			this.providerId = providerId;, +			this.matchingUserIds = matchingUserIds;, +			connectionRepository = mock(ConnectionRepository.class);, +			return matchingUserIds != null ? matchingUserIds : Collections.<String>emptyList();, +			return connectionRepository;, +					return connection.getKey().getProviderId().equals(providerId) && connection.getKey().getProviderUserId().equals("testuser");, +			verify(connectionRepository, times(1)).updateConnection(argThat(matcher));, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    mockitoVersion = '1.8.5', +        testCompile "junit:junit:$junitVersion", +        testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ /dev/null, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +		private final List<String> matchingUserIds;, +		private ConnectionRepository connectionRepository;, +		private final String providerId;, +			this.providerId = providerId;, +			this.matchingUserIds = matchingUserIds;, +			connectionRepository = mock(ConnectionRepository.class);]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/reference/docbook/connecting.xml, +    public TwitterServiceProvider twitter(@Value("${twitter.consumerKey}") String consumerKey,, +            @Value("${twitter.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +    public FacebookServiceProvider facebook(@Value("${facebook.appId}") String appId,, +            @Value("${facebook.appSecret}") String appSecret, ConnectionRepository connectionRepository) {, +    public TripItServiceProvider tripit(@Value("${tripit.consumerKey}") String consumerKey,, +            @Value("${tripit.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as placeholder variables to be resolved by Spring's property placeholder support., +    public TextEncryptor textEncryptor(@Value("${security.encryptPassword}") String password,, +            @Value("${security.encryptSalt}") String salt) {, +        <constructor-arg value="${twitter.consumerKey}" />, +        <constructor-arg value="${twitter.consumerSecret}" />, +        <constructor-arg value="${facebook.appId}" />, +        <constructor-arg value="${facebook.appSecret}" />, +        <constructor-arg value="${tripit.consumerKey}" />, +        <constructor-arg value="${tripit.consumerSecret}" />, +            <constructor-arg value="${security.encryptPassword}" />, +            <constructor-arg value="${security.encryptSalt}" />, +    public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +    <constructor-arg value="${application.url}" />, +			Here the URL is specified as a placeholder variable., +public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/reference/docbook/connecting.xml, +    public TwitterServiceProvider twitter(@Value("${twitter.consumerKey}") String consumerKey,, +            @Value("${twitter.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +    public FacebookServiceProvider facebook(@Value("${facebook.appId}") String appId,, +            @Value("${facebook.appSecret}") String appSecret, ConnectionRepository connectionRepository) {, +    public TripItServiceProvider tripit(@Value("${tripit.consumerKey}") String consumerKey,, +            @Value("${tripit.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as placeholder variables to be resolved by Spring's property placeholder support., +    public TextEncryptor textEncryptor(@Value("${security.encryptPassword}") String password,, +            @Value("${security.encryptSalt}") String salt) {, +        <constructor-arg value="${twitter.consumerKey}" />, +        <constructor-arg value="${twitter.consumerSecret}" />, +        <constructor-arg value="${facebook.appId}" />, +        <constructor-arg value="${facebook.appSecret}" />, +        <constructor-arg value="${tripit.consumerKey}" />, +        <constructor-arg value="${tripit.consumerSecret}" />, +            <constructor-arg value="${security.encryptPassword}" />, +            <constructor-arg value="${security.encryptSalt}" />, +    public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +    <constructor-arg value="${application.url}" />, +			Here the URL is specified as a placeholder variable., +public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname>'s constructor is annotated with <code>@Inject</code>, so it's not necessary to explicitly wire any of its arguments except for the application URL., +			Optimizing the configuration for autowiring, the <classname>TwitterSigninController</classname> bean looks like this: , +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +					<listitem>, +						<para>, +							If the received access token doesn't match any existing connection, <classname>TwitterSigninController</classname> will redirect to a signup URL. , +							The default signup URL is "/signup" (relative to the application root)., +						</para>, +					</listitem>, +		<para>, +			<classname>FacebookSigninController</classname>'s constructor is annotated with <code>@Inject</code>, so it is not necessary to explicitly wire these dependencies., +			The <classname>FacebookSigninController</classname> configuration optimized for autowiring takes a simpler form:, +		</para>, +, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.facebook.web.FacebookSigninController"/>]]>, +		</programlisting>, +<facebook:init appId="@facebookProvider.appId" />]]>, +			The <code><![CDATA[<facebook:init>]]></code> will initialize the Facebook JavaScript library with your application's App ID., +			Here the App ID is specified using the Spring Expression Langauge to be the value of the <code>appId</code> property of the bean whose ID is "facebookProvider"., +, +	, +	<section xml:id="signin_signup">, +		<title>Signing up after a failed sign in</title>, +		, +		<para>, +			With both <classname>TwitterSigninController</classname> and <classname>FacebookSigninController</classname>, the flow will redirect to a signup page if no connection can be found for the obtained access token., +			By default, the signup URL is "/signup", relative to the application root., +			You can override that default by setting the <code>signupUrl</code> property on the controller., +			For example, the following configuration of <classname>TwitterSigninController</classname> sets the signup URL to "/newUser":, +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +    <property name="signupUrl" value="/newUser" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +			Before the signin controller redirects the user to the signup URL, it places an instance of <interfacename>ProviderSignInAttempt</interfacename> in the session. ]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.M3]
[+++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +					buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> params);, +, +++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +					buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> params);, +, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +					buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> params);, +, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth/SSOAuthClientRequestAuthorizer.java, +package org.springframework.social.oauth;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth.consumer.OAuthConsumerSupport;, +import org.springframework.security.oauth.consumer.ProtectedResourceDetails;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public class SSOAuthClientRequestAuthorizer extends OAuth1ClientRequestAuthorizer {, +, +	private final ProtectedResourceDetails protectedResourceDetails;, +	private final OAuthConsumerSupport oauthSupport;, +	private final SSOAuthAccessTokenServices tokenServices;, +, +	public SSOAuthClientRequestAuthorizer(OAuthConsumerSupport oauthSupport,, +			ProtectedResourceDetails protectedResourceDetails, SSOAuthAccessTokenServices tokenServices) {, +		this.oauthSupport = oauthSupport;, +		this.protectedResourceDetails = protectedResourceDetails;, +		this.tokenServices = tokenServices;, +	}, +, +	public String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters) {, +, +		OAuthConsumerToken accessToken = resolveAccessToken(protectedResourceDetails.getId());, +		if (accessToken == null) {, +			return null;, +		}, +, +		return oauthSupport.getAuthorizationHeader(protectedResourceDetails, accessToken, url, method.name(),, +				parameters);, +	}, +, +	private OAuthConsumerToken resolveAccessToken(String providerId) {, +		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +		if (authentication == null) {, +			throw new AuthenticationCredentialsNotFoundException("No credentials found");, +		}, +, +		OAuthConsumerToken accessToken = tokenServices.getToken(providerId, authentication.getPrincipal());, +		return accessToken;, +	}, +}, +++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +					buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> params);, +, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth/SSOAuthClientRequestAuthorizer.java, +package org.springframework.social.oauth;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth.consumer.OAuthConsumerSupport;, +import org.springframework.security.oauth.consumer.ProtectedResourceDetails;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public class SSOAuthClientRequestAuthorizer extends OAuth1ClientRequestAuthorizer {, +, +	private final ProtectedResourceDetails protectedResourceDetails;, +	private final OAuthConsumerSupport oauthSupport;, +	private final SSOAuthAccessTokenServices tokenServices;, +, +	public SSOAuthClientRequestAuthorizer(OAuthConsumerSupport oauthSupport,, +			ProtectedResourceDetails protectedResourceDetails, SSOAuthAccessTokenServices tokenServices) {, +		this.oauthSupport = oauthSupport;, +		this.protectedResourceDetails = protectedResourceDetails;, +		this.tokenServices = tokenServices;]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +	private static final long serialVersionUID = 1L;, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +	private static final long serialVersionUID = 1L;, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +import org.springframework.http.ResponseEntity;, +, +/**, + * Strategy interface for converting responses from a social network provider, + * into specific instances of {@link SocialException}., + * , + * @author Craig Walls, + */, +public interface ResponseStatusCodeTranslator {, +	/**, +	 * Translate responseEntity into a SocialException, +	 * , +	 * @param responseEntity, +	 *            The response from the social network provider, +	 * , +	 * @return the exception translated from the response or <code>null</code>, +	 *         if the response doesn't translate into an error., +	 */, +	SocialException translate(ResponseEntity<?> responseEntity);, +}, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +	private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +import org.springframework.http.ResponseEntity;, +, +/**, + * Strategy interface for converting responses from a social network provider, + * into specific instances of {@link SocialException}., + * , + * @author Craig Walls, + */, +public interface ResponseStatusCodeTranslator {, +	/**, +	 * Translate responseEntity into a SocialException, +	 * , +	 * @param responseEntity, +	 *            The response from the social network provider, +	 * , +	 * @return the exception translated from the response or <code>null</code>, +	 *         if the response doesn't translate into an error., +	 */, +	SocialException translate(ResponseEntity<?> responseEntity);, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * , + * , +	private static final long serialVersionUID = 1L;, +++ b/build.gradle]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookConnectionFactory.java, +/**, + * Facebook ConnectionFactory implementation., + * @author Keith Donald, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookConnectionFactory.java, +/**, + * Facebook ConnectionFactory implementation., + * @author Keith Donald, + */, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/connect/FacebookApiAdapterTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.connect;, +, +import static org.junit.Assert.*;, +, +import org.junit.Test;, +import org.mockito.Mockito;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.FacebookProfile;, +import org.springframework.social.facebook.api.UserOperations;, +, +public class FacebookApiAdapterTest {, +, +	private FacebookApiAdapter apiAdapter = new FacebookApiAdapter();, +	, +	private FacebookApi api = Mockito.mock(FacebookApi.class);, +	, +	@Test, +	public void fetchProfile() {		, +		UserOperations userOperations = Mockito.mock(UserOperations.class);, +		Mockito.when(api.userOperations()).thenReturn(userOperations);, +		Mockito.when(userOperations.getUserProfile()).thenReturn(new FacebookProfile("12345678", "habuma", "Craig Walls", "Craig", "Walls", null, null));, +		UserProfile profile = apiAdapter.fetchUserProfile(api);, +		assertEquals("Craig Walls", profile.getName());, +		assertEquals("Craig", profile.getFirstName());, +		assertEquals("Walls", profile.getLastName());, +		assertNull(profile.getEmail());, +		assertEquals("habuma", profile.getUsername());, +	}, +	, +}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookConnectionFactory.java, +/**, + * Facebook ConnectionFactory implementation., + * @author Keith Donald, + */, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/connect/FacebookApiAdapterTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.connect;, +, +import static org.junit.Assert.*;, +, +import org.junit.Test;, +import org.mockito.Mockito;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.FacebookProfile;, +import org.springframework.social.facebook.api.UserOperations;, +, +public class FacebookApiAdapterTest {, +, +	private FacebookApiAdapter apiAdapter = new FacebookApiAdapter();, +	, +	private FacebookApi api = Mockito.mock(FacebookApi.class);, +	, +	@Test, +	public void fetchProfile() {		, +		UserOperations userOperations = Mockito.mock(UserOperations.class);, +		Mockito.when(api.userOperations()).thenReturn(userOperations);, +		Mockito.when(userOperations.getUserProfile()).thenReturn(new FacebookProfile("12345678", "habuma", "Craig Walls", "Craig", "Walls", null, null));]
[+++ b/src/main/java/org/springframework/social/facebook/FacebookClientRequestSigner.java, +package org.springframework.social.facebook;, +, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.oauth.AccessToken;, +import org.springframework.social.oauth.AccessTokenServices;, +import org.springframework.social.oauth2.OAuth2ParameterClientRequestSigner;, +, +// TODO: There's nothing really Facebook-specific about this. Need to figure out where it should go, +public class FacebookClientRequestSigner extends OAuth2ParameterClientRequestSigner {, +	private final AccessTokenServices accessTokenServices;, +	private String providerId;, +, +	public FacebookClientRequestSigner(AccessTokenServices accessTokenServices, String providerId) {, +		this.accessTokenServices = accessTokenServices;, +		this.providerId = providerId;, +		this.setParameterName("access_token");, +	}, +, +	protected AccessToken resolveAccessToken() {, +		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +		if (authentication == null) {, +			throw new AuthenticationCredentialsNotFoundException("No credentials found");, +		}, +, +		return accessTokenServices.getToken(providerId, authentication.getPrincipal());, +	}, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookClientRequestSigner.java, +package org.springframework.social.facebook;, +, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.oauth.AccessToken;, +import org.springframework.social.oauth.AccessTokenServices;, +import org.springframework.social.oauth2.OAuth2ParameterClientRequestSigner;, +, +// TODO: There's nothing really Facebook-specific about this. Need to figure out where it should go, +public class FacebookClientRequestSigner extends OAuth2ParameterClientRequestSigner {, +	private final AccessTokenServices accessTokenServices;, +	private String providerId;, +, +	public FacebookClientRequestSigner(AccessTokenServices accessTokenServices, String providerId) {, +		this.accessTokenServices = accessTokenServices;, +		this.providerId = providerId;, +		this.setParameterName("access_token");, +	}, +, +	protected AccessToken resolveAccessToken() {, +		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +		if (authentication == null) {, +			throw new AuthenticationCredentialsNotFoundException("No credentials found");, +		}, +, +		return accessTokenServices.getToken(providerId, authentication.getPrincipal());, +	}, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookOAuthEnabledRestTemplateFactory.java, +package org.springframework.social.facebook;, +, +import org.springframework.social.oauth.OAuthClientRequestSigner;, +import org.springframework.social.oauth.OAuthEnabledRestTemplateFactory;, +, +public class FacebookOAuthEnabledRestTemplateFactory extends OAuthEnabledRestTemplateFactory {, +	protected OAuthClientRequestSigner getRequestSigner() {, +		return new FacebookClientRequestSigner(getAccessTokenServices(), "Facebook");, +	}, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookClientRequestSigner.java, +package org.springframework.social.facebook;, +, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.oauth.AccessToken;, +import org.springframework.social.oauth.AccessTokenServices;, +import org.springframework.social.oauth2.OAuth2ParameterClientRequestSigner;, +, +// TODO: There's nothing really Facebook-specific about this. Need to figure out where it should go, +public class FacebookClientRequestSigner extends OAuth2ParameterClientRequestSigner {, +	private final AccessTokenServices accessTokenServices;, +	private String providerId;, +, +	public FacebookClientRequestSigner(AccessTokenServices accessTokenServices, String providerId) {, +		this.accessTokenServices = accessTokenServices;, +		this.providerId = providerId;, +		this.setParameterName("access_token");, +	}, +, +	protected AccessToken resolveAccessToken() {, +		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +		if (authentication == null) {, +			throw new AuthenticationCredentialsNotFoundException("No credentials found");, +		}, +, +		return accessTokenServices.getToken(providerId, authentication.getPrincipal());, +	}]
[+++ b/docs/src/reference/docbook/apis.xml, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TwitterApi</interfacename>:, +Connection<TwitterApi> connection = connectionRepository.findPrimaryConnectionToApi(TwitterApi.class);, +TwitterApi twitterApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Twitter., +			From that connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>FacebookApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>FacebookApi</interfacename>:, +Connection<FacebookApi> connection = connectionRepository.findPrimaryConnectionToApi(FacebookApi.class);, +FacebookApi facebookApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Facebook., +			From that connection, it retrieves a <interfacename>FacebookApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>LinkedInApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>LinkedInApi</interfacename>:, +Connection<LinkedInApi> connection = connectionRepository.findPrimaryConnectionToApi(LinkedInApi.class);, +LinkedInApi linkedinApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with LinkedIn., +			From that connection, it retrieves a <interfacename>LinkedInApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TripItApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TripItApi</interfacename>:, +Connection<TripItApi> connection = connectionRepository.findPrimaryConnectionToApi(TripItApi.class);, +TripItApi tripitApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with TripIt., +			From that connection, it retrieves a <interfacename>TripItApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GitHubApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GitHubApi</interfacename>:, +Connection<GitHubApi> connection = connectionRepository.findPrimaryConnectionToApi(GitHubApi.class);, +GitHubApi githubApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with GitHub., +			From that connection, it retrieves a <interfacename>GitHubApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GowallaApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GowallaApi</interfacename>:, +Connection<GowallaApi> connection = connectionRepository.findPrimaryConnectionToApi(GowallaApi.class);, +GowallaApi gowallaApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Gowalla., +			From that connection, it retrieves a <interfacename>GowallaApi</interfacename> instance that is configured with the connection details received when the connection was first established., +++ b/docs/src/reference/docbook/apis.xml, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TwitterApi</interfacename>:, +Connection<TwitterApi> connection = connectionRepository.findPrimaryConnectionToApi(TwitterApi.class);, +TwitterApi twitterApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Twitter., +			From that connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>FacebookApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>FacebookApi</interfacename>:, +Connection<FacebookApi> connection = connectionRepository.findPrimaryConnectionToApi(FacebookApi.class);, +FacebookApi facebookApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Facebook., +			From that connection, it retrieves a <interfacename>FacebookApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>LinkedInApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>LinkedInApi</interfacename>:, +Connection<LinkedInApi> connection = connectionRepository.findPrimaryConnectionToApi(LinkedInApi.class);, +LinkedInApi linkedinApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with LinkedIn., +			From that connection, it retrieves a <interfacename>LinkedInApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TripItApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TripItApi</interfacename>:, +Connection<TripItApi> connection = connectionRepository.findPrimaryConnectionToApi(TripItApi.class);, +TripItApi tripitApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with TripIt., +			From that connection, it retrieves a <interfacename>TripItApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GitHubApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GitHubApi</interfacename>:, +Connection<GitHubApi> connection = connectionRepository.findPrimaryConnectionToApi(GitHubApi.class);, +GitHubApi githubApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with GitHub., +			From that connection, it retrieves a <interfacename>GitHubApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GowallaApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GowallaApi</interfacename>:, +Connection<GowallaApi> connection = connectionRepository.findPrimaryConnectionToApi(GowallaApi.class);, +GowallaApi gowallaApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Gowalla., +			From that connection, it retrieves a <interfacename>GowallaApi</interfacename> instance that is configured with the connection details received when the connection was first established., +++ b/docs/src/reference/docbook/connecting.xml, +			<classname>ConnectController</classname> works with one or more <interfacename>ConnectionFactory</interfacename>s to exchange authorization details with the provider and to create connections., +			Once a connection has been established, <classname>ConnectController</classname> hands it off to a <interfacename>ConnectionRepository</interfacename> to be persisted. , +			Spring Social comes with an implementation of <interfacename>ConnectionFactory</interfacename> for each of the supported service providers:, +			<listitem><para><classname>TwitterConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>FacebookConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>LinkedInConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>TripItConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>GitHubConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>GowallaConnectionFactory</classname></para></listitem>, +			<classname>ConnectController</classname> relies on an implementation of <interfacename>ConnectionFactoryLocator</interfacename> (see <xref linkend="service-providers-establishing-connections-connection-factory-registry"/>) to help it find a connection factory for a specific provider., +			Spring Social's <classname>ConnectionFactoryRegistry</classname> is an implementation of <interfacename>ConnectionFactoryLocator</interfacename> that keeps a Map-based registry of connection factories., +			The following configuration class registers a <classname>ConnectionFactoryRegistry</classname> with <interfacename>ConnectionFactory</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style: 		, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +import org.springframework.social.facebook.connect.FacebookConnectionFactory;, +import org.springframework.social.tripit.connect.TripItConnectionFactory;, +import org.springframework.social.twitter.connect.TwitterConnectionFactory;, +public class ConnectionFactoryLocatorConfig {, +    public ConnectionFactoryLocator connectionFactoryLocator() {, +        ConnectionFactoryRegistry registry = new ConnectionFactoryRegistry();, +        registry.addConnectionFactory(new TwitterConnectionFactory(twitterConsumerKey, twitterConsumerSecret));, +        registry.addConnectionFactory(new FacebookConnectionFactory(facebookClientId, facebookClientSecret));, +        registry.addConnectionFactory(new TripItConnectionFactory(tripItConsumerKey, tripItConsumerSecret));, +			Three connection factories--one each for Twitter, Facebook, and TripIt--are registered with <classname>ConnectionFactoryRegistry</classname> via the <methodname>addConnectionFactory()</methodname> method. ]
[+++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oAuth2Template.getRestTemplate());, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oAuth2Template.getRestTemplate());, +++ b/spring-social-tripit/src/test/java/org/springframework/social/tripit/profile.json, +{, +	"Profile" : {, +		"screen_name" : "habuma",, +		"public_display_name" : "Craig Walls",, +		"home_city" : "Plano, TX",, +		"company" : "SpringSource",, +		"profile_url" : "user/habuma",, +		"@attributes" : {, +			"ref" : "123456", +		}, +	}, , +	"timestamp" : 123456780, +}, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oAuth2Template.getRestTemplate());, +++ b/spring-social-tripit/src/test/java/org/springframework/social/tripit/profile.json, +{, +	"Profile" : {, +		"screen_name" : "habuma",, +		"public_display_name" : "Craig Walls",, +		"home_city" : "Plano, TX",, +		"company" : "SpringSource",, +		"profile_url" : "user/habuma",, +		"@attributes" : {, +			"ref" : "123456", +		}, +	}, , +	"timestamp" : 123456780, +}, +++ b/spring-social-tripit/src/test/java/org/springframework/social/tripit/trips.json, +, +{, +    "timestamp":"1297111165",, +    "num_bytes":"8462",, +    "Trip":, +    [, +        {, +            "id":"12736853",, +            "relative_url":"\/trip\/show\/id\/12736853",, +            "start_date":"2011-03-04",, +            "end_date":"2011-03-05",, +            "display_name":"Minneapolis, MN, March 2011",, +            "image_url":"http:\/\/www.tripit.com\/images\/places\/general.jpg",, +            "is_private":"false",, +            "primary_location":"Minneapolis, MN", +        },, +        {, +            "id":"12400396",, +            "relative_url":"\/trip\/show\/id\/12400396",, +            "start_date":"2011-02-25",, +            "end_date":"2011-02-27",, +            "display_name":"Madison, WI, February 2011",, +            "image_url":"http:\/\/www.tripit.com\/images\/places\/general.jpg",, +            "is_private":"false",, +            "primary_location":"Madison, WI", +        }, +    ], +}, +, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oAuth2Template.getRestTemplate());, +++ b/spring-social-tripit/src/test/java/org/springframework/social/tripit/profile.json, +{, +	"Profile" : {, +		"screen_name" : "habuma",, +		"public_display_name" : "Craig Walls",, +		"home_city" : "Plano, TX",, +		"company" : "SpringSource",, +		"profile_url" : "user/habuma",, +		"@attributes" : {, +			"ref" : "123456", +		}, +	}, , +	"timestamp" : 123456780, +}, +++ b/spring-social-tripit/src/test/java/org/springframework/social/tripit/trips.json, +, +{, +    "timestamp":"1297111165",, +    "num_bytes":"8462",, +    "Trip":, +    [, +        {, +            "id":"12736853",, +            "relative_url":"\/trip\/show\/id\/12736853",, +            "start_date":"2011-03-04",, +            "end_date":"2011-03-05",, +            "display_name":"Minneapolis, MN, March 2011",, +            "image_url":"http:\/\/www.tripit.com\/images\/places\/general.jpg",, +            "is_private":"false",, +            "primary_location":"Minneapolis, MN", +        },, +        {, +            "id":"12400396",, +            "relative_url":"\/trip\/show\/id\/12400396",]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	private static Method setInterceptorsMethod;, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	private static Method setInterceptorsMethod;, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +	private static Method setInterceptorsMethod;, +]
[+++ b/build.gradle, +      springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', +        testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/build.gradle, +      springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', +        testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, +		MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.POST.name(), "/status/update");, +		request.setRemoteHost("api.someprovider.com");, +		request.setSecure(true);, +		request.setContentType(MediaType.APPLICATION_FORM_URLENCODED.toString());, +		interceptor.intercept(new ServletServerHttpRequest(request), body, execution);, +++ b/build.gradle, +      springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', +        testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, +		MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.POST.name(), "/status/update");, +		request.setRemoteHost("api.someprovider.com");, +		request.setSecure(true);, +		request.setContentType(MediaType.APPLICATION_FORM_URLENCODED.toString());, +		interceptor.intercept(new ServletServerHttpRequest(request), body, execution);, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.RequestMatchers.*;, +import static org.springframework.test.web.client.response.ResponseCreators.*;, +++ b/build.gradle, +      springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', +        testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, +		MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.POST.name(), "/status/update");, +		request.setRemoteHost("api.someprovider.com");, +		request.setSecure(true);, +		request.setContentType(MediaType.APPLICATION_FORM_URLENCODED.toString());, +		interceptor.intercept(new ServletServerHttpRequest(request), body, execution);, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.RequestMatchers.*;, +import static org.springframework.test.web.client.response.ResponseCreators.*;, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, +		MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.POST.name(), "https://api.someprovider.com/status/update");, +		request.setContentType(MediaType.APPLICATION_FORM_URLENCODED.toString());, +		interceptor.intercept(new ServletServerHttpRequest(request), body, execution);, +++ b/build.gradle, +      springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', +        testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, +		MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.POST.name(), "/status/update");, +		request.setRemoteHost("api.someprovider.com");, +		request.setSecure(true);, +		request.setContentType(MediaType.APPLICATION_FORM_URLENCODED.toString());, +		interceptor.intercept(new ServletServerHttpRequest(request), body, execution);, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.RequestMatchers.*;, +import static org.springframework.test.web.client.response.ResponseCreators.*;, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, +		MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.POST.name(), "https://api.someprovider.com/status/update");, +		request.setContentType(MediaType.APPLICATION_FORM_URLENCODED.toString());, +		interceptor.intercept(new ServletServerHttpRequest(request), body, execution);, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.test.web.client.match.RequestMatchers.*;, +import static org.springframework.test.web.client.response.ResponseCreators.*;]
[+++ b/build.gradle, +        gradleVersion = '1.4', +++ b/build.gradle, +        gradleVersion = '1.4', +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Feb 02 21:27:50 CST 2013, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.4-bin.zip]
[+++ b/docs/src/reference/docbook/connecting.xml, +        , +        , +            , +    <p>, +      Spring Social Showcase is connected to your Twitter account., +      Click the button if you wish to disconnect., +    </p>, +    void preConnect(ConnectionFactory<A> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +			Custom authorization parameters may be added to the provided parameter map., +    public void preConnect(ConnectionFactory<TwitterApi> provider, MultiValueMap<String, String> parameters, WebRequest request) {, +++ b/docs/src/reference/docbook/connecting.xml, +        , +        , +            , +    <p>, +      Spring Social Showcase is connected to your Twitter account., +      Click the button if you wish to disconnect., +    </p>, +    void preConnect(ConnectionFactory<A> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +			Custom authorization parameters may be added to the provided parameter map., +    public void preConnect(ConnectionFactory<TwitterApi> provider, MultiValueMap<String, String> parameters, WebRequest request) {, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/connecting.xml, +        , +        , +            , +    <p>, +      Spring Social Showcase is connected to your Twitter account., +      Click the button if you wish to disconnect., +    </p>, +    void preConnect(ConnectionFactory<A> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +			Custom authorization parameters may be added to the provided parameter map., +    public void preConnect(ConnectionFactory<TwitterApi> provider, MultiValueMap<String, String> parameters, WebRequest request) {, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/signin.xml, +    , +            , +            ]
[+++ b/pom.xml, +		<java-version>1.5</java-version>, +++ b/pom.xml, +		<java-version>1.5</java-version>, +++ b/src/main/java/org/springframework/social/twitter/TwitterTemplate.java, +		ResponseEntity<Map> response = restOperations.postForEntity(TWEET_URL, tweetParams, Map.class);]
[+++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>]
[+++ b/.gitignore, +src/test/java/exploration, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, +    scribeVersion = '1.0.8', +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null]
[+++ b/README.md, +[Javadoc]: http://docs.spring.io/spring-social/docs/current/apidocs/, +[reference docs]: http://docs.spring.io/spring-social/docs/current-SNAPSHOT/reference/htmlsingle/, +++ b/README.md, +[Javadoc]: http://docs.spring.io/spring-social/docs/current/apidocs/, +[reference docs]: http://docs.spring.io/spring-social/docs/current-SNAPSHOT/reference/htmlsingle/, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + *        .apply(new SpringSocialHttpConfigurer());, +	 * Constructs a SpringSocialHttpConfigurer.]
[+++ b/build.gradle, +      testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, +      testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +			parserContext.registerBeanComponent(new BeanComponentDefinition(connFactoryLocatorBeanDef, CONNECTION_FACTORY_LOCATOR_ID));, +++ b/build.gradle, +      testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +			parserContext.registerBeanComponent(new BeanComponentDefinition(connFactoryLocatorBeanDef, CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, +	private static final String CREATE_CONNECTION_REPOSITORY = "createConnectionRepository";, +	private static final String USERS_CONNECTION_REPOSITORY_ID = "usersConnectionRepository";, +	private static final String CONNECTION_REPOSITORY_ID = "connectionRepository";, +	private static final String USER_ID_STRING_ID = "_userIdString";, +	, +	public BeanDefinition parse(Element element, ParserContext parserContext) {		, +		String connectionFactoryLocatorRef = element.getAttribute("connection-factory-locator-ref");, +		String dataSourceRef = element.getAttribute("data-source-ref");, +		String encryptorRef = element.getAttribute("encryptor-ref");, +		String userIdSourceRef = element.getAttribute("user-id-source-ref");, +		, +		BeanDefinition usersConnectionRepositoryBD = registerUsersConnectionRepositoryBeanDefinition(parserContext, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		registerUserIdBeanDefinition(parserContext, userIdSourceRef);, +		BeanDefinition connectionRepositoryDB = registerConnectionRepository(parserContext, usersConnectionRepositoryBD);, +, +		return connectionRepositoryDB;, +	}, +, +	private BeanDefinition registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(dataSourceRef), +				.addConstructorArgReference(connectionFactoryLocatorRef), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +		parserContext.registerBeanComponent(new BeanComponentDefinition(usersConnectionRepositoryBD, USERS_CONNECTION_REPOSITORY_ID));, +		return usersConnectionRepositoryBD;, +	}, +	, +	// TODO: Kinda hackish...pushes a request-scoped String containing the name retrieved from the UserIdSource into the context., +	private BeanDefinition registerUserIdBeanDefinition(ParserContext parserContext, String userIdSourceRef) {, +		BeanDefinition userIdStringDB = BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();, +		userIdStringDB.setFactoryBeanName(userIdSourceRef);, +		userIdStringDB.setFactoryMethodName("getUserId");, +		userIdStringDB.setScope("request");, +		parserContext.registerBeanComponent(new BeanComponentDefinition(userIdStringDB, USER_ID_STRING_ID));, +		return userIdStringDB;, +	}, +	, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, BeanDefinition usersConnectionRepositoryBD) {, +		BeanDefinition connectionRepositoryDB = BeanDefinitionBuilder.genericBeanDefinition().addConstructorArgValue(USER_ID_STRING_ID).getBeanDefinition();, +		connectionRepositoryDB.setFactoryBeanName(USERS_CONNECTION_REPOSITORY_ID);, +		connectionRepositoryDB.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY);, +		connectionRepositoryDB.setScope("request");, +		// TODO: Set scoped proxy on this somehow, +		parserContext.registerBeanComponent(new BeanComponentDefinition(connectionRepositoryDB, CONNECTION_REPOSITORY_ID));, +		return connectionRepositoryDB;, +++ b/build.gradle, +      testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +			parserContext.registerBeanComponent(new BeanComponentDefinition(connFactoryLocatorBeanDef, CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, +	private static final String CREATE_CONNECTION_REPOSITORY = "createConnectionRepository";, +	private static final String USERS_CONNECTION_REPOSITORY_ID = "usersConnectionRepository";, +	private static final String CONNECTION_REPOSITORY_ID = "connectionRepository";, +	private static final String USER_ID_STRING_ID = "_userIdString";, +	, +	public BeanDefinition parse(Element element, ParserContext parserContext) {		, +		String connectionFactoryLocatorRef = element.getAttribute("connection-factory-locator-ref");, +		String dataSourceRef = element.getAttribute("data-source-ref");, +		String encryptorRef = element.getAttribute("encryptor-ref");, +		String userIdSourceRef = element.getAttribute("user-id-source-ref");, +		, +		BeanDefinition usersConnectionRepositoryBD = registerUsersConnectionRepositoryBeanDefinition(parserContext, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		registerUserIdBeanDefinition(parserContext, userIdSourceRef);, +		BeanDefinition connectionRepositoryDB = registerConnectionRepository(parserContext, usersConnectionRepositoryBD);, +, +		return connectionRepositoryDB;, +	}, +, +	private BeanDefinition registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(dataSourceRef), +				.addConstructorArgReference(connectionFactoryLocatorRef), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +		parserContext.registerBeanComponent(new BeanComponentDefinition(usersConnectionRepositoryBD, USERS_CONNECTION_REPOSITORY_ID));, +		return usersConnectionRepositoryBD;, +	}, +	]
[+++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +        maven { url "http://repo.spring.io/libs-milestone" }, +        gradleVersion = "3.0", +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +        maven { url "http://repo.spring.io/libs-milestone" }, +        gradleVersion = "3.0", +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=5.0.0.M2, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +        maven { url "http://repo.spring.io/libs-milestone" }, +        gradleVersion = "3.0", +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=5.0.0.M2, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +        maven { url "http://repo.spring.io/libs-milestone" }, +        gradleVersion = "3.0", +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=5.0.0.M2, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Oct 10 15:05:41 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.0-bin.zip, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +        maven { url "http://repo.spring.io/libs-milestone" }, +        gradleVersion = "3.0", +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=5.0.0.M2, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Oct 10 15:05:41 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.0-bin.zip, +++ b/gradlew, +cd "`dirname \"$PRG\"`/" >/dev/null, +cd "$SAVED" >/dev/null, +    JAVACMD=`cygpath --unix "$JAVACMD"`, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), +        classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +        maven { url "http://repo.spring.io/libs-milestone" }, +        gradleVersion = "3.0", +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=5.0.0.M2, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Oct 10 15:05:41 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.0-bin.zip, +++ b/gradlew, +cd "`dirname \"$PRG\"`/" >/dev/null, +cd "$SAVED" >/dev/null, +    JAVACMD=`cygpath --unix "$JAVACMD"`, +++ b/gradlew.bat, +@rem Get command-line arguments, handling Windows variants, +++ b/build.gradle, +        classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE')]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		StringBuilder authorizeUrl = new StringBuilder(oauthUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));]
[+++ b/docs/src/reference/docbook/signin.xml, +			Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., +	</section>, +, +	<section xml:id="signin_using">, +		<title>Enabling provider signin</title>, +			The <classname>ProviderSignInController</classname> bean only requires a single <code><![CDATA[<constructor-arg>]]></code> to specify the application's base URL., +			<classname>ProviderSignInController</classname> will use this URL to construct the callback URL used in the authentication flow., +			When authenticating via an OAuth 1 provider, <classname>ProviderSignInController</classname> supports the following flow:, +		<section>, +			<title>ProviderSignInController's dependencies</title>, +		, +				As shown above, <classname>ProviderSignInController</classname> can be configured as a Spring bean given only a single constructor argument., +				Nevertheless, <classname>ProviderSignInController</classname> depends on a handful of other beans to do its job., +			</para>, +			, +			<itemizedlist>, +				<listitem><para>A <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> to lookup a connection factory used to perform the authentication process with the provider.</para></listitem>, +				<listitem><para>A <interfacename>MultiUserServiceProviderConnectionRepository</interfacename> to find a user whose connection matches the signin connection.</para></listitem>, +				<listitem><para>A <interfacename>ServiceProviderConnectionRepository</interfacename> used to create a new connection when the user signs up in the application after a failed provider signin.</para></listitem>, +				<listitem><para>A <interfacename>SignInService</interfacename> to sign the user into the application if a matching connection is found.</para></listitem>, +			</itemizedlist>, +			, +			, +			<para>, +				Because <classname>ProviderSignInController</classname>'s constructor is annotated with <code>@Inject</code>, those dependencies will be given to <classname>ProviderSignInController</classname> via autowiring., +				You'll still need to make sure they're available as beans in the Spring application context so that they can be autowired., +			</para>, +			, +			<para>, +				You should have already configured most of these dependencies when setting up connection support (in the previous chapter)., +				The <interfacename>SignInService</interfacename> is exclusively used for provider signin and so a <interfacename>SignInService</interfacename> bean will need to be added to the configuration., +				But first, you'll need to write an implementation of the <interfacename>SignInService</interfacename> interface., +			</para>, +, +			<para>, +				The <interfacename>SignInService</interfacename> interface is defined as follows:, +				The <methodname>signIn()</methodname> method takes a single argument which is the local application user's user ID normalized as a <classname>String</classname>., +				No other credentials are necessary here because by the time this method is called the user will have signed into the provider and their connection with that provider has been used to prove the user's identity., +				Implementations of this interface should use this user ID to authenticate the user to the application. , +			</para>, +, +			<para>, +				For example, suppose that an application's security is based Spring Security and simply uses a user's account ID as their principal. , +public class SpringSecuritySignInService implements SignInService {, +				Once you've written a <interfacename>SignInService</interfacename> implementation, it must be configured as a bean in the Spring context:, +			</para>, +, +			<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.showcase.signin.SpringSecuritySignInService" />, +]]>, +			</programlisting>, +		</section>, +		, +		<section>, +			<title>Adding a provider signin button</title>, +			<para>, +				With <classname>ProviderSignInController</classname> and a <interfacename>SignInService</interfacename> configured, the backend support for provider signin is in place., +	   		</para>, +	   		, +	   		<para>, +	      		For example, the following HTML snippet adds a "Signin with Twitter" button to a page:, +    <button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" />, +    </button>, +				Notice that the path used in the form's <code>action</code> attribute maps to the first step in <classname>ProviderSignInController</classname>'s flow., +				In this case, the provider is identified as "twitter"., +			</para>, +			, +			<para>, +	</section>, +		<para>, +			If <classname>ProviderSignInController</classname> can't find a connection that matches the one obtained after signing into the provider, it will put the signin on hold and redirect the user to an application signup page., +			By default, the signup URL is "/signup", relative to the application root. , +			You can override that default by setting the <code>signupUrl</code> property on the controller. , +			For example, the following configuration of <classname>ProviderSignInController</classname> sets the signup URL to "/newUser": , +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +    <property name="signupUrl" value="/newUser" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +			Before redirecting to the signup page, <classname>ProviderSignInController</classname> collects some information about the authentication attempt., +			This information can be used to prepopulate the signup form and then, after successful registration, to establish a connection between the new account and the provider account.			, +		</para>, +		, +		<para>, +			To prepopulate the signup form, you can fetch the user profile data from a connection retrieved from <methodname>ProviderSignInUtils.getConnection()</methodname>., +			For example, consider this Spring MVC controller method that setups up the signup form with a <classname>SignupForm</classname> to bind to the signup form:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +@RequestMapping(value="/signup", method=RequestMethod.GET), +public SignupForm signupForm(WebRequest request) {, +    ServiceProviderConnection<?> connection = ProviderSignInUtils.getConnection(request);, +    if (connection != null) {, +        return SignupForm.fromProviderUser(connection.fetchUserProfile());]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +/**, + * A data access interface for managing a global store of LocalUser-to-ServiceProviderUser Connections., + * Provides data access operations that apply across multiple local user records., + * Also acts as a factory for a local-user-specific {@link ServiceProviderConnectionRepository}., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository, + */, +	/**, +	 * Find the id of the <i>single</i> local user who has a {@link ServiceProviderConnection} with the given key., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign the local application user in using his or her provider account., +	 * Returns null if there is not exactly one local user connected to the provider user., +	 * @param connectionKey the key identifying a provider user, +	 */, +	/**, +	 * Find the ids of the local users who are connected to the specific provider user accounts., +	 * @param providerId the provider id, e.g. "facebook", +	 * @param providerUserIds the set of provider user ids e.g. ("125600", "131345", "54321")., +	 * @return the set of local user ids connected to those service provider users, or empty if none., +	 */, +	Set<String> findLocalUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +	/**, +	 * Create a single-user {@link ServiceProviderConnectionRepository} instance for the local user assigned the given id., +	 * @param localUserId the id of the local user account., +	 * @return the ServiceProviderConnectionRepository, exposing a number of operations for accessing and updating the given local user's provider connections., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +	/**, +	 * The connection key that already exists., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +/**, + * A data access interface for managing a global store of LocalUser-to-ServiceProviderUser Connections., + * Provides data access operations that apply across multiple local user records., + * Also acts as a factory for a local-user-specific {@link ServiceProviderConnectionRepository}., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository, + */, +	/**, +	 * Find the id of the <i>single</i> local user who has a {@link ServiceProviderConnection} with the given key., +	 * Used to support the ProviderSignIn scenario where the user id returned is used to sign the local application user in using his or her provider account., +	 * Returns null if there is not exactly one local user connected to the provider user., +	 * @param connectionKey the key identifying a provider user, +	 */, +	/**, +	 * Find the ids of the local users who are connected to the specific provider user accounts., +	 * @param providerId the provider id, e.g. "facebook", +	 * @param providerUserIds the set of provider user ids e.g. ("125600", "131345", "54321")., +	 * @return the set of local user ids connected to those service provider users, or empty if none., +	 */, +	Set<String> findLocalUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +	/**, +	 * Create a single-user {@link ServiceProviderConnectionRepository} instance for the local user assigned the given id., +	 * @param localUserId the id of the local user account., +	 * @return the ServiceProviderConnectionRepository, exposing a number of operations for accessing and updating the given local user's provider connections., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to fetch a ServiceProviderConnection , + * and no such connection exists with the provided key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#findConnection(ServiceProviderConnectionKey), + */, +	/**, +	 * The invalid key value., +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.Arrays;, +import org.springframework.http.MediaType;, +		messageConverters.add(getFormMessageConverter());, +		messageConverters.add(getJsonMessageConverter());, +		messageConverters.add(getByteArrayMessageConverter());, +	 * Returns an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * By default, the message converter is set to use "UTF-8" character encoding., +	 * May be overridden to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	protected FormHttpMessageConverter getFormMessageConverter() {, +		FormHttpMessageConverter converter = new FormHttpMessageConverter();, +		converter.setCharset(Charset.forName("UTF-8"));, +		return converter;, +	}, +	, +	/**, +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * May be overridden to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 */, +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); , +	}, +	, +	/**, +	 * Returns a {@link ByteArrayHttpMessageConverter} to be used by the internal {@link RestTemplate} when consuming image or other binary resources., +	 * By default, the message converter supports "image/jpeg", "image/gif", and "image/png" media types., +	 * May be overridden to customize the message converter (for example, to set supported media types)., +	 */, +	protected ByteArrayHttpMessageConverter getByteArrayMessageConverter() {, +		ByteArrayHttpMessageConverter converter = new ByteArrayHttpMessageConverter();, +		converter.setSupportedMediaTypes(Arrays.asList(MediaType.IMAGE_JPEG, MediaType.IMAGE_GIF, MediaType.IMAGE_PNG));, +		return converter;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.Arrays;, +import org.springframework.http.MediaType;, +		messageConverters.add(getFormMessageConverter());, +		messageConverters.add(getJsonMessageConverter());, +		messageConverters.add(getByteArrayMessageConverter());, +	 * Returns an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * By default, the message converter is set to use "UTF-8" character encoding., +	 * May be overridden to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	protected FormHttpMessageConverter getFormMessageConverter() {, +		FormHttpMessageConverter converter = new FormHttpMessageConverter();, +		converter.setCharset(Charset.forName("UTF-8"));, +		return converter;, +	}, +	, +	/**, +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * May be overridden to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 */, +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); , +	}, +	, +	/**, +	 * Returns a {@link ByteArrayHttpMessageConverter} to be used by the internal {@link RestTemplate} when consuming image or other binary resources., +	 * By default, the message converter supports "image/jpeg", "image/gif", and "image/png" media types., +	 * May be overridden to customize the message converter (for example, to set supported media types)., +	 */, +	protected ByteArrayHttpMessageConverter getByteArrayMessageConverter() {, +		ByteArrayHttpMessageConverter converter = new ByteArrayHttpMessageConverter();, +		converter.setSupportedMediaTypes(Arrays.asList(MediaType.IMAGE_JPEG, MediaType.IMAGE_GIF, MediaType.IMAGE_PNG));, +		return converter;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import java.util.Arrays;, +import org.springframework.http.MediaType;, +		messageConverters.add(getFormMessageConverter());, +		messageConverters.add(getJsonMessageConverter());, +		messageConverters.add(getByteArrayMessageConverter());, +	 * Returns an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * By default, the message converter is set to use "UTF-8" character encoding., +	 * May be overridden to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	protected FormHttpMessageConverter getFormMessageConverter() {, +		FormHttpMessageConverter converter = new FormHttpMessageConverter();, +		converter.setCharset(Charset.forName("UTF-8"));, +		return converter;, +	}, +	, +	/**, +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * May be overridden to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 */, +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); , +	}, +	, +	/**, +	 * Returns a {@link ByteArrayHttpMessageConverter} to be used by the internal {@link RestTemplate} when consuming image or other binary resources., +	 * By default, the message converter supports "image/jpeg", "image/gif", and "image/png" media types., +	 * May be overridden to customize the message converter (for example, to set supported media types)., +	 */, +	protected ByteArrayHttpMessageConverter getByteArrayMessageConverter() {, +		ByteArrayHttpMessageConverter converter = new ByteArrayHttpMessageConverter();, +		converter.setSupportedMediaTypes(Arrays.asList(MediaType.IMAGE_JPEG, MediaType.IMAGE_GIF, MediaType.IMAGE_PNG));, +		return converter;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +package org.springframework.social.connect.mem;, +, +import java.util.Collections;, +import java.util.List;, +import java.util.Map.Entry;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.ConnectionKey;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.DuplicateConnectionException;, +import org.springframework.social.connect.NoSuchConnectionException;, +import org.springframework.social.connect.NotConnectedException;, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +class InMemoryConnectionRepository implements ConnectionRepository {, +, +	// <providerId, Connection<provider API>>, +	private MultiValueMap<String, Connection<?>> connections;, +		, +	private ConnectionFactoryLocator connectionFactoryLocator;, +, +	public InMemoryConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {, +		this.connectionFactoryLocator = connectionFactoryLocator;, +		this.connections = new LinkedMultiValueMap<String, Connection<?>>();, +	}, +	, +	public MultiValueMap<String, Connection<?>> findAllConnections() {, +		return connections;, +	}, +, +	public List<Connection<?>> findConnections(String providerId) {, +		List<Connection<?>> emptyConnectionList = Collections.emptyList();, +		return connections.containsKey(providerId) ? connections.get(providerId) : emptyConnectionList;, +	}, +, +	@SuppressWarnings("unchecked"), +	public <A> List<Connection<A>> findConnections(Class<A> apiType) {, +		List<?> providerConnections = findConnections(getProviderId(apiType));, +		return (List<Connection<A>>) providerConnections;, +	}, +, +	public MultiValueMap<String, Connection<?>> findConnectionsToUsers(MultiValueMap<String, String> providerUserIds) {, +		Assert.notEmpty(providerUserIds);, +		MultiValueMap<String, Connection<?>> connectionsToUsers = new LinkedMultiValueMap<String, Connection<?>>(providerUserIds.size());, +		for (Entry<String, List<String>> providerConnectionEntry : providerUserIds.entrySet()) {, +			String providerId = providerConnectionEntry.getKey();, +			List<String> userIds = providerConnectionEntry.getValue();, +			if (connections.containsKey(providerId)) {, +				List<Connection<?>> providerConnections = connections.get(providerId);, +				, +				for (Connection<?> connection : providerConnections) {, +					if (userIds.contains(connection.getKey().getProviderUserId())) {, +						connectionsToUsers.add(providerId, connection);, +					}, +				}, +			}, +		}, +		return connectionsToUsers;, +	}, +, +	public Connection<?> getConnection(ConnectionKey connectionKey) {, +		if (connections.containsKey(connectionKey.getProviderId())) {, +			List<Connection<?>> providerConnections = connections.get(connectionKey.getProviderId());, +			for (Connection<?> connection : providerConnections) {, +				if (connection.getKey().equals(connectionKey)) {, +					return connection;, +				}, +			}, +		}, +		throw new NoSuchConnectionException(connectionKey);, +	}, +, +	@SuppressWarnings("unchecked"), +	public <A> Connection<A> getConnection(Class<A> apiType, String providerUserId) {, +		return (Connection<A>) getConnection(new ConnectionKey(getProviderId(apiType), providerUserId));, +	}, +, +	public <A> Connection<A> getPrimaryConnection(Class<A> apiType) {, +		Connection<A> primaryConnection = findPrimaryConnection(apiType);, +		if (primaryConnection == null) {, +			throw new NotConnectedException(getProviderId(apiType));, +		}, +		return primaryConnection;, +	}, +, +	@SuppressWarnings("unchecked"), +	public <A> Connection<A> findPrimaryConnection(Class<A> apiType) {, +		String providerId = getProviderId(apiType);, +		if (connections.containsKey(providerId)) {, +			return (Connection<A>) connections.get(providerId).get(0);, +		}, +		throw new NotConnectedException(providerId);, +	}, +, +	public void addConnection(Connection<?> connection) {, +		try {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +	private final String providerId;, +	private final String providerUserId;, +	private final String displayName;, +	private final String profileUrl;, +	private final String imageUrl;, +	private final String accessToken;, +	private final String secret;, +	private final String refreshToken;, +	private final Long expireTime;, +	@Override, +	public int hashCode() {, +		final int prime = 31;, +		int result = 1;, +		result = prime * result, +				+ ((accessToken == null) ? 0 : accessToken.hashCode());, +		result = prime * result, +				+ ((displayName == null) ? 0 : displayName.hashCode());, +		result = prime * result, +				+ ((expireTime == null) ? 0 : expireTime.hashCode());, +		result = prime * result, +				+ ((imageUrl == null) ? 0 : imageUrl.hashCode());, +		result = prime * result, +				+ ((profileUrl == null) ? 0 : profileUrl.hashCode());, +		result = prime * result, +				+ ((providerId == null) ? 0 : providerId.hashCode());, +		result = prime * result, +				+ ((providerUserId == null) ? 0 : providerUserId.hashCode());, +		result = prime * result, +				+ ((refreshToken == null) ? 0 : refreshToken.hashCode());, +		result = prime * result + ((secret == null) ? 0 : secret.hashCode());, +		return result;, +	}, +, +	@Override, +	public boolean equals(Object obj) {, +		if (this == obj), +			return true;, +		if (obj == null), +			return false;, +		if (!(obj instanceof ConnectionData)), +			return false;, +		ConnectionData other = (ConnectionData) obj;, +		if (accessToken == null) {, +			if (other.accessToken != null), +				return false;, +		} else if (!accessToken.equals(other.accessToken)), +			return false;, +		if (displayName == null) {, +			if (other.displayName != null), +				return false;, +		} else if (!displayName.equals(other.displayName)), +			return false;, +		if (expireTime == null) {, +			if (other.expireTime != null), +				return false;, +		} else if (!expireTime.equals(other.expireTime)), +			return false;, +		if (imageUrl == null) {, +			if (other.imageUrl != null), +				return false;, +		} else if (!imageUrl.equals(other.imageUrl)), +			return false;, +		if (profileUrl == null) {, +			if (other.profileUrl != null), +				return false;, +		} else if (!profileUrl.equals(other.profileUrl)), +			return false;, +		if (providerId == null) {, +			if (other.providerId != null), +				return false;, +		} else if (!providerId.equals(other.providerId)), +			return false;, +		if (providerUserId == null) {, +			if (other.providerUserId != null), +				return false;, +		} else if (!providerUserId.equals(other.providerUserId)), +			return false;, +		if (refreshToken == null) {, +			if (other.refreshToken != null), +				return false;, +		} else if (!refreshToken.equals(other.refreshToken)), +			return false;, +		if (secret == null) {, +			if (other.secret != null), +				return false;, +		} else if (!secret.equals(other.secret)), +			return false;, +		return true;, +	}, +, +	@Override, +	public String toString() {, +		return "ConnectionData [providerId=" + providerId + ", providerUserId=", +				+ providerUserId + ", displayName=" + displayName, +				+ ", profileUrl=" + profileUrl + ", imageUrl=" + imageUrl, +				+ ", accessToken=" + accessToken + ", secret=" + secret, +				+ ", refreshToken=" + refreshToken + ", expireTime=", +				+ expireTime + "]";, +	}]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or , + * missing access token, for example)., + * , + * @author Craig Walls, + */, +public class BadCredentialsException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public BadCredentialsException(String message) {, +		super(message);, +	}, +, +	public BadCredentialsException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (For example, updating a Twitter user's status with a bad or ]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * @return the connections the user has to the provider, or an empty list if none, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the connections the user has to the provider of the API, or an empty list if none, +	 * @return the connection, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param connection the new connection to add to this repository, +	 * @param connection the existing connection to update in this repository, +	 * @param providerId the provider id e.g. 'facebook', +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * @return the connections the user has to the provider, or an empty list if none, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the connections the user has to the provider of the API, or an empty list if none, +	 * @return the connection, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param connection the new connection to add to this repository, +	 * @param connection the existing connection to update in this repository, +	 * @param providerId the provider id e.g. 'facebook', +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <A> Connection<A> findConnection(Class<A> apiType, String providerUserId) {, +		return (Connection<A>) findConnection(new ConnectionKey(providerId, providerUserId));, +	public <A> Connection<A> findPrimaryConnection(Class<A> apiType) {, +			return (Connection<A>) jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and rank = 1", connectionMapper, userId, providerId);, +	private <A> String getProviderId(Class<A> apiType) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * @return the connections the user has to the provider, or an empty list if none, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the connections the user has to the provider of the API, or an empty list if none, +	 * @return the connection, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param connection the new connection to add to this repository, +	 * @param connection the existing connection to update in this repository, +	 * @param providerId the provider id e.g. 'facebook', +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <A> Connection<A> findConnection(Class<A> apiType, String providerUserId) {, +		return (Connection<A>) findConnection(new ConnectionKey(providerId, providerUserId));, +	public <A> Connection<A> findPrimaryConnection(Class<A> apiType) {, +			return (Connection<A>) jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and rank = 1", connectionMapper, userId, providerId);, +	private <A> String getProviderId(Class<A> apiType) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +	public <A> ConnectionFactory<A> getConnectionFactory(Class<A> apiType) {, +		return (ConnectionFactory<A>) getConnectionFactory(providerId);]
[+++ b/build.gradle, +        compile project(':spring-social-client'), +project('spring-social-client') {, +    description = 'Spring Social Client', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +++ b/build.gradle, +        compile project(':spring-social-client'), +project('spring-social-client') {, +    description = 'Spring Social Client', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +++ b/samples/facebook-showcase-2/build.gradle, +	compile "org.springframework.social:spring-social-client:1.0.0.BUILD-SNAPSHOT", +++ b/build.gradle, +        compile project(':spring-social-client'), +project('spring-social-client') {, +    description = 'Spring Social Client', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +++ b/samples/facebook-showcase-2/build.gradle, +	compile "org.springframework.social:spring-social-client:1.0.0.BUILD-SNAPSHOT", +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.client.connect.AccountIdResolver;, +++ b/build.gradle, +        compile project(':spring-social-client'), +project('spring-social-client') {, +    description = 'Spring Social Client', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +++ b/samples/facebook-showcase-2/build.gradle, +	compile "org.springframework.social:spring-social-client:1.0.0.BUILD-SNAPSHOT", +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.client.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.client.connect.jdbc.JdbcServiceProviderFactory">, +++ b/build.gradle, +        compile project(':spring-social-client'), +project('spring-social-client') {, +    description = 'Spring Social Client', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +++ b/samples/facebook-showcase-2/build.gradle, +	compile "org.springframework.social:spring-social-client:1.0.0.BUILD-SNAPSHOT", +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.client.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.client.connect.jdbc.JdbcServiceProviderFactory">, +++ b/samples/facebook-showcase/build.gradle, +	compile "org.springframework.social:spring-social-client:1.0.0.BUILD-SNAPSHOT", +++ b/build.gradle, +        compile project(':spring-social-client'), +project('spring-social-client') {, +    description = 'Spring Social Client', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +++ b/samples/facebook-showcase-2/build.gradle, +	compile "org.springframework.social:spring-social-client:1.0.0.BUILD-SNAPSHOT", +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.client.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.client.connect.jdbc.JdbcServiceProviderFactory">, +++ b/samples/facebook-showcase/build.gradle, +	compile "org.springframework.social:spring-social-client:1.0.0.BUILD-SNAPSHOT"]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, +		restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, +		restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.LoggingErrorHandler;, +		restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, +		restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.LoggingErrorHandler;, +		restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/BufferingClientHttpResponse.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.util.StreamUtils;, +, +public class BufferingClientHttpResponse implements ClientHttpResponse {, +, +	private final ClientHttpResponse response;, +, +	private byte[] body;, +, +, +	BufferingClientHttpResponse(ClientHttpResponse response) {, +		this.response = response;, +	}, +, +, +	@Override, +	public HttpStatus getStatusCode() throws IOException {, +		return this.response.getStatusCode();, +	}, +, +	@Override, +	public int getRawStatusCode() throws IOException {, +		return this.response.getRawStatusCode();, +	}, +, +	@Override, +	public String getStatusText() throws IOException {, +		return this.response.getStatusText();, +	}, +, +	@Override, +	public HttpHeaders getHeaders() {, +		return this.response.getHeaders();, +	}, +, +	@Override, +	public InputStream getBody() throws IOException {, +		if (this.body == null) {, +			this.body = StreamUtils.copyToByteArray(this.response.getBody());, +		}, +		return new ByteArrayInputStream(this.body);, +	}, +, +	@Override, +	public void close() {, +		this.response.close();, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, +		restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.LoggingErrorHandler;, +		restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/BufferingClientHttpResponse.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]
[+++ b/gradle.properties, +h2Version=1.4.196, +springSecurityVersion=5.0.0.M5, +aspectjVersion=1.8.12, +springVersion=5.0.0.RELEASE, +jacksonVersion=2.9.2, +mockitoVersion=2.11.0, +thymeleaf3Version=3.0.8.RELEASE, +thymeleafSpring5Version=3.0.8.RELEASE, +++ b/gradle.properties, +h2Version=1.4.196, +springSecurityVersion=5.0.0.M5, +aspectjVersion=1.8.12, +springVersion=5.0.0.RELEASE, +jacksonVersion=2.9.2, +mockitoVersion=2.11.0, +thymeleaf3Version=3.0.8.RELEASE, +thymeleafSpring5Version=3.0.8.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		if (auth == null || !auth.isAuthenticated()) {]
[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +	public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +	, +	@Test, +	public void oauth1Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth1Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth1Provider", connections.get(0).getKey().getProviderId());, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +	public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +	, +	@Test, +	public void oauth1Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth1Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth1Provider", connections.get(0).getKey().getProviderId());, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +	public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +	, +	@Test, +	public void oauth1Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth1Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth1Provider", connections.get(0).getKey().getProviderId());, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ServiceProvider.java, +		this(consumerKey, consumerSecret, StubOAuth1Template.Behavior.NO_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +	public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +	, +	@Test, +	public void oauth1Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Exception indicating that the credentials used during an operation invocation have expired., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ExpiredCredentialsException extends NotAuthorizedException {, +, +	public ExpiredCredentialsException() {, +		super("The credentials have expired.");, +	}, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Exception indicating that the credentials used during an operation invocation have expired., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ExpiredCredentialsException extends NotAuthorizedException {, +, +	public ExpiredCredentialsException() {, +		super("The credentials have expired.");, +	}, +	, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Exception indicating that the credentials used during an operation invocation have expired., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ExpiredCredentialsException extends NotAuthorizedException {, +, +	public ExpiredCredentialsException() {, +		super("The credentials have expired.");, +	}, +	, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +public class InsufficientPermissionException extends OperationNotPermittedException {, +	public InsufficientPermissionException(String requiredPermission) {, +		super("The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.net.URLEncoder;, +		StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));, +			authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl));, +		return authorizeUrl.toString();, +	private String formEncode(String data) {, +			return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.net.URLEncoder;, +		StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));, +			authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl));, +		return authorizeUrl.toString();, +	private String formEncode(String data) {, +			return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.net.URLEncoder;, +		this.authorizeUrl = authorizeUrl + "?response_type=code&client_id=" + formEncode(clientId);, +		StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('&').append("redirect_uri").append('=').append(formEncode(redirectUri));, +			authorizeUrl.append('&').append("scope").append('=').append(formEncode(scope));, +			authorizeUrl.append('&').append("state").append('=').append(formEncode(state));	, +		return authorizeUrl.toString();, +	private String formEncode(String data) {, +			return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.net.URLEncoder;, +		StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));, +			authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl));, +		return authorizeUrl.toString();, +	private String formEncode(String data) {, +			return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.net.URLEncoder;, +		this.authorizeUrl = authorizeUrl + "?response_type=code&client_id=" + formEncode(clientId);, +		StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('&').append("redirect_uri").append('=').append(formEncode(redirectUri));, +			authorizeUrl.append('&').append("scope").append('=').append(formEncode(scope));, +			authorizeUrl.append('&').append("state").append('=').append(formEncode(state));	, +		return authorizeUrl.toString();, +	private String formEncode(String data) {, +			return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +		assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&callback_url=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.net.URLEncoder;, +		StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));, +			authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl));, +		return authorizeUrl.toString();, +	private String formEncode(String data) {, +			return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.net.URLEncoder;, +		this.authorizeUrl = authorizeUrl + "?response_type=code&client_id=" + formEncode(clientId);, +		StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('&').append("redirect_uri").append('=').append(formEncode(redirectUri));, +			authorizeUrl.append('&').append("scope").append('=').append(formEncode(scope));, +			authorizeUrl.append('&').append("state").append('=').append(formEncode(state));	, +		return authorizeUrl.toString();, +	private String formEncode(String data) {, +			return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +		assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&callback_url=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		String expected = "http://www.someprovider.com/oauth/authorize?response_type=code&client_id=client_id&redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fconnect%2Ffoo&scope=read%2Cwrite";, +		String expected = "http://www.someprovider.com/oauth/authorize?response_type=code&client_id=client_id&redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fconnect%2Ffoo";]
[+++ b/docs/src/reference/docbook/apis.xml, +			From a user's perspective, Twitter's function is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +			In contrast, Twitter's API is rather rich, enabling applications to interact with Twitter in ways that may not be obvious from the humble tweet box., +			Spring Social offers interaction with Twitter's service API through the <interfacename>TwitterApi</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>.			, +TwitterApi twitterApi = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitterApi = new TwitterTemplate();]]>, +			Attempting other operations, such as tweeting will fail with an <classname>IllegalStateException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on a <interfacename>ServiceProviderConnection</interfacename>. , +List<ServiceProviderConnection<TwitterApi>> connections = connectionRepository.finConnectionsToProvider("twitter");, +TwitterApi twitterApi = connections.get(0).getServiceApi();]]>, +			Here, <interfacename>ServiceProviderConnectionRepository</interfacename> is being asked for all of the connections that the current user has with Twitter., +			From the first connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection credentials received when the connection was established., +			Once you have a <interfacename>TwitterApi</interfacename>, you can perform a several operations against Twitter., +			<interfacename>TwitterApi</interfacename> is defined as follows:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +public interface TwitterApi {, +, +    boolean isAuthorizedForUser();, +, +    DirectMessageOperations directMessageOperations();, +	, +    FriendOperations friendOperations();, +, +    ListOperations listOperations();, +, +    SearchOperations searchOperations();, +, +    TimelineOperations timelineOperations();, +, +    UserOperations userOperations();, +, +}]]>, +		</programlisting>		, +		, +		<para>, +			The <methodname>isAuthorizedForUser</methodname> helps determine if the <interfacename>TwitterApi</interfacename> instance has been created with credentials to perform on behalf of a user., +			It will return true if it is capable of performing operations requiring authorization; false otherwise. 			, +		</para>, +		, +		<para>, +			The remaining six methods return sub-APIs, partitioning the Twitter service API into divisions targeting specific facets of Twitter functionality., +			These sub-APIs are defined by interfaces described in <xref linkend="table-twitter-sub-apis" />., +		</para>, +		, +		<table xml:id="table-twitter-sub-apis">, +			<title>TwitterApi's Sub-APIs</title>, +			<tgroup cols="2">, +				<colspec align="left" />, +				<colspec colnum="1" colname="col1" colwidth="2*"/>, +				<colspec colnum="2" colname="col2" colwidth="2*"/>, +				<thead>, +					<row>, +						<entry align="center">Sub-API Interface</entry>, +						<entry align="center">Description</entry>, +					</row>, +				</thead>, +				<tbody>, +					<row>, +						<entry>DirectMessageOperations</entry>, +						<entry>Reading and sending direct messages.</entry>, +					</row>, +					<row>, +						<entry>FriendOperations</entry>, +						<entry>Retrieving a user's list of friends and followers and following/unfollowing users.</entry>, +					</row>, +					<row>, +						<entry>ListOperations</entry>, +						<entry>Maintaining, subscribing to, and unsubscripting from user lists</entry>, +					</row>, +					<row>, +						<entry>SearchOperations</entry>, +						<entry>Searching tweets and viewing search trends</entry>, +					</row>, +					<row>, +						<entry>TimelineOperations</entry>, +						<entry>Reading timelines and posting tweets.</entry>, +					</row>, +					<row>, +						<entry>UserOperations</entry>, +						<entry>Retrieving user profile data.</entry>, +					</row>, +				</tbody>, +			</tgroup>, +		</table>, +		, +		<para>, +			What follows is a survey of common tasks you may perform with <interfacename>TwitterApi</interfacename> and its sub-APIs., +			For complete details on the Spring Social's entire Twitter API binding, refer to the JavaDoc., +				To get a user's Twitter profile, call <interfacename>UserOperations</interfacename>' <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitterApi.userOperations().getUserProfile();]]>, +TwitterProfile profile = twitterApi.userOperations().getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>UserOperations.getScreenName()</methodname>:, +String profileId = twitterApi.userOperations().getScreenName();]]>, +				To post a message to Twitter the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method provided by <interfacename>TimelineOperations</interfacename>:, +twitterApi.timelineOperations().updateStatus("Spring Social is awesome!")]]>, +twitterApi.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitterApi.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitterApi.timelineOperations().retweet(tweetId);]]>]
[+++ b/src/dist/changelog.txt, +Spring Social 1.1.4 Release (November 24, 2015), +===============================================, +New Features/Improvements, +   * Add subclassing hok to ProviderConfigurationSupport to, +     allow flexibility in construction of ApiHelper bean., +     (GitHub PR #113), +   * Add extension point in AbstractOAuth2Api to decorate RestTemplate in an API, +     binding. (GitHub PR #158), +   * Enable proxy user authentication with http.proxyUser, +     and http.proxyPassword. (GitHub PR #177), +   * Add support for app-provided `state` parameter., +     (GitHub PR #180), +   * Remove DataAccessException from throws clause of , +     SocialUserDetailsService#loadUserByUserId(). DataAccessException, +     is a RuntimeException, so this should not be a breaking change., +     (GitHub PR #173), +   * Add template method to allow for additional parameters when, +     doing OAuth 2 authorization. (GitHub PR #152, GitHub issue #151), +   * Add support for session strategy in SocialAuthenticationFilter., +     (GitHub PR #164), +   * Add ID field to UserProfile. (GitHub PR #168), +   * Add a session-based User ID source. (SOCIAL-468), +, +Bug fixes, +   * Revert some dependency changes from 1.1.3 to versions, +     that don't break backward compatibility. Specifically, +     Apache HttpComponents is now at version 4.3.6 and, +     Spring Security is now at version 3.2.9.RELEASE., +   * Fix broken links in README. (GitHub PR #182), +   * Reintroduced a constructor to UserProfile that does not, +     require the user ID in order to preserve backward compatibility., +     (GitHub PR #166), +   * Fix documentation concerning ProviderSignInUtils use of, +     non-static methods. (GitHub PR #171), +   * Fix documentation to reflect current state of DB schema., +     (GitHub PR #163), +, +Miscellaneous, +   * Default to latest Spring IO snapshot when running Spring IO checks., +, +, +, +Spring Social 1.1.3 Release (November 11, 2015), +===============================================, +Bug fixes, +   * Address CSRF issue when using `state` parameter, +     in OAuth 2 authorization flow. See https://pivotal.io/security/cve-2015-5258, +   * Update dependencies on HttpComponents and Spring Security., +, +Spring Social 1.1.2 Release (May 19, 2015), +===========================================, +Bug fixes, +   * Fixed dependency on Spring Framework 4.1.6.BUILD-SNAPSHOT , +     to depend on 4.1.6.RELEASE., +, +, +Spring Social 1.1.1 Release (May 15, 2015), +==========================================, +See https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10481&version=14658, +, +, +Spring Social 1.1.0 Release (April 24, 2014), +============================================, +See https://jira.spring.io/browse/SOCIAL/fixforversion/12740/?selectedTab=com.atlassian.jira.plugins.jira-development-integration-plugin:release-report-tabpanel, +, +]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/docs/src/reference/docbook/overview.xml, +              <entry>Spring Social's service provider framework and OAuth support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname>, which handles the OAuth process, establishing connections with social providers.</entry>, +              <entry>spring-social-linkedin</entry>, +              <entry>Includes Spring Social's LinkedIn API.</entry>, +            </row>, +            <row>, +            <row>, +              <entry>spring-social-twitter</entry>, +              <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, +            </row>, +	  <para>To let Spring Social handle the back-and-forth exchange between your application and a service required for OAuth authorization, you'll need the web module:</para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/overview.xml, +              <entry>Spring Social's service provider framework and OAuth support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname>, which handles the OAuth process, establishing connections with social providers.</entry>, +              <entry>spring-social-linkedin</entry>, +              <entry>Includes Spring Social's LinkedIn API.</entry>, +            </row>, +            <row>, +            <row>, +              <entry>spring-social-twitter</entry>, +              <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, +            </row>, +	  <para>To let Spring Social handle the back-and-forth exchange between your application and a service required for OAuth authorization, you'll need the web module:</para>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String beanId = element.getAttribute("id");, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/.gitignore, +++ b/docs/src/reference/docbook/overview.xml, +              <entry>Spring Social's service provider framework and OAuth support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname>, which handles the OAuth process, establishing connections with social providers.</entry>, +              <entry>spring-social-linkedin</entry>, +              <entry>Includes Spring Social's LinkedIn API.</entry>, +            </row>, +            <row>, +            <row>, +              <entry>spring-social-twitter</entry>, +              <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, +            </row>, +	  <para>To let Spring Social handle the back-and-forth exchange between your application and a service required for OAuth authorization, you'll need the web module:</para>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String beanId = element.getAttribute("id");, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="id" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation>, +						The bean ID, +					</xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/overview.xml, +              <entry>Spring Social's service provider framework and OAuth support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname>, which handles the OAuth process, establishing connections with social providers.</entry>, +              <entry>spring-social-linkedin</entry>, +              <entry>Includes Spring Social's LinkedIn API.</entry>, +            </row>, +            <row>, +            <row>, +              <entry>spring-social-twitter</entry>, +              <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, +            </row>, +	  <para>To let Spring Social handle the back-and-forth exchange between your application and a service required for OAuth authorization, you'll need the web module:</para>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String beanId = element.getAttribute("id");, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="id" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation>, +						The bean ID, +					</xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import static org.junit.Assert.*;, +, +		assertEquals("facebookServiceProvider", applicationContext.getBeanNamesForType(FacebookServiceProvider.class)[0]);, +++ b/.gitignore, +++ b/docs/src/reference/docbook/overview.xml, +              <entry>Spring Social's service provider framework and OAuth support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname>, which handles the OAuth process, establishing connections with social providers.</entry>, +              <entry>spring-social-linkedin</entry>, +              <entry>Includes Spring Social's LinkedIn API.</entry>, +            </row>, +            <row>, +            <row>]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +	private final UserRepository userRepository;, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders, UserRepository userRepository) {, +		this.userRepository = userRepository;, +, +		model.addAttribute("user", userRepository.findUserByUsername(user.getName()));, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * Construct the URL to redirect the user to for authorization via OAuth2's "Authorization Code Grant"., +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */ , +	String buildAuthorizeUrl(OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication via OAuth2's "Authorization Code Grant"., +	 * The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * This provides a better user experience for "Sign in with Provider" scenarios., +	 * @param parameters authorization parameters needed to build the URL , +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */ , +	String buildAuthenticateUrl(OAuth2Parameters parameters);, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * Construct the URL to redirect the user to for authorization via OAuth2's "Authorization Code Grant"., +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */ , +	String buildAuthorizeUrl(OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication via OAuth2's "Authorization Code Grant"., +	 * The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * This provides a better user experience for "Sign in with Provider" scenarios., +	 * @param parameters authorization parameters needed to build the URL , +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */ , +	String buildAuthenticateUrl(OAuth2Parameters parameters);, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(OAuth2Parameters parameters) {, +		return buildAuthUrl(authorizeUrl, GrantType.AUTHORIZATION_CODE, parameters);, +	}, +	, +	public String buildAuthenticateUrl(OAuth2Parameters parameters) {, +		return authenticateUrl != null ? buildAuthUrl(authenticateUrl, GrantType.AUTHORIZATION_CODE, parameters) : buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, parameters);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * Construct the URL to redirect the user to for authorization via OAuth2's "Authorization Code Grant"., +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */ , +	String buildAuthorizeUrl(OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication via OAuth2's "Authorization Code Grant"., +	 * The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * This provides a better user experience for "Sign in with Provider" scenarios., +	 * @param parameters authorization parameters needed to build the URL , +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */ , +	String buildAuthenticateUrl(OAuth2Parameters parameters);, +	, +	/**]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private boolean useParametersForClientAuthentication; , +	 * Assumes that the authorization URL is the same as the authentication URL., +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, +		if (!useParametersForClientAuthentication) {, +	 * Set to true to pass client credentials to the provider as parameters instead of using HTTP Basic authentication., +	 * @param useParametersForClientAuthentication, +	 */, +	public void setUseParametersForClientAuthentication(boolean useParametersForClientAuthentication) {, +		this.useParametersForClientAuthentication = useParametersForClientAuthentication;, +	}, +, +	/**, +		if (useParametersForClientAuthentication) {, +		if (useParametersForClientAuthentication) {, +		if (useParametersForClientAuthentication) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private boolean useParametersForClientAuthentication; , +	 * Assumes that the authorization URL is the same as the authentication URL., +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, +		if (!useParametersForClientAuthentication) {, +	 * Set to true to pass client credentials to the provider as parameters instead of using HTTP Basic authentication., +	 * @param useParametersForClientAuthentication, +	 */, +	public void setUseParametersForClientAuthentication(boolean useParametersForClientAuthentication) {, +		this.useParametersForClientAuthentication = useParametersForClientAuthentication;, +	}, +, +	/**, +		if (useParametersForClientAuthentication) {, +		if (useParametersForClientAuthentication) {, +		if (useParametersForClientAuthentication) {, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		oAuth2TemplateParamBased = new OAuth2Template("client_id", "client_secret", AUTHORIZE_URL, null, ACCESS_TOKEN_URL);, +		oAuth2TemplateParamBased.setUseParametersForClientAuthentication(true);]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/build.gradle, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/gradle.properties, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/gradle.properties, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, + * Copyright 2014 the original author or authors., +public abstract class AbstractOAuth2ApiBinding implements ApiBinding {, +	private final RestTemplate restTemplate;, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/gradle.properties, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, + * Copyright 2014 the original author or authors., +public abstract class AbstractOAuth2ApiBinding implements ApiBinding {, +	private final RestTemplate restTemplate;, +++ /dev/null, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/gradle.properties, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, + * Copyright 2014 the original author or authors., +public abstract class AbstractOAuth2ApiBinding implements ApiBinding {, +	private final RestTemplate restTemplate;, +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private String filterProcessesUrl = DEFAULT_FILTER_PROCESSES_URL;, +		super(DEFAULT_FILTER_PROCESSES_URL);, +		this.filterProcessesUrl = filterProcessesUrl;, +	private static final String DEFAULT_FILTER_PROCESSES_URL = "/auth";, +]
[+++ b/docs/src/reference/docbook/signin.xml, +			After the user has successfully signed up in your application, you can complete the connection between the provider and the newly created account by calling <methodname>ProviderSignInUtils.handleConnectPostSignUp()</methodname>:, +ProviderSignInUtils.handleConnectPostSignUp(accountId, request);, +]]>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());, +		List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals(2, localUserIds.size());, +		assertEquals("1", localUserIds.get(0));, +		assertEquals("2", localUserIds.get(1));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());, +		List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals(2, localUserIds.size());, +		assertEquals("1", localUserIds.get(0));, +		assertEquals("2", localUserIds.get(1));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.util.List;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, +		if (userIds.size() == 0) {, +		} else if (userIds.size() == 1){, +			usersConnectionRepository.createConnectionRepository(userIds.get(0)).updateConnection(connection);, +			String originalUrl = signInAdapter.signIn(userIds.get(0), connection, request);, +		} else {, +			return redirect(signInUrl + "?signInError=multiple");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/SignInControllerGateway.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.web.connect;, +, +import java.io.Serializable;, +, +/**, + * @author Craig Walls, + */, +public interface SignInControllerGateway {, +	, +	void signIn(Serializable accountId);, +	, +}]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<context:component-scan base-package="org.springframework.social.samples.twitter" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<context:component-scan base-package="org.springframework.social.samples.twitter" />, +++ b/samples/twitter-connect/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/samples/twitter/db/ServiceProviders-data.sql" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<context:component-scan base-package="org.springframework.social.samples.twitter" />, +++ b/samples/twitter-connect/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/samples/twitter/db/ServiceProviders-data.sql" />, +++ b/samples/twitter-connect/src/main/webapp/WEB-INF/spring/root-context.xml, +	<import resource="social-connection.xml" />, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/docs/src/info/changelog.txt, +   * If multiple matching connections are found during provider sign in, redirect, +     to the sign in page to offer the user a chance to sign in through some other, +     means (username/password, via a different provider, etc). (SOCIAL-237)]
[+++ b/docs/src/reference/docbook/implementing.xml]
[+++ b/gradle.properties, +h2Version=1.4.195, +springSecurityVersion=4.2.2.RELEASE, +thymeleaf3Version=3.0.5.RELEASE, +thymeleafSpring5Version=3.0.5.M3]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/DisconnectInterceptor.java, +	void preDisconnect(ConnectionFactory<S> connectionFactory, WebRequest request);	, +	void postDisconnect(ConnectionFactory<S> connectionFactory, WebRequest request);]
[+++ b/build.gradle, +      thymeleafVersion = '2.1.2.RELEASE', +        mavenCentral(), +        compile ("org.thymeleaf:thymeleaf:$thymeleafVersion", optional), +        compile ("org.thymeleaf:thymeleaf-spring3:$thymeleafVersion", optional), +        compile ("org.thymeleaf:thymeleaf-spring4:$thymeleafVersion", optional), +++ b/build.gradle, +      thymeleafVersion = '2.1.2.RELEASE', +        mavenCentral(), +        compile ("org.thymeleaf:thymeleaf:$thymeleafVersion", optional), +        compile ("org.thymeleaf:thymeleaf-spring3:$thymeleafVersion", optional), +        compile ("org.thymeleaf:thymeleaf-spring4:$thymeleafVersion", optional), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +import org.springframework.context.ApplicationContext;, +import org.springframework.util.ClassUtils;, +	private final boolean thymeleaf3Present;, +, +	private final boolean thymeleaf4Present;, +, +		thymeleaf3Present = ClassUtils.isPresent("org.thymeleaf.spring3.context.SpringWebContext", ConnectedAttrProcessor.class.getClassLoader());, +		thymeleaf4Present = ClassUtils.isPresent("org.thymeleaf.spring4.context.SpringWebContext", ConnectedAttrProcessor.class.getClassLoader());, +		ConnectionRepository connectionRepository = getConnectionRepository(arguments.getContext());, +		return connectionRepository.findConnections(providerId).size() > 0;, +	}, +	private ConnectionRepository getConnectionRepository(final IContext context) {, +		ApplicationContext applicationContext = null;, +		if (thymeleaf4Present) {, +			applicationContext = getSpringApplicationContextForThymeleaf4(context);, +		} else if (thymeleaf3Present) {, +			applicationContext = getSpringApplicationContextForThymeleaf3(context);, +		} else {, +			throw new ConfigurationException("Neither Thymeleaf 3 SpringWebContext nor Thymeleaf 4 SpringWebContext is in ", +					+ "the application classpath.");, +		}, +		ConnectionRepository connectionRepository = applicationContext.getBean(ConnectionRepository.class);, +		return connectionRepository;, +	}, +, +	private ApplicationContext getSpringApplicationContextForThymeleaf3(final IContext context) {, +		if (!(context instanceof org.thymeleaf.spring3.context.SpringWebContext)) {, +							org.thymeleaf.spring3.context.SpringWebContext.class.getName() + ". Spring Social integration can only be used in " +, +		final org.thymeleaf.spring3.context.SpringWebContext springContext = (org.thymeleaf.spring3.context.SpringWebContext) context;		, +		return springContext.getApplicationContext();, +	}, +	private ApplicationContext getSpringApplicationContextForThymeleaf4(final IContext context) {, +		if (!(context instanceof org.thymeleaf.spring4.context.SpringWebContext)) {, +			throw new ConfigurationException(, +					"Thymeleaf execution context is not a Spring web context (implementation of " +, +					org.thymeleaf.spring4.context.SpringWebContext.class.getName() + ". Spring Social integration can only be used in " +, +					"web environements with a Spring application context.");, +		}, +		final org.thymeleaf.spring4.context.SpringWebContext springContext = (org.thymeleaf.spring4.context.SpringWebContext) context;		, +		return springContext.getApplicationContext();]
[+++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.security;, +, +import org.springframework.social.SocialException;, +, +@SuppressWarnings("serial"), +public class SocialAuthenticationException extends SocialException {, +, +	public SocialAuthenticationException() {, +		super("");, +	}, +, +	public SocialAuthenticationException(String message) {, +		super(message);, +	}, +, +	public SocialAuthenticationException(Throwable cause) {, +		super("", cause);, +	}, +, +	public SocialAuthenticationException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]
[+++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/settings.gradle, + * Copyright 2011 the original author or authors., +include 'spring-social-core', +++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/settings.gradle, + * Copyright 2011 the original author or authors., +include 'spring-social-core', +++ /dev/null, +++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        compile project(':spring-social-core'), +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/settings.gradle, + * Copyright 2011 the original author or authors., +include 'spring-social-core', +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +project('spring-social-core') {, +    description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', +    description = 'Facebook API', +        compile project(':spring-social-core'), +    description = 'Github API', +        compile project(':spring-social-core'), +    description = 'Gowalla API', +        compile project(':spring-social-core'), +    description = 'LinkedIn API', +        compile project(':spring-social-core'), +    description = 'TripIt API', +        compile project(':spring-social-core'), +    description = 'Twitter API', +        compile project(':spring-social-core'), +        compile project(':spring-social-core')]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +    List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/signin.xml, +        return account.getUsername();, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/signin.xml, +        return account.getUsername();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (must not be null)., +++ b/docs/src/reference/docbook/serviceprovider.xml, +    List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/signin.xml, +        return account.getUsername();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id (must not be null)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	 * Find the ids for local application users that have the given {@link Connection}., +	 * No entries indicates no application users are associated with the connection; ProviderSignInController will offer the user a signup page to register with the app., +	 * A single entry indicates that exactly one application user is associated with the connection and is used to sign in that user via ProviderSignInController., +	 * Multiple entries indicate that multiple application users are associated with the connection and handled as an error by ProviderSignInController., +	 * @return the user ids associated with the connection. ]
[+++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred while consuming a provider API., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ProviderApiException extends SocialException {, +, +	public ProviderApiException(String message) {, +		super(message);, +	}, +, +	public ProviderApiException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred while consuming a provider API., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ProviderApiException extends SocialException {, +, +	public ProviderApiException(String message) {, +		super(message);, +	}, +, +	public ProviderApiException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderServerErrorException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;]
[+++ b/build.gradle, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +		if (httpComponentsAvailable) {, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +		if (httpComponentsAvailable) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +				public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +				public String buildAuthenticateUrl(String redirectUri, String state) {, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +		if (httpComponentsAvailable) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +				public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +				public String buildAuthenticateUrl(String redirectUri, String state) {, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return buildAuthorizeUrl(redirectUri, null, state);, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +		if (httpComponentsAvailable) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +				public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +				public String buildAuthenticateUrl(String redirectUri, String state) {, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return buildAuthorizeUrl(redirectUri, null, state);, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.junit.Assert.*;]
[+++ b/gradle.properties, +springSocialVersion=1.1.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/docs/src/reference/docbook/signin.xml, +    String signIn(String userId, Connection<?> connection, NativeWebRequest request);, +    public String signIn(String localUserId, Connection<?> connection, NativeWebRequest request) {, +        return null;, +++ b/docs/src/reference/docbook/signin.xml, +    String signIn(String userId, Connection<?> connection, NativeWebRequest request);, +    public String signIn(String localUserId, Connection<?> connection, NativeWebRequest request) {, +        return null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Version.java, +	Bearer {, +		public String getAuthorizationHeaderValue(String accessToken) {, +			return "Bearer " + accessToken;, +		}		, +	},, +]
[+++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-gowalla/src/test/java/org/springframework/social/gowalla/GowallaTemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +, +import java.util.List;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.test.MockRestServiceServer;, +	private MockRestServiceServer mockServer;, +	private HttpHeaders responseHeaders;, +		mockServer = MockRestServiceServer.createServer(gowalla.getRestTemplate());, +		responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_JSON);, +		mockServer.expect(requestTo("https://api.gowalla.com/users/me")).andExpect(method(GET)), +				.andRespond(withResponse("{\"username\":\"habuma\"}", responseHeaders));, +		assertEquals("habuma", gowalla.getProfileId());, +	}, +	@Test, +	public void getProfileUrl() {, +		mockServer.expect(requestTo("https://api.gowalla.com/users/me")).andExpect(method(GET)), +				.andRespond(withResponse("{\"username\":\"habuma\"}", responseHeaders));, +		assertEquals("http://www.gowalla.com/users/habuma", gowalla.getProfileUrl());, +	}, +, +	@Test, +	public void getTopCheckins() {, +		mockServer.expect(requestTo("https://api.gowalla.com/users/habuma/top_spots")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("top_spots.json", getClass()), responseHeaders));, +, +		List<Checkin> checkins = gowalla.getTopCheckins("habuma");, +		assertEquals(3, checkins.size());, +		assertEquals("Burrito Shack", checkins.get(0).getName());, +		assertEquals(100, checkins.get(0).getCount());, +		assertEquals("Chicken Hut", checkins.get(1).getName());, +		assertEquals(25, checkins.get(1).getCount());, +		assertEquals("Burger Bell", checkins.get(2).getName());, +		assertEquals(3, checkins.get(2).getCount());, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-gowalla/src/test/java/org/springframework/social/gowalla/GowallaTemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +, +import java.util.List;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.test.MockRestServiceServer;, +	private MockRestServiceServer mockServer;, +	private HttpHeaders responseHeaders;, +		mockServer = MockRestServiceServer.createServer(gowalla.getRestTemplate());, +		responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_JSON);, +		mockServer.expect(requestTo("https://api.gowalla.com/users/me")).andExpect(method(GET)), +				.andRespond(withResponse("{\"username\":\"habuma\"}", responseHeaders));, +		assertEquals("habuma", gowalla.getProfileId());, +	}, +	@Test, +	public void getProfileUrl() {, +		mockServer.expect(requestTo("https://api.gowalla.com/users/me")).andExpect(method(GET)), +				.andRespond(withResponse("{\"username\":\"habuma\"}", responseHeaders));, +		assertEquals("http://www.gowalla.com/users/habuma", gowalla.getProfileUrl());, +	}, +, +	@Test, +	public void getTopCheckins() {, +		mockServer.expect(requestTo("https://api.gowalla.com/users/habuma/top_spots")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("top_spots.json", getClass()), responseHeaders));, +, +		List<Checkin> checkins = gowalla.getTopCheckins("habuma");, +		assertEquals(3, checkins.size());, +		assertEquals("Burrito Shack", checkins.get(0).getName());, +		assertEquals(100, checkins.get(0).getCount());, +		assertEquals("Chicken Hut", checkins.get(1).getName());]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +	/**, +	 * The scope of the access grant., +	 * May be null if the provider doesn't return the granted scope in the response., +	 */, +	public String getScope() {, +		return scope;, +	}, +	, +	/**, +	 * Additional parameters returned along with the access grant., +	 */, +	public Map<String, Object> getAdditionalParameters() {, +		return additionalParameters;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +	/**, +	 * The scope of the access grant., +	 * May be null if the provider doesn't return the granted scope in the response., +	 */, +	public String getScope() {, +		return scope;, +	}, +	, +	/**, +	 * Additional parameters returned along with the access grant., +	 */, +	public Map<String, Object> getAdditionalParameters() {, +		return additionalParameters;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return extractAccessGrantFromResponse(result);, +		return extractAccessGrantFromResponse(result);, +	private AccessGrant extractAccessGrantFromResponse(Map<String, ?> result) {, +		HashMap<String, Object> additionalParameters = new HashMap<String, Object>(result);, +		additionalParameters.remove("access_token");, +		additionalParameters.remove("expires_in");, +		additionalParameters.remove("refresh_token");, +		additionalParameters.remove("scope");, +		, +		return new AccessGrant(valueOf(result.get("access_token")),, +				(Integer) result.get("expires_in"),, +				valueOf(result.get("refresh_token")),, +				(String) result.get("scope"),, +				additionalParameters);, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +	/**, +	 * The scope of the access grant., +	 * May be null if the provider doesn't return the granted scope in the response., +	 */, +	public String getScope() {, +		return scope;, +	}, +	, +	/**, +	 * Additional parameters returned along with the access grant., +	 */, +	public Map<String, Object> getAdditionalParameters() {, +		return additionalParameters;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return extractAccessGrantFromResponse(result);, +		return extractAccessGrantFromResponse(result);, +	private AccessGrant extractAccessGrantFromResponse(Map<String, ?> result) {, +		HashMap<String, Object> additionalParameters = new HashMap<String, Object>(result);, +		additionalParameters.remove("access_token");]
[+++ b/docs/src/reference/docbook/signin.xml, +			In this case, <code>onlogin</code> is set to use jQuery to submit the form, triggering <classname>FacebookSigninController</classname> to authenticate the user to the application.]
[+++ b/.gitignore, +samples/**/.classpath, +samples/**/.project, +samples/**/.settings, +samples/**/bin]
[+++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @return the provider ID, +	 * @return the service provider, +	 * @return the ApiAdapter, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @return the provider ID, +	 * @return the service provider, +	 * @return the ApiAdapter, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @param providerId the provider ID used to look up the ConnectionFactory., +	 * @return the requested ConnectionFactory, +	 * @param apiType the Java type of the API binding used to lookup a matching ConnectionFactory, +	 * @param <A> the API binding type, +     * @return the requested ConnectionFactory, +	 * @return a Set of String containing all of the provider IDs registered with this ConnectionFactoryLocator., +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection]
[+++ b/build.gradle, +project('spring-social-client') {, +    description = 'Service Provider Framework', +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +    description = 'Facebook Service Provider', +        compile project(':spring-social-client'), +    description = 'Github Service Provider', +        compile project(':spring-social-client'), +    description = 'Gowalla Service Provider', +        compile project(':spring-social-client'), +    description = 'LinkedIn Service Provider', +        compile project(':spring-social-client'), +    description = 'TripIt Service Provider', +        compile project(':spring-social-client'), +    description = 'Twitter Service Provider', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ b/build.gradle, +project('spring-social-client') {, +    description = 'Service Provider Framework', +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +    description = 'Facebook Service Provider', +        compile project(':spring-social-client'), +    description = 'Github Service Provider', +        compile project(':spring-social-client'), +    description = 'Gowalla Service Provider', +        compile project(':spring-social-client'), +    description = 'LinkedIn Service Provider', +        compile project(':spring-social-client'), +    description = 'TripIt Service Provider', +        compile project(':spring-social-client'), +    description = 'Twitter Service Provider', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/build.gradle, +project('spring-social-client') {, +    description = 'Service Provider Framework', +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +    description = 'Facebook Service Provider', +        compile project(':spring-social-client'), +    description = 'Github Service Provider', +        compile project(':spring-social-client'), +    description = 'Gowalla Service Provider', +        compile project(':spring-social-client'), +    description = 'LinkedIn Service Provider', +        compile project(':spring-social-client'), +    description = 'TripIt Service Provider', +        compile project(':spring-social-client'), +    description = 'Twitter Service Provider', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/build.gradle, +project('spring-social-client') {, +    description = 'Service Provider Framework', +        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +    description = 'Facebook Service Provider', +        compile project(':spring-social-client'), +    description = 'Github Service Provider', +        compile project(':spring-social-client'), +    description = 'Gowalla Service Provider', +        compile project(':spring-social-client'), +    description = 'LinkedIn Service Provider', +        compile project(':spring-social-client'), +    description = 'TripIt Service Provider', +        compile project(':spring-social-client'), +    description = 'Twitter Service Provider', +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        compile project(':spring-social-client'), +        testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.util.ClassUtils;, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private Class<?> apiConfigClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiConfigClass) {, +		this.apiConfigClass = apiConfigClass;	, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	private BeanDefinition addApiBindingBean(ParserContext parserContext) {, +		BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(apiConfigClass).getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(ClassUtils.getShortNameAsProperty(apiConfigClass), beanDefinition);, +		return null;, +	}, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.util.ClassUtils;, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private Class<?> apiConfigClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiConfigClass) {, +		this.apiConfigClass = apiConfigClass;	, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	private BeanDefinition addApiBindingBean(ParserContext parserContext) {, +		BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(apiConfigClass).getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(ClassUtils.getShortNameAsProperty(apiConfigClass), beanDefinition);, +		return null;, +	}, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookConnectionFactoryBeanDefinitionParser.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.facebook.api.Facebook;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +		super(FacebookConnectionFactory.class, FacebookApiConfig.class);, +	}, +, +	private static final class FacebookApiConfig {, +		@Bean, +		@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES), +		public Facebook facebook(ConnectionRepository connectionRepository) {, +			Connection<Facebook> facebook = connectionRepository.findPrimaryConnection(Facebook.class);, +			return facebook != null ? facebook.getApi() : new FacebookTemplate();, +		}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.util.ClassUtils;, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private Class<?> apiConfigClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiConfigClass) {, +		this.apiConfigClass = apiConfigClass;	, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	private BeanDefinition addApiBindingBean(ParserContext parserContext) {, +		BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(apiConfigClass).getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(ClassUtils.getShortNameAsProperty(apiConfigClass), beanDefinition);, +		return null;, +	}, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookConnectionFactoryBeanDefinitionParser.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.facebook.api.Facebook;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +		super(FacebookConnectionFactory.class, FacebookApiConfig.class);, +	}, +, +	private static final class FacebookApiConfig {, +		@Bean, +		@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES), +		public Facebook facebook(ConnectionRepository connectionRepository) {, +			Connection<Facebook> facebook = connectionRepository.findPrimaryConnection(Facebook.class);, +			return facebook != null ? facebook.getApi() : new FacebookTemplate();, +		}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/TwitterConnectionFactoryBeanDefinitionParser.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.twitter.api.Twitter;, +import org.springframework.social.twitter.api.impl.TwitterTemplate;, +		super(TwitterConnectionFactory.class, TwitterApiConfig.class);, +	}, +, +	private static final class TwitterApiConfig {		, +		@Bean, +		@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES), +		public Twitter twitter(ConnectionRepository connectionRepository) {, +			Connection<Twitter> twitter = connectionRepository.findPrimaryConnection(Twitter.class);, +			return twitter != null ? twitter.getApi() : new TwitterTemplate();, +		}		, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java]
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/ProtectedResourceRequest.java, +package org.springframework.security.oauth.client;, +, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +, +public final class ProtectedResourceRequest {, +	, +	private final HttpHeaders headers;, +	, +	private final byte[] body;, +	, +	private final URI uri;, +	, +	private final HttpMethod method;, +, +	public ProtectedResourceRequest(HttpHeaders headers, byte[] body, URI uri, HttpMethod method) {, +		this.headers = headers;, +		this.body = body;, +		this.uri = uri;, +		this.method = method;, +	}, +, +	public HttpHeaders getHeaders() {, +		return headers;, +	}, +, +	public byte[] getBody() {, +		return body;, +	}, +, +	public URI getUri() {, +		return uri;, +	}, +, +	public HttpMethod getMethod() {, +		return method;, +	}, +	, +}, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/ProtectedResourceRequest.java, +package org.springframework.security.oauth.client;, +, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +, +public final class ProtectedResourceRequest {, +	, +	private final HttpHeaders headers;, +	, +	private final byte[] body;, +	, +	private final URI uri;, +	, +	private final HttpMethod method;, +, +	public ProtectedResourceRequest(HttpHeaders headers, byte[] body, URI uri, HttpMethod method) {, +		this.headers = headers;, +		this.body = body;, +		this.uri = uri;, +		this.method = method;, +	}, +, +	public HttpHeaders getHeaders() {, +		return headers;, +	}, +, +	public byte[] getBody() {, +		return body;, +	}, +, +	public URI getUri() {, +		return uri;, +	}, +, +	public HttpMethod getMethod() {, +		return method;, +	}, +	, +}, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/RequestSigner.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +/**, + * Represents a direct message., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +/**, + * Represents a direct message., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.twitter;, +, +import java.util.List;, +, +/**, + * Interface defining the Twitter operations for working with direct messages., + * @author Craig Walls, + */, +public interface DirectMessageApi {, +, +	/**, +	 * Retrieve the 20 most recently received direct messages for the authenticating user., +	 * @return a collection of {@link DirectMessage} with the authenticating user as the recipient., +	 */, +	List<DirectMessage> getDirectMessagesReceived();, +, +	/**, +	 * Retrieve the 20 most recently sent direct messages for the authenticating, +	 * user., +	 * , +	 * @return a collection of {@link DirectMessage} with the authenticating, +	 *         user as the sender., +	 */, +	List<DirectMessage> getDirectMessagesSent();, +, +	/**, +	 * Sends a direct message to another Twitter user. The recipient of the, +	 * message must follow the authenticated user in order for the message to be, +	 * delivered. If the recipient is not following the authenticated user, an, +	 * {@link InvalidMessageRecipientException} will be thrown., +	 * , +	 * @param toScreenName, +	 *            the screen name of the recipient of the messages., +	 * @param text, +	 *            the message text., +	 * @throws InvalidMessageRecipientException, +	 *             if the recipient is not following the authenticating user., +	 * @throws DuplicateTweetException, +	 *             if the message duplicates a previously sent message., +	 */, +	void sendDirectMessage(String toScreenName, String text);, +, +	/**, +	 * Sends a direct message to another Twitter user., +	 * The recipient of the message must follow the authenticated user in order, +	 * for the message to be delivered. If the recipient is not following the, +	 * authenticated user, an {@link InvalidMessageRecipientException} will be thrown., +	 * @param toUserId the Twitter user ID of the recipient of the messages., +	 * @param text the message text., +	 * @throws InvalidMessageRecipientException if the recipient is not following the authenticating user., +	 * @throws DuplicateTweetException if the message duplicates a previously sent message., +	 */, +	void sendDirectMessage(long toUserId, String text);, +	, +	/**, +	 * Deletes a direct message for the authenticated user., +	 * @param messageId the ID of the message to be removed., +	 * @param messageId, +	 */, +	void deleteDirectMessage(long messageId);, +}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +/**, + * Represents a direct message., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]
[+++ /dev/null, +++ /dev/null, +++ b/samples/gowalla-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ /dev/null, +++ b/samples/gowalla-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/gowalla-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" autowire="constructor" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiTokens.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +class ApiTokens {, +	, +	private String accessToken;, +	, +	private String secret;, +	, +	private String refreshToken;, +, +	public ApiTokens(String accessToken, String secret, String refreshToken) {, +		this.accessToken = accessToken;, +		this.secret = secret;, +		this.refreshToken = refreshToken;, +	}, +, +	public String getAccessToken() {, +		return accessToken;, +	}, +, +	public String getSecret() {, +		return secret;, +	}, +, +	public String getRefreshToken() {, +		return refreshToken;, +	}, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiTokens.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +class ApiTokens {, +	, +	private String accessToken;, +	, +	private String secret;, +	, +	private String refreshToken;, +, +	public ApiTokens(String accessToken, String secret, String refreshToken) {, +		this.accessToken = accessToken;, +		this.secret = secret;, +		this.refreshToken = refreshToken;, +	}, +, +	public String getAccessToken() {, +		return accessToken;, +	}, +, +	public String getSecret() {, +		return secret;, +	}, +, +	public String getRefreshToken() {, +		return refreshToken;, +	}, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +package org.springframework.social.connect;, +, +import org.springframework.social.connect.spi.ProviderProfile;, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +, +final class NullServiceApiAdapter implements ServiceApiAdapter<Object> {, +, +	public static final NullServiceApiAdapter INSTANCE = new NullServiceApiAdapter();, +	]
[+++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a GitHub service provider -->, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/GowallaSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/GowallaSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/ShowcaseController.java, +			GowallaOperations gowalla = gowallaProvider.getConnections(1).get(0).getServiceApi();, +			String gowallaId = gowalla.getProfileId();, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/GowallaSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/ShowcaseController.java, +			GowallaOperations gowalla = gowallaProvider.getConnections(1).get(0).getServiceApi();, +			String gowallaId = gowalla.getProfileId();, +++ b/samples/gowalla-showcase/src/main/resources/org/springframework/social/samples/gowalla/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/GowallaSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/ShowcaseController.java, +			GowallaOperations gowalla = gowallaProvider.getConnections(1).get(0).getServiceApi();, +			String gowallaId = gowalla.getProfileId();, +++ b/samples/gowalla-showcase/src/main/resources/org/springframework/social/samples/gowalla/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, +		    <artifactId>spring-social-config</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/GowallaSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;, + * @author Yuan Ji, +public class SocialAuthenticationFilter extends AbstractAuthenticationProcessingFilter {, +        super("/auth");, +        setAuthenticationManager(authManager);, +    /**, +     * Indicates whether this filter should attempt to process a social network login request for the current invocation., +     * <p>Check if request URL matches filterProcessesUrl with valid providerId. , +     * The URL must be like {filterProcessesUrl}/{providerId}. , +     *, +     * @return <code>true</code> if the filter should attempt authentication, <code>false</code> otherwise., +     */, +    protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {, +        String providerId = getRequestedProviderId(request);, +        if (providerId != null){, +            Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +            return authProviders.contains(providerId);, +        return false;, +    /* (non-Javadoc), +     * @see org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#attemptAuthentication(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse), +    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {, +		if (!authProviders.isEmpty() && authProviderId != null && authProviders.contains(authProviderId)) {, +    /**, +     * Override to handle redirect exception., +     * , +     * @see org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#unsuccessfulAuthentication(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.security.core.AuthenticationException), +     */, +    @Override, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,, +            AuthenticationException failed) throws IOException, ServletException {, +        if (failed instanceof SocialAuthenticationRedirectException){, +            response.sendRedirect(((SocialAuthenticationRedirectException)failed).getRedirectUrl()); , +            return;, +        }, +        super.unsuccessfulAuthentication(request, response, failed);, +    }, +, +    // private helpers, +    , +    /*, +     * Call SocialAuthenticationService.getAuthToken() to get SocialAuthenticationToken:, +     *     If first phase, throw AuthenticationRedirectException to redirect to provider website., +     *     If second phase, get token/code from request parameter and call provider API to get accessToken/accessGrant., +     * Check Authentication object in spring security context, if null or not authenticated,  call doAuthentication(), +     * Otherwise, it is already authenticated, add this connection., +     */, +			token.setDetails(authenticationDetailsSource.buildDetails(request));, +			Authentication success = getAuthenticationManager().authenticate(token);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;, + * @author Yuan Ji, +public class SocialAuthenticationFilter extends AbstractAuthenticationProcessingFilter {, +        super("/auth");, +        setAuthenticationManager(authManager);, +    /**, +     * Indicates whether this filter should attempt to process a social network login request for the current invocation., +     * <p>Check if request URL matches filterProcessesUrl with valid providerId. , +     * The URL must be like {filterProcessesUrl}/{providerId}. , +     *, +     * @return <code>true</code> if the filter should attempt authentication, <code>false</code> otherwise., +     */, +    protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {, +        String providerId = getRequestedProviderId(request);, +        if (providerId != null){, +            Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +            return authProviders.contains(providerId);, +        return false;, +    /* (non-Javadoc), +     * @see org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#attemptAuthentication(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse), +    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {, +		if (!authProviders.isEmpty() && authProviderId != null && authProviders.contains(authProviderId)) {, +    /**, +     * Override to handle redirect exception., +     * , +     * @see org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#unsuccessfulAuthentication(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.security.core.AuthenticationException), +     */, +    @Override, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,, +            AuthenticationException failed) throws IOException, ServletException {, +        if (failed instanceof SocialAuthenticationRedirectException){, +            response.sendRedirect(((SocialAuthenticationRedirectException)failed).getRedirectUrl()); , +            return;, +        }, +        super.unsuccessfulAuthentication(request, response, failed);, +    }, +, +    // private helpers, +    , +    /*, +     * Call SocialAuthenticationService.getAuthToken() to get SocialAuthenticationToken:, +     *     If first phase, throw AuthenticationRedirectException to redirect to provider website., +     *     If second phase, get token/code from request parameter and call provider API to get accessToken/accessGrant., +     * Check Authentication object in spring security context, if null or not authenticated,  call doAuthentication(), +     * Otherwise, it is already authenticated, add this connection., +     */, +			token.setDetails(authenticationDetailsSource.buildDetails(request));, +			Authentication success = getAuthenticationManager().authenticate(token);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +import java.util.List;]
[+++ b/docs/src/reference/docbook/signin.xml, +			<listitem><para><code>GET /signin/{providerId}?code={verifier}</code> - Receives the authentication callback from the provider, accepting a code. Exchanges this code for an access token. Using this access token, it retrieves the user's provider user ID and uses that to lookup a connected account and then authenticates to the application through the sign in service. </para>, +							If the provider user ID doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a sign up URL. , +			<listitem><para><code>GET /signin/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token. Using this access token, it retrieves the user's provider user ID and uses that to lookup a connected account and then authenticates to the application through the sign in service. </para>, +							If the provider user ID doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a sign up URL. ]
[+++ b/docs/src/reference/docbook/overview.xml, +            <row>, +              <entry>spring-social-test</entry>, +              <entry>Support for testing ServiceProvider implementations and API bindings</entry>, +            </row>]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.authentication.AuthenticationServiceException;, +				Authentication auth = attemptAuthService(authService, AuthenticationMode.EXPLICIT, request, response);, +				if (auth == null) {, +					throw new AuthenticationServiceException("explicit authentication failed");, +				}, +				return auth;, +			throws SocialAuthenticationRedirectException, AuthenticationException {]
[+++ b/src/assembly/distribution.xml, +        <fileSet>, +			<directory>${project.build.directory}</directory>, +				<include>*.jar</include>, +        </fileSet>, +	</fileSets>]
[+++ b/build.gradle, +    sourceSets {, +        test {, +            resources {, +                srcDirs = ['src/test/resources', 'src/test/java'], +            }, +        }, +    }, +, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/build.gradle, +    sourceSets {, +        test {, +            resources {, +                srcDirs = ['src/test/resources', 'src/test/java'], +            }, +        }, +    }, +, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/build.gradle, +    sourceSets {, +        test {, +            resources {, +                srcDirs = ['src/test/resources', 'src/test/java'], +            }, +        }, +    }, +, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/build.gradle, +    sourceSets {, +        test {, +            resources {, +                srcDirs = ['src/test/resources', 'src/test/java'], +            }, +        }, +    }, +, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/build.gradle, +    sourceSets {, +        test {, +            resources {, +                srcDirs = ['src/test/resources', 'src/test/java'], +            }, +        }, +    }, +, +        testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, +	        <groupId>org.scribe</groupId>, +	        <artifactId>scribe</artifactId>, +	        <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +			FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, +		facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table ServiceProvider (name varchar,, +                    displayName varchar not null,, +                   	implementation varchar not null,, +					apiKey varchar not null,					, +					secret varchar,, +					appId bigint,, +					requestTokenUrl varchar,, +					authorizeUrl varchar,, +					accessTokenUrl varchar,, +					primary key (name));, +, +create table AccountConnection (member bigint,, +					provider varchar,, +					accountId varchar,	, +					profileUrl varchar,, +					primary key (member, provider, accessToken),, +					foreign key (provider) references ServiceProvider(name));, +create index ProviderAccountKey on AccountConnection(accountId);, +++ b/build.gradle, +    sourceSets {, +        test {]
[+++ b/build.gradle, +		compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, +		    optional = true, +		    transitive = false, +		}, +++ b/build.gradle, +		compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, +		    optional = true, +		    transitive = false, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/build.gradle, +		compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, +		    optional = true, +		    transitive = false, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/build.gradle, +		compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, +		    optional = true, +		    transitive = false, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.Iterator;, +import java.util.Map.Entry;, + * @author Roy Clarkson, +		String clientInfo = "?client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?client_id=" + formEncode(clientId);]
[+++ b/pom.xml, +        <org.springframework-version>3.0.5.RELEASE</org.springframework-version>]
[+++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/Fake.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +public interface Fake {, +, +	String getAccessToken();, +	, +	boolean isAuthorized();, +	, +}, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/Fake.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +public interface Fake {, +, +	String getAccessToken();, +	, +	boolean isAuthorized();, +	, +}, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactory.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +import org.springframework.social.connect.support.OAuth2ConnectionFactory;, +import org.springframework.social.oauth2.AbstractOAuth2ServiceProvider;, +import org.springframework.social.oauth2.OAuth2Template;, +, +public class FakeConnectionFactory extends OAuth2ConnectionFactory<Fake> {, +, +	public FakeConnectionFactory(String appId, String appSecret) {, +		super("fake", new FakeServiceProvider(appId, appSecret), null);, +	}, +	, +	private static final class FakeServiceProvider extends AbstractOAuth2ServiceProvider<Fake> {, +, +		public FakeServiceProvider(String appId, String appSecret) {, +			super(new OAuth2Template(appId, appSecret, "http://fake.com/auth", "http://fake.com/token"));, +		}, +		, +		@Override, +		public Fake getApi(String accessToken) {, +			return new FakeTemplate(accessToken);, +		}, +		, +	}, +}, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/Fake.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]
[+++ b/src/dist/changelog.txt, +Spring Social 1.1.0 Milestone 2 (February 12, 2012), +===================================================, + Improvements, +  * Tighter integration with Spring Security with SocialAuthenticationFilter., +    (SOCIAL-232), +  * Support for non-standard parameters in request token and authorization URLs., +    (SOCIAL-349), +  * Interceptors in ProviderSignInController to allow for custom behavior in, +    authorization flow. (SOCIAL-255), +  * Allow for more control in specifying a callback URL, both with an injectable, +    property and an overridable method. (SOCIAL-259), +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization used during an operation invocation is invalid., + * This can occur when an access token that is malformed or fails signature validation, +public class InvalidAuthorizationException extends RejectedAuthorizationException {, +	public InvalidAuthorizationException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization used during an operation invocation is invalid., + * This can occur when an access token that is malformed or fails signature validation, +public class InvalidAuthorizationException extends RejectedAuthorizationException {, +	public InvalidAuthorizationException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Exception indicating that an operation requiring authorization was attempted without providing authorization., +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization used during an operation invocation is invalid., + * This can occur when an access token that is malformed or fails signature validation, +public class InvalidAuthorizationException extends RejectedAuthorizationException {, +	public InvalidAuthorizationException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Exception indicating that an operation requiring authorization was attempted without providing authorization., +++ b/spring-social-core/src/main/java/org/springframework/social/NotAuthorizedException.java, + * This can occur when:, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization used during an operation invocation is invalid., + * This can occur when an access token that is malformed or fails signature validation, +public class InvalidAuthorizationException extends RejectedAuthorizationException {, +	public InvalidAuthorizationException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Exception indicating that an operation requiring authorization was attempted without providing authorization., +++ b/spring-social-core/src/main/java/org/springframework/social/NotAuthorizedException.java, + * This can occur when:, +++ b/spring-social-core/src/main/java/org/springframework/social/RejectedAuthorizationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Exception indicating that the authorization used during an operation invocation is rejected by the server., + * This can occur when, + *  - an access token that is malformed or fails signature validation, + *  - an access token has been revoked, + *  - an access token has expired , + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class RejectedAuthorizationException extends NotAuthorizedException {, +, +	public RejectedAuthorizationException(String message) {, +		super(message);, +	}, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization used during an operation invocation is invalid., + * This can occur when an access token that is malformed or fails signature validation, +public class InvalidAuthorizationException extends RejectedAuthorizationException {, +	public InvalidAuthorizationException(String message) {, +		super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Exception indicating that an operation requiring authorization was attempted without providing authorization., +++ b/spring-social-core/src/main/java/org/springframework/social/NotAuthorizedException.java, + * This can occur when:, +++ b/spring-social-core/src/main/java/org/springframework/social/RejectedAuthorizationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *]
[+++ b/docs/src/reference/docbook/connecting.xml, +    MultiValueMap<String, String> preConnect(ConnectionFactory<A> connectionFactory, WebRequest request);, +			It has a return type of <code>MultiValueMap&lt;String, String&gt;</code> which can contain parameters to be passed on the request when <classname>ConnectController</classname> redirects to the provider's authorization URL., +			If it has no parameters to contribute to the authorization URL, it may return <code>null</code>.  , +			For example, suppose that after connecting a user account with their Twitter profile you want to immediately post a tweet about that connection to the user's Twitter timeline. , +    public MultiValueMap<String, String> preConnect(ConnectionFactory<TwitterApi> provider, WebRequest request) {, +        return null;, +++ b/docs/src/reference/docbook/connecting.xml, +    MultiValueMap<String, String> preConnect(ConnectionFactory<A> connectionFactory, WebRequest request);, +			It has a return type of <code>MultiValueMap&lt;String, String&gt;</code> which can contain parameters to be passed on the request when <classname>ConnectController</classname> redirects to the provider's authorization URL., +			If it has no parameters to contribute to the authorization URL, it may return <code>null</code>.  , +			For example, suppose that after connecting a user account with their Twitter profile you want to immediately post a tweet about that connection to the user's Twitter timeline. , +    public MultiValueMap<String, String> preConnect(ConnectionFactory<TwitterApi> provider, WebRequest request) {, +        return null;, +++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-quickstart-30x - Designed to get you up and running quickly as well as using Spring Social with Spring 3.0.x.</para></listitem>, +			<listitem><para>spring-social-popup - Shows how to use Spring Social to drive a browser popup-based connection flow.</para></listitem>, +++ b/docs/src/reference/docbook/connecting.xml, +    MultiValueMap<String, String> preConnect(ConnectionFactory<A> connectionFactory, WebRequest request);, +			It has a return type of <code>MultiValueMap&lt;String, String&gt;</code> which can contain parameters to be passed on the request when <classname>ConnectController</classname> redirects to the provider's authorization URL., +			If it has no parameters to contribute to the authorization URL, it may return <code>null</code>.  , +			For example, suppose that after connecting a user account with their Twitter profile you want to immediately post a tweet about that connection to the user's Twitter timeline. , +    public MultiValueMap<String, String> preConnect(ConnectionFactory<TwitterApi> provider, WebRequest request) {, +        return null;, +++ b/docs/src/reference/docbook/overview.xml, +			<listitem><para>spring-social-quickstart-30x - Designed to get you up and running quickly as well as using Spring Social with Spring 3.0.x.</para></listitem>, +			<listitem><para>spring-social-popup - Shows how to use Spring Social to drive a browser popup-based connection flow.</para></listitem>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +				The database schema designed to back this repository is defined as follows:, +			</para>, +			, +  			<programlisting language="sql"><![CDATA[, +create table UserConnection (userId varchar(255) not null,, +    providerId varchar(255) not null,, +    providerUserId varchar(255),, +    rank int not null,, +    displayName varchar(255),, +    profileUrl varchar(512),, +    imageUrl varchar(512),, +    accessToken varchar(255) not null,					, +    secret varchar(255),, +    refreshToken varchar(255),, +    expireTime bigint,, +    primary key (userId, providerId, providerUserId));, +create unique index UserConnectionRank on UserConnection(userId, providerId, rank);]]>, +  			</programlisting>, +, +			<para>, +				For convenience is bootstrapping the schema from a running application, this schema definition is available in the <code>spring-social-core</code> module as a resource at the path /org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql.				, +			</para>, +, +			<para>, +			]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnection;, +	public String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection) {, +			ServiceProviderConnectionKey key = connection.getKey();, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnection;, +	public String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection) {, +			ServiceProviderConnectionKey key = connection.getKey();, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The version of OAuth1 implemented by this operations instance., +	 * @see OAuth1Version#CORE_10, +	 * @see OAuth1Version#CORE_10_REVISION_A, +	 */, +	public OAuth1Version getVersion();, +	, +	/**, +	 * @param parameters parameters to pass to the provider in the authorize URL. Should never be null; if there are no parameters to pass, set this argument value to {@link OAuth1Parameters#NONE}., +	String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters);, +	 * For some provider, the authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * @param parameters parameters to pass to the provider in the authenticate URL. Should never be null; if there are no parameters to pass, set this argument value to {@link OAuth1Parameters#NONE}., +	 * @return the absolute authenticate URL to redirect the user to for authentication, +	String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnection;, +	public String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection) {, +			ServiceProviderConnectionKey key = connection.getKey();, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The version of OAuth1 implemented by this operations instance., +	 * @see OAuth1Version#CORE_10, +	 * @see OAuth1Version#CORE_10_REVISION_A, +	 */, +	public OAuth1Version getVersion();, +	, +	/**, +	 * @param parameters parameters to pass to the provider in the authorize URL. Should never be null; if there are no parameters to pass, set this argument value to {@link OAuth1Parameters#NONE}., +	String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters);, +	 * For some provider, the authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * @param parameters parameters to pass to the provider in the authenticate URL. Should never be null; if there are no parameters to pass, set this argument value to {@link OAuth1Parameters#NONE}., +	 * @return the absolute authenticate URL to redirect the user to for authentication, +	String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import org.springframework.util.MultiValueMap;, +, +/**, + * Parameters for building an OAuth1 authorize URL., + * @author Keith Donald, + * @see OAuth1Operations#buildAuthorizeUrl(String, OAuth1Parameters), + */, +public final class OAuth1Parameters {, +	, +	private final String callbackUrl;, +	, +	private final MultiValueMap<String, String> additionalParameters;, +, +	/**, +	 * Shared instance for passing zero authorization parameters (accepted for OAuth 1.0a-based flows)., +	 */, +	public static final OAuth1Parameters NONE = new OAuth1Parameters(null, null);, +	, +	/**, +	 * Creates a new OAuth1Parameters instance., +	 * @param callbackUrl the authorization callback url; this value must be included for OAuth 1.0 providers (and NOT for OAuth 1.0a), +	 */, +	public OAuth1Parameters(String callbackUrl) {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.io.ByteArrayOutputStream;, +import java.io.UnsupportedEncodingException;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.net.URLDecoder;, +import java.nio.charset.Charset;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.BitSet;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Map.Entry;, +import java.util.Random;, +import java.util.Set;, +, +import javax.crypto.Mac;, +import javax.crypto.spec.SecretKeySpec;, +, +import org.apache.commons.codec.binary.Base64;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.MediaType;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +, +class SigningSupport {, +	, +	private TimestampGenerator timestampGenerator = new DefaultTimestampGenerator();, +	, +	/**, +	 * Builds the authorization header., +	 * The elements in additionalParameters are expected to not be encoded., +	 */, +	public String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +		StringBuilder header = new StringBuilder();, +		header.append("OAuth ");, +		for (Entry<String, String> entry : oauthParameters.entrySet()) {, +			header.append(oauthEncode(entry.getKey())).append("=\"").append(oauthEncode(entry.getValue())).append("\", ");, +		}, +		MultiValueMap<String, String> collectedParameters = new LinkedMultiValueMap<String, String>((int) ((oauthParameters.size() + additionalParameters.size()) / .75 + 1));, +		collectedParameters.setAll(oauthParameters);, +		collectedParameters.putAll(additionalParameters);		, +		String baseString = buildBaseString(method, getBaseStringUri(targetUrl), collectedParameters);, +		String signature = calculateSignature(baseString, consumerSecret, tokenSecret);		, +		header.append(oauthEncode("oauth_signature")).append("=\"").append(oauthEncode(signature)).append("\"");, +		return header.toString();, +	}, +, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 */, +	public String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		Map<String, String> oauthParameters = commonOAuthParameters(consumerKey);, +		oauthParameters.put("oauth_token", accessToken);, +		MultiValueMap<String, String> additionalParameters = union(readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +		return buildAuthorizationHeaderValue(request.getMethod(), request.getURI(), oauthParameters, additionalParameters, consumerSecret, accessTokenSecret);, +	}, +	, +	/**]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +      <para>In <xref linkend="apis"/>, you'll see how Spring Social provides APIs through which your application may interact with various service providers. But before you can work with a service API, your application must be authorized to access the service on the user's behalf.</para>, +      <para>Spring Social supports two authorization protocols: OAuth 1 and OAuth 2. Both of these protocols achieve essentially the same thing: They enable a user to grant permission for a consumer to access their data and perform actions on a provider. That permission is manifested as an access token that serves as a sort of valet key that can be used in place of a user's own credentials to access a service.</para>, +      <para>Although conceptually similar, each of these protocols arrive at an access token in a slightly different way. The OAuth 1 flow is illustrated as follows:</para>, +      <mediaobject>, +        <imageobject role="fo">, +            <imagedata fileref="images/oauth1_flow.png", +              format="PNG" align="center" scale="70"/>, +        </imageobject>, +        <imageobject role="html">, +            <imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="70"/>, +        </imageobject>, +      </mediaobject>, +      <para>As you can see, there is a back-and-forth conversation that takes place between the consumer and the service provider to establish authorization for the consumer. This exchange, commonly known as the "OAuth Dance", follows these steps:</para>, +      <orderedlist>, +          <listitem><para>The flow starts with the consumer asking for a request token. A request token's purpose is to obtain user approval and can only be used to obtain an access token. In OAuth 1.0a, the consumer callback URL is passed to the provider when asking for a request token.</para></listitem>, +          <listitem><para>The service provider issues a request token to the consumer.</para></listitem>, +          <listitem><para>The consumer redirects the user's browser to the provider's authorization page, passing the request token as a parameter. In OAuth 1.0, the callback URL is also passed as a parameter in this step.</para></listitem>, +          <listitem><para>The service provider prompts the user to authorize the consumer application and the user agrees. (Note that this is the only step where the user participates in the flow.)</para></listitem>, +          <listitem><para>The service provider redirects the user's browser back to a callback URL on the consumer. In OAuth 1.0a, this redirect includes a verifier code as a parameter. At this point, the request token is authorized.</para></listitem>, +          <listitem><para>The consumer exchanges the request token (and the verifier in OAuth 1.0a) for an access token.</para></listitem>, +          <listitem><para>The service provider issues an access token to the consumer. The "dance" is complete.</para></listitem>, +          <listitem><para>The consumer makes calls against the service API, passing the access token along as evidence of its right to access the provider on behalf of the user.</para></listitem>, +      </orderedlist>, +, +      <para>The OAuth 2 authorization flow differs only slightly from the OAuth 1 flow, as illustrated here:</para>, +, +      <mediaobject>, +        <imageobject role="fo">, +            <imagedata fileref="images/oauth2_flow.png", +              format="PNG" align="center" scale="70"/>, +        </imageobject>, +        <imageobject role="html">, +            <imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="0"/>, +        </imageobject>, +      </mediaobject>, +      , +      <para>The steps in the OAuth 2 dance are as follows:</para>, +      , +      <orderedlist>, +          <listitem><para>The flow starts with the consumer redirecting the user's browser to the provider's authorization page. Unlike OAuth 1, there is no concept of request token in OAuth 2.</para></listitem>, +          <listitem><para>The service provider prompts the user to authorize the consumer application and the user agrees. (As with OAuth 1, this is the only step where the user participates in the flow.)</para></listitem>, +          <listitem><para>The service provider redirects the user's browser to the consumer's redirect URI, with an authorization code as a parameter.</para></listitem>, +          <listitem><para>The consumer exchanges the authorization code for an access token.</para></listitem>, +          <listitem><para>The service provider issues an access token to the consumer. The "dance" is complete.</para></listitem>, +          <listitem><para>The consumer makes calls against the service API, passing the access token along as evidence of its right to access the provider on behalf of the user.</para></listitem>, +      </orderedlist>, +      , +      <para>Spring Social's service provider framework manages the authorization process, ultimately creating a connection between the user's account on the application with the access credentials granted in the course of authorization.</para>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +      <para>In <xref linkend="apis"/>, you'll see how Spring Social provides APIs through which your application may interact with various service providers. But before you can work with a service API, your application must be authorized to access the service on the user's behalf.</para>, +      <para>Spring Social supports two authorization protocols: OAuth 1 and OAuth 2. Both of these protocols achieve essentially the same thing: They enable a user to grant permission for a consumer to access their data and perform actions on a provider. That permission is manifested as an access token that serves as a sort of valet key that can be used in place of a user's own credentials to access a service.</para>, +      <para>Although conceptually similar, each of these protocols arrive at an access token in a slightly different way. The OAuth 1 flow is illustrated as follows:</para>, +      <mediaobject>, +        <imageobject role="fo">, +            <imagedata fileref="images/oauth1_flow.png", +              format="PNG" align="center" scale="70"/>, +        </imageobject>, +        <imageobject role="html">, +            <imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="70"/>, +        </imageobject>, +      </mediaobject>, +      <para>As you can see, there is a back-and-forth conversation that takes place between the consumer and the service provider to establish authorization for the consumer. This exchange, commonly known as the "OAuth Dance", follows these steps:</para>, +      <orderedlist>, +          <listitem><para>The flow starts with the consumer asking for a request token. A request token's purpose is to obtain user approval and can only be used to obtain an access token. In OAuth 1.0a, the consumer callback URL is passed to the provider when asking for a request token.</para></listitem>, +          <listitem><para>The service provider issues a request token to the consumer.</para></listitem>, +          <listitem><para>The consumer redirects the user's browser to the provider's authorization page, passing the request token as a parameter. In OAuth 1.0, the callback URL is also passed as a parameter in this step.</para></listitem>, +          <listitem><para>The service provider prompts the user to authorize the consumer application and the user agrees. (Note that this is the only step where the user participates in the flow.)</para></listitem>, +          <listitem><para>The service provider redirects the user's browser back to a callback URL on the consumer. In OAuth 1.0a, this redirect includes a verifier code as a parameter. At this point, the request token is authorized.</para></listitem>, +          <listitem><para>The consumer exchanges the request token (and the verifier in OAuth 1.0a) for an access token.</para></listitem>, +          <listitem><para>The service provider issues an access token to the consumer. The "dance" is complete.</para></listitem>, +          <listitem><para>The consumer makes calls against the service API, passing the access token along as evidence of its right to access the provider on behalf of the user.</para></listitem>, +      </orderedlist>, +, +      <para>The OAuth 2 authorization flow differs only slightly from the OAuth 1 flow, as illustrated here:</para>, +, +      <mediaobject>, +        <imageobject role="fo">, +            <imagedata fileref="images/oauth2_flow.png", +              format="PNG" align="center" scale="70"/>, +        </imageobject>, +        <imageobject role="html">, +            <imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="0"/>, +        </imageobject>, +      </mediaobject>, +      , +      <para>The steps in the OAuth 2 dance are as follows:</para>, +      , +      <orderedlist>, +          <listitem><para>The flow starts with the consumer redirecting the user's browser to the provider's authorization page. Unlike OAuth 1, there is no concept of request token in OAuth 2.</para></listitem>, +          <listitem><para>The service provider prompts the user to authorize the consumer application and the user agrees. (As with OAuth 1, this is the only step where the user participates in the flow.)</para></listitem>, +          <listitem><para>The service provider redirects the user's browser to the consumer's redirect URI, with an authorization code as a parameter.</para></listitem>, +          <listitem><para>The consumer exchanges the authorization code for an access token.</para></listitem>, +          <listitem><para>The service provider issues an access token to the consumer. The "dance" is complete.</para></listitem>, +          <listitem><para>The consumer makes calls against the service API, passing the access token along as evidence of its right to access the provider on behalf of the user.</para></listitem>, +      </orderedlist>, +      , +      <para>Spring Social's service provider framework manages the authorization process, ultimately creating a connection between the user's account on the application with the access credentials granted in the course of authorization.</para>, +++ b/docs/src/reference/resources/images/oauth1_flow.png, +++ b/docs/src/reference/docbook/serviceprovider.xml]
[+++ b/samples/spring-social-showcase/pom.xml, +	    , +, +		<!-- JSR 303 with Hibernate Validator -->, +		<dependency>, +			<groupId>javax.validation</groupId>, +			<artifactId>validation-api</artifactId>, +			<version>1.0.0.GA</version>, +		</dependency>, +		<dependency>, +			<groupId>org.hibernate</groupId>, +			<artifactId>hibernate-validator</artifactId>, +			<version>4.1.0.Final</version>, +		</dependency>, +	    , +++ b/samples/spring-social-showcase/pom.xml, +	    , +, +		<!-- JSR 303 with Hibernate Validator -->, +		<dependency>, +			<groupId>javax.validation</groupId>, +			<artifactId>validation-api</artifactId>, +			<version>1.0.0.GA</version>, +		</dependency>, +		<dependency>, +			<groupId>org.hibernate</groupId>, +			<artifactId>hibernate-validator</artifactId>, +			<version>4.1.0.Final</version>, +		</dependency>, +	    , +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import org.springframework.dao.DuplicateKeyException;, +import org.springframework.security.authentication.encoding.PasswordEncoder;, +import org.springframework.transaction.annotation.Transactional;, +, +	private final PasswordEncoder passwordEncoder;, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate, PasswordEncoder passwordEncoder) {, +		this.passwordEncoder = passwordEncoder;, +	}, +, +	@Transactional, +	public void createUser(ShowcaseUser user) throws UsernameAlreadyInUseException {, +		try {, +			jdbcTemplate.update(, +					"insert into ShowcaseUser (firstName, lastName, username, password) values (?, ?, ?, ?)",, +					user.getFirstName(), user.getLastName(), user.getUsername(),, +					passwordEncoder.encodePassword(user.getPassword(), null));, +		} catch (DuplicateKeyException e) {, +			throw new UsernameAlreadyInUseException(user.getUsername());, +		}, +		return jdbcTemplate.queryForObject("select username, firstName, lastName from ShowcaseUser where username = ?",, +						return new ShowcaseUser(rs.getString("username"), null, rs.getString("firstName"), rs, +								.getString("lastName"));, +++ b/samples/spring-social-showcase/pom.xml, +	    , +, +		<!-- JSR 303 with Hibernate Validator -->, +		<dependency>, +			<groupId>javax.validation</groupId>, +			<artifactId>validation-api</artifactId>, +			<version>1.0.0.GA</version>, +		</dependency>, +		<dependency>, +			<groupId>org.hibernate</groupId>, +			<artifactId>hibernate-validator</artifactId>, +			<version>4.1.0.Final</version>, +		</dependency>, +	    , +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import org.springframework.dao.DuplicateKeyException;]
[+++ b/LICENSE, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the, +      Work or Derivative Works thereof in any medium, with or without, +      modifications, and in Source or Object form, provided that You, +      meet the following conditions:, +, +      (a) You must give any other recipients of the Work or, +          Derivative Works a copy of this License; and, +, +      (b) You must cause any modified files to carry prominent notices, +          stating that You changed the files; and, +]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +import org.springframework.social.facebook.FacebookOperations;, +			FacebookProfile userProfile = getFacebookApi(user).getUserProfile();, +		getFacebookApi(user).updateStatus(message);, +, +	private FacebookOperations getFacebookApi(Principal user) {, +		return facebookProvider.getConnections(user.getName()).get(0).getServiceApi();, +	}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +import org.springframework.social.facebook.FacebookOperations;, +			FacebookProfile userProfile = getFacebookApi(user).getUserProfile();, +		getFacebookApi(user).updateStatus(message);, +, +	private FacebookOperations getFacebookApi(Principal user) {, +		return facebookProvider.getConnections(user.getName()).get(0).getServiceApi();, +	}, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('kdonald', '6ae72b21df4fb9fad5f35021a5b8427bf8fb023793f4e1c43e34148fe9560183', 'Keith', 'Donald', 'kdonald@vmware.com');, +insert into Account (username, password, firstName, lastName, email) values ('rclarkson', 'fe65bc88d87f571e871721f4ad87cc7b0f47f5c7d9b9e3c2a0b4b8936023b36a', 'Roy', 'Clarkson', 'rclarkson@vmware.com');, +, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +import org.springframework.social.facebook.FacebookOperations;, +			FacebookProfile userProfile = getFacebookApi(user).getUserProfile();, +		getFacebookApi(user).updateStatus(message);, +, +	private FacebookOperations getFacebookApi(Principal user) {, +		return facebookProvider.getConnections(user.getName()).get(0).getServiceApi();, +	}, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('kdonald', '6ae72b21df4fb9fad5f35021a5b8427bf8fb023793f4e1c43e34148fe9560183', 'Keith', 'Donald', 'kdonald@vmware.com');, +insert into Account (username, password, firstName, lastName, email) values ('rclarkson', 'fe65bc88d87f571e871721f4ad87cc7b0f47f5c7d9b9e3c2a0b4b8936023b36a', 'Roy', 'Clarkson', 'rclarkson@vmware.com');, +, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +	<import resource="../properties.xml" />   	, +, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +import org.springframework.social.facebook.FacebookOperations;, +			FacebookProfile userProfile = getFacebookApi(user).getUserProfile();, +		getFacebookApi(user).updateStatus(message);, +, +	private FacebookOperations getFacebookApi(Principal user) {, +		return facebookProvider.getConnections(user.getName()).get(0).getServiceApi();, +	}, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('kdonald', '6ae72b21df4fb9fad5f35021a5b8427bf8fb023793f4e1c43e34148fe9560183', 'Keith', 'Donald', 'kdonald@vmware.com');, +insert into Account (username, password, firstName, lastName, email) values ('rclarkson', 'fe65bc88d87f571e871721f4ad87cc7b0f47f5c7d9b9e3c2a0b4b8936023b36a', 'Roy', 'Clarkson', 'rclarkson@vmware.com');, +, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +	<import resource="../properties.xml" />   	, +, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/properties.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans", +	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">, +	, +	<!-- Replaces ${placeholders} with values from application.properties file -->, +	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">, +		<property name="location" value="classpath:application.properties" />, +		<property name="ignoreResourceNotFound" value="true" />, +		<property name="valueSeparator" value="?" />, +, +		<!-- Defaults if no placeholder is present -->, +		<property name="properties">, +			<props>, +				<prop key="application.url">http://localhost:8080/spring-social-showcase</prop>, +			</props>, +		</property>, +	</bean>, +	, +</beans>, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +import org.springframework.social.facebook.FacebookOperations;, +			FacebookProfile userProfile = getFacebookApi(user).getUserProfile();, +		getFacebookApi(user).updateStatus(message);, +, +	private FacebookOperations getFacebookApi(Principal user) {, +		return facebookProvider.getConnections(user.getName()).get(0).getServiceApi();, +	}, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('kdonald', '6ae72b21df4fb9fad5f35021a5b8427bf8fb023793f4e1c43e34148fe9560183', 'Keith', 'Donald', 'kdonald@vmware.com');, +insert into Account (username, password, firstName, lastName, email) values ('rclarkson', 'fe65bc88d87f571e871721f4ad87cc7b0f47f5c7d9b9e3c2a0b4b8936023b36a', 'Roy', 'Clarkson', 'rclarkson@vmware.com');, +, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg value="${application.url}" />, +	<import resource="../properties.xml" />   	, +, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/properties.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans", +	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */]
[+++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg ref="twitterProvider" />, +			<classname>TwitterSigninController</classname> is constructed with four arguments:, +			<listitem><para>A reference to a <classname>TwitterServiceProvider</classname> bean. <classname>TwitterSigninController</classname> will use this to negotiate the connection with Twitter.</para></listitem>, +    <constructor-arg ref="facebookProvider" />, +			It also needs a reference to a <classname>FacebookServiceProvider</classname> bean that it will use to negotiate the connection with Facebook.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +			return auth;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +			return auth;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +		StringBuffer sb = request.getRequestURL();]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import org.junit.Ignore;, +	@Ignore("Revisit this with a better response-content-based test later")]
[+++ b/build.gradle, +        compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, +    description = 'Spring Social Spring MVC extensions', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-oauth'), +    }, +}, +++ b/build.gradle, +        compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, +    description = 'Spring Social Spring MVC extensions', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-oauth'), +    }, +}, +++ b/samples/facebook-showcase-2/build.gradle, +    gradleVersion = '0.9.1', +	compile "org.springframework.social:spring-social-facebook:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-webmvc:1.0.0.BUILD-SNAPSHOT", +++ b/build.gradle, +        compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, +    description = 'Spring Social Spring MVC extensions', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-oauth'), +    }, +}, +++ b/samples/facebook-showcase-2/build.gradle, +    gradleVersion = '0.9.1', +	compile "org.springframework.social:spring-social-facebook:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-webmvc:1.0.0.BUILD-SNAPSHOT", +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +import org.springframework.social.facebook.provider.FacebookServiceProvider;, +++ b/build.gradle, +        compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, +    description = 'Spring Social Spring MVC extensions', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-oauth'), +    }, +}, +++ b/samples/facebook-showcase-2/build.gradle, +    gradleVersion = '0.9.1', +	compile "org.springframework.social:spring-social-facebook:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-webmvc:1.0.0.BUILD-SNAPSHOT", +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +import org.springframework.social.facebook.provider.FacebookServiceProvider;, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ServiceProviders-data.sql, +insert into ServiceProvider (name, displayName, implementation, apiKey, secret, appId, authorizeUrl, accessTokenUrl) values ('facebook', 'Facebook', 'org.springframework.social.facebook.provider.FacebookServiceProvider', '0b754d95f9c9899b0d6c4454b6f2dde7', 'fa8a9825f555a7a8949ec48fb93bda58', 162886103757745, 'https://graph.facebook.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}', 'https://graph.facebook.com/oauth/access_token');, +++ b/build.gradle, +        compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, +    description = 'Spring Social Spring MVC extensions', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-oauth'), +    }, +}, +++ b/samples/facebook-showcase-2/build.gradle, +    gradleVersion = '0.9.1', +	compile "org.springframework.social:spring-social-facebook:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-webmvc:1.0.0.BUILD-SNAPSHOT", +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +import org.springframework.social.facebook.provider.FacebookServiceProvider;, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ServiceProviders-data.sql, +insert into ServiceProvider (name, displayName, implementation, apiKey, secret, appId, authorizeUrl, accessTokenUrl) values ('facebook', 'Facebook', 'org.springframework.social.facebook.provider.FacebookServiceProvider', '0b754d95f9c9899b0d6c4454b6f2dde7', 'fa8a9825f555a7a8949ec48fb93bda58', 162886103757745, 'https://graph.facebook.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}', 'https://graph.facebook.com/oauth/access_token');, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController">, +++ b/build.gradle, +        compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, +    description = 'Spring Social Spring MVC extensions', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile project(':spring-social-connect'), +        compile project(':spring-social-oauth'), +    }, +}, +++ b/samples/facebook-showcase-2/build.gradle, +    gradleVersion = '0.9.1', +	compile "org.springframework.social:spring-social-facebook:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-webmvc:1.0.0.BUILD-SNAPSHOT", +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, +import org.springframework.social.facebook.provider.FacebookServiceProvider;, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ServiceProviders-data.sql, +insert into ServiceProvider (name, displayName, implementation, apiKey, secret, appId, authorizeUrl, accessTokenUrl) values ('facebook', 'Facebook', 'org.springframework.social.facebook.provider.FacebookServiceProvider', '0b754d95f9c9899b0d6c4454b6f2dde7', 'fa8a9825f555a7a8949ec48fb93bda58', 162886103757745, 'https://graph.facebook.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}', 'https://graph.facebook.com/oauth/access_token');, +++ b/samples/facebook-showcase-2/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController">, +++ b/samples/facebook-showcase/build.gradle, +	compile "org.springframework.social:spring-social-facebook:1.0.0.BUILD-SNAPSHOT"]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import javax.inject.Inject;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +	private String connectionStatusUrlPath = "/connect/";, +	 * Sets the URL path prefix for connection status redirects., +	 * @param connectionStatusUrlPath the URL path prefix for connection status redirects., +	public void setConnectionStatusUrlPath(String connectionStatusUrlPath) {, +		this.connectionStatusUrlPath = connectionStatusUrlPath;, +		String path = connectionStatusUrlPath + providerId + getPathExtension(servletRequest);]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest.java]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 23, 2011), +++ b/build.gradle, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 23, 2011), +++ b/docs/src/reference/docbook/connecting.xml, +    public TwitterServiceProvider twitter(@Value("#{environment['twitter.consumerKey']}") String consumerKey,, +            @Value("#{environment['twitter.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, +    public FacebookServiceProvider facebook(@Value("#{environment['facebook.appId']}") String appId,, +            @Value("#{environment['facebook.appSecret']}") String appSecret, ConnectionRepository connectionRepository) {, +    public TripItServiceProvider tripit(@Value("#{environment['tripit.consumerKey']}") String consumerKey,, +            @Value("#{environment['tripit.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as properties of the current environment., +    public TextEncryptor textEncryptor(@Value("#{environment['security.encryptPassword']}") String password,, +            @Value("#{environment['security.encryptSalt']}") String salt) {, +        <constructor-arg value="#{environment['twitter.consumerKey']}" />, +        <constructor-arg value="#{environment['twitter.consumerSecret']}" />, +        <constructor-arg value="#{environment['facebook.appId']}" />, +        <constructor-arg value="#{environment['facebook.appSecret']}" />, +        <constructor-arg value="#{environment['tripit.consumerKey']}" />, +        <constructor-arg value="#{environment['tripit.consumerSecret']}" />, +            <constructor-arg value="#{environment['security.encryptPassword']}" />, +            <constructor-arg value="#{environment['security.encryptSalt']}" />, +    public ConnectController connectController(@Value("#{environment['application.url']}") String applicationUrl) {, +    <constructor-arg value="#{environment['application.url']}" />, +			Here the URL is retrieved as a context environment property named "application.url"., +public ConnectController connectController(@Value("#{environment['application.url']}") String applicationUrl) {, +++ b/build.gradle, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 23, 2011), +++ b/docs/src/reference/docbook/connecting.xml, +    public TwitterServiceProvider twitter(@Value("#{environment['twitter.consumerKey']}") String consumerKey,, +            @Value("#{environment['twitter.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, +    public FacebookServiceProvider facebook(@Value("#{environment['facebook.appId']}") String appId,, +            @Value("#{environment['facebook.appSecret']}") String appSecret, ConnectionRepository connectionRepository) {, +    public TripItServiceProvider tripit(@Value("#{environment['tripit.consumerKey']}") String consumerKey,, +            @Value("#{environment['tripit.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as properties of the current environment., +    public TextEncryptor textEncryptor(@Value("#{environment['security.encryptPassword']}") String password,, +            @Value("#{environment['security.encryptSalt']}") String salt) {, +        <constructor-arg value="#{environment['twitter.consumerKey']}" />, +        <constructor-arg value="#{environment['twitter.consumerSecret']}" />, +        <constructor-arg value="#{environment['facebook.appId']}" />, +        <constructor-arg value="#{environment['facebook.appSecret']}" />, +        <constructor-arg value="#{environment['tripit.consumerKey']}" />, +        <constructor-arg value="#{environment['tripit.consumerSecret']}" />, +            <constructor-arg value="#{environment['security.encryptPassword']}" />, +            <constructor-arg value="#{environment['security.encryptSalt']}" />, +    public ConnectController connectController(@Value("#{environment['application.url']}") String applicationUrl) {, +    <constructor-arg value="#{environment['application.url']}" />, +			Here the URL is retrieved as a context environment property named "application.url"., +public ConnectController connectController(@Value("#{environment['application.url']}") String applicationUrl) {, +++ b/docs/src/reference/docbook/signin.xml, +					<listitem><para>If the received access token doesn't match any existing connection, <classname>TwitterSigninController</classname> will proceed to a no-connection view. The default no-connection view is "redirect:/signup".</para></listitem>, +		<para>[[[TODO: Document the deferred connection-after-signup stuff!!!]]]</para>, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>, +			The <code><![CDATA[<facebook:init>]]></code> will initialize the Facebook JavaScript library with your application's app id.]
[+++ b/build.gradle, +    httpComponentsVersion = '4.2.1', +++ b/build.gradle, +    httpComponentsVersion = '4.2.1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +++ b/build.gradle, +    httpComponentsVersion = '4.2.1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private final boolean parameterBasedClientAuthentication; , +, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * Assumes that those credentials will be presented to the provider using HTTP Basic authentication., +	 * Also assumes that the authorization URL is the same as the authentication URL., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token., +	 */, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, false);, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials., +	 * Allows for client credentials to be presented to the provider via client_id and client_secret parameters. , +	 * Assumes that the authorization URL is the same as the authentication URL., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token., +	 * @param parameterBasedClientAuthentication if true, the client will be authenticated with the provider using parameters instead of HTTP Basic., +	 */, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl, boolean parameterBasedClientAuthentication) {, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, parameterBasedClientAuthentication);, +	}, +, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * Assumes that those credentials will be presented to the provider using HTTP Basic authentication., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param authenticateUrl the URL to redirect to when doing authentication via authorization code grant, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token, +	 */, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, false);, +	}, +	, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param authenticateUrl the URL to redirect to when doing authentication via authorization code grant, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token, +	 * @param parameterBasedClientAuthentication if true, the client will be authenticated with the provider using parameters instead of HTTP Basic., +	 */, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String authenticateUrl, String accessTokenUrl, boolean parameterBasedClientAuthentication) {, +		this.parameterBasedClientAuthentication = parameterBasedClientAuthentication;, +		if (!parameterBasedClientAuthentication) {, +			restTemplate.getInterceptors().add(new PreemptiveBasicAuthClientHttpRequestInterceptor(clientId, clientSecret));, +		}, +		if (parameterBasedClientAuthentication) {, +		}, +		if (parameterBasedClientAuthentication) {, +		}, +		ClientHttpRequestFactory requestFactory = ClientHttpRequestFactorySelector.getRequestFactory();, +		RestTemplate restTemplate = new RestTemplate(requestFactory);, +++ b/build.gradle, +    httpComponentsVersion = '4.2.1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private final boolean parameterBasedClientAuthentication; , +, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * Assumes that those credentials will be presented to the provider using HTTP Basic authentication., +	 * Also assumes that the authorization URL is the same as the authentication URL., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token., +	 */, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, false);, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials., +	 * Allows for client credentials to be presented to the provider via client_id and client_secret parameters. , +	 * Assumes that the authorization URL is the same as the authentication URL., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token., +	 * @param parameterBasedClientAuthentication if true, the client will be authenticated with the provider using parameters instead of HTTP Basic., +	 */, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl, boolean parameterBasedClientAuthentication) {, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, parameterBasedClientAuthentication);, +	}, +, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * Assumes that those credentials will be presented to the provider using HTTP Basic authentication.]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +OAuth2Operations oauth2Operations = connectionFactory.getOAuth2Operations();, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, new AuthorizationParameters(callbackUrl));, +AccessGrant accessGrant = oauth2Operations.exchangeForAccess(authorizationCode, callbackUrl);, +OAuth2Operations oauth2Operations = connectionFactory.getOAuth2Operations();, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, new AuthorizationParameters(callbackUrl));, +    OAuthToken fetchRequestToken(String callbackUrl, MultiValueMap<String, String> additionalParameters);, +			<para>, +				The example code below shows use of a FacebookServiceProviderConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above., +				Here, FacebookServiceProviderConnectionFactory is a subclass of OAuth2ServiceProviderConnectionFactory:, +				<programlisting language="java"><![CDATA[, +TwitterServiceProviderConnectionFactory connectionFactory = new TwitterServiceProviderConnectionFactory();, +OAuth1Operations oauth1Operations = connectionFactory.getOAuth1Operations();, +String requestToken = oauth1Operations.fetchRequestToken(callbackUrl);, +String authorizeUrl = oauth1Operations.buildAuthorizeUrl(requestToken, AuthorizationParameters.NONE);, +response.sendRedirect(authorizeUrl);, +// when the provider callback is received with the oauth_token and oauth_verifier parameters:, +OAuthToken accessToken = oauth1Operations.exchangeForAccessToken(new AuthorizedRequestToken(oauthToken, oauthVerifier));, +ServiceProviderConnection<FacebookApi> connection = connectionFactory.createConnection(accessToken);]]>, +				</programlisting>, +			</para>			]
[+++ b/.gitignore, +Thumbs.db, +build, +bin, +.classpath, +.project, +.settings, +++ b/.gitignore, +Thumbs.db, +build, +bin, +.classpath, +.project, +.settings, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + 	 * Sets the default URL to redirect the user to after signing in using a provider., +			String originalUrl = signInAdapter.signIn(userId, connection, request);, +			return originalUrl != null ? redirect(originalUrl) : redirect(postSignInUrl);]
[+++ b/docs/src/reference/docbook/signin.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="signin" xmlns:xlink="http://www.w3.org/1999/xlink">, +		<para>, +			Once a connection has been established between a user's consumer account and their service provider profile, that connection can be used to authenticate them to the consumer application by asking them to sign in to the service provider. , +			Spring Social supports such service provider-based authentication with Twitter and Facebook., +		</para>, +		<para>, +			Spring Social's <classname>TwitterSigninController</classname> is a Spring MVC controller that processes the "Sign in with Twitter" flow described at <ulink url="http://dev.twitter.com/pages/sign_in_with_twitter"/>. , +			Essentially, this process is an OAuth 1 authorization flow, quite similar to the flow that <classname>ConnectController</classname> processes for connecting an account with Twitter. , +			The key difference is that instead of presenting the user with an authorization page that asks for permission to be granted to the application, the sign in flow presents a simple authentication page that only asks the user to sign in to Twitter., +		</para>, +		<para>, +			At the end of process, <classname>TwitterSigninController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., +		</para>, +		<para>, +			To add "Sign in with Twitter" capability to your Spring application, configure <classname>TwitterSigninController</classname> as a bean in your Spring MVC application:, +		</para>, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +</bean>]]>, +		</programlisting>, +		<para>, +			<classname>TwitterSigninController</classname> is constructed with three arguments:, +		</para>, +		<para>, +			<classname>TwitterSigninController</classname> supports the following flow:, +		</para>, +		<para>, +			<classname>TwitterSigninController</classname> handles the authentication flow with Twitter, but relies on an implementation of <interfacename>SignInControllerGateway</interfacename> to perform the actual authentication into the application. <interfacename>SignInControllerGateway</interfacename> is defined as follows:, +		</para>, +		<programlisting language="java"><![CDATA[, +public interface SignInControllerGateway {, +}]]>, +		</programlisting>, +		<para>, +			Different applications will implement security differently, so each application must implement <interfacename>SignInControllerGateway</interfacename> in a way that fits its unique security scheme., +			As an example, suppose that an application's security is based Spring Security and simply uses a user's account ID as their principal. , +			In that case, a simple implementation of <interfacename>SignInControllerGateway</interfacename> might look like this:, +		</para>, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase;, +        SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(accountId, null, null));, +}]]>, +		</programlisting>, +		<para>, +      		The last thing to do is to add a "Sign in with Twitter" button to your application:, +  		</para>, +		<programlisting language="xml"><![CDATA[, +<form id="tw_signin" action="<c:url value="/signin/twitter"/>" method="POST">, +</form>]]>, +		</programlisting>, +		<para>, +			Clicking this button will trigger a POST request to "/signin/twitter", kicking off the Twitter sign in flow. , +			If the user has not yet signed into Twitter, the user will be presented with the following page from Twitter:, +		</para>, +				<imagedata fileref="images/sign-in-with-twitter.png" format="PNG" align="center" scale="40"/>, +		<para>, +			After signing in, the flow will redirect back to the application to complete the sign in process., +		</para>, +    	<para>, +    		If the user has already signed into Twitter prior to clicking the sign in button, Twitter will redirect the flow back to the application without presenting the user with a sign in page., +		</para>, +		<para>, +			Spring Social's <classname>FacebookSigninController</classname>, when paired with Facebook's <code><![CDATA[<fb:login-button>]]></code> XFBML tag<footnote><para><ulink url="http://developers.facebook.com/docs/reference/plugins/login/"/></para></footnote>, enables a user to authenticate to an application by first signing into Facebook., +		</para>, +		<para>, +			Facebook's XFBML tag collection includes <code><![CDATA[<fb:login-button>]]></code>, which displays a login button. , +			When a user clicks on that button, they will be presented with a Facebook Login dialog that looks similar to this:, +		</para>, +				<imagedata fileref="images/sign-in-with-facebook.png" format="PNG" align="center" scale="40"/>, +		<para>, +			After successfully signing into Facebook, a cookie will be written that contains an access token. , +			If the user has previously established a connection between their account and their Facebook profile, this access token will be the same token that was issued before. , +			<classname>FacebookSigninController</classname> works by extracting that access token from the cookie and using it to lookup a connected account and authenticate to that account., +		</para>, +		<para>, +			To enable "Sign in with Facebook" functionality in your application, start by configuring <classname>FacebookSigninController</classname> as a bean in the Spring MVC configuration:, +		</para>, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.facebook.web.FacebookSigninController">, +</bean>]]>, +		</programlisting>, +		<para>, +			As with <classname>TwitterSigninController</classname>, <classname>FacebookSigninController</classname> depends on a connection repository to lookup connections and a sign in gateway to handle the actual application authentication., +		</para>, +		<para>, +			However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. , +			Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. , +			(The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) , +			It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures., +		</para>, +		<para>, +			With <classname>FacebookSigninController</classname> configured, the next thing to do is to load and initialize Facebook's JavaScript library and XFBML in your application's sign in page., +			Spring Social provides a convenient JSP tag to handle that work for you., +			Simply declare the Spring Social Facebook tag library in your JSP:, +		</para>, +		<programlisting language="xml"><![CDATA[, +<%@ taglib uri="http://www.springframework.org/spring-social/facebook/tags" prefix="facebook" %>]]>, +		</programlisting>, +		<para>]
[+++ b/build.gradle, +    h2Version = '1.3.156', +    jacksonVersion = '1.8.2', +    springSecurityCryptoVersion = '3.1.0.RC2.crypto', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityCryptoVersion") { optional = true }, +++ b/build.gradle, +    h2Version = '1.3.156', +    jacksonVersion = '1.8.2', +    springSecurityCryptoVersion = '3.1.0.RC2.crypto', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityCryptoVersion") { optional = true }, +++ b/docs/src/reference/docbook/connecting.xml, +        registry.addConnectionFactory(new FacebookConnectionFactory(, +            environment.getProperty("facebook.clientId"),, +        registry.addConnectionFactory(new TwitterConnectionFactory(, +            environment.getProperty("twitter.consumerKey"),, +    public ConnectionRepository connectionRepository(, +        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +        if (authentication == null) {, +            throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, +        }, +        return usersConnectionRepository().createConnectionRepository(authentication.getName());, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), , +                textEncryptor);, +<bean id="connectionFactoryLocator" , +      class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" , +      class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +<bean id="connectionRepository" factory-method="createConnectionRepository" , +      factory-bean="usersConnectionRepository" scope="request">, +    <aop:scoped-proxy proxy-target-class="false" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" , +              factory-method="noOpText" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" , +              factory-method="text">, +        return new ConnectController(connectionFactoryLocator(), , +                connectionRepository());, +    <!-- relies on by-type autowiring for the constructor-args -->, +			When coordinating a connection with a service provider, <classname>ConnectController</classname> constructs a callback URL for the provider to redirect to after the user grants authorization., +			By default <classname>ConnectController</classname> uses information from the request to determine the protocol, host name, and port number to use when creating the callback URL., +			This is fine in many cases, but if your application is hosted behind a proxy those details may point to an internal server and will not be suitable for constructing a public callback URL., +		</para>, +		<para>, +			If you have this problem, you can set the <code>applicationUrl</code> property to the base external URL of your application., +			<classname>ConnectController</classname> will use that URL to construct the callback URL instead of using information from the request., +			For example:, +		</para>, +		<programlisting language="java"><![CDATA[, +@Configuration, +public class SocialConfig {, +, +    @Bean, +    public ConnectController connectController() {, +        ConnectController controller = new ConnectController(, +                connectionFactoryLocator(), connectionRepository());, +        controller.setApplicationUrl(environment.getProperty("application.url"));, +        return controller;, +    }, +    , +}]]>, +		</programlisting>, +		, +		<para>, +			Or if you prefer XML configuration:, +		</para>, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.connect.web.ConnectController">, +    <!-- relies on by-type autowiring for the constructor-args -->, +    <property name="applicationUrl" value="${application.url}" />, +</bean>]]>, +		</programlisting>, +		<para>, +			Just as with the authorization keys and secrets, we recommend that you externalize the application URL because it will likely vary across different deployment environments., +		</para>, +		<para>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/>, +    </button></p>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/>, +    </button></p>, +    ConnectController controller = new ConnectController(connectionFactoryLocator(), , +            connectionRepository());, +++ b/build.gradle, +    h2Version = '1.3.156', +    jacksonVersion = '1.8.2', +    springSecurityCryptoVersion = '3.1.0.RC2.crypto', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityCryptoVersion") { optional = true }, +++ b/docs/src/reference/docbook/connecting.xml, +        registry.addConnectionFactory(new FacebookConnectionFactory(, +            environment.getProperty("facebook.clientId"),, +        registry.addConnectionFactory(new TwitterConnectionFactory(, +            environment.getProperty("twitter.consumerKey"),, +    public ConnectionRepository connectionRepository(, +        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +        if (authentication == null) {, +            throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, +        }, +        return usersConnectionRepository().createConnectionRepository(authentication.getName());, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), , +                textEncryptor);, +<bean id="connectionFactoryLocator" , +      class="org.springframework.social.connect.support.ConnectionFactoryRegistry">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1SigningRequestFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * Request factory that signs RestTemplate requests with an OAuth 1 Authorization header., + * Internally used for Spring 3.0 compatibility only. Spring 3.1 uses request interceptors., + * @author Craig Walls, + */, +class OAuth1SigningRequestFactory implements ClientHttpRequestFactory {, +	private final ClientHttpRequestFactory delegate;, +	private final String consumerKey;, +	private final String consumerSecret;, +	private final String accessToken;, +	private final String accessTokenSecret;, +, +	public OAuth1SigningRequestFactory(ClientHttpRequestFactory delegate, String consumerKey, String consumerSecret,, +			String accessToken, String accessTokenSecret) {, +		this.delegate = delegate;, +		this.consumerKey = consumerKey;, +		this.consumerSecret = consumerSecret;, +		this.accessToken = accessToken;, +		this.accessTokenSecret = accessTokenSecret;, +	}, +, +	public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		return new OAuth1SigningRequest(delegate.createRequest(uri, httpMethod), consumerKey, consumerSecret,, +				accessToken, accessTokenSecret);, +	}	, +, +	private static class OAuth1SigningRequest implements ClientHttpRequest {, +		private final ClientHttpRequest delegate;, +		private ByteArrayOutputStream bodyOutputStream;, +		private final String consumerKey;, +		private final String consumerSecret;, +		private final String accessToken;, +		private final String accessTokenSecret;, +, +		public OAuth1SigningRequest(ClientHttpRequest delegate, String consumerKey, String consumerSecret,, +				String accessToken, String accessTokenSecret) {, +			this.delegate = delegate;, +			this.consumerKey = consumerKey;, +			this.consumerSecret = consumerSecret;, +			this.accessToken = accessToken;, +			this.accessTokenSecret = accessTokenSecret;, +			this.bodyOutputStream = new ByteArrayOutputStream();, +		}, +, +		public ClientHttpResponse execute() throws IOException {, +			byte[] bufferedOutput = bodyOutputStream.toByteArray();, +			HttpHeaders headers = getHeaders();, +			String authorizationHeader = SigningUtils.buildAuthorizationHeaderValueFromClientHttpRequest(this,, +					bufferedOutput, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +			delegate.getBody().write(bufferedOutput);, +			delegate.getHeaders().putAll(headers);, +			delegate.getHeaders().set("Authorization", authorizationHeader);, +			return delegate.execute();, +		}, +, +		public URI getURI() {, +			return delegate.getURI();, +		}, +, +		public HttpMethod getMethod() {, +			return delegate.getMethod();, +		}, +, +		public HttpHeaders getHeaders() {, +			return delegate.getHeaders();, +		}, +, +		public OutputStream getBody() throws IOException {, +			return bodyOutputStream;, +		}, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors.]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String clientKey = element.getAttribute("app-key");, +		String clientSecret = element.getAttribute("app-secret");, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String clientKey = element.getAttribute("app-key");, +		String clientSecret = element.getAttribute("app-secret");, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="app-key" use="required" type="xsd:string">, +			<xsd:attribute name="app-secret" use="required" type="xsd:string">, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String clientKey = element.getAttribute("app-key");, +		String clientSecret = element.getAttribute("app-secret");, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="app-key" use="required" type="xsd:string">, +			<xsd:attribute name="app-secret" use="required" type="xsd:string">, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider , +		class="org.springframework.social.twitter.connect.TwitterServiceProvider" , +		app-key="twitter_key" , +		app-secret="twitter_secret" />, +		class="org.springframework.social.facebook.connect.FacebookServiceProvider" , +		app-key="facebook_key" , +		app-secret="facebook_secret" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final OAuth1Version version;, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, +	 * @param version the version of OAuth 1, either 10 or 10a., +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, +		this.version = version;, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final OAuth1Version version;, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, +	 * @param version the version of OAuth 1, either 10 or 10a., +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, +		this.version = version;, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Version.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +/**, + * Various versions ofthe OAuth1 Core specification., + * Used by {@link OAuth1Template} to vary behavior its by the configured version., + * @author Keith Donald, + */, +public enum OAuth1Version {, +	, +	/**, +	 * OAuth Core Version 1.0., +	 */, +	CORE_10, , +	, +	/**, +	 * OAuth Core Version 1.0 Revision A., +	 */, +	CORE_10_REVISION_A, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final OAuth1Version version;, +		this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, +	 * @param version the version of OAuth 1, either 10 or 10a., +	public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, +		this.version = version;, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +		if (version == OAuth1Version.CORE_10_REVISION_A) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Version.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +/**, + * Various versions ofthe OAuth1 Core specification., + * Used by {@link OAuth1Template} to vary behavior its by the configured version., + * @author Keith Donald, + */, +public enum OAuth1Version {, +	, +	/**, +	 * OAuth Core Version 1.0., +	 */, +	CORE_10, , +	, +	/**, +	 * OAuth Core Version 1.0 Revision A., +	 */, +	CORE_10_REVISION_A, +	, +}, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java]
[+++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +++ b/gradle.properties, +springVersion           = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +public class SocialAuthenticationFailureHandler implements AuthenticationFailureHandler {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +public class SocialAuthenticationFailureHandler implements AuthenticationFailureHandler {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ProviderServerErrorException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred on the provider's server., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ProviderServerErrorException extends ApiException {, +, +	public ProviderServerErrorException(String message) {, +		super(message);, +	}, +, +	public ProviderServerErrorException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderServerErrorException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates that an error occurred on the provider's server., + * @author Craig Walls, + */, +@SuppressWarnings("serial"), +public class ProviderServerErrorException extends ApiException {, +, +	public ProviderServerErrorException(String message) {, +		super(message);, +	}, +, +	public ProviderServerErrorException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiAdapter.java]
[+++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @return the provider ID, +	 * @return the service provider, +	 * @return the ApiAdapter, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @return the provider ID, +	 * @return the service provider, +	 * @return the ApiAdapter, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @param providerId the provider ID used to look up the ConnectionFactory., +	 * @return the requested ConnectionFactory, +	 * @param apiType the Java type of the API binding used to lookup a matching ConnectionFactory, +	 * @param <A> the API binding type, +     * @return the requested ConnectionFactory, +	 * @return a Set of String containing all of the provider IDs registered with this ConnectionFactoryLocator., +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.io.Serializable;, +import java.util.List;, +, +/**, + * Models the provider of a service that local user accounts may connect to and invoke., + * Exposes service provider metadata along with connection management operations that allow for account connections to be established., + * Also acts as a factory for a strongly-typed service API (S)., + * Once a connection with this provider is established, the service API can be used by the application to invoke the service on behalf of the member., + * @author Keith Donald, + * @param <S> The service hosted by this service provider., + */, +public interface ServiceProvider<S> {, +, +	/**, +	 * Uniquely identifies this service provider., +	 * Should be lower case and not contain spaces or special characters., +	 * Also used as a key for provider connections stored in a shared repository., +	 */, +	String getId();, +	, +	/**, +	 * Returns true if the user account has one or more connections to this provider, false otherwise., +	 * @param accountId the application account ID to check for a connection with this provider., +	 */, +	boolean isConnected(Serializable accountId);, +, +	/**, +	 * Get the connections established between a user account and this service provider., +	 * The connections are ordered by rank., +	 * The first connection in the list is the "primary" connection between the account and this service provider., +	 * @param accountId a user account id, +	 * @return the account's connections to this service provider, +	 */, +	List<ServiceProviderConnection<S>> getConnections(Serializable accountId);]
[+++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +	@SuppressWarnings("unchecked"), +	@Test, +	public void addConnection_authenticated() throws Exception {, +, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", null);, +		env.filter.setFilterProcessesUrl(env.req.getRequestURI());, +		env.filter.setPostLoginUrl("/success");, +		env.filter.setConnectionAddedRedirectUrl("/added");, +		env.filter.setConnectionAddingFailureRedirectUrl("/add-failed");, +, +		Connection<?> connection = env.auth.getConnection();, +		ConnectionData data = connection.createData();, +		String userId = "joe";, +, +		ConnectionFactory<Object> factory = mock(MockConnectionFactory.class);, +		when(factory.getProviderId()).thenReturn("mock");, +		when(factory.createConnection(data)).thenReturn((Connection<Object>) connection);, +		env.req.setRequestURI(env.req.getRequestURI() + "/" + factory.getProviderId());, +, +		SocialAuthenticationService<Object> authService = mock(SocialAuthenticationService.class);, +		when(authService.getConnectionCardinality()).thenReturn(ConnectionCardinality.ONE_TO_ONE);, +		when(authService.getConnectionFactory()).thenReturn(factory);, +		when(authService.getAuthToken(env.req, env.res)).thenReturn(env.auth);, +		env.addAuthService(authService);, +, +		when(env.userIdSource.getUserId()).thenReturn(userId);, +, +		when(env.usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), set(data.getProviderUserId()))).thenReturn(empty(String.class));, +, +		// fallback to default /added, +		when(authService.getConnectionAddedRedirectUrl(env.req, connection)).thenReturn(null);, +, +		// already authenticated, +		SecurityContextHolder.getContext().setAuthentication(env.authSuccess);, +, +		env.doFilter();, +, +		// still authenticated, +		assertSame(env.authSuccess, SecurityContextHolder.getContext().getAuthentication());, +, +		assertEquals("/added", env.res.getRedirectedUrl());, +, +		verify(env.connectionRepository).addConnection(env.auth.getConnection());, +	}, +, +	@SuppressWarnings("unchecked"), +	@Test, +	public void addConnection_authenticated_failed() throws Exception {, +, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", null);, +		env.filter.setFilterProcessesUrl(env.req.getRequestURI());, +		env.filter.setPostLoginUrl("/success");, +		env.filter.setConnectionAddedRedirectUrl("/added");, +		env.filter.setConnectionAddingFailureRedirectUrl("/add-failed");, +, +		Connection<?> connection = env.auth.getConnection();, +		ConnectionData data = connection.createData();, +		String userId = "joe";, +, +		ConnectionFactory<Object> factory = mock(MockConnectionFactory.class);, +		when(factory.getProviderId()).thenReturn("mock");, +		when(factory.createConnection(data)).thenReturn((Connection<Object>) connection);, +		env.req.setRequestURI(env.req.getRequestURI() + "/" + factory.getProviderId());, +, +		SocialAuthenticationService<Object> authService = mock(SocialAuthenticationService.class);, +		when(authService.getConnectionCardinality()).thenReturn(ConnectionCardinality.ONE_TO_ONE);, +		when(authService.getConnectionFactory()).thenReturn(factory);, +		when(authService.getAuthToken(env.req, env.res)).thenReturn(env.auth);, +		env.addAuthService(authService);, +, +		when(env.userIdSource.getUserId()).thenReturn(userId);, +, +		// already connected, +		when(env.usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), set(data.getProviderUserId()))).thenReturn(set(userId));, +, +		// already authenticated, +		SecurityContextHolder.getContext().setAuthentication(env.authSuccess);, +, +		env.doFilter();, +, +		// still authenticated, +		assertSame(env.authSuccess, SecurityContextHolder.getContext().getAuthentication());, +, +		assertEquals("/add-failed", env.res.getRedirectedUrl());, +, +		verify(env.connectionRepository, times(0)).addConnection(env.auth.getConnection());, +	}, +, +		private final UserIdSource userIdSource;, +		private final UsersConnectionRepository usersConnectionRepository;, +		private final ConnectionRepository connectionRepository;, +			userIdSource = mock(UserIdSource.class);, +			usersConnectionRepository = mock(UsersConnectionRepository.class);, +			connectionRepository = mock(ConnectionRepository.class);, +			filter = new SocialAuthenticationFilter(authManager, userIdSource, usersConnectionRepository, new SocialAuthenticationServiceRegistry());, +			when(filter.getUsersConnectionRepository().createConnectionRepository(Mockito.anyString())).thenReturn(connectionRepository);, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +	@SuppressWarnings("unchecked"), +	@Test]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +			response.setHeader("Pragma", "no-cache");, +			response.setDateHeader("Expires", 1L);, +			response.setHeader("Cache-Control", "no-cache");, +			response.addHeader("Cache-Control", "no-store");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	/**, +	 * The command to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 * @see #findUserIdsWithConnection(Connection), +	 */, +	void setConnectionSignUp(ConnectionSignUp connectionSignUp);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	/**, +	 * The command to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 * @see #findUserIdsWithConnection(Connection), +	 */, +	void setConnectionSignUp(ConnectionSignUp connectionSignUp);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +	@Override, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	/**, +	 * The command to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 * @see #findUserIdsWithConnection(Connection), +	 */, +	void setConnectionSignUp(ConnectionSignUp connectionSignUp);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +	@Override, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +import java.util.Set;, +		if (connections.isEmpty()) {, +			MultiValueMap<String, Connection<?>> result = new LinkedMultiValueMap<String, Connection<?>>();, +			Set<String> registeredProviderIds = connectionFactoryLocator.registeredProviderIds();, +			for (String registeredProviderId : registeredProviderIds) {, +				result.put(registeredProviderId, Collections.<Connection<?>>emptyList());, +			}, +			return result;, +		} else {, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	/**, +	 * The command to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 * @see #findUserIdsWithConnection(Connection), +	 */, +	void setConnectionSignUp(ConnectionSignUp connectionSignUp);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +	@Override, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +import java.util.Set;, +		if (connections.isEmpty()) {, +			MultiValueMap<String, Connection<?>> result = new LinkedMultiValueMap<String, Connection<?>>();, +			Set<String> registeredProviderIds = connectionFactoryLocator.registeredProviderIds();, +			for (String registeredProviderId : registeredProviderIds) {, +				result.put(registeredProviderId, Collections.<Connection<?>>emptyList());, +			}, +			return result;, +		} else {, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +	@Override, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	/**, +	 * The command to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 * @see #findUserIdsWithConnection(Connection), +	 */, +	void setConnectionSignUp(ConnectionSignUp connectionSignUp);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +	@Override, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +import java.util.Set;, +		if (connections.isEmpty()) {, +			MultiValueMap<String, Connection<?>> result = new LinkedMultiValueMap<String, Connection<?>>();, +			Set<String> registeredProviderIds = connectionFactoryLocator.registeredProviderIds();, +			for (String registeredProviderId : registeredProviderIds) {, +				result.put(registeredProviderId, Collections.<Connection<?>>emptyList());, +			}, +			return result;, +		} else {, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepository.java, +	@Override, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/AbstractUsersConnectionRepositoryTest.java, +package org.springframework.social.connect.jdbc;, +, +import static org.hamcrest.Matchers.hasItems;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +import org.junit.Before;]
[+++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-facebook</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-facebook</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-facebook</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-facebook</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-facebook</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-facebook</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +package org.springframework.social.showcase;, +, +import java.security.Principal;, +import java.util.List;, +, +import javax.inject.Inject;, +, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.stereotype.Controller;, +import org.springframework.ui.Model;, +import org.springframework.web.bind.annotation.RequestMapping;, +, +@Controller, +public class ShowcaseController {, +	private final List<ServiceProvider<?>> serviceProviders;, +, +	@Inject, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +		this.serviceProviders = serviceProviders;, +	}, +, +	@RequestMapping("/"), +	public String home(Principal user, Model model) {, +		if (user != null) {, +			for (ServiceProvider<?> serviceProvider : serviceProviders) {, +				model.addAttribute(serviceProvider.getId() + "_status", serviceProvider.getConnections(user.getName()), +						.size() > 0 ? "Yes" : "No");, +			}, +			return "home";, +		}, +, +		return "homeGuest";, +	}, +}, +++ b/samples/spring-social-showcase/pom.xml, +		    <artifactId>spring-social-facebook</artifactId>, +	        <version>${org.springframework.social-version}</version>, +	    </dependency>, +		<dependency>, +		    <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +package org.springframework.social.showcase;, +, +import java.security.Principal;, +import java.util.List;]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * @param postFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * @param postFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	 * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param postFailureUrl the URL to redirect to after an authentication fail or authorization deny, +	 * @deprecated use {@link #postFailureUrl(String)} instead, +	@Deprecated, +		postFailureUrl(defaultFailureUrl);]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +			Once established, a FacebookApi instance can be obtained and used to post content to the user's wall., +			Some service providers use OAuth, others use Basic Auth, others may use something else.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +import java.util.UUID;, +, +	 * Generates a value for the state parameter., +	 * @return a random UUID by default. , +	 */, +	public String generateState() {, +		return UUID.randomUUID().toString();, +	}, +, +	/**, +	 * Indicates that this provider supports the state parameter in callbacks to prevent against CSRF., +	 * Default implementation returns true. , +	 */, +	public boolean supportsStateParameter() {, +		return true;, +	}, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +import java.util.UUID;, +, +	 * Generates a value for the state parameter., +	 * @return a random UUID by default. , +	 */, +	public String generateState() {, +		return UUID.randomUUID().toString();, +	}, +, +	/**, +	 * Indicates that this provider supports the state parameter in callbacks to prevent against CSRF., +	 * Default implementation returns true. , +	 */, +	public boolean supportsStateParameter() {, +		return true;, +	}, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +import java.util.UUID;, +, +	 * Generates a value for the state parameter., +	 * @return a random UUID by default. , +	 */, +	public String generateState() {, +		return UUID.randomUUID().toString();, +	}, +, +	/**, +	 * Indicates that this provider supports the state parameter in callbacks to prevent against CSRF., +	 * Default implementation returns true. , +	 */, +	public boolean supportsStateParameter() {, +		return true;, +	}, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +		if (connectionFactory.supportsStateParameter()) {, +			verifyStateParameter(request);, +		}, +		, +	private void verifyStateParameter(NativeWebRequest request) {, +		String state = request.getParameter("state");, +		String originalState = extractCachedOAuth2State(request);, +		if (state != null && !state.equals(originalState)) {, +			throw new IllegalStateException("The OAuth2 'state' parameter doesn't match.");, +		}, +	}, +, +		String state = connectionFactory.generateState();, +		parameters.add("state", state);, +		request.setAttribute(OAUTH2_STATE_ATTRIBUTE, state, RequestAttributes.SCOPE_SESSION);, +	private String extractCachedOAuth2State(WebRequest request) {, +		String state = (String) request.getAttribute(OAUTH2_STATE_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +		request.removeAttribute(OAUTH2_STATE_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +		return state;		, +	}, +	, +	private static final String OAUTH2_STATE_ATTRIBUTE = "oauth2State";, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +import java.util.UUID;, +, +	 * Generates a value for the state parameter., +	 * @return a random UUID by default. , +	 */, +	public String generateState() {, +		return UUID.randomUUID().toString();, +	}, +]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	public void setSignupUrl(String signupUrl) {, +		this.signupUrl = signupUrl;, +	}, +, +	public void setConnectionAddedRedirectUrl(String connectionAddedRedirectUrl) {, +		this.connectionAddedRedirectUrl = connectionAddedRedirectUrl;, +	}, +, +	public void setUpdateConnections(boolean updateConnections) {, +		this.updateConnections = updateConnections;, +	}, +, +	public void setPostLoginUrl(String postLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setDefaultTargetUrl(postLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set postLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +, +	public void setPostFailureUrl(String postFailureUrl) {, +		AuthenticationFailureHandler failureHandler = getFailureHandler();, +		if (failureHandler instanceof SimpleUrlAuthenticationFailureHandler) {, +			SimpleUrlAuthenticationFailureHandler h = (SimpleUrlAuthenticationFailureHandler) failureHandler;, +			h.setDefaultFailureUrl(postFailureUrl);, +		} else {, +			throw new IllegalStateException("can't set postFailureUrl on unknown failureHandler, type is " + failureHandler.getClass().getName());, +		}, +	}, +	, +	public UserIdExtractor getUserIdExtractor() {, +		return userIdExtractor;, +	}, +, +	public UsersConnectionRepository getUsersConnectionRepository() {, +		return usersConnectionRepository;, +	}, +, +	public SocialAuthenticationServiceLocator getAuthServiceLocator() {, +		return authServiceLocator;, +	}, +	, +		Set<String> connectedUserIds = usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), userIdSet);, +				redirectUrl = connectionAddedRedirectUrl;, +			if (signupUrl != null) {, +				throw new SocialAuthenticationRedirectException(signupUrl);, +		if (updateConnections) {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	public void setSignupUrl(String signupUrl) {, +		this.signupUrl = signupUrl;, +	}, +, +	public void setConnectionAddedRedirectUrl(String connectionAddedRedirectUrl) {, +		this.connectionAddedRedirectUrl = connectionAddedRedirectUrl;, +	}, +, +	public void setUpdateConnections(boolean updateConnections) {, +		this.updateConnections = updateConnections;, +	}, +, +	public void setPostLoginUrl(String postLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setDefaultTargetUrl(postLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set postLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +, +	public void setPostFailureUrl(String postFailureUrl) {, +		AuthenticationFailureHandler failureHandler = getFailureHandler();, +		if (failureHandler instanceof SimpleUrlAuthenticationFailureHandler) {, +			SimpleUrlAuthenticationFailureHandler h = (SimpleUrlAuthenticationFailureHandler) failureHandler;, +			h.setDefaultFailureUrl(postFailureUrl);, +		} else {, +			throw new IllegalStateException("can't set postFailureUrl on unknown failureHandler, type is " + failureHandler.getClass().getName());, +		}, +	}, +	, +	public UserIdExtractor getUserIdExtractor() {, +		return userIdExtractor;, +	}, +, +	public UsersConnectionRepository getUsersConnectionRepository() {, +		return usersConnectionRepository;, +	}, +, +	public SocialAuthenticationServiceLocator getAuthServiceLocator() {, +		return authServiceLocator;, +	}, +	, +		Set<String> connectedUserIds = usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), userIdSet);, +				redirectUrl = connectionAddedRedirectUrl;, +			if (signupUrl != null) {, +				throw new SocialAuthenticationRedirectException(signupUrl);, +		if (updateConnections) {]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.ArrayList;, +import java.util.Collections;, +import javax.servlet.http.HttpSession;, +import org.springframework.security.authentication.BadCredentialsException;, +	private String filterProcessesUrl = "/auth";, +	private String signupUrl = "/signup";, +	/**, +	 * testing only, +	 * , +	 * @param session may be null, +	 * @param data may be null, +	 * @return true if new attempt was added to session, +	 */, +	static boolean addSignInAttempt(HttpSession session, ConnectionData data) {, +		return session == null || data == null ? null : SignInAttempts.add(session, data);, +	}, +	, +	/**, +	 * @param session may be null, +	 * @return list of ConnectionData for sign-in attempts using unknown connections, +	 */, +	public static List<ConnectionData> getSignInAttempts(HttpSession session) {, +		if (session == null) {, +			return new ArrayList<ConnectionData>(0);, +		}, +		return new ArrayList<ConnectionData>(SignInAttempts.get(session));, +	}, +	, +	/**, +	 * clear list of sign-in attempts (after registration), +	 * @param session may be null, +	 */, +	public static void clearSignInAttempts(HttpSession session) {, +		if (session != null) {, +			SignInAttempts.clear(session);, +		}, +	}, +	, +			Assert.isInstanceOf(ConnectionData.class, token.getPrincipal(), "unexpected principle type");, +			, +				try {, +				} catch (BadCredentialsException e) {, +					// connection unknown, register new user?, +					if (getSignupUrl() == null) {, +						throw e;, +					} else {, +						// store ConnectionData in session and redirect to register page, +						if (SignInAttempts.add(request.getSession(), (ConnectionData) token.getPrincipal())) {, +							throw new SocialAuthenticationRedirectException(getSignupUrl());, +						}, +					}, +				}, +					Connection<?> connection = addConnection(authService, userId, (ConnectionData) principal);, +					if(connection != null) {, +						throw new SocialAuthenticationRedirectException(authService.getConnectionAddedRedirectUrl(request, connection));, +					} else {, +						return null;, +					}, +	protected Connection<?> addConnection(final SocialAuthenticationService<?> authService, String userId, final ConnectionData data) {, +		return connection;, +	public String getSignupUrl() {, +		return signupUrl;, +	}, +, +	public void setSignupUrl(String signupUrl) {, +		this.signupUrl = signupUrl;, +	}, +, +	private static class SignInAttempts {, +		, +		private static final String ATTR_SIGN_IN_ATTEMPT = SignInAttempts.class.getName();, +		, +		private List<ConnectionData> attempts = new ArrayList<ConnectionData>(1);, +		, +		private static boolean add(HttpSession session, ConnectionData data) {, +			SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +			if (signInAttempts == null) {, +				session.setAttribute(ATTR_SIGN_IN_ATTEMPT, signInAttempts = new SignInAttempts()); , +			}, +			return signInAttempts.addAttempt(data);, +		}, +		, +		/**, +		 * @return unmodifiable list, +		 */, +		private static List<ConnectionData> get(HttpSession session) {, +			SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +			if(signInAttempts == null) {, +				return Collections.emptyList();, +			} else {, +				return signInAttempts.getAttempts();, +			}, +		}, +, +		private static void clear(HttpSession session) {, +			session.removeAttribute(ATTR_SIGN_IN_ATTEMPT);, +		}, +		, +		private SignInAttempts() {]
[+++ b/docs/src/reference/docbook/signin.xml, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());, +		List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals(2, localUserIds.size());, +		assertEquals("1", localUserIds.get(0));, +		assertEquals("2", localUserIds.get(1));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());, +		List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals(2, localUserIds.size());, +		assertEquals("1", localUserIds.get(0));, +		assertEquals("2", localUserIds.get(1));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.util.List;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, +		if (userIds.size() == 0) {, +			usersConnectionRepository.createConnectionRepository(userIds.get(0)).updateConnection(connection);, +			String originalUrl = signInAdapter.signIn(userIds.get(0), connection, request);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());, +		List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals(2, localUserIds.size());, +		assertEquals("1", localUserIds.get(0));]
[+++ b/build.gradle, +apply from: "$rootDir/gradle/dist.gradle", +apply from: "${rootDir}/gradle/checks.gradle", +++ b/build.gradle, +apply from: "$rootDir/gradle/dist.gradle", +apply from: "${rootDir}/gradle/checks.gradle", +++ b/gradle/bundlor.gradle, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +// -----------------------------------------------------------------------------, +// Task definitions and configuration relating to the SpringSource 'bundlor', +// OSGi manifest generation utility., +//, +// @author cbeams, +// see: http://www.springsource.org/bundlor, +// -----------------------------------------------------------------------------, +, +/**, + * Generate an OSGi manifest using the ant bundlor task., + *, + * @author ltaylor, + * @author cbeams, + * @see http://static.springsource.org/s2-bundlor/1.0.x/user-guide/html/ch04s02.html, + */, +task bundlor(dependsOn: compileJava) {, +    description = 'Generates an OSGi-compatibile MANIFEST.MF file.', +, +    def template = new File(projectDir, 'template.mf'), +    def bundlorDir = new File("${project.buildDir}/bundlor"), +    def manifest = file("${bundlorDir}/META-INF/MANIFEST.MF"), +, +    // inform gradle what directory this task writes so that, +    // it can be removed when issuing `gradle cleanBundlor`, +    outputs.dir bundlorDir, +, +    // incremental build configuration, +    //   if the $manifest output file already exists, the bundlor, +    //   task will be skipped *unless* any of the following are true, +    //   * template.mf has been changed, +    //   * main classpath dependencies have been changed, +    //   * main java sources for this project have been modified, +    outputs.files manifest, +    inputs.files template, project.sourceSets.main.runtimeClasspath, +, +    // tell the jar task to use bundlor manifest instead of the default, +    jar.manifest.from manifest, +, +    // the bundlor manifest should be evaluated as part of the jar task's, +    // incremental build, +    jar.inputs.files manifest, +, +    // configuration that will be used when creating the ant taskdef classpath, +    configurations { bundlorconf }, +    dependencies {, +        bundlorconf 'com.springsource.bundlor:com.springsource.bundlor.ant:1.0.0.RELEASE',, +                'com.springsource.bundlor:com.springsource.bundlor:1.0.0.RELEASE',, +                'com.springsource.bundlor:com.springsource.bundlor.blint:1.0.0.RELEASE', +    }, +, +    doFirst {, +        ant.taskdef(resource: 'com/springsource/bundlor/ant/antlib.xml',, +                    classpath: configurations.bundlorconf.asPath), +, +        // the bundlor ant task writes directly to standard out, +        // redirect it to INFO level logging, which gradle will, +        // deal with gracefully, +        logging.captureStandardOutput(LogLevel.INFO), +, +        // the ant task will throw unless this dir exists, +        if (!bundlorDir.isDirectory()), +            bundlorDir.mkdir(), +, +        // execute the ant task, and write out the $manifest file, +        ant.bundlor(inputPath: sourceSets.main.classesDir,, +                    outputPath: bundlorDir, manifestTemplatePath: template) {, +            property(name: 'version', value: project.version), +            property(name: 'spring.version', value: project.springVersion), +        }, +    }, +}, +, +// ensure that the bundlor task runs prior to the jar task, +// jar.dependsOn bundlor, +, +++ b/build.gradle, +apply from: "$rootDir/gradle/dist.gradle"]
[+++ b/build.gradle, +    ext.springVersion           = "4.0.2.RELEASE", +++ b/build.gradle, +    ext.springVersion           = "4.0.2.RELEASE", +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +		restTemplate = createRestTemplateWithCulledMessageConverters();, +		RestTemplate client = createRestTemplateWithCulledMessageConverters();, +	// Temporary: The RestTemplate that accepts a list of message converters wasn't added until Spring 3.2.7., +	//            Remove this method and use that constructor exclusively when 3.1.x support is no longer necessary (Spring Social 2.0)., +	private RestTemplate createRestTemplateWithCulledMessageConverters() {, +		RestTemplate client;, +		List<HttpMessageConverter<?>> messageConverters = getMessageConverters();, +		try {, +			client = new RestTemplate(messageConverters);, +		} catch (NoSuchMethodError e) {, +			client = new RestTemplate();, +			client.setMessageConverters(messageConverters);, +		}, +		client.setRequestFactory(ClientHttpRequestFactorySelector.getRequestFactory());, +		return client;, +	}, +++ b/build.gradle, +    ext.springVersion           = "4.0.2.RELEASE", +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +		restTemplate = createRestTemplateWithCulledMessageConverters();, +		RestTemplate client = createRestTemplateWithCulledMessageConverters();, +	// Temporary: The RestTemplate that accepts a list of message converters wasn't added until Spring 3.2.7., +	//            Remove this method and use that constructor exclusively when 3.1.x support is no longer necessary (Spring Social 2.0)., +	private RestTemplate createRestTemplateWithCulledMessageConverters() {, +		RestTemplate client;, +		List<HttpMessageConverter<?>> messageConverters = getMessageConverters();, +		try {, +			client = new RestTemplate(messageConverters);, +		} catch (NoSuchMethodError e) {, +			client = new RestTemplate();, +			client.setMessageConverters(messageConverters);, +		}, +		client.setRequestFactory(ClientHttpRequestFactorySelector.getRequestFactory());, +		return client;, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		restTemplate = createRestTemplateWithCulledMessageConverters();, +		RestTemplate client = createRestTemplateWithCulledMessageConverters();, +	// Temporary: The RestTemplate that accepts a list of message converters wasn't added until Spring 3.2.7., +	//            Remove this method and use that constructor exclusively when 3.1.x support is no longer necessary (Spring Social 2.0)., +	private RestTemplate createRestTemplateWithCulledMessageConverters() {, +		RestTemplate client;, +		List<HttpMessageConverter<?>> messageConverters = getMessageConverters();, +		try {, +			client = new RestTemplate(messageConverters);, +		} catch (NoSuchMethodError e) {, +			client = new RestTemplate();, +			client.setMessageConverters(messageConverters);, +		}, +		client.setRequestFactory(ClientHttpRequestFactorySelector.getRequestFactory());, +		return client;, +	}, +]
[+++ b/src/main/java/org/springframework/social/oauth/AccessTokenServices.java, +package org.springframework.social.oauth;, +, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public interface AccessTokenServices {, +	/**, +	 * Get the token for the specified protected resource., +	 * , +	 * @param resourceId, +	 *            The id of the protected resource., +	 * @return The token, or null if none was found., +	 */, +	OAuthConsumerToken getToken(String resourceId, Object user) throws AuthenticationException;, +, +	/**, +	 * Store a token for a specified resource., +	 * , +	 * @param resourceId, +	 *            The id of the protected resource., +	 * @param token, +	 *            The token to store., +	 */, +	void storeToken(String resourceId, Object user, OAuthConsumerToken token);, +, +	  /**, +	 * Removes the token for the specified resource., +	 * , +	 * @param resourceId, +	 *            The id of the resource., +	 */, +	void removeToken(String resourceId, Object user);, +}, +++ b/src/main/java/org/springframework/social/oauth/AccessTokenServices.java, +package org.springframework.social.oauth;, +, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public interface AccessTokenServices {, +	/**, +	 * Get the token for the specified protected resource., +	 * , +	 * @param resourceId, +	 *            The id of the protected resource., +	 * @return The token, or null if none was found., +	 */, +	OAuthConsumerToken getToken(String resourceId, Object user) throws AuthenticationException;, +, +	/**, +	 * Store a token for a specified resource., +	 * , +	 * @param resourceId, +	 *            The id of the protected resource., +	 * @param token, +	 *            The token to store., +	 */, +	void storeToken(String resourceId, Object user, OAuthConsumerToken token);, +, +	  /**, +	 * Removes the token for the specified resource., +	 * , +	 * @param resourceId, +	 *            The id of the resource., +	 */, +	void removeToken(String resourceId, Object user);, +}, +++ b/src/main/java/org/springframework/social/oauth/JdbcAccessTokenTokenServices.java, +package org.springframework.social.oauth;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +import java.util.List;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.security.authentication.BadCredentialsException;, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +import org.springframework.social.account.Account;, +, +public class JdbcAccessTokenTokenServices implements AccessTokenServices {, +, +	static final String SELECT_TOKEN_SQL = "select provider, accessToken, secret from ConnectedAccount where member = ? and provider = ?";, +    static final String INSERT_TOKEN_SQL = "insert into ConnectedAccount (member, provider, accessToken, secret) values (?, ?, ?, ?)";, +    static final String DELETE_TOKEN_SQL = "delete from ConnectedAccount where member = ? and provider = ?";, +, +	private JdbcTemplate jdbcTemplate;, +	, +	public JdbcAccessTokenTokenServices(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public OAuthConsumerToken getToken(String resourceId, Object principal) throws AuthenticationException {, +		assertThatPrincipalIsAnAccount(principal);, +, +		Account account = (Account) principal;, +		List<OAuthConsumerToken> accessTokens = jdbcTemplate.query(SELECT_TOKEN_SQL, new RowMapper<OAuthConsumerToken>() {, +			public OAuthConsumerToken mapRow(ResultSet rs, int rowNum) throws SQLException {]
[+++ b/build.gradle, +    h2Version = '1.3.168', +    hamcrestVersion = '1.3', +    jacksonVersion = '1.9.9', +    springVersion = '3.1.2.RELEASE', +    springSecurityCryptoVersion = '3.1.1.RELEASE', +    springTestMvcVersion = '1.0.0.M1', +++ b/build.gradle, +    h2Version = '1.3.168', +    hamcrestVersion = '1.3', +    jacksonVersion = '1.9.9', +    springVersion = '3.1.2.RELEASE', +    springSecurityCryptoVersion = '3.1.1.RELEASE', +    springTestMvcVersion = '1.0.0.M1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.LinkedList;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +		restTemplate = createRestTemplate(credentials);, +	private RestTemplate createRestTemplate(OAuth1Credentials credentials) {, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +		OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, +		List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +		interceptors.add(interceptor);, +		client.setInterceptors(interceptors);, +		return client;, +	}, +	, +++ b/build.gradle, +    h2Version = '1.3.168', +    hamcrestVersion = '1.3', +    jacksonVersion = '1.9.9', +    springVersion = '3.1.2.RELEASE', +    springSecurityCryptoVersion = '3.1.1.RELEASE', +    springTestMvcVersion = '1.0.0.M1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.LinkedList;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +		restTemplate = createRestTemplate(credentials);, +	private RestTemplate createRestTemplate(OAuth1Credentials credentials) {, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +		OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, +		List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +		interceptors.add(interceptor);, +		client.setInterceptors(interceptors);, +		return client;, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.web.util.UriComponentsBuilder;, +		return UriComponentsBuilder.fromUriString(url).build().toUri();, +++ b/build.gradle, +    h2Version = '1.3.168', +    hamcrestVersion = '1.3', +    jacksonVersion = '1.9.9', +    springVersion = '3.1.2.RELEASE', +    springSecurityCryptoVersion = '3.1.1.RELEASE', +    springTestMvcVersion = '1.0.0.M1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.LinkedList;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +		restTemplate = createRestTemplate(credentials);, +	private RestTemplate createRestTemplate(OAuth1Credentials credentials) {, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +		OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, +		List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +		interceptors.add(interceptor);, +		client.setInterceptors(interceptors);, +		return client;, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.web.util.UriComponentsBuilder;, +		return UriComponentsBuilder.fromUriString(url).build().toUri();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		client.setInterceptors(interceptors);, +++ b/build.gradle, +    h2Version = '1.3.168', +    hamcrestVersion = '1.3', +    jacksonVersion = '1.9.9', +    springVersion = '3.1.2.RELEASE', +    springSecurityCryptoVersion = '3.1.1.RELEASE', +    springTestMvcVersion = '1.0.0.M1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.LinkedList;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +		restTemplate = createRestTemplate(credentials);, +	private RestTemplate createRestTemplate(OAuth1Credentials credentials) {, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +		OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, +		List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +		interceptors.add(interceptor);, +		client.setInterceptors(interceptors);, +		return client;, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.web.util.UriComponentsBuilder;, +		return UriComponentsBuilder.fromUriString(url).build().toUri();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +		client.setInterceptors(interceptors);]
[+++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @return the provider ID, +	 * @return the service provider, +	 * @return the ApiAdapter, +++ b/gradle.properties, +springVersion           = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +	 * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +	 * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +	 * @return an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +	 * @return A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * @return the displayable name for the connection, +	 * @return the public URL for the connected user, +	 * @return a String containing the URL to the connection image, +	 * @return true if the connection is valid, +	 * @return true if the connection has expired, +	 * @return a normalized user profile associated with this connection., +	 * @return the provider-specific API binding, +	 * @return a data transfer object containing details about the connection., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, +	 * @return the provider ID, +	 * @return the service provider, +	 * @return the ApiAdapter, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @param providerId the provider ID used to look up the ConnectionFactory.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +	public AuthenticationFailureHandler getDelegate() {, +		return delegate;, +	}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +	public AuthenticationFailureHandler getDelegate() {, +		return delegate;, +	}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL)));, +	 * @deprecated use {@link #setPostFailureUrl(String)} instead, +	@Deprecated, +		setPostFailureUrl(defaultFailureUrl);, +	/**, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param postFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +	 */, +, +		if (failureHandler instanceof SocialAuthenticationFailureHandler) {, +			failureHandler = ((SocialAuthenticationFailureHandler)failureHandler).getDelegate();, +		}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +	public AuthenticationFailureHandler getDelegate() {, +		return delegate;, +	}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL)));, +	 * @deprecated use {@link #setPostFailureUrl(String)} instead, +	@Deprecated, +		setPostFailureUrl(defaultFailureUrl);, +	/**, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param postFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +	 */, +, +		if (failureHandler instanceof SocialAuthenticationFailureHandler) {, +			failureHandler = ((SocialAuthenticationFailureHandler)failureHandler).getDelegate();, +		}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	 * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param postFailureUrl the URL to redirect to after an authentication fail or authorization deny, +	 * @deprecated use {@link #postFailureUrl(String)} instead, +	@Deprecated, +		postFailureUrl(defaultFailureUrl);]
[+++ b/docs/src/reference/docbook/implementing.xml, +public class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {, +public class TwitterServiceProviderConnectionFactory extends OAuth1ServiceProviderConnectionFactory<FacebookApi> {, +++ b/docs/src/reference/docbook/implementing.xml, +public class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {, +public class TwitterServiceProviderConnectionFactory extends OAuth1ServiceProviderConnectionFactory<FacebookApi> {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProviderConnectionFactory.java, +public class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.Iterator;, +import java.util.Map.Entry;, + * @author Roy Clarkson, +		String clientInfo = "?client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state, grantType, additionalParameters);, +	public String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state, grantType, additionalParameters) : buildAuthorizeUrl(redirectUri, null, state, grantType, additionalParameters);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		if (grantType == GrantType.AuthorizationCode) {, +			oauthUrl.append('&').append("response_type").append('=').append("code");, +		} else if (grantType == GrantType.ImplicitGrant) {, +			oauthUrl.append('&').append("response_type").append('=').append("token");, +		}, +		if (additionalParameters != null) {, +			for (Iterator<Entry<String, List<String>>> params = additionalParameters.entrySet().iterator(); params.hasNext();) {, +				Entry<String, List<String>> param = params.next();, +				for (Iterator<String> paramValues = param.getValue().iterator(); paramValues.hasNext();) {, +					oauthUrl.append('&').append(param.getKey()).append('=').append(formEncode(paramValues.next()));, +				}]
[+++ b/docs/src/reference/docbook/connecting.xml, +  <title>Connecting to Service Providers</title>, +  <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, +      , +  <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +    <para><classname>ConnectController</classname> is constructed with the base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authorization callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token and completes the connection.</para></listitem>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +    void postConnect(ServiceProvider<S> provider, ServiceProviderConnection<S> connection, WebRequest request);, +    <programlisting><![CDATA[package org.springframework.social.showcase.twitter;, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,, +			ServiceProviderConnection<TwitterOperations> connection, WebRequest request) {, +		connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +]]></programlisting>, +        <programlisting><![CDATA[<bean class="org.springframework.social.web.connect.ConnectController">, +	        <bean class="org.springframework.social.showcase.twitter.TweetAfterConnectInterceptor" />, +</bean>]]></programlisting>, +++ b/docs/src/reference/docbook/connecting.xml, +  <title>Connecting to Service Providers</title>, +  <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, +      , +  <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +    <para><classname>ConnectController</classname> is constructed with the base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authorization callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token and completes the connection.</para></listitem>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +    void postConnect(ServiceProvider<S> provider, ServiceProviderConnection<S> connection, WebRequest request);, +    <programlisting><![CDATA[package org.springframework.social.showcase.twitter;, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,, +			ServiceProviderConnection<TwitterOperations> connection, WebRequest request) {, +		connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +]]></programlisting>, +        <programlisting><![CDATA[<bean class="org.springframework.social.web.connect.ConnectController">, +	        <bean class="org.springframework.social.showcase.twitter.TweetAfterConnectInterceptor" />, +</bean>]]></programlisting>, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>FacebookServiceProvider</classname>'s <methodname>getConnections()</methodname> method:</para>, +  <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +++ b/docs/src/reference/docbook/connecting.xml, +  <title>Connecting to Service Providers</title>, +  <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, +      , +  <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +    <para><classname>ConnectController</classname> is constructed with the base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authorization callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token and completes the connection.</para></listitem>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +    void postConnect(ServiceProvider<S> provider, ServiceProviderConnection<S> connection, WebRequest request);, +    <programlisting><![CDATA[package org.springframework.social.showcase.twitter;, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,, +			ServiceProviderConnection<TwitterOperations> connection, WebRequest request) {, +		connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +]]></programlisting>, +        <programlisting><![CDATA[<bean class="org.springframework.social.web.connect.ConnectController">, +	        <bean class="org.springframework.social.showcase.twitter.TweetAfterConnectInterceptor" />, +</bean>]]></programlisting>, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>FacebookServiceProvider</classname>'s <methodname>getConnections()</methodname> method:</para>, +  <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +++ b/docs/src/reference/docbook/github.xml, +  <para>Although many developers think of GitHub as Git-based source code hosting, the tagline in GitHub's logo clearly states that GitHub is about "social coding". GitHub is a social network that links developers together and with the projects they follow and/or contribute to.</para>, +    <para>If you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>GitHubTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>GitHubServiceProvider</classname>'s <methodname>getConnections()</methodname> method:</para>, +    <programlisting><![CDATA[GitHubOperations github = githubProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +++ b/docs/src/reference/docbook/connecting.xml, +  <title>Connecting to Service Providers</title>, +  <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, +      , +  <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +    <para><classname>ConnectController</classname> is constructed with the base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authorization callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token and completes the connection.</para></listitem>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +    void postConnect(ServiceProvider<S> provider, ServiceProviderConnection<S> connection, WebRequest request);, +    <programlisting><![CDATA[package org.springframework.social.showcase.twitter;, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2015 the original author or authors., +	private String signupUrl;, +, +	private String connectionAddedRedirectUrl;, +, +	private String defaultFailureUrl;, +, +		if (signupUrl != null) {, +			filter.setSignupUrl(signupUrl);, +		}, +, +		if (connectionAddedRedirectUrl != null) {, +			filter.setConnectionAddedRedirectUrl(connectionAddedRedirectUrl);, +		}, +, +		if (defaultFailureUrl != null) {, +			filter.setDefaultFailureUrl(defaultFailureUrl);, +		}, +		, +	/**, +	 * Sets the URL to land on after an authentication failure so that the user can register with the application., +	 * @param signupUrl the URL to redirect to after an authentication failure, +	 * @return this SpringSocialConfigurer for chained configuration, +	 */, +	public SpringSocialConfigurer signupUrl(String signupUrl) {, +		this.signupUrl = signupUrl;, +		return this;, +	}, +, +	/**, +	 * Sets the URL to land on after an a connection was added., +	 * @param connectionAddedRedirectUrl the URL to redirect after a connection was added, +	 * @return this SpringSocialConfigurer for chained configuration, +	 */, +	public SpringSocialConfigurer connectionAddedRedirectUrl(String connectionAddedRedirectUrl) {, +		this.connectionAddedRedirectUrl = connectionAddedRedirectUrl;, +		return this;, +	}, +, +	/**, +	 * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl the URL to redirect to after an authentication fail or authorization deny, +	 * @return this SpringSocialConfigurer for chained configuration, +	 */, +	public SpringSocialConfigurer defaultFailureUrl(String defaultFailureUrl) {, +		this.defaultFailureUrl = defaultFailureUrl;, +		return this;, +	}, +	]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, +	public String buildAuthenticateUrl(String redirectUri, String state) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri, null, state);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state) {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +		if (httpComponentsAvailable) {, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	String buildAuthorizeUrl(String redirectUri, String scope, String state);, +	String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);]
[+++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import java.util.LinkedList;, +, +			LinkedList<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +			interceptors.add(new OAuth1RequestInterceptor(credentials));, +			client.setInterceptors(interceptors);, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import java.util.LinkedList;, +, +			LinkedList<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +			interceptors.add(new OAuth1RequestInterceptor(credentials));, +			client.setInterceptors(interceptors);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import java.util.LinkedList;, +, +			LinkedList<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +			interceptors.add(new OAuth2RequestInterceptor(accessToken, version));, +			client.setInterceptors(interceptors);]
[+++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version"), +++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version"), +++ b/gradle.properties, +thymeleafSpring5Version=3.0.3.M1, +++ b/build.gradle, +        compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version"), +++ b/gradle.properties, +thymeleafSpring5Version=3.0.3.M1, +++ b/spring-social-web-thymeleaf3/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, + * Copyright 2015-2017 the original author or authors., +import org.thymeleaf.spring5.context.SpringContextUtils;]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +				Note that although this schema was designed with compatibility in mind, it may not be compatible with all databases., +				You may need to adapt this schema definition to accommodate any peculiarities of your chosen database.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.support.AbstractOAuthParameters;, +public final class OAuth1Parameters extends AbstractOAuthParameters {, +	public static final OAuth1Parameters NONE = new OAuth1Parameters(null);, +, +	public OAuth1Parameters(Map<String, List<String>> parameters) {, +		super(parameters);, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.support.AbstractOAuthParameters;, +public final class OAuth1Parameters extends AbstractOAuthParameters {, +	public static final OAuth1Parameters NONE = new OAuth1Parameters(null);, +, +	public OAuth1Parameters(Map<String, List<String>> parameters) {, +		super(parameters);, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Parameters.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.support.AbstractOAuthParameters;, +public final class OAuth2Parameters extends AbstractOAuthParameters {, +	public OAuth2Parameters(Map<String, List<String>> parameters) {, +		super(parameters);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.support.AbstractOAuthParameters;, +public final class OAuth1Parameters extends AbstractOAuthParameters {, +	public static final OAuth1Parameters NONE = new OAuth1Parameters(null);, +, +	public OAuth1Parameters(Map<String, List<String>> parameters) {, +		super(parameters);, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Parameters.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.support.AbstractOAuthParameters;, +public final class OAuth2Parameters extends AbstractOAuthParameters {, +	public OAuth2Parameters(Map<String, List<String>> parameters) {, +		super(parameters);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/support/AbstractOAuthParameters.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.util.Collection;, +import java.util.LinkedHashMap;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +/**, + * Base class for OAuth1Parameters and OAuth2Parameters to shield them from any direct implementation of MultiValueMap., + * @author Craig Walls, + */, +public abstract class AbstractOAuthParameters implements MultiValueMap<String, String> {, +, +	private final Map<String, List<String>> parameters;, +	, +	protected AbstractOAuthParameters(Map<String, List<String>> parameters) {, +		if (parameters != null) {, +			this.parameters = parameters;, +		} else {, +			this.parameters = new LinkedMultiValueMap<String, String>();, +		}, +	}, +	, +	// MultiValueMap method implementations, +	, +	public void clear() {]
[+++ b/build.gradle, +    springVersion = '3.0.5.RELEASE', +++ b/build.gradle, +    springVersion = '3.0.5.RELEASE', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth/support/AbstractClientHttpRequest.java, +package org.springframework.social.oauth.support;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.util.Assert;, +, +/**, + * Borrowed from Spring 3.0 so that we have a consistent AbstractClientHttpRequest implementation for both Spring 3.0 and Spring 3.1-based applications., + * Note that this wouldn't be necessary if using Spring 3.0.6, which introduced AbstractBufferingHttpRequest., + * @author Craig Walls, + */, +public abstract class AbstractClientHttpRequest implements ClientHttpRequest {, +, +	private boolean executed = false;, +, +	private final HttpHeaders headers = new HttpHeaders();, +, +	private final ByteArrayOutputStream bufferedOutput = new ByteArrayOutputStream();, +, +	public final HttpHeaders getHeaders() {, +		return executed ? HttpHeaders.readOnlyHttpHeaders(headers) : this.headers;, +	}, +, +	public final OutputStream getBody() throws IOException {, +		checkExecuted();, +		return this.bufferedOutput;, +	}, +, +	public final ClientHttpResponse execute() throws IOException {, +		checkExecuted();, +		ClientHttpResponse result = executeInternal(this.headers, this.bufferedOutput.toByteArray());, +		this.executed = true;, +		return result;, +	}, +, +	private void checkExecuted() {, +		Assert.state(!this.executed, "ClientHttpRequest already executed");, +	}, +, +	/**, +	 * Abstract template method that writes the given headers and content to the HTTP request., +	 * , +	 * @param headers, +	 *            the HTTP headers, +	 * @param bufferedOutput, +	 *            the body content, +	 * @return the response object for the executed request, +	 */, +	protected abstract ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput), +			throws IOException;, +, +}, +, +++ b/build.gradle, +    springVersion = '3.0.5.RELEASE', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth/support/AbstractClientHttpRequest.java, +package org.springframework.social.oauth.support;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.util.Assert;, +, +/**, + * Borrowed from Spring 3.0 so that we have a consistent AbstractClientHttpRequest implementation for both Spring 3.0 and Spring 3.1-based applications., + * Note that this wouldn't be necessary if using Spring 3.0.6, which introduced AbstractBufferingHttpRequest., + * @author Craig Walls, + */, +public abstract class AbstractClientHttpRequest implements ClientHttpRequest {, +, +	private boolean executed = false;, +, +	private final HttpHeaders headers = new HttpHeaders();, +, +	private final ByteArrayOutputStream bufferedOutput = new ByteArrayOutputStream();, +, +	public final HttpHeaders getHeaders() {, +		return executed ? HttpHeaders.readOnlyHttpHeaders(headers) : this.headers;, +	}, +, +	public final OutputStream getBody() throws IOException {, +		checkExecuted();, +		return this.bufferedOutput;, +	}, +, +	public final ClientHttpResponse execute() throws IOException {]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInService;, +	private final SignInService signinService;, +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInService;, +	private final SignInService signinService;, +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInService;, +	private final SignInService signinService;, +	public TwitterSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInService;, +	private final SignInService signinService;, +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInService;, +	private final SignInService signinService;, +	public TwitterSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInService;, +	private final SignInService signinService;, +	public FacebookSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInService;, +	private final SignInService signinService;, +	public TwitterSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/SignInService.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.web.connect;, +, +import java.io.Serializable;, +, +/**, + * Strategy interface for authenticating users to an application given their account ID., + * An application should provide their own implementation of this interface for use by FacebookSigninController and TwitterSigninController., + * @author Craig Walls, + */, +public interface SignInService {, +	, +	void signIn(Serializable accountId);, +	, +}]
[+++ b/docs/src/reference/docbook/overview.xml, +					Spring Social requires <ulink url="http://www.springsource.org/documentation">Spring Framework</ulink> 3.0.3 and above., +					Specifically, Spring Social uses <classname>RestTemplate</classname> and related REST client support from Spring's web module., +				</para>, +				<para>, +					If you want to use Spring Social with Spring 3.0.X, you'll need to explicitly add the spring-web dependency to your build, specifying the version:, +					If you're using Spring Social's JDBC-based connection repository, it will require a <interfacename>TextEncryptor</interfacename> from <ulink url="http://static.springsource.org/spring-security/site/">Spring Security</ulink> 3.1.0 to encrypt connection data as it is persisted., +					Spring Social depends on the <ulink url="http://commons.apache.org/codec/">Commons Codec</ulink> library when encoding OAuth 1 request signatures., +					If you use Spring Social to connect with OAuth 1-based providers, you'll need to add Commons Codec to your project:, +				<para>, +					Commons Codec is not required if your application only connects with OAuth 2 providers., +				</para>, +					Spring Social has an optional dependency on Apache's <ulink url="http://hc.apache.org/httpcomponents-client-ga/">HttpComponents HttpClient</ulink> as the basis for creating requests when communicating with a service provider., +					Spring Social's API binding implementations rely on the <ulink url="http://jackson.codehaus.org/">Jackson JSON Processor</ulink> to deserialize JSON responses into Java model objects., +		</section>	  , +, +		<section id="overview-provider-modules">, +			<title>Provider modules</title>, +			, +			<para>, +				In addition to the modules that make up Spring Social, there are also several provider-specific modules that provide connectivity with popular SaaS providers., +				These provider modules are listed in <xref linkend="table-spring-social-provider-modules"/>., +			</para>, +			, +			<table xml:id="table-spring-social-provider-modules">, +				<title>Spring Social Modules</title>, +				<tgroup cols="2">, +					<colspec align="left" />, +					<colspec colnum="1" colname="col1" colwidth="2*"/>, +					<colspec colnum="2" colname="col2" colwidth="2*"/>, +					<thead>, +						<row>, +							<entry align="center">Name</entry>, +							<entry align="center">Description</entry>, +						</row>, +					</thead>, +					<tbody>, +						<row>, +						  <entry>spring-social-facebook</entry>, +						  <entry>Spring Social's Facebook API binding</entry>, +						</row>, +						<row>, +						  <entry>spring-social-twitter</entry>, +						  <entry>Spring Social's Twitter API binding.</entry>, +						</row>, +						<row>, +						  <entry>spring-social-linkedin</entry>, +						  <entry>Spring Social's LinkedIn API binding.</entry>, +						</row>, +						<row>, +						  <entry>spring-social-github</entry>, +						  <entry>Spring Social's GitHub API binding.</entry>, +						</row>, +						<row>, +						  <entry>spring-social-gowalla</entry>, +						  <entry>Spring Social's Gowalla API binding.</entry>, +						</row>, +						<row>, +						  <entry>spring-social-tripit</entry>, +						  <entry>Spring Social's TripIt API binding.</entry>, +						</row>, +					</tbody>, +				</tgroup>, +			</table>, +	, +			<para>, +				All of these modules are optional, depending on the connectivity needs of your application., +				For instance, if your application will connect with Facebook, you'll want to add the Facebook module to your project:, +			</para>, +, +	    	<programlisting language="xml"><![CDATA[, +<dependency>, +  <groupId>org.springframework.social</groupId>, +  <artifactId>spring-social-facebook</artifactId>, +  <version>${springSocialFacebookVersion}</version>, +</dependency>]]>, +  			</programlisting>	]
[+++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/JdbcConnectionRepository.java, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.jdbc.core.simple.SimpleJdbcInsert;, +	private final SimpleJdbcInsert connectionInsert;, +	, +		this.connectionInsert = createConnectionInsert();, +			Map<String, Object> args = new HashMap<String, Object>();, +			args.put("accountId", accountId);, +			args.put("providerId", providerId);, +			args.put("accessToken", encrypt(connection.getAccessToken()));, +			args.put("secret", encrypt(connection.getSecret()));, +			args.put("refreshToken", encrypt(connection.getRefreshToken()));			, +			Number connectionId = connectionInsert.executeAndReturnKey(args);, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +	private SimpleJdbcInsert createConnectionInsert() {, +		SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);, +		insert.setTableName("Connection");, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +		insert.setGeneratedKeyName("id");, +		return insert;, +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/JdbcConnectionRepository.java, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.jdbc.core.simple.SimpleJdbcInsert;, +	private final SimpleJdbcInsert connectionInsert;, +	, +		this.connectionInsert = createConnectionInsert();, +			Map<String, Object> args = new HashMap<String, Object>();, +			args.put("accountId", accountId);, +			args.put("providerId", providerId);, +			args.put("accessToken", encrypt(connection.getAccessToken()));, +			args.put("secret", encrypt(connection.getSecret()));, +			args.put("refreshToken", encrypt(connection.getRefreshToken()));			, +			Number connectionId = connectionInsert.executeAndReturnKey(args);, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +	private SimpleJdbcInsert createConnectionInsert() {, +		SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);, +		insert.setTableName("Connection");, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +		insert.setGeneratedKeyName("id");, +		return insert;, +++ /dev/null, +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth']
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/src/dist/changelog.txt, +Spring Social 1.1.0 Milestone 3 (July 8, 2012), +==============================================, + Bug Fixes, +   * JdbcConnectionRepository's methods are now transactionl. (SOCIAL-335), +   * Lazily create RestTemplate in OAuth2Template to ensure that, +     useParametersForClientAuthentication property is honored. (SOCIAL-338), +   * Changed expiresIn parameter in AccessGrant to Long to avoid overflow, +     for expiration times far in the future. (SOCIAL-356), +   * Primary connection is now chosen as the connection with the lowest, +     rank, instead of the one with rank=1 (SOCIAL-341), +, + Improvements, +   * Upgrade Jackson dependency to Jackson 2. (SOCIAL-362), +   * Support OAuth 2's 'state' parameter to preference CSRF vulnerability., +     (SOCIAL-299), +   * Support non-standard, provider-specific parameters for provider, +     sign-in. (SOCIAL-306), +   * Ability to set ConnectionSignUp for new XML and JavaConfig options., +     (SOCIAL-352), +, + New Features, +   * New ReconnectFilter to automatically handle invalid tokens and, +     attempt to obtain a new token. (SOCIAL-328), +   * New in-memory ConnectionRepository implementation for testing and, +     sample application purposes. (SOCIAL-361), +]
[+++ b/src/dist/changelog.txt, +Spring Social 1.1.0 Milestone 1 (October 15, 2012), +==================================================, +Improvements, +  * Added an XML configuration namespace to simplify configuring Spring Social connection, +    repositories. Also established base bean definition parser and namespace handler classes, +    for provider modules to build on configuration support for connection factory and API, +    binding. (SOCIAL-292), +]
[+++ b/build.gradle, +        sourceCompatibility=1.8, +        targetCompatibility=1.8, +        sourceCompatibility=1.8, +        targetCompatibility=1.8, +++ b/build.gradle, +        sourceCompatibility=1.8, +        targetCompatibility=1.8, +        sourceCompatibility=1.8, +        targetCompatibility=1.8, +++ b/gradle.properties, +springSecurityVersion=5.0.0.BUILD-SNAPSHOT]
[+++ b/docs/src/reference/docbook/overview.xml, +				If you're not already using Spring Security to secure your application, you'll need to add the standalone crypto module. , +				This is required for OAuth1 request signing and encrypting credentials when persisting Connection data. , +				If you're already using Spring Security, there is nothing for you to do because the crypto library comes included., +	<section id="overview-samples">, +		<title>Sample Code</title>, +		<para>, +			We have created a few sample applications to illustrate the capabilities of Spring Social., +			To obtain the <ulink>https://github.com/SpringSource/spring-social-samples</ulink> code, use the following git command:, +		</para>, +		<programlisting language="txt">, +git clone git://github.com/SpringSource/spring-social-samples.git, +		</programlisting>, +		, +		<para>, +			The Spring Social Samples project includes the following samples:, +		</para>, +		, +		<itemizedlist>, +			<listitem><para>spring-social-quickstart - Designed to get you up and running quickly.</para></listitem>, +			<listitem><para>spring-social-showcase - Illustrates most of Spring Social's features.</para></listitem>, +			<listitem><para>spring-social-extending-new-api - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, +			<listitem><para>spring-social-extending-existing-api - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>, +		</itemizedlist>, +	</section>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.util.Set;, +	public SigningUtils() {, +	/**, +	 * Builds the authorization header., +	 * The elements in additionalParameters should be decoded., +	 */, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 */, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 * This method is a Spring 3.0-compatible version of buildAuthorizationHeaderValue(); planned for removal in Spring Social 1.1, +	 */, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	, +	Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +	, +				//      null should be equivalent to empty value...add the parameter with no value, +				result.add(formDecode(pair), "");, +	private MultiValueMap<String, String> combineMultiValueMaps(MultiValueMap<String, String> map1, MultiValueMap<String, String> map2) {, +		MultiValueMap<String, String> combinedMap = new LinkedMultiValueMap<String, String>(map1);, +		// can't use putAll here because it will overwrite anything that has the same key in both maps, +		Set<Entry<String, List<String>>> map2Entries = map2.entrySet();, +		for(Iterator<Entry<String, List<String>>> entryIt = map2Entries.iterator(); entryIt.hasNext();) {, +			Entry<String, List<String>> entry = entryIt.next();, +			String key = entry.getKey();, +			List<String> values = entry.getValue();, +			for (String value : values) {, +				combinedMap.add(key, value);, +			}, +		}, +		return combinedMap;, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.util.Set;, +	public SigningUtils() {, +	/**, +	 * Builds the authorization header., +	 * The elements in additionalParameters should be decoded., +	 */, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 */, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 * This method is a Spring 3.0-compatible version of buildAuthorizationHeaderValue(); planned for removal in Spring Social 1.1, +	 */, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	, +	Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +	, +				//      null should be equivalent to empty value...add the parameter with no value, +				result.add(formDecode(pair), "");, +	private MultiValueMap<String, String> combineMultiValueMaps(MultiValueMap<String, String> map1, MultiValueMap<String, String> map2) {, +		MultiValueMap<String, String> combinedMap = new LinkedMultiValueMap<String, String>(map1);, +		// can't use putAll here because it will overwrite anything that has the same key in both maps, +		Set<Entry<String, List<String>>> map2Entries = map2.entrySet();, +		for(Iterator<Entry<String, List<String>>> entryIt = map2Entries.iterator(); entryIt.hasNext();) {, +			Entry<String, List<String>> entry = entryIt.next();, +			String key = entry.getKey();, +			List<String> values = entry.getValue();, +			for (String value : values) {, +				combinedMap.add(key, value);, +			}, +		}, +		return combinedMap;, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/util/URIBuilder.java, +/*]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth/support/AbstractClientHttpRequest.java, +package org.springframework.social.oauth.support;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.util.Assert;, +, +/**, + * Borrowed from Spring 3.0 so that we have a consistent AbstractClientHttpRequest implementation for both Spring 3.0 and Spring 3.1-based applications., + * Note that this wouldn't be necessary if using Spring 3.0.6, which introduced AbstractBufferingHttpRequest., + * @author Craig Walls, + */, +public abstract class AbstractClientHttpRequest implements ClientHttpRequest {, +, +	private boolean executed = false;, +, +	private final HttpHeaders headers = new HttpHeaders();, +, +	private final ByteArrayOutputStream bufferedOutput = new ByteArrayOutputStream();, +, +	public final HttpHeaders getHeaders() {, +		return executed ? HttpHeaders.readOnlyHttpHeaders(headers) : this.headers;, +	}, +, +	public final OutputStream getBody() throws IOException {, +		checkExecuted();, +		return this.bufferedOutput;, +	}, +, +	public final ClientHttpResponse execute() throws IOException {, +		checkExecuted();, +		ClientHttpResponse result = executeInternal(this.headers, this.bufferedOutput.toByteArray());, +		this.executed = true;, +		return result;, +	}, +, +	private void checkExecuted() {, +		Assert.state(!this.executed, "ClientHttpRequest already executed");, +	}, +, +	/**, +	 * Abstract template method that writes the given headers and content to the HTTP request., +	 * , +	 * @param headers, +	 *            the HTTP headers, +	 * @param bufferedOutput, +	 *            the body content, +	 * @return the response object for the executed request, +	 */, +	protected abstract ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput), +			throws IOException;, +, +}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth/support/AbstractClientHttpRequest.java, +package org.springframework.social.oauth.support;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.util.Assert;, +, +/**, + * Borrowed from Spring 3.0 so that we have a consistent AbstractClientHttpRequest implementation for both Spring 3.0 and Spring 3.1-based applications., + * Note that this wouldn't be necessary if using Spring 3.0.6, which introduced AbstractBufferingHttpRequest., + * @author Craig Walls, + */, +public abstract class AbstractClientHttpRequest implements ClientHttpRequest {, +, +	private boolean executed = false;, +, +	private final HttpHeaders headers = new HttpHeaders();, +, +	private final ByteArrayOutputStream bufferedOutput = new ByteArrayOutputStream();, +, +	public final HttpHeaders getHeaders() {, +		return executed ? HttpHeaders.readOnlyHttpHeaders(headers) : this.headers;, +	}, +, +	public final OutputStream getBody() throws IOException {, +		checkExecuted();, +		return this.bufferedOutput;, +	}, +, +	public final ClientHttpResponse execute() throws IOException {, +		checkExecuted();, +		ClientHttpResponse result = executeInternal(this.headers, this.bufferedOutput.toByteArray());, +		this.executed = true;, +		return result;, +	}, +]
[+++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/build.gradle, +    ext.h2Version = '1.3.168', +    ext.hamcrestVersion = '1.3', +    ext.httpComponentsVersion = '4.2.1', +    ext.jacksonVersion = '1.9.9', +    ext.javaxInjectVersion = '1', +    ext.junitVersion = '4.10', +    ext.mockitoVersion = '1.9.0', +    ext.servletApiVersion = '2.5', +    ext.springVersion = '3.1.2.RELEASE', +    ext.springSecurityVersion = '3.1.1.RELEASE', +    ext.springTestMvcVersion = '1.0.0.M1', +    ext.jspApiVersion = '2.2.1', +        compile ("org.springframework:spring-jdbc:$springVersion", optional), +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion", optional), +        compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion", optional), +        compile ("javax.servlet:servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion", provided), +, +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$version") { transitive = false }, +      compile ("org.springframework.security:spring-security-core:$springSecurityVersion", optional), +      testCompile ("javax.servlet:servlet-api:$servletApiVersion", provided), +      testCompile "com.h2database:h2:$h2Version", +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +    }, +}, +, +        ext.sourceDir = file('src/reference/docbook'), +        ext.baseDir = "${project.name}-${project.version}";, +        gradleVersion = '1.1', +++ b/build.gradle, +    ext.h2Version = '1.3.168', +    ext.hamcrestVersion = '1.3', +    ext.httpComponentsVersion = '4.2.1', +    ext.jacksonVersion = '1.9.9', +    ext.javaxInjectVersion = '1', +    ext.junitVersion = '4.10', +    ext.mockitoVersion = '1.9.0', +    ext.servletApiVersion = '2.5', +    ext.springVersion = '3.1.2.RELEASE', +    ext.springSecurityVersion = '3.1.1.RELEASE', +    ext.springTestMvcVersion = '1.0.0.M1', +    ext.jspApiVersion = '2.2.1', +        compile ("org.springframework:spring-jdbc:$springVersion", optional), +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion", optional), +        compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion", optional), +        compile ("javax.servlet:servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion", provided), +, +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, +      compile ("org.springframework.social:spring-social-facebook:$version") { transitive = false }, +      compile ("org.springframework.security:spring-security-core:$springSecurityVersion", optional), +      testCompile ("javax.servlet:servlet-api:$servletApiVersion", provided), +      testCompile "com.h2database:h2:$h2Version", +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +    }, +}, +, +        ext.sourceDir = file('src/reference/docbook'), +        ext.baseDir = "${project.name}-${project.version}";, +        gradleVersion = '1.1', +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Aug 29 09:43:10 CDT 2012, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.1-bin.zip, +++ b/build.gradle, +    ext.h2Version = '1.3.168', +    ext.hamcrestVersion = '1.3', +    ext.httpComponentsVersion = '4.2.1', +    ext.jacksonVersion = '1.9.9', +    ext.javaxInjectVersion = '1', +    ext.junitVersion = '4.10', +    ext.mockitoVersion = '1.9.0', +    ext.servletApiVersion = '2.5', +    ext.springVersion = '3.1.2.RELEASE', +    ext.springSecurityVersion = '3.1.1.RELEASE', +    ext.springTestMvcVersion = '1.0.0.M1', +    ext.jspApiVersion = '2.2.1', +        compile ("org.springframework:spring-jdbc:$springVersion", optional), +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion", optional), +        compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion", optional), +        compile ("javax.servlet:servlet-api:$servletApiVersion", provided), +        compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion", provided), +, +project('spring-social-config') {, +    description = 'Spring Social Config', +    dependencies {, +      compile project(':spring-social-core'), +      compile project(':spring-social-web'), +      compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +package org.springframework.social.connect;, +]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +import org.springframework.social.OperationNotPermittedException;, +, +/**, + * Exception thrown when a duplicate status is posted., + * , + * @author Craig Walls, + */, +public class DuplicateStatusException extends OperationNotPermittedException {, +	private static final long serialVersionUID = 1L;, +, +	public DuplicateStatusException(String message) {, +		super(message);, +	}, +, +}]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.RELEASE, +role=buildmaster]
[+++ b/build.gradle, +        archives schemaZip, +++ b/build.gradle, +        archives schemaZip, +++ /dev/null, +++ b/build.gradle, +        archives schemaZip, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +import java.util.List;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.PropertyValue;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +import org.springframework.util.ClassUtils;, +import org.w3c.dom.Element;, +, +/**, + * Abstract bean definition parser for configuring provider-specific beans in a Spring application context., + * Automatically creates a {@link ConnectionFactoryLocator} bean if none exists and registers the {@link ConnectionFactory} bean with the {@link ConnectionFactoryLocator}., + * Also creates a request-scoped API binding bean retrieved from the connection repository., + * @author Craig Walls, + */, +public abstract class AbstractProviderConfigBeanDefinitionParser implements BeanDefinitionParser {, +, +	private final static Log logger = LogFactory.getLog(AbstractProviderConfigBeanDefinitionParser.class);, +, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +, +	/**, +	 * Constructs a connection factory-creating {@link BeanDefinitionParser}., +	 * @param connectionFactoryClass The type of {@link ConnectionFactory} to create. Must have a two-argument constructor taking an application's ID and secret as Strings., +	 */, +	protected AbstractProviderConfigBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiHelperClass) {, +		this.connectionFactoryClass = connectionFactoryClass;, +		this.apiHelperClass = apiHelperClass;, +		this.apiBindingType = GenericTypeResolver.resolveTypeArgument(connectionFactoryClass, ConnectionFactory.class);, +	}, +	, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET));, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	}, +, +	private BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret) {, +		return BeanDefinitionBuilder.genericBeanDefinition(connectionFactoryClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +	}, +, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactory for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		PropertyValue connectionFactoriesPropertyValue = connectionFactoryLocatorBD.getPropertyValues().getPropertyValue(CONNECTION_FACTORIES);, +		@SuppressWarnings("unchecked"), +		List<BeanDefinition> connectionFactoriesList = connectionFactoriesPropertyValue != null ? , +				(List<BeanDefinition>) connectionFactoriesPropertyValue.getValue() : new ManagedList<BeanDefinition>();, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret));		, +		connectionFactoryLocatorBD.getPropertyValues().addPropertyValue(CONNECTION_FACTORIES, connectionFactoriesList);, +	}, +, +	private BeanDefinition getConnectionFactoryLocatorBeanDefinition(ParserContext parserContext) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactoryLocator bean");, +		}		, +		if (!parserContext.getRegistry().containsBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID)) {		, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			]
[+++ b/docs/src/reference/docbook/apis.xml, +				You can access the user's list of Facebook friends by calling the <methodname>getFriendIds()</methodname> method from <interfacename>FriendOperations</interfacename>:, +			<para>, +				Facebook also enables users to organize their friends into friend lists., +				To retrieve a list of the authenticating user's friend lists, call <methodname>getFriendLists()</methodname> with no arguments: , +			</para>, +, +			<programlisting language="java"><![CDATA[, +List<Reference> friends = facebookApi.friendOperations().getFriendLists();]]>, +			</programlisting>, +			, +			<para>, +				You can also retrieve a list of friend lists for a specific user by passing the user ID (or an alias) to <methodname>getFriendLists()</methodname>:, +			</para>, +, +			<programlisting language="java"><![CDATA[, +List<Reference> friends = facebookApi.friendOperations().getFriendLists("habuma");]]>, +			</programlisting>, +, +			<para>, +				<methodname>getFriendLists()</methodname> returns a list of <classname>Reference</classname> objects that carry the ID and name of each friend list., +			</para>, +			, +			<para>, +				To retieve a list of friends who are members of a specific friend list call <methodname>getFriendListMembers()</methodname>, passing in the ID of the friend list:, +			</para>, +			, +			<programlisting language="java"><![CDATA[, +List<Reference> friends = facebookApi.friendOperations().getFriendListMembers("193839228");]]>, +			</programlisting>, +			, +			<para>, +				<interfacename>FriendOperations</interfacename> also support management of friend lists., +				For example, the <methodname>createFriendList()</methodname> method will create a new friend list for the user:, +			</para>, +			, +			<programlisting language="java"><![CDATA[, +Reference collegeFriends = facebookApi.friendOperations().createFriendList("College Buddies");]]>, +			</programlisting>, +			, +			<para>, +				<methodname>createFriendList()</methodname> returns a <classname>Reference</classname> to the newly created friend list., +			</para>, +			, +			<para>, +				To add a friend to the friend list, call <methodname>addToFriendList()</methodname>:, +			</para>, +, +			<programlisting language="java"><![CDATA[, +facebookApi.friendOperations().addToFriendList(collegeFriends.getId(), "527631174");]]>, +			</programlisting>, +, +			<para>, +				<methodname>addToFriendList()</methodname> takes two arguments: The ID of the friend list and the ID (or alias) of a friend to add to the list., +			</para>, +			, +			<para>, +				In a similar fashion, you may remove a friend from a list by calling <methodname>removeFromFriendList()</methodname>:, +			</para>, +, +			<programlisting language="java"><![CDATA[, +facebookApi.friendOperations().removeFromFriendList(collegeFriends.getId(), "527631174");]]>, +			</programlisting>, +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.servlet.http.HttpServletRequest;, +	public RedirectView removeConnection(@PathVariable String providerId, @PathVariable String providerUserId, HttpServletRequest request) {, +		return connectionStatusRedirect("../" + providerId);, +	private RedirectView connectionStatusRedirect(String relativePath) {, +		return new RedirectView(relativePath, true);]
[+++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitter.getUserProfile();]]>, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +String profileId = twitter.getProfileId();]]>, +				To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:, +twitter.updateStatus("Spring Social is awesome!")]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.retweet(tweetId);]]>, +				<classname>TwitterTemplate</classname> also supports reading of tweets from one of the available Twitter timelines. , +				To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline</methodname> method:, +List<Tweet> tweets = twitter.getPublicTimeline();]]>, +List<Tweet> tweets = twitter.getHomeTimeline();]]>, +List<Tweet> tweets = twitter.getFriendsTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline("rclarkson");]]>, +List<Tweet> tweets = twitter.getMentions();]]>, +				<classname>TwitterTemplate</classname> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method., +SearchResults results = twitter.search("#spring");]]>, +SearchResults results = twitter.search("#spring", 2, 10);]]>, +SearchResults results = twitter.search("#spring", 2, 10, 145962, 210112);]]>, +				<classname>TwitterTemplate</classname>'s <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:, +twitter.sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>, +				<classname>TwitterTemplate</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:, +List<DirectMessage> twitter.getDirectMessagesReceived();]]>, +++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitter.getUserProfile();]]>, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +String profileId = twitter.getProfileId();]]>, +				To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:, +twitter.updateStatus("Spring Social is awesome!")]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.retweet(tweetId);]]>, +				<classname>TwitterTemplate</classname> also supports reading of tweets from one of the available Twitter timelines. , +				To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline</methodname> method:, +List<Tweet> tweets = twitter.getPublicTimeline();]]>, +List<Tweet> tweets = twitter.getHomeTimeline();]]>, +List<Tweet> tweets = twitter.getFriendsTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline("rclarkson");]]>, +List<Tweet> tweets = twitter.getMentions();]]>, +				<classname>TwitterTemplate</classname> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method., +SearchResults results = twitter.search("#spring");]]>, +SearchResults results = twitter.search("#spring", 2, 10);]]>, +SearchResults results = twitter.search("#spring", 2, 10, 145962, 210112);]]>, +				<classname>TwitterTemplate</classname>'s <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:, +twitter.sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>, +				<classname>TwitterTemplate</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:, +List<DirectMessage> twitter.getDirectMessagesReceived();]]>, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +	public ServiceProviderConnectionValues getConnectionValues(Object serviceApi) {, +		return EMPTY_CONNECTION_VALUES;, +	}, +, +	public ServiceProviderUserProfile fetchUserProfile(Object serviceApi) {, +		return EMPTY_USER_PROFILE;, +	// internal helpers, +	, +	private static final ServiceProviderConnectionValues EMPTY_CONNECTION_VALUES = new ServiceProviderConnectionValues(null, null, null, null);, +, +	private static final ServiceProviderUserProfile EMPTY_USER_PROFILE = new ServiceProviderUserProfile(null, null, null, null, null);, +, +++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, +	/**, +	 * Sets the signup URL; the URL to redirect to if authentication fails so that the user can register with the application., +	 * May be fully-qualified URL (e.g., "http://somehost/somepath/signup") or a path relative to application's servlet context path (e.g., "/signup")., +	 * @param signupUrl The signup URL, +	 */, +				throw new SocialAuthenticationRedirectException(buildSignupUrl(request));, +	private String buildSignupUrl(HttpServletRequest request) {, +		if (signupUrl.startsWith("http://") || signupUrl.startsWith("https://"))  {, +			return signupUrl;, +		}, +		if (!signupUrl.startsWith("/")) {, +			return ServletUriComponentsBuilder.fromContextPath(request).path("/" + signupUrl).build().toUriString();, +		}, +		return ServletUriComponentsBuilder.fromContextPath(request).path(signupUrl).build().toUriString();, +	}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, +	/**, +	 * Sets the signup URL; the URL to redirect to if authentication fails so that the user can register with the application., +	 * May be fully-qualified URL (e.g., "http://somehost/somepath/signup") or a path relative to application's servlet context path (e.g., "/signup")., +	 * @param signupUrl The signup URL, +	 */, +				throw new SocialAuthenticationRedirectException(buildSignupUrl(request));, +	private String buildSignupUrl(HttpServletRequest request) {, +		if (signupUrl.startsWith("http://") || signupUrl.startsWith("https://"))  {, +			return signupUrl;, +		}, +		if (!signupUrl.startsWith("/")) {, +			return ServletUriComponentsBuilder.fromContextPath(request).path("/" + signupUrl).build().toUriString();, +		}, +		return ServletUriComponentsBuilder.fromContextPath(request).path(signupUrl).build().toUriString();, +	}, +, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +import org.springframework.security.authentication.BadCredentialsException;, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", null);, +	@Test, +	public void testFailedAuth_slashRegister() throws Exception {, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", "/register");, +		testFailedAuth(env);, +	}, +, +	@Test, +	public void testFailedAuth_register() throws Exception {, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", "register");, +		testFailedAuth(env);, +	}, +, +	@Test, +	public void testFailedAuth_fullyQualifiedUrlRegister() throws Exception {, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", "http://localhost/register");, +		testFailedAuth(env);, +	}, +, +	@SuppressWarnings("unchecked"), +	private void testFailedAuth(FilterTestEnv env) throws Exception {, +		env.filter.setFilterProcessesUrl(env.req.getRequestURI());, +		env.filter.setPostLoginUrl("/success");, +		, +		ConnectionFactory<Object> factory = mock(MockConnectionFactory.class);, +		when(factory.getProviderId()).thenReturn("mock");, +		env.req.setRequestURI(env.req.getRequestURI() + "/" + factory.getProviderId());, +, +		SocialAuthenticationService<Object> authService = mock(SocialAuthenticationService.class);, +		when(authService.getConnectionCardinality()).thenReturn(ConnectionCardinality.ONE_TO_ONE);, +		when(authService.getConnectionFactory()).thenReturn(factory);, +		when(authService.getAuthToken(env.req, env.res)).thenReturn(env.auth);, +		env.addAuthService(authService);, +, +		when(env.authManager.authenticate(env.auth)).thenThrow(new BadCredentialsException("Failed"));, +, +		assertNull(SecurityContextHolder.getContext().getAuthentication());, +, +		env.doFilter();, +, +		assertNull(SecurityContextHolder.getContext().getAuthentication());, +		, +		assertEquals("http://localhost/register", env.res.getRedirectedUrl());, +	}, +	, +		private FilterTestEnv(String method, String requestURI, String signupUrl) {, +			filter.setSignupUrl(signupUrl);]
[+++ b/docs/src/reference/docbook/apis.xml, +				The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name and their Facebook ID., +				Depending on what authorization scope has been granted to the application, it may also include additional details about the user such as their email address, birthday, hometown, and religious and political affiliations., +				For example, <methodname>getBirthday()</methodname> will return the current user's birthday if the application has been granted "user_birthday" permission; null otherwise., +				Consult the JavaDoc for <classname>FacebookProfile</classname> for details on which permissions are required for each property., +			<title>Posting to and reading feeds</title>, +				To post a message to the user's Facebook wall, call <interfacename>FeedOperations</interfacename>' <methodname>updateStatus()</methodname> method, passing in the message to be posted:, +				If you want to read posts from a user's feed, <interfacename>FeedOperations</interfacename> has several methods to choose from., +				The <methodname>getFeed()</methodname> method retrieves recent posts to a user's wall., +				When called with no parameters, it retrieves posts from the authenticating user's wall:, +List<Post> feed = facebookApi.feedOperations().getFeed();]]>, +				Or you can read a specific user's wall by passing their Facebook ID to <methodname>getFeed()</methodname>:, +			<programlisting language="java"><![CDATA[, +List<Post> feed = facebookApi.feedOperations().getFeed("habuma");]]>, +			</programlisting>, +, +				In any event, the <methodname>getFeed()</methodname> method returns a list of <classname>Post</classname> objects., +				The <classname>Post</classname> class has six subtypes to represent different kinds of posts:, +			</para>, +			, +			<itemizedlist>, +				<listitem><para><classname>CheckinPost</classname> - Reports a user's checkin in Facebook Places.</para></listitem>, +				<listitem><para><classname>LinkPost</classname> - Shares a link the user has posted.</para></listitem>, +				<listitem><para><classname>NotePost</classname> - Publicizes a note that the user has written.</para></listitem>, +				<listitem><para><classname>PhotoPost</classname> - Announces a photo that the user has uploaded.</para></listitem>, +				<listitem><para><classname>StatusPost</classname> - A simple status.</para></listitem>, +				<listitem><para><classname>VideoPost</classname> - Announces a video that the user has uploaded.</para></listitem>, +			</itemizedlist>, +			, +			<para>, +				The <classname>Post</classname>'s <methodname>getType()</methodname> method identifies the type of <classname>Post</classname>., +++ b/docs/src/reference/docbook/apis.xml, +				The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name and their Facebook ID., +				Depending on what authorization scope has been granted to the application, it may also include additional details about the user such as their email address, birthday, hometown, and religious and political affiliations., +				For example, <methodname>getBirthday()</methodname> will return the current user's birthday if the application has been granted "user_birthday" permission; null otherwise., +				Consult the JavaDoc for <classname>FacebookProfile</classname> for details on which permissions are required for each property., +			<title>Posting to and reading feeds</title>, +				To post a message to the user's Facebook wall, call <interfacename>FeedOperations</interfacename>' <methodname>updateStatus()</methodname> method, passing in the message to be posted:, +				If you want to read posts from a user's feed, <interfacename>FeedOperations</interfacename> has several methods to choose from., +				The <methodname>getFeed()</methodname> method retrieves recent posts to a user's wall., +				When called with no parameters, it retrieves posts from the authenticating user's wall:, +List<Post> feed = facebookApi.feedOperations().getFeed();]]>, +				Or you can read a specific user's wall by passing their Facebook ID to <methodname>getFeed()</methodname>:, +			<programlisting language="java"><![CDATA[, +List<Post> feed = facebookApi.feedOperations().getFeed("habuma");]]>, +			</programlisting>, +, +				In any event, the <methodname>getFeed()</methodname> method returns a list of <classname>Post</classname> objects., +				The <classname>Post</classname> class has six subtypes to represent different kinds of posts:, +			</para>, +			, +			<itemizedlist>, +				<listitem><para><classname>CheckinPost</classname> - Reports a user's checkin in Facebook Places.</para></listitem>, +				<listitem><para><classname>LinkPost</classname> - Shares a link the user has posted.</para></listitem>, +				<listitem><para><classname>NotePost</classname> - Publicizes a note that the user has written.</para></listitem>, +				<listitem><para><classname>PhotoPost</classname> - Announces a photo that the user has uploaded.</para></listitem>, +				<listitem><para><classname>StatusPost</classname> - A simple status.</para></listitem>, +				<listitem><para><classname>VideoPost</classname> - Announces a video that the user has uploaded.</para></listitem>, +			</itemizedlist>, +			, +			<para>, +				The <classname>Post</classname>'s <methodname>getType()</methodname> method identifies the type of <classname>Post</classname>., +++ b/docs/src/reference/docbook/signin.xml, +			Spring Social supports such service provider-based authentication with <classname>ProviderSignInController</classname> from the web module., +			<classname>ProviderSignInController</classname> works very much like <classname>ConnectController</classname> in that it goes through the OAuth flow (either OAuth 1 or OAuth 2, depending on the provider)., +			At the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., +			If no previously established connection matches, the flow will be sent to the application's signup page so that the user may register with the application., +			To add provider signin capability to your Spring application, configure <classname>ProviderSignInController</classname> as a bean in your Spring MVC application:, +<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">, +			Although <classname>ProviderSignInController</classname>'s only constructor takes 5 parameters, it is also annotated with <classname>@Inject</classname>., +			So, when optimized for autowiring, the <classname>ProviderSignInController</classname> bean only requires a <code><![CDATA[<constructor-arg>]]></code> to specify the application's base URL., +			<classname>ProviderSignInController</classname> wil use this URL to construct the callback URL used in the authentication flow., +		</para>, +		, +		<para>, +			When authenticating through an OAuth 1 provider, <classname>ProviderSignInController</classname> supports the following flow:, +			<listitem><para><code>POST /signin/{provider ID}</code> - Initiates the signin flow. This means fetching a request token from the provider and then redirecting to Provider's authentication page.</para></listitem>, +			<listitem><para><code>GET /signin/{provider ID}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +							If the received access token doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a signup URL. , +							The signup URL is "/signup" (relative to the application root)., +			For OAuth 2 providers, the flow is only slightly different:, +		</para>, +		, +		<itemizedlist>, +			<listitem><para><code>POST /signin/{provider ID}</code> - Initiates the signin flow. Redirects to Provider's authentication page.</para></listitem>, +			<listitem><para><code>GET /signin/{provider ID}?code={verifier}</code> - Receives the authentication callback from the provider, accepting a code. Exchanges this code for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +				<itemizedlist>, +					<listitem>, +						<para>, +							If the received access token doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a signup URL. , +							The signup URL is "/signup" (relative to the application root)., +						</para>, +					</listitem>, +				</itemizedlist>, +			</listitem>, +		</itemizedlist>, +				, +		<para>, +			<classname>ProviderSignInController</classname> handles the authentication flow with a provider, but relies on an implementation of <interfacename>SignInService</interfacename> to perform the actual authentication into the application. , +			<interfacename>SignInService</interfacename> is defined as follows:]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/EventInviteeMixin.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.support.json;, +, +import org.codehaus.jackson.annotate.JsonCreator;, +import org.codehaus.jackson.annotate.JsonProperty;, +import org.codehaus.jackson.map.annotate.JsonDeserialize;, +import org.springframework.social.facebook.types.RsvpStatus;, +, +public class EventInviteeMixin {, +	, +	@JsonCreator, +	public EventInviteeMixin(, +			@JsonProperty("id") String id, , +			@JsonProperty("name") String name, , +			@JsonProperty("rsvp_status") @JsonDeserialize(using=RsvpStatusDeserializer.class) RsvpStatus rsvpStatus) {}, +	, +}, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/EventInviteeMixin.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.support.json;, +, +import org.codehaus.jackson.annotate.JsonCreator;, +import org.codehaus.jackson.annotate.JsonProperty;, +import org.codehaus.jackson.map.annotate.JsonDeserialize;, +import org.springframework.social.facebook.types.RsvpStatus;, +, +public class EventInviteeMixin {, +	, +	@JsonCreator, +	public EventInviteeMixin(, +			@JsonProperty("id") String id, , +			@JsonProperty("name") String name, , +			@JsonProperty("rsvp_status") @JsonDeserialize(using=RsvpStatusDeserializer.class) RsvpStatus rsvpStatus) {}, +	, +}, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/FacebookModule.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +		MappingJacksonHttpMessageConverter jsonConverter = new MappingJacksonHttpMessageConverter();, +		configureJsonMessageConverter(jsonConverter);, +		messageConverters.add(jsonConverter);, +		messageConverters.add(new ByteArrayHttpMessageConverter());, +	/**, +	 * Subclassing hook to enable API binding implementations to configure the MappingJacksonHttpMessageConverter., +	 * For example, an API binding may configure the converter with a custom ObjectMapper., +	 * @param converter The MappingJacksonHttpMessageConverter to be configured. , +	 */, +	protected void configureJsonMessageConverter(MappingJacksonHttpMessageConverter converter) {, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +		MappingJacksonHttpMessageConverter jsonConverter = new MappingJacksonHttpMessageConverter();, +		configureJsonMessageConverter(jsonConverter);, +		messageConverters.add(jsonConverter);, +		messageConverters.add(new ByteArrayHttpMessageConverter());, +	/**, +	 * Subclassing hook to enable API binding implementations to configure the MappingJacksonHttpMessageConverter., +	 * For example, an API binding may configure the converter with a custom ObjectMapper., +	 * @param converter The MappingJacksonHttpMessageConverter to be configured. , +	 */, +	protected void configureJsonMessageConverter(MappingJacksonHttpMessageConverter converter) {, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +	 * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., +		MappingJacksonHttpMessageConverter jsonConverter = new MappingJacksonHttpMessageConverter();, +		configureJsonMessageConverter(jsonConverter);, +		messageConverters.add(jsonConverter);, +		messageConverters.add(new ByteArrayHttpMessageConverter());, +	/**, +	 * Subclassing hook to enable API binding implementations to configure the MappingJacksonHttpMessageConverter., +	 * For example, an API binding may configure the converter with a custom ObjectMapper., +	 * @param converter The MappingJacksonHttpMessageConverter to be configured. , +	 */, +	protected void configureJsonMessageConverter(MappingJacksonHttpMessageConverter converter) {, +	}, +]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationServiceRegistry.java, +	 * @param authenticationServices the set of social authentication services to register, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationServiceRegistry.java, +	 * @param authenticationServices the set of social authentication services to register, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/SocialAuthenticationService.java]
[+++ b/docs/src/reference/docbook/apis.xml, +			Spring Social offers interaction with Twitter's service API through the <interfacename>Twitter</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>.			, +Twitter twitter = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +Twitter twitter = new TwitterTemplate();]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>Twitter</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Twitter</interfacename>:, +Connection<Twitter> connection = connectionRepository.findPrimaryConnectionToApi(Twitter.class);, +Twitter twitter = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>Twitter</interfacename> instance that is configured with the connection details received when the connection was first established., +			Once you have a <interfacename>Twitter</interfacename>, you can perform a several operations against Twitter., +			<interfacename>Twitter</interfacename> is defined as follows:, +public interface Twitter {, +			The <methodname>isAuthorizedForUser</methodname> helps determine if the <interfacename>Twitter</interfacename> instance has been created with credentials to perform on behalf of a user., +			<title>Twitter's Sub-APIs</title>, +			What follows is a survey of common tasks you may perform with <interfacename>Twitter</interfacename> and its sub-APIs., +TwitterProfile profile = twitter.userOperations().getUserProfile();]]>, +TwitterProfile profile = twitter.userOperations().getUserProfile("habuma");]]>, +String profileId = twitter.userOperations().getScreenName();]]>, +twitter.timelineOperations().updateStatus("Spring Social is awesome!")]]>, +twitter.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.timelineOperations().retweet(tweetId);]]>, +List<Tweet> tweets = twitter.timelineOperations().getPublicTimeline();]]>, +List<Tweet> tweets = twitter.timelineOperations().getHomeTimeline();]]>, +List<Tweet> tweets = twitter.timelineOperations().getFriendsTimeline();]]>, +List<Tweet> tweets = twitter.timelineOperations().getUserTimeline();]]>, +List<Tweet> tweets = twitter.timelineOperations().getUserTimeline("rclarkson");]]>, +List<Tweet> tweets = twitter.timelineOperations().getMentions();]]>, +twitter.friendOperations().follow("habuma");]]>, +twitter.friendOperations().unfollow("habuma");]]>, +List<TwitterProfile> friends = twitter.friendOperations().getFriends("habuma");]]>, +List<TwitterProfile> followers = twitter.friendOperations().getFollowers("habuma");]]>, +UserList familyList = twitter.listOperations().createList(, +twitter.listOperations().addToList(familyList.getSlug(), "artnames");]]>, +twitter.listOperations().removeFromList(familyList.getSlug(), "artnames");]]>, +twitter.listOperations().subscribe("habuma", "music");]]>, +twitter.listOperations().unsubscribe("habuma", "music");]]>, +SearchResults results = twitter.searchOperations().search("#spring");]]>, +SearchResults results = twitter.searchOperations().search("#spring", 2, 10);]]>, +SearchResults results = twitter.searchOperations().search("#spring", 2, 10, 145962, 210112);]]>, +twitter.directMessageOperations().sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>, +List<DirectMessage> twitter.directMessageOperations().getDirectMessagesReceived();]]>, +			Spring Social's <interfacename>Facebook</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user., +Facebook facebook = new FacebookTemplate(accessToken);]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>Facebook</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Facebook</interfacename>:, +Connection<Facebook> connection = connectionRepository.findPrimaryConnectionToApi(Facebook.class);, +Facebook facebook = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>Facebook</interfacename> instance that is configured with the connection details received when the connection was first established., +			With a <interfacename>Facebook</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user., +			Spring Social's Facebook API binding is divided into 9 sub-APIs exposes through the methods of <interfacename>Facebook</interfacename>:, +public interface Facebook extends GraphApi {, +			The sub-API interfaces returned from <interfacename>Facebook</interfacename>'s methods are described in <xref linkend="table-facebook-sub-apis" />., +			<title>Facebook's Sub-APIs</title>, +			The following sections will give an overview of common tasks that can be performed via <interfacename>Facebook</interfacename> and its sub-APIs., +				You can retrieve a user's Facebook profile data using <interfacename>Facebook</interfacename>' <methodname>getUserProfile()</methodname> method:, +FacebookProfile profile = facebook.userOperations().getUserProfile();]]>, +String profileId = facebook.userOperations().getProfileId();]]>, +String profileUrl = facebook.userOperations().getProfileUrl();]]>, +List<String> friendIds = facebook.friendOperations().getFriendIds();]]>, +FacebookProfile firstFriend = facebook.userOperations().getUserProfile(friendIds.get(0));]]>, +List<FacebookProfile> friends = facebook.friendOperations().getFriendProfiles();]]>, +List<Reference> friends = facebook.friendOperations().getFriendLists();]]>, +List<Reference> friends = facebook.friendOperations().getFriendLists("habuma");]]>, +List<Reference> friends = facebook.friendOperations().getFriendListMembers("193839228");]]>, +Reference collegeFriends = facebook.friendOperations().createFriendList("College Buddies");]]>, +facebook.friendOperations().addToFriendList(collegeFriends.getId(), "527631174");]]>, +facebook.friendOperations().removeFromFriendList(collegeFriends.getId(), "527631174");]]>, +facebook.feedOperations().updateStatus("I'm trying out Spring Social!");]]>, +facebook.feedOperations().updateStatus("I'm trying out Spring Social!", link);]]>, +List<Post> feed = facebook.feedOperations().getFeed();]]>, +List<Post> feed = facebook.feedOperations().getFeed("habuma");]]>, +			Spring Social offers integration with LinkedIn via <interfacename>LinkedIn</interfacename> and its implementation, <classname>LinkedInTemplate</classname>., +LinkedIn linkedin = new LinkedInTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>LinkedIn</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>LinkedIn</interfacename>:, +Connection<LinkedIn> connection = connectionRepository.findPrimaryConnectionToApi(LinkedIn.class);, +LinkedIn linkedin = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>LinkedIn</interfacename> instance that is configured with the connection details received when the connection was first established., +			Once you have a <interfacename>LinkedIn</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for., +			Using Spring Social's <interfacename>TripIt</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network., +TripIt tripit = new TripItTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TripIt</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TripIt</interfacename>:, +Connection<TripIt> connection = connectionRepository.findPrimaryConnectionToApi(TripIt.class);, +TripIt tripit = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>TripIt</interfacename> instance that is configured with the connection details received when the connection was first established., +			In either event, once you have a <interfacename>TripIt</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt., +				<interfacename>TripIt</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. , +			Spring Social's <interfacename>GitHub</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform., +GitHub github = new GitHubTemplate(accessToken);]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GitHub</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GitHub</interfacename>:, +Connection<GitHub> connection = connectionRepository.findPrimaryConnectionToApi(GitHub.class);, +GitHub github = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>GitHub</interfacename> instance that is configured with the connection details received when the connection was first established., +			With a <interfacename>GitHub</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. , +				To get the currently authenticated user's GitHub profile data, call <interfacename>GitHub</interfacename>'s <methodname>getUserProfile()</methodname> method:, +			Spring Social supports interaction with Gowalla through the <interfacename>Gowalla</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>., +Gowalla gowalla = new GowallaTemplate(accessToken);]]>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant)., +	 * @param username the user's username on the provider, +	 * @param password the user's password on the provider, +	 * @param additionalParameters any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters);, +, +	/**, +	 * @deprecated Set the scope via additional parameters. This can be done conveniently user OAuth2Parameters., +	@Deprecated, +	/**, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant)., +	 * @param username the user's username on the provider, +	 * @param password the user's password on the provider, +	 * @param additionalParameters any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters);, +, +	/**, +	 * @deprecated Set the scope via additional parameters. This can be done conveniently user OAuth2Parameters., +	@Deprecated, +	/**, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +, +	public AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters) {, +		MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();, +		if (parameterBasedClientAuthentication) {, +			params.set("client_id", clientId);, +			params.set("client_secret", clientSecret);, +		}, +		params.set("username", username);, +		params.set("password", password);, +		params.set("grant_type", "password");, +		if (additionalParameters != null) {, +			params.putAll(additionalParameters);, +		}, +		return postForAccessGrant(accessTokenUrl, params);, +	}, +, +		additionalParameters.set("scope", scope);, +		return refreshAccess(refreshToken, additionalParameters);, +	}, +	, +	public AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant)., +	 * @param username the user's username on the provider, +	 * @param password the user's password on the provider, +	 * @param additionalParameters any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters);, +, +	/**, +	 * @deprecated Set the scope via additional parameters. This can be done conveniently user OAuth2Parameters., +	@Deprecated, +	/**, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +, +	public AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters) {, +		MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();, +		if (parameterBasedClientAuthentication) {, +			params.set("client_id", clientId);, +			params.set("client_secret", clientSecret);, +		}, +		params.set("username", username);, +		params.set("password", password);]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.2 Release (January 23, 2012), +  * Allow for null returned from ConnectionSignUp.execute() to indicate a problem with implicitly, +    creating a user. (SOCIAL-254), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.2 Release (January 23, 2012), +  * Allow for null returned from ConnectionSignUp.execute() to indicate a problem with implicitly, +    creating a user. (SOCIAL-254), +++ b/docs/src/reference/docbook/signin.xml, +			<para>, +				If there is any problem in creating the new user implicitly (for example, if the implicitly chosen username is already taken) <methodname>execute()</methodname> may return null to indicate that the user could not be created implicitly., +				This will ultimately result in <classname>ProviderSignInController</classname> redirecting the user to the signup page., +			</para>, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.2 Release (January 23, 2012), +  * Allow for null returned from ConnectionSignUp.execute() to indicate a problem with implicitly, +    creating a user. (SOCIAL-254), +++ b/docs/src/reference/docbook/signin.xml, +			<para>, +				If there is any problem in creating the new user implicitly (for example, if the implicitly chosen username is already taken) <methodname>execute()</methodname> may return null to indicate that the user could not be created implicitly., +				This will ultimately result in <classname>ProviderSignInController</classname> redirecting the user to the signup page., +			</para>, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +	 * @return the new user id. May be null to indicate that an implicit local user profile could not be created.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.core.annotation.AnnotationUtils;, +	private String baseCallbackUrl;, +	, +	 * Sets the application's base URL., +	 * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ConnectController., +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	 */, +	public void setApplicationUrl(String applicationUrl) {, +		this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	}, +	, +	/**, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, callbackUrl));, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request, callbackUrl);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.core.annotation.AnnotationUtils;, +	private String baseCallbackUrl;, +	, +	 * Sets the application's base URL., +	 * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ConnectController., +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	 */, +	public void setApplicationUrl(String applicationUrl) {, +		this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	}, +	, +	/**, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, callbackUrl));, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request, callbackUrl);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request, overrideCallbackUrl);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request, overrideCallbackUrl);, +	public Connection<?> completeConnection(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl, null);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +			requestToken = oauthOperations.fetchRequestToken(callbackUrl, null);				, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl, request.getParameter("scope"));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.core.annotation.AnnotationUtils;, +	private String baseCallbackUrl;, +	, +	 * Sets the application's base URL., +	 * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ConnectController., +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	 */, +	public void setApplicationUrl(String applicationUrl) {, +		this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	}, +	, +	/**, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, callbackUrl));, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request, callbackUrl);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request, overrideCallbackUrl);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request, overrideCallbackUrl);, +	public Connection<?> completeConnection(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl, null);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +			requestToken = oauthOperations.fetchRequestToken(callbackUrl, null);				, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl, request.getParameter("scope"));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import org.springframework.core.annotation.AnnotationUtils;, +	private String baseCallbackUrl;, +, +	 * Sets the application's base URL., +	 * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ProviderSignInController., +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	 */, +	public void setApplicationUrl(String applicationUrl) {, +		this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	}, +	, +	/**, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, callbackUrl));, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request, callbackUrl);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +public final class DuplicateServiceProviderConnectionException extends RuntimeException {, +	private static final long serialVersionUID = 1L;, +	, +	private final ServiceProviderConnectionKey connectionKey;, +, +	public DuplicateServiceProviderConnectionException(ServiceProviderConnectionKey connectionKey) {, +		this.connectionKey = connectionKey;, +	}, +, +	public ServiceProviderConnectionKey getConnectionKey() {, +		return connectionKey;, +	}, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +public final class DuplicateServiceProviderConnectionException extends RuntimeException {, +	private static final long serialVersionUID = 1L;, +	, +	private final ServiceProviderConnectionKey connectionKey;, +, +	public DuplicateServiceProviderConnectionException(ServiceProviderConnectionKey connectionKey) {, +		this.connectionKey = connectionKey;, +	}, +, +	public ServiceProviderConnectionKey getConnectionKey() {, +		return connectionKey;, +	}, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.dao.DuplicateKeyException;, +import org.springframework.social.connect.DuplicateServiceProviderConnectionException;, +		try {, +		} catch (DuplicateKeyException e) {, +			throw new DuplicateServiceProviderConnectionException(connection.getKey());, +		}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +public final class DuplicateServiceProviderConnectionException extends RuntimeException {, +	private static final long serialVersionUID = 1L;, +	, +	private final ServiceProviderConnectionKey connectionKey;, +, +	public DuplicateServiceProviderConnectionException(ServiceProviderConnectionKey connectionKey) {, +		this.connectionKey = connectionKey;, +	}, +, +	public ServiceProviderConnectionKey getConnectionKey() {, +		return connectionKey;, +	}, +}]
[+++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +        compile project(':spring-social-connect-web'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +        compile project(':spring-social-connect-web'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +import org.springframework.social.facebook.provider.FacebookServiceProvider;, +++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +        compile project(':spring-social-connect-web'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +import org.springframework.social.facebook.provider.FacebookServiceProvider;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GitHubProviderElementParser.java, +import org.springframework.social.github.provider.GitHubServiceProvider;, +++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +        compile project(':spring-social-connect-web'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +import org.springframework.social.facebook.provider.FacebookServiceProvider;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GitHubProviderElementParser.java, +import org.springframework.social.github.provider.GitHubServiceProvider;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GowallaProviderElementParser.java, +import org.springframework.social.gowalla.provider.GowallaServiceProvider;, +++ b/build.gradle, +        compile project(':spring-social-github') { optional = true }, +        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +        compile project(':spring-social-connect-web'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +        compile project(':spring-social-connect'), +//        compile project(':spring-social-oauth'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +import org.springframework.social.facebook.provider.FacebookServiceProvider;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GitHubProviderElementParser.java, +import org.springframework.social.github.provider.GitHubServiceProvider;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GowallaProviderElementParser.java, +import org.springframework.social.gowalla.provider.GowallaServiceProvider;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/LinkedInProviderElementParser.java, +import org.springframework.social.linkedin.provider.LinkedInServiceProvider;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +	 * Note that this method is called after the RestTemplate has been configured with the message converters returned from getMessageConverters()., +	 * Override to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead., +	 * Override to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead., +	 * Override to customize the message converter (for example, to set supported media types)., +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead.	 , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +	 * Note that this method is called after the RestTemplate has been configured with the message converters returned from getMessageConverters()., +	 * Override to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead., +	 * Override to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead., +	 * Override to customize the message converter (for example, to set supported media types)., +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead.	 , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +	 * Note that this method is called after the RestTemplate has been configured with the message converters returned from getMessageConverters()., +	 * Override to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead., +	 * Override to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead., +	 * Override to customize the message converter (for example, to set supported media types)., +	 * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead.	 ]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private final MultiValueMap<Class<?>, ConnectInterceptor<?>> connectInterceptors = new LinkedMultiValueMap<Class<?>, ConnectInterceptor<?>>();, +, +	private final MultiValueMap<Class<?>, DisconnectInterceptor<?>> disconnectInterceptors = new LinkedMultiValueMap<Class<?>, DisconnectInterceptor<?>>();, +	 * Configure the list of connect interceptors that should receive callbacks during the connection process., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the connect interceptors to add, +	 * @deprecated Use {@link #setConnectInterceptors(List)} instead., +	 */, +	@Deprecated, +	public void setInterceptors(List<ConnectInterceptor<?>> interceptors) {, +		setConnectInterceptors(interceptors);, +	}, +	, +	/**, +	 * Configure the list of connect interceptors that should receive callbacks during the connection process., +	public void setConnectInterceptors(List<ConnectInterceptor<?>> interceptors) {, +	 * Configure the list of discconnect interceptors that should receive callbacks when connections are removed., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the connect interceptors to add, +	 */, +	public void setDisconnectInterceptors(List<DisconnectInterceptor<?>> interceptors) {, +		for (DisconnectInterceptor<?> interceptor : interceptors) {, +			addDisconnectInterceptor(interceptor);, +		}, +	}, +, +	/**, +		connectInterceptors.add(serviceApiType, interceptor);, +	}, +, +	/**, +	 * Adds a DisconnectInterceptor to receive callbacks during the disconnection process., +	 * Useful for programmatic configuration., +	 * @param interceptor the connect interceptor to add, +	 */, +	public void addDisconnectInterceptor(DisconnectInterceptor<?> interceptor) {, +		Class<?> serviceApiType = GenericTypeResolver.resolveTypeArgument(interceptor.getClass(), DisconnectInterceptor.class);, +		disconnectInterceptors.add(serviceApiType, interceptor);, +		ConnectionFactory<?> connectionFactory = connectionFactoryLocator.getConnectionFactory(providerId);, +		preDisconnect(connectionFactory, request);, +		postDisconnect(connectionFactory, request);, +		ConnectionFactory<?> connectionFactory = connectionFactoryLocator.getConnectionFactory(providerId);, +		preDisconnect(connectionFactory, request);, +		postDisconnect(connectionFactory, request);, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private void preDisconnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		for (DisconnectInterceptor interceptor : interceptingDisconnectionsTo(connectionFactory)) {, +			interceptor.preDisconnect(connectionFactory, request);, +		}		, +	}, +, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private void postDisconnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		for (DisconnectInterceptor interceptor : interceptingDisconnectionsTo(connectionFactory)) {, +			interceptor.postDisconnect(connectionFactory, request);, +		}		, +	}, +, +		List<ConnectInterceptor<?>> typedInterceptors = connectInterceptors.get(serviceType);, +		if (typedInterceptors == null) {, +			typedInterceptors = Collections.emptyList();, +		}, +		return typedInterceptors;, +	}, +, +	private List<DisconnectInterceptor<?>> interceptingDisconnectionsTo(ConnectionFactory<?> connectionFactory) {, +		Class<?> serviceType = GenericTypeResolver.resolveTypeArgument(connectionFactory.getClass(), ConnectionFactory.class);, +		List<DisconnectInterceptor<?>> typedInterceptors = disconnectInterceptors.get(serviceType);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private final MultiValueMap<Class<?>, ConnectInterceptor<?>> connectInterceptors = new LinkedMultiValueMap<Class<?>, ConnectInterceptor<?>>();, +, +	private final MultiValueMap<Class<?>, DisconnectInterceptor<?>> disconnectInterceptors = new LinkedMultiValueMap<Class<?>, DisconnectInterceptor<?>>();, +	 * Configure the list of connect interceptors that should receive callbacks during the connection process., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the connect interceptors to add, +	 * @deprecated Use {@link #setConnectInterceptors(List)} instead., +	 */, +	@Deprecated, +	public void setInterceptors(List<ConnectInterceptor<?>> interceptors) {, +		setConnectInterceptors(interceptors);, +	}, +	, +	/**, +	 * Configure the list of connect interceptors that should receive callbacks during the connection process., +	public void setConnectInterceptors(List<ConnectInterceptor<?>> interceptors) {, +	 * Configure the list of discconnect interceptors that should receive callbacks when connections are removed., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the connect interceptors to add, +	 */, +	public void setDisconnectInterceptors(List<DisconnectInterceptor<?>> interceptors) {, +		for (DisconnectInterceptor<?> interceptor : interceptors) {, +			addDisconnectInterceptor(interceptor);, +		}]
[+++ b/build.gradle, +        testCompile ("com.h2database:h2:$h2Version"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("com.h2database:h2:$h2Version"), +      testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("org.springframework:spring-jdbc:$springVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion", provided), +        gradleVersion = '1.3', +++ b/build.gradle, +        testCompile ("com.h2database:h2:$h2Version"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("com.h2database:h2:$h2Version"), +      testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("org.springframework:spring-jdbc:$springVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion", provided), +        gradleVersion = '1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +        testCompile ("com.h2database:h2:$h2Version"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("com.h2database:h2:$h2Version"), +      testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("org.springframework:spring-jdbc:$springVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion", provided), +        gradleVersion = '1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Thu Dec 06 11:22:23 EST 2012, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.3-bin.zip, +++ b/build.gradle, +        testCompile ("com.h2database:h2:$h2Version"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("com.h2database:h2:$h2Version"), +      testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("org.springframework:spring-jdbc:$springVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion", provided), +        gradleVersion = '1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Thu Dec 06 11:22:23 EST 2012, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.3-bin.zip, +++ b/gradlew, +        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT", +    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\"", +++ b/build.gradle, +        testCompile ("com.h2database:h2:$h2Version"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), +        testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("com.h2database:h2:$h2Version"), +      testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), +      testCompile ("org.springframework:spring-jdbc:$springVersion"), +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion", provided), +        gradleVersion = '1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Thu Dec 06 11:22:23 EST 2012, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.3-bin.zip, +++ b/gradlew, +        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT", +    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\"", +++ b/publish-maven.gradle, +ext.optionalDeps = [], +ext.providedDeps = [], +ext.optional = { optionalDeps << it }, +ext.provided = { providedDeps << it }, +            generatedPom.dependencies.findAll { it.artifactId == dep.name }*.optional = true]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.io.Serializable;, +import java.util.List;, +, +/**, + * Models the provider of a service that local user accounts may connect to and invoke., + * Exposes service provider metadata along with connection management operations that allow for account connections to be established., + * Also acts as a factory for a strongly-typed service API (S)., + * Once a connection with this provider is established, the service API can be used by the application to invoke the service on behalf of the member., + * @author Keith Donald, + * @param <S> The service hosted by this service provider., + */, +public interface ServiceProvider<S> {, +, +	/**, +	 * Uniquely identifies this service provider., +	 * Should be lower case and not contain spaces or special characters., +	 * Also used as a key for provider connections stored in a shared repository., +	 */, +	String getId();, +	, +	/**, +	 * Returns true if the user account has one or more connections to this provider, false otherwise., +	 * @param accountId the application account ID to check for a connection with this provider., +	 */, +	boolean isConnected(Serializable accountId);, +, +	/**, +	 * Get the connections established between a user account and this service provider., +	 * The connections are ordered by rank., +	 * The first connection in the list is the "primary" connection between the account and this service provider., +	 * @param accountId a user account id, +	 * @return the account's connections to this service provider, +	 */, +	List<ServiceProviderConnection<S>> getConnections(Serializable accountId);]
[+++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +	private final String accessToken;, +	, +	private final String accessTokenSecret;, +	public OAuth1RequestInterceptor(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		this.accessTokenSecret = accessTokenSecret;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +	private final String accessToken;, +	, +	private final String accessTokenSecret;, +	public OAuth1RequestInterceptor(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		this.accessTokenSecret = accessTokenSecret;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final RestTemplate restTemplate = new RestTemplate();, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(), requestToken.getSecret());, +	protected OAuthToken getTokenFromProvider(String tokenUrl, Map<String, String> tokenRequestParameters, Map<String, String> additionalParameters, String tokenSecret) {, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +	// The response content type could be text/plain, text/html, etc...and may not trigger the form-encoded message converter, +	protected String getAuthorizationHeaderValue(String tokenUrl, Map<String, String> tokenRequestParameters, Map<String, String> additionalParameters, String tokenSecret) {, +		return SigningUtils.buildAuthorizationHeaderValue(tokenUrl, oauthParameters, additionalParameters, HttpMethod.POST, consumerSecret, tokenSecret);, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningUtils signingUtils;, +, +		this.signingUtils = new SigningUtils();, +		Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, +		return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningUtils signingUtils;, +, +		this.signingUtils = new SigningUtils();, +		Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, +		return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.util.Set;, +	private TimestampGenerator timestampGenerator;, +	, +	public SigningUtils() {, +		this.timestampGenerator = new DefaultTimestampGenerator();, +	/**, +	 * Builds the authorization header., +	 * The elements in additionalParameters should be decoded., +	 */, +	public String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 */, +	public String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 * This method is a Spring 3.0-compatible version of buildAuthorizationHeaderValue(); planned for removal in Spring Social 1.1, +	 */, +	public String spring30buildAuthorizationHeaderValue(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	, +	Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +	, +	String buildBaseString(HttpMethod method, String targetUrl, MultiValueMap<String, String> collectedParameters) {, +	private String normalizeParameters(MultiValueMap<String, String> collectedParameters) {, +				//      null should be equivalent to empty value...add the parameter with no value, +	private String calculateSignature(String baseString, String consumerSecret, String tokenSecret) {, +	private String sign(String signatureBaseString, String key) {, +	private MultiValueMap<String, String> readFormParameters(MediaType bodyType, byte[] bodyBytes) {, +	private MultiValueMap<String, String> parseFormParameters(String parameterString) {, +				result.add(formDecode(pair), "");, +	private String getBaseStringUri(URI uri) {, +	private MultiValueMap<String, String> combineMultiValueMaps(MultiValueMap<String, String> map1, MultiValueMap<String, String> map2) {, +		MultiValueMap<String, String> combinedMap = new LinkedMultiValueMap<String, String>(map1);, +		// can't use putAll here because it will overwrite anything that has the same key in both maps, +		Set<Entry<String, List<String>>> map2Entries = map2.entrySet();, +		for(Iterator<Entry<String, List<String>>> entryIt = map2Entries.iterator(); entryIt.hasNext();) {, +			Entry<String, List<String>> entry = entryIt.next();, +			String key = entry.getKey();, +			List<String> values = entry.getValue();, +			for (String value : values) {, +				combinedMap.add(key, value);, +			}, +		}, +		return combinedMap;, +	}, +	, +	private int getPort(URI uri) {, +	// testing hooks	, +	// tests can implement and inject a custom TimestampGenerator to work with fixed nonce and timestamp values, +	void setTimestampGenerator(TimestampGenerator timestampGenerator) {, +		this.timestampGenerator = timestampGenerator;, +	static interface TimestampGenerator {, +		long generateTimestamp();, +		, +		long generateNonce(long timestamp);, +	}, +	]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/resources/org/springframework/social/provider/jdbc/Schema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/spring-social-client/src/main/resources/org/springframework/social/provider/jdbc/Schema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/spring-social-client/src/test/java/org/springframework/social/provider/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;]
[+++ b/build.gradle, +        compile "org.springframework:spring-webmvc:$springVersion", +++ b/build.gradle, +        compile "org.springframework:spring-webmvc:$springVersion", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.web.servlet.view.RedirectView;, +	public RedirectView connect(@PathVariable String providerId, WebRequest request) {, +			return new RedirectView(oauth1Ops.buildAuthorizeUrl(requestToken.getValue(), oauth1Ops.getVersion() == OAuth1Version.CORE_10 ? new OAuth1Parameters(callbackUrl(providerId)) : OAuth1Parameters.NONE));, +			return new RedirectView(((OAuth2ConnectionFactory<?>) connectionFactory).getOAuthOperations().buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, new OAuth2Parameters(callbackUrl(providerId), scope)));, +	public RedirectView oauth1Callback(@PathVariable String providerId, @RequestParam("oauth_token") String token, @RequestParam(value="oauth_verifier", required=false) String verifier, WebRequest request) {, +		return new RedirectView("/connect/" + providerId, true);, +	public RedirectView oauth2Callback(@PathVariable String providerId, @RequestParam("code") String code, WebRequest request) {, +		return new RedirectView("/connect/" + providerId, true);, +	public RedirectView removeConnections(@PathVariable String providerId) {, +		return new RedirectView("/connect/" + providerId, true);, +	public RedirectView removeConnections(@PathVariable String providerId, @PathVariable String providerUserId) {, +		return new RedirectView("/connect/" + providerId, true);, +	protected RedirectView handleConnectToCustomConnectionFactory(ConnectionFactory<?> connectionFactory, WebRequest request) {]
[+++ b/pom.xml, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-jdbc</artifactId>, +			<version>${org.springframework-version}</version>, +		</dependency>, +		<dependency>, +++ b/pom.xml, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-jdbc</artifactId>, +			<version>${org.springframework-version}</version>, +		</dependency>, +		<dependency>, +++ b/src/main/java/org/springframework/social/account/Account.java, +package org.springframework.social.account;, +, +import java.io.Serializable;, +, +@SuppressWarnings("serial"), +public class Account implements Serializable {, +	, +	private final Long id;, +	, +	private final String firstName;, +	, +	private final String lastName;, +	, +	private final String email;, +	, +	private final String username;, +	, +	private final String profilePictureUrl;, +	, +	public Account(Long id, String firstName, String lastName, String email, String username, String profilePictureUrl) {, +		this.id = id;, +		this.firstName = firstName;, +		this.lastName = lastName;, +		this.email = email;, +		this.username = username;, +		this.profilePictureUrl = profilePictureUrl;, +	}, +	, +	public Long getId() {, +		return id;, +	}, +, +	public String getFirstName() {, +		return firstName;, +	}, +	, +	public String getLastName() {, +		return lastName;, +	}, +	, +	public String getFullName() {, +		return firstName + " " + lastName;, +	}, +	, +	public String getEmail() {, +		return email;, +	}, +	, +	public String getUsername() {, +		return username;, +	}, +	, +	public String getProfileKey() {, +		return username != null ? username : id.toString(); , +	}, +	, +	public String getProfilePictureUrl() {, +		return profilePictureUrl;, +	}, +	, +	public Account makeUsername(String username) {, +		return new Account(id, firstName, lastName, email, username, profilePictureUrl);, +	}, +, +}, +++ b/pom.xml, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-jdbc</artifactId>, +			<version>${org.springframework-version}</version>, +		</dependency>, +		<dependency>, +++ b/src/main/java/org/springframework/social/account/Account.java, +package org.springframework.social.account;, +, +import java.io.Serializable;, +, +@SuppressWarnings("serial"), +public class Account implements Serializable {, +	, +	private final Long id;, +	, +	private final String firstName;, +	, +	private final String lastName;, +	, +	private final String email;, +	]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +	private final UserRepository userRepository;, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders, UserRepository userRepository) {, +		this.userRepository = userRepository;, +, +		model.addAttribute("user", userRepository.findUserByUsername(user.getName()));, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;]
[+++ b/docs/src/info/changelog.txt, +Improvements, +   * ProviderSignInController now handles callbacks from the provider when the, +     user denies authorization by redirecting to the application's sign in page., +     (SOCIAL-236), +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	 * Note: this reference should be a serializable proxy to a singleton-scoped target instance., +	 * Note: this reference should be a serializable proxy to a singleton-scoped target instance., +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, HttpServletRequest, HttpServletResponse)}., +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, HttpServletRequest, HttpServletResponse)}.]
[+++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.io.IOException;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * ClientHttpRequestInterceptor implementation that performs OAuth1 request signing before a request for a protected resource is executed., + * @author Keith Donald, + * @author Craig Walls, + */, +public class OAuth1RequestInterceptor implements ClientHttpRequestInterceptor {, +, +	private final String consumerKey;, +	, +	private final String consumerSecret;, +, +	private final OAuthToken accessToken;, +, +	/**, +	 * Creates an OAuth 1.0 protected resource request interceptor., +	 * @param accessToken the access token and secret, +	 */, +	public OAuth1RequestInterceptor(String consumerKey, String consumerSecret, OAuthToken accessToken) {, +		this.consumerKey = consumerKey;, +		this.consumerSecret = consumerSecret;, +		this.accessToken = accessToken;, +	}, +, +	public ClientHttpResponse intercept(final HttpRequest request, final byte[] body, ClientHttpRequestExecution execution) throws IOException {, +		HttpRequest protectedResourceRequest = new HttpRequest() {, +			public HttpHeaders getHeaders() {, +				HttpHeaders headers = new HttpHeaders();, +				headers.putAll(request.getHeaders());, +				headers.set("Authorization", getAuthorizationHeaderValue(request, body));, +				return headers;, +			}, +			, +			public URI getURI() {, +				return request.getURI();, +			}, +			, +			public HttpMethod getMethod() {, +				return request.getMethod();]
[+++ b/gradle.properties, +httpComponentsVersion=4.5.3, +aspectjVersion=1.9.0.BETA-5, +springVersion=5.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.9.0.pr3, +jspApiVersion=2.3.2-b02]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.StringUtils;, +				authUrl.append('&').append(name);, +				String value = values.next();, +				if (StringUtils.hasLength(value)) {, +					authUrl.append('=').append(formEncode(value));, +				}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.StringUtils;, +				authUrl.append('&').append(name);, +				String value = values.next();, +				if (StringUtils.hasLength(value)) {, +					authUrl.append('=').append(formEncode(value));, +				}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private String filterProcessesUrl;, +, +	@Override, +	public void setFilterProcessesUrl(String filterProcessesUrl) {, +		this.filterProcessesUrl = filterProcessesUrl;, +		super.setFilterProcessesUrl(filterProcessesUrl);, +	}, +, +		if (!uri.startsWith(filterProcessesUrl)) {, +		uri = uri.substring(filterProcessesUrl.length());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.StringUtils;, +				authUrl.append('&').append(name);, +				String value = values.next();, +				if (StringUtils.hasLength(value)) {, +					authUrl.append('=').append(formEncode(value));, +				}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private String filterProcessesUrl;, +, +	@Override, +	public void setFilterProcessesUrl(String filterProcessesUrl) {, +		this.filterProcessesUrl = filterProcessesUrl;, +		super.setFilterProcessesUrl(filterProcessesUrl);, +	}, +, +		if (!uri.startsWith(filterProcessesUrl)) {, +		uri = uri.substring(filterProcessesUrl.length());, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +		} else if (StringUtils.hasLength(defaultScope)) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.StringUtils;, +				authUrl.append('&').append(name);, +				String value = values.next();, +				if (StringUtils.hasLength(value)) {, +					authUrl.append('=').append(formEncode(value));, +				}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private String filterProcessesUrl;, +, +	@Override, +	public void setFilterProcessesUrl(String filterProcessesUrl) {, +		this.filterProcessesUrl = filterProcessesUrl;, +		super.setFilterProcessesUrl(filterProcessesUrl);, +	}, +, +		if (!uri.startsWith(filterProcessesUrl)) {, +		uri = uri.substring(filterProcessesUrl.length());, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +		} else if (StringUtils.hasLength(defaultScope)) {, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +	@SuppressWarnings("unchecked")]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, parameters));]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 *     "facebook" -&gt; [ Connection("Keith Donald") ] ,, +	 *     "github"   -&gt; [ ], +	 *     "twitter"  -&gt; [ Connection("kdonald"), Connection("springsource") ], +	 * The method always returns a map with keys representing all registered providers., +	 * For providers with no connection, a map contains an empty list as a value., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 *     "facebook" -&gt; [ Connection("Keith Donald") ] ,, +	 *     "github"   -&gt; [ ], +	 *     "twitter"  -&gt; [ Connection("kdonald"), Connection("springsource") ], +	 * The method always returns a map with keys representing all registered providers., +	 * For providers with no connection, a map contains an empty list as a value., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return extractAccessGrant(getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class));]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.security.web.authentication.RememberMeServices;, + *        .apply(new SpringSocialHttpConfigurer()), + *        .and().setSharedObject(ApplicationContext.class, context);, + * Note that when using with Spring Security 3.2.0.RC1, it's important to set the ApplicationContext as a shared object,, + * as shown above. Later RCs and the GA release of Spring Security will automatically set the ApplicationContext as a, + * shared object, making this step unnecessary. , + * , +	private UserIdSource userIdSource;, +	 * Requires that {@link UsersConnectionRepository}, {@link SocialAuthenticationServiceLocator}, and, +	 * {@link SocialUserDetailsService} beans be available in the application context., +	 * If using with Spring Security 3.2.0.RC1, then you must also set the ApplicationContext as a shared object, +	 * (this is unnecessary for later release candidates and the GA release of Spring Security 3.2.0)., +	public SpringSocialConfigurer() {, +		ApplicationContext applicationContext = http.getSharedObject(ApplicationContext.class);, +		UsersConnectionRepository usersConnectionRepository = getDependency(applicationContext, UsersConnectionRepository.class);, +		SocialAuthenticationServiceLocator authServiceLocator = getDependency(applicationContext, SocialAuthenticationServiceLocator.class);, +		SocialUserDetailsService socialUsersDetailsService = getDependency(applicationContext, SocialUserDetailsService.class);, +		, +		SocialAuthenticationFilter filter = new SocialAuthenticationFilter(, +				http.getSharedObject(AuthenticationManager.class), , +				userIdSource != null ? userIdSource : new AuthenticationNameUserIdSource(), , +				usersConnectionRepository, , +				authServiceLocator);, +, +		RememberMeServices rememberMe = http.getSharedObject(RememberMeServices.class);, +		if(rememberMe != null) {, +			filter.setRememberMeServices(rememberMe);, +		}, +			.addFilterBefore(postProcess(filter), AbstractPreAuthenticatedProcessingFilter.class);, +	}, +, +	private <T> T getDependency(ApplicationContext applicationContext, Class<T> dependencyType) {, +		try {, +			T dependency = applicationContext.getBean(dependencyType);, +			return dependency;, +		} catch (NoSuchBeanDefinitionException e) {, +			throw new IllegalStateException("SpringSocialConfigurer depends on " + dependencyType.getName() +". No single bean of that type found in application context.", e);, +		}, +	}, +	, +	/**, +	 * Sets the {@link UserIdSource} to use for authentication. Defaults to {@link AuthenticationNameUserIdSource}., +	 */, +	public SpringSocialConfigurer userIdSource(UserIdSource userIdSource) {, +		this.userIdSource = userIdSource;, +		return this;]
[+++ b/docs/src/reference/docbook/index.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="spring-social-reference", +    xmlns:xi="http://www.w3.org/2001/XInclude", +    xmlns:xlink="http://www.w3.org/1999/xlink">, +  <bookinfo>, +    <title>Spring Social Reference Manual</title>, +    <titleabbrev>Spring Social ${version}</titleabbrev>, +    <productname>Spring Social</productname>, +    <releaseinfo>${version}</releaseinfo>, +, +    <!-- TODO: this isn't showing up. -->, +    <mediaobject>, +      <imageobject role="fo">, +        <imagedata fileref="images/logo.png", +          format="PNG" align="center"/>, +      </imageobject>, +      <imageobject role="html">, +        <imagedata fileref="images/logo.png" format="PNG" align="center"/>, +      </imageobject>, +    </mediaobject>, +    <!-- END TODO -->, +, +    <authorgroup>, +      <author>, +        <firstname>Keith</firstname>, +        <surname>Donald</surname>, +      </author>, +    </authorgroup>, +, +    <legalnotice><para>© SpringSource Inc., 2010</para></legalnotice>, +  </bookinfo>, +, +  <toc></toc>, +  , +  <part id="spring-social-introduction">, +    <title>Introducing the Spring Social project</title>, +    <partintro id="spring-social-intro">, +    	 <para>The Spring Social project simplifies the development of socialized applications.</para>, +    </partintro>, +    <xi:include href="./overview.xml"/>, +  </part>, +  , +</book>, +++ b/docs/src/reference/docbook/index.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="spring-social-reference", +    xmlns:xi="http://www.w3.org/2001/XInclude", +    xmlns:xlink="http://www.w3.org/1999/xlink">, +  <bookinfo>, +    <title>Spring Social Reference Manual</title>, +    <titleabbrev>Spring Social ${version}</titleabbrev>, +    <productname>Spring Social</productname>, +    <releaseinfo>${version}</releaseinfo>, +, +    <!-- TODO: this isn't showing up. -->, +    <mediaobject>, +      <imageobject role="fo">, +        <imagedata fileref="images/logo.png", +          format="PNG" align="center"/>, +      </imageobject>, +      <imageobject role="html">, +        <imagedata fileref="images/logo.png" format="PNG" align="center"/>, +      </imageobject>, +    </mediaobject>, +    <!-- END TODO -->, +, +    <authorgroup>, +      <author>, +        <firstname>Keith</firstname>, +        <surname>Donald</surname>, +      </author>, +    </authorgroup>, +, +    <legalnotice><para>© SpringSource Inc., 2010</para></legalnotice>, +  </bookinfo>, +, +  <toc></toc>, +  , +  <part id="spring-social-introduction">, +    <title>Introducing the Spring Social project</title>, +    <partintro id="spring-social-intro">, +    	 <para>The Spring Social project simplifies the development of socialized applications.</para>, +    </partintro>, +    <xi:include href="./overview.xml"/>, +  </part>, +  , +</book>, +++ b/docs/src/reference/docbook/overview.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="overview", +    xmlns:xlink="http://www.w3.org/1999/xlink">, +  <title>Spring Social Overview</title>, +, +  <section id="overview-introduction">, +    <title>Introduction</title>, +    <para>, +    </para>, +  </section>, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +	public ServiceProviderConnectionValues getConnectionValues(Object serviceApi) {, +		return EMPTY_CONNECTION_VALUES;, +	}, +, +	public ServiceProviderUserProfile fetchUserProfile(Object serviceApi) {, +		return EMPTY_USER_PROFILE;, +	// internal helpers, +	, +	private static final ServiceProviderConnectionValues EMPTY_CONNECTION_VALUES = new ServiceProviderConnectionValues(null, null, null, null);, +, +	private static final ServiceProviderUserProfile EMPTY_USER_PROFILE = new ServiceProviderUserProfile(null, null, null, null, null);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +	public ServiceProviderConnectionValues getConnectionValues(Object serviceApi) {, +		return EMPTY_CONNECTION_VALUES;, +	}, +, +	public ServiceProviderUserProfile fetchUserProfile(Object serviceApi) {, +		return EMPTY_USER_PROFILE;, +	// internal helpers, +	, +	private static final ServiceProviderConnectionValues EMPTY_CONNECTION_VALUES = new ServiceProviderConnectionValues(null, null, null, null);, +, +	private static final ServiceProviderUserProfile EMPTY_USER_PROFILE = new ServiceProviderUserProfile(null, null, null, null, null);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +/**, + * An adapter that bridges between the uniform {@link ServiceProviderConnection} model and a specific provider API model., + * @author Keith Donald, + * @param <S> the service API, + */, +public interface ServiceApiAdapter<S> {, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#test()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return true if the API is functional, false if not, +	 */, +	boolean test(S serviceApi);, +	, +	/**, +	 * Provides values for {@link ServiceProviderConnectionKey#getProviderUserId()}, {@link ServiceProviderConnection#getDisplayName()},, +	 * {@link ServiceProviderConnection#getProfileUrl()}, and {@link ServiceProviderConnection#getImageUrl()} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @return the service provider connection values, +	 */, +	ServiceProviderConnectionValues getConnectionValues(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#fetchUserProfile()} for connections to the given service API., +	 * @param serviceApi, +	 * @return, +	 */, +	ServiceProviderUserProfile fetchUserProfile(S serviceApi);, +	, +	/**, +	 * Implements {@link ServiceProviderConnection#updateStatus(String)} for connections to the given service API., +	 * @param serviceApi the service API, +	 * @param message the status message, +	 */, +	void updateStatus(S serviceApi, String message);, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +	public ServiceProviderConnectionValues getConnectionValues(Object serviceApi) {, +		return EMPTY_CONNECTION_VALUES;, +	}, +, +	public ServiceProviderUserProfile fetchUserProfile(Object serviceApi) {, +		return EMPTY_USER_PROFILE;, +	// internal helpers, +	, +	private static final ServiceProviderConnectionValues EMPTY_CONNECTION_VALUES = new ServiceProviderConnectionValues(null, null, null, null);, +, +	private static final ServiceProviderUserProfile EMPTY_USER_PROFILE = new ServiceProviderUserProfile(null, null, null, null, null);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]
[+++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create a ServiceProvider that allows users to authorize with the remote provider and obtain Service API instances e.g. <code>TwitterServiceProvider</code>.</para>]
[+++ b/.gitignore, +samples/**/src/main/webapp/META-INF, +++ b/.gitignore, +samples/**/src/main/webapp/META-INF, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, +  <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, +  , +  <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, +FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceProvider</classname>:</para>, +  , +  <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getServiceOperations(accountId);]]></programlisting>, +, +  <para>Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookOperations</interfacename> created using the connection details for the given account ID. The connection should have been created beforehand via the service provider's <methodname>connect()</methodname> method or using <classname>ConnectController</classname>.</para>  , +, +  <para>With a <interfacename>FacebookOperations</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. These will be covered in the following sections.</para>, +, +  <section id="facebook-getProfile">, +    <title>Retrieving a user's profile data</title>, +, +    <para>You can retrieve a user's Facebook profile data using <interfacename>FacebookOperations</interfacename>' <methodname>getUserProfile()</methodname> method:</para>, +    , +    <programlisting><![CDATA[FacebookProfile profile = facebook.getUserProfile();]]></programlisting>, +    , +    <para>The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name, their email address, and their Facebook ID.</para>, +    , +    <para>If all you need is the user's Facebook ID, you can call <methodname>getProfileId()</methodname> instead:</para>, +    , +    <programlisting><![CDATA[String profileId = facebook.getProfileId();]]></programlisting>, +    , +    <para>Or if you want the user's Facebook URL, you can call <methodname>getProfileUrl()</methodname>:</para>, +    , +    <programlisting><![CDATA[String profileUrl = facebook.getProfileUrl();]]></programlisting>, +    , +  <section id="facebook-friends">, +    <title>Getting a user's Facebook friends</title>, +, +    <para>An essential feature of Facebook and other social networks is creating a network of friends or contacts. You can access the user's list of Facebook friends by calling the <methodname>getFriendIds()</methodname> method:</para>, +    , +    <programlisting><![CDATA[List<String> friendIds = facebook.getFriendIds();]]></programlisting>, +    , +    <para>This returns a list of Facebook IDs belonging to the current user's list of friends. This is just a list of <classname>String</classname> IDs, so to retrieve an individual user's profile data, you can turn around and call the <methodname>getUserProfile()</methodname>, passing in one of those IDs to retrieve the profile data for an individual user:</para>, +    , +    <programlisting><![CDATA[FacebookProfile firstFriend = facebook.getUserProfile(friendIds.get(0));]]></programlisting>, +    , +  </section>, +  , +  <section id="facebook-status">, +    <title>Posting to a user's wall</title>, +, +    <para>To post a message to the user's Facebook wall, call the <methodname>updateStatus()</methodname> method, passing in the message to be posted:</para>, +    , +    <programlisting><![CDATA[facebook.updateStatus("I'm trying out Spring Social!");]]></programlisting>, +    , +    <para>If you'd like to attach a link to the status message, you can do so by passing in a <classname>FacebookLink</classname> object along with the message:</para>, +    , +    <programlisting><![CDATA[FacebookLink link = new FacebookLink("http://www.springsource.org/spring-social", , +        "Spring Social", , +        "The Spring Social Project", , +        "Spring Social is an extension to Spring to enable integration with social networks.");, +facebook.updateStatus("I'm trying out Spring Social!", link);]]></programlisting>, +    , +    <para>When constructing the <classname>FacebookLink</classname> object, the first parameter is the link's URL, the second parameter is the name of the link, the third parameter is a caption, and the fourth is a description of the link.</para>, +  </section>, +  , +  <section id="facebook-publishing">, +    <title>Publishing to Facebook</title>, +, +    <para>Facebook's Graph API allows authenticated users to publish data to several of its object types. <interfacename>FacebookOperations</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method.</para>, +    , +    <para>For example, in the previous section you saw how to post a message to the user's Facebook wall using <methodname>updateStatus()</methodname>. Alternatively you could have accomplished the same thing using <methodname>publish()</methodname> like this:</para>, +    , +    <programlisting><![CDATA[MultiValueMap<String, String> data = new LinkedMultiValueMap<String, String>();, +data.set("message", message);, +publish("me", "feed", data);]]></programlisting>, +, +    <para>The first argument to the <methodname>publish()</methodname> method is the object to publish to--in this case "me" indicates the authenticated user. The second argument is the connection associated with the object--"feed" indicates that it is the user's Facebook wall. Finally, the third argument is a <classname>MultiValueMap</classname> containing data to be published. In this case, it only contains a "message" to be posted to the user's wall.</para> , +, +    <para>You can read more about what graph API objects and connections Facebook supports for publishing at <ulink url="http://developers.facebook.com/docs/api#editing"/></para>, +  </section>, +++ b/.gitignore, +samples/**/src/main/webapp/META-INF, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, +  <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, +  , +  <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, +FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceProvider</classname>:</para>, +  , +  <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getServiceOperations(accountId);]]></programlisting>, +, +  <para>Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookOperations</interfacename> created using the connection details for the given account ID. The connection should have been created beforehand via the service provider's <methodname>connect()</methodname> method or using <classname>ConnectController</classname>.</para>  , +, +  <para>With a <interfacename>FacebookOperations</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. These will be covered in the following sections.</para>, +, +  <section id="facebook-getProfile">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +    /**, +     * Retrieves the client access grant using OAuth 2 client password flow., +     * This is an access grant that is based on the client id and password (a.k.a. client secret)., +     * @param scope optional scope to get for the access grant, +     * @return the access grant of the client only (not user related), +     */, +    AccessGrant authenticateClient(String scope);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +    /**, +     * Retrieves the client access grant using OAuth 2 client password flow., +     * This is an access grant that is based on the client id and password (a.k.a. client secret)., +     * @param scope optional scope to get for the access grant, +     * @return the access grant of the client only (not user related), +     */, +    AccessGrant authenticateClient(String scope);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +    public AccessGrant authenticateClient(String scope) {, +        MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();, +		if (useParametersForClientAuthentication) {, +			params.set("client_id", clientId);, +			params.set("client_secret", clientSecret);, +		}, +		params.set("grant_type", "client_credentials");, +		if (scope != null) {, +			params.set("scope", scope);, +		}, +		return postForAccessGrant(accessTokenUrl, params);, +    }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +    /**, +     * Retrieves the client access grant using OAuth 2 client password flow., +     * This is an access grant that is based on the client id and password (a.k.a. client secret)., +     * @param scope optional scope to get for the access grant, +     * @return the access grant of the client only (not user related), +     */, +    AccessGrant authenticateClient(String scope);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +    public AccessGrant authenticateClient(String scope) {, +        MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();, +		if (useParametersForClientAuthentication) {, +			params.set("client_id", clientId);, +			params.set("client_secret", clientSecret);, +		}, +		params.set("grant_type", "client_credentials");, +		if (scope != null) {, +			params.set("scope", scope);, +		}, +		return postForAccessGrant(accessTokenUrl, params);, +    }, +, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +, +                public AccessGrant authenticateClient(String scope) {, +                    return null;, +                }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +    /**, +     * Retrieves the client access grant using OAuth 2 client password flow., +     * This is an access grant that is based on the client id and password (a.k.a. client secret)., +     * @param scope optional scope to get for the access grant, +     * @return the access grant of the client only (not user related), +     */, +    AccessGrant authenticateClient(String scope);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +    public AccessGrant authenticateClient(String scope) {, +        MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();, +		if (useParametersForClientAuthentication) {, +			params.set("client_id", clientId);, +			params.set("client_secret", clientSecret);, +		}, +		params.set("grant_type", "client_credentials");, +		if (scope != null) {, +			params.set("scope", scope);, +		}, +		return postForAccessGrant(accessTokenUrl, params);, +    }, +, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +, +                public AccessGrant authenticateClient(String scope) {, +                    return null;, +                }, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +    public AccessGrant authenticateClient(String scope) {, +        return new AccessGrant("12345", null,  null, 3600);, +    }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +    /**, +     * Retrieves the client access grant using OAuth 2 client password flow., +     * This is an access grant that is based on the client id and password (a.k.a. client secret)., +     * @param scope optional scope to get for the access grant, +     * @return the access grant of the client only (not user related), +     */]
[+++ b/docs/src/reference/docbook/implementing.xml, +			A Spring Social client module is simply a standard Java project that builds a jar artifact e.g. spring-social-twitter.jar., +				where {providerId} is a unique identifier you assign to the service provider you are adding support for., +					<title>Module Structure</title>, +								<entry>The public interface of the Java API binding.</entry>, +								<entry>The primary implementation of the Java API binding.</entry>, +								<entry>The types necessary to establish connections to the service provider.</entry>, +				Finally, the connect package contains the implementations of various connect SPIs that enable connections to Twitter to be established and persisted., +			This provides a simple, domain-oriented interface for Java applications to use to consume the API., +			When adding support for a new service provider, if no suitable Java binding already exists you'll need to develop one., +							DirectMessageOperations, for example, contains API bindings to Twitter's "direct_messages" resource:, +			<para>, +				API developers are free to implement their Java API binding with whatever HTTP/REST client they see fit., +				That said, Spring Social's existing API bindings such as spring-social-twitter all use Spring Framework's RestTemplate in conjunction with the Jackson JSON ObjectMapper., +				RestTemplate is a popular REST client that provides a uniform object mapping interface across a variety of data exchange formats (JSON, XML, etc)., +				Jackson is the leading Java-based JSON marshalling technology., +				To help promote consistency across Spring Social's supported bindings, we do recommend you consider these implementation technologies (and please let us know if they do not meet your needs)., +			</para>, +			<para>, +				Spring Social has adopted a convention where each API implementation class is named "{ProviderId}Template" e.g. TwitterTemplate., +				We favor this convention unless there is a good reason to deviate from it., +				As discussed in the previous section, we also recommend keeping implementation types separate from the public API types., +				And we recommend keeping internal implementation details package-private., +			</para>, +			<para>, +				The way in which an API binding implementation is constructed will vary based on the API's authorization protocol., +				For APIs secured with OAuth1, the consumerKey, consumerSecret, accessToken, and accessTokenSecret will be required for construction:, +				<programlisting language="java"><![CDATA[, +public TwitterTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) { ... }]]>, +				</programlisting>				, +			</para>, +			<para>, +				For OAuth2, only the access token should be required:, +				<programlisting language="java"><![CDATA[, +public FacebookTemplate(String accessToken) { ... }]]>, +				</programlisting>, +			</para>, +			<para>, +				Each request made to the API's "resource server" needs to be signed with the OAuth credentials provided during construction., +				This signing process consists of adding an "Authorization" header to each client request before it is executed., +				For OAuth1, the process is quite complicated, and is used to support an elaborate request signature verification algorithm between the client and server., +				For OAuth2, it is a lot simpler, but does still vary across the various drafts of the OAuth2 specification., +			</para>, +			<para>, +				To encapsulate this complexity, for each authorization protocol Spring Social provides a ProtectedResourceClientFactory you may use to, +				construct a pre-configured RestTemplate instance that performs the request signing for you. For OAuth1:, +				<programlisting language="java"><![CDATA[, +public TwitterTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +    this.restTemplate = ProtectedResourceClientFactory.create(apiKey, apiSecret, accessToken, accessTokenSecret);, +}]]>			</programlisting>, +			</para>, +			<para>, +				An OAuth2 example:, +				<programlisting language="java"><![CDATA[, +public FacebookTemplate(String accessToken) {, +    this.restTemplate = ProtectedResourceClientFactory.draft10(accessToken);, +}]]>, +				</programlisting>, +			</para>, +			<para>, +				Once the REST client has been configured as shown above, you simply use it to implement your various API bindings., +				The existing Spring Social client modules all invoke their RestTemplate instances in a standard manner:, +				<programlisting language="java"><![CDATA[, +public TwitterProfile getUserProfile() {, +    return restTemplate.getForObject(buildUri("account/verify_credentials.json"), TwitterProfile.class);, +}]]>, +				</programlisting>, +			</para>, +			<para>, +				A note on RestTemplate usage: we do favor the RestTemplate methods that accept a URI object instead of a uri String., +				This ensures we always properly encode client data submitted in URI query parameters, such as screen_name below:, +				<programlisting language="java"><![CDATA[, +public TwitterProfile getUserProfile(String screenName) {, +    return restTemplate.getForObject(buildUri("users/show.json", Collections.singletonMap("screen_name", screenName)), TwitterProfile.class);, +}]]>, +				</programlisting>, +			</para>, +			<para>, +				For complete implementation examples, consult the existing API bindings included in Spring Social., +				spring-social-twitter and spring-social-facebook provide particularly good references., +			</para>, +++ b/docs/src/reference/docbook/implementing.xml, +			A Spring Social client module is simply a standard Java project that builds a jar artifact e.g. spring-social-twitter.jar., +				where {providerId} is a unique identifier you assign to the service provider you are adding support for., +					<title>Module Structure</title>, +								<entry>The public interface of the Java API binding.</entry>, +								<entry>The primary implementation of the Java API binding.</entry>, +								<entry>The types necessary to establish connections to the service provider.</entry>, +				Finally, the connect package contains the implementations of various connect SPIs that enable connections to Twitter to be established and persisted., +			This provides a simple, domain-oriented interface for Java applications to use to consume the API., +			When adding support for a new service provider, if no suitable Java binding already exists you'll need to develop one., +							DirectMessageOperations, for example, contains API bindings to Twitter's "direct_messages" resource:, +			<para>, +				API developers are free to implement their Java API binding with whatever HTTP/REST client they see fit., +				That said, Spring Social's existing API bindings such as spring-social-twitter all use Spring Framework's RestTemplate in conjunction with the Jackson JSON ObjectMapper., +				RestTemplate is a popular REST client that provides a uniform object mapping interface across a variety of data exchange formats (JSON, XML, etc)., +				Jackson is the leading Java-based JSON marshalling technology., +				To help promote consistency across Spring Social's supported bindings, we do recommend you consider these implementation technologies (and please let us know if they do not meet your needs)., +			</para>, +			<para>]
[+++ b/gradle.properties, +springVersion=4.3.3.RELEASE, +++ b/gradle.properties, +springVersion=4.3.3.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * @param defaultFailureUrl The failure URL to use by default, +++ b/gradle.properties, +springVersion=4.3.3.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * @param defaultFailureUrl The failure URL to use by default, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	 * @param defaultFailureUrl The failure URL to use by default, +	 * @return this SpringSocialConfigurer for chained configuration, +++ b/gradle.properties, +springVersion=4.3.3.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * @param defaultFailureUrl The failure URL to use by default, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	 * @param defaultFailureUrl The failure URL to use by default, +	 * @return this SpringSocialConfigurer for chained configuration, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.web.util.UriUtils;, +		String extension = UriUtils.extractFileExtension(request.getRequestURI());]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +import org.springframework.social.OperationNotPermittedException;, +, +/**, + * Exception thrown when a duplicate status is posted., + * , + * @author Craig Walls, + */, +public class DuplicateStatusException extends OperationNotPermittedException {, +	private static final long serialVersionUID = 1L;, +, +	public DuplicateStatusException(String message) {, +		super(message);, +	}, +, +}]
[+++ b/docs/src/reference/docbook/linkedin.xml, +  <para>LinkedIn is a social networking site geared toward professionals. It enables its users to maintain and correspond with a network of contacts they have are professionally linked to.</para>, +  <para>Spring Social offers integration with LinkedIn via <interfacename>LinkedInOperations</interfacename> and its implementation, <classname>LinkedInTemplate</classname>.</para>, +  , +  <para>To create an instance of <classname>LinkedInTemplate</classname>, you may pass in your application's OAuth 1 credentials, along with an access token/secret pair to the constructor:</para>, +  , +  <programlisting><![CDATA[String apiKey = "..."; // The application's API/Consumer key, +String apiSecret = "..."; // The application's API/Consumer secret, +String accessToken = "..."; // The access token granted after OAuth authorization, +String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization, +LinkedInOperations linkedin = new LinkedInTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]></programlisting>, +  , +  <para>If you're using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>LinkedInTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>LinkedInServiceProvider</classname> For example:</para>, +, +  <programlisting><![CDATA[LinkedInOperations linkedin = linkedInProvider.getServiceOperations(accountId);]]></programlisting>, +  , +  <para>In this case, the <methodname>getServiceOperations()</methodname> is asked to return a <interfacename>LinkedInOperations</interfacename> instance created using connection details established using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>.</para>, +  , +  <para>Once you have a <interfacename>LinkedInOperations</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for.</para>, +, +  <section id="linkedin-getProfile">, +    <title>Retrieving a user's LinkedIn profile data</title>, +, +    <para>To retrieve the authenticated user's profile data, call the <methodname>getUserProfile()</methodname> method:</para>, +    , +    <programlisting><![CDATA[LinkedInProfile profile = linkedin.getUserProfile();]]></programlisting>, +    , +    <para>The data returned in the <classname>LinkedInProfile</classname> includes the user's LinkedIn ID, first and last names, their "headline", the industry they're in, and URLs for the public and standard profile pages.</para>, +    , +    <para>If it's only the user's LinkedIn ID you need, then you can get that by calling the <methodname>getProfileId()</methodname> method:</para>, +    , +    <programlisting><![CDATA[String profileId = linkedin.getProfileId();]]></programlisting>, +    , +    <para>Or if you only need a URL for the user's public profile page, call <methodname>getProfileUrl()</methodname>:</para>, +    , +    <programlisting><![CDATA[String profileUrl = linkedin.getProfileUrl();]]></programlisting>, +        , +  </section>, +  , +  <section id="linkedin-connections">, +      <title>Getting a user's LinkedIn connections</title>, +, +      <para>To retrieve a list of LinkedIn users to whom the user is connected, call the <methodname>getConnections()</methodname> method:</para>, +      , +      <programlisting><![CDATA[List<LinkedInProfile> connections = linkedin.getConnections();]]></programlisting>, +      , +      <para>This will return a list of <classname>LinkedInProfile</classname> objects for the user's 1st-degree network (those LinkedIn users to whom the user is directly linked--not their extended network).</para>, +      ]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		preConnect(connectionFactory, parameters, request);, +	private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, +			interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		preConnect(connectionFactory, parameters, request);, +	private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, +			interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +	void preConnect(ConnectionFactory<S> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		preConnect(connectionFactory, parameters, request);, +	private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, +			interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +	void preConnect(ConnectionFactory<S> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +		return buildOAuthUrl(connectionFactory, request, null);, +		OAuth1Parameters parameters = getOAuth1Parameters(additionalParameters);, +		if (oauthOperations.getVersion() == OAuth1Version.CORE_10) {, +		OAuthToken requestToken = fetchRequestToken(request, oauthOperations);, +		return buildOAuth1Url(oauthOperations, requestToken.getValue(), parameters);, +	}, +, +	private OAuth1Parameters getOAuth1Parameters(MultiValueMap<String, String> additionalParameters) {, +		OAuth1Parameters parameters = new OAuth1Parameters();, +		if (additionalParameters != null) {, +			parameters.putAll(additionalParameters);, +		}, +		return parameters;, +	}, +, +	private OAuthToken fetchRequestToken(NativeWebRequest request, OAuth1Operations oauthOperations) {, +		if (oauthOperations.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			return oauthOperations.fetchRequestToken(callbackUrl(request), null);, +		}, +		return oauthOperations.fetchRequestToken(null, null);				, +		OAuth2Parameters parameters = getOAuth2Parameters(request, additionalParameters);, +	private OAuth2Parameters getOAuth2Parameters(NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth2Parameters parameters = new OAuth2Parameters();, +		if (additionalParameters != null) {			, +			parameters.putAll(additionalParameters);, +		}, +		parameters.setRedirectUri(callbackUrl(request));, +		String scope = request.getParameter("scope");, +		if (scope != null) {, +			parameters.setScope(scope);, +		}, +		return parameters;, +	}, +]
[+++ b/docs/src/reference/docbook/implementing.xml, +			By now, you should have an API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform Connection model.]
[+++ b/.github/ISSUE_TEMPLATE.md, +### Summary, +, +<!-- , +Please provide a high level summary of the issue you are having, +-->, +, +### Actual Behavior, +, +<!-- , +Please describe step by step the behavior you are observing, +-->, +, +### Expected Behavior, +, +<!--, +Please describe step by step the behavior you expect, +-->, +, +### Configuration, +, +<!--, +Please provide any configuration you have., +-->, +, +### Version, +, +<!--, +Please describe what version you are using. Does the problem occur in other versions?, +-->, +, +### Sample, +, +<!--, +Providing a complete sample (i.e. link to a github repository) will give this issue higher, +priority than issues that do not have a complete sample, +-->, +++ b/.github/ISSUE_TEMPLATE.md, +### Summary, +, +<!-- , +Please provide a high level summary of the issue you are having, +-->, +, +### Actual Behavior, +, +<!-- , +Please describe step by step the behavior you are observing, +-->, +, +### Expected Behavior, +, +<!--, +Please describe step by step the behavior you expect, +-->, +, +### Configuration, +, +<!--, +Please provide any configuration you have., +-->, +, +### Version, +, +<!--, +Please describe what version you are using. Does the problem occur in other versions?, +-->, +, +### Sample, +, +<!--, +Providing a complete sample (i.e. link to a github repository) will give this issue higher, +priority than issues that do not have a complete sample, +-->, +++ b/.github/PULL_REQUEST_TEMPLATE.md, +<!--, +Thanks for contributing to Spring Security. Please provide a brief description of your pull-request and reference any related issue numbers (prefix references with #)., +-->, +++ b/.github/ISSUE_TEMPLATE.md, +### Summary, +, +<!-- , +Please provide a high level summary of the issue you are having, +-->, +, +### Actual Behavior, +, +<!-- , +Please describe step by step the behavior you are observing, +-->, +, +### Expected Behavior, +, +<!--, +Please describe step by step the behavior you expect, +-->, +, +### Configuration, +, +<!--]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +	<section id="service-providers-implementing">, +		<title>Implementing Service Providers</title>, +			The spring-social-core module provides support for implementing your own ServiceProviders., +			This support consists of convenient base classes for the various ServiceProvider types, such as OAuth1 and OAuth2-based providers., +			A common data access interface is also provided for persisting connection information., +			In this section, you will learn how to implement ServiceProviders., +		</para>, +		<section id="service-providers-implementing-oauth2">, +			<title>OAuth2</title>, +			<para>, +				To implement an OAuth2-based ServiceProvider, first extend AbstractOAuth2ServiceProvider., +				Parameterize &lt;S&gt; to be the Java Binding to the ServiceProvider API., +				Define a single constructor that accepts an clientId, clientSecret, and ConnectionRepository., +				Finally, implement getApi(String) to return a new API instance., +			</para>, +			<para>, +				See FacebookServiceProvider as an example of an OAuth2-based ServiceProvider:, +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.social.facebook.connect;, +import org.springframework.social.connect.oauth2.AbstractOAuth2ServiceProvider;, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.facebook.FacebookApi;, +import org.springframework.social.facebook.FacebookTemplate;, +import org.springframework.social.oauth2.OAuth2Template;, +public final class FacebookServiceProvider extends AbstractOAuth2ServiceProvider<FacebookApi> {, +, +    public FacebookServiceProvider(String clientId, String clientSecret, ConnectionRepository connectionRepository) {, +        super("facebook", connectionRepository, , +            new OAuth2Template(appId, appSecret,, +                "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", , +                "https://graph.facebook.com/oauth/access_token"));, +    }, +, +    @Override, +    protected FacebookApi getApi(String accessToken) {, +        return new FacebookTemplate(accessToken);, +    }, +, +}]]>, +			<para>, +				In the constructor, you should call super, passing up the ID of the ServiceProvider, the connection repository, and a configured OAuth2Template, which implements OAuth2Operations., +				The OAuth2Template will handle the "OAuth dance" with the provider, and should be configured with the provided clientId and clientSecret, along with the provider-specific authorizeUrl and accessTokenUrl., +				In getApi(String), you should construct your Service API implementation, passing it the access token needed to make requests for protected resources., +				Inside the API implementation, we generally recommend using RestTemplate to make the HTTP calls and add the required Authorization header:, +			<programlisting language="java"><![CDATA[, +public FacebookTemplate(String accessToken) {, +    restTemplate = new RestTemplate();, +    // configures an interceptor that adds the Authorization header to each ClientRequest before it is executed, +    restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] { OAuth2RequestInterceptor.draft10(accessToken) });, +}]]>, +			</programlisting>, +			 	An example API call with RestTemplate is shown below:, +			<programlisting language="java"><![CDATA[, +public FacebookProfile getUserProfile(String facebookId) {, +    return new FacebookProfile(restTemplate.getForObject("https://graph.facebook.com/{facebookId}", Map.class, facebookId));, +}]]>, +			</programlisting>, +		<section id="service-providers-implementing-oauth1">, +			<title>OAuth1</title>, +			<para>, +				To implement an OAuth1-based ServiceProvider, first extend AbstractOAuth1ServiceProvider., +				Parameterize &lt;S&gt; to be the Java Binding to the ServiceProvider API., +				Define a single constructor that accepts a consumerKey, consumerSecret, and ConnectionRepository., +				Finally, implement getApi(String, String, String, String) to return a new API instance., +			</para>, +			<para>, +				See TwitterServiceProvider as an example of an OAuth1-based ServiceProvider:, +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.social.twitter.connect;, +public final class TwitterServiceProvider extends AbstractOAuth1ServiceProvider<TwitterApi> {, +    protected TwitterApi getApi(String consumerKey, String consumerSecret, String accessToken, String secret) {, +}]]>, +			</programlisting>, +			<para>, +				In the constructor, you should call super, passing up the ID of the ServiceProvider, the connection repository, the consumerKey and secret, and a configured OAuth1Template., +				The OAuth1Template will handle the "OAuth dance" with the provider., +				It should also be configured with the provided consumerKey and consumerSecret, along with the provider-specific requestTokenUrl, authorizeUrl, and accessTokenUrl., +			</para>			, +			<para>, +				In getApi(String, String, String, String), you should construct your Service API implementation, passing it the four tokens needed to make requests for protected resources., +				Inside the API implementation, we generally recommend using RestTemplate to make the HTTP calls and add the required Authorization header:, +			</para>, +			<programlisting language="java"><![CDATA[, +public TwitterTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +    restTemplate = new RestTemplate();, +    // configures an interceptor that adds the Authorization header to each ClientRequest before it is executed, +    restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] {, +        new OAuth1RequestInterceptor(consumerKey, consumerSecret, new OAuthToken(accessToken, accessTokenSecret)), +    });, +}]]>, +			</programlisting>, +			<para>, +				An example API call with RestTemplate is shown below:, +			</para>, +			<programlisting language="java"><![CDATA[, +public TwitterProfile getUserProfile(String screenName) {, +    return new TwitterProfile(restTemplate.getForObject("https://api.twitter.com/1/users/show.json?screen_name={screenName}", Map.class, screenName));]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * The key for each entry is the providerId, and the value is the list of {@link Connection}s that exist between the user and that provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * The key for each entry is the providerId, and the value is the list of {@link Connection}s that exist between the user and that provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to add a {@link Connection} and a connection already exists with the given key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * The key for each entry is the providerId, and the value is the list of {@link Connection}s that exist between the user and that provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to add a {@link Connection} and a connection already exists with the given key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to fetch a {@link Connection} and no such connection exists with the provided key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * The key for each entry is the providerId, and the value is the list of {@link Connection}s that exist between the user and that provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to add a {@link Connection} and a connection already exists with the given key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to fetch a {@link Connection} and no such connection exists with the provided key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/package-info.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, +import java.util.List;, +, +	private List<SocialConfigurer> socialConfigurers;, +	public void setSocialConfigurers(List<SocialConfigurer> socialConfigurers) {, +		Assert.notNull(socialConfigurers, "At least one configuration class must implement SocialConfigurer (or subclass SocialConfigurerAdapter)");, +		Assert.notEmpty(socialConfigurers, "At least one configuration class must implement SocialConfigurer (or subclass SocialConfigurerAdapter)");, +		this.socialConfigurers = socialConfigurers;, +			for (SocialConfigurer socialConfigurer : socialConfigurers) {, +			}, +			for (SocialConfigurer socialConfigurer : socialConfigurers) {, +			}, +		UserIdSource userIdSource = null;, +		for (SocialConfigurer socialConfigurer : socialConfigurers) {, +			UserIdSource userIdSourceCandidate = socialConfigurer.getUserIdSource();, +			if (userIdSourceCandidate != null) {, +				userIdSource = userIdSourceCandidate;, +				break;, +			}, +		}, +		Assert.notNull(userIdSource, "One configuration class must implement getUserIdSource from SocialConfigurer.");, +		return userIdSource;, +	public UsersConnectionRepository usersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {, +		UsersConnectionRepository usersConnectionRepository = null;, +		for (SocialConfigurer socialConfigurer : socialConfigurers) {, +			UsersConnectionRepository ucrCandidate = socialConfigurer.getUsersConnectionRepository(connectionFactoryLocator);, +			if (ucrCandidate != null) {, +				usersConnectionRepository = ucrCandidate;, +				break;, +			}, +		}, +		Assert.notNull(usersConnectionRepository, "One configuration class must implement getUsersConnectionRepository from SocialConfigurer.");, +		return usersConnectionRepository;, +	public ConnectionRepository connectionRepository(UsersConnectionRepository usersConnectionRepository) {, +		return usersConnectionRepository.createConnectionRepository(userIdSource().getUserId());, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, +import java.util.List;, +, +	private List<SocialConfigurer> socialConfigurers;, +	public void setSocialConfigurers(List<SocialConfigurer> socialConfigurers) {, +		Assert.notNull(socialConfigurers, "At least one configuration class must implement SocialConfigurer (or subclass SocialConfigurerAdapter)");, +		Assert.notEmpty(socialConfigurers, "At least one configuration class must implement SocialConfigurer (or subclass SocialConfigurerAdapter)");, +		this.socialConfigurers = socialConfigurers;, +			for (SocialConfigurer socialConfigurer : socialConfigurers) {, +			}, +			for (SocialConfigurer socialConfigurer : socialConfigurers) {, +			}, +		UserIdSource userIdSource = null;, +		for (SocialConfigurer socialConfigurer : socialConfigurers) {, +			UserIdSource userIdSourceCandidate = socialConfigurer.getUserIdSource();, +			if (userIdSourceCandidate != null) {, +				userIdSource = userIdSourceCandidate;, +				break;, +			}, +		}, +		Assert.notNull(userIdSource, "One configuration class must implement getUserIdSource from SocialConfigurer.");, +		return userIdSource;, +	public UsersConnectionRepository usersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {, +		UsersConnectionRepository usersConnectionRepository = null;, +		for (SocialConfigurer socialConfigurer : socialConfigurers) {, +			UsersConnectionRepository ucrCandidate = socialConfigurer.getUsersConnectionRepository(connectionFactoryLocator);, +			if (ucrCandidate != null) {, +				usersConnectionRepository = ucrCandidate;, +				break;, +			}, +		}, +		Assert.notNull(usersConnectionRepository, "One configuration class must implement getUsersConnectionRepository from SocialConfigurer.");, +		return usersConnectionRepository;, +	public ConnectionRepository connectionRepository(UsersConnectionRepository usersConnectionRepository) {, +		return usersConnectionRepository.createConnectionRepository(userIdSource().getUserId());, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfigurerAdapter.java, +import org.springframework.core.env.Environment;, +import org.springframework.social.UserIdSource;, + * Abstract implementation of {@link SocialConfigurer} with convenient default implementations of methods., +	 * Default implementation of {@link #addConnectionFactories(ConnectionFactoryConfigurer, Environment)}., +	 * Implemented as a no-op, adding no connection factories., +	 */, +	public void addConnectionFactories(ConnectionFactoryConfigurer connectionFactoryConfigurer, Environment environment) {, +	}, +	, +	/**, +	 * Default implementation of {@link #getUserIdSource()}., +	 * Returns null, indicating that this configuration class doesn't provide a UserIdSource (another configuration class must provide one, however)., +	 * @return null, +	 */, +	public UserIdSource getUserIdSource() {, +		return null;, +	}, +	, +	/**]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @return the access grant of the client only (not user related), +	 */, +	AccessGrant authenticateClient();, +, +	/**, +	 * Retrieves the client access grant using OAuth 2 client password flow., +	 * This is an access grant that is based on the client id and password (a.k.a. client secret)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @return the access grant of the client only (not user related), +	 */, +	AccessGrant authenticateClient();, +, +	/**, +	 * Retrieves the client access grant using OAuth 2 client password flow., +	 * This is an access grant that is based on the client id and password (a.k.a. client secret)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public AccessGrant authenticateClient() {, +		return authenticateClient(null);, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @return the access grant of the client only (not user related), +	 */, +	AccessGrant authenticateClient();, +, +	/**, +	 * Retrieves the client access grant using OAuth 2 client password flow., +	 * This is an access grant that is based on the client id and password (a.k.a. client secret)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public AccessGrant authenticateClient() {, +		return authenticateClient(null);, +	}, +	, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +				public AccessGrant authenticateClient() {, +					return null;, +				}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @return the access grant of the client only (not user related), +	 */, +	AccessGrant authenticateClient();, +, +	/**, +	 * Retrieves the client access grant using OAuth 2 client password flow., +	 * This is an access grant that is based on the client id and password (a.k.a. client secret)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public AccessGrant authenticateClient() {, +		return authenticateClient(null);, +	}, +	, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +				public AccessGrant authenticateClient() {, +					return null;, +				}, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +	public AccessGrant authenticateClient() {, +		return new AccessGrant("12345", null,  null, 3600);, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @return the access grant of the client only (not user related), +	 */, +	AccessGrant authenticateClient();, +, +	/**, +	 * Retrieves the client access grant using OAuth 2 client password flow., +	 * This is an access grant that is based on the client id and password (a.k.a. client secret)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public AccessGrant authenticateClient() {, +		return authenticateClient(null);, +	}, +	, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +				public AccessGrant authenticateClient() {, +					return null;, +				}, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +	public AccessGrant authenticateClient() {, +		return new AccessGrant("12345", null,  null, 3600);, +	}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +				public AccessGrant authenticateClient() {, +					return null;, +				}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Long expireTime;, +, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;, +	}, +	, +	/**, +	/**, +	 * The scope of the access grant., +	 * May be null if the provider doesn't return the granted scope in the response., +	 */, +	public String getScope() {, +		return scope;, +	}, +	, +	/**, +	 * Additional parameters returned along with the access grant., +	 */, +	public Map<String, Object> getAdditionalParameters() {, +		return additionalParameters;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Long expireTime;, +, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;, +	}, +	, +	/**, +	/**, +	 * The scope of the access grant., +	 * May be null if the provider doesn't return the granted scope in the response., +	 */, +	public String getScope() {, +		return scope;, +	}, +	, +	/**, +	 * Additional parameters returned along with the access grant., +	 */, +	public Map<String, Object> getAdditionalParameters() {, +		return additionalParameters;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Refreshes the access grant., +	 * @param the refresh token from the previous access grant., +	AccessGrant refreshAccess(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Long expireTime;, +, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;, +	}, +	, +	/**]
[+++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String connectionRepository = element.getAttribute("connection-repository");, +		providerBeanBuilder.addConstructorArgReference(connectionRepository);, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String connectionRepository = element.getAttribute("connection-repository");, +		providerBeanBuilder.addConstructorArgReference(connectionRepository);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider class="org.springframework.social.twitter.connect.TwitterServiceProvider" client-key="twitter_key" client-secret="twitter_secret" />, +	<social:service-provider class="org.springframework.social.facebook.connect.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +		String connectionRepository = element.getAttribute("connection-repository");, +		providerBeanBuilder.addConstructorArgReference(connectionRepository);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, +	<social:service-provider class="org.springframework.social.twitter.connect.TwitterServiceProvider" client-key="twitter_key" client-secret="twitter_secret" />, +	<social:service-provider class="org.springframework.social.facebook.connect.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, String> requestParameters = new HashMap<String, String>();, +		requestParameters.put("client_id", clientId);, +		requestParameters.put("client_secret", clientSecret);, +		requestParameters.put("code", authorizationCode);, +		requestParameters.put("redirect_uri", redirectUri);, +		requestParameters.put("grant_type", "authorization_code");, +		Map<String, String> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(result.get("access_token"), result.get("refresh_token"));]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */, +	String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication. The authenticate URL, +	 * differs from the authorizationUrl slightly in that it does not require the user to, +	 * authorize the app multiple times. This provides a better user experience for, +	 * "Sign in with Provider" scenarios. Use of implicit grant is discouraged unless, +	 * there is no other option available. Use, +	 * {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */, +	String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */, +	String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication. The authenticate URL, +	 * differs from the authorizationUrl slightly in that it does not require the user to, +	 * authorize the app multiple times. This provides a better user experience for, +	 * "Sign in with Provider" scenarios. Use of implicit grant is discouraged unless, +	 * there is no other option available. Use, +	 * {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */, +	String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters) {, +		return buildAuthUrl(authorizeUrl, grantType, parameters);, +	}, +, +	public String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters) {, +		return authenticateUrl != null ? buildAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.io.Serializable;, +import java.util.List;, +, +/**, + * Models the provider of a service that local user accounts may connect to and invoke., + * Exposes service provider metadata along with connection management operations that allow for account connections to be established., + * Also acts as a factory for a strongly-typed service API (S)., + * Once a connection with this provider is established, the service API can be used by the application to invoke the service on behalf of the member., + * @author Keith Donald, + * @param <S> The service hosted by this service provider., + */, +public interface ServiceProvider<S> {, +, +	/**, +	 * Uniquely identifies this service provider., +	 * Should be lower case and not contain spaces or special characters., +	 * Also used as a key for provider connections stored in a shared repository., +	 */, +	String getId();, +	, +	/**, +	 * Returns true if the user account has one or more connections to this provider, false otherwise., +	 * @param accountId the application account ID to check for a connection with this provider., +	 */, +	boolean isConnected(Serializable accountId);, +, +	/**, +	 * Get the connections established between a user account and this service provider., +	 * The connections are ordered by rank., +	 * The first connection in the list is the "primary" connection between the account and this service provider., +	 * @param accountId a user account id, +	 * @return the account's connections to this service provider, +	 */, +	List<ServiceProviderConnection<S>> getConnections(Serializable accountId);, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, +/**, + * Annotation to enable JDBC-based persistence of connections., + * Configures a singleton {@link JdbcUsersConnectionRepository} and a request-scoped JdbcConnectionRepository. , + * @author Craig Walls, + */, +	/**, +	 * The ID to assign to the ConnectionRepository bean., +	 * Defaults to "connectionRepository". , +	 */, +	/**, +	 * The ID to assign to the UsersConnectionRepository bean., +	 * Defaults to "usersConnectionRepository". , +	 */, +	/**, +	 * The ID of the ConnectionFactoryLocator bean to fetch a ConnectionFactory from when creating/persisting connections., +	 * Defaults to "connectionFactoryLocator". , +	 */, +	/**, +	 * The ID of a DataSource for accessing the database., +	 * Defaults to "dataSource". , +	 */, +	/**, +	 * The ID of a TextEncryptor used when persisting connection details., +	 * Defaults to "textEncryptor". , +	 */, +	/**, +	 * The ID of a UserIdSource bean used to determine the unique identifier of the current user., +	 * Defaults to "userIdSource". , +	 */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, +/**, + * Annotation to enable JDBC-based persistence of connections., + * Configures a singleton {@link JdbcUsersConnectionRepository} and a request-scoped JdbcConnectionRepository. , + * @author Craig Walls, + */, +	/**, +	 * The ID to assign to the ConnectionRepository bean., +	 * Defaults to "connectionRepository". , +	 */, +	/**, +	 * The ID to assign to the UsersConnectionRepository bean., +	 * Defaults to "usersConnectionRepository". , +	 */, +	/**, +	 * The ID of the ConnectionFactoryLocator bean to fetch a ConnectionFactory from when creating/persisting connections., +	 * Defaults to "connectionFactoryLocator". , +	 */, +	/**, +	 * The ID of a DataSource for accessing the database., +	 * Defaults to "dataSource". , +	 */, +	/**, +	 * The ID of a TextEncryptor used when persisting connection details., +	 * Defaults to "textEncryptor". , +	 */, +	/**, +	 * The ID of a UserIdSource bean used to determine the unique identifier of the current user., +	 * Defaults to "userIdSource". , +	 */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +/**, + * {@link ImportBeanDefinitionRegistrar} to enable {@link EnableJdbcConnectionRepository} annotation., + * @author Craig Walls, + */, +class JdbcConnectionRepositoryRegistrar extends JdbcConnectionRepositoryConfigSupport implements ImportBeanDefinitionRegistrar {, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, +/**, + * Annotation to enable JDBC-based persistence of connections., + * Configures a singleton {@link JdbcUsersConnectionRepository} and a request-scoped JdbcConnectionRepository. , + * @author Craig Walls, + */, +	/**, +	 * The ID to assign to the ConnectionRepository bean., +	 * Defaults to "connectionRepository". , +	 */, +	/**, +	 * The ID to assign to the UsersConnectionRepository bean., +	 * Defaults to "usersConnectionRepository". , +	 */, +	/**, +	 * The ID of the ConnectionFactoryLocator bean to fetch a ConnectionFactory from when creating/persisting connections., +	 * Defaults to "connectionFactoryLocator". , +	 */, +	/**, +	 * The ID of a DataSource for accessing the database., +	 * Defaults to "dataSource". , +	 */, +	/**, +	 * The ID of a TextEncryptor used when persisting connection details., +	 * Defaults to "textEncryptor". , +	 */, +	/**, +	 * The ID of a UserIdSource bean used to determine the unique identifier of the current user., +	 * Defaults to "userIdSource". , +	 */, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java]
[+++ b/samples/twitter-connect/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +// -----------------------------------------------------------------------------, +// Main gradle build file for Spring Social's Twitter-Connect Sample, +// @author Craig Walls, +// -----------------------------------------------------------------------------, +, +// -----------------------------------------------------------------------------, +// Configuration for the root project, +// -----------------------------------------------------------------------------, +description = 'Spring Social Twitter Connect', +abbreviation = 'TWITCONN', +, +apply plugin: 'java' // tasks for conventional java lifecycle, +apply plugin: 'maven' // `gradle install` to push jars to local .m2 cache, +apply plugin: 'eclipse' // `gradle eclipse` to generate .classpath/.project, +apply plugin: 'idea' // `gradle idea` to generate .ipr/.iml, +apply plugin: 'war', +apply plugin: 'jetty', +, +task wrapper(type: Wrapper) {, +    gradleVersion = '0.9-rc-3', +}, +  , +group = 'org.springframework.social.samples', +version = '1.0.0.BUILD-SNAPSHOT', +, +def localMavenRepo = new File("${System.properties.'user.home'}/.m2/repository").toURL().toString(), +, +repositories {, +    mavenRepo urls: localMavenRepo, +    mavenRepo urls: 'http://maven.springframework.org/release', +    mavenRepo urls: 'http://maven.springframework.org/milestone', +    mavenRepo urls: 'http://maven.springframework.org/snapshot', +    mavenCentral(), +}, +, +dependencies {, +    compile "org.springframework:spring-context:3.0.5.RELEASE", +    compile "org.springframework:spring-webmvc:3.0.5.RELEASE", +    compile "org.springframework:spring-aspects:3.0.5.RELEASE", +	compile "com.h2database:h2:1.2.143", +	compile "org.aspectj:aspectjrt:1.6.9", +	compile 'org.slf4j:slf4j-api:1.5.10', +	compile 'org.slf4j:jcl-over-slf4j:1.5.10', +	compile 'org.slf4j:slf4j-log4j12:1.5.10', +	compile "log4j:log4j:1.2.15", +	compile "javax.inject:javax.inject:1", +	compile "org.springframework.social:spring-social-core:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-connect:1.0.0.BUILD-SNAPSHOT", +	compile "org.springframework.social:spring-social-connect-web:1.0.0.BUILD-SNAPSHOT", +	compile "org.scribe:scribe:1.0.7", +	providedRuntime ("javax.servlet:servlet-api:2.5") { provided = true }, +	providedRuntime ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, +	compile "javax.servlet:jstl:1.2", +}, +++ b/samples/twitter-connect/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +// -----------------------------------------------------------------------------, +// Main gradle build file for Spring Social's Twitter-Connect Sample, +// @author Craig Walls, +// -----------------------------------------------------------------------------, +, +// -----------------------------------------------------------------------------, +// Configuration for the root project, +// -----------------------------------------------------------------------------, +description = 'Spring Social Twitter Connect', +abbreviation = 'TWITCONN', +, +apply plugin: 'java' // tasks for conventional java lifecycle, +apply plugin: 'maven' // `gradle install` to push jars to local .m2 cache, +apply plugin: 'eclipse' // `gradle eclipse` to generate .classpath/.project]
[+++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(512) not null,, +    secret varchar(512),, +    refreshToken varchar(512),, +++ b/docs/manual/src/asciidoc/index.adoc, +    accessToken varchar(512) not null,, +    secret varchar(512),, +    refreshToken varchar(512),, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	// builder only, +	, +	UserProfile(String name, String firstName, String lastName, String email, String username) {]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java, +import java.util.ArrayList;, +	@SuppressWarnings("serial"), +	private static class LongList extends ArrayList<Long> {}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java, +import java.util.ArrayList;, +	@SuppressWarnings("serial"), +	private static class LongList extends ArrayList<Long> {}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/package-info.java, +/**, + * Friends and Followers API and supporting classes, + */, +package org.springframework.social.twitter.friend;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java, +import java.util.ArrayList;, +	@SuppressWarnings("serial"), +	private static class LongList extends ArrayList<Long> {}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/package-info.java, +/**, + * Friends and Followers API and supporting classes, + */, +package org.springframework.social.twitter.friend;, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java, +import java.util.ArrayList;, +	@SuppressWarnings("serial"), +	private static class LongList extends ArrayList<Long> {}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/package-info.java, +/**, + * Friends and Followers API and supporting classes, + */, +package org.springframework.social.twitter.friend;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java, +import java.util.ArrayList;, +	@SuppressWarnings("serial"), +	private static class LongList extends ArrayList<Long> {}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/package-info.java, +/**, + * Friends and Followers API and supporting classes, + */, +package org.springframework.social.twitter.friend;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java, +import java.util.ArrayList;, +	@SuppressWarnings("serial"), +	private static class LongList extends ArrayList<Long> {}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/package-info.java, +/**, + * Friends and Followers API and supporting classes, + */, +package org.springframework.social.twitter.friend;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthClientRequestSigner.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.provider.oauth;, +, +import java.util.Map;, +, +import org.springframework.http.client.ClientHttpRequest;, +, +/**, + * Strategy interface for signing a client request with the necessary, + * information for it to be OAuth-authenticated. Implementations of this, + * interface will vary for different versions of OAuth., + * , + * @author Craig Walls, + */, +public interface OAuthClientRequestSigner {, +	void sign(ClientHttpRequest request, Map<String, String> bodyParameters);, +}, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthClientRequestSigner.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.provider.oauth;, +, +import java.util.Map;, +, +import org.springframework.http.client.ClientHttpRequest;, +, +/**, + * Strategy interface for signing a client request with the necessary, + * information for it to be OAuth-authenticated. Implementations of this, + * interface will vary for different versions of OAuth., + * , + * @author Craig Walls, + */, +public interface OAuthClientRequestSigner {, +	void sign(ClientHttpRequest request, Map<String, String> bodyParameters);, +}, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthSigningClientHttpRequest.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.provider.oauth;, +, +import java.io.IOException;, +import java.net.URI;, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.MediaType;, +import org.springframework.http.client.AbstractClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;]
[+++ b/build.gradle, +        gradleVersion = "3.0", +++ b/build.gradle, +        gradleVersion = "3.0", +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Oct 12 11:55:31 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.0-bin.zip]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/src/dist/changelog.txt, +Spring Social 2.0.0.M1 (November 29, 2016), +==========================================, +The primary purpose of this release is to build and test, +Spring Social against Spring Framework 5.0.0.M3 to ensure, +compatibility. Additionally, a few minor features and bug, +fixes are included:, +, +   * Ability to override ConnectController's success URL, +     (SOCIAL-373), +   * Support SocialAuthenticationFailureHandler in, +     setPostFailureUrl(). (Pull request #190), +   * Fix OAuth2 redirect URL when behind a proxy. (SOCIAL-447), +   * Fix potential for AuthenticationServiceException when user, +     is already authenticated., +   * Fix some incorrect JavaDoc (Issue #210 and Pull request #212), +   * Handle empty result in access token endpoint.. (Issue #203) , +   * Add hashCode(), equals(), and toString() for ConnectionData, +, +, +]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +				Callers are first expected to call buildAuthorizeUrl(GrantType, OAuth2Parameters) to construct the URL to redirect the user to for connection authorization., +						The application exchanges the authorization code for an access grant., +				Next, callers should call buildAuthorizeUrl(String, OAuth1Parameters) to construct the URL to redirect the user to for connection authorization.]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, +			final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +			authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, +			return authService;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/DirectMessage.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *]
[+++ b/gradle.properties, +junitVersion=4.11, +httpComponentsVersion=4.3.1, +springVersion=4.1.6.RELEASE, +springSnapshotVersion=latest.integration, +hamcrestVersion=1.3, +version=1.1.2.RELEASE, +jacksonVersion=2.4.5, +servletApiVersion=3.0.1, +springReleaseVersion=latest.release, +mockitoVersion=1.10.8, +javaxInjectVersion=1, +thymeleafVersion=2.1.2.RELEASE]
[+++ b/README, +++ b/README, +++ b/build.gradle, +    commonsCodecVersion = '1.5', +    h2Version = '1.3.154', +    jacksonVersion = '1.8.0', +    jodaVersion = '1.6.2', +    jspApiVersion = '2.1', +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC2', +        compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { provided = true }, +        compile ("commons-codec:commons-codec:$commonsCodecVersion") { optional = true }, +        compile project(':spring-social-core'), +    }, +}, +, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +++ b/README, +++ b/build.gradle, +    commonsCodecVersion = '1.5', +    h2Version = '1.3.154', +    jacksonVersion = '1.8.0', +    jodaVersion = '1.6.2', +    jspApiVersion = '2.1', +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC2', +        compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { provided = true }, +        compile ("commons-codec:commons-codec:$commonsCodecVersion") { optional = true }, +        compile project(':spring-social-core'), +    }, +}, +, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +++ b/docs/src/info/changelog.txt, +++ b/README, +++ b/build.gradle, +    commonsCodecVersion = '1.5', +    h2Version = '1.3.154', +    jacksonVersion = '1.8.0', +    jodaVersion = '1.6.2', +    jspApiVersion = '2.1', +    springVersion = '3.1.0.M1', +    springSecurityVersion = '3.1.0.RC2', +        compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { provided = true }, +        compile ("commons-codec:commons-codec:$commonsCodecVersion") { optional = true }, +        compile project(':spring-social-core'), +    }, +}, +, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +++ b/docs/src/info/changelog.txt, +++ b/docs/src/reference/docbook/apis.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="apis" xmlns:xlink="http://www.w3.org/1999/xlink">, +	<title>Working with Service Provider APIs</title>, +  , +	<section xml:id="section_api_introduction">, +		<title>Introduction</title>, +      , +		<para>, +			After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. , +			Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application., +		</para>, +      , +		<para>, +			Each service provider exposes their data and functionality through an API. , +			Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface., +		</para>, +      , +		<para>, +			Spring Social comes with six provider API templates/operations for the following service providers:, +		</para>, +      , +		<itemizedlist>, +			<listitem><para>Twitter</para></listitem>, +			<listitem><para>Facebook</para></listitem>, +			<listitem><para>LinkedIn</para></listitem>, +			<listitem><para>TripIt</para></listitem>, +			<listitem><para>GitHub</para></listitem>, +			<listitem><para>Gowalla</para></listitem>, +		</itemizedlist>, +	</section>, +  , +	<section xml:id="section_api_twitter">, +		<title>Twitter</title>]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.util.Collections;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.WebRequest;, +	private final MultiValueMap<Class<?>, ProviderSignInInterceptor<?>> signInInterceptors = new LinkedMultiValueMap<Class<?>, ProviderSignInInterceptor<?>>();, +, +	 * Configure the list of sign in interceptors that should receive callbacks during the sign in process., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the sign in interceptors to add, +	 */, +	public void setSignInInterceptors(List<ProviderSignInInterceptor<?>> interceptors) {, +		for (ProviderSignInInterceptor<?> interceptor : interceptors) {, +			addSignInInterceptor(interceptor);, +		}, +	}, +	, +	/**, +	 * Adds a ConnectInterceptor to receive callbacks during the connection process., +	 * Useful for programmatic configuration., +	 * @param interceptor the connect interceptor to add, +	 */, +	public void addSignInInterceptor(ProviderSignInInterceptor<?> interceptor) {, +		Class<?> serviceApiType = GenericTypeResolver.resolveTypeArgument(interceptor.getClass(), ProviderSignInInterceptor.class);, +		signInInterceptors.add(serviceApiType, interceptor);, +	}, +, +	/**, +		MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>(); , +		preSignIn(connectionFactory, parameters, request);, +			return handleSignIn(connection, connectionFactory, request);, +			return handleSignIn(connection, connectionFactory, request);, +	private RedirectView handleSignIn(Connection<?> connection, ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			postSignIn(connectionFactory, connection, (WebRequest) request);, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private void preSignIn(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, +		for (ProviderSignInInterceptor interceptor : interceptingSignInTo(connectionFactory)) {, +			interceptor.preSignIn(connectionFactory, parameters, request);, +		}, +	}, +	, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private void postSignIn(ConnectionFactory<?> connectionFactory, Connection<?> connection, WebRequest request) {, +		for (ProviderSignInInterceptor interceptor : interceptingSignInTo(connectionFactory)) {, +			interceptor.postSignIn(connection, request);, +		}, +	}, +, +	private List<ProviderSignInInterceptor<?>> interceptingSignInTo(ConnectionFactory<?> connectionFactory) {, +		Class<?> serviceType = GenericTypeResolver.resolveTypeArgument(connectionFactory.getClass(), ConnectionFactory.class);, +		List<ProviderSignInInterceptor<?>> typedInterceptors = signInInterceptors.get(serviceType);, +		if (typedInterceptors == null) {, +			typedInterceptors = Collections.emptyList();, +		}, +		return typedInterceptors;, +	}, +]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final RestTemplate restTemplate = new RestTemplate();, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(), requestToken.getSecret());, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +	// The response content type could be text/plain, text/html, etc...and may not trigger the form-encoded message converter, +		return SigningUtils.buildAuthorizationHeaderValue(tokenUrl, oauthParameters, additionalParameters, HttpMethod.POST, consumerSecret, tokenSecret);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final RestTemplate restTemplate = new RestTemplate();, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(), requestToken.getSecret());, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +	// The response content type could be text/plain, text/html, etc...and may not trigger the form-encoded message converter, +		return SigningUtils.buildAuthorizationHeaderValue(tokenUrl, oauthParameters, additionalParameters, HttpMethod.POST, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import org.springframework.http.HttpRequest;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final RestTemplate restTemplate = new RestTemplate();, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(), requestToken.getSecret());, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));]
[+++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.social.security;, +, +import org.springframework.social.SocialException;, +, +@SuppressWarnings("serial"), +public class SocialAuthenticationException extends SocialException {, +, +	public SocialAuthenticationException() {, +		super("");, +	}, +, +	public SocialAuthenticationException(String message) {, +		super(message);, +	}, +, +	public SocialAuthenticationException(Throwable cause) {, +		super("", cause);, +	}, +, +	public SocialAuthenticationException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.1 Release, +===========================, +Compatibility Notes, +  * Changed signature of ConnectController.connectionStatusRedirect() to take a NativeWebRequest in, +    addition to the provider ID (SOCIAL-258)., +, +Bug Fixes, +  * Fixed ConnectController to use the servlet path when doing connection status redirects so that, +    the application's DispatcherServlet does not have to be mapped to "/" (SOCIAL-258)., +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.1 Release, +===========================, +Compatibility Notes, +  * Changed signature of ConnectController.connectionStatusRedirect() to take a NativeWebRequest in, +    addition to the provider ID (SOCIAL-258)., +, +Bug Fixes, +  * Fixed ConnectController to use the servlet path when doing connection status redirects so that, +    the application's DispatcherServlet does not have to be mapped to "/" (SOCIAL-258)., +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	 * Defaults to "/connect/{providerId}" relative to DispatcherServlet's path. , +	 * @param request the NativeWebRequest used to access the servlet path when constructing the redirect path.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	/**, +	 * Refreshes the access token., +	 */, +	AccessGrant refreshAccessToken(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	/**, +	 * Refreshes the access token., +	 */, +	AccessGrant refreshAccessToken(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	, +	public AccessGrant refreshAccessToken(String refreshToken) {, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("refresh_token", refreshToken);, +		requestParameters.set("grant_type", "refresh_token");, +		@SuppressWarnings("unchecked"), +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	/**, +	 * Refreshes the access token., +	 */, +	AccessGrant refreshAccessToken(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	, +	public AccessGrant refreshAccessToken(String refreshToken) {, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("refresh_token", refreshToken);, +		requestParameters.set("grant_type", "refresh_token");, +		@SuppressWarnings("unchecked"), +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	}, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +	public AccessGrant refreshAccessToken(String refreshToken) {, +		return new AccessGrant("12345", "23456");, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	/**, +	 * Refreshes the access token., +	 */, +	AccessGrant refreshAccessToken(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	, +	public AccessGrant refreshAccessToken(String refreshToken) {, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("refresh_token", refreshToken);, +		requestParameters.set("grant_type", "refresh_token");, +		@SuppressWarnings("unchecked"), +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	}, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +	public AccessGrant refreshAccessToken(String refreshToken) {, +		return new AccessGrant("12345", "23456");, +	}, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.social.test.client.RequestMatchers.*;, +import static org.springframework.social.test.client.ResponseCreators.*;, +	@Test, +	public void refreshAccessToken_jsonResponse() {, +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "refreshToken.json";, +		AccessGrant accessGrant = refreshToken(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +	}, +, +	private AccessGrant refreshToken(MediaType responseContentType, String responseFile) {, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(responseContentType);, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oAuth2Template.getRestTemplate());, +		mockServer.expect(requestTo(ACCESS_TOKEN_URL)), +				.andExpect(method(POST)), +				.andExpect(body("client_id=client_id&client_secret=client_secret&refresh_token=r3fr35h_t0k3n&", +								+ "grant_type=refresh_token")), +				.andRespond(withResponse(new ClassPathResource(responseFile, getClass()), responseHeaders));, +		AccessGrant accessGrant = oAuth2Template.refreshAccessToken("r3fr35h_t0k3n");, +		return accessGrant;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	/**, +	 * Refreshes the access token., +	 */, +	AccessGrant refreshAccessToken(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	, +	public AccessGrant refreshAccessToken(String refreshToken) {, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();]
[+++ b/build.gradle, +        classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.2.2', +++ b/build.gradle, +        classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.2.2', +++ b/src/reference/docbook/index.xml, +<book xml:id="spring-framework-reference", +    xmlns="http://docbook.org/ns/docbook" version="5.0", +    xmlns:xl="http://www.w3.org/1999/xlink", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation=", +        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd, +        http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">, +  <info>, +    <title>Spring Social Reference Documentation</title>, +    , +    <productname>Spring Social</productname>, +    , +    <releaseinfo>${version}</releaseinfo>, +        <personname>, +        </personname>, +        <personname>, +        </personname>, +    <copyright>, +      <year>2011-2012</year>, +    </copyright>, +, +    <legalnotice>, +      <para>Copies of this document may be made for your own use and for, +      distribution to others, provided that you do not charge any fee for such, +      copies and further provided that each copy contains this Copyright, +      Notice, whether distributed in print or electronically.</para>, +    </legalnotice>, +    , +  </info>, +    ]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/test/resources/org/springframework/social/provider/jdbc/Schema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + * , +	Map<String, Object> toParameterMap() {, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + * , +	Map<String, Object> toParameterMap() {, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + * , +	Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + * , +	Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + * , +	Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/Tweet.java, + * , +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + * , +	Map<String, Object> toParameterMap() {, +++ /dev/null]
[+++ b/docs/src/reference/docbook/implementing.xml, +public interface Twitter extends ApiBinding {, +public class TwitterTemplate extends AbstractOAuth1ApiBinding {, +public class FacebookTemplate extends AbstractOAuth2ApiBinding {, +++ b/docs/src/reference/docbook/implementing.xml, +public interface Twitter extends ApiBinding {, +public class TwitterTemplate extends AbstractOAuth1ApiBinding {, +public class FacebookTemplate extends AbstractOAuth2ApiBinding {, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Base interface that may be implemented by API bindings., + * Provides a simple boolean tester that can be used to determine if the API binding has been authorized for a specific user., + * @author Keith Donald, + */, +public interface ApiBinding {, +	, +	/**, +	 * Returns true if this API binding has been authorized on behalf of a specific user., +	 * If so, calls to the API are signed with the user's authorization credentials, indicating an application is invoking the API on a user's behalf., +	 * If not, API calls do not contain any user authorization information., +	 * Callers can use this status flag to determine if API operations requiring authorization can be invoked., +	 */, +	public boolean isAuthorized();, +	, +}, +++ b/docs/src/reference/docbook/implementing.xml, +public interface Twitter extends ApiBinding {, +public class TwitterTemplate extends AbstractOAuth1ApiBinding {, +public class FacebookTemplate extends AbstractOAuth2ApiBinding {, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Base interface that may be implemented by API bindings., + * Provides a simple boolean tester that can be used to determine if the API binding has been authorized for a specific user., + * @author Keith Donald, + */, +public interface ApiBinding {, +	, +	/**, +	 * Returns true if this API binding has been authorized on behalf of a specific user., +	 * If so, calls to the API are signed with the user's authorization credentials, indicating an application is invoking the API on a user's behalf., +	 * If not, API calls do not contain any user authorization information., +	 * Callers can use this status flag to determine if API operations requiring authorization can be invoked., +	 */, +	public boolean isAuthorized();, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.nio.charset.Charset;, +import java.util.ArrayList;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +		super(providerId, , +			  new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), , +			  apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +		super(providerId, , +			  new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), , +			  apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +		super(providerId, , +			  new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), , +			  apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2TokenParameterRequestInterceptor.java, +	/**, +	 * Creates an instance of the interceptor, defaulting to use a parameter named "access_token"., +	 * @param accessToken The access token., +	 */, +	/**, +	 * Creates an instance of the interceptor, using a parameter with the specified name., +	 * @param accessToken The access token., +	 * @param parameterName The name of the query parameter that will carry the access token. , +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +		super(providerId, , +			  new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), , +			  apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2TokenParameterRequestInterceptor.java, +	/**, +	 * Creates an instance of the interceptor, defaulting to use a parameter named "access_token"., +	 * @param accessToken The access token., +	 */, +	/**, +	 * Creates an instance of the interceptor, using a parameter with the specified name., +	 * @param accessToken The access token., +	 * @param parameterName The name of the query parameter that will carry the access token. , +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/PreemptiveBasicAuthClientHttpRequestInterceptor.java, + * @author Craig Walls, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +		super(providerId, , +			  new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), , +			  apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, +	 * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2TokenParameterRequestInterceptor.java, +	/**, +	 * Creates an instance of the interceptor, defaulting to use a parameter named "access_token"., +	 * @param accessToken The access token., +	 */, +	/**, +	 * Creates an instance of the interceptor, using a parameter with the specified name., +	 * @param accessToken The access token., +	 * @param parameterName The name of the query parameter that will carry the access token. , +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/PreemptiveBasicAuthClientHttpRequestInterceptor.java, + * @author Craig Walls, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/TokenStrategy.java, +/**, + * Strategy enumeration where each value carries an interceptor defining how an access token is carried on API requests., + * @author Craig Walls, + */, +	/**, +	 * Indicates that the access token should be carried in the Authorization header as an OAuth2 Bearer token., +	 */, +	/**, +	 * Indicates that the access token should be carried as a query parameter named "access_token"., +	 */, +	/**, +	 * Indicates that the access token should be carried as a query parameter named "oauth_token"., +	 */, +	abstract ClientHttpRequestInterceptor interceptor(String accessToken, OAuth2Version oauth2Version);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/support/ParameterMap.java]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.web.client.RestClientException;, +	protected final Log logger = LogFactory.getLog(getClass());, +	, +			try {, +			} catch (RestClientException e) {, +				logger.debug("failed to exchange for access", e);, +				return null;, +			}]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.inject.Inject;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +	private String viewUrl = "/connect/";, +, +	 * Sets the url to return on successfull connect., +	 *, +	 * @param viewUrl The url to return to., +	 */, +	public void setViewUrl(String viewUrl) {, +		this.viewUrl = viewUrl;, +	}, +	, +	/**, +, +	/**, +	 * Returns the view to return on successfull connect., +	 *, +	 * @return the view url to return on successfull connect., +	 */, +	protected String getViewUrl() {, +		return viewUrl;, +	}, +	, +		String path = getViewUrl() + providerId + getPathExtension(servletRequest);]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +			return null;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +			return null;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +		StringBuffer sb = getProxyHeaderAwareRequestURL(request);, +	protected StringBuffer getProxyHeaderAwareRequestURL(HttpServletRequest request), +, +	{, +		String host = request.getHeader("Host");, +		if ( StringUtils.isEmpty(host) ), +		{, +			return request.getRequestURL();, +		}, +		StringBuffer sb = new StringBuffer();, +		String schemeHeader = request.getHeader("X-Forwarded-Proto");, +		String portHeader = request.getHeader("X-Forwarded-Port");, +		String scheme = StringUtils.isEmpty(schemeHeader) ? "http" : schemeHeader;, +		String port = StringUtils.isEmpty(portHeader) ? "80" : portHeader;, +		if ( scheme.equals("http") && port.equals("80") ), +		{, +			port = "";, +		}, +		if ( scheme.equals("https") && port.equals("443") ), +		{, +			port = "";, +		}, +		sb.append(scheme);, +		sb.append("://");, +		sb.append(host);, +		if ( StringUtils.hasLength(port) ), +		{, +			sb.append(":");, +			sb.append(port);, +		}, +		sb.append(request.getRequestURI());, +		return sb;, +	}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +import java.io.Serializable;, +@SuppressWarnings("serial"), +public class ConnectionFactoryRegistry implements ConnectionFactoryLocator, Serializable {]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth2;, +, +import org.springframework.util.MultiValueMap;, +, +/**, + * Parameters for building an OAuth2 authorization URL, + * , + * @author Roy Clarkson, + */, +public class AuthorizationParameters {, +	, +	private String redirectUri;, +	, +	private String scope;, +	, +	private String state;, +	, +	private GrantType grantType;, +	, +	private MultiValueMap<String, String> additionalParameters;, +		, +	/**, +	 * @param redirectUri the authorization callback url; this value must match the redirectUri registered with the provider, +	 * @param scope the permissions the application is seeking with the authorization, +	 * @param state, +	 * @param grantType specifies whether the OAuth flow is "client-side" or "server-side", +	 * @param additionalParameters additional parameters required by the provider, +	 */, +	public AuthorizationParameters(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		this.redirectUri = redirectUri;, +		this.scope = scope;, +		this.state = state;, +		this.grantType = grantType;, +		this.additionalParameters = additionalParameters;, +	}, +	, +	public void setRedirectUri(String redirectUri) {, +		this.redirectUri = redirectUri;, +	}, +, +	public String getRedirectUri() {, +		return redirectUri;, +	}, +	, +	public void setScope(String scope) {, +		this.scope = scope;, +	}, +, +	public String getScope() {, +		return scope;, +	}, +	, +	public void setState(String state) {, +		this.state = state;, +	}, +, +	public String getState() {, +		return state;, +	}, +, +	public void setGrantType(GrantType grantType) {, +		this.grantType = grantType;, +	}, +, +	public GrantType getGrantType() {, +		return grantType;, +	}, +, +	public void setAdditionalParameters(MultiValueMap<String, String> additionalParameters) {, +		this.additionalParameters = additionalParameters;, +	}, +, +	public MultiValueMap<String, String> getAdditionalParameters() {, +		return additionalParameters;, +	}, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/accessToken_noUser.json, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/accessToken_noUser.json, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import org.springframework.social.connect.ConnectionRepository;, +			usersConnectionRepository.createConnectionRepository(userId).updateConnection(connection);]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private String viewPath = "connect/";, +, +	 * Sets the path to connection status views., +	 * Prepended to provider-specific views (e.g., "connect/facebookConnected") to create the complete view name., +	 * Defaults to "connect/"., +	 * @param viewPath The path to connection status views., +	 */, +	public void setViewPath(String viewPath) {, +		this.viewPath = viewPath;, +	}, +	, +	/**, +		return viewPath;, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private String viewPath = "connect/";, +, +	 * Sets the path to connection status views., +	 * Prepended to provider-specific views (e.g., "connect/facebookConnected") to create the complete view name., +	 * Defaults to "connect/"., +	 * @param viewPath The path to connection status views., +	 */, +	public void setViewPath(String viewPath) {, +		this.viewPath = viewPath;, +	}, +	, +	/**, +		return viewPath;, +++ b/src/dist/changelog.txt, +Bug Fixes, +   * SocialAuthenticationFilter now fails authentication when the user, +     denies authorization on the provider. This avoids an endless redirect, +     loop. (SOCIAL-387), +, +Improvement, +   * ProviderSignInController passes "scope" parameter from request into, +     OAuth 2 authorization URL. (SOCIAL-319), +   * Ability to set ConnectController's base view path as a property., +     (SOCIAL-371), +, +Spring Social 1.1.0 Milestone 3 (July 8, 2012), +==============================================]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, +		List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();, +		partConverters.add(new ByteArrayHttpMessageConverter());, +		StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter(Charset.forName("UTF-8"));, +		stringHttpMessageConverter.setWriteAcceptCharset(false);, +		partConverters.add(stringHttpMessageConverter);, +		partConverters.add(new ResourceHttpMessageConverter());		, +		converter.setPartConverters(partConverters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, +		List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();, +		partConverters.add(new ByteArrayHttpMessageConverter());, +		StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter(Charset.forName("UTF-8"));, +		stringHttpMessageConverter.setWriteAcceptCharset(false);, +		partConverters.add(stringHttpMessageConverter);, +		partConverters.add(new ResourceHttpMessageConverter());		, +		converter.setPartConverters(partConverters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, +		List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();, +		partConverters.add(new ByteArrayHttpMessageConverter());, +		StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter(Charset.forName("UTF-8"));, +		stringHttpMessageConverter.setWriteAcceptCharset(false);, +		partConverters.add(stringHttpMessageConverter);, +		partConverters.add(new ResourceHttpMessageConverter());		, +		converter.setPartConverters(partConverters);]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.security;, +, +import java.io.IOException;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.web.authentication.AuthenticationFailureHandler;, +, +/**, + * @author Craig Walls, + */, +class SocialAuthenticationFailureHandler implements AuthenticationFailureHandler {, +, +	private AuthenticationFailureHandler delegate;, +, +	public SocialAuthenticationFailureHandler(AuthenticationFailureHandler delegate) {, +		this.delegate = delegate;, +	}, +	, +	public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +		if (failed instanceof SocialAuthenticationRedirectException){, +		  response.sendRedirect(((SocialAuthenticationRedirectException)failed).getRedirectUrl()); , +		  return;, +		}, +		delegate.onAuthenticationFailure(request, response, failed);, +	}, +, +}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +	@SuppressWarnings("unchecked"), +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.security;, +, +import java.io.IOException;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.web.authentication.AuthenticationFailureHandler;, +, +/**, + * @author Craig Walls, + */, +class SocialAuthenticationFailureHandler implements AuthenticationFailureHandler {, +, +	private AuthenticationFailureHandler delegate;, +, +	public SocialAuthenticationFailureHandler(AuthenticationFailureHandler delegate) {, +		this.delegate = delegate;, +	}, +	, +	public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +		if (failed instanceof SocialAuthenticationRedirectException){, +		  response.sendRedirect(((SocialAuthenticationRedirectException)failed).getRedirectUrl()); , +		  return;, +		}, +		delegate.onAuthenticationFailure(request, response, failed);, +	}, +, +}]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +public class JdbcConnectionRepository implements ConnectionRepository {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +public class JdbcConnectionRepository implements ConnectionRepository {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +public class InMemoryConnectionRepository implements ConnectionRepository {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +	/**, +	 * Adds a query parameters to the URI, +	 */, +	public URIBuilder queryParams(MultiValueMap<String, String> params) {, +		parameters.putAll(params);, +		return this;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +	/**, +	 * Adds a query parameters to the URI, +	 */, +	public URIBuilder queryParams(MultiValueMap<String, String> params) {, +		parameters.putAll(params);, +		return this;, +	}, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/StatusDetails.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +	public MultiValueMap<String, Object> toParameterMap() {, +		LinkedMultiValueMap<String, Object> parameterMap = new LinkedMultiValueMap<String, Object>();, +			parameterMap.set("lat", latitude.toString());, +			parameterMap.set("long", longitude.toString());, +			parameterMap.set("display_coordinates", "true");, +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +	/**, +	 * Adds a query parameters to the URI, +	 */, +	public URIBuilder queryParams(MultiValueMap<String, String> params) {, +		parameters.putAll(params);, +		return this;, +	}, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/StatusDetails.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +	public MultiValueMap<String, Object> toParameterMap() {, +		LinkedMultiValueMap<String, Object> parameterMap = new LinkedMultiValueMap<String, Object>();, +			parameterMap.set("lat", latitude.toString());, +			parameterMap.set("long", longitude.toString());, +			parameterMap.set("display_coordinates", "true");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/impl/AbstractTwitterOperations.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		return buildUri(path, EMPTY_PARAMETERS);, +	protected URI buildUri(String path, String parameterName, String parameterValue) {, +		MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();, +		parameters.set(parameterName, parameterValue);, +		return buildUri(path, parameters);, +	, +	protected URI buildUri(String path, MultiValueMap<String, String> parameters) {, +		return URIBuilder.fromUri(API_URL_BASE + path).queryParams(parameters).build();, +	private static final LinkedMultiValueMap<String, String> EMPTY_PARAMETERS = new LinkedMultiValueMap<String, String>();, +, +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +	/**, +	 * Adds a query parameters to the URI, +	 */, +	public URIBuilder queryParams(MultiValueMap<String, String> params) {, +		parameters.putAll(params);, +		return this;, +	}, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/StatusDetails.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +	public MultiValueMap<String, Object> toParameterMap() {, +		LinkedMultiValueMap<String, Object> parameterMap = new LinkedMultiValueMap<String, Object>();, +			parameterMap.set("lat", latitude.toString());, +			parameterMap.set("long", longitude.toString());, +			parameterMap.set("display_coordinates", "true");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/impl/AbstractTwitterOperations.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		return buildUri(path, EMPTY_PARAMETERS);, +	protected URI buildUri(String path, String parameterName, String parameterValue) {, +		MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();, +		parameters.set(parameterName, parameterValue);, +		return buildUri(path, parameters);, +	, +	protected URI buildUri(String path, MultiValueMap<String, String> parameters) {, +		return URIBuilder.fromUri(API_URL_BASE + path).queryParams(parameters).build();, +	private static final LinkedMultiValueMap<String, String> EMPTY_PARAMETERS = new LinkedMultiValueMap<String, String>();, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/impl/FriendTemplate.java, +		return restTemplate.getForObject(buildUri("statuses/friends.json", "cursor", "-1"), TwitterProfileUsersList.class).getList();, +		LinkedMultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();, +		parameters.set("cursor", "-1");, +		parameters.set("user_id", String.valueOf(userId));, +		LinkedMultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();, +		parameters.set("cursor", "-1");, +		parameters.set("screen_name", screenName);, +		return restTemplate.getForObject(buildUri("friends/ids.json", "cursor", "-1"), LongIdsList.class).getList();, +		LinkedMultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();, +		parameters.set("cursor", "-1");]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +, +	<section xml:id="section_serviceproviderconfig">, +		<title>Configuring Service Providers</title>, +			Working with the service provider framework starts with configuring the service provider in Spring., +			Spring Social's configuration namespace provides a convenient <code> <![CDATA[<social:service-provider>]]></code> element for declaring a service provider:, +      		<programlisting><![CDATA[, +<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans" , +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xmlns:social="http://www.springframework.org/schema/spring-social", +    xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, +                        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +    <social:service-provider , +        class="org.springframework.social.twitter.connect.TwitterServiceProvider" , +        client-key="..." , +        client-secret="..." />, +</beans>]]>, +			The <code>class</code> attribute specifies the fully-qualified name of the provider implementation., +			This can be any of the service provider implementations that come with Spring Social or a custom implementation., +			Spring Social comes with the following service provider implementations:, +		<itemizedlist>, +			<listitem><para>org.springframework.social.facebook.connect.FacebookServiceProvider</para></listitem>, +			<listitem><para>org.springframework.social.twitter.connect.TwitterServiceProvider</para></listitem>, +			<listitem><para>org.springframework.social.linkedin.connect.LinkedInServiceProvider</para></listitem>, +			<listitem><para>org.springframework.social.tripit.connect.TripItServiceProvider</para></listitem>, +			<listitem><para>org.springframework.social.github.connect.GitHubServiceProvider</para></listitem>, +			<listitem><para>org.springframework.social.gowalla.connect.GowallaServiceProvider</para></listitem>, +		</itemizedlist>, +			The <code>client-key</code> and <code>client-secret</code> attributes specify the key and secret values assigned to your application when you registered it with the provider., +      <section xml:id="section_config_connectionrepository">, +          <title>Connection Repository</title>, +          , +          <para>When a service provider creates a connection, the connection details must be persisted somewhere for future use. The service provider relies on a connection repository for persistence of connection Spring Social comes with <classname>JdbcConnectionRepository</classname>, a connection repository that persists connections to a relational database via JDBC. The following XML shows how to configure a <classname>JdbcConnectionRepository</classname> bean:</para>, +          , +          <programlisting><![CDATA[<bean id="connectionRepository" class="org.springframework.social.connect.jdbc.JdbcConnectionRepository">, +    <constructor-arg ref="dataSource" />, +    <constructor-arg ref="textEncryptor" />, +</bean>]]></programlisting>, +, +          <para><classname>JdbcConnectionRepository</classname> is constructed with a reference to a <classname>DataSource</classname> through which it will communicate with the database and a <interfacename>TextEncryptor</interfacename> that it will use to encrypt/decrypt sensitive connection details (such as access tokens and secrets).</para>, +          , +          <para>The <interfacename>TextEncryptor</interfacename> is defined in Spring Security 3.1 in the <code>org.springframework.security.crypto.encrypt</code> package. Spring Security 3.1 also includes an <classname>Encryptors</classname> class which acts as a factory for common encryptor implementations. For example, to configure a no-op text encryptor (one that doesn't perform any encryption at all):</para>, +, +          <programlisting><![CDATA[<bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />]]></programlisting>, +          , +          <para>Or, to configure a text encryptor that uses standard password-based encryption:</para>, +          , +          <programlisting><![CDATA[<bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="text">, +    <constructor-arg value="password"/>, +    <constructor-arg value="salt"/>    , +</bean>]]></programlisting>, +, +          <para>Note that the ID of the connection repository bean is significant. By default, the <code><![CDATA[<social:service-provider>]]></code> element will assume that the connection repository bean's ID is "connectionRepository". If, however, you give the connection repository bean a different ID, then you'll need to explicitly specify the connection repository when configuring a <code><![CDATA[<social:service-provider>]]></code>:</para>, +, +          <programlisting><![CDATA[<social:service-provider , +              class="org.springframework.social.twitter.connect.TwitterServiceProvider" , +              client-key="..." , +              client-secret="...", +              connection-repository="connectionStorage" />]]></programlisting>, +              , +              , +          <para><code>JdbcConnectionRepository</code> assumes that a <code>Connection</code> table exists and was created as follows:</para>, +          , +<programlisting><![CDATA[create table Connection (id identity,, +			accountId varchar not null,, +			providerId varchar not null,, +			accessToken varchar not null,					, +			secret varchar, , +			refreshToken varchar,, +			primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);]]></programlisting>, +, +          <para>For convenience sake, SQL is available in Spring Social's core module as a resource: /org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql.</para>, +  </section>, +, +  <section xml:id="section_newserviceprovider">, +      <title>Extending Spring Social with custom service providers</title>, +      , +      <para>Even though Spring Social only comes with a handful of service provider implementations, you can easily extend Spring Social's reach into other services by creating a custom service provider implementation.</para>, +      , +      <para>The first step in creating a new service provider implementation is to determine what kind of authorization the service requires. Spring Social provides abstract service provider classes for both OAuth 1 and OAuth 2-based services in <classname>AbstractOAuth1ServiceProvider</classname> and <classname>AbstractOAuth1ServiceProvider</classname>, respectively. If your service uses some authorization mechanism other than OAuth, you may choose to base your service provider on <classname>AbstractServiceProvider</classname> instead.</para>, +      , +      <para>To understand how this works, have a look at how some of the existing service provider implementations have been created. For example, consider <classname>TwitterServiceProvider</classname> as an example of how to develop an OAuth 1-based service provider:</para>, +      , +      <programlisting><![CDATA[package org.springframework.social.twitter.connect;, +public final class TwitterServiceProvider extends AbstractOAuth1ServiceProvider<TwitterOperations> {, +	protected TwitterOperations getApi(String consumerKey, String consumerSecret, String accessToken, String secret) {, +}]]></programlisting>, +      <para>The first thing to note is that <classname>TwitterServiceProvider</classname> extends <classname>AbstractOAuth1ServiceProvider</classname>, parameterized with <interfacename>TwitterOperations</interfacename>. This indicates that <classname>TwitterServiceProvider</classname> is an OAuth 1-based provider and that its service API is a <interfacename>TwitterOperations</interfacename>.</para>, +      , +      <para><classname>TwitterServiceProvider</classname>'s constructor is given the provider's consumer key and secret along with a connection repository for persisting connection details. It calls the super constructor, passing the provider's ID, the connection repository, the consumer key and secret, and an instance of <classname>OAuth1Template</classname> that will be used to perform the authorization calls to Twitter.</para>, +      , +      <para>The <classname>OAuth1Template</classname> itself is constructed with the consumer key and secret, along with Twitter's request token URL, authorization URL, and access token URL. Note that the authorization URL is parameterized and must have a "requestToken" placeholder.</para>, +      , +      <para>In addition to the constructor, a subclass of <classname>AbstractOAuth1ServiceProvider</classname> must also override the <methodname>getApi()</methodname>. This method's job is to return an instance of the service API. In this case, it uses the consumer key and secret and the access token and secret to instantiate a <classname>TwitterTemplate</classname>.</para>, +      , +      <para>If you have a look at some of the other OAuth 1-based service providers in Spring Social, you'll see that they aren't much different than this one, aside from their ID, their OAuth 1 URLs, and their service API.</para>, +      , +      <para>Speaking of the service API, that's the one other thing you'll need to write in order to create a new service provider. In the case of <classname>TwitterServiceProvider</classname>, the service API is defined by the <interfacename>TwitterOperations</interfacename> interface and <classname>TwitterTemplate</classname> implementation of that interface.</para>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.web.client.RestClientException;, +		Map<String, Object> result = getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class);, +		if (result == null) {, +			throw new RestClientException("access token endpoint returned empty result");, +		}, +		return extractAccessGrant(result);]
[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static java.util.Arrays.*;, +import java.util.HashSet;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +	public void connectionStatus() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);				, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		connectionRepository.addConnection(connectionFactory1.createConnection(new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		, +		mockMvc.perform(get("/connect")), +			.andExpect(view().name("connect/status")), +			.andExpect(model().attribute("providerIds", new HashSet<String>(asList("oauth1Provider", "oauth2Provider")))), +			.andExpect(model().attributeExists("connectionMap"));, +		, +		mockMvc.perform(get("/connect/oauth1Provider")), +			.andExpect(view().name("connect/oauth1ProviderConnected")), +			.andExpect(model().attributeExists("connections"));, +		mockMvc.perform(get("/connect/oauth2Provider")), +			.andExpect(view().name("connect/oauth2ProviderConnect"));, +	}, +	, +	@Test, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static java.util.Arrays.*;, +import java.util.HashSet;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +	public void connectionStatus() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);				, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		connectionRepository.addConnection(connectionFactory1.createConnection(new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		, +		mockMvc.perform(get("/connect")), +			.andExpect(view().name("connect/status")), +			.andExpect(model().attribute("providerIds", new HashSet<String>(asList("oauth1Provider", "oauth2Provider")))), +			.andExpect(model().attributeExists("connectionMap"));, +		, +		mockMvc.perform(get("/connect/oauth1Provider")), +			.andExpect(view().name("connect/oauth1ProviderConnected")), +			.andExpect(model().attributeExists("connections"));, +		mockMvc.perform(get("/connect/oauth2Provider")), +			.andExpect(view().name("connect/oauth2ProviderConnect"));, +	}, +	, +	@Test, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubConnectionRepository.java, +		return providerIdConnectionMap;, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static java.util.Arrays.*;, +import java.util.HashSet;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +	public void connectionStatus() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);				, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		connectionRepository.addConnection(connectionFactory1.createConnection(new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		, +		mockMvc.perform(get("/connect")), +			.andExpect(view().name("connect/status")), +			.andExpect(model().attribute("providerIds", new HashSet<String>(asList("oauth1Provider", "oauth2Provider")))), +			.andExpect(model().attributeExists("connectionMap"));]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null);, +	public UserProfile(String name, String firstName, String lastName, String email, String username) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null);, +	public UserProfile(String name, String firstName, String lastName, String email, String username) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfileBuilder.java, +		return new UserProfile(name, firstName, lastName, email, username);]
[+++ b/docs/src/reference/docbook/signin.xml, +					<listitem>, +						<para>, +							If any error occurs while fetching the access token or while fetching the user's profile data, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL., +							The request to the sign in URL will have an "error" query parameter set to "provider" to indicate an error occurred while communicating with the provider., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +						</para>, +					</listitem>, +			<listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow. This involves fetching a request token from the provider and then redirecting to Provider's authentication endpoint.</para>, +				<itemizedlist>, +					<listitem>, +						<para>, +							If any error occurs while fetching the request token, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL., +							The request to the sign in URL will have an "error" query parameter set to "provider" to indicate an error occurred while communicating with the provider., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +						</para>, +					</listitem>, +				</itemizedlist>, +			</listitem>, +						<listitem>, +							<para>, +								If any error occurs when exchanging the request token for an access token or while fetching the user's profile data, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL., +								The request to the sign in URL will have an "error" query parameter set to "provider" to indicate an error occurred while communicating with the provider., +								The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							</para>, +						</listitem>]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.security;, +, +import org.springframework.security.authentication.AuthenticationManager;, +import org.springframework.security.config.annotation.SecurityConfigurerAdapter;, +import org.springframework.security.config.annotation.web.builders.HttpSecurity;, +import org.springframework.security.web.DefaultSecurityFilterChain;, +import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;, +import org.springframework.social.UserIdSource;, +import org.springframework.social.connect.UsersConnectionRepository;, +, +/**, + * Configurer that adds {@link SocialAuthenticationFilter} to Spring Security's filter chain., + * Used with Spring Security 3.2's Java-based configuration support, when overriding WebSecurityConfigurerAdapter#configure(HttpSecurity):, + * , + * <pre>, + * protected void configure(HttpSecurity http) throws Exception {, + *   http., + *     // HTTP security configuration details snipped, + *     .and(), + *        .apply(, + *            new SpringSocialHttpConfigurer(userIdSource(), usersConnectionRepository, authenticationServiceLocator), + *         );, + * }, + * </pre>, + * , + * @author Craig Walls, + */, +public class SpringSocialConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> {, +, +	private final UserIdSource userIdSource;, +	, +	private final UsersConnectionRepository usersConnectionRepository;, +	, +	private final SocialAuthenticationServiceLocator authServiceLocator;, +, +	private SocialUserDetailsService socialUsersDetailsService;, +, +	/**, +	 * Constructs a SpringSocialHttpConfigurer., +	 * @param userIdSource A {@link UserIdSource}., +	 * @param usersConnectionRepository A {@link UsersConnectionRepository}., +	 * @param authServiceLocator A {@link SocialAuthenticationServiceLocator}., +	 */, +	public SpringSocialConfigurer(, +			UserIdSource userIdSource, , +			UsersConnectionRepository usersConnectionRepository, , +			SocialAuthenticationServiceLocator authServiceLocator,, +			SocialUserDetailsService socialUsersDetailsService) {, +		this.userIdSource = userIdSource;, +		this.usersConnectionRepository = usersConnectionRepository;, +		this.authServiceLocator = authServiceLocator;, +		this.socialUsersDetailsService = socialUsersDetailsService;, +	}, +	, +	@Override, +	public void configure(HttpSecurity http) throws Exception {, +		http.authenticationProvider(, +				new SocialAuthenticationProvider(usersConnectionRepository, socialUsersDetailsService)), +			.addFilterBefore(, +				new SocialAuthenticationFilter(http.getSharedObject(AuthenticationManager.class), userIdSource, usersConnectionRepository, authServiceLocator), , +				AbstractPreAuthenticatedProcessingFilter.class);, +	}, +	, +}, +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.security;]
[+++ b/docs/src/reference/docbook/connecting.xml, +			Each of the Spring Social provider modules comes with an implementation of <interfacename>ConnectionFactory</interfacename> for that module's provider:, +			<listitem><para>Spring Social Twitter: <classname>TwitterConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social Facebook: <classname>FacebookConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social LinkedIn: <classname>LinkedInConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social TripIt: <classname>TripItConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social GitHub: <classname>GitHubConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social Gowalla: <classname>GowallaConnectionFactory</classname></para></listitem>, +++ b/docs/src/reference/docbook/connecting.xml, +			Each of the Spring Social provider modules comes with an implementation of <interfacename>ConnectionFactory</interfacename> for that module's provider:, +			<listitem><para>Spring Social Twitter: <classname>TwitterConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social Facebook: <classname>FacebookConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social LinkedIn: <classname>LinkedInConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social TripIt: <classname>TripItConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social GitHub: <classname>GitHubConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social Gowalla: <classname>GowallaConnectionFactory</classname></para></listitem>, +++ b/docs/src/reference/docbook/overview.xml, +					Each of the provider modules transitively depend on Jackson 1.8.1, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. , +  			<para>, +  				Note that each of the provider modules will evolve and release on a different schedule than Spring Social., +  				Consequently, the version numbers for any given provider module may not align with Spring Social or any other provider module., +  			</para>, +++ b/docs/src/reference/docbook/connecting.xml, +			Each of the Spring Social provider modules comes with an implementation of <interfacename>ConnectionFactory</interfacename> for that module's provider:, +			<listitem><para>Spring Social Twitter: <classname>TwitterConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social Facebook: <classname>FacebookConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social LinkedIn: <classname>LinkedInConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social TripIt: <classname>TripItConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social GitHub: <classname>GitHubConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social Gowalla: <classname>GowallaConnectionFactory</classname></para></listitem>, +++ b/docs/src/reference/docbook/overview.xml, +					Each of the provider modules transitively depend on Jackson 1.8.1, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. , +  			<para>, +  				Note that each of the provider modules will evolve and release on a different schedule than Spring Social., +  				Consequently, the version numbers for any given provider module may not align with Spring Social or any other provider module., +  			</para>, +++ b/docs/src/reference/resources/images/sign-in-with-twitter.png, +++ b/docs/src/reference/docbook/connecting.xml, +			Each of the Spring Social provider modules comes with an implementation of <interfacename>ConnectionFactory</interfacename> for that module's provider:, +			<listitem><para>Spring Social Twitter: <classname>TwitterConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social Facebook: <classname>FacebookConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social LinkedIn: <classname>LinkedInConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social TripIt: <classname>TripItConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social GitHub: <classname>GitHubConnectionFactory</classname></para></listitem>, +			<listitem><para>Spring Social Gowalla: <classname>GowallaConnectionFactory</classname></para></listitem>, +++ b/docs/src/reference/docbook/overview.xml, +					Each of the provider modules transitively depend on Jackson 1.8.1, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. , +  			<para>, +  				Note that each of the provider modules will evolve and release on a different schedule than Spring Social., +  				Consequently, the version numbers for any given provider module may not align with Spring Social or any other provider module., +  			</para>, +++ b/docs/src/reference/resources/images/sign-in-with-twitter.png, +++ b/docs/src/reference/resources/images/twitter-authorize.png]
[+++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create a ServiceProvider that allows users to authorize with the provider and obtain Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, +		<title>Creating a ServiceProvider</title>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/NotAuthorizedException.java, + * Indicates the client is not authorized to invoke the API., + * This can occur:, + * - when invoking an API operation with a revoked or expired access token, + * - when invoking an operation that requires authorization without providing authorization credentials.]
[+++ b/pom.xml, +	<groupId>org.springframework.social</groupId>, +	<version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<groupId>org.springframework.social</groupId>, +	<version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/src/assembly/distribution.xml, +				<include>org.springframework.social:spring-social</include>, +				<include>org.springframework.social:spring-social</include>]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/samples/showcase/db/Account.sql" />, +		<jdbc:script location="classpath:/org/springframework/social/samples/showcase/db/data.sql" />, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/samples/showcase/db/Account.sql" />, +		<jdbc:script location="classpath:/org/springframework/social/samples/showcase/db/data.sql" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +        	<jdbc-user-service data-source-ref="dataSource" , +        					   users-by-username-query="select username, password, true from Account where username = ?", +        					   authorities-by-username-query="select username, 'ROLE_USER' from Account where username = ?"/>, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/Account.sql, +create table Account (	id identity,, +						username varchar unique,, +						password varchar not null,, +						firstName varchar not null, , +						lastName varchar not null,, +						email varchar(320) not null unique,, +						primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig', 'Walls', 'cwalls@vmware.com');, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/data.xml, +		<jdbc:script location="classpath:/org/springframework/social/samples/showcase/db/Account.sql" />, +		<jdbc:script location="classpath:/org/springframework/social/samples/showcase/db/data.sql" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +        	<jdbc-user-service data-source-ref="dataSource" , +        					   users-by-username-query="select username, password, true from Account where username = ?", +        					   authorities-by-username-query="select username, 'ROLE_USER' from Account where username = ?"/>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/twitter/twitter.jsp, +<c:url var="tweetUrl" value="/twitter/tweet" />, +<sf:form action="${tweetUrl}" method="post" modelAttribute="tweetForm">, +		<b><c:out value="${connections[0]}" /></b>, +		<input type="hidden" name="screenName" value="<c:out value="${connections[0]}" />" />]
[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/springframework/social/core/SocialProviderOperations.java, +package org.springframework.social.core;, +, +public interface SocialProviderOperations {, +	String getProfileId();, +, +	String getProfileUrl();, +, +	void setStatus(String status);, +}, +++ /dev/null, +++ b/src/main/java/org/springframework/social/core/SocialProviderOperations.java, +package org.springframework.social.core;, +, +public interface SocialProviderOperations {, +	String getProfileId();, +, +	String getProfileUrl();, +, +	void setStatus(String status);, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface FacebookOperations extends SocialProviderOperations {, +++ /dev/null, +++ b/src/main/java/org/springframework/social/core/SocialProviderOperations.java, +package org.springframework.social.core;, +, +public interface SocialProviderOperations {, +	String getProfileId();, +, +	String getProfileUrl();, +, +	void setStatus(String status);, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface FacebookOperations extends SocialProviderOperations {, +++ b/src/main/java/org/springframework/social/linkedin/LinkedInOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface LinkedInOperations extends SocialProviderOperations {, +++ /dev/null, +++ b/src/main/java/org/springframework/social/core/SocialProviderOperations.java, +package org.springframework.social.core;, +, +public interface SocialProviderOperations {, +	String getProfileId();, +, +	String getProfileUrl();, +, +	void setStatus(String status);, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface FacebookOperations extends SocialProviderOperations {, +++ b/src/main/java/org/springframework/social/linkedin/LinkedInOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface LinkedInOperations extends SocialProviderOperations {, +++ b/src/main/java/org/springframework/social/tripit/TripItOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface TripItOperations extends SocialProviderOperations {, +++ /dev/null, +++ b/src/main/java/org/springframework/social/core/SocialProviderOperations.java, +package org.springframework.social.core;, +, +public interface SocialProviderOperations {, +	String getProfileId();, +, +	String getProfileUrl();, +, +	void setStatus(String status);, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface FacebookOperations extends SocialProviderOperations {, +++ b/src/main/java/org/springframework/social/linkedin/LinkedInOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface LinkedInOperations extends SocialProviderOperations {, +++ b/src/main/java/org/springframework/social/tripit/TripItOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface TripItOperations extends SocialProviderOperations {, +++ b/src/main/java/org/springframework/social/twitter/TwitterOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface TwitterOperations extends SocialProviderOperations {]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +          <para>Although the service providers and <classname>ConnectController</classname> handle much of the details of working with OAuth, if you want to work with OAuth directly, you can do so through <classname>OAuth1Template</classname> and <classname>OAuth2Template</classname>.</para>, +          , +          <para>To directly create an instance of <classname>OAuth1Template</classname>, you must instantiate it with the details of the OAuth 1 service given as constructor arguments. For example, to ready an <classname>OAuth1Template</classname> for use with Twitter:</para>, +          , +          <programlisting><![CDATA[String consumerKey = "...]]><emphasis>Twitter consumer key</emphasis><![CDATA[...";, +String consumerSecret = "...]]><emphasis>Twitter consumer secret</emphasis><![CDATA[...";, +String requestTokenUrl = "https://api.twitter.com/oauth/request_token";, +String authorizeUrl = "https://api.twitter.com/oauth/authorize?oauth_token={request_token}";, +String accessTokenUrl = "https://api.twitter.com/oauth/access_token";, +OAuth1Template oauth1Template = new OAuth1Template(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl,, +		accessTokenUrl);]]></programlisting>, +		, +		  <para>Or, if you have an OAuth 1 service provider (such as <classname>TwitterServiceProvider</classname>), it's even easier to call the service provider's <methodname>getOAuth1Operations()</methodname> method:</para>, +		  , +          <programlisting><![CDATA[OAuth1Operations oauth1Template = twitterProvider.getOAuth1Operations();]]></programlisting>, +		            , +		  <para>Similarly, you can create an <classname>OAuth2Template</classname> by calling it's constructor with the service's OAuth 2 details. For example, here's how you may create a Facebook-ready instance of <classname>OAuth2Template</classname>:</para>, +		  , +          <programlisting><![CDATA[String clientId = "...]]><emphasis>Facebook API Key</emphasis><![CDATA[...";, +String clientSecret = "...]]><emphasis>Facebook App Secret</emphasis><![CDATA[...";, +String authorizeUrl = "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}";, +String accessTokenUrl = "https://graph.facebook.com/oauth/access_token";, +OAuth2Template oauth2 = new OAuth2Template(clientId, clientSecret, authorizeUrl, accessTokenUrl);]]></programlisting>, +  		, +  		  <para>Or you can easily retrieve an <classname>OAuth2Template</classname> from an OAuth 2 service provider by calling its <methodname>getOAuth2Operations()</methodname> method:</para>, +  		  , +  		  <programlisting><![CDATA[OAuth2Operations oauth2Template = facebookProvider.getOAuth2Operations();]]></programlisting>, +          , +          <para><classname>OAuth1Template</classname> and <classname>OAuth2Template</classname> implement the <interfacename>OAuth1Operations</interfacename> and <interfacename>OAuth2Operations</interfacename> interfaces, respectively. Through these interfaces, you may participate in the "OAuth Dance".</para>, +          , +          <section>, +              <title><interfacename>OAuth1Operations</interfacename></title>, +              , +              <para>The <interfacename>OAuth1Operations</interfacename> interface defines three methods, as follows:</para>, +              , +              <programlisting><![CDATA[public interface OAuth1Operations {, +, +	OAuthToken fetchNewRequestToken(String callbackUrl);, +	String buildAuthorizeUrl(String requestToken);, +	OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken);, +	, +}]]></programlisting>, +              , +              <para>To begin the OAuth 1 process, call <methodname>fetchNewRequestToken()</methodname>, passing in the callback URL. <methodname>fetchNewRequestToken()</methodname> will return an <classname>OAuthToken</classname> containing the request token value and secret.</para>, +              , +              <para>At this point in the OAuth 1 dance, you should redirect the user's browser to the service's authorization URL. The <methodname>buildAuthorizeUrl()</methodname> method builds that authorization URL for you, given the request token value (which can be obtained by calling <classname>OAuthToken</classname>'s <methodname>getValue()</methodname> method).</para>, +              , +              <para>After the user agrees to grant your application access, the service will redirect the user's browser back to the callback URL you gave to <methodname>fetchNewRequestToken()</methodname> with an <code>oauth_verifier</code> parameter<footnote><para>The <code>oauth_verifier</code> parameter is only applicable for OAuth 1.0a-based services. OAuth 1.0-based services will not give back a verifier. In that case, assume a <code>null</code> value for the verifier.</para></footnote>.</para>, +              , +              <para>To complete the OAuth dance, create an instance of <classname>AuthorizedRequestToken</classname> to contain the request token and verifier and pass it as a parameter to <methodname>exchangeForAccessToken()</methodname>:</para>, +              , +              <programlisting><![CDATA[AuthorizedRequestToken authorizedRequestToken = new AuthorizedRequestToken(requestToken, verifier);, +OAuthToken accessToken = oauth1Template.exchangeForAccessToken(authorizedRequestToken);]]></programlisting>, +, +              <para>The <methodname>exchangeForAccessToken()</methodname> method will return another <classname>OAuthToken</classname>, this time containing the access token and secret. This access token may be used to interact with the service on behalf of the user and may be stored away for future use.</para>, +              , +              <para>Again, the operations afforded by <interfacename>OAuth1Operations</interfacename> are lower-level OAuth operations. <classname>ConnectController</classname> handles these interactions internally so that you shouldn't need to deal directly with the <interfacename>OAuth1Operations</interfacename> interface.</para>, +          </section>, +, +          <section>, +              <title><interfacename>OAuth2Operations</interfacename></title>, +              , +              <para>The OAuth 2 dance is simpler than the OAuth 1 dance. Thus, the <interfacename>OAuth2Operations</interfacename> interface is slightly simpler than its OAuth 1 counterpart. <interfacename>OAuth2Operations</interfacename> is defined as follows:</para>, +              , +              <programlisting><![CDATA[public interface OAuth2Operations {, +, +    String buildAuthorizeUrl(String redirectUri, String scope);, +    AccessGrant exchangeForAccess(String authorizationGrant, String redirectUri);, +, +}]]></programlisting>, +            , +              <para>OAuth 2 doesn't require (or even support) request tokens. Therefore, the first step in the OAuth 2 dance is to redirect the user to the service's authorization URL. <interfacename>OAuth2Operations</interfacename>' <methodname>buildAuthorizeUrl()</methodname> can provide you with that URL given your application's redirect URI and an optional scope value.</para>, +              , +              <para>The redirect URI is significant in that it must match the application's configuration with the service itself. When you register your application with a service provider, you must specify a redirect URI or some base application URI. If the redirect URI given in the authorization URL does not match, the provider may refuse to grant access to your application.</para>, +              , +              <para>The scope value is a comma-delimited <classname>String</classname> of values that specifies what level of access the application is asking permission for. The values given will vary by provider. Some providers, such as Facebook, have a rich and fine-grained set of scope permissions, while some other providers don't support scoping at all. Consult the service's document for details on what permissions may be given as the scope parameter. Scope is optional, however, so leaving it blank or passing in <code>null</code> effectively asks for the default scope (which is also defined by the service).</para>, +              , +              <para>After the user agrees to grant your application access, the service will redirect them back to the redirect URI with a <code>code</code> parameter. This code may be exchanged for an access token by passing it to <interfacename>OAuth2Operations</interfacename>' <methodname>exchangeForAccess()</methodname> method, along with the redirect URI.</para>, +              , +              <para>The <methodname>exchangeForAccess()</methodname> method will complete the OAuth 2 dance, returning an <classname>AccessGrant</classname> which contains an access token useful for interacting with the service API. It may also contain a refresh token, useful for refreshing an expired access token.</para>, +              , +              <para>It bears repeating that working directly with a service through <interfacename>OAuth2Operations</interfacename> is a low-level effort. It is simpler to leverage <classname>ConnectController</classname> to perform the OAuth authorization flow than to roll your own implementation.</para>, +          </section>]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +			String consumerKey, String consumerSecret, String connectionRepositoryBean) {, +		providerBeanBuilder.addConstructorArgValue(consumerKey);, +		providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +			String consumerKey, String consumerSecret, String connectionRepositoryBean) {, +		providerBeanBuilder.addConstructorArgValue(consumerKey);, +		providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +			String consumerKey, String consumerSecret, String connectionRepositoryBean) {, +		providerBeanBuilder.addConstructorArgValue(consumerKey);, +		providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, FacebookServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +			String consumerKey, String consumerSecret, String connectionRepositoryBean) {, +		providerBeanBuilder.addConstructorArgValue(consumerKey);, +		providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, FacebookServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GitHubProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, GitHubServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +			String consumerKey, String consumerSecret, String connectionRepositoryBean) {, +		providerBeanBuilder.addConstructorArgValue(consumerKey);, +		providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, FacebookServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GitHubProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, GitHubServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GowallaProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, GowallaServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +			String consumerKey, String consumerSecret, String connectionRepositoryBean) {, +		providerBeanBuilder.addConstructorArgValue(consumerKey);, +		providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, FacebookServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GitHubProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, GitHubServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GowallaProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, GowallaServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryElementParser.java, +import org.springframework.security.crypto.encrypt.Encryptors;, +import org.springframework.social.provider.jdbc.JdbcConnectionRepository;, +.genericBeanDefinition(JdbcConnectionRepository.class);, +			beanBuilder.addConstructorArgValue(Encryptors.noOpText());, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +			String consumerKey, String consumerSecret, String connectionRepositoryBean) {, +		providerBeanBuilder.addConstructorArgValue(consumerKey);, +		providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, FacebookServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GitHubProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, GitHubServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GowallaProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, GowallaServiceProvider.class.getName(),, +				element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, +				element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryElementParser.java, +import org.springframework.security.crypto.encrypt.Encryptors;, +import org.springframework.social.provider.jdbc.JdbcConnectionRepository;, +.genericBeanDefinition(JdbcConnectionRepository.class);, +			beanBuilder.addConstructorArgValue(Encryptors.noOpText());, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +			String consumerKey, String consumerSecret, String connectionRepositoryBean) {, +		providerBeanBuilder.addConstructorArgValue(consumerKey);, +		providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +		return registerServiceProviderBean(parserContext, name, FacebookServiceProvider.class.getName(),]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.RC2, +role=buildmaster]
[+++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/build.gradle, +    hamcrestVersion = '1.2.1', +    mockitoVersion = '1.9.0', +    springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", +		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", +        testCompile "junit:junit-dep:$junitVersion", +        testCompile "org.mockito:mockito-core:$mockitoVersion", +        testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", +        testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web;, +, +import static java.util.Arrays.*;, +import static org.hamcrest.beans.SamePropertyValuesAs.*;, +import static org.junit.Assert.*;, +import static org.springframework.social.connect.web.test.StubOAuthTemplateBehavior.*;, +import static org.springframework.test.web.server.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.server.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.server.setup.MockMvcBuilders.*;, +, +import java.util.HashSet;, +import java.util.List;, +, +import org.junit.Ignore;, +import org.junit.Test;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +import org.springframework.social.connect.web.test.StubOAuth1ConnectionFactory;, +import org.springframework.social.connect.web.test.StubOAuth2ConnectionFactory;, +import org.springframework.social.connect.web.test.StubOAuthTemplateBehavior;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.test.web.server.MockMvc;, +, +, +public class ConnectControllerTest {, +	, +	private static final String OAUTH2_AUTHORIZE_URL = "https://someprovider.com/oauth/authorize?client_id=clientId&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A80%2Fconnect%2Foauth2Provider";, +, +	@Test, +	@Ignore("Revisit this and assert/fix expectations"), +	public void connect_noSuchProvider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);]
[+++ b/pom.xml, +, +			<plugin>, +				<groupId>com.agilejava.docbkx</groupId>, +				<artifactId>docbkx-maven-plugin</artifactId>, +				<version>2.0.6</version>, +				<executions>, +					<execution>, +						<goals>, +							<goal>generate-html</goal>, +							<goal>generate-pdf</goal>, +						</goals>, +						<phase>package</phase>, +					</execution>, +				</executions>, +				<dependencies>, +					<dependency>, +						<groupId>org.docbook</groupId>, +						<artifactId>docbook-xml</artifactId>, +						<version>4.4</version>, +						<scope>runtime</scope>, +					</dependency>, +				</dependencies>, +				<configuration>, +					<includes>index.xml</includes>, +					<xincludeSupported>true</xincludeSupported>, +					<foCustomization>${project.basedir}/src/docbkx/resources/xsl/fopdf.xsl</foCustomization>, +					<!-- original spring-build fopdf xsl, +					<foCustomization>src/docbkx/resources/xsl/pdf/fopdf.xsl</foCustomization> -->, +					<htmlStylesheet>css/html.css</htmlStylesheet>, +					<!-- produce single-page html output -->, +					<chunkedOutput>false</chunkedOutput>, +					<htmlCustomization>${project.basedir}/src/docbkx/resources/xsl/html.xsl</htmlCustomization>, +					<!-- produce multi-page html output, +					<chunkedOutput>false</chunkedOutput>, +					<htmlCustomization>${project.basedir}/src/docbkx/resources/xsl/html_chunk.xsl</htmlCustomization> -->, +					<entities>, +						<entity>, +							<name>version</name>, +							<value>${pom.version}</value>, +						</entity>, +					</entities>, +					<postProcess>, +						<copy todir="${project.basedir}/target/site/reference">, +							<fileset dir="${project.basedir}/target/docbkx">, +								<include name="**/*.html" />, +								<include name="**/*.pdf" />, +							</fileset>, +						</copy>, +						<copy todir="${project.basedir}/target/site/reference/html">, +							<fileset dir="${project.basedir}/src/docbkx/resources">, +								<include name="**/*.css" />, +								<include name="**/*.png" />, +								<include name="**/*.gif" />, +								<include name="**/*.jpg" />, +							</fileset>, +						</copy>, +						<move file="${project.basedir}/target/site/reference/pdf/index.pdf", +							tofile="${project.basedir}/target/site/reference/pdf/spring-social-reference.pdf", +							failonerror="false" />, +					</postProcess>, +				</configuration>, +			</plugin>, +			<plugin>, +				<artifactId>maven-javadoc-plugin</artifactId>, +				<version>2.5</version>, +				<executions>, +					<execution>, +						<id>aggregate</id>, +						<goals>, +							<goal>aggregate</goal>, +						</goals>, +						<phase>package</phase>, +						<configuration>, +							<javadoc:aggregate>true</javadoc:aggregate>, +							<breakiterator>true</breakiterator>, +							<header>Spring Social</header>, +							<source>1.5</source>, +							<quiet>true</quiet>, +							<javadocDirectory>${project.basedir}/src/main/javadoc</javadocDirectory>, +							<overview>${project.basedir}/src/main/javadoc/overview.html</overview>, +							<stylesheetfile>${project.basedir}/src/main/javadoc/spring-javadoc.css</stylesheetfile>, +							<!-- copies doc-files subdirectory which contains image resources -->, +							<docfilessubdirs>true</docfilessubdirs>, +							<groups>, +								<group>, +									<title>Spring Social</title>, +									<packages>org.springframework.social:org.springframework.social.*</packages>, +								</group>, +							</groups>, +							<excludePackageNames>org.springframework.social.samples</excludePackageNames>, +							<links>, +								<link>http://static.springframework.org/spring/docs/3.0.3.RELEASE/javadoc-api</link>, +								<link>http://java.sun.com/javase/6/docs/api</link>, +							</links>, +						</configuration>, +					</execution>, +				</executions>, +			</plugin>, +			<plugin><!--]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +import java.util.Set;, +, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +	, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +import java.util.Set;, +, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +@SuppressWarnings("serial"), +public final class NoSuchServiceProviderConnectionException extends RuntimeException {, +	, +	private final ServiceProviderConnectionKey connectionKey;, +, +	public NoSuchServiceProviderConnectionException(ServiceProviderConnectionKey connectionKey) {, +		this.connectionKey = connectionKey;, +	}, +, +	public ServiceProviderConnectionKey getConnectionKey() {, +		return connectionKey;, +	}, +	, +}, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +import java.util.Set;, +, +	Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +@SuppressWarnings("serial"), +public final class NoSuchServiceProviderConnectionException extends RuntimeException {, +	, +	private final ServiceProviderConnectionKey connectionKey;, +, +	public NoSuchServiceProviderConnectionException(ServiceProviderConnectionKey connectionKey) {, +		this.connectionKey = connectionKey;, +	}, +, +	public ServiceProviderConnectionKey getConnectionKey() {, +		return connectionKey;, +	}, +	, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +import java.sql.ResultSet;, +import java.sql.SQLException;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +import org.springframework.dao.DataAccessException;, +import org.springframework.jdbc.core.ResultSetExtractor;, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +	public Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds) {, +		MapSqlParameterSource parameters = new MapSqlParameterSource();, +		parameters.addValue("providerId", providerId);]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +package org.springframework.social.connect.web;, +, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.Set;, +, +import org.junit.Test;, +import org.mockito.ArgumentMatcher;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.UsersConnectionRepository;, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth1ConnectionFactory;, +import org.springframework.social.connect.support.OAuth2Connection;, +import org.springframework.social.connect.support.OAuth2ConnectionFactory;, +import org.springframework.social.oauth1.AuthorizedRequestToken;, +import org.springframework.social.oauth1.OAuth1Operations;, +import org.springframework.social.oauth1.OAuth1Parameters;, +import org.springframework.social.oauth1.OAuth1ServiceProvider;, +import org.springframework.social.oauth1.OAuth1Version;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.oauth2.GrantType;, +import org.springframework.social.oauth2.OAuth2Operations;, +import org.springframework.social.oauth2.OAuth2Parameters;, +import org.springframework.social.oauth2.OAuth2ServiceProvider;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.ServletWebRequest;, +import org.springframework.web.servlet.view.RedirectView;, +, +public class ProviderSignInControllerTest {, +, +	@Test, +	public void oauth1Callback_noMatchingUser() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth1provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		, +		MockHttpServletRequest nativeRequest = new MockHttpServletRequest();, +		nativeRequest.addParameter("verifier", "verifier");, +		ServletWebRequest request = new ServletWebRequest(nativeRequest);, +		RedirectView redirect = controller.oauth1Callback("oauth1provider", request);, +		assertEquals("/signup", redirect.getUrl());, +		ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) request.getAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +		assertNotNull(signInAttempt);, +		// TODO: Assert attempt contents, +	}, +, +	@Test, +	public void oauth1Callback_noMatchingUser_customSignUpUrl() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth1provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		controller.setSignUpUrl("/register");, +, +		MockHttpServletRequest nativeRequest = new MockHttpServletRequest();, +		nativeRequest.addParameter("verifier", "verifier");, +		ServletWebRequest request = new ServletWebRequest(nativeRequest);, +		RedirectView redirect = controller.oauth1Callback("oauth1provider", request);, +		assertEquals("/register", redirect.getUrl());, +		ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) request.getAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +		assertNotNull(signInAttempt);, +		// TODO: Assert attempt contents, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_noOriginalUrl() {, +		performOAuth1Callback(null, null);, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_noOriginalUrl_withPostSignInUrl() {, +		performOAuth1Callback(null, "/postSignIn");, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_withOriginalUrl() {, +		performOAuth1Callback("/original", null);, +	}, +	, +	@Test, +	public void oauth2Callback_noMatchingUser() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth2provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */, +public class AccountNotConnectedException extends SocialException {, +	private static final long serialVersionUID = 1L;, +, +	public AccountNotConnectedException(String message) {, +		super(message);, +	}, +, +	public AccountNotConnectedException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token, for example)., + * , + * @author Craig Walls, + */]
[+++ b/docs/src/reference/docbook/implementing.xml, +	<section id="service-providers-implementing-api">, +		<title>Developing a Java binding to the provider's Service API</title>, +		<para>, +			Spring Social favors the development of strongly-typed Java bindings to external service provider APIs., +			This provides a simple, domain oriented interface for Java applications to use to consume the API., +			When adding support for a new service provider, if no suitable Java binding exists you'll need to develop one., +			If one already exists, such as Twitter4j for example, it is possible to integrate it into the framework. , +		</para>, +		<section id="service-provider-implementing-api-new">, +			<title>Implementing a new Java API binding</title>, +		</section>, +		<section id="service-provider-implementing-api-integrate">, +			<title>Integrating an existing Java API binding</title>, +		</section>		, +	</section>, +++ b/docs/src/reference/docbook/implementing.xml, +	<section id="service-providers-implementing-api">, +		<title>Developing a Java binding to the provider's Service API</title>, +		<para>, +			Spring Social favors the development of strongly-typed Java bindings to external service provider APIs., +			This provides a simple, domain oriented interface for Java applications to use to consume the API., +			When adding support for a new service provider, if no suitable Java binding exists you'll need to develop one., +			If one already exists, such as Twitter4j for example, it is possible to integrate it into the framework. , +		</para>, +		<section id="service-provider-implementing-api-new">, +			<title>Implementing a new Java API binding</title>, +		</section>, +		<section id="service-provider-implementing-api-integrate">, +			<title>Integrating an existing Java API binding</title>, +		</section>		, +	</section>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +	<title>Service provider 'connect' framework'</title>]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationToken.java, +		if (connection.getExpireTime() != null && connection.getExpireTime() < System.currentTimeMillis()) {, +			throw new IllegalArgumentException("connection.expireTime < currentTime");, +		}]
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +		request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +		request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +		request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.getCommonOAuthParameters(consumerKey);, +		String authHeader = SigningUtils.buildAuthorizationHeader(tokenUrl, oauthParameters,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +		request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.getCommonOAuthParameters(consumerKey);, +		String authHeader = SigningUtils.buildAuthorizationHeader(tokenUrl, oauthParameters,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/SigningUtils.java, +package org.springframework.security.oauth.client.oauth1;, +, +import java.io.UnsupportedEncodingException;, +import java.net.URI;, +import java.net.URLDecoder;, +import java.net.URLEncoder;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.UUID;, +, +import javax.crypto.Mac;, +import javax.crypto.spec.SecretKeySpec;, +, +import org.apache.commons.codec.binary.Base64;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.MediaType;, +import org.springframework.security.oauth.client.ClientRequest;, +, +class SigningUtils {, +	public static String buildAuthorizationHeader(ClientRequest request, String consumerKey, String consumerSecret,, +			OAuthToken accessToken) {, +		Map<String, String> oauthParameters = getCommonOAuthParameters(consumerKey);, +		oauthParameters.put("oauth_token", accessToken.getValue());, +		Map<String, String> aditionalParameters = extractBodyParameters(request.getHeaders().getContentType(),, +				request.getBody());, +		Map<String, String> queryParameters = extractParameters(request.getUri().getQuery());, +		aditionalParameters.putAll(queryParameters);, +		String baseRequestUrl = getBaseUrlWithoutPortOrQueryString(request.getUri());, +		return SigningUtils.buildAuthorizationHeader(baseRequestUrl, oauthParameters, aditionalParameters,, +				request.getMethod(), consumerSecret, accessToken.getSecret());, +	}, +, +	public static String buildAuthorizationHeader(String targetUrl, Map<String, String> oauthParameters,, +			Map<String, String> additionalParameters, HttpMethod method, String consumerSecret, String tokenSecret) {, +		String baseString = buildBaseString(targetUrl, oauthParameters, additionalParameters, method);, +		String signature = calculateSignature(baseString, consumerSecret, tokenSecret);, +		String header = "OAuth ";, +		for (String key : oauthParameters.keySet()) {, +			header += key + "=\"" + encode(oauthParameters.get(key)) + "\", ";, +		}, +		header += "oauth_signature=\"" + encode(signature) + "\"";, +		return header;, +	}, +, +	public static Map<String, String> getCommonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		oauthParameters.put("oauth_timestamp", String.valueOf(System.currentTimeMillis() / 1000));, +		oauthParameters.put("oauth_nonce", UUID.randomUUID().toString());, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +, +	private static String buildBaseString(String targetUrl, Map<String, String> parameters,, +			Map<String, String> additionalParameters, HttpMethod method) {, +		Map<String, String> allParameters = new HashMap<String, String>(parameters);, +		allParameters.putAll(additionalParameters);, +		String baseString = method.toString() + "&" + encode(targetUrl) + "&";, +		List<String> keys = new ArrayList<String>(allParameters.keySet());, +		Collections.sort(keys);, +		String separator = "";, +		for (String key : keys) {, +			String parameterValue = allParameters.get(key);, +			baseString += encode(separator + key + "=" + encode(parameterValue));, +			separator = "&";, +		}, +		return baseString;, +	}, +, +	private static String calculateSignature(String baseString, String consumerSecret, String tokenSecret) {, +		String key = consumerSecret + "&" + (tokenSecret == null ? "" : tokenSecret);, +		return sign(baseString, key);, +	}, +, +	private static String sign(String signatureBaseString, String key) {, +		try {]
[+++ b/src/dist/changelog.txt, +   * Handle OAuth 2 authorization callback errors per section 4.1.2.1 of, +     the OAuth 2 specification. (SOCIAL-358)]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/reference/docbook/signin.xml, +, +		, +			<note>, +				<para>, +					Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>., +					Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow., +					The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above., +				</para>, +			</note>, +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/reference/docbook/signin.xml, +, +		, +			<note>, +				<para>, +					Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>., +					Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow., +					The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above., +				</para>, +			</note>, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdWithConnection(Connection), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/reference/docbook/signin.xml, +, +		, +			<note>, +				<para>, +					Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>., +					Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow., +					The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above., +				</para>, +			</note>, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	 * Find the id of the <i>single</i> user that has the given {@link Connection}., +	 * Returns null if there is not exactly one local user connected to the provider user., +	String findUserIdWithConnection(Connection<?> connection);, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/reference/docbook/signin.xml, +, +		, +			<note>, +				<para>, +					Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>., +					Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow., +					The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above., +				</para>, +			</note>, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	 * Find the id of the <i>single</i> user that has the given {@link Connection}., +	 * Returns null if there is not exactly one local user connected to the provider user., +	String findUserIdWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import org.springframework.dao.IncorrectResultSizeDataAccessException;, +	 * @see #findUserIdWithConnection(Connection), +	public String findUserIdWithConnection(Connection<?> connection) {, +		try {, +			return jdbcTemplate.queryForObject("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +		} catch (IncorrectResultSizeDataAccessException e) {, +			if (e.getActualSize() == 0) {, +					return newUserId;, +			return null;, +		}, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/reference/docbook/signin.xml, +, +		, +			<note>, +				<para>, +					Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>., +					Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow., +					The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above., +				</para>, +			</note>, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +	 * Find the id of the <i>single</i> user that has the given {@link Connection}., +	 * Returns null if there is not exactly one local user connected to the provider user., +	String findUserIdWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import org.springframework.dao.IncorrectResultSizeDataAccessException;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, +	AUTHORIZATION_CODE,, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is, +	IMPLICIT_GRANT, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, +	AUTHORIZATION_CODE,, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is, +	IMPLICIT_GRANT, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		if (grantType == GrantType.AUTHORIZATION_CODE) {, +		} else if (grantType == GrantType.IMPLICIT_GRANT) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, +	AUTHORIZATION_CODE,, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is, +	IMPLICIT_GRANT, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		if (grantType == GrantType.AUTHORIZATION_CODE) {, +		} else if (grantType == GrantType.IMPLICIT_GRANT) {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook;, +, +import org.springframework.social.facebook.comment.CommentOperations;, +import org.springframework.social.facebook.event.EventOperations;, +import org.springframework.social.facebook.feed.FeedOperations;, +import org.springframework.social.facebook.friend.FriendOperations;, +import org.springframework.social.facebook.graph.GraphApi;, +import org.springframework.social.facebook.group.GroupOperations;, +import org.springframework.social.facebook.like.LikeOperations;, +import org.springframework.social.facebook.media.MediaOperations;, +import org.springframework.social.facebook.places.PlacesOperations;, +import org.springframework.social.facebook.user.UserOperations;, +, +, +/**, + * Interface specifying a basic set of operations for interacting with Facebook., + * Implemented by {@link FacebookTemplate}. Not often used directly, but a, + * useful option to enhance testability, as it can easily be mocked or stubbed., + * @author Craig Walls, + */, +public interface FacebookApi extends GraphApi {, +	, +	/**, +	 * API for performing operations on Facebook user profiles., +	 */, +	UserOperations userOperations();, +	, +	/**, +	 * API for performing Facebook Places checkin operations., +	 */, +	PlacesOperations placesOperations();, +	, +	/**, +	 * API for performing operations against user likes and interests., +	 */, +	LikeOperations likeOperations();, +, +	/**, +	 * API for performing operations on feeds., +	 */, +	FeedOperations feedOperations();, +	, +	/**, +	 * API for performing operations with a user's set of friends., +	 */, +	FriendOperations friendOperations();, +	, +	/**, +	 * API for performing operations on groups., +	 */, +	GroupOperations groupOperations();, +, +	/**, +	 * API for reading and posting comments., +	 */, +	CommentOperations commentOperations();, +, +	/**, +	 * API for performing operations on events., +	 */, +	EventOperations eventOperations();, +	, +	/**]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider && other.providerUserId == null;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider && other.providerUserId == null;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/ConnectionKeyTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import static org.junit.Assert.*;, +, +import org.junit.Test;, +, +public class ConnectionKeyTest {, +	, +	@Test, +	public void equals() {, +		ConnectionKey key1 = new ConnectionKey("provider1", "providerUser1");, +		ConnectionKey key2 = new ConnectionKey("provider1", "providerUser1");, +, +		// reflexive, +		assertEquals(key1, key1);, +		, +		// symmetric, +		assertEquals(key1, key2);, +		assertEquals(key2, key1);, +	}, +, +	@Test, +	public void equals_nullProviderUserId() {, +		ConnectionKey key1 = new ConnectionKey("provider1", null);, +		ConnectionKey key2 = new ConnectionKey("provider1", null);, +, +		// reflexive, +		assertEquals(key1, key1);, +		, +		// symmetric, +		assertEquals(key1, key2);, +		assertEquals(key2, key1);, +	}, +, +	@Test, +	public void equals_notEqual() {, +		ConnectionKey key1 = new ConnectionKey("provider1", "providerUser1");, +		ConnectionKey key2 = new ConnectionKey("provider2", "providerUser1");, +		ConnectionKey key3 = new ConnectionKey("provider1", "providerUser2");, +		ConnectionKey key4 = new ConnectionKey("provider1", null);, +		, +		assertFalse(key1.equals(key2));, +		assertFalse(key2.equals(key1));, +		assertFalse(key1.equals(key3));, +		assertFalse(key3.equals(key1));, +		assertFalse(key2.equals(key3));, +		assertFalse(key3.equals(key2));, +		assertFalse(key1.equals(key4));, +		assertFalse(key4.equals(key1));, +	}, +, +	@Test, +	public void hashCode_providerIdOnly() {, +		ConnectionKey key = new ConnectionKey("provider1", null);, +		assertEquals("provider1".hashCode(), key.hashCode());, +	}, +, +	@Test, +	public void hashCode_providerIdAndProviderUserId() {, +		ConnectionKey key = new ConnectionKey("provider1", "providerUser1");, +		assertEquals("provider1".hashCode() + "providerUser1".hashCode(), key.hashCode());, +	}, +, +	@Test, +	public void toString_providerIdAndProviderUserId() {, +		ConnectionKey key = new ConnectionKey("provider1", "providerUser1");, +		assertEquals("provider1:providerUser1", key.toString());, +	}, +	, +	@Test, +	public void toString_providerIdOnly() {, +		ConnectionKey key = new ConnectionKey("provider1", null);, +		assertEquals("provider1:null", key.toString());, +	}, +}]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.social.oauth2.OAuth2Parameters;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.FormMapHttpMessageConverter;, +		converters.add(new FormMapHttpMessageConverter());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.FormMapHttpMessageConverter;, +		converters.add(new FormMapHttpMessageConverter());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/FormMapHttpMessageConverter.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.support;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.HttpOutputMessage;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.HttpMessageNotReadableException;, +import org.springframework.http.converter.HttpMessageNotWritableException;, +import org.springframework.social.oauth2.OAuth2Template;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +/**, + * Message converter that reads form-encoded data into a flat Map<String, String>., + * In contrast to FormHttpMessageConverter which reads form-encoded data into a {@link MultiValueMap}., + * Created primarily for use by {@link OAuth2Template} to handle cases where access token is returned as form-encoded data., + * @author Craig Walls, + */, +public class FormMapHttpMessageConverter implements HttpMessageConverter<Map<String, String>> {, +, +	private final FormHttpMessageConverter delegate;, +	, +	public FormMapHttpMessageConverter() {, +		delegate = new FormHttpMessageConverter();, +	}, +	, +	public boolean canRead(Class<?> clazz, MediaType mediaType) {, +		if (!Map.class.isAssignableFrom(clazz)) {, +			return false;, +		}, +		if (mediaType == null) {, +			return true;, +		}, +		for (MediaType supportedMediaType : getSupportedMediaTypes()) {, +			// we can't read multipart, +			if (!supportedMediaType.equals(MediaType.MULTIPART_FORM_DATA) &&, +				supportedMediaType.includes(mediaType)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +		if (!Map.class.isAssignableFrom(clazz)) {, +			return false;, +		}, +		if (mediaType == null || MediaType.ALL.equals(mediaType)) {, +			return true;, +		}, +		for (MediaType supportedMediaType : getSupportedMediaTypes()) {, +			if (supportedMediaType.isCompatibleWith(mediaType)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	public List<MediaType> getSupportedMediaTypes() {, +		return delegate.getSupportedMediaTypes();, +	}, +, +	public Map<String, String> read(Class<? extends Map<String, String>> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {, +		LinkedMultiValueMap<String, String> lmvm = new LinkedMultiValueMap<String, String>();, +		Class<LinkedMultiValueMap<String, String>> mvmClazz = (Class<LinkedMultiValueMap<String, String>>) lmvm.getClass();, +		MultiValueMap<String, String> mvm = delegate.read(mvmClazz, inputMessage);, +, +		return mvm.toSingleValueMap();, +	}, +, +	public void write(Map<String, String> t, MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {, +		MultiValueMap<String, String> mvm = new LinkedMultiValueMap<String, String>();, +		mvm.setAll(t);]
[+++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +class ServiceProviderElementParser implements BeanDefinitionParser {, +		String providerClassName = element.getAttribute("class");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, +	private static final long serialVersionUID = 7330875324290049412L;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, +	private static final long serialVersionUID = 7330875324290049412L;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1Connection.java, +	private static final long serialVersionUID = -808097401993144389L;, +, +	// equals() and hashCode() generated by Eclipse, +	@Override, +	public int hashCode() {, +		final int prime = 31;, +		int result = super.hashCode();, +		result = prime * result + ((accessToken == null) ? 0 : accessToken.hashCode());, +		result = prime * result + ((secret == null) ? 0 : secret.hashCode());, +		return result;, +	}, +, +	@Override, +	public boolean equals(Object obj) {, +		if (this == obj) return true;, +		if (!super.equals(obj)) return false;, +		if (getClass() != obj.getClass()) return false;, +		@SuppressWarnings("rawtypes"), +		OAuth1Connection other = (OAuth1Connection) obj;, +		, +		if (accessToken == null) {, +			if (other.accessToken != null) return false;, +		} else if (!accessToken.equals(other.accessToken)) return false;, +, +		if (secret == null) {, +			if (other.secret != null) return false;, +		} else if (!secret.equals(other.secret)) return false;, +		, +		return true;, +	}, +	, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, +	private static final long serialVersionUID = 7330875324290049412L;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1Connection.java, +	private static final long serialVersionUID = -808097401993144389L;, +, +	// equals() and hashCode() generated by Eclipse, +	@Override, +	public int hashCode() {, +		final int prime = 31;, +		int result = super.hashCode();, +		result = prime * result + ((accessToken == null) ? 0 : accessToken.hashCode());, +		result = prime * result + ((secret == null) ? 0 : secret.hashCode());, +		return result;, +	}, +, +	@Override, +	public boolean equals(Object obj) {, +		if (this == obj) return true;, +		if (!super.equals(obj)) return false;, +		if (getClass() != obj.getClass()) return false;, +		@SuppressWarnings("rawtypes"), +		OAuth1Connection other = (OAuth1Connection) obj;, +		, +		if (accessToken == null) {, +			if (other.accessToken != null) return false;, +		} else if (!accessToken.equals(other.accessToken)) return false;, +, +		if (secret == null) {, +			if (other.secret != null) return false;, +		} else if (!secret.equals(other.secret)) return false;, +		, +		return true;, +	}, +	, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +	private static final long serialVersionUID = 4057584084077577480L;, +, +	// equas() and hashCode() generated by Eclipse, +	@Override, +	public int hashCode() {, +		final int prime = 31;, +		int result = super.hashCode();, +		result = prime * result + ((accessToken == null) ? 0 : accessToken.hashCode());, +		result = prime * result + ((expireTime == null) ? 0 : expireTime.hashCode());, +		result = prime * result + ((refreshToken == null) ? 0 : refreshToken.hashCode());, +		return result;, +	}, +, +	@Override, +	public boolean equals(Object obj) {, +		if (this == obj) return true;, +		if (!super.equals(obj)) return false;, +		if (getClass() != obj.getClass()) return false;, +		OAuth2Connection other = (OAuth2Connection) obj;, +		, +		if (accessToken == null) {, +			if (other.accessToken != null) return false;, +		} else if (!accessToken.equals(other.accessToken)) return false;, +]
[+++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		addTextToMapMessageConverter();, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("code", authorizationCode);, +		requestParameters.set("redirect_uri", redirectUri);, +		requestParameters.set("grant_type", "authorization_code");, +		Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	, +	// private helpers, +	// TODO : Can probably tweak RestTemplate's message converters to deal with this better., +	private String valueOf(Object object) {, +		if (object == null) {, +			return null;, +		} else if (object instanceof List) {, +			List list = (List) object;, +			if (list.size() > 0) {, +				return String.valueOf(list.get(0));, +			}, +			return null;, +		}, +		return String.valueOf(object);, +	}, +, +	/*, +	 * Facebook returns form-encoded results with a content type of "text/plain". The "text/plain" content type prevents, +	 * any of the default encoders from being able to parse the results, even though FormHttpMessageConverter is, +	 * perfectly capable of doing so. This method adds another FormHttpMessageConverter that can read "text/plain" into, +	 * a Map so that this works for Facebook., +	 */, +	private void addTextToMapMessageConverter() {, +		FormHttpMessageConverter messageConverter = new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				return clazz.equals(Map.class) && mediaType != null && mediaType.getType().equals("text"), +						&& mediaType.getSubtype().equals("plain");, +			}, +		};, +		restTemplate.getMessageConverters().add(messageConverter);, +	}, +++ b/samples/facebook-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, +		<org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		addTextToMapMessageConverter();, +		MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, +		requestParameters.set("client_id", clientId);, +		requestParameters.set("client_secret", clientSecret);, +		requestParameters.set("code", authorizationCode);, +		requestParameters.set("redirect_uri", redirectUri);, +		requestParameters.set("grant_type", "authorization_code");, +		Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, +	, +	// private helpers, +	// TODO : Can probably tweak RestTemplate's message converters to deal with this better., +	private String valueOf(Object object) {, +		if (object == null) {, +			return null;, +		} else if (object instanceof List) {, +			List list = (List) object;, +			if (list.size() > 0) {, +				return String.valueOf(list.get(0));, +			}, +			return null;, +		}, +		return String.valueOf(object);, +	}]
[+++ b/.gitignore, +samples/**/src/main/webapp/META-INF]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +	public AuthenticationFailureHandler getDelegate() {, +		return delegate;, +	}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +	public AuthenticationFailureHandler getDelegate() {, +		return delegate;, +	}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL)));, +	 * @deprecated use {@link #setPostFailureUrl(String)} instead, +	@Deprecated, +		setPostFailureUrl(defaultFailureUrl);, +	/**, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +	 */, +, +		if (failureHandler instanceof SocialAuthenticationFailureHandler) {, +			failureHandler = ((SocialAuthenticationFailureHandler)failureHandler).getDelegate();, +		}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +	public AuthenticationFailureHandler getDelegate() {, +		return delegate;, +	}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL)));, +	 * @deprecated use {@link #setPostFailureUrl(String)} instead, +	@Deprecated, +		setPostFailureUrl(defaultFailureUrl);, +	/**, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +	 */, +, +		if (failureHandler instanceof SocialAuthenticationFailureHandler) {, +			failureHandler = ((SocialAuthenticationFailureHandler)failureHandler).getDelegate();, +		}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import javax.inject.Inject;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +		String path = "/connect/" + providerId + getPathExtension(servletRequest);]
[+++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse as usual:, +, + File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, + ./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +===============================================================================, +++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse as usual:, +, + File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, + ./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +===============================================================================, +++ b/build.gradle, +    commonsCodecVersion = '1.4', +    h2Version = '1.3.151', +    jacksonVersion = '1.7.3', +    jodaVersion = '1.6.2', +    jspApiVersion = '2.1', +    junitVersion = '4.8.2', +        compile ("commons-codec:commons-codec:$commonsCodecVersion") { optional = true }, +        testCompile "com.h2database:h2:$h2Version", +        compile ("javax.servlet.jsp:jsp-api:$jspApiVersion") { provided = true }, +++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +]
[+++ b/build.gradle, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TwitterShowcaseController.java, + * Copyright 2010 the original author or authors., +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetAfterConnectInterceptor.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TweetForm.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/twitter/TwitterShowcaseController.java, + * Copyright 2010 the original author or authors., +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT, +role=developer]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderUserSignInAttempt.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.signin.web;, +, +import java.io.Serializable;, +, +import javax.inject.Provider;, +, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.connect.ServiceProviderConnectionRepository;, +, +/**, + * Models an attempt to sign-in to the application using a provider user identity., + * Instances are created when the provider sign-in process could not be completed because no local user is associated with the provider user., + * This could happen because the user has not yet signed up with the application, or has not yet connected their local application identity with the their provider identity., + * For the former scenario, callers should invoke {@link #addConnection()} post-signup to establish a connection between a new user account and the provider account., + * For the latter, existing users should sign-in using their local application credentials and formally connect to the provider they also wish to authenticate with., + * @author Keith Donald, + */, +@SuppressWarnings("serial"), +public class ProviderUserSignInAttempt implements Serializable {, +, +	/**, +	 * Name of the session attribute ProviderSignInAttempt instances are indexed under., +	 */, +	static final String SESSION_ATTRIBUTE = ProviderUserSignInAttempt.class.getName();, +, +	// TODO: ServiceProviderConnections are not inherently Serializable: this may present a problem in a clustered web environment., +	// Consider storing a ServiceProviderConnectionData here along with a Provider<ServiceProviderConnectionFactory>., +	private final ServiceProviderConnection<?> connection;, +	, +	private final Provider<ServiceProviderConnectionRepository> connectionRepositoryProvider;, +		, +	public ProviderUserSignInAttempt(ServiceProviderConnection<?> connection, Provider<ServiceProviderConnectionRepository> connectionRepositoryProvider) {, +		this.connection = connection;, +		this.connectionRepositoryProvider = connectionRepositoryProvider;		, +	}, +	, +	/**, +	 * Get the connection to the provider user account the client attempted to sign-in as., +	 * Using this connection you may fetch a {@link ServiceProviderConnection#fetchUserProfile() provider user profile} and use that to pre-populate a local user registration/signup form., +	 * You can also lookup the id of the provider and use that to display a provider-specific user-sign-in-attempt flash message e.g. "Your Facebook Account is not connected to a Local account. Please sign up.", +	 */, +	public ServiceProviderConnection<?> getConnection() {, +		return connection;, +	}, +	, +	/**, +	 * Connect the new local user to the provider., +	 */, +	void addConnection() {, +		connectionRepositoryProvider.get().addConnection(connection);, +	}, +, +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderUserSignInAttempt.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.signin.web;, +, +import java.io.Serializable;]
[+++ b/docs/src/info/changelog.txt, +  * OAuth2Version.BEARER's value is now "Bearer" to be consistent with the latest drafts of the, +    specification (SOCIAL-272)]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);, +, +	private final String id;, +	 * The user's id in the provider, +	 * May be null if not exposed/supported by the provider., +	 * @return the user's id in the provider, +	 */, +	public String getId() {, +		return id;, +	}, +, +	/**, +	UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, +		this.id = id;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, +	public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);, +, +	private final String id;, +	 * The user's id in the provider, +	 * May be null if not exposed/supported by the provider., +	 * @return the user's id in the provider, +	 */, +	public String getId() {, +		return id;, +	}, +, +	/**, +	UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, +		this.id = id;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfileBuilder.java, +	private String id;, +, +	 * Sets the profile id field., +	 * @param id the user's id in the provider, +	 * @return this {@link UserProfileBuilder} for setting more properties, +	 */, +	public UserProfileBuilder setId(String id) {, +		this.id = id;, +		return this;, +	}, +, +	/**, +		return new UserProfile(id, name, firstName, lastName, email, username);]
[+++ b/README, +Note that this project no longer contains SaaS provider-specific connectivity, +and API bindings. Each of the provider-specific modules is now in its own project., +This will enable those modules to progress and release on a separate schedule, +than Spring Social and be able to react more quickly to changes in the provider's, +API without the need to wait for a Spring Social release., +, +The SaaS provider-specific projects can be cloned from the following GitHub, +URLs:, +, +Twitter: git://github.com/SpringSource/spring-social-twitter.git, +Facebook: git://github.com/SpringSource/spring-social-facebook.git, +LinkedIn: git://github.com/SpringSource/spring-social-linkedin.git, +TripIt: git://github.com/SpringSource/spring-social-tripit.git, +GitHub: git://github.com/SpringSource/spring-social-github.git, +Gowalla: git://github.com/SpringSource/spring-social-gowalla.git, +, +Each of these projects uses the same build submodule as Spring Social. Thus,, +you'll need to either clone them with the --recursive switch or init/update the, +submodule as described above from Spring Social., +, +-------------------------------------------------------------------------------, +++ b/README, +Note that this project no longer contains SaaS provider-specific connectivity, +and API bindings. Each of the provider-specific modules is now in its own project., +This will enable those modules to progress and release on a separate schedule, +than Spring Social and be able to react more quickly to changes in the provider's, +API without the need to wait for a Spring Social release., +, +The SaaS provider-specific projects can be cloned from the following GitHub, +URLs:, +, +Twitter: git://github.com/SpringSource/spring-social-twitter.git, +Facebook: git://github.com/SpringSource/spring-social-facebook.git, +LinkedIn: git://github.com/SpringSource/spring-social-linkedin.git, +TripIt: git://github.com/SpringSource/spring-social-tripit.git, +GitHub: git://github.com/SpringSource/spring-social-github.git, +Gowalla: git://github.com/SpringSource/spring-social-gowalla.git, +, +Each of these projects uses the same build submodule as Spring Social. Thus,, +you'll need to either clone them with the --recursive switch or init/update the, +submodule as described above from Spring Social., +, +-------------------------------------------------------------------------------, +++ b/build.gradle, +    h2Version = '1.3.155', +    jacksonVersion = '1.8.1', +    springVersion = '3.1.0.M2', +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ b/README, +Note that this project no longer contains SaaS provider-specific connectivity, +and API bindings. Each of the provider-specific modules is now in its own project., +This will enable those modules to progress and release on a separate schedule, +than Spring Social and be able to react more quickly to changes in the provider's, +API without the need to wait for a Spring Social release., +, +The SaaS provider-specific projects can be cloned from the following GitHub, +URLs:, +, +Twitter: git://github.com/SpringSource/spring-social-twitter.git, +Facebook: git://github.com/SpringSource/spring-social-facebook.git, +LinkedIn: git://github.com/SpringSource/spring-social-linkedin.git, +TripIt: git://github.com/SpringSource/spring-social-tripit.git, +GitHub: git://github.com/SpringSource/spring-social-github.git, +Gowalla: git://github.com/SpringSource/spring-social-gowalla.git, +, +Each of these projects uses the same build submodule as Spring Social. Thus,, +you'll need to either clone them with the --recursive switch or init/update the, +submodule as described above from Spring Social., +, +-------------------------------------------------------------------------------, +++ b/build.gradle, +    h2Version = '1.3.155', +    jacksonVersion = '1.8.1', +    springVersion = '3.1.0.M2', +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 14, 2011), +======================================================, +Compatibility Notes, +   * Extracted provider-specific modules to separate projects., +   * Renamed {Provider}Api.java interfaces to {Provider}.java., +     (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +   * Renamed several operations in ConnectionRepository (see JavaDocs/source for details)., +   * Renamed AbstractOAuth1ApiTemplate and AbstractOAuth2ApiTemplate to AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding, respectively., +   * Simplified ConnectController and ProviderSignInController constructors (see JavaDocs/source for details)., +   * Moved ConnectController & ProviderSignInController's applicationUrl property from constructor to setter and made optional., +   * Renamed ConnectController#postLoginUrl property to postSignInUrl for consistency., +   * Renamed SignInService to SignInAdapter for clarity & added Connection, HttpServletRequest, and HttpServletResponse parameters to signIn method signature., +   * Factored out web.ConnectSupport from ConnectController and ProviderSignInController for reusability., +   * Removed commons-codec dependency; spring-security-crypto is now used for Base64 encoding as well as encryption., +  , +New Features, +   * Enabled use of Spring Social behind a proxy, +   * Facebook API binding:, +     * Photo and video upload]
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/InterceptorCallingRestTemplate.java, +package org.springframework.security.oauth.client;, +, +import java.io.IOException;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.AbstractClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +import org.springframework.web.client.RestTemplate;, +, +/*, + * This class is a placeholder, enabling me to work with interceptors while Arjen implements the real RestTemplate interceptor stuff., + * , + * Once Arjen is done, this class can go away and the regular RestTemplate can be used., + */, +public class InterceptorCallingRestTemplate extends RestTemplate {, +	public void addInterceptor(RestTemplateInterceptor interceptor) {, +		this.setRequestFactory(new InterceptorCallingClientHttpRequestFactory(new SimpleClientHttpRequestFactory(),, +				interceptor));, +	}, +}, +, +class InterceptorCallingClientHttpRequestFactory implements ClientHttpRequestFactory {, +	private final ClientHttpRequestFactory delegate;, +	private final RestTemplateInterceptor interceptor;, +, +	public InterceptorCallingClientHttpRequestFactory(ClientHttpRequestFactory delegate, RestTemplateInterceptor interceptor) {, +		this.delegate = delegate;, +		this.interceptor = interceptor;, +	}, +, +	public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		return new InterceptorCallingClientHttpRequest(delegate.createRequest(uri, httpMethod), interceptor);, +	}, +}, +, +class InterceptorCallingClientHttpRequest extends AbstractClientHttpRequest {, +	private final ClientHttpRequest delegate;, +	private final RestTemplateInterceptor interceptor;, +, +	public InterceptorCallingClientHttpRequest(ClientHttpRequest delegate, RestTemplateInterceptor interceptor) {, +		this.delegate = delegate;, +		this.interceptor = interceptor;, +	}, +, +	protected ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {, +		ClientRequest clientRequest = new ClientRequest(headers, bufferedOutput, getURI(), getMethod());, +		interceptor.beforeExecution(clientRequest);, +		delegate.getBody().write(bufferedOutput);, +		delegate.getHeaders().putAll(headers);, +		return delegate.execute();, +	}, +, +	public URI getURI() {, +		return delegate.getURI();, +	}, +, +	public HttpMethod getMethod() {, +		return delegate.getMethod();, +	}, +}, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/InterceptorCallingRestTemplate.java, +package org.springframework.security.oauth.client;, +, +import java.io.IOException;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.AbstractClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +import org.springframework.web.client.RestTemplate;, +, +/*, + * This class is a placeholder, enabling me to work with interceptors while Arjen implements the real RestTemplate interceptor stuff., + * , + * Once Arjen is done, this class can go away and the regular RestTemplate can be used., + */, +public class InterceptorCallingRestTemplate extends RestTemplate {, +	public void addInterceptor(RestTemplateInterceptor interceptor) {, +		this.setRequestFactory(new InterceptorCallingClientHttpRequestFactory(new SimpleClientHttpRequestFactory(),, +				interceptor));, +	}, +}, +, +class InterceptorCallingClientHttpRequestFactory implements ClientHttpRequestFactory {, +	private final ClientHttpRequestFactory delegate;, +	private final RestTemplateInterceptor interceptor;, +, +	public InterceptorCallingClientHttpRequestFactory(ClientHttpRequestFactory delegate, RestTemplateInterceptor interceptor) {, +		this.delegate = delegate;, +		this.interceptor = interceptor;]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, +	@Test, +	public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, +	@Test, +	public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_ERROR);, +	}, +	, +	public StubOAuth1ConnectionFactory(String clientId, String clientSecret, StubOAuth1Template.Behavior behavior) {, +		super("oauth1Provider", new StubOAuth1ServiceProvider(clientId, clientSecret, behavior), null);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, +	@Test, +	public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_ERROR);, +	}, +	, +	public StubOAuth1ConnectionFactory(String clientId, String clientSecret, StubOAuth1Template.Behavior behavior) {, +		super("oauth1Provider", new StubOAuth1ServiceProvider(clientId, clientSecret, behavior), null);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ServiceProvider.java, +		this(consumerKey, consumerSecret, StubOAuth1Template.Behavior.NO_ERROR);, +	}, +	, +	public StubOAuth1ServiceProvider(String consumerKey, String consumerSecret, StubOAuth1Template.Behavior behavior) {, +			"https://someprovider.com/oauth/access_token", behavior));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, +	@Test, +	public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_ERROR);, +	}, +	, +	public StubOAuth1ConnectionFactory(String clientId, String clientSecret, StubOAuth1Template.Behavior behavior) {]
