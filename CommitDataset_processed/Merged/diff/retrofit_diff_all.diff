[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      urlBuilder = baseUrl.newBuilder(relativeUrl);, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      urlBuilder = baseUrl.newBuilder(relativeUrl);, +++ b/retrofit/src/main/java/retrofit2/Response.java, +        .request(new okhttp3.Request.Builder().url("http://localhost").build()), +        .request(new okhttp3.Request.Builder().url("http://localhost").build())]
[+++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/revision.properties, +retrofit.revision=0.3-SNAPSHOT]
[+++ b/pom.xml, +    <okhttp.version>3.12.0</okhttp.version>, +    <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, +    <okhttp.version>3.12.0</okhttp.version>, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/pom.xml, +    <okhttp.version>3.12.0</okhttp.version>, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/pom.xml, +    <okhttp.version>3.12.0</okhttp.version>, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/retrofit/src/test/java/retrofit2/RequestFactoryAndroidTest.java, +@Config(sdk = NEWEST_SDK)]
[+++ b/retrofit/src/test/java/retrofit2/ResponseTest.java, +  @Test public void successWithNullHeadersThrows() {]
[+++ b/retrofit/src/main/java/retrofit2/Response.java, +import okhttp3.Request;, +        .request(new Request.Builder().url("http://localhost").build()), +        .request(new Request.Builder().url("http://localhost").build())]
[+++ b/pom.xml, +    <gson.version>2.2.4</gson.version>, +    <okhttp.version>1.0.2</okhttp.version>, +    <guava.version>14.0.1</guava.version>, +++ b/pom.xml, +    <gson.version>2.2.4</gson.version>, +    <okhttp.version>1.0.2</okhttp.version>, +    <guava.version>14.0.1</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +        url.append(requestQuery);, +++ b/pom.xml, +    <gson.version>2.2.4</gson.version>, +    <okhttp.version>1.0.2</okhttp.version>, +    <guava.version>14.0.1</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +        url.append(requestQuery);, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +        .setQuery("?hi=mom") //]
[+++ b/.gitignore, +lib, +out, +build, +, +++ b/.gitignore, +lib, +out, +build, +, +++ b/.idea/.gitignore, +workspace.xml, +, +++ b/.gitignore, +lib, +out, +build, +, +++ b/.idea/.gitignore, +workspace.xml, +, +++ b/.idea/ant.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="AntConfiguration">, +    <defaultAnt bundledAnt="true" />, +    <buildFile url="file://$PROJECT_DIR$/build.xml">, +      <additionalClassPath />, +      <antReference projectDefault="true" />, +      <customJdkName value="" />, +      <maximumHeapSize value="128" />, +      <maximumStackSize value="2" />, +      <properties />, +    </buildFile>, +  </component>, +</project>, +, +++ b/.gitignore, +lib, +out, +build, +, +++ b/.idea/.gitignore, +workspace.xml, +, +++ b/.idea/ant.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="AntConfiguration">, +    <defaultAnt bundledAnt="true" />, +    <buildFile url="file://$PROJECT_DIR$/build.xml">, +      <additionalClassPath />, +      <antReference projectDefault="true" />, +      <customJdkName value="" />, +      <maximumHeapSize value="128" />, +      <maximumStackSize value="2" />, +      <properties />, +    </buildFile>, +  </component>, +</project>, +, +++ b/.idea/compiler.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="CompilerConfiguration">, +    <option name="DEFAULT_COMPILER" value="Javac" />, +    <resourceExtensions>, +      <entry name=".+\.(properties|xml|html|dtd|tld)" />, +      <entry name=".+\.(gif|png|jpeg|jpg)" />, +    </resourceExtensions>, +    <wildcardResourcePatterns>, +      <entry name="?*.properties" />, +      <entry name="?*.xml" />, +      <entry name="?*.gif" />, +      <entry name="?*.png" />, +      <entry name="?*.jpeg" />, +      <entry name="?*.jpg" />, +      <entry name="?*.html" />, +      <entry name="?*.dtd" />, +      <entry name="?*.tld" />, +      <entry name="?*.ftl" />, +    </wildcardResourcePatterns>, +    <annotationProcessing enabled="false" useClasspath="true" />, +  </component>, +</project>, +, +++ b/.gitignore, +lib, +out, +build, +, +++ b/.idea/.gitignore, +workspace.xml, +, +++ b/.idea/ant.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="AntConfiguration">, +    <defaultAnt bundledAnt="true" />, +    <buildFile url="file://$PROJECT_DIR$/build.xml">]
[+++ b/.idea/compiler.xml, +      <directory url="file://$PROJECT_DIR$/sample-android/gen" includeSubdirectories="true" />, +++ b/.idea/compiler.xml, +      <directory url="file://$PROJECT_DIR$/sample-android/gen" includeSubdirectories="true" />, +++ b/http/retrofit-http.iml, +    <orderEntry type="library" name="Maven: com.google.inject:guice:no_aop:3.0" level="project" />, +++ b/.idea/compiler.xml, +      <directory url="file://$PROJECT_DIR$/sample-android/gen" includeSubdirectories="true" />, +++ b/http/retrofit-http.iml, +    <orderEntry type="library" name="Maven: com.google.inject:guice:no_aop:3.0" level="project" />, +++ b/sample-android/retrofit-sample-android.iml, +        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />, +        <includeSystemProguardFile>true</includeSystemProguardFile>, +      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />]
[+++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.2-SNAPSHOT</version>]
[+++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/pom.xml, +      <groupId>io.reactivex</groupId>, +      <artifactId>rxjava</artifactId>, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/pom.xml, +      <groupId>io.reactivex</groupId>, +      <artifactId>rxjava</artifactId>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        return Observable.just(expected);, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/pom.xml, +      <groupId>io.reactivex</groupId>, +      <artifactId>rxjava</artifactId>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        return Observable.just(expected);, +++ b/retrofit/pom.xml, +      <groupId>io.reactivex</groupId>, +      <artifactId>rxjava</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +++ b/pom.xml, +    <rxjava.version>1.0.0-rc.4</rxjava.version>, +        <groupId>io.reactivex</groupId>, +        <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/pom.xml, +      <groupId>io.reactivex</groupId>, +      <artifactId>rxjava</artifactId>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/package-info.java]
[+++ b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java, +import java.io.IOException;, +import java.lang.reflect.ParameterizedType;, +import java.util.concurrent.Executor;, +import okhttp3.Request;, +import static retrofit2.Utils.checkNotNull;, +, +  private final @Nullable Executor callbackExecutor;, +, +  DefaultCallAdapterFactory(@Nullable Executor callbackExecutor) {, +    this.callbackExecutor = callbackExecutor;, +  }, +    if (!(returnType instanceof ParameterizedType)) {, +      throw new IllegalArgumentException(, +          "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>");, +    }, +    final Type responseType = Utils.getParameterUpperBound(0, (ParameterizedType) returnType);, +    final Executor executor = Utils.isAnnotationPresent(annotations, SkipCallbackExecutor.class), +        ? null, +        : callbackExecutor;, +, +        return executor == null, +            ? call, +            : new ExecutorCallbackCall<>(executor, call);, +, +  static final class ExecutorCallbackCall<T> implements Call<T> {, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +, +    ExecutorCallbackCall(Executor callbackExecutor, Call<T> delegate) {, +      this.callbackExecutor = callbackExecutor;, +      this.delegate = delegate;, +    }, +, +    @Override public void enqueue(final Callback<T> callback) {, +      checkNotNull(callback, "callback == null");, +, +      delegate.enqueue(new Callback<T>() {, +        @Override public void onResponse(Call<T> call, final Response<T> response) {, +          callbackExecutor.execute(new Runnable() {, +            @Override public void run() {, +              if (delegate.isCanceled()) {, +                // Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation., +                callback.onFailure(ExecutorCallbackCall.this, new IOException("Canceled"));, +              } else {, +                callback.onResponse(ExecutorCallbackCall.this, response);, +              }, +            }, +          });, +        }, +, +        @Override public void onFailure(Call<T> call, final Throwable t) {, +          callbackExecutor.execute(new Runnable() {, +            @Override public void run() {, +              callback.onFailure(ExecutorCallbackCall.this, t);, +            }, +          });, +        }, +      });, +    }, +, +    @Override public boolean isExecuted() {, +      return delegate.isExecuted();, +    }, +, +    @Override public Response<T> execute() throws IOException {, +      return delegate.execute();, +    }, +, +    @Override public void cancel() {, +      delegate.cancel();, +    }, +, +    @Override public boolean isCanceled() {, +      return delegate.isCanceled();, +    }, +, +    @SuppressWarnings("CloneDoesntCallSuperClone") // Performing deep clone., +    @Override public Call<T> clone() {, +      return new ExecutorCallbackCall<>(callbackExecutor, delegate.clone());, +    }, +, +    @Override public Request request() {, +      return delegate.request();, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java, +import java.io.IOException;, +import java.lang.reflect.ParameterizedType;, +import java.util.concurrent.Executor;, +import okhttp3.Request;, +import static retrofit2.Utils.checkNotNull;, +, +  private final @Nullable Executor callbackExecutor;, +, +  DefaultCallAdapterFactory(@Nullable Executor callbackExecutor) {, +    this.callbackExecutor = callbackExecutor;, +  }, +    if (!(returnType instanceof ParameterizedType)) {, +      throw new IllegalArgumentException(]
[+++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +        <version>2.5</version>]
[+++ b/io/src/main/java/retrofit/internal/Objects.java, +// Copyright 2010 Square, Inc., +package retrofit.internal;, +, +/**, + * Object utility methods., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class Objects {, +, +  /**, +   * Returns t unless it's null., +   *, +   * @throws NullPointerException if t is null, +   */, +  public static <T> T nonNull(T t, String name) {, +    if (t == null) throw new NullPointerException(name);, +    return t;, +  }, +}, +++ b/io/src/main/java/retrofit/internal/Objects.java, +// Copyright 2010 Square, Inc., +package retrofit.internal;, +, +/**, + * Object utility methods., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class Objects {, +, +  /**, +   * Returns t unless it's null., +   *, +   * @throws NullPointerException if t is null, +   */, +  public static <T> T nonNull(T t, String name) {, +    if (t == null) throw new NullPointerException(name);, +    return t;, +  }, +}, +++ b/io/src/main/java/retrofit/io/AbstractTypedBytes.java, +import retrofit.internal.Objects;, +, +    this.mimeType = Objects.nonNull(mimeType, "mimeType");, +++ b/io/src/main/java/retrofit/internal/Objects.java, +// Copyright 2010 Square, Inc., +package retrofit.internal;, +, +/**, + * Object utility methods., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class Objects {, +, +  /**, +   * Returns t unless it's null., +   *, +   * @throws NullPointerException if t is null, +   */, +  public static <T> T nonNull(T t, String name) {, +    if (t == null) throw new NullPointerException(name);, +    return t;, +  }, +}, +++ b/io/src/main/java/retrofit/io/AbstractTypedBytes.java, +import retrofit.internal.Objects;, +, +    this.mimeType = Objects.nonNull(mimeType, "mimeType");, +++ b/io/src/main/java/retrofit/io/TypedByteArray.java, +import retrofit.internal.Objects;, +, +    this.bytes = Objects.nonNull(bytes, "bytes");, +++ b/io/src/main/java/retrofit/internal/Objects.java, +// Copyright 2010 Square, Inc., +package retrofit.internal;, +, +/**, + * Object utility methods., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class Objects {, +, +  /**, +   * Returns t unless it's null., +   *, +   * @throws NullPointerException if t is null, +   */, +  public static <T> T nonNull(T t, String name) {, +    if (t == null) throw new NullPointerException(name);, +    return t;, +  }, +}, +++ b/io/src/main/java/retrofit/io/AbstractTypedBytes.java, +import retrofit.internal.Objects;, +, +    this.mimeType = Objects.nonNull(mimeType, "mimeType");]
[+++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/scalars/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <rxjava.version>0.20.5</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.20.5</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RetrofitError.java]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +Type-safe REST client for Android and Java by Square, Inc., +Usage, +-----, +License, +=======, +    Copyright 2012 Square, Inc., +    Licensed under the Apache License, Version 2.0 (the "License");, +    you may not use this file except in compliance with the License., +    You may obtain a copy of the License at, +       http://www.apache.org/licenses/LICENSE-2.0, +, +    Unless required by applicable law or agreed to in writing, software, +    distributed under the License is distributed on an "AS IS" BASIS,, +    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +    See the License for the specific language governing permissions and, +    limitations under the License., +++ b/.travis.yml, +++ b/README.md, +Type-safe REST client for Android and Java by Square, Inc., +Usage, +-----, +License, +=======, +    Copyright 2012 Square, Inc., +    Licensed under the Apache License, Version 2.0 (the "License");, +    you may not use this file except in compliance with the License., +    You may obtain a copy of the License at, +       http://www.apache.org/licenses/LICENSE-2.0, +, +    Unless required by applicable law or agreed to in writing, software, +    distributed under the License is distributed on an "AS IS" BASIS,, +    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +    See the License for the specific language governing permissions and, +    limitations under the License., +++ /dev/null, +++ b/.travis.yml, +++ b/README.md, +Type-safe REST client for Android and Java by Square, Inc., +Usage, +-----, +License, +=======, +    Copyright 2012 Square, Inc., +    Licensed under the Apache License, Version 2.0 (the "License");, +    you may not use this file except in compliance with the License., +    You may obtain a copy of the License at, +       http://www.apache.org/licenses/LICENSE-2.0, +, +    Unless required by applicable law or agreed to in writing, software, +    distributed under the License is distributed on an "AS IS" BASIS,, +    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +    See the License for the specific language governing permissions and, +    limitations under the License., +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/README.md, +Type-safe REST client for Android and Java by Square, Inc., +Usage, +-----, +License, +=======, +    Copyright 2012 Square, Inc., +    Licensed under the Apache License, Version 2.0 (the "License");, +    you may not use this file except in compliance with the License., +    You may obtain a copy of the License at, +       http://www.apache.org/licenses/LICENSE-2.0, +, +    Unless required by applicable law or agreed to in writing, software, +    distributed under the License is distributed on an "AS IS" BASIS,, +    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +    See the License for the specific language governing permissions and, +    limitations under the License., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/README.md, +Type-safe REST client for Android and Java by Square, Inc., +Usage, +-----, +License, +=======, +    Copyright 2012 Square, Inc., +    Licensed under the Apache License, Version 2.0 (the "License");, +    you may not use this file except in compliance with the License., +    You may obtain a copy of the License at, +       http://www.apache.org/licenses/LICENSE-2.0, +, +    Unless required by applicable law or agreed to in writing, software, +    distributed under the License is distributed on an "AS IS" BASIS,, +    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +    See the License for the specific language governing permissions and, +    limitations under the License., +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  private final String relativeUrl;, +  private final Headers headers;, +  private final MediaType contentType;, +    String httpMethod;, +    String relativeUrl;, +    Headers headers;, +    MediaType contentType;, +    Set<String> relativeUrlParamNames;, +    ParameterHandler<?>[] parameterHandlers;, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  private final String relativeUrl;, +  private final Headers headers;, +  private final MediaType contentType;, +    String httpMethod;, +    String relativeUrl;, +    Headers headers;, +    MediaType contentType;, +    Set<String> relativeUrlParamNames;, +    ParameterHandler<?>[] parameterHandlers;, +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import java.util.Optional;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;]
[+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoResponseBodyConverter.java, +      return registry == null ? parser.parseFrom(value.byteStream()), +              : parser.parseFrom(value.byteStream(), registry);]
[+++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +++ b/retrofit-mock/src/main/java/retrofit/MockCall.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.util.concurrent.Callable;, +import java.util.concurrent.CancellationException;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Future;, +, +final class MockCall<T> implements Call<T> {, +  private final MockRetrofit mockRetrofit;, +  private final ExecutorService backgroundExecutor;, +  private final Executor callbackExecutor;, +  private final Response<T> response;, +  private final IOException failure;, +  private final boolean isFailure;, +, +  private volatile Future<?> task;, +  private volatile boolean canceled;, +  private volatile boolean executed;, +, +  MockCall(MockRetrofit mockRetrofit, ExecutorService backgroundExecutor, Executor callbackExecutor,, +      Response<T> response, IOException failure) {, +    if (callbackExecutor == null) {, +      callbackExecutor = new Executor() {, +        @Override public void execute(Runnable command) {, +          command.run();, +        }, +      };, +    }, +    this.mockRetrofit = mockRetrofit;, +    this.backgroundExecutor = backgroundExecutor;, +    this.callbackExecutor = callbackExecutor;, +    this.response = response;, +    this.failure = failure;, +    this.isFailure = failure != null;, +  }, +, +  @SuppressWarnings("CloneDoesntCallSuperClone") // We are a final type & this saves clearing state., +  @Override public Call<T> clone() {, +    return new MockCall<>(mockRetrofit, backgroundExecutor, callbackExecutor, response, failure);, +  }, +, +  private Response<T> getResponse() throws IOException, InterruptedException {, +    if (mockRetrofit.calculateIsFailure() || isFailure) {, +      Thread.sleep(mockRetrofit.calculateDelayForError());, +      throw isFailure ? failure : new IOException("Mock exception");, +    }, +    Thread.sleep(mockRetrofit.calculateDelayForCall());, +    return response;, +  }, +, +  @Override public void enqueue(final Callback<T> callback) {, +    synchronized (this) {, +      if (executed) throw new IllegalStateException("Already executed");, +      executed = true;, +    }, +    task = backgroundExecutor.submit(new Runnable() {, +      private void callFailure(final Throwable throwable) {, +        callbackExecutor.execute(new Runnable() {, +          @Override public void run() {, +            try {, +              callback.onFailure(throwable);, +            } catch (Throwable t) {, +              Thread thread = Thread.currentThread();, +              thread.getUncaughtExceptionHandler().uncaughtException(thread, t);, +            }, +          }, +        });, +      }, +, +      private void callSuccess(final Response<T> response) {, +        callbackExecutor.execute(new Runnable() {, +          @Override public void run() {]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +    if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +    if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +      if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +    if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +      if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    if (callback == null) throw new NullPointerException("callback == null");, +]
[+++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.lang.invoke.MethodHandles.Lookup;, +import java.lang.reflect.Constructor;, +      // Because the service interface might not be public, we need to use a MethodHandle lookup, +      // that ignores the visibility of the declaringClass., +      Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);, +      constructor.setAccessible(true);, +      return constructor.newInstance(declaringClass, -1 /* trusted */), +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.lang.invoke.MethodHandles.Lookup;, +import java.lang.reflect.Constructor;, +      // Because the service interface might not be public, we need to use a MethodHandle lookup, +      // that ignores the visibility of the declaringClass., +      Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);, +      constructor.setAccessible(true);, +      return constructor.newInstance(declaringClass, -1 /* trusted */), +++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java, +package retrofit2;, +, +// TODO this test doesn't play nice in the IDE because it relies on Java 8 language features., +public final class Java8DefaultMethodsTest {, +  //@Rule public final MockWebServer server = new MockWebServer();, +  //, +  //interface Example {, +  //  @GET("/") Call<String> user(@Query("name") String name);, +  //, +  //  default Call<String> user() {, +  //    return user("hey");, +  //  }, +  //}, +  //, +  //@Test public void test() throws IOException {, +  //  server.enqueue(new MockResponse().setBody("Hi"));, +  //  server.enqueue(new MockResponse().setBody("Hi"));, +  //, +  //  Retrofit retrofit = new Retrofit.Builder(), +  //      .baseUrl(server.url("/")), +  //      .addConverterFactory(new ToStringConverterFactory()), +  //      .build();, +  //  Example example = retrofit.create(Example.class);, +  //, +  //  Response<String> response = example.user().execute();, +  //  assertThat(response.body()).isEqualTo("Hi");, +  //  Response<String> response = example.user("hi").execute();, +  //  assertThat(response.body()).isEqualTo("Hi");, +  //}, +}]
[+++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.0</version>, +++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.0</version>, +++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.0</version>, +++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.0</version>, +++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.0</version>, +++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.0</version>, +++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.6.0</version>, +++ b/pom.xml, +  <version>1.6.0</version>, +    <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.6.0</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.6.0</version>, +++ b/pom.xml]
[+++ b/retrofit/src/main/java/retrofit2/Call.java, +import com.squareup.okhttp.ResponseBody;, +, +  /** Creates {@link Call} instances. */, +  interface Factory {, +    /**, +     * Returns a {@link Call} which will send {@code request} when executed or enqueue and use, +     * {@code converter} to parse the response. May not return null., +     */, +    <T> Call<T> create(DeferredRequest request, Converter<ResponseBody, T> converter);, +  }, +++ b/retrofit/src/main/java/retrofit2/Call.java, +import com.squareup.okhttp.ResponseBody;, +, +  /** Creates {@link Call} instances. */, +  interface Factory {, +    /**, +     * Returns a {@link Call} which will send {@code request} when executed or enqueue and use, +     * {@code converter} to parse the response. May not return null., +     */, +    <T> Call<T> create(DeferredRequest request, Converter<ResponseBody, T> converter);, +  }, +++ b/retrofit/src/main/java/retrofit2/DeferredRequest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import com.squareup.okhttp.Request;, +import java.io.IOException;, +, +/**, + * An un-built HTTP request. This class defers any work necessary to create an HTTP request until, + * {@link #get()} is called., + */, +public interface DeferredRequest {, +  /** Perform the work necessary to create and then return the {@link Request}. */, +  Request get() throws IOException;, +}, +++ b/retrofit/src/main/java/retrofit2/Call.java, +import com.squareup.okhttp.ResponseBody;, +, +  /** Creates {@link Call} instances. */, +  interface Factory {, +    /**, +     * Returns a {@link Call} which will send {@code request} when executed or enqueue and use, +     * {@code converter} to parse the response. May not return null., +     */, +    <T> Call<T> create(DeferredRequest request, Converter<ResponseBody, T> converter);, +  }, +++ b/retrofit/src/main/java/retrofit2/DeferredRequest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import com.squareup.okhttp.Request;, +import java.io.IOException;, +, +/**, + * An un-built HTTP request. This class defers any work necessary to create an HTTP request until, + * {@link #get()} is called., + */, +public interface DeferredRequest {, +  /** Perform the work necessary to create and then return the {@link Request}. */, +  Request get() throws IOException;, +}, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +    return new MethodHandler(retrofit.callFactory(), requestFactory, callAdapter,, +        responseConverter);, +  private final Call.Factory callFactory;, +  private MethodHandler(Call.Factory callFactory, RequestFactory requestFactory,, +    this.callFactory = callFactory;, +    DeferredRequest request = requestFactory.defer(args);, +    Call<?> call = callFactory.create(request, responseConverter);, +    if (call == null) {]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Completable observable = service.completable();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Completable observable = service.completable();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Observable<String> observable = service.body();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertValue("Hi").assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertValue("Hey").assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Completable observable = service.completable();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Observable<String> observable = service.body();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertValue("Hi").assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertValue("Hey").assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Single<String> observable = service.body();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertValue("Hi").assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertValue("Hey").assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.converter.gson;, +, +import com.google.gson.Gson;, +import com.google.gson.TypeAdapter;, +import com.google.gson.reflect.TypeToken;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +import retrofit2.Retrofit;, +, +/**, + * A {@linkplain Converter.Factory converter} which uses Gson for JSON., + * <p>, + * Because Gson is so flexible in the types it supports, this converter assumes that it can handle, + * all types. If you are mixing JSON serialization with something else (such as protocol buffers),, + * you must {@linkplain Retrofit.Builder#addConverterFactory(Converter.Factory) add this instance}, + * last to allow the other converters a chance to see their types., + */, +public final class GsonConverterFactory extends Converter.Factory {, +  /**, +   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and, +   * decoding from JSON (when no charset is specified by a header) will use UTF-8., +   */, +  public static GsonConverterFactory create() {, +    return create(new Gson());, +  }, +, +  /**, +   * Create an instance using {@code gson} for conversion. Encoding to JSON and, +   * decoding from JSON (when no charset is specified by a header) will use UTF-8., +   */, +  public static GsonConverterFactory create(Gson gson) {, +    return new GsonConverterFactory(gson);, +  }, +, +  private final Gson gson;, +, +  private GsonConverterFactory(Gson gson) {, +    if (gson == null) throw new NullPointerException("gson == null");, +    this.gson = gson;, +  }, +, +  @Override, +  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonResponseBodyConverter<>(adapter);, +  }, +, +  @Override, +  public Converter<?, RequestBody> requestBodyConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonRequestBodyConverter<>(gson, adapter);, +  }, +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]
[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final BufferedSource delegateSource;, +      this.delegateSource = Okio.buffer(new ForwardingSource(delegate.source()) {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          try {, +            return super.read(sink, byteCount);, +          } catch (IOException e) {, +            thrownException = e;, +            throw e;, +          }, +        }, +      });, +      return delegateSource;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final BufferedSource delegateSource;, +      this.delegateSource = Okio.buffer(new ForwardingSource(delegate.source()) {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          try {, +            return super.read(sink, byteCount);, +          } catch (IOException e) {, +            thrownException = e;, +            throw e;, +          }, +        }, +      });, +      return delegateSource;, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +import static retrofit2.TestingUtils.repeat;, +  @Test public void converterBodyDoesNotLeakContentInIntermediateBuffers() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            return new Converter<ResponseBody, String>() {, +              @Override public String convert(ResponseBody value) throws IOException {, +                String prefix = value.source().readUtf8(2);, +                value.source().skip(20_000 - 4);, +                String suffix = value.source().readUtf8();, +                return prefix + suffix;, +              }, +            };, +          }, +        }), +        .build();, +    Service example = retrofit.create(Service.class);, +, +    server.enqueue(new MockResponse().setBody(repeat('a', 10_000) + repeat('b', 10_000)));, +, +    Response<String> response = example.getString().execute();, +    assertThat(response.body()).isEqualTo("aabb");, +  }, +, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final BufferedSource delegateSource;, +      this.delegateSource = Okio.buffer(new ForwardingSource(delegate.source()) {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          try {, +            return super.read(sink, byteCount);, +          } catch (IOException e) {, +            thrownException = e;, +            throw e;, +          }, +        }, +      });, +      return delegateSource;, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +import static retrofit2.TestingUtils.repeat;, +  @Test public void converterBodyDoesNotLeakContentInIntermediateBuffers() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            return new Converter<ResponseBody, String>() {, +              @Override public String convert(ResponseBody value) throws IOException {, +                String prefix = value.source().readUtf8(2);, +                value.source().skip(20_000 - 4);, +                String suffix = value.source().readUtf8();, +                return prefix + suffix;, +              }, +            };, +          }, +        }), +        .build();, +    Service example = retrofit.create(Service.class);, +, +    server.enqueue(new MockResponse().setBody(repeat('a', 10_000) + repeat('b', 10_000)));, +, +    Response<String> response = example.getString().execute();, +    assertThat(response.body()).isEqualTo("aabb");, +  }, +, +++ b/retrofit/src/test/java/retrofit2/TestingUtils.java, +import java.util.Arrays;, +final class TestingUtils {, +  static Method onlyMethod(Class c) {, +, +  static String repeat(char c, int times) {, +    char[] cs = new char[times];]
[+++ b/pom.xml, +    <okhttp.version>3.4.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>3.4.0</okhttp.version>, +++ b/retrofit-converters/moshi/pom.xml, +    <!-- TODO remove this dependency once Moshi ships with 1.9.0 or newer. -->]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, +  <target name="compile" depends="prepare">, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, +  <target name="compile" depends="prepare">, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, +  <target name="compile" depends="prepare">, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +++ /dev/null, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, +  <target name="compile" depends="prepare">, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, +  <target name="compile" depends="prepare">, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, +  <target name="compile" depends="prepare">, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, +  <target name="compile" depends="prepare">, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, +  <target name="compile" depends="prepare">, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/rules.pro)., +++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/rules.pro)., +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +, +/** Adapts an invocation of an interface method into an HTTP call. */, +final class HttpServiceMethod<ResponseT, ReturnT> extends ServiceMethod<ReturnT> {, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +, +  HttpServiceMethod(Builder<ResponseT, ReturnT> builder) {, +    requestFactory = builder.requestFactory;, +    callFactory = builder.retrofit.callFactory();, +    callAdapter = builder.callAdapter;, +    responseConverter = builder.responseConverter;, +  }, +, +  @Override ReturnT invoke(@Nullable Object[] args) {, +    return callAdapter.adapt(, +        new OkHttpCall<>(requestFactory, args, callFactory, responseConverter));, +  }, +, +  /**, +   * Inspects the annotations on an interface method to construct a reusable service method. This, +   * requires potentially-expensive reflection so it is best to build each service method only once, +   * and reuse it. Builders cannot be reused., +   */, +  static final class Builder<ResponseT, ReturnT> {, +    final Retrofit retrofit;, +    final Method method;, +, +    RequestFactory requestFactory;, +    Type responseType;, +    Converter<ResponseBody, ResponseT> responseConverter;, +    CallAdapter<ResponseT, ReturnT> callAdapter;, +, +    Builder(Retrofit retrofit, Method method) {, +      this.retrofit = retrofit;, +      this.method = method;, +    }, +, +    HttpServiceMethod<ResponseT, ReturnT> build() {, +      requestFactory = RequestFactory.parseAnnotations(retrofit, method);, +, +      callAdapter = createCallAdapter();, +      responseType = callAdapter.responseType();, +      if (responseType == Response.class || responseType == okhttp3.Response.class) {, +        throw methodError("'", +            + Utils.getRawType(responseType).getName(), +            + "' is not a valid response body type. Did you mean ResponseBody?");, +      }, +      responseConverter = createResponseConverter();, +, +      if (requestFactory.httpMethod.equals("HEAD") && !Void.class.equals(responseType)) {, +        throw methodError("HEAD method must use Void as response type.");, +      }, +, +      return new HttpServiceMethod<>(this);, +    }, +, +    private CallAdapter<ResponseT, ReturnT> createCallAdapter() {, +      Type returnType = method.getGenericReturnType();, +      if (Utils.hasUnresolvableType(returnType)) {, +        throw methodError(, +            "Method return type must not include a type variable or wildcard: %s", returnType);, +      }, +      if (returnType == void.class) {, +        throw methodError("Service methods cannot return void.");, +      }, +      Annotation[] annotations = method.getAnnotations();, +      try {, +        //noinspection unchecked, +        return (CallAdapter<ResponseT, ReturnT>) retrofit.callAdapter(returnType, annotations);, +      } catch (RuntimeException e) { // Wide exception range because factories are user code., +        throw methodError(e, "Unable to create call adapter for %s", returnType);]
[+++ b/pom.xml, +    <jackson.version>2.9.4</jackson.version>]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, + * {@code Single}, {@link Completable} and {@code Maybe} type parameter:]
[+++ b/pom.xml, +    <moshi.version>1.3.0</moshi.version>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +import java.util.concurrent.Callable;, +import okhttp3.ResponseBody;, +import retrofit2.Response;, +  private static final int DEFAULT_ERROR_PERCENT = 0; // 0% of network calls will return errors., +, +  /** Applies {@link NetworkBehavior} to instances of {@code T}. */, +  public interface Adapter<T> {, +    /**, +     * Apply {@code behavior} to {@code value} so that it exhibits the configured network behavior, +     * traits when interacted with., +     */, +    T applyBehavior(NetworkBehavior behavior, T value);, +  }, +  private volatile int errorPercent = DEFAULT_ERROR_PERCENT;, +  private volatile Callable<Response<?>> errorFactory = new Callable<Response<?>>() {, +    @Override public Response<?> call() {, +      return Response.error(500, ResponseBody.create(null, new byte[0]));, +    }, +  };, +   * It is a best practice to remove the stack trace from {@code exception} since it can, +   * misleadingly point to code unrelated to this class., +  public void setFailureException(Throwable exception) {, +    if (exception == null) {, +      throw new NullPointerException("exception == null");, +    this.failureException = exception;, +  /** The percentage of calls to {@link #calculateIsError()} that return {@code true}. */, +  public int errorPercent() {, +    return errorPercent;, +  }, +, +  /** Set the percentage of calls to {@link #calculateIsError()} that return {@code true}. */, +  public void setErrorPercent(int errorPercent) {, +    if (errorPercent < 0 || errorPercent > 100) {, +      throw new IllegalArgumentException("Error percentage must be between 0 and 100.");, +    }, +    this.errorPercent = errorPercent;, +  }, +, +  /**, +   * Set the error response factory to be used when an error is triggered. This factory may only, +   * return responses for which {@link Response#isSuccessful()} returns false., +   */, +  public void setErrorFactory(Callable<Response<?>> errorFactory) {, +    if (errorFactory == null) {, +      throw new NullPointerException("errorFactory == null");, +    }, +    this.errorFactory = errorFactory;, +  }, +, +  /** The HTTP error to be used when an error is triggered. */, +  public Response<?> createErrorResponse() {, +    Response<?> call;, +    try {, +      call = errorFactory.call();, +    } catch (Exception e) {, +      throw new IllegalStateException("Error factory threw an exception.", e);, +    }, +    if (call == null) {, +      throw new IllegalStateException("Error factory returned null.");, +    }, +    if (call.isSuccessful()) {, +      throw new IllegalStateException("Error factory returned successful response.");, +    }, +    return call;, +  }, +, +    return random.nextInt(100) < failurePercent;, +  }, +, +  /**, +   * Randomly determine whether this call should result in an HTTP error in accordance with, +   * configured behavior. When true, {@link #createErrorResponse()} should be returned., +   */, +  public boolean calculateIsError() {, +    return random.nextInt(100) < errorPercent;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +import java.util.concurrent.Callable;, +import okhttp3.ResponseBody;, +import retrofit2.Response;, +  private static final int DEFAULT_ERROR_PERCENT = 0; // 0% of network calls will return errors., +]
[+++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +    addPathParam(name, value, true);, +  }, +, +  @Override public void addEncodedPathParam(String name, String value) {, +    addPathParam(name, value, false);, +  }, +, +  void addPathParam(String name, String value, boolean urlEncodeValue) {, +      if (urlEncodeValue) {, +        // URLEncoder encodes for use as a query parameter. Path encoding uses %20 to, +        // encode spaces rather than +. Query encoding difference specified in HTML spec., +        // Any remaining plus signs represent spaces as already URLEncoded., +        encodedValue = encodedValue.replace("+", "%20");, +      } else {, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +      }, +    addQueryParam(name, value, true);, +  }, +, +  @Override public void addEncodedQueryParam(String name, String value) {, +    addQueryParam(name, value, false);, +  }, +, +  void addQueryParam(String name, String value, boolean urlEncodeValue) {, +      if (urlEncodeValue) {, +      }, +        case ENCODED_PATH:, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Path parameter \"" + name + "\" value must not be null.");, +          }, +          addEncodedPathParam(name, value.toString());, +          break;, +        case ENCODED_QUERY:, +          if (value != null) { // Skip null values., +            addEncodedQueryParam(name, value.toString());, +          }, +          break;, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +    addPathParam(name, value, true);, +  }, +, +  @Override public void addEncodedPathParam(String name, String value) {, +    addPathParam(name, value, false);, +  }, +, +  void addPathParam(String name, String value, boolean urlEncodeValue) {, +      if (urlEncodeValue) {, +        // URLEncoder encodes for use as a query parameter. Path encoding uses %20 to, +        // encode spaces rather than +. Query encoding difference specified in HTML spec., +        // Any remaining plus signs represent spaces as already URLEncoded., +        encodedValue = encodedValue.replace("+", "%20");, +      } else {, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +      }, +    addQueryParam(name, value, true);, +  }, +, +  @Override public void addEncodedQueryParam(String name, String value) {, +    addQueryParam(name, value, false);, +  }, +, +  void addQueryParam(String name, String value, boolean urlEncodeValue) {, +      if (urlEncodeValue) {, +      }, +        case ENCODED_PATH:, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Path parameter \"" + name + "\" value must not be null.");, +          }, +          addEncodedPathParam(name, value.toString());, +          break;, +        case ENCODED_QUERY:, +          if (value != null) { // Skip null values., +            addEncodedQueryParam(name, value.toString());, +          }, +          break;, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +    /**, +     * Add a path parameter replacement without first URI encoding. This works exactly like a, +     * {@link retrofit.http.EncodedPath &#64;EncodedPath}-annotated method argument., +     */, +    void addEncodedPathParam(String name, String value);, +, +, +    /**, +     * Add an additional query parameter without first URI encoding. This will not replace any, +     * existing query parameters., +     */, +    void addEncodedQueryParam(String name, String value);, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java]
[+++ b/revision.properties, +retrofit.revision=0.2-SNAPSHOT]
[+++ b/modules/core/src/retrofit/core/Callback.java, +   * @param response to show user, or null if no message was returned, +  void clientError(ErrorResponse response);, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @param response to show user, or null if no message was returned, +  void clientError(ErrorResponse response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @param response to show user, or null if no message was returned, +  void clientError(ErrorResponse response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/ErrorResponse.java, +// Copyright 2010 Square, Inc., +package retrofit.core;, +, +/**, + * Information for a client error screen or dialog, including the screen title, + * and message. Either field may be null., + *, + * @author Eric Burke (eric@squareup.com), + */, +public class ErrorResponse {, +  private final String title;, +  private final String message;, +, +  /**, +   * Constructs a new message, though arguments may be null., +   *, +   * @param title       a few words for a dialog title or heading, or null., +   * @param message     a sentence or two with a more detailed, user friendly, +   *                    message, or null., +   */, +  public ErrorResponse(String title, String message) {, +    this.title = title;, +    this.message = message;, +  }, +, +  /** Returns a few words useful for a dialog title or heading, might be null. */, +  public String getTitle() {, +    return title;, +  }, +, +  /** Returns a sentence or two with a user friendly message. */, +  public String getMessage() {, +    return message;, +  }, +}, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @param response to show user, or null if no message was returned, +  void clientError(ErrorResponse response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/ErrorResponse.java, +// Copyright 2010 Square, Inc., +package retrofit.core;, +, +/**, + * Information for a client error screen or dialog, including the screen title, + * and message. Either field may be null., + *, + * @author Eric Burke (eric@squareup.com), + */, +public class ErrorResponse {, +  private final String title;, +  private final String message;, +, +  /**, +   * Constructs a new message, though arguments may be null., +   *, +   * @param title       a few words for a dialog title or heading, or null., +   * @param message     a sentence or two with a more detailed, user friendly, +   *                    message, or null., +   */, +  public ErrorResponse(String title, String message) {, +    this.title = title;, +    this.message = message;, +  }, +, +  /** Returns a few words useful for a dialog title or heading, might be null. */, +  public String getTitle() {, +    return title;, +  }, +, +  /** Returns a sentence or two with a user friendly message. */, +  public String getMessage() {, +    return message;, +  }, +}, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import retrofit.core.ErrorResponse;, +      callback.clientError(parseErrorResponse(body));, +   *   "message": "That email is already taken. Please enter another address.", +  private static ErrorResponse parseErrorResponse(String body) {, +        return new ErrorResponse(, +            error.message_title, error.message);, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @param response to show user, or null if no message was returned, +  void clientError(ErrorResponse response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/ErrorResponse.java, +// Copyright 2010 Square, Inc.]
[+++ b/pom.xml, +    <scala.version>2.12.3</scala.version>, +        <groupId>org.scala-lang</groupId>, +        <artifactId>scala-library</artifactId>, +        <version>${scala.version}</version>, +      </dependency>, +      <dependency>, +++ b/pom.xml, +    <scala.version>2.12.3</scala.version>, +        <groupId>org.scala-lang</groupId>, +        <artifactId>scala-library</artifactId>, +        <version>${scala.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit-adapters/pom.xml, +    <module>scala</module>, +++ b/pom.xml, +    <scala.version>2.12.3</scala.version>, +        <groupId>org.scala-lang</groupId>, +        <artifactId>scala-library</artifactId>, +        <version>${scala.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit-adapters/pom.xml, +    <module>scala</module>, +++ b/retrofit-adapters/scala/README.md, +Scala Adapter, +=============, +, +An `Adapter` for adapting Scala `Future`., +, +, +Usage, +-----, +, +Add `ScalaCallAdapterFactory` as a `Call` adapter when building your `Retrofit` instance:, +```java, +Retrofit retrofit = new Retrofit.Builder(), +    .baseUrl("https://example.com/"), +    .addCallAdapterFactory(ScalaCallAdapterFactory.create()), +    .build();, +```, +, +Your service methods can now use `Future` as their return type., +```java, +interface MyService {, +  @GET("/user"), +  Future<User> getUser();, +}, +```, +, +, +Download, +--------, +, +Download [the latest JAR][2] or grab via [Maven][3]:, +```xml, +<dependency>, +  <groupId>com.squareup.retrofit2</groupId>, +  <artifactId>adapter-scala</artifactId>, +  <version>latest.version</version>, +</dependency>, +```, +or [Gradle][3]:, +```groovy, +compile 'com.squareup.retrofit2:adapter-scala:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [2]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=adapter-scala&v=LATEST, + [3]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22adapter-scala%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/pom.xml, +    <scala.version>2.12.3</scala.version>, +        <groupId>org.scala-lang</groupId>, +        <artifactId>scala-library</artifactId>, +        <version>${scala.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit-adapters/pom.xml, +    <module>scala</module>, +++ b/retrofit-adapters/scala/README.md, +Scala Adapter, +=============, +, +An `Adapter` for adapting Scala `Future`., +, +, +Usage, +-----, +, +Add `ScalaCallAdapterFactory` as a `Call` adapter when building your `Retrofit` instance:, +```java, +Retrofit retrofit = new Retrofit.Builder(), +    .baseUrl("https://example.com/"), +    .addCallAdapterFactory(ScalaCallAdapterFactory.create()), +    .build();]
[+++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ /dev/null, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit2/mock/RxJavaBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.mock;, +, +import rx.Observable;, +import rx.functions.Func1;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  public static RxJavaBehaviorAdapter create() {, +    return new RxJavaBehaviorAdapter();, +  }, +, +  private RxJavaBehaviorAdapter() {, +  }, +, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +    if (value instanceof Observable) {, +      return applyObservableBehavior(behavior, (Observable<?>) value);, +    }, +    String name = value.getClass().getCanonicalName();, +    if ("rx.Single".equals(name)) {, +      // Apply behavior to the Single from a separate class. This defers classloading such that, +      // regular Observable operation can be leveraged without relying on this unstable RxJava API.]
[+++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>]
[+++ b/retrofit-adapters/pom.xml, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor, Call<T> delegate) {, +    return new BehaviorCall<>(behavior, backgroundExecutor, delegate.clone());, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +            callback.onFailure(behavior.failureException());, +                callback.onResponse(response);, +                callback.onFailure(t);, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor, Call<T> delegate) {, +    return new BehaviorCall<>(behavior, backgroundExecutor, delegate.clone());, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +            callback.onFailure(behavior.failureException());, +                callback.onResponse(response);, +                callback.onFailure(t);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.mock;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import java.lang.reflect.Type;, +import retrofit2.Call;, +import retrofit2.CallAdapter;, +import retrofit2.Retrofit;, +, +/**, + * Applies {@linkplain NetworkBehavior behavior} to responses and adapts them into the appropriate, + * return type using the {@linkplain Retrofit#callAdapterFactories() call adapters} of, + * {@link Retrofit}., + *, + * @see MockRetrofit#create(Class), + */, +public final class BehaviorDelegate<T> {, +  private final Retrofit retrofit;, +  private final NetworkBehavior behavior;, +  private final Class<T> service;, +, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, Class<T> service) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.service = service;, +  }, +, +  public T returningResponse(Object response) {, +    return returning(Calls.response(response));, +  }, +, +  @SuppressWarnings("unchecked") // Single-interface proxy creation guarded by parameter safety., +  public T returning(Call<?> call) {, +    final Call<?> behaviorCall =, +        new BehaviorCall<>(behavior, retrofit.client().getDispatcher().getExecutorService(), call);, +    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class[] { service },, +        new InvocationHandler() {, +          @Override, +          public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {, +            Type returnType = method.getGenericReturnType();, +            Annotation[] methodAnnotations = method.getAnnotations();]
[+++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, +    @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, +    @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +        result = ServiceMethod.parseAnnotations(this, method);, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, +    @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +        result = ServiceMethod.parseAnnotations(this, method);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +final class ServiceMethod<ResponseT, ReturnT> {, +  static <ResponseT, ReturnT> ServiceMethod<ResponseT, ReturnT> parseAnnotations(Retrofit retrofit,, +      Method method) {, +    return new ServiceMethod.Builder<ResponseT, ReturnT>(retrofit, method).build();, +  }, +, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +  ServiceMethod(Builder<ResponseT, ReturnT> builder) {, +  ReturnT invoke(@Nullable Object[] args) {, +    return callAdapter.adapt(new OkHttpCall<>(this, args));, +  ResponseT toResponse(ResponseBody body) throws IOException {, +  private static final class Builder<ResponseT, ReturnT> {, +    Converter<ResponseBody, ResponseT> responseConverter;, +    CallAdapter<ResponseT, ReturnT> callAdapter;, +    ServiceMethod<ResponseT, ReturnT> build() {, +    private CallAdapter<ResponseT, ReturnT> createCallAdapter() {, +        return (CallAdapter<ResponseT, ReturnT>) retrofit.callAdapter(returnType, annotations);, +    private Converter<ResponseBody, ResponseT> createResponseConverter() {, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, +    @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +        result = ServiceMethod.parseAnnotations(this, method);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +final class ServiceMethod<ResponseT, ReturnT> {, +  static <ResponseT, ReturnT> ServiceMethod<ResponseT, ReturnT> parseAnnotations(Retrofit retrofit,, +      Method method) {, +    return new ServiceMethod.Builder<ResponseT, ReturnT>(retrofit, method).build();, +  }, +, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +  ServiceMethod(Builder<ResponseT, ReturnT> builder) {, +  ReturnT invoke(@Nullable Object[] args) {]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.7.0-SNAPSHOT</version>, +  <name>HTTP</name>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.7.0-SNAPSHOT</version>, +  <name>HTTP</name>, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import static retrofit.internal.Objects.nonNull;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.7.0-SNAPSHOT</version>, +  <name>HTTP</name>, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import static retrofit.internal.Objects.nonNull;, +++ b/io/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.7.0-SNAPSHOT</version>, +  <name>I/O</name>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.7.0-SNAPSHOT</version>, +  <name>HTTP</name>, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import static retrofit.internal.Objects.nonNull;, +++ b/io/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.7.0-SNAPSHOT</version>, +  <name>I/O</name>, +++ b/io/src/main/java/retrofit/internal/Objects.java, +// Copyright 2010 Square, Inc., +package retrofit.internal;, +, +/**, + * Object utility methods., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class Objects {, +, +  /**, +   * Returns t unless it's null., +   *, +   * @throws NullPointerException if t is null, +   */, +  public static <T> T nonNull(T t, String name) {, +    if (t == null) throw new NullPointerException(name);, +    return t;, +  }, +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.7.0-SNAPSHOT</version>, +  <name>HTTP</name>, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import static retrofit.internal.Objects.nonNull;, +++ b/io/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.7.0-SNAPSHOT</version>, +  <name>I/O</name>, +++ b/io/src/main/java/retrofit/internal/Objects.java, +// Copyright 2010 Square, Inc., +package retrofit.internal;, +, +/**, + * Object utility methods., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class Objects {]
[+++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <version>1.0.0</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <version>1.0.0</version>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <version>1.0.0</version>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/samples/github-client/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <version>1.0.0</version>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/samples/github-client/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/samples/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>]
[+++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/samples/twitter-client/src/main/java/com/squareup/retrofit/sample/twitter/Client.java, +// Copyright 2012 Square, Inc., +package com.squareup.retrofit.sample.twitter;, +, +import com.google.gson.Gson;, +import org.apache.http.impl.client.DefaultHttpClient;, +import retrofit.http.GET;, +import retrofit.http.GsonConverter;, +import retrofit.http.RestAdapter;, +import retrofit.http.Server;, +, +import javax.inject.Named;, +import java.util.List;, +, +public class Client {, +  private static final String API_URL = "https://api.twitter.com/1/";, +, +  class Tweet {, +    String text;, +  }, +, +  interface Twitter {, +    @GET("statuses/user_timeline.json"), +    List<Tweet> tweets(@Named("screen_name") String user);, +  }, +, +  public static void main(String... args) {, +    // Create a very simple REST adapter which points the Twitter API endpoint., +    RestAdapter restAdapter = new RestAdapter.Builder(), +        .setServer(new Server(API_URL)), +        .setClient(new DefaultHttpClient()), +        .setConverter(new GsonConverter(new Gson())), +        .build();, +, +    // Create an instance of our Twitter API interface., +    Twitter twitter = restAdapter.create(Twitter.class);, +, +    // Fetch and print a list of the 20 most recent tweets for a user., +    List<Tweet> tweets = twitter.tweets("horse_ebooks");, +    for (Tweet tweet : tweets) {, +      System.out.println(tweet.text);, +    }, +  }, +}]
[+++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, +   two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, +   two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, +   two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +    <module>retrofit-converters</module>, +    <okhttp.version>1.1.1</okhttp.version>, +, +    <!-- Converter Dependencies -->, +    <protobuf.version>2.5.0</protobuf.version>, +        <groupId>com.google.protobuf</groupId>, +        <artifactId>protobuf-java</artifactId>, +        <version>${protobuf.version}</version>, +      </dependency>, +, +      <dependency>, +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, +   two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +    <module>retrofit-converters</module>, +    <okhttp.version>1.1.1</okhttp.version>, +, +    <!-- Converter Dependencies -->, +    <protobuf.version>2.5.0</protobuf.version>, +        <groupId>com.google.protobuf</groupId>, +        <artifactId>protobuf-java</artifactId>]
[+++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/samples/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>converter-simplexml</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>converter-simplexml</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/src/main/java/com/example/retrofit/JsonAndXmlConverters.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.annotation.Retention;, +import java.lang.reflect.Type;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.simpleframework.xml.Attribute;, +import org.simpleframework.xml.Default;, +import org.simpleframework.xml.DefaultType;, +import retrofit2.Call;, +import retrofit2.Converter;, +import retrofit2.Retrofit;, +import retrofit2.converter.gson.GsonConverterFactory;, +import retrofit2.converter.simplexml.SimpleXmlConverterFactory;, +import retrofit2.http.GET;, +, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Both the Gson converter and the Simple Framework converter accept all types. Because of this,, + * you cannot use both in a single service by default. In order to work around this, we can create, + * an @Json and @Xml annotation to declare which serialization format each endpoint should use and, + * then write our own Converter.Factory which delegates to either the Gson or Simple Framework, + * converter., + */, +public final class JsonAndXmlConverters {, +  @Retention(RUNTIME), +  @interface Json {, +  }, +, +  @Retention(RUNTIME), +  @interface Xml {, +  }, +, +  static class QualifiedTypeConverterFactory extends Converter.Factory {, +    private final Converter.Factory jsonFactory;, +    private final Converter.Factory xmlFactory;, +, +    QualifiedTypeConverterFactory(Converter.Factory jsonFactory, Converter.Factory xmlFactory) {, +      this.jsonFactory = jsonFactory;, +      this.xmlFactory = xmlFactory;, +    }, +, +    @Override, +    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +      for (Annotation annotation : annotations) {, +        if (annotation instanceof Json) {, +          return jsonFactory.responseBodyConverter(type, annotations, retrofit);, +        }, +        if (annotation instanceof Xml) {, +          return xmlFactory.responseBodyConverter(type, annotations, retrofit);, +        }, +      }, +      return null;, +    }, +, +    @Override, +    public Converter<?, RequestBody> requestBodyConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +      for (Annotation annotation : annotations) {, +        if (annotation instanceof Json) {, +          return jsonFactory.requestBodyConverter(type, annotations, retrofit);, +        }, +        if (annotation instanceof Xml) {, +          return jsonFactory.requestBodyConverter(type, annotations, retrofit);, +        }, +      }]
[+++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +  public Converter<?, RequestBody> requestBodyConverter(Type type,, +      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarsConverterFactory.java]
[+++ b/pom.xml, +    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/pom.xml, +    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/retrofit/src/main/java/retrofit/http/PartMap.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/pom.xml, +    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/retrofit/src/main/java/retrofit/http/PartMap.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/retrofit/src/test/java/retrofit/CallTest.java, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;, +    server.enqueue(new MockResponse(), +        .setBody("1234"), +        .setSocketPolicy(DISCONNECT_DURING_RESPONSE_BODY));, +    Call<ResponseBody> buffered = example.getBody();, +    // When buffering we will detect all socket problems before returning the Response., +    try {, +      buffered.execute();, +      fail();, +    } catch (IOException e) {, +      assertThat(e).hasMessage("unexpected end of stream");, +    }, +    server.enqueue(new MockResponse(), +        .setBody("1234"), +        .setSocketPolicy(DISCONNECT_DURING_RESPONSE_BODY));, +    ResponseBody streamedBody = response.body();, +    // When streaming we only detect socket problems as the ResponseBody is read., +    try {, +      streamedBody.string();, +      fail();, +    } catch (IOException e) {, +      assertThat(e).hasMessage("unexpected end of stream");, +    }]
[+++ b/README.md, +++ b/README.md, +++ b/pom.xml, +    <android.version>4.1.1.4</android.version>, +    <android.platform>16</android.platform>, +          <version>2.5</version>, +++ b/README.md, +++ b/pom.xml, +    <android.version>4.1.1.4</android.version>, +    <android.platform>16</android.platform>, +          <version>2.5</version>, +++ /dev/null, +++ b/README.md, +++ b/pom.xml, +    <android.version>4.1.1.4</android.version>, +    <android.platform>16</android.platform>, +          <version>2.5</version>, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/pom.xml, +    <android.version>4.1.1.4</android.version>, +    <android.platform>16</android.platform>, +          <version>2.5</version>, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi")));, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi")));, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +, +/**, + * A {@link Converter} which uses SimpleXML for reading and writing entities., + *, + * @author Fabien Ric (fabien.ric@gmail.com), + */, +public class SimpleXMLConverter implements Converter {, +  private static final boolean DEFAULT_STRICT = true;, +  private static final String CHARSET = "UTF-8";, +  private static final MediaType MEDIA_TYPE =, +      MediaType.parse("application/xml; charset=" + CHARSET);, +, +  private final Serializer serializer;, +, +  private final boolean strict;, +, +  public SimpleXMLConverter() {, +    this(DEFAULT_STRICT);, +  }, +, +  public SimpleXMLConverter(boolean strict) {, +    this(new Persister(), strict);, +  }, +, +  public SimpleXMLConverter(Serializer serializer) {, +    this(serializer, DEFAULT_STRICT);, +  }, +, +  public SimpleXMLConverter(Serializer serializer, boolean strict) {, +    this.serializer = serializer;, +    this.strict = strict;, +  }, +, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +    try {, +      return serializer.read((Class<?>) type, is, strict);, +    } catch (IOException e) {, +      throw e;, +    } catch (Exception e) {, +      throw new RuntimeException(e);, +    } finally {, +      try {, +        is.close();, +      } catch (IOException ignored) {, +      }, +    }, +  }, +, +  @Override public RequestBody toBody(Object source, Type type) {, +    byte[] bytes;, +    try {, +      Buffer buffer = new Buffer();, +      OutputStreamWriter osw = new OutputStreamWriter(buffer.outputStream(), CHARSET);, +      serializer.write(source, osw);, +      osw.flush();, +      bytes = buffer.readByteArray();, +    } catch (Exception e) {, +      throw new AssertionError(e);, +    }, +    return RequestBody.create(MEDIA_TYPE, bytes);, +  }, +, +  public boolean isStrict() {, +    return strict;, +  }, +}, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi")));, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +]
[+++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/SingleHelper.java, +  public static Object applySingleBehavior(final NetworkBehavior behavior, Object value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/SingleHelper.java, +  public static Object applySingleBehavior(final NetworkBehavior behavior, Object value) {, +++ b/retrofit-adapters/rxjava-mock/src/test/java/retrofit/mock/RxJavaBehaviorAdapterTest.java, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +    NetworkBehavior.Adapter<?> adapter = RxJavaBehaviorAdapter.create();, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/SingleHelper.java, +  public static Object applySingleBehavior(final NetworkBehavior behavior, Object value) {, +++ b/retrofit-adapters/rxjava-mock/src/test/java/retrofit/mock/RxJavaBehaviorAdapterTest.java, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +    NetworkBehavior.Adapter<?> adapter = RxJavaBehaviorAdapter.create();, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/SingleHelper.java, +  public static Object applySingleBehavior(final NetworkBehavior behavior, Object value) {, +++ b/retrofit-adapters/rxjava-mock/src/test/java/retrofit/mock/RxJavaBehaviorAdapterTest.java, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +    NetworkBehavior.Adapter<?> adapter = RxJavaBehaviorAdapter.create();, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/SingleHelper.java, +  public static Object applySingleBehavior(final NetworkBehavior behavior, Object value) {, +++ b/retrofit-adapters/rxjava-mock/src/test/java/retrofit/mock/RxJavaBehaviorAdapterTest.java, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +    NetworkBehavior.Adapter<?> adapter = RxJavaBehaviorAdapter.create();, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Executor callbackExecutor, Call<T> delegate) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/SingleHelper.java, +  public static Object applySingleBehavior(final NetworkBehavior behavior, Object value) {, +++ b/retrofit-adapters/rxjava-mock/src/test/java/retrofit/mock/RxJavaBehaviorAdapterTest.java, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +    NetworkBehavior.Adapter<?> adapter = RxJavaBehaviorAdapter.create();, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Executor callbackExecutor, Call<T> delegate) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +public final class CallBehaviorAdapter implements NetworkBehavior.Adapter<Call<?>> {, +  @Override public Call<?> applyBehavior(NetworkBehavior behavior, Call<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/SingleHelper.java, +  public static Object applySingleBehavior(final NetworkBehavior behavior, Object value) {, +++ b/retrofit-adapters/rxjava-mock/src/test/java/retrofit/mock/RxJavaBehaviorAdapterTest.java, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +    NetworkBehavior.Adapter<?> adapter = RxJavaBehaviorAdapter.create();, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.atomic.AtomicBoolean;, +  /**, +   * Invokes {@code callable} once for the returned {@link Call} and once for each instance that is, +   * obtained from {@linkplain Call#clone() cloning} the returned {@link Call}., +   */, +  public static <T> Call<T> defer(Callable<Call<T>> callable) {, +    return new DeferredCall<>(callable);, +  }, +, +    return new FakeCall<>(Response.success(successValue), null);, +  public static <T> Call<T> response(Response<T> response) {, +    return new FakeCall<>(response, null);, +  public static <T> Call<T> failure(IOException failure) {, +    return new FakeCall<>(null, failure);, +, +  static final class FakeCall<T> implements Call<T> {, +    private final Response<T> response;, +    private final IOException error;, +    private final AtomicBoolean canceled = new AtomicBoolean();, +    private final AtomicBoolean executed = new AtomicBoolean();, +, +    FakeCall(Response<T> response, IOException error) {, +      if ((response == null) == (error == null)) {, +        throw new AssertionError("Only one of response or error can be set.");, +      }, +      this.response = response;, +      this.error = error;, +    }, +, +    @Override public Response<T> execute() throws IOException {, +      if (!executed.compareAndSet(false, true)) {, +        throw new IllegalStateException("Already executed");, +      }, +      if (canceled.get()) {, +        throw new IOException("canceled");, +      }, +      if (response != null) {, +        return response;, +      }, +      throw error;, +    }, +, +    @Override public void enqueue(Callback<T> callback) {, +      if (callback == null) {, +        throw new NullPointerException("callback == null");, +      }, +      if (!executed.compareAndSet(false, true)) {, +        throw new IllegalStateException("Already executed");, +      }, +      if (canceled.get()) {, +        callback.onFailure(this, new IOException("canceled"));, +      } else if (response != null) {, +        callback.onResponse(this, response);, +      } else {, +        callback.onFailure(this, error);, +      }, +    }, +, +    @Override public boolean isExecuted() {, +      return executed.get();, +    }, +, +    @Override public void cancel() {, +      canceled.set(true);, +    }, +, +    @Override public boolean isCanceled() {, +      return canceled.get();, +    }, +, +    @Override public Call<T> clone() {, +      return new FakeCall<>(response, error);, +    }, +, +    @Override public Request request() {, +      if (response != null) {, +        return response.raw().request();, +      }, +      return new Request.Builder().url("http://localhost").build();, +    }, +  }, +, +  static final class DeferredCall<T> implements Call<T> {, +    private final Callable<Call<T>> callable;, +    private Call<T> delegate;, +, +    DeferredCall(Callable<Call<T>> callable) {, +      this.callable = callable;, +    }, +, +    private synchronized Call<T> getDelegate() {, +      Call<T> delegate = this.delegate;, +      if (delegate == null) {, +        try {, +          delegate = callable.call();, +        } catch (IOException e) {]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyCallable.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.Callable;, +import retrofit2.Response;, +, +final class BodyCallable<R> implements Callable<R> {, +  private final Callable<Response<R>> responseCallable;, +, +  BodyCallable(Callable<Response<R>> responseCallable) {, +    this.responseCallable = responseCallable;, +  }, +, +  @Override public R call() throws Exception {, +    Response<R> response = responseCallable.call();, +    if (response.isSuccessful()) {, +      return response.body();, +    }, +    throw new HttpException(response);, +  }, +}, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyCallable.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.Callable;, +import retrofit2.Response;, +, +final class BodyCallable<R> implements Callable<R> {, +  private final Callable<Response<R>> responseCallable;, +, +  BodyCallable(Callable<Response<R>> responseCallable) {, +    this.responseCallable = responseCallable;, +  }, +, +  @Override public R call() throws Exception {, +    Response<R> response = responseCallable.call();, +    if (response.isSuccessful()) {, +      return response.body();, +    }, +    throw new HttpException(response);, +  }, +}, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyCallable.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.Callable;, +import retrofit2.Response;, +, +final class BodyCallable<R> implements Callable<R> {, +  private final Callable<Response<R>> responseCallable;, +, +  BodyCallable(Callable<Response<R>> responseCallable) {, +    this.responseCallable = responseCallable;, +  }]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +package retrofit.http;, +, +import android.net.http.AndroidHttpClient;, +import android.os.Process;, +import com.google.gson.Gson;, +import java.util.concurrent.Executor;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.atomic.AtomicInteger;, +import javax.inject.Provider;, +import org.apache.http.client.HttpClient;, +import org.apache.http.impl.client.DefaultHttpClient;, +import retrofit.android.MainThreadExecutor;, +, +import static android.os.Process.THREAD_PRIORITY_BACKGROUND;, +import static retrofit.http.RestAdapter.SynchronousExecutor;, +, +abstract class Platform {, +  private static final Platform PLATFORM = findPlatform();, +, +  static Platform get() {, +    return PLATFORM;, +  }, +, +  private static Platform findPlatform() {, +    try {, +      Class.forName("android.os.Build");, +      return new Android();, +    } catch (ClassNotFoundException e) {, +      return new Base();, +    }, +  }, +, +  Converter defaultConverter() {, +    return new GsonConverter(new Gson());, +  }, +  abstract Provider<HttpClient> defaultHttpClient();, +  abstract Executor defaultHttpExecutor();, +  abstract Executor defaultCallbackExecutor();, +, +  /** Provides sane defaults for operation on the JVM. */, +  private static class Base extends Platform {, +    @Override Provider<HttpClient> defaultHttpClient() {, +      return new Provider<HttpClient>() {, +        @Override public HttpClient get() {, +          return new DefaultHttpClient();, +        }, +      };, +    }, +, +    @Override Executor defaultHttpExecutor() {, +      return Executors.newCachedThreadPool(new ThreadFactory() {, +        private final AtomicInteger threadCounter = new AtomicInteger();, +, +        @Override public Thread newThread(final Runnable r) {, +          return new Thread(new Runnable() {, +            @Override public void run() {, +              Thread.currentThread().setPriority(THREAD_PRIORITY_BACKGROUND);, +              r.run();, +            }, +          }, "Retrofit-" + threadCounter.getAndIncrement());, +        }, +      });, +    }, +, +    @Override Executor defaultCallbackExecutor() {, +      return new SynchronousExecutor();, +    }, +  }, +, +  /** Provides sane defaults for operation on Android. */, +  private static class Android extends Platform {, +    @Override Provider<HttpClient> defaultHttpClient() {, +      // TODO use HttpUrlConnection on Android 2.3+, +      return new Provider<HttpClient>() {, +        @Override public HttpClient get() {, +          return AndroidHttpClient.newInstance("Retrofit");, +        }, +      };, +    }, +, +    @Override Executor defaultHttpExecutor() {, +      return Executors.newCachedThreadPool(new ThreadFactory() {, +        private final AtomicInteger threadCounter = new AtomicInteger();, +, +        @Override public Thread newThread(final Runnable r) {, +          return new Thread(new Runnable() {, +            @Override public void run() {, +              Process.setThreadPriority(THREAD_PRIORITY_BACKGROUND);, +              r.run();, +            }, +          }, "Retrofit-" + threadCounter.getAndIncrement());, +        }, +      });, +    }, +, +    @Override Executor defaultCallbackExecutor() {]
[+++ b/retrofit-converters/simplexml/README.md, +Deprecated – Please switch to the JAXB Converter, +------------------------------------------------, +, +The Simple XML project is no longer maintained. We recommend switching to the, +[JAXB converter](https://github.com/square/retrofit/tree/master/retrofit-converters/jaxb)., +, +-----, +, +++ b/retrofit-converters/simplexml/README.md, +Deprecated – Please switch to the JAXB Converter, +------------------------------------------------, +, +The Simple XML project is no longer maintained. We recommend switching to the, +[JAXB converter](https://github.com/square/retrofit/tree/master/retrofit-converters/jaxb)., +, +-----, +, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlConverterFactory.java, + *, + * @deprecated we recommend switching to the JAXB converter., +@Deprecated]
[+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +    boolean gotQueryName;, +    boolean gotQueryMap;, +          throw parameterError(method, p, "A @Url parameter must not come after a @Query.");, +        }, +        if (gotQueryName) {, +          throw parameterError(method, p, "A @Url parameter must not come after a @QueryName.");, +        }, +        if (gotQueryMap) {, +          throw parameterError(method, p, "A @Url parameter must not come after a @QueryMap.");, +        if (gotQueryName) {, +          throw parameterError(method, p, "A @Path parameter must not come after a @QueryName.");, +        }, +        if (gotQueryMap) {, +          throw parameterError(method, p, "A @Path parameter must not come after a @QueryMap.");, +        }, +        gotQueryName = true;, +        gotQueryMap = true;, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +    boolean gotQueryName;, +    boolean gotQueryMap;, +          throw parameterError(method, p, "A @Url parameter must not come after a @Query.");, +        }, +        if (gotQueryName) {, +          throw parameterError(method, p, "A @Url parameter must not come after a @QueryName.");, +        }, +        if (gotQueryMap) {, +          throw parameterError(method, p, "A @Url parameter must not come after a @QueryMap.");, +        if (gotQueryName) {, +          throw parameterError(method, p, "A @Path parameter must not come after a @QueryName.");, +        }, +        if (gotQueryMap) {, +          throw parameterError(method, p, "A @Path parameter must not come after a @QueryMap.");, +        }, +        gotQueryName = true;, +        gotQueryMap = true;, +++ b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java, +  @Test public void getWithQueryNameThenPathThrows() {, +    class Example {, +      @GET("/foo/bar/{ping}/") //, +      Call<ResponseBody> method(@QueryName String kit, @Path("ping") String ping) {, +        throw new AssertionError();, +      }, +    }, +, +    try {, +      buildRequest(Example.class, "kat", "pong");, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("A @Path parameter must not come after a @QueryName. (parameter #2)\n", +          + "    for method Example.method");, +    }, +  }, +, +  @Test public void getWithQueryMapThenPathThrows() {, +    class Example {, +      @GET("/foo/bar/{ping}/") //, +      Call<ResponseBody> method(@QueryMap Map<String, String> queries, @Path("ping") String ping) {, +        throw new AssertionError();, +      }, +    }, +, +    try {, +      buildRequest(Example.class, Collections.singletonMap("kit", "kat"), "pong");, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("A @Path parameter must not come after a @QueryMap. (parameter #2)\n", +          + "    for method Example.method");, +    }, +  }, +, +      assertThat(e).hasMessage("A @Url parameter must not come after a @Query. (parameter #2)\n", +          + "    for method Example.method");, +    }, +  }, +, +  @Test public void getWithQueryNameThenUrlThrows() {, +    class Example {, +      @GET, +      Call<ResponseBody> method(@QueryName String name, @Url String url) {, +        throw new AssertionError();, +      }, +    }, +, +    try {, +      buildRequest(Example.class, Collections.singletonMap("kit", "kat"), "foo/bar/");, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("A @Url parameter must not come after a @QueryName. (parameter #2)\n", +          + "    for method Example.method");, +    }, +  }, +, +  @Test public void getWithQueryMapThenUrlThrows() {, +    class Example {, +      @GET, +      Call<ResponseBody> method(@QueryMap Map<String, String> queries, @Url String url) {, +        throw new AssertionError();, +      }, +    }]
[+++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +    } finally {, +      value.close();]
[+++ b/http/pom.xml, +            <classifier>no_aop</classifier>, +++ b/http/pom.xml, +            <classifier>no_aop</classifier>, +++ b/pom.xml, +                <classifier>no_aop</classifier>]
[+++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.2.1-SNAPSHOT</version>]
[+++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, +    private final Executor httpExecutor;, +      httpExecutor = restAdapter.httpExecutor;, +        @Override public void call(final Subscriber<? super Object> subscriber) {, +          if (subscriber.isUnsubscribed()) return;, +          httpExecutor.execute(new Runnable() {, +            @Override public void run() {, +                if (subscriber.isUnsubscribed()) return;, +          });, +        }, +      });, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, +    private final Executor httpExecutor;, +      httpExecutor = restAdapter.httpExecutor;, +        @Override public void call(final Subscriber<? super Object> subscriber) {, +          if (subscriber.isUnsubscribed()) return;, +          httpExecutor.execute(new Runnable() {, +            @Override public void run() {, +                if (subscriber.isUnsubscribed()) return;, +          });, +        }, +      });, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, +    private final Executor httpExecutor;, +      httpExecutor = restAdapter.httpExecutor;, +        @Override public void call(final Subscriber<? super Object> subscriber) {, +          if (subscriber.isUnsubscribed()) return;, +          httpExecutor.execute(new Runnable() {, +            @Override public void run() {, +                if (subscriber.isUnsubscribed()) return;, +          });, +        }, +      });, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +package retrofit;, +, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executor;, +import java.util.concurrent.FutureTask;, +import rx.Observable;, +import rx.Subscriber;, +import rx.subscriptions.Subscriptions;, +, +/**, + * Utilities for supporting RxJava Observables., + * <p>, + * RxJava might not be on the available to use. Check {@link Platform#HAS_RX_JAVA} before calling., + */, +final class RxSupport {, +  private final Executor executor;, +  private final ErrorHandler errorHandler;, +, +  RxSupport(Executor executor, ErrorHandler errorHandler) {, +    this.executor = executor;, +    this.errorHandler = errorHandler;, +  }, +, +  Observable createRequestObservable(final Callable<ResponseWrapper> request) {, +    return Observable.create(new Observable.OnSubscribe<Object>() {, +      @Override public void call(Subscriber<? super Object> subscriber) {, +        if (subscriber.isUnsubscribed()) {, +          return;, +        }, +        FutureTask<Void> task = new FutureTask<Void>(getRunnable(subscriber, request), null);, +        // Subscribe to the future task of the network call allowing unsubscription., +        subscriber.add(Subscriptions.from(task));, +        executor.execute(task);, +      }, +    });, +  }, +, +  private Runnable getRunnable(final Subscriber<? super Object> subscriber,, +      final Callable<ResponseWrapper> request) {, +    return new Runnable() {, +      @Override public void run() {, +        try {, +          if (subscriber.isUnsubscribed()) {, +            return;, +          }, +          ResponseWrapper wrapper = request.call();, +          subscriber.onNext(wrapper.responseBody);, +          subscriber.onCompleted();, +        } catch (RetrofitError e) {, +          subscriber.onError(errorHandler.handleError(e));, +        } catch (Exception e) {, +          // This is from the Callable.  It shouldn't actually throw., +          throw new RuntimeException(e);]
[+++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/pom.xml, +  <version>2.0.0-beta4</version>, +    <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-beta4</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, null, false, null);, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, null, false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<Object> cb);, +    @GET("/") Observable<Object> doStuff();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +    final Object expected = new Object();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object result, Response response) {, +    final Object expected = new Object();, +      @Override public Observable<Object> doStuff() {, +    final Object expected = new Object();, +      @Override public Object doStuff() {, +    final Object expected = new Object();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +    final Object expected = new Object();, +      @Override public Observable<Object> doStuff() {, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +      @Override public Observable<Object> doStuff() {, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, null, false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<Object> cb);, +    @GET("/") Observable<Object> doStuff();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +    final Object expected = new Object();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object result, Response response) {, +    final Object expected = new Object();, +      @Override public Observable<Object> doStuff() {, +    final Object expected = new Object();, +      @Override public Object doStuff() {, +    final Object expected = new Object();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +    final Object expected = new Object();, +      @Override public Observable<Object> doStuff() {, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +      @Override public Observable<Object> doStuff() {, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isRaw) {, +            }, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, null, false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<Object> cb);, +    @GET("/") Observable<Object> doStuff();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +    final Object expected = new Object();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object result, Response response) {, +    final Object expected = new Object();, +      @Override public Observable<Object> doStuff() {, +    final Object expected = new Object();, +      @Override public Object doStuff() {, +    final Object expected = new Object();, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +    final Object expected = new Object();, +      @Override public Observable<Object> doStuff() {, +      @Override public void doStuff(Callback<Object> cb) {, +    mockService.doStuff(new Callback<Object>() {, +      @Override public void success(Object o, Response response) {, +      @Override public Observable<Object> doStuff() {, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isRaw) {, +            }, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.client.Response;, +import retrofit.http.Raw;, +  boolean isRaw;]
[+++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +public abstract class TestingUtils {, +    MultipartTypedOutput typedOutput = new MultipartTypedOutput();, +++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +public abstract class TestingUtils {, +    MultipartTypedOutput typedOutput = new MultipartTypedOutput();, +++ b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +    assertThat(fetchHeaders).hasSize(0);, +    assertThat(fetchHeaders).hasSize(0);, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +, +    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");, +    assertThat(response.getStatus()).isEqualTo(200);, +    assertThat(response.getReason()).isEqualTo("");, +    assertThat(response.getHeaders()).hasSize(3) //, +        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"),, +            new Header("Content-Type", "text/plain"));, +    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");, +, +    verifyNoMoreInteractions(creatingRequest);, +  }, +, +  @Test public void responseNullUrlPullsFromRequest() throws Exception {, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +    when(creatingRequest.getURL()).thenReturn(new URL(HOST + "/foo/bar/"));, +, +    HTTPResponse fetchResponse = mock(HTTPResponse.class);, +    when(fetchResponse.getHeaders()).thenReturn(, +        asList(new HTTPHeader("foo", "bar"), new HTTPHeader("kit", "kat"),, +            new HTTPHeader("Content-Type", "text/plain")));, +    when(fetchResponse.getContent()).thenReturn("hello".getBytes("UTF-8"));, +    when(fetchResponse.getFinalUrl()).thenReturn(null);, +    when(fetchResponse.getResponseCode()).thenReturn(200);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +, +    verifyNoMoreInteractions(creatingRequest);, +++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +public abstract class TestingUtils {, +    MultipartTypedOutput typedOutput = new MultipartTypedOutput();, +++ b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +    assertThat(fetchHeaders).hasSize(0);, +    assertThat(fetchHeaders).hasSize(0);, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +, +    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");, +    assertThat(response.getStatus()).isEqualTo(200);, +    assertThat(response.getReason()).isEqualTo("");, +    assertThat(response.getHeaders()).hasSize(3) //]
[+++ b/pom.xml, +    <moshi.version>1.4.0</moshi.version>, +++ b/pom.xml, +    <moshi.version>1.4.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +    if (serializeNulls) {, +      adapter = adapter.serializeNulls();, +    }, +    if (serializeNulls) {, +      adapter = adapter.serializeNulls();, +    }, +    return new MoshiRequestBodyConverter<>(adapter);, +++ b/pom.xml, +    <moshi.version>1.4.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +    if (serializeNulls) {, +      adapter = adapter.serializeNulls();, +    }, +    if (serializeNulls) {, +      adapter = adapter.serializeNulls();, +    }, +    return new MoshiRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiRequestBodyConverter.java, +  MoshiRequestBodyConverter(JsonAdapter<T> adapter) {]
[+++ b/.idea/vcs.xml, +    <mapping directory="" vcs="Git" />, +++ b/.idea/vcs.xml, +    <mapping directory="" vcs="Git" />, +++ b/modules/io/src/retrofit/io/Files.java, +, +  /**, +   * Create the indicated directory, if it doesn't already exist., +   *, +   * @throws IllegalStateException if there is an error creating the directory., +   * @throws IllegalArgumentException if param represents a file instead, +   *  of a directory., +   */, +  public static void makeDirectory(File directory) {, +    if (!directory.exists()) {, +      if (!directory.mkdirs()) {, +        throw new IllegalStateException("Error creating " + directory + ".");, +      }, +    } else {, +      if (!directory.isDirectory()) {, +        throw new IllegalArgumentException("File " + directory +, +            " is not a directory");, +      }, +    }, +  }, +, +  /**, +   * Build a File object from the given parts, appending each path part to, +   * the preceding part., +   */, +  public static File build(File baseFile, String... parts) {, +    File file = baseFile;, +    for (String part : parts) {, +      file = new File(file, part);, +    }, +    return file;, +  }]
[+++ b/pom.xml, +    <okhttp.version>3.10.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>3.10.0</okhttp.version>, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +    assertThat(request.url().toString()), +        .isEqualTo("http://example.com/foo/bar/pong%3F/?kit=kat%3F");, +    assertThat(request.url().toString()).isEqualTo("http://example.com/foo/bar/?hey=hey%21");]
[+++ b/pom.xml, +    <gson.version>2.6.1</gson.version>, +++ b/pom.xml, +    <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/pom.xml, +    <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonReader;, +  private final Gson gson;, +  GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {, +    this.gson = gson;, +    JsonReader jsonReader = gson.newJsonReader(value.charStream());, +      return adapter.read(jsonReader);, +++ b/pom.xml, +    <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonReader;, +  private final Gson gson;, +  GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {, +    this.gson = gson;, +    JsonReader jsonReader = gson.newJsonReader(value.charStream());, +      return adapter.read(jsonReader);, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java, +        .setLenient(), +, +  @Test public void deserializeUsesConfiguration() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("{/* a comment! */}"));, +, +    Response<AnImplementation> response =, +        service.anImplementation(new AnImplementation("value")).execute();, +    assertThat(response.body().getName()).isNull();, +  }]
[+++ b/android-native/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/http/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/http/pom.xml, +++ b/io/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/http/pom.xml, +++ b/io/pom.xml, +++ b/pom.xml, +    <parent>, +        <groupId>org.sonatype.oss</groupId>, +        <artifactId>oss-parent</artifactId>, +        <version>7</version>, +    </parent>, +, +        <android-maven.version>3.3.0</android-maven.version>, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/http/pom.xml, +++ b/io/pom.xml, +++ b/pom.xml, +    <parent>, +        <groupId>org.sonatype.oss</groupId>, +        <artifactId>oss-parent</artifactId>, +        <version>7</version>, +    </parent>, +, +        <android-maven.version>3.3.0</android-maven.version>, +++ b/sample-android/pom.xml]
[+++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.idea/.name, +retrofit, +++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.idea/.name, +retrofit, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="ProjectCodeStyleSettingsManager">, +    <option name="PER_PROJECT_SETTINGS">, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +    </option>, +  </component>, +</project>, +, +++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.idea/.name, +retrofit, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="ProjectCodeStyleSettingsManager">, +    <option name="PER_PROJECT_SETTINGS">, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +    </option>, +  </component>, +</project>, +, +++ b/.idea/compiler.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="CompilerConfiguration">, +    <option name="DEFAULT_COMPILER" value="Javac" />, +    <excludeFromCompile>, +      <directory url="file://$PROJECT_DIR$/sample-android/target/generated-sources/r" includeSubdirectories="true" />, +      <directory url="file://$PROJECT_DIR$/sample-android/target/generated-sources/aidl" includeSubdirectories="true" />, +    </excludeFromCompile>, +    <resourceExtensions />, +    <wildcardResourcePatterns>, +      <entry name="?*.properties" />, +      <entry name="?*.xml" />, +      <entry name="?*.gif" />, +      <entry name="?*.png" />, +      <entry name="?*.jpeg" />, +      <entry name="?*.jpg" />, +      <entry name="?*.html" />, +      <entry name="?*.dtd" />, +      <entry name="?*.tld" />, +      <entry name="?*.ftl" />, +    </wildcardResourcePatterns>, +    <annotationProcessing enabled="false" useClasspath="true" />, +  </component>, +  <component name="JavacSettings">, +    <option name="ADDITIONAL_OPTIONS_STRING" value="-target 1.6" />, +  </component>, +</project>, +, +++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.idea/.name, +retrofit, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="ProjectCodeStyleSettingsManager">, +    <option name="PER_PROJECT_SETTINGS">, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +    </option>, +  </component>, +</project>, +, +++ b/.idea/compiler.xml]
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, +  static final class RawPart extends ParameterHandler<MultipartBody.Part> {, +    static final RawPart INSTANCE = new RawPart();, +, +    private RawPart() {, +    }, +, +    @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, +      if (value != null) { // Skip null values., +        builder.addPart(value);, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, +  static final class RawPart extends ParameterHandler<MultipartBody.Part> {, +    static final RawPart INSTANCE = new RawPart();, +, +    private RawPart() {, +    }, +, +    @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, +      if (value != null) { // Skip null values., +        builder.addPart(value);, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void addPart(MultipartBody.Part part) {, +    multipartBuilder.addPart(part);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, +  static final class RawPart extends ParameterHandler<MultipartBody.Part> {, +    static final RawPart INSTANCE = new RawPart();, +, +    private RawPart() {, +    }, +, +    @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, +      if (value != null) { // Skip null values., +        builder.addPart(value);, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void addPart(MultipartBody.Part part) {, +    multipartBuilder.addPart(part);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.MultipartBody;, +        gotPart = true;, +, +        String partName = part.value();, +        Class<?> rawParameterType = Utils.getRawType(type);, +        if (partName.isEmpty()) {, +          if (!MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, +            throw parameterError(p,, +                "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +          }, +, +          return ParameterHandler.RawPart.INSTANCE;, +        } else {, +          Headers headers =, +              Headers.of("Content-Disposition", "form-data; name=\"" + partName + "\"",, +            Converter<?, RequestBody> converter =, +                retrofit.requestBodyConverter(iterableType, annotations, methodAnnotations);, +          } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, +            throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                + "include a part name in the annotation.");, +        }, +, +, +        if (MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(valueType))) {, +          throw parameterError(p, "@PartMap values cannot be MultipartBody.Part. ", +              + "Use @Part List<Part> or a different value type instead.");, +        }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, +  static final class RawPart extends ParameterHandler<MultipartBody.Part> {, +    static final RawPart INSTANCE = new RawPart();, +, +    private RawPart() {, +    }, +, +    @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, +      if (value != null) { // Skip null values., +        builder.addPart(value);, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java]
[+++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import java.io.IOException;, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Rule;, +import retrofit2.http.GET;, +import rx.observables.BlockingObservable;, +import rx.singles.BlockingSingle;, +import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  interface Service {, +    @GET("/") Observable<String> observableBody();, +    @GET("/") Observable<Response<String>> observableResponse();, +    @GET("/") Observable<Result<String>> observableResult();, +    @GET("/") Single<String> singleBody();, +    @GET("/") Single<Response<String>> singleResponse();, +    @GET("/") Single<Result<String>> singleResult();, +  }, +, +  private Service service;, +        .baseUrl(server.url("/")), +        .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), +    service = retrofit.create(Service.class);, +  @Test public void bodySuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<String> o = service.observableBody().toBlocking();, +    assertThat(o.first()).isEqualTo("Hi");, +  }, +, +  @Test public void bodySuccess404() {, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    BlockingObservable<String> o = service.observableBody().toBlocking();, +    try {, +      o.first();, +      fail();, +    } catch (RuntimeException e) {, +      Throwable cause = e.getCause();, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +    }, +  }, +, +  @Test public void bodyFailure() {, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<String> o = service.observableBody().toBlocking();, +    try {, +      o.first();, +      fail();, +    } catch (RuntimeException e) {, +      assertThat(e.getCause()).isInstanceOf(IOException.class);, +    }, +  }, +, +  @Test public void responseSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<Response<String>> o = service.observableResponse().toBlocking();, +    Response<String> response = o.first();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");, +  }, +, +  @Test public void responseSuccess404() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));, +, +    BlockingObservable<Response<String>> o = service.observableResponse().toBlocking();, +    Response<String> response = o.first();, +    assertThat(response.isSuccess()).isFalse();, +    assertThat(response.errorBody().string()).isEqualTo("Hi");, +  }, +, +  @Test public void responseFailure() {, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<Response<String>> o = service.observableResponse().toBlocking();, +    try {, +      o.first();, +      fail();, +    } catch (RuntimeException t) {, +      assertThat(t.getCause()).isInstanceOf(IOException.class);, +    }, +  }, +, +  @Test public void resultSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<Result<String>> o = service.observableResult().toBlocking();, +    Result<String> result = o.first();, +    assertThat(result.isError()).isFalse();, +    Response<String> response = result.response();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");]
[+++ b/android/pom.xml, +      <dependency>, +        <groupId>com.squareup</groupId>, +        <artifactId>retrofit-core</artifactId>, +        <version>0.6.0-SNAPSHOT</version>, +      </dependency>, +++ b/android/pom.xml, +      <dependency>, +        <groupId>com.squareup</groupId>, +        <artifactId>retrofit-core</artifactId>, +        <version>0.6.0-SNAPSHOT</version>, +      </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +// Copyright 2012 Square, Inc., +package retrofit.android;, +, +import android.os.Handler;, +import android.os.Looper;, +import android.os.SystemClock;, +import retrofit.core.MainThread;, +, +import java.util.concurrent.CountDownLatch;, +, +/** Executor that runs tasks on Android's main thread. */, +public class AndroidMainThread implements MainThread {, +, +  private final Looper looper = Looper.getMainLooper();, +  private final Handler handler = new Handler(looper);, +, +  @Override public void execute(Runnable r) {, +    handler.post(r);, +  }, +, +  @Override public void executeDelayed(Runnable r, long delay) {, +    handler.postAtTime(r, SystemClock.uptimeMillis() + delay);, +  }, +, +  @Override, +  public void executeSynchronously(final Runnable runnable) {, +    if (Looper.getMainLooper().getThread() == Thread.currentThread()) {, +      runnable.run();, +    } else {, +      final CountDownLatch latch = new CountDownLatch(1);, +      execute(new Runnable() {, +        @Override public void run() {, +          try {, +            runnable.run();, +          } finally {, +            latch.countDown();, +          }, +        }, +      });, +      while (true) {, +        try {, +          latch.await();, +          return;, +        } catch (InterruptedException e) { /* ignore */ }, +      }, +    }, +  }, +, +  @Override public void executeOnMain(Runnable runnable) {, +    if (Looper.getMainLooper().getThread() == Thread.currentThread()) {, +      runnable.run();, +    } else {, +      execute(runnable);, +    }, +  }, +, +  @Override public void cancel(Runnable r) {, +    handler.removeCallbacks(r);, +  }, +}, +++ b/android/pom.xml, +      <dependency>, +        <groupId>com.squareup</groupId>, +        <artifactId>retrofit-core</artifactId>, +        <version>0.6.0-SNAPSHOT</version>, +      </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +// Copyright 2012 Square, Inc., +package retrofit.android;, +, +import android.os.Handler;, +import android.os.Looper;, +import android.os.SystemClock;, +import retrofit.core.MainThread;, +, +import java.util.concurrent.CountDownLatch;, +, +/** Executor that runs tasks on Android's main thread. */, +public class AndroidMainThread implements MainThread {, +, +  private final Looper looper = Looper.getMainLooper();, +  private final Handler handler = new Handler(looper);, +, +  @Override public void execute(Runnable r) {, +    handler.post(r);, +  }, +]
[+++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, CompletableFuture<R>> {, +    @Override public CompletableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, CompletableFuture<Response<R>>> {, +    @Override public CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, CompletableFuture<R>> {, +    @Override public CompletableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, CompletableFuture<Response<R>>> {, +    @Override public CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, CompletableFuture<R>> {, +    @Override public CompletableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, CompletableFuture<Response<R>>> {, +    @Override public CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapter.java, +final class RxJavaCallAdapter<R> implements CallAdapter<R, Object> {, +  @Override public Object adapt(Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + *   CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + *   CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + *   Observable&lt;User&gt; getUser(), +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + *   CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + *   Observable&lt;User&gt; getUser(), +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * public &lt;R&gt; Async&lt;R&gt; adapt(final Call&lt;R&gt; call) {, +   *   return Async.create(new Callable&lt;Response&lt;R&gt;&gt;() {, +   *     public Response&lt;R&gt; call() throws Exception {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + *   CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + *   Observable&lt;User&gt; getUser(), +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * public &lt;R&gt; Async&lt;R&gt; adapt(final Call&lt;R&gt; call) {, +   *   return Async.create(new Callable&lt;Response&lt;R&gt;&gt;() {, +   *     public Response&lt;R&gt; call() throws Exception {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * Response&lt;User&gt; user = api.getUser().execute();, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + *   CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + *   Observable&lt;User&gt; getUser(), +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * public &lt;R&gt; Async&lt;R&gt; adapt(final Call&lt;R&gt; call) {, +   *   return Async.create(new Callable&lt;Response&lt;R&gt;&gt;() {, +   *     public Response&lt;R&gt; call() throws Exception {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * Response&lt;User&gt; user = api.getUser().execute();, +++ b/retrofit/src/main/java/retrofit2/http/Field.java, + * Call&lt;ResponseBody&gt; example(, + * Call&lt;ResponseBody&gt; example(@Field("name") String... names);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + *   CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + *   Observable&lt;User&gt; getUser(), +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * public &lt;R&gt; Async&lt;R&gt; adapt(final Call&lt;R&gt; call) {, +   *   return Async.create(new Callable&lt;Response&lt;R&gt;&gt;() {, +   *     public Response&lt;R&gt; call() throws Exception {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * Response&lt;User&gt; user = api.getUser().execute();, +++ b/retrofit/src/main/java/retrofit2/http/Field.java, + * Call&lt;ResponseBody&gt; example(, + * Call&lt;ResponseBody&gt; example(@Field("name") String... names);, +++ b/retrofit/src/main/java/retrofit2/http/FieldMap.java, + * Call&lt;ResponseBody&gt; things(@FieldMap Map&lt;String, String&gt; fields);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + *   CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + *   Observable&lt;User&gt; getUser(), +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * public &lt;R&gt; Async&lt;R&gt; adapt(final Call&lt;R&gt; call) {, +   *   return Async.create(new Callable&lt;Response&lt;R&gt;&gt;() {, +   *     public Response&lt;R&gt; call() throws Exception {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * Response&lt;User&gt; user = api.getUser().execute();, +++ b/retrofit/src/main/java/retrofit2/http/Field.java, + * Call&lt;ResponseBody&gt; example(, + * Call&lt;ResponseBody&gt; example(@Field("name") String... names);, +++ b/retrofit/src/main/java/retrofit2/http/FieldMap.java, + * Call&lt;ResponseBody&gt; things(@FieldMap Map&lt;String, String&gt; fields);, +++ b/retrofit/src/main/java/retrofit2/http/HTTP.java, + *   Call&lt;ResponseBody&gt; customEndpoint();, + *   Call&lt;ResponseBody&gt; deleteObject(@Body RequestBody object);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + *   ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + *   CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + *   Observable&lt;User&gt; getUser(), +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * public &lt;R&gt; Async&lt;R&gt; adapt(final Call&lt;R&gt; call) {, +   *   return Async.create(new Callable&lt;Response&lt;R&gt;&gt;() {, +   *     public Response&lt;R&gt; call() throws Exception {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * Response&lt;User&gt; user = api.getUser().execute();, +++ b/retrofit/src/main/java/retrofit2/http/Field.java, + * Call&lt;ResponseBody&gt; example(]
[+++ b/pom.xml, +    <okhttp.version>3.8.0</okhttp.version>, +    <moshi.version>1.5.0</moshi.version>]
[+++ b/pom.xml, +    <jackson.version>2.4.3</jackson.version>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder(), +          .url("http://localhost"), +          .build();, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder(), +          .url("http://localhost"), +          .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder(), +          .url("http://localhost"), +          .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +import static retrofit2.Utils.checkNotNull;, +, +/**, + * A single invocation of a Retrofit service interface method. This class captures both the method, + * that was called and the arguments to the method., + *, + * <p>Retrofit automatically adds an invocation to each OkHttp request as a tag. You can retrieve, + * the invocation in an OkHttp interceptor for metrics and monitoring., + *, + * <pre><code>, + * class InvocationLogger implements Interceptor {, + *   &#64;Override public Response intercept(Chain chain) throws IOException {, + *     Request request = chain.request();, + *     Invocation invocation = request.tag(Invocation.class);, + *     if (invocation != null) {, + *       System.out.printf("%s.%s %s%n",, + *           invocation.method().getDeclaringClass().getSimpleName(),, + *           invocation.method().getName(), invocation.arguments());, + *     }, + *     return chain.proceed(request);, + *   }, + * }, + * </code></pre>, + *, + * <strong>Note:</strong> use caution when examining an invocation's arguments. Although the, + * arguments list is unmodifiable, the arguments themselves may be mutable. They may also be unsafe, + * for concurrent access. For best results declare Retrofit service interfaces using only immutable, + * types for parameters!, + */, +public final class Invocation {, +  private final Method method;, +  private final List<?> arguments;, +, +  public Invocation(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +, +    this.method = method;, +    this.arguments = Collections.unmodifiableList(new ArrayList<>(arguments)); // Immutable copy., +  }, +, +  public Method method() {, +    return method;, +  }, +, +  public List<?> arguments() {, +    return arguments;, +  }, +, +  @Override public String toString() {, +    return String.format("%s.%s() %s",, +        method.getDeclaringClass().getName(), method.getName(), arguments);, +  }, +}, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder(), +          .url("http://localhost"), +          .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +/*, + * Copyright (C) 2018 Square, Inc., + *]
[+++ b/pom.xml, +            <consoleOutput>true</consoleOutput>]
[+++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0</version>, +++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0</version>, +++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0</version>, +++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0</version>, +++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.0</version>, +++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.0</version>, +++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.7.0</version>, +++ b/pom.xml, +  <version>1.7.0</version>, +    <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.7.0</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.7.0</version>, +++ b/pom.xml]
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, +   request body., +, +, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import retrofit.mime.TypedString;, +    if (methodInfo.headers != null) {, +      headers.addAll(methodInfo.headers);, +    }, +, +  @Override public void addQueryParam(String name, String value) {, +          if (value != null) { // Skip null values., +            } else if (value instanceof String) {, +              multipartBody.addPart(name, new TypedString((String) value));, +          }, +    if (multipartBody != null && multipartBody.getPartCount() == 0) {]
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/pom.xml, +    <module>retrofit-adapters</module>, +    <!--<module>retrofit-mock</module>-->, +    <java.version>1.7</java.version>, +    <okhttp.version>2.4.0</okhttp.version>, +    <rxjava.version>1.0.10</rxjava.version>, +        <version>2.15</version>, +++ b/checkstyle.xml, +++ b/pom.xml, +    <module>retrofit-adapters</module>, +    <!--<module>retrofit-mock</module>-->, +    <java.version>1.7</java.version>, +    <okhttp.version>2.4.0</okhttp.version>, +    <rxjava.version>1.0.10</rxjava.version>, +        <version>2.15</version>, +++ b/retrofit-adapters/README.md, +Retrofit Adapters, +=================, +, +TODO, +++ b/checkstyle.xml, +++ b/pom.xml, +    <module>retrofit-adapters</module>, +    <!--<module>retrofit-mock</module>-->, +    <java.version>1.7</java.version>, +    <okhttp.version>2.4.0</okhttp.version>, +    <rxjava.version>1.0.10</rxjava.version>, +        <version>2.15</version>, +++ b/retrofit-adapters/README.md, +Retrofit Adapters, +=================, +, +TODO, +++ b/retrofit-adapters/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-adapters</artifactId>, +  <name>Adapters</name>, +  <packaging>pom</packaging>, +, +  <modules>, +    <module>rxjava</module>, +  </modules>, +</project>, +++ b/checkstyle.xml, +++ b/pom.xml, +    <module>retrofit-adapters</module>, +    <!--<module>retrofit-mock</module>-->, +    <java.version>1.7</java.version>, +    <okhttp.version>2.4.0</okhttp.version>, +    <rxjava.version>1.0.10</rxjava.version>, +        <version>2.15</version>, +++ b/retrofit-adapters/README.md, +Retrofit Adapters, +=================, +, +TODO, +++ b/retrofit-adapters/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-adapters</artifactId>, +  <name>Adapters</name>, +  <packaging>pom</packaging>, +, +  <modules>, +    <module>rxjava</module>, +  </modules>, +</project>, +++ b/retrofit-adapters/rxjava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>]
[+++ b/http/pom.xml, +      <optional>true</optional>]
[+++ b/pom.xml, +    <okhttp.version>3.9.0</okhttp.version>, +    <gson.version>2.8.0</gson.version>]
[+++ b/pom.xml, +    <rxjava.version>1.0.0</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>1.0.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +          String bodyCharset = MimeUtil.parseCharset(body.mimeType());, +          String bodyCharset = MimeUtil.parseCharset(bodyMime);, +++ b/pom.xml, +    <rxjava.version>1.0.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +          String bodyCharset = MimeUtil.parseCharset(body.mimeType());, +          String bodyCharset = MimeUtil.parseCharset(bodyMime);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  /** Loads {@link #responseObjectType}. Returns {@code true} if method is synchronous. */, +++ b/pom.xml, +    <rxjava.version>1.0.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +          String bodyCharset = MimeUtil.parseCharset(body.mimeType());, +          String bodyCharset = MimeUtil.parseCharset(bodyMime);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  /** Loads {@link #responseObjectType}. Returns {@code true} if method is synchronous. */, +++ b/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java]
[+++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, +      T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, +      T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java, +import java.nio.charset.Charset;, +import okio.Buffer;, +  @Test public void honorsCharacterEncoding() throws IOException {, +    Buffer buffer = new Buffer().writeString(, +        "<my-object><message>你好，世界</message><count>10</count></my-object>",, +        Charset.forName("GBK"));, +    server.enqueue(, +        new MockResponse().setBody(buffer).addHeader("Content-Type", "text/xml;charset=GBK"));, +, +    Call<MyObject> call = service.get();, +    Response<MyObject> response = call.execute();, +    MyObject body = response.body();, +    assertThat(body.getMessage()).isEqualTo("你好，世界");, +  }, +, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, +      T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java, +import java.nio.charset.Charset;, +import okio.Buffer;, +  @Test public void honorsCharacterEncoding() throws IOException {, +    Buffer buffer = new Buffer().writeString(, +        "<my-object><message>你好，世界</message><count>10</count></my-object>",, +        Charset.forName("GBK"));, +    server.enqueue(, +        new MockResponse().setBody(buffer).addHeader("Content-Type", "text/xml;charset=GBK"));, +, +    Call<MyObject> call = service.get();, +    Response<MyObject> response = call.execute();, +    MyObject body = response.body();, +    assertThat(body.getMessage()).isEqualTo("你好，世界");, +  }, +, +++ b/website/index.html, +              <p>If you need to communicate with an API that uses a content-format that Retrofit does not support out of the box (e.g. YAML, txt, custom format) or you wish to use a different library to implement an existing format, you can easily create your own converter. Create a class that extends the <a href="https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/Converter.java"><code>Converter.Factory</code> class</a> and pass in an instance when building your adapter.</p>]
[+++ b/.gitignore, +.classpath, +.project, +++ b/.gitignore, +.classpath, +.project, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +++ b/.gitignore, +.classpath, +.project, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +++ b/modules/http/src/retrofit/http/DELETE.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a DELETE request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface DELETE {, +  String value();, +}, +++ b/.gitignore, +.classpath, +.project, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +++ b/modules/http/src/retrofit/http/DELETE.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a DELETE request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface DELETE {, +  String value();, +}, +++ b/modules/http/src/retrofit/http/PUT.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a PUT request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface PUT {, +  String value();, +}, +++ b/.gitignore, +.classpath, +.project, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +++ b/modules/http/src/retrofit/http/DELETE.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;]
[+++ b/checkstyle.xml, +        <!--module name="AvoidNestedBlocks"/-->, +++ b/checkstyle.xml, +        <!--module name="AvoidNestedBlocks"/-->, +++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/checkstyle.xml, +        <!--module name="AvoidNestedBlocks"/-->, +++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/checkstyle.xml, +        <!--module name="AvoidNestedBlocks"/-->, +++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Body.java, +// Copyright 2011 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Use this annotation on a service method param when you want to directly control the request body, + * of a POST/PUT request (instead of sending in as request parameters or form-style request, + * body).  If the value of the parameter implements TypedOutput, the request body will be written, + * exactly as specified by the TypedOutput.writeTo object.  If it doesn't implement TypedOutput, the, + * object will be serialized into JSON and the result will be set directly as the request body., + *, + * @author Eric Denman (edenman@squareup.com), + */, +@Target(PARAMETER) @Retention(RUNTIME), +public @interface Body {, +}, +++ b/checkstyle.xml, +        <!--module name="AvoidNestedBlocks"/-->, +++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Body.java, +// Copyright 2011 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Use this annotation on a service method param when you want to directly control the request body, + * of a POST/PUT request (instead of sending in as request parameters or form-style request, + * body).  If the value of the parameter implements TypedOutput, the request body will be written, + * exactly as specified by the TypedOutput.writeTo object.  If it doesn't implement TypedOutput, the, + * object will be serialized into JSON and the result will be set directly as the request body., + *, + * @author Eric Denman (edenman@squareup.com)]
[+++ b/README.md, +each interface you create, calling `RestAdapter.create(MyInterface.class)` will create an, +++ b/README.md, +each interface you create, calling `RestAdapter.create(MyInterface.class)` will create an, +++ b/pom.xml]
[+++ b/pom.xml, +    <moshi.version>1.2.0</moshi.version>, +++ b/pom.xml, +    <moshi.version>1.2.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +import com.squareup.moshi.JsonQualifier;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import static java.util.Collections.unmodifiableSet;, +, + * <p>, + * Any {@link JsonQualifier @JsonQualifier}-annotated annotations on the parameter will be used, + * when looking up a request body converter and those on the method will be used when looking up a, + * response body converter., +    JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(annotations));, +    JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(parameterAnnotations));, +, +  private static Set<? extends Annotation> jsonAnnotations(Annotation[] annotations) {, +    Set<Annotation> result = null;, +    for (Annotation annotation : annotations) {, +      if (annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {, +        if (result == null) result = new LinkedHashSet<>();, +        result.add(annotation);, +      }, +    }, +    return result != null ? unmodifiableSet(result) : Collections.<Annotation>emptySet();, +  }, +++ b/pom.xml, +    <moshi.version>1.2.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +import com.squareup.moshi.JsonQualifier;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import static java.util.Collections.unmodifiableSet;, +, + * <p>, + * Any {@link JsonQualifier @JsonQualifier}-annotated annotations on the parameter will be used, + * when looking up a request body converter and those on the method will be used when looking up a, + * response body converter., +    JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(annotations));, +    JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(parameterAnnotations));, +, +  private static Set<? extends Annotation> jsonAnnotations(Annotation[] annotations) {, +    Set<Annotation> result = null;, +    for (Annotation annotation : annotations) {, +      if (annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {, +        if (result == null) result = new LinkedHashSet<>();, +        result.add(annotation);, +      }, +    }, +    return result != null ? unmodifiableSet(result) : Collections.<Annotation>emptySet();, +  }, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import com.squareup.moshi.JsonAdapter;, +import com.squareup.moshi.JsonQualifier;, +import java.lang.annotation.Annotation;, +import java.lang.annotation.Retention;, +import java.lang.reflect.Type;, +import java.util.Set;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +  @Retention(RUNTIME), +  @JsonQualifier, +  @interface Qualifier {}, +, +  @Retention(RUNTIME), +  @interface NonQualifer {}, +, +  static class Adapters {, +, +    @ToJson public void write(JsonWriter writer, @Qualifier String value) throws IOException {, +      writer.value("qualified!");, +    }, +, +    @FromJson @Qualifier public String readQualified(JsonReader reader) throws IOException {, +      String string = reader.nextString();, +      if (string.equals("qualified!")) {, +        return "it worked!";, +      }, +      throw new AssertionError("Found: " + string);, +    }, +, +    @POST("/") @Qualifier @NonQualifer //, +    Call<String> annotations(@Body @Qualifier @NonQualifer String body);, +        .add(new JsonAdapter.Factory() {, +          @Override public JsonAdapter<?> create(Type type, Set<? extends Annotation> annotations,, +              Moshi moshi) {, +            for (Annotation annotation : annotations) {, +              if (!annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {, +                throw new AssertionError("Non-@JsonQualifier annotation: " + annotation);, +              }, +            }, +            return null;, +          }, +        }), +        .add(new Adapters()), +  @Test public void annotations() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("\"qualified!\""));, +]
[+++ b/pom.xml, +    <gson.version>2.8.2</gson.version>]
[+++ b/pom.xml, +, +    <!-- Adapter Dependencies -->, +    <gson.version>2.3.1</gson.version>, +    <moshi.version>0.9.0</moshi.version>, +    <junit.version>4.12</junit.version>, +      <dependency>, +        <groupId>com.squareup.moshi</groupId>, +        <artifactId>moshi</artifactId>, +        <version>${moshi.version}</version>, +      </dependency>, +++ b/pom.xml, +, +    <!-- Adapter Dependencies -->, +    <gson.version>2.3.1</gson.version>, +    <moshi.version>0.9.0</moshi.version>, +    <junit.version>4.12</junit.version>, +      <dependency>, +        <groupId>com.squareup.moshi</groupId>, +        <artifactId>moshi</artifactId>, +        <version>${moshi.version}</version>, +      </dependency>, +++ b/retrofit-converters/moshi/README.md, +Moshi Converter, +===============, +, +A `Converter` which uses [Moshi][1] for serialization to and from JSON., +, +A default `Moshi` instance will be created or one can be configured and passed to the, +`MoshiConverter` construction to further control the serialization., +, +, + [1]: https://github.com/square/moshi, +++ b/pom.xml, +, +    <!-- Adapter Dependencies -->, +    <gson.version>2.3.1</gson.version>, +    <moshi.version>0.9.0</moshi.version>, +    <junit.version>4.12</junit.version>, +      <dependency>, +        <groupId>com.squareup.moshi</groupId>, +        <artifactId>moshi</artifactId>, +        <version>${moshi.version}</version>, +      </dependency>, +++ b/retrofit-converters/moshi/README.md, +Moshi Converter, +===============, +, +A `Converter` which uses [Moshi][1] for serialization to and from JSON., +, +A default `Moshi` instance will be created or one can be configured and passed to the, +`MoshiConverter` construction to further control the serialization., +, +, + [1]: https://github.com/square/moshi, +++ b/retrofit-converters/moshi/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-moshi</artifactId>, +  <name>Converter: Moshi</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.moshi</groupId>, +      <artifactId>moshi</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      return;, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      return;, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      return;, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      } catch (OnCompletedFailedException]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/test/java/retrofit/mock/MockRetrofitTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package retrofit.mock;, +, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.util.Random;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicLong;, +import java.util.concurrent.atomic.AtomicReference;, +import org.junit.Before;, +import org.junit.Test;, +import retrofit.Call;, +import retrofit.Callback;, +import retrofit.Response;, +import retrofit.Retrofit;, +import retrofit.mock.CallBehaviorAdapter;, +import retrofit.mock.Calls;, +import retrofit.mock.MockRetrofit;, +import retrofit.mock.NetworkBehavior;, +, +import static java.util.concurrent.Executors.newSingleThreadExecutor;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class MockRetrofitTest {, +  interface DoWorkService {, +    Call<String> response();, +    Call<String> failure();, +  }, +, +  private final IOException mockFailure = new IOException("Timeout!");, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +  private DoWorkService service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl("http://example.com"), +        .build();, +, +    DoWorkService mockService = new DoWorkService() {, +      @Override public Call<String> response() {, +        return Calls.response("Response!");, +      }, +, +      @Override public Call<String> failure() {, +        return Calls.failure(mockFailure);, +      }, +    };, +, +    NetworkBehavior.Adapter<?> adapter =, +        new CallBehaviorAdapter(retrofit, newSingleThreadExecutor());, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +    service = mockRetrofit.create(DoWorkService.class, mockService);, +  }, +, +  @Test public void syncFailureThrowsAfterDelay() {, +    behavior.setDelay(100, MILLISECONDS);, +    behavior.setVariancePercent(0);, +    behavior.setFailurePercent(100);, +, +    Call<String> call = service.response();, +, +    long startNanos = System.nanoTime();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);, +      assertThat(e).isSameAs(behavior.failureException());, +      assertThat(tookMs).isGreaterThanOrEqualTo(100);, +    }, +  }, +, +  @Test public void asyncFailureTriggersFailureAfterDelay() throws InterruptedException {, +    behavior.setDelay(100, MILLISECONDS);]
[+++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.6.0-SNAPSHOT</version>, +    <description>Reusable Java and Android code from Square, Inc. for simplified I/O, HTTP, and more.</description>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>0.6.0-SNAPSHOT</version>, +    <description>Reusable Java and Android code from Square, Inc. for simplified I/O, HTTP, and more.</description>, +++ b/sample-android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +        <version>0.6.0-SNAPSHOT</version>]
[+++ b/.idea/inspectionProfiles/Project_Default.xml, +      <option name="IGNORE_POINT_TO_ITSELF" value="false" />, +++ b/.idea/inspectionProfiles/Project_Default.xml, +      <option name="IGNORE_POINT_TO_ITSELF" value="false" />, +++ b/.idea/misc.xml, +  <component name="EntryPointsManager">, +    <entry_points version="2.0" />, +  </component>, +++ b/.idea/inspectionProfiles/Project_Default.xml, +      <option name="IGNORE_POINT_TO_ITSELF" value="false" />, +++ b/.idea/misc.xml, +  <component name="EntryPointsManager">, +    <entry_points version="2.0" />, +  </component>, +++ b/modules/io/src/retrofit/io/ByteSinks.java, +        final FileOutputStream out = new FileOutputStream(file);, +            out.getFD().sync();, +++ b/.idea/inspectionProfiles/Project_Default.xml, +      <option name="IGNORE_POINT_TO_ITSELF" value="false" />, +++ b/.idea/misc.xml, +  <component name="EntryPointsManager">, +    <entry_points version="2.0" />, +  </component>, +++ b/modules/io/src/retrofit/io/ByteSinks.java, +        final FileOutputStream out = new FileOutputStream(file);, +            out.getFD().sync();, +++ b/modules/io/src/retrofit/io/Files.java, +        out.getFD().sync();]
[+++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, +  <component name="ProjectResources">, +    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, +  </component>, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, +  <component name="ProjectResources">, +    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, +  </component>, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/build.xml, +  <target name="repackage-gson" depends="prepare">, +    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask">, +      <classpath>, +        <fileset dir="lib" includes="jarjar*.jar"/>, +      </classpath>, +    </taskdef>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6.jar">, +      <zipfileset src="lib/gson-1.6.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6-sources.jar">, +      <zipfileset src="lib/gson-1.6-sources.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +  </target>, +, +  <target name="compile" depends="repackage-gson">, +	      <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>, +        <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>, +        <fileset dir="${build.dir}" includes="retrofit-gson*.jar"/>, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, +  <component name="ProjectResources">, +    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, +  </component>, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/build.xml, +  <target name="repackage-gson" depends="prepare">, +    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask">, +      <classpath>, +        <fileset dir="lib" includes="jarjar*.jar"/>, +      </classpath>, +    </taskdef>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6.jar">, +      <zipfileset src="lib/gson-1.6.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6-sources.jar">, +      <zipfileset src="lib/gson-1.6-sources.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +  </target>, +, +  <target name="compile" depends="repackage-gson">, +	      <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>, +        <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>, +        <fileset dir="${build.dir}" includes="retrofit-gson*.jar"/>, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.6"/>, +    <dependency org="com.googlecode.jarjar" name="jarjar" rev="1.1"/>, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, +  <component name="ProjectResources">, +    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, +  </component>, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/build.xml, +  <target name="repackage-gson" depends="prepare">, +    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask">, +      <classpath>, +        <fileset dir="lib" includes="jarjar*.jar"/>, +      </classpath>, +    </taskdef>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6.jar">, +      <zipfileset src="lib/gson-1.6.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6-sources.jar">, +      <zipfileset src="lib/gson-1.6-sources.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +  </target>, +, +  <target name="compile" depends="repackage-gson">, +	      <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>, +        <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>, +        <fileset dir="${build.dir}" includes="retrofit-gson*.jar"/>, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.6"/>, +    <dependency org="com.googlecode.jarjar" name="jarjar" rev="1.1"/>, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java]
[+++ b/retrofit/src/main/java/retrofit2/Response.java, +   * Create a synthetic successful response with an HTTP status code of {@code code} and, +   * {@code body} as the deserialized body., +   */, +  public static <T> Response<T> success(int code, @Nullable T body) {, +    if (code < 200 || code >= 300) {, +      throw new IllegalArgumentException("code < 200 or >= 300: " + code);, +    }, +    return success(body, new okhttp3.Response.Builder() //, +        .code(code), +        .message("Response.success()"), +        .protocol(Protocol.HTTP_1_1), +        .request(new Request.Builder().url("http://localhost/").build()), +        .build());, +  }, +, +  /**, +++ b/retrofit/src/main/java/retrofit2/Response.java, +   * Create a synthetic successful response with an HTTP status code of {@code code} and, +   * {@code body} as the deserialized body., +   */, +  public static <T> Response<T> success(int code, @Nullable T body) {, +    if (code < 200 || code >= 300) {, +      throw new IllegalArgumentException("code < 200 or >= 300: " + code);, +    }, +    return success(body, new okhttp3.Response.Builder() //, +        .code(code), +        .message("Response.success()"), +        .protocol(Protocol.HTTP_1_1), +        .request(new Request.Builder().url("http://localhost/").build()), +        .build());, +  }, +, +  /**, +++ b/retrofit/src/test/java/retrofit2/ResponseTest.java, +  @Test public void successWithStatusCode() {, +    Object body = new Object();, +    Response<Object> response = Response.success(204, body);, +    assertThat(response.code()).isEqualTo(204);, +    assertThat(response.message()).isEqualTo("Response.success()");, +    assertThat(response.headers().size()).isZero();, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.body()).isSameAs(body);, +    assertThat(response.errorBody()).isNull();, +  }, +]
[+++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-guava</artifactId>, +  <name>Adapter: Guava</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-guava</artifactId>, +  <name>Adapter: Guava</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,]
[+++ b/pom.xml, +    <rxjava.version>0.20.5</rxjava.version>, +    <jackson.version>2.4.3</jackson.version>, +    <wire.version>1.5.2</wire.version>, +    <assertj.version>1.7.0</assertj.version>, +    <guava.version>18.0</guava.version>, +++ b/pom.xml, +    <rxjava.version>0.20.5</rxjava.version>, +    <jackson.version>2.4.3</jackson.version>, +    <wire.version>1.5.2</wire.version>, +    <assertj.version>1.7.0</assertj.version>, +    <guava.version>18.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RetrofitError.java, +   *, +   * @throws RuntimeException if unable to convert the body to the {@link #getSuccessType() success, +   * type}., +   *, +   * @throws RuntimeException if unable to convert the body to the specified {@code type.}]
[+++ b/pom.xml, +    <rxjava.version>1.0.14</rxjava.version>]
[+++ b/.idea/vcs.xml, +    <mapping directory="" vcs="" />, +++ b/.idea/vcs.xml, +    <mapping directory="" vcs="" />, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import org.apache.http.entity.BufferedHttpEntity;, +      /** Construct BufferedHttpEntity so that we can read it multiple times. */, +      HttpEntity bufferedEntity = new BufferedHttpEntity(entity);, +      String body = new String(HttpClients.entityToBytes(bufferedEntity),, +          "UTF-8");, +        callback.clientError(parse(bufferedEntity));, +++ b/.idea/vcs.xml, +    <mapping directory="" vcs="" />, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import org.apache.http.entity.BufferedHttpEntity;, +      /** Construct BufferedHttpEntity so that we can read it multiple times. */, +      HttpEntity bufferedEntity = new BufferedHttpEntity(entity);, +      String body = new String(HttpClients.entityToBytes(bufferedEntity),, +          "UTF-8");, +        callback.clientError(parse(bufferedEntity));, +++ b/modules/http/src/retrofit/http/RestAdapter.java, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.io.UnsupportedEncodingException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Proxy;, +import java.lang.reflect.Type;, +import java.lang.reflect.WildcardType;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.Executor;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +   * Callback#call(T)}., +++ b/.idea/vcs.xml, +    <mapping directory="" vcs="" />, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import org.apache.http.entity.BufferedHttpEntity;, +      /** Construct BufferedHttpEntity so that we can read it multiple times. */, +      HttpEntity bufferedEntity = new BufferedHttpEntity(entity);, +      String body = new String(HttpClients.entityToBytes(bufferedEntity),, +          "UTF-8");, +        callback.clientError(parse(bufferedEntity));, +++ b/modules/http/src/retrofit/http/RestAdapter.java, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.io.UnsupportedEncodingException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Proxy;, +import java.lang.reflect.Type;, +import java.lang.reflect.WildcardType;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.Executor;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +   * Callback#call(T)}., +++ b/modules/io/src/retrofit/io/Files.java]
[+++ b/retrofit/pom.xml, +        <groupId>org.jetbrains.kotlin</groupId>, +        <artifactId>kotlin-maven-plugin</artifactId>, +        <executions>, +          <execution>, +            <id>compile</id>, +            <phase>process-sources</phase>, +            <goals>, +              <goal>compile</goal>, +            </goals>, +          </execution>, +          <execution>, +            <id>test-compile</id>, +            <phase>test-compile</phase>, +            <goals>, +              <goal>test-compile</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +      <plugin>, +++ b/retrofit/pom.xml, +        <groupId>org.jetbrains.kotlin</groupId>, +        <artifactId>kotlin-maven-plugin</artifactId>, +        <executions>, +          <execution>, +            <id>compile</id>, +            <phase>process-sources</phase>, +            <goals>, +              <goal>compile</goal>, +            </goals>, +          </execution>, +          <execution>, +            <id>test-compile</id>, +            <phase>test-compile</phase>, +            <goals>, +              <goal>test-compile</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +      <plugin>, +++ b/retrofit/src/main/java/retrofit2/KotlinExtensions.kt, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +// Hide the class from Java consumers., +@file:JvmName("-KotlinExtensions"), +, +package retrofit2, +, +inline fun <reified T> Retrofit.create(): T = create(T::class.java), +++ b/retrofit/pom.xml, +        <groupId>org.jetbrains.kotlin</groupId>, +        <artifactId>kotlin-maven-plugin</artifactId>, +        <executions>, +          <execution>, +            <id>compile</id>, +            <phase>process-sources</phase>, +            <goals>, +              <goal>compile</goal>, +            </goals>, +          </execution>, +          <execution>, +            <id>test-compile</id>, +            <phase>test-compile</phase>, +            <goals>, +              <goal>test-compile</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +      <plugin>, +++ b/retrofit/src/main/java/retrofit2/KotlinExtensions.kt, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]
[+++ b/README.md, +++ b/README.md, +++ b/pom.xml, +++ b/README.md, +++ b/pom.xml, +++ /dev/null, +++ b/README.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.2</gson.version>, +    <httpmime.version>4.2.3</httpmime.version>, +    <fest.version>2.0M10</fest.version>, +    <guava.version>14.0</guava.version>, +        <version>${httpmime.version}</version>, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.2</gson.version>, +    <httpmime.version>4.2.3</httpmime.version>, +    <fest.version>2.0M10</fest.version>, +    <guava.version>14.0</guava.version>, +        <version>${httpmime.version}</version>, +++ b/retrofit/pom.xml, +      <optional>true</optional>, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.2</gson.version>, +    <httpmime.version>4.2.3</httpmime.version>, +    <fest.version>2.0M10</fest.version>, +    <guava.version>14.0</guava.version>, +        <version>${httpmime.version}</version>, +++ b/retrofit/pom.xml, +      <optional>true</optional>, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import android.os.Build;, +import retrofit.http.client.UrlConnectionClient;, +import static java.lang.Thread.MIN_PRIORITY;, +      final Client client = new UrlConnectionClient();, +              Thread.currentThread().setPriority(MIN_PRIORITY);, +      final Client client;, +      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +        client = new AndroidApacheClient();, +      } else {, +        client = new UrlConnectionClient();, +      }, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.2</gson.version>, +    <httpmime.version>4.2.3</httpmime.version>, +    <fest.version>2.0M10</fest.version>, +    <guava.version>14.0</guava.version>, +        <version>${httpmime.version}</version>, +++ b/retrofit/pom.xml, +      <optional>true</optional>, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import android.os.Build;, +import retrofit.http.client.UrlConnectionClient;, +import static java.lang.Thread.MIN_PRIORITY;, +      final Client client = new UrlConnectionClient();, +              Thread.currentThread().setPriority(MIN_PRIORITY);, +      final Client client;, +      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +        client = new AndroidApacheClient();, +      } else {, +        client = new UrlConnectionClient();, +      }, +++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, +import org.apache.http.protocol.HTTP;, +    String contentType = HTTP.OCTET_STREAM_TYPE;, +      if (name.equalsIgnoreCase(HTTP.CONTENT_TYPE)) {, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.2</gson.version>, +    <httpmime.version>4.2.3</httpmime.version>, +    <fest.version>2.0M10</fest.version>, +    <guava.version>14.0</guava.version>, +        <version>${httpmime.version}</version>, +++ b/retrofit/pom.xml, +      <optional>true</optional>, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import android.os.Build;, +import retrofit.http.client.UrlConnectionClient;, +import static java.lang.Thread.MIN_PRIORITY;, +      final Client client = new UrlConnectionClient();, +              Thread.currentThread().setPriority(MIN_PRIORITY);, +      final Client client;, +      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +        client = new AndroidApacheClient();, +      } else {, +        client = new UrlConnectionClient();, +      }, +++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, +import org.apache.http.protocol.HTTP;, +    String contentType = HTTP.OCTET_STREAM_TYPE;, +      if (name.equalsIgnoreCase(HTTP.CONTENT_TYPE)) {, +++ b/retrofit/src/main/java/retrofit/http/client/UrlConnectionClient.java, +// Copyright 2013 Square, Inc., +package retrofit.http.client;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.HttpURLConnection;, +import java.net.URL;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import retrofit.http.Header;, +import retrofit.http.mime.TypedInput;]
[+++ b/ivy.xml, +    <dependency org="org.apache.httpcomponents" name="httpmime" rev="4.1-alpha1"/>, +    <dependency org="org.apache.httpcomponents" name="httpclient" rev="4.1-alpha1"/>, +++ b/ivy.xml, +    <dependency org="org.apache.httpcomponents" name="httpmime" rev="4.1-alpha1"/>, +    <dependency org="org.apache.httpcomponents" name="httpclient" rev="4.1-alpha1"/>, +++ b/modules/core/src-tests/retrofit/core/internal/ObjectsTest.java, +// Copyright 2010 Square, Inc., +package retrofit.core.internal;, +, +import junit.framework.TestCase;, +, +/** @author Eric Burke (eric@squareup.com) */, +public class ObjectsTest extends TestCase {, +  public void testNonNull() {, +    Objects.nonNull(10, "whatever");, +    try {, +      Objects.nonNull(null, "fail");, +      fail("Expected NullPointerException");, +    } catch (NullPointerException expected) {, +      assertEquals("fail", expected.getMessage());, +    }, +  }, +}, +++ b/ivy.xml, +    <dependency org="org.apache.httpcomponents" name="httpmime" rev="4.1-alpha1"/>, +    <dependency org="org.apache.httpcomponents" name="httpclient" rev="4.1-alpha1"/>, +++ b/modules/core/src-tests/retrofit/core/internal/ObjectsTest.java, +// Copyright 2010 Square, Inc., +package retrofit.core.internal;, +, +import junit.framework.TestCase;, +, +/** @author Eric Burke (eric@squareup.com) */, +public class ObjectsTest extends TestCase {, +  public void testNonNull() {, +    Objects.nonNull(10, "whatever");, +    try {, +      Objects.nonNull(null, "fail");, +      fail("Expected NullPointerException");, +    } catch (NullPointerException expected) {, +      assertEquals("fail", expected.getMessage());, +    }, +  }, +}, +++ b/modules/io/src-tests/retrofit/io/TypedByteArrayTest.java, +// Copyright 2010 Square, Inc., +package retrofit.io;, +, +import junit.framework.TestCase;, +, +/** @author Eric Burke (eric@squareup.com) */, +public class TypedByteArrayTest extends TestCase {, +  public void testEquals() {, +    TypedByteArray a1 = new TypedByteArray(new byte[]{10, 20}, MimeType.GIF);, +    TypedByteArray a2 = new TypedByteArray(new byte[]{10, 20}, MimeType.GIF);, +    TypedByteArray b = new TypedByteArray(new byte[]{8, 12}, MimeType.GIF);, +, +    assertEquals("equals", a1, a2);, +    assertEquals("hashCode", a1.hashCode(), a2.hashCode());, +    assertFalse("equals", a1.equals(b));, +    assertFalse("hashCode", a1.hashCode() == b.hashCode());, +  }, +}, +++ b/ivy.xml, +    <dependency org="org.apache.httpcomponents" name="httpmime" rev="4.1-alpha1"/>, +    <dependency org="org.apache.httpcomponents" name="httpclient" rev="4.1-alpha1"/>, +++ b/modules/core/src-tests/retrofit/core/internal/ObjectsTest.java, +// Copyright 2010 Square, Inc., +package retrofit.core.internal;, +, +import junit.framework.TestCase;, +, +/** @author Eric Burke (eric@squareup.com) */, +public class ObjectsTest extends TestCase {, +  public void testNonNull() {, +    Objects.nonNull(10, "whatever");, +    try {, +      Objects.nonNull(null, "fail");, +      fail("Expected NullPointerException");, +    } catch (NullPointerException expected) {, +      assertEquals("fail", expected.getMessage());, +    }, +  }, +}, +++ b/modules/io/src-tests/retrofit/io/TypedByteArrayTest.java, +// Copyright 2010 Square, Inc., +package retrofit.io;, +, +import junit.framework.TestCase;, +, +/** @author Eric Burke (eric@squareup.com) */, +public class TypedByteArrayTest extends TestCase {, +  public void testEquals() {, +    TypedByteArray a1 = new TypedByteArray(new byte[]{10, 20}, MimeType.GIF);, +    TypedByteArray a2 = new TypedByteArray(new byte[]{10, 20}, MimeType.GIF);, +    TypedByteArray b = new TypedByteArray(new byte[]{8, 12}, MimeType.GIF);, +, +    assertEquals("equals", a1, a2);, +    assertEquals("hashCode", a1.hashCode(), a2.hashCode());]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/pom.xml, +  <artifactId>samples</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <!-- Do not deploy this as an artifact to Maven central. -->, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-deploy-plugin</artifactId>, +        <configuration>, +          <skip>true</skip>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/pom.xml, +  <artifactId>samples</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <!-- Do not deploy this as an artifact to Maven central. -->, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-deploy-plugin</artifactId>, +        <configuration>, +          <skip>true</skip>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/samples/src/main/java/com/example/retrofit/SimpleMockService.java, +// Copyright 2013 Square, Inc., +package com.example.retrofit;, +, +import com.example.retrofit.SimpleService.Contributor;, +import com.example.retrofit.SimpleService.GitHub;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.Executors;, +import retrofit.MockRestAdapter;, +import retrofit.RestAdapter;, +, +/**, + * An example of using {@link MockRestAdapter} to create a mock service implementation with, + * fake data. This re-uses the GitHub service from {@link SimpleService} for its mocking., + */, +public final class SimpleMockService {, +  /** A mock implementation of the {@link GitHub} API interface. */, +  static final class MockGitHub implements GitHub {, +    private final Map<String, Map<String, List<Contributor>>> ownerRepoContributors;, +, +    public MockGitHub() {, +      ownerRepoContributors = new LinkedHashMap<String, Map<String, List<Contributor>>>();, +, +      // Seed some mock data.]
[+++ b/pom.xml, +    <jackson.version>2.9.8</jackson.version>]
[+++ b/retrofit-converters/pom.xml, +    <module>scalars</module>, +++ b/retrofit-converters/pom.xml, +    <module>scalars</module>, +++ b/retrofit-converters/scalars/README.md, +Java Scalars Converter, +======================, +, +A `Converter` which supports converting strings and both primitives and their boxed types to, +`text/plain` bodies., +++ b/retrofit-converters/pom.xml, +    <module>scalars</module>, +++ b/retrofit-converters/scalars/README.md, +Java Scalars Converter, +======================, +, +A `Converter` which supports converting strings and both primitives and their boxed types to, +`text/plain` bodies., +++ b/retrofit-converters/scalars/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-scalars</artifactId>, +  <name>Converter: Java Scalars</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-converters/pom.xml, +    <module>scalars</module>, +++ b/retrofit-converters/scalars/README.md, +Java Scalars Converter, +======================, +, +A `Converter` which supports converting strings and both primitives and their boxed types to, +`text/plain` bodies., +++ b/retrofit-converters/scalars/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-scalars</artifactId>, +  <name>Converter: Java Scalars</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>]
[+++ b/pom.xml, +  <version>1.2.2</version>, +++ b/pom.xml, +  <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2</version>, +++ b/pom.xml, +  <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2</version>, +++ b/pom.xml, +  <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2</version>, +++ b/pom.xml, +  <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.2</version>, +++ b/pom.xml, +  <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.2</version>, +++ b/pom.xml, +  <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.2</version>, +++ b/pom.xml, +  <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.2</version>, +++ b/retrofit/pom.xml, +    <version>1.2.2</version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +    <moshi.version>1.3.0</moshi.version>, +          <version>3.0</version>, +            <version>7.7</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +    <moshi.version>1.3.0</moshi.version>, +          <version>3.0</version>, +            <version>7.7</version>, +++ b/retrofit-adapters/guava/README.md, +An `Adapter` for adapting [Guava][1] types., +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +    <moshi.version>1.3.0</moshi.version>, +          <version>3.0</version>, +            <version>7.7</version>, +++ b/retrofit-adapters/guava/README.md, +An `Adapter` for adapting [Guava][1] types., +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +    <moshi.version>1.3.0</moshi.version>, +          <version>3.0</version>, +            <version>7.7</version>, +++ b/retrofit-adapters/guava/README.md, +An `Adapter` for adapting [Guava][1] types., +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link HttpException} errors for non-2XX responses, and sets {@link IOException}, + * for network errors.</li>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +    <moshi.version>1.3.0</moshi.version>, +          <version>3.0</version>, +            <version>7.7</version>, +++ b/retrofit-adapters/guava/README.md, +An `Adapter` for adapting [Guava][1] types., +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link HttpException} errors for non-2XX responses, and sets {@link IOException}, + * for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** Exception for an unexpected, non-2xx HTTP response. */, +public final class HttpException extends Exception {, +  private final int code;, +  private final String message;, +  private final transient Response<?> response;, +, +    super("HTTP " + response.code() + " " + response.message());]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import javax.annotation.Nullable;, +  public T returningResponse(@Nullable Object response) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import javax.annotation.Nullable;, +  public T returningResponse(@Nullable Object response) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +  public static <T> Call<T> response(@Nullable T successValue) {]
[+++ b/pom.xml, +    <assertj.version>1.7.0</assertj.version>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * <pre><code>, +   * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * <pre><code>, +   * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * <pre><code>, +   * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/http/Body.java, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * <pre><code>, +   * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/http/Body.java, +++ b/retrofit/src/main/java/retrofit2/http/Field.java, + * <pre><code>, + * </code></pre>, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +   * <pre><code>, +   * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/http/Body.java, +++ b/retrofit/src/main/java/retrofit2/http/Field.java, + * <pre><code>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +    checkPercentageValidity(variancePercent, "Variance percentage must be between 0 and 100.");, +    checkPercentageValidity(failurePercent, "Failure percentage must be between 0 and 100.");, +    checkPercentageValidity(errorPercent, "Error percentage must be between 0 and 100.");, +, +  private static void checkPercentageValidity(int percentage, String message) {, +    if (percentage < 0 || percentage > 100) {, +      throw new IllegalArgumentException(message);, +    }, +  }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +    checkPercentageValidity(variancePercent, "Variance percentage must be between 0 and 100.");, +    checkPercentageValidity(failurePercent, "Failure percentage must be between 0 and 100.");, +    checkPercentageValidity(errorPercent, "Error percentage must be between 0 and 100.");, +, +  private static void checkPercentageValidity(int percentage, String message) {, +    if (percentage < 0 || percentage > 100) {, +      throw new IllegalArgumentException(message);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/Utils.java, +        checkNotNull(typeArgument, "typeArgument == null");]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, +  private final Retrofit retrofit;, +  BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Call<T> delegate) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +, +    Executor callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, +            callback.onResponse(response, retrofit);, +            @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, +  private final Retrofit retrofit;, +  BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Call<T> delegate) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +, +    Executor callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, +            callback.onResponse(response, retrofit);, +            @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +  private final Retrofit retrofit;, +    this.retrofit = retrofit;, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, value);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, +  private final Retrofit retrofit;, +  BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Call<T> delegate) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +, +    Executor callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, +            callback.onResponse(response, retrofit);, +            @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +  private final Retrofit retrofit;, +    this.retrofit = retrofit;, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, value);, +++ b/retrofit-mock/src/main/java/retrofit/mock/Calls.java, +import retrofit.Retrofit;, +  public static <T> Call<T> response(T successValue, Retrofit retrofit) {, +    return response(Response.success(successValue), retrofit);, +  public static <T> Call<T> response(final Response<T> response, final Retrofit retrofit) {, +        callback.onResponse(response, retrofit);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, +  private final Retrofit retrofit;, +  BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Call<T> delegate) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +, +    Executor callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, +            callback.onResponse(response, retrofit);, +            @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +  private final Retrofit retrofit;, +    this.retrofit = retrofit;, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, value);, +++ b/retrofit-mock/src/main/java/retrofit/mock/Calls.java, +import retrofit.Retrofit;, +  public static <T> Call<T> response(T successValue, Retrofit retrofit) {, +    return response(Response.success(successValue), retrofit);, +  public static <T> Call<T> response(final Response<T> response, final Retrofit retrofit) {, +        callback.onResponse(response, retrofit);, +++ b/retrofit-mock/src/test/java/retrofit/MockRetrofitTest.java, +    final Retrofit retrofit = new Retrofit.Builder(), +        return Calls.response("Response!", retrofit);, +      @Override public void onResponse(Response<String> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<String> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<String> response, Retrofit retrofit) {]
[+++ b/android/pom.xml, +        <dependency>, +            <groupId>org.easytesting</groupId>, +            <artifactId>fest-assert</artifactId>, +            <scope>test</scope>, +        </dependency>, +++ b/android/pom.xml, +        <dependency>, +            <groupId>org.easytesting</groupId>, +            <artifactId>fest-assert</artifactId>, +            <scope>test</scope>, +        </dependency>, +++ b/android/src/test/java/retrofit/android/ShakeDetectorTest.java, +import org.junit.Test;, +, +import static org.fest.assertions.Assertions.assertThat;, +  @Test public void testInitialShaking() {, +    assertThat(q.isShaking()).isFalse();, +  @Test public void testShakingSampleCount3() {, +    assertThat(q.isShaking()).isFalse();, +    assertThat(q.isShaking()).isFalse();, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isFalse();, +    assertThat(samples.size()).isEqualTo(expected.length).as(sb.toString());, +      assertThat(samples.get(i).accelerating).isEqualTo(expected[i]), +          .as("sample[" + i + "] accelerating");, +  @Test public void testClear() {, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isFalse();, +++ b/android/pom.xml, +        <dependency>, +            <groupId>org.easytesting</groupId>, +            <artifactId>fest-assert</artifactId>, +            <scope>test</scope>, +        </dependency>, +++ b/android/src/test/java/retrofit/android/ShakeDetectorTest.java, +import org.junit.Test;, +, +import static org.fest.assertions.Assertions.assertThat;, +  @Test public void testInitialShaking() {, +    assertThat(q.isShaking()).isFalse();, +  @Test public void testShakingSampleCount3() {, +    assertThat(q.isShaking()).isFalse();, +    assertThat(q.isShaking()).isFalse();, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isFalse();, +    assertThat(samples.size()).isEqualTo(expected.length).as(sb.toString());, +      assertThat(samples.get(i).accelerating).isEqualTo(expected[i]), +          .as("sample[" + i + "] accelerating");, +  @Test public void testClear() {, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isFalse();, +++ b/http/pom.xml, +            <groupId>org.easytesting</groupId>, +            <artifactId>fest-assert</artifactId>, +            <scope>test</scope>, +        </dependency>, +        <dependency>, +++ b/android/pom.xml, +        <dependency>, +            <groupId>org.easytesting</groupId>, +            <artifactId>fest-assert</artifactId>, +            <scope>test</scope>, +        </dependency>, +++ b/android/src/test/java/retrofit/android/ShakeDetectorTest.java, +import org.junit.Test;, +, +import static org.fest.assertions.Assertions.assertThat;, +  @Test public void testInitialShaking() {, +    assertThat(q.isShaking()).isFalse();, +  @Test public void testShakingSampleCount3() {, +    assertThat(q.isShaking()).isFalse();, +    assertThat(q.isShaking()).isFalse();, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isFalse();, +    assertThat(samples.size()).isEqualTo(expected.length).as(sb.toString());, +      assertThat(samples.get(i).accelerating).isEqualTo(expected[i]), +          .as("sample[" + i + "] accelerating");, +  @Test public void testClear() {, +    assertThat(q.isShaking()).isTrue();, +    assertThat(q.isShaking()).isFalse();, +++ b/http/pom.xml, +            <groupId>org.easytesting</groupId>, +            <artifactId>fest-assert</artifactId>, +            <scope>test</scope>, +        </dependency>, +        <dependency>, +++ b/http/src/test/java/retrofit/http/FetcherTest.java, +import org.junit.Test;, +import static org.easymock.EasyMock.anyInt;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.expectLastCall;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.verify;, +import static org.fest.assertions.Assertions.assertThat;, +public class FetcherTest {]
[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import com.squareup.moshi.JsonDataException;, +import com.squareup.moshi.JsonReader;, +      JsonReader reader = JsonReader.of(source);, +      T result = adapter.fromJson(reader);, +      if (reader.peek() != JsonReader.Token.END_DOCUMENT) {, +        throw new JsonDataException("JSON document was not fully consumed.");, +      }, +      return result;, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import com.squareup.moshi.JsonDataException;, +import com.squareup.moshi.JsonReader;, +      JsonReader reader = JsonReader.of(source);, +      T result = adapter.fromJson(reader);, +      if (reader.peek() != JsonReader.Token.END_DOCUMENT) {, +        throw new JsonDataException("JSON document was not fully consumed.");, +      }, +      return result;, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import retrofit2.http.GET;, +  static final class Value {, +    final String theName;, +, +    Value(String theName) {, +      this.theName = theName;, +    }, +  }, +, +, +    @FromJson public Value readWithoutEndingObject(JsonReader reader) throws IOException {, +      reader.beginObject();, +      reader.nextName();, +      String theName = reader.nextString();, +      return new Value(theName);, +    }, +    @GET("/") Call<Value> value();, +, +  @Test public void requireFullResponseDocumentConsumption() throws Exception {, +    server.enqueue(new MockResponse().setBody("{\"theName\":\"value\"}"));, +, +    Call<Value> call = service.value();, +    try {, +      call.execute();, +      fail();, +    } catch (JsonDataException e) {, +      assertThat(e).hasMessage("JSON document was not fully consumed.");, +    }, +  }]
[+++ b/retrofit-adapters/scala/pom.xml, +              <Automatic-Module-Name>retrofit2.adapter.scala</Automatic-Module-Name>, +++ b/retrofit-adapters/scala/pom.xml, +              <Automatic-Module-Name>retrofit2.adapter.scala</Automatic-Module-Name>, +++ b/retrofit-adapters/scala/src/main/java/retrofit2/adapter/scala/BodyCallAdapter.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.scala;, +, +import java.lang.reflect.Type;, +import javax.annotation.Nonnull;, +import retrofit2.Call;, +import retrofit2.CallAdapter;, +import retrofit2.Callback;, +import retrofit2.HttpException;, +import retrofit2.Response;, +import scala.concurrent.Future;, +import scala.concurrent.Promise;, +, +final class BodyCallAdapter<T> implements CallAdapter<T, Future<T>> {, +  private final Type responseType;, +, +  BodyCallAdapter(Type responseType) {, +    this.responseType = responseType;, +  }, +, +  @Override public Type responseType() {, +    return responseType;, +  }, +, +  @Override public Future<T> adapt(@Nonnull Call<T> call) {, +    Promise<T> promise = Promise.apply();, +, +    call.enqueue(new Callback<T>() {, +      @Override public void onResponse(@Nonnull Call<T> call, @Nonnull Response<T> response) {, +        if (response.isSuccessful()) {, +          promise.success(response.body());, +        } else {, +          promise.failure(new HttpException(response));, +        }, +      }, +, +      @Override public void onFailure(@Nonnull Call<T> call, @Nonnull Throwable t) {, +        promise.failure(t);, +      }, +    });, +, +    return promise.future();, +  }, +}, +++ b/retrofit-adapters/scala/pom.xml, +              <Automatic-Module-Name>retrofit2.adapter.scala</Automatic-Module-Name>, +++ b/retrofit-adapters/scala/src/main/java/retrofit2/adapter/scala/BodyCallAdapter.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.scala;, +, +import java.lang.reflect.Type;, +import javax.annotation.Nonnull;, +import retrofit2.Call;, +import retrofit2.CallAdapter;, +import retrofit2.Callback;, +import retrofit2.HttpException;, +import retrofit2.Response;, +import scala.concurrent.Future;, +import scala.concurrent.Promise;, +, +final class BodyCallAdapter<T> implements CallAdapter<T, Future<T>> {, +  private final Type responseType;, +, +  BodyCallAdapter(Type responseType) {, +    this.responseType = responseType;, +  }, +]
[+++ b/pom.xml, +      <dependency>, +        <groupId>com.google.code.findbugs</groupId>, +        <artifactId>jsr305</artifactId>, +        <version>3.0.2</version>, +      </dependency>, +++ b/pom.xml, +      <dependency>, +        <groupId>com.google.code.findbugs</groupId>, +        <artifactId>jsr305</artifactId>, +        <version>3.0.2</version>, +      </dependency>, +++ b/retrofit-adapters/guava/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/pom.xml, +      <dependency>, +        <groupId>com.google.code.findbugs</groupId>, +        <artifactId>jsr305</artifactId>, +        <version>3.0.2</version>, +      </dependency>, +++ b/retrofit-adapters/guava/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +package retrofit2.adapter.guava;, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/pom.xml, +      <dependency>, +        <groupId>com.google.code.findbugs</groupId>, +        <artifactId>jsr305</artifactId>, +        <version>3.0.2</version>, +      </dependency>, +++ b/retrofit-adapters/guava/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +package retrofit2.adapter.guava;, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/pom.xml, +      <dependency>, +        <groupId>com.google.code.findbugs</groupId>, +        <artifactId>jsr305</artifactId>, +        <version>3.0.2</version>, +      </dependency>, +++ b/retrofit-adapters/guava/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +package retrofit2.adapter.guava;, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@ParametersAreNonnullByDefault, +package retrofit2.adapter.java8;, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/pom.xml, +      <dependency>, +        <groupId>com.google.code.findbugs</groupId>, +        <artifactId>jsr305</artifactId>, +        <version>3.0.2</version>, +      </dependency>, +++ b/retrofit-adapters/guava/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault]
[+++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.JsonIOException;, +import com.google.gson.stream.JsonToken;, +      T result = adapter.read(jsonReader);, +      if (jsonReader.peek() != JsonToken.END_DOCUMENT) {, +        throw new JsonIOException("JSON document was not fully consumed.");, +      }, +      return result;, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.JsonIOException;, +import com.google.gson.stream.JsonToken;, +      T result = adapter.read(jsonReader);, +      if (jsonReader.peek() != JsonToken.END_DOCUMENT) {, +        throw new JsonIOException("JSON document was not fully consumed.");, +      }, +      return result;, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java, +import com.google.gson.JsonIOException;, +import retrofit2.http.GET;, +import static org.junit.Assert.fail;, +  static final class Value {, +    static final TypeAdapter<Value> BROKEN_ADAPTER = new TypeAdapter<Value>() {, +      @Override public void write(JsonWriter out, Value value) {, +        throw new AssertionError();, +      }, +, +      @Override public Value read(JsonReader reader) throws IOException {, +        reader.beginObject();, +        reader.nextName();, +        String theName = reader.nextString();, +        return new Value(theName);, +      }, +    };, +, +    final String theName;, +, +    Value(String theName) {, +      this.theName = theName;, +    }, +  }, +, +    @GET("/") Call<Value> value();, +        .registerTypeAdapter(Value.class, Value.BROKEN_ADAPTER), +, +  @Test public void requireFullResponseDocumentConsumption() throws Exception {, +    server.enqueue(new MockResponse().setBody("{\"theName\":\"value\"}"));, +, +    Call<Value> call = service.value();, +    try {, +      call.execute();, +      fail();, +    } catch (JsonIOException e) {, +      assertThat(e).hasMessage("JSON document was not fully consumed.");, +    }, +  }]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +  private volatile boolean unsubscribed;, +    unsubscribed = true;, +    return unsubscribed;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +  private volatile boolean unsubscribed;, +    unsubscribed = true;, +    return unsubscribed;, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CancelDisposeTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.List;, +import okhttp3.Call;, +import okhttp3.OkHttpClient;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import retrofit2.Retrofit;, +import retrofit2.http.GET;, +import rx.Observable;, +import rx.Subscription;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +, +public final class CancelDisposeTest {, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  interface Service {, +    @GET("/") Observable<String> go();, +  }, +, +  private final OkHttpClient client = new OkHttpClient();, +  private Service service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(RxJavaCallAdapterFactory.createAsync()), +        .callFactory(client), +        .build();, +    service = retrofit.create(Service.class);, +  }, +, +  @Test public void disposeCancelsCall() {, +    Subscription subscription = service.go().subscribe();, +    List<Call> calls = client.dispatcher().runningCalls();, +    assertEquals(1, calls.size());, +    subscription.unsubscribe();, +    assertTrue(calls.get(0).isCanceled());, +  }, +, +  @Test public void cancelDoesNotDispose() {, +    Subscription subscription = service.go().subscribe();, +    List<Call> calls = client.dispatcher().runningCalls();, +    assertEquals(1, calls.size());, +    calls.get(0).cancel();, +    assertFalse(subscription.isUnsubscribed());, +  }, +}, +, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +  private volatile boolean unsubscribed;, +    unsubscribed = true;, +    return unsubscribed;, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CancelDisposeTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;]
[+++ b/pom.xml, +    <okhttp.version>3.1.2</okhttp.version>]
[+++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro)., +++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro)., +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T, ?> serviceMethod;, +  OkHttpCall(ServiceMethod<T, ?> serviceMethod, @Nullable Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    okhttp3.Call call = serviceMethod.toCall(args);, +      T body = serviceMethod.toResponse(catchingBody);, +++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro)., +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T, ?> serviceMethod;, +  OkHttpCall(ServiceMethod<T, ?> serviceMethod, @Nullable Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    okhttp3.Call call = serviceMethod.toCall(args);, +      T body = serviceMethod.toResponse(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.io.IOException;, +  /** Builds an HTTP request from method arguments. */, +  okhttp3.Call toCall(@Nullable Object[] args) throws IOException {, +    return callFactory.newCall(requestFactory.create(args));, +  }, +, +    return callAdapter.adapt(new OkHttpCall<>(this, args));, +  }, +, +  /** Builds a method return value from an HTTP response body. */, +  ResponseT toResponse(ResponseBody body) throws IOException {, +    return responseConverter.convert(body);, +++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro)., +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T, ?> serviceMethod;, +  OkHttpCall(ServiceMethod<T, ?> serviceMethod, @Nullable Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    okhttp3.Call call = serviceMethod.toCall(args);, +      T body = serviceMethod.toResponse(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.io.IOException;, +  /** Builds an HTTP request from method arguments. */, +  okhttp3.Call toCall(@Nullable Object[] args) throws IOException {, +    return callFactory.newCall(requestFactory.create(args));, +  }, +, +    return callAdapter.adapt(new OkHttpCall<>(this, args));, +  }, +, +  /** Builds a method return value from an HTTP response body. */, +  ResponseT toResponse(ResponseBody body) throws IOException {, +    return responseConverter.convert(body);, +++ b/website/index.html, +              <p>If you are using R8 or ProGuard add the options from <a href="https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro">this file</a>.</p>]
[+++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0</version>, +++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0</version>, +++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0</version>, +++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.0</version>, +++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.0</version>, +++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.5.0</version>, +++ b/pom.xml, +  <version>2.5.0</version>, +    <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.5.0</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.5.0</version>, +++ b/pom.xml]
[+++ b/checkstyle.xml, +        <module name="UnusedImports">, +          <property name="processJavadoc" value="true"/>, +        </module>, +++ b/checkstyle.xml, +        <module name="UnusedImports">, +          <property name="processJavadoc" value="true"/>, +        </module>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +      return requestBuilder.build();, +++ b/checkstyle.xml, +        <module name="UnusedImports">, +          <property name="processJavadoc" value="true"/>, +        </module>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +      return requestBuilder.build();, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/checkstyle.xml, +        <module name="UnusedImports">, +          <property name="processJavadoc" value="true"/>, +        </module>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +      return requestBuilder.build();, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/checkstyle.xml, +        <module name="UnusedImports">, +          <property name="processJavadoc" value="true"/>, +        </module>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +      return requestBuilder.build();, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      RequestInterceptor requestInterceptor, Converter converter, ErrorHandler errorHandler) {, +      return requestBuilder.build();, +      return new RestAdapter(endpoint, client, callbackExecutor, requestInterceptor, converter,, +          errorHandler);, +++ b/checkstyle.xml, +        <module name="UnusedImports">, +          <property name="processJavadoc" value="true"/>, +        </module>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +      return requestBuilder.build();, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      RequestInterceptor requestInterceptor, Converter converter, ErrorHandler errorHandler) {, +      return requestBuilder.build();, +      return new RestAdapter(endpoint, client, callbackExecutor, requestInterceptor, converter,, +          errorHandler);, +++ /dev/null, +++ b/checkstyle.xml, +        <module name="UnusedImports">, +          <property name="processJavadoc" value="true"/>, +        </module>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +      return requestBuilder.build();, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      RequestInterceptor requestInterceptor, Converter converter, ErrorHandler errorHandler) {, +      return requestBuilder.build();, +      return new RestAdapter(endpoint, client, callbackExecutor, requestInterceptor, converter,, +          errorHandler);, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java]
[+++ b/pom.xml, +    <okhttp.version>1.2.1</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>1.2.1</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    HttpConnectionParams.setConnectionTimeout(params, Defaults.CONNECT_TIMEOUT_MILLIS);, +    HttpConnectionParams.setSoTimeout(params, Defaults.READ_TIMEOUT_MILLIS);, +++ b/pom.xml, +    <okhttp.version>1.2.1</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    HttpConnectionParams.setConnectionTimeout(params, Defaults.CONNECT_TIMEOUT_MILLIS);, +    HttpConnectionParams.setSoTimeout(params, Defaults.READ_TIMEOUT_MILLIS);, +++ b/retrofit/src/main/java/retrofit/client/Defaults.java, +  static final int CONNECT_TIMEOUT_MILLIS = 15 * 1000; // 15s, +  static final int READ_TIMEOUT_MILLIS = 20 * 1000; // 20s, +++ b/pom.xml, +    <okhttp.version>1.2.1</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    HttpConnectionParams.setConnectionTimeout(params, Defaults.CONNECT_TIMEOUT_MILLIS);, +    HttpConnectionParams.setSoTimeout(params, Defaults.READ_TIMEOUT_MILLIS);, +++ b/retrofit/src/main/java/retrofit/client/Defaults.java, +  static final int CONNECT_TIMEOUT_MILLIS = 15 * 1000; // 15s, +  static final int READ_TIMEOUT_MILLIS = 20 * 1000; // 20s, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +import java.util.concurrent.TimeUnit;, +    this(generateDefaultOkHttp());, +    return client.open(new URL(request.getUrl()));, +  }, +, +  private static OkHttpClient generateDefaultOkHttp() {, +    OkHttpClient okHttp = new OkHttpClient();, +    okHttp.setConnectTimeout(Defaults.CONNECT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);, +    okHttp.setReadTimeout(Defaults.READ_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);, +    return okHttp;, +++ b/pom.xml, +    <okhttp.version>1.2.1</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    HttpConnectionParams.setConnectionTimeout(params, Defaults.CONNECT_TIMEOUT_MILLIS);, +    HttpConnectionParams.setSoTimeout(params, Defaults.READ_TIMEOUT_MILLIS);, +++ b/retrofit/src/main/java/retrofit/client/Defaults.java, +  static final int CONNECT_TIMEOUT_MILLIS = 15 * 1000; // 15s, +  static final int READ_TIMEOUT_MILLIS = 20 * 1000; // 20s, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +import java.util.concurrent.TimeUnit;, +    this(generateDefaultOkHttp());, +    return client.open(new URL(request.getUrl()));, +  }, +, +  private static OkHttpClient generateDefaultOkHttp() {, +    OkHttpClient okHttp = new OkHttpClient();, +    okHttp.setConnectTimeout(Defaults.CONNECT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);, +    okHttp.setReadTimeout(Defaults.READ_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);, +    return okHttp;, +++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +    connection.setConnectTimeout(Defaults.CONNECT_TIMEOUT_MILLIS);, +    connection.setReadTimeout(Defaults.READ_TIMEOUT_MILLIS);]
[+++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +++ b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro, +, +# With R8 full mode, it sees no subtypes of Retrofit interfaces since they are created with a Proxy, +# and replaces all potential values with null. Explicitly keeping the interfaces prevents this., +-if interface * { @retrofit2.http.* <methods>; }, +-keep,allowobfuscation interface <1>]
[+++ b/retrofit-converters/protobuf/pom.xml, +    <extensions>, +      <extension>, +        <groupId>kr.motd.maven</groupId>, +        <artifactId>os-maven-plugin</artifactId>, +        <version>1.6.2</version>, +      </extension>, +    </extensions>, +        <groupId>org.xolstice.maven.plugins</groupId>, +        <artifactId>protobuf-maven-plugin</artifactId>, +        <version>0.6.1</version>, +        <executions>, +          <execution>, +            <phase>generate-test-sources</phase>, +            <goals>, +              <goal>test-compile</goal>, +            </goals>, +          </execution>, +        </executions>, +        <configuration>, +          <protoTestSourceRoot>src/test/protos</protoTestSourceRoot>, +          <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>, +        </configuration>, +      </plugin>, +      <plugin>, +++ b/retrofit-converters/protobuf/pom.xml, +    <extensions>, +      <extension>, +        <groupId>kr.motd.maven</groupId>, +        <artifactId>os-maven-plugin</artifactId>, +        <version>1.6.2</version>, +      </extension>, +    </extensions>, +        <groupId>org.xolstice.maven.plugins</groupId>, +        <artifactId>protobuf-maven-plugin</artifactId>, +        <version>0.6.1</version>, +        <executions>, +          <execution>, +            <phase>generate-test-sources</phase>, +            <goals>, +              <goal>test-compile</goal>, +            </goals>, +          </execution>, +        </executions>, +        <configuration>, +          <protoTestSourceRoot>src/test/protos</protoTestSourceRoot>, +          <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>, +        </configuration>, +      </plugin>, +      <plugin>, +++ /dev/null, +++ b/retrofit-converters/protobuf/pom.xml, +    <extensions>, +      <extension>, +        <groupId>kr.motd.maven</groupId>, +        <artifactId>os-maven-plugin</artifactId>, +        <version>1.6.2</version>, +      </extension>, +    </extensions>, +        <groupId>org.xolstice.maven.plugins</groupId>, +        <artifactId>protobuf-maven-plugin</artifactId>, +        <version>0.6.1</version>, +        <executions>, +          <execution>, +            <phase>generate-test-sources</phase>, +            <goals>, +              <goal>test-compile</goal>, +            </goals>, +          </execution>, +        </executions>, +        <configuration>, +          <protoTestSourceRoot>src/test/protos</protoTestSourceRoot>, +          <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>, +        </configuration>, +      </plugin>, +      <plugin>, +++ /dev/null, +++ /dev/null]
[+++ b/pom.xml, +    <wire.version>1.5.2</wire.version>]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  static class StringConverterFactory extends Converter.Factory {, +    @Override, +    public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +      return new Converter<ResponseBody, String>() {, +        @Override public String convert(ResponseBody value) throws IOException {, +          return value.string();, +        }, +      };, +    @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +      return new Converter<String, RequestBody>() {, +        @Override public RequestBody convert(String value) throws IOException {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  static class StringConverterFactory extends Converter.Factory {, +    @Override, +    public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +      return new Converter<ResponseBody, String>() {, +        @Override public String convert(ResponseBody value) throws IOException {, +          return value.string();, +        }, +      };, +    @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +      return new Converter<String, RequestBody>() {, +        @Override public RequestBody convert(String value) throws IOException {, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  static class StringConverterFactory extends Converter.Factory {, +    @Override, +    public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +      return new Converter<ResponseBody, String>() {, +        @Override public String convert(ResponseBody value) throws IOException {, +          return value.string();, +        }, +      };, +    @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +      return new Converter<String, RequestBody>() {, +        @Override public RequestBody convert(String value) throws IOException {, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +/**, + * A {@linkplain Converter.Factory converter} which uses Gson for JSON., + * <p>, + * Because Gson is so flexible in the types it supports, this converter assumes that it can handle, + * all types. If you are mixing JSON serialization with something else (such as protocol buffers),, + * you must {@linkplain Retrofit.Builder#addConverterFactory(Converter.Factory) add this instance}, + * last to allow the other converters a chance to see their types., + */, +public final class GsonConverterFactory extends Converter.Factory {, +  @Override, +  public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +    return new GsonResponseBodyConverter<>(adapter);, +  }, +, +  @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonRequestBodyConverter<>(adapter);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  static class StringConverterFactory extends Converter.Factory {, +    @Override, +    public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +      return new Converter<ResponseBody, String>() {, +        @Override public String convert(ResponseBody value) throws IOException {, +          return value.string();, +        }, +      };, +    @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +      return new Converter<String, RequestBody>() {, +        @Override public RequestBody convert(String value) throws IOException {, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +/**, + * A {@linkplain Converter.Factory converter} which uses Gson for JSON., + * <p>, + * Because Gson is so flexible in the types it supports, this converter assumes that it can handle, + * all types. If you are mixing JSON serialization with something else (such as protocol buffers),, + * you must {@linkplain Retrofit.Builder#addConverterFactory(Converter.Factory) add this instance}, + * last to allow the other converters a chance to see their types., + */, +public final class GsonConverterFactory extends Converter.Factory {, +  @Override, +  public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +    return new GsonResponseBodyConverter<>(adapter);, +  }, +, +  @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]
[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    okhttp3.Call call = serviceMethod.toCall(args);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    okhttp3.Call call = serviceMethod.toCall(args);, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return serviceMethod.adapt(okHttpCall);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    okhttp3.Call call = serviceMethod.toCall(args);, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return serviceMethod.adapt(okHttpCall);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +  private final okhttp3.Call.Factory callFactory;, +  private final CallAdapter<R, T> callAdapter;, +  okhttp3.Call toCall(@Nullable Object... args) throws IOException {, +    return callFactory.newCall(requestBuilder.build());, +  }, +, +  T adapt(Call<R> call) {, +    return callAdapter.adapt(call);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    okhttp3.Call call = serviceMethod.toCall(args);, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return serviceMethod.adapt(okHttpCall);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +  private final okhttp3.Call.Factory callFactory;, +  private final CallAdapter<R, T> callAdapter;, +  okhttp3.Call toCall(@Nullable Object... args) throws IOException {, +    return callFactory.newCall(requestBuilder.build());, +  }, +, +  T adapt(Call<R> call) {, +    return callAdapter.adapt(call);, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +    Call<T> call = serviceMethod.adapt(okHttpCall);]
[+++ b/pom.xml, +        <gson.version>2.2.3-SNAPSHOT</gson.version>]
[+++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/android.iml" filepath="$PROJECT_DIR$/modules/android/android.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/core/core.iml" filepath="$PROJECT_DIR$/modules/core/core.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/http/http.iml" filepath="$PROJECT_DIR$/modules/http/http.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/io/io.iml" filepath="$PROJECT_DIR$/modules/io/io.iml" />, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/android.iml" filepath="$PROJECT_DIR$/modules/android/android.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/core/core.iml" filepath="$PROJECT_DIR$/modules/core/core.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/http/http.iml" filepath="$PROJECT_DIR$/modules/http/http.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/io/io.iml" filepath="$PROJECT_DIR$/modules/io/io.iml" />, +++ b/build.xml, +    <!-- Build these in this particular order. -->, +    <compile.module module="core"/>, +, +    <compile.module module="io">, +      <compile.main.classpath>, +        <pathelement location="${build.dir}/core/main"/>, +      </compile.main.classpath>, +    </compile.module>, +, +    <compile.module module="http">, +      <compile.main.classpath>, +        <pathelement location="${build.dir}/core/main"/>, +        <pathelement location="${build.dir}/io/main"/>, +      </compile.main.classpath>, +      <compile.tests.classpath>, +        <pathelement location="${build.dir}/core/main"/>, +        <pathelement location="${build.dir}/io/main"/>, +      </compile.tests.classpath>, +    </compile.module>, +, +    <jar.module module="core"/>, +    <jar.module module="http"/>, +    <jar.module module="io"/>, +        <pathelement location="${build.dir}/core/main"/>, +        <pathelement location="${build.dir}/core/tests"/>, +        <pathelement location="${build.dir}/http/main"/>, +        <pathelement location="${build.dir}/http/tests"/>, +        <pathelement location="${build.dir}/io/main"/>, +        <pathelement location="${build.dir}/io/tests"/>, +        <fileset dir="modules/core/src-tests">, +          <include name="**/*Test.java"/>, +        </fileset>, +        <fileset dir="modules/io/src-tests">, +          <include name="**/*Test.java"/>, +        </fileset>, +        <fileset dir="modules/http/src-tests">, +          <include name="**/*Test.java"/>, +        </fileset>, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/android.iml" filepath="$PROJECT_DIR$/modules/android/android.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/core/core.iml" filepath="$PROJECT_DIR$/modules/core/core.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/http/http.iml" filepath="$PROJECT_DIR$/modules/http/http.iml" />, +      <module fileurl="file://$PROJECT_DIR$/modules/io/io.iml" filepath="$PROJECT_DIR$/modules/io/io.iml" />, +++ b/build.xml, +    <!-- Build these in this particular order. -->, +    <compile.module module="core"/>, +, +    <compile.module module="io">, +      <compile.main.classpath>, +        <pathelement location="${build.dir}/core/main"/>, +      </compile.main.classpath>, +    </compile.module>, +, +    <compile.module module="http">, +      <compile.main.classpath>, +        <pathelement location="${build.dir}/core/main"/>, +        <pathelement location="${build.dir}/io/main"/>, +      </compile.main.classpath>, +      <compile.tests.classpath>, +        <pathelement location="${build.dir}/core/main"/>, +        <pathelement location="${build.dir}/io/main"/>, +      </compile.tests.classpath>, +    </compile.module>, +, +    <jar.module module="core"/>, +    <jar.module module="http"/>, +    <jar.module module="io"/>, +        <pathelement location="${build.dir}/core/main"/>, +        <pathelement location="${build.dir}/core/tests"/>, +        <pathelement location="${build.dir}/http/main"/>, +        <pathelement location="${build.dir}/http/tests"/>, +        <pathelement location="${build.dir}/io/main"/>, +        <pathelement location="${build.dir}/io/tests"/>, +        <fileset dir="modules/core/src-tests">, +          <include name="**/*Test.java"/>, +        </fileset>, +        <fileset dir="modules/io/src-tests">, +          <include name="**/*Test.java"/>, +        </fileset>, +        <fileset dir="modules/http/src-tests">, +          <include name="**/*Test.java"/>, +        </fileset>, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +    <dependency org="com.google.code.guice" name="guice" rev="1.0"/>, +    <dependency org="org.apache.httpcomponents" name="httpmime" rev="4.0.1"/>, +    <dependency org="junit" name="junit" rev="4.8.1"/>, +    <dependency org="org.apache.httpcomponents" name="httpclient" rev="4.0.1"/>, +    <dependency org="org.easymock" name="easymock" rev="2.5.2"/>]
[+++ b/pom.xml, +    <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .endpoint("http://example.com"), +++ b/pom.xml, +    <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .endpoint("http://example.com"), +++ /dev/null, +++ b/pom.xml, +    <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .endpoint("http://example.com"), +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.FormEncodingBuilder;, +  private void addFormField(String name, String value, boolean encode) {, +    if (encode) {, +      formEncodingBuilder.add(name, value);, +    } else {, +      formEncodingBuilder.addEncoded(name, value);, +    }, +  }, +, +          boolean encode = field.encode();, +                addFormField(name, iterableValue.toString(), encode);, +                addFormField(name, arrayValue.toString(), encode);, +            addFormField(name, value.toString(), encode);, +          boolean encode = fieldMap.encode();, +              addFormField(entryKey.toString(), entryValue.toString(), encode);, +++ b/pom.xml, +    <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .endpoint("http://example.com"), +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.FormEncodingBuilder;, +  private void addFormField(String name, String value, boolean encode) {, +    if (encode) {, +      formEncodingBuilder.add(name, value);, +    } else {, +      formEncodingBuilder.addEncoded(name, value);, +    }, +  }, +, +          boolean encode = field.encode();, +                addFormField(name, iterableValue.toString(), encode);, +                addFormField(name, arrayValue.toString(), encode);, +            addFormField(name, value.toString(), encode);, +          boolean encode = fieldMap.encode();, +              addFormField(entryKey.toString(), entryValue.toString(), encode);, +++ b/retrofit/src/main/java/retrofit/http/Field.java, +  /** Specifies whether the {@linkplain #value() name} and value are URL encoded. */, +  boolean encode() default true;, +++ b/pom.xml, +    <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .endpoint("http://example.com"), +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.FormEncodingBuilder;, +  private void addFormField(String name, String value, boolean encode) {, +    if (encode) {, +      formEncodingBuilder.add(name, value);, +    } else {, +      formEncodingBuilder.addEncoded(name, value);, +    }, +  }, +, +          boolean encode = field.encode();, +                addFormField(name, iterableValue.toString(), encode);, +                addFormField(name, arrayValue.toString(), encode);, +            addFormField(name, value.toString(), encode);, +          boolean encode = fieldMap.encode();, +              addFormField(entryKey.toString(), entryValue.toString(), encode);, +++ b/retrofit/src/main/java/retrofit/http/Field.java, +  /** Specifies whether the {@linkplain #value() name} and value are URL encoded. */, +  boolean encode() default true;, +++ b/retrofit/src/main/java/retrofit/http/FieldMap.java, +  /** Specifies whether the names and values are URL encoded. */, +  boolean encode() default true;, +++ b/pom.xml, +    <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .endpoint("http://example.com"), +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.FormEncodingBuilder;, +  private void addFormField(String name, String value, boolean encode) {, +    if (encode) {, +      formEncodingBuilder.add(name, value);, +    } else {, +      formEncodingBuilder.addEncoded(name, value);, +    }, +  }, +, +          boolean encode = field.encode();, +                addFormField(name, iterableValue.toString(), encode);]
[+++ b/pom.xml, +  <version>1.0.2</version>, +++ b/pom.xml, +  <version>1.0.2</version>, +++ b/retrofit/pom.xml, +    <version>1.0.2</version>, +++ b/pom.xml, +  <version>1.0.2</version>, +++ b/retrofit/pom.xml, +    <version>1.0.2</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.2</version>, +++ b/pom.xml, +  <version>1.0.2</version>, +++ b/retrofit/pom.xml, +    <version>1.0.2</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.2</version>, +++ b/samples/pom.xml, +    <version>1.0.2</version>]
[+++ b/pom.xml, +    <okhttp.version>3.1.1</okhttp.version>]
[+++ b/pom.xml, +    <appengine.version>1.8.9</appengine.version>, +      <dependency>, +        <groupId>com.google.appengine</groupId>, +        <artifactId>appengine-api-1.0-sdk</artifactId>, +        <version>${appengine.version}</version>, +      </dependency>, +++ b/pom.xml, +    <appengine.version>1.8.9</appengine.version>, +      <dependency>, +        <groupId>com.google.appengine</groupId>, +        <artifactId>appengine-api-1.0-sdk</artifactId>, +        <version>${appengine.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <configuration>, +          <!-- The AppEngine dependency has an annotation processor we don't want to run. -->, +          <compilerArgument>-proc:none</compilerArgument>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/pom.xml, +    <appengine.version>1.8.9</appengine.version>, +      <dependency>, +        <groupId>com.google.appengine</groupId>, +        <artifactId>appengine-api-1.0-sdk</artifactId>, +        <version>${appengine.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <configuration>, +          <!-- The AppEngine dependency has an annotation processor we don't want to run. -->, +          <compilerArgument>-proc:none</compilerArgument>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +import retrofit.appengine.UrlFetchClient;, +, +    if (System.getProperty("com.google.appengine.runtime.version") != null) {, +      return new AppEngine();, +    }, +, +  private static class AppEngine extends Base {, +    @Override Client.Provider defaultClient() {, +      final UrlFetchClient client = new UrlFetchClient();, +      return new Client.Provider() {, +        @Override public Client get() {, +          return client;, +        }, +      };, +    }, +  }, +, +++ b/pom.xml, +    <appengine.version>1.8.9</appengine.version>, +      <dependency>, +        <groupId>com.google.appengine</groupId>, +        <artifactId>appengine-api-1.0-sdk</artifactId>, +        <version>${appengine.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <configuration>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +      assertThat(e.getCause()), +          .isInstanceOf(HttpException.class) // Required for backwards compatibility., +          .isInstanceOf(retrofit2.HttpException.class), +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +      assertThat(e.getCause()), +          .isInstanceOf(HttpException.class) // Required for backwards compatibility., +          .isInstanceOf(retrofit2.HttpException.class), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +      assertThat(e.getCause()), +          .isInstanceOf(HttpException.class) // Required for backwards compatibility., +          .isInstanceOf(retrofit2.HttpException.class), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +      assertThat(e.getCause()), +          .isInstanceOf(HttpException.class) // Required for backwards compatibility., +          .isInstanceOf(retrofit2.HttpException.class), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/CompletableFutureTest.java, +      assertThat(e.getCause()), +          .isInstanceOf(HttpException.class) // Required for backwards compatibility., +          .isInstanceOf(retrofit2.HttpException.class), +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, +    super(response);, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +      assertThat(e.getCause()), +          .isInstanceOf(HttpException.class) // Required for backwards compatibility., +          .isInstanceOf(retrofit2.HttpException.class), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, CompletableFuture<R>> {, +    @Override public CompletableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, CompletableFuture<Response<R>>> {, +    @Override public CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, CompletableFuture<R>> {, +    @Override public CompletableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, CompletableFuture<Response<R>>> {, +    @Override public CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, CompletableFuture<R>> {, +    @Override public CompletableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, CompletableFuture<Response<R>>> {, +    @Override public CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapter.java, +final class RxJavaCallAdapter<R> implements CallAdapter<R, Object> {, +  @Override public Object adapt(Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter<>(innerType);, +    return new ResponseCallAdapter<>(responseType);, +  private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, +    @Override public ListenableFuture<R> adapt(final Call<R> call) {, +  private static final class ResponseCallAdapter<R>, +      implements CallAdapter<R, ListenableFuture<Response<R>>> {, +    @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {]
[+++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.2.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-mock</artifactId>, +  <name>Retrofit Mock Adapter</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.2.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-mock</artifactId>, +  <name>Retrofit Mock Adapter</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>]
[+++ b/pom.xml, +    <rxjava.version>0.19.2</rxjava.version>, +    <jackson.version>2.4.1</jackson.version>, +    <wire.version>1.5.1</wire.version>, +    <assertj.version>1.6.1</assertj.version>, +    <guava.version>17.0</guava.version>, +++ b/pom.xml, +    <rxjava.version>0.19.2</rxjava.version>, +    <jackson.version>2.4.1</jackson.version>, +    <wire.version>1.5.1</wire.version>, +    <assertj.version>1.6.1</assertj.version>, +    <guava.version>17.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import retrofit.http.Body;, +import retrofit.http.EncodedPath;, +import retrofit.http.EncodedQuery;, +import retrofit.http.EncodedQueryMap;, +import retrofit.http.Field;, +import retrofit.http.FieldMap;, +import retrofit.http.Path;, +import retrofit.http.Query;, +import retrofit.http.QueryMap;, +    paramAnnotations = methodInfo.requestParamAnnotations;, +    addQueryParam(name, value, false, true);, +    addQueryParam(name, value, false, false);, +  private void addQueryParam(String name, Object value, boolean encodeName, boolean encodeValue) {, +    if (value instanceof Iterable) {, +      for (Object iterableValue : (Iterable<?>) value) {, +        if (iterableValue != null) { // Skip null values, +          addQueryParam(name, iterableValue.toString(), encodeName, encodeValue);, +        }, +      }, +    } else if (value.getClass().isArray()) {, +      for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +        Object arrayValue = Array.get(value, x);, +        if (arrayValue != null) { // Skip null values, +          addQueryParam(name, arrayValue.toString(), encodeName, encodeValue);, +        }, +      }, +    } else {, +      addQueryParam(name, value.toString(), encodeName, encodeValue);, +    }, +  }, +, +  private void addQueryParam(String name, String value, boolean encodeName, boolean encodeValue) {, +, +      if (encodeName) {, +        name = URLEncoder.encode(name, "UTF-8");, +      }, +      if (encodeValue) {, +        value = URLEncoder.encode(value, "UTF-8");, +      }, +  private void addQueryParamMap(int parameterNumber, Map<?, ?> map, boolean encodeNames,, +      boolean encodeValues) {, +    for (Map.Entry<?, ?> entry : map.entrySet()) {, +      Object entryKey = entry.getKey();, +      if (entryKey == null) {, +        throw new IllegalArgumentException(, +            "Parameter #" + (parameterNumber + 1) + " query map contained null key.");, +      }, +      Object entryValue = entry.getValue();, +      if (entryValue != null) { // Skip null values., +        addQueryParam(entryKey.toString(), entryValue.toString(), encodeNames, encodeValues);, +      }, +    }, +  }, +, +, +      Annotation annotation = paramAnnotations[i];, +      Class<? extends Annotation> annotationType = annotation.annotationType();, +      if (annotationType == Path.class) {, +        Path path = (Path) annotation;, +        String name = path.value();, +        addPathParam(name, value.toString(), path.encode());, +      } else if (annotationType == EncodedPath.class) {, +        String name = ((EncodedPath) annotation).value();, +        addPathParam(name, value.toString(), false);, +      } else if (annotationType == Query.class) {, +          Query query = (Query) annotation;, +          addQueryParam(query.value(), value, query.encodeName(), query.encodeValue());, +      } else if (annotationType == EncodedQuery.class) {, +          EncodedQuery query = (EncodedQuery) annotation;, +          addQueryParam(query.value(), value, false, false);, +      } else if (annotationType == QueryMap.class) {, +          QueryMap queryMap = (QueryMap) annotation;, +          addQueryParamMap(i, (Map<?, ?>) value, queryMap.encodeNames(), queryMap.encodeValues());, +        }, +      } else if (annotationType == EncodedQueryMap.class) {, +        if (value != null) { // Skip null values., +          addQueryParamMap(i, (Map<?, ?>) value, false, false);, +        }, +      } else if (annotationType == retrofit.http.Header.class) {, +        if (value != null) { // Skip null values., +          String name = ((retrofit.http.Header) annotation).value();, +      } else if (annotationType == Field.class) {, +        String name = ((Field) annotation).value();, +      } else if (annotationType == FieldMap.class) {, +            Object entryKey = entry.getKey();, +            if (entryKey == null) {, +              throw new IllegalArgumentException(]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +    } catch (ClassNotFoundException e) {, +  }, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +    } catch (ClassNotFoundException e) {, +  }, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private void addQueryParam(String name, String value) {, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Multipart part \"" + name + "\" value must not be null.");, +          }, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +    } catch (ClassNotFoundException e) {, +  }, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private void addQueryParam(String name, String value) {, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Multipart part \"" + name + "\" value must not be null.");, +          }, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +     * Add a path parameter replacement. This works exactly like a {@link retrofit.http.Part, +     * &#64;Part}-annotated method argument., +++ b/CHANGELOG.md, +++ b/checkstyle.xml, +    <!--module name="NewlineAtEndOfFile"/-->, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +        Exceptions.throwIfFatal(t);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +        Exceptions.throwIfFatal(t);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import okhttp3.Dispatcher;, +import okhttp3.OkHttpClient;, +import org.junit.After;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +  private List<Throwable> uncaughtExceptions = new ArrayList<>();, +, +    ExecutorService executorService = Executors.newCachedThreadPool(new ThreadFactory() {, +      @Override public Thread newThread(Runnable r) {, +        Thread thread = new Thread(r);, +        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {, +          @Override public void uncaughtException(Thread t, Throwable e) {, +            uncaughtExceptions.add(e);, +          }, +        });, +        return thread;, +      }, +    });, +, +    OkHttpClient client = new OkHttpClient.Builder(), +        .dispatcher(new Dispatcher(executorService)), +        .build();, +        .client(client), +  @After public void tearDown() {, +    assertTrue("Uncaught exceptions: " + uncaughtExceptions, uncaughtExceptions.isEmpty());, +  }, +, +, +  @Test public void bodyThrowingFatalInOnErrorPropagates() throws InterruptedException {, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    final CountDownLatch latch = new CountDownLatch(1);, +, +    TestObserver<Void> observer = new TestObserver<>();, +    final Error e = new OutOfMemoryError("Not real");, +    service.completable().subscribe(new ForwardingCompletableObserver(observer) {, +      @Override public void onError(Throwable throwable) {, +        throw e;, +      }, +    });, +, +    latch.await(1, SECONDS);, +, +    assertEquals(1, uncaughtExceptions.size());, +    assertSame(e, uncaughtExceptions.remove(0));, +  }, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +        Exceptions.throwIfFatal(t);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import okhttp3.Dispatcher;, +import okhttp3.OkHttpClient;, +import org.junit.After;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +  private List<Throwable> uncaughtExceptions = new ArrayList<>();, +, +    ExecutorService executorService = Executors.newCachedThreadPool(new ThreadFactory() {, +      @Override public Thread newThread(Runnable r) {, +        Thread thread = new Thread(r);, +        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {, +          @Override public void uncaughtException(Thread t, Throwable e) {, +            uncaughtExceptions.add(e);, +          }, +        });, +        return thread;, +      }, +    });, +, +    OkHttpClient client = new OkHttpClient.Builder(), +        .dispatcher(new Dispatcher(executorService)), +        .build();, +        .client(client), +  @After public void tearDown() {, +    assertTrue("Uncaught exceptions: " + uncaughtExceptions, uncaughtExceptions.isEmpty());, +  }, +, +, +  @Test public void bodyThrowingFatalInOnErrorPropagates() throws InterruptedException {, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    final CountDownLatch latch = new CountDownLatch(1);, +, +    TestObserver<Void> observer = new TestObserver<>();]
[+++ b/pom.xml, +    <okhttp.version>3.1.1</okhttp.version>, +    <gson.version>2.6.1</gson.version>, +++ b/pom.xml, +    <okhttp.version>3.1.1</okhttp.version>, +    <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/pom.xml, +    <okhttp.version>3.1.1</okhttp.version>, +    <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonReader;, +  private final Gson gson;, +  GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {, +    this.gson = gson;, +    JsonReader jsonReader = gson.newJsonReader(value.charStream());, +      return adapter.read(jsonReader);, +++ b/pom.xml, +    <okhttp.version>3.1.1</okhttp.version>, +    <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonReader;, +  private final Gson gson;, +  GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {, +    this.gson = gson;, +    JsonReader jsonReader = gson.newJsonReader(value.charStream());, +      return adapter.read(jsonReader);, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java, +        .setLenient(), +, +  @Test public void deserializeUsesConfiguration() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("{/* a comment! */}"));, +, +    Response<AnImplementation> response =, +        service.anImplementation(new AnImplementation("value")).execute();, +    assertThat(response.body().getName()).isNull();, +  }]
[+++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0-SNAPSHOT</version>]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +    boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;, +, +    Annotation[] annotations = method.getAnnotations();, +    Type adapterType;, +    if (isKotlinSuspendFunction) {, +      Type responseType = Utils.getParameterLowerBound(0,, +          (ParameterizedType) parameterTypes[parameterTypes.length - 1]);, +, +      adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType);, +      annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);, +      adapterType = method.getGenericReturnType();, +    CallAdapter<ResponseT, ReturnT> callAdapter =, +        createCallAdapter(retrofit, method, adapterType, annotations);, +    Type responseType = callAdapter.responseType();, +    if (!isKotlinSuspendFunction) {, +      return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter);, +          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter);, +          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter,, +          continuationBodyNullable);, +      Retrofit retrofit, Method method, Type returnType, Annotation[] annotations) {, +  HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +    Call<ResponseT> call = new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, +    return adapt(call, args);, +  protected abstract @Nullable ReturnT adapt(Call<ResponseT> call, Object[] args);, +    CallAdapted(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, ReturnT> callAdapter) {, +    @Override protected ReturnT adapt(Call<ResponseT> call, Object[] args) {, +    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;, +, +    SuspendForResponse(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, Call<ResponseT>> callAdapter) {, +      this.callAdapter = callAdapter;, +    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {, +      call = callAdapter.adapt(call);, +, +      //noinspection unchecked Checked by reflection inside RequestFactory., +    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;, +    SuspendForBody(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, Call<ResponseT>> callAdapter, boolean isNullable) {, +      this.callAdapter = callAdapter;, +    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {, +      call = callAdapter.adapt(call);, +, +      //noinspection unchecked Checked by reflection inside RequestFactory., +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +    boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;, +, +    Annotation[] annotations = method.getAnnotations();, +    Type adapterType;, +    if (isKotlinSuspendFunction) {, +      Type responseType = Utils.getParameterLowerBound(0,, +          (ParameterizedType) parameterTypes[parameterTypes.length - 1]);, +, +      adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType);, +      annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);, +      adapterType = method.getGenericReturnType();, +    CallAdapter<ResponseT, ReturnT> callAdapter =, +        createCallAdapter(retrofit, method, adapterType, annotations);, +    Type responseType = callAdapter.responseType();, +    if (!isKotlinSuspendFunction) {, +      return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter);, +          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter);, +          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter,, +          continuationBodyNullable);, +      Retrofit retrofit, Method method, Type returnType, Annotation[] annotations) {, +  HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +    Call<ResponseT> call = new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, +    return adapt(call, args);, +  protected abstract @Nullable ReturnT adapt(Call<ResponseT> call, Object[] args);, +    CallAdapted(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, ReturnT> callAdapter) {, +    @Override protected ReturnT adapt(Call<ResponseT> call, Object[] args) {, +    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;, +, +    SuspendForResponse(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, Call<ResponseT>> callAdapter) {, +      this.callAdapter = callAdapter;, +    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {, +      call = callAdapter.adapt(call);, +, +      //noinspection unchecked Checked by reflection inside RequestFactory., +    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;, +    SuspendForBody(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, Call<ResponseT>> callAdapter, boolean isNullable) {, +      this.callAdapter = callAdapter;, +    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {, +      call = callAdapter.adapt(call);, +, +      //noinspection unchecked Checked by reflection inside RequestFactory., +++ b/retrofit/src/main/java/retrofit2/SkipCallbackExecutorImpl.java, +/*, + * Copyright (C) 2019 Square, Inc., + *]
[+++ b/pom.xml, +  <version>1.1.1</version>, +++ b/pom.xml, +  <version>1.1.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1</version>, +++ b/pom.xml, +  <version>1.1.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1</version>, +++ b/pom.xml, +  <version>1.1.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1</version>]
[+++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import javax.annotation.Nullable;, +, +  public @Nullable Response<?> response() {]
[+++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/retrofit-adapters/rxjava/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Before;, +import org.junit.Rule;, +import retrofit.converter.Converter;, +import retrofit.http.GET;, +import rx.observables.BlockingObservable;, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +, +  interface Service {, +    @GET("/") Observable<String> body();, +    @GET("/") Observable<Response<String>> response();, +    @GET("/") Observable<Result<String>> result();, +  }, +, +  private Service service;, +, +  @Before public void setUp() {, +    RestAdapter ra = new RestAdapter.Builder(), +        .endpoint(server.getUrl("/").toString()), +        .converter(new StringConverter()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +        .build();, +    service = ra.create(Service.class);, +  }, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<String> o = service.body().toBlocking();, +    assertThat(o.first()).isEqualTo("Hi");, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    BlockingObservable<String> o = service.body().toBlocking();, +      o.first();, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<String> o = service.body().toBlocking();, +      o.first();, +      assertThat(e.getCause()).isInstanceOf(IOException.class);, +  @Test public void responseSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<Response<String>> o = service.response().toBlocking();, +    Response<String> response = o.first();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");, +, +  @Test public void responseSuccess404() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));, +, +    BlockingObservable<Response<String>> o = service.response().toBlocking();, +    Response<String> response = o.first();, +    assertThat(response.isSuccess()).isFalse();, +    assertThat(response.errorBody().string()).isEqualTo("Hi");, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<Response<String>> o = service.response().toBlocking();, +      o.first();, +      assertThat(t.getCause()).isInstanceOf(IOException.class);, +  @Test public void resultSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<Result<String>> o = service.result().toBlocking();, +    Result<String> result = o.first();, +    Response<String> response = result.response();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");, +  }, +, +  @Test public void resultSuccess404() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));, +, +    BlockingObservable<Result<String>> o = service.result().toBlocking();, +    Result<String> result = o.first();, +    assertThat(result.isError()).isFalse();, +    Response<String> response = result.response();, +    assertThat(response.isSuccess()).isFalse();, +    assertThat(response.errorBody().string()).isEqualTo("Hi");, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<Result<String>> o = service.result().toBlocking();, +    Result<String> result = o.first();, +    assertThat(result.error()).isInstanceOf(IOException.class);, +    CallAdapter.Factory factory = ObservableCallAdapterFactory.create();, +    CallAdapter.Factory factory = ObservableCallAdapterFactory.create();, +    CallAdapter.Factory factory = ObservableCallAdapterFactory.create();]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/jaxb/README.md, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/jaxb/README.md, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +, +    // Prevent XML External Entity attacks (XXE)., +    xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);, +    xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/jaxb/README.md, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +, +    // Prevent XML External Entity attacks (XXE)., +    xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);, +    xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);, +++ b/retrofit-converters/jaxb/src/test/java/retrofit2/converter/jaxb/JaxbConverterFactoryTest.java, +, +  @Test public void externalEntity() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("", +            + "<?xml version=\"1.0\" ?>", +            + "<!DOCTYPE contact[", +            + "  <!ENTITY secret SYSTEM \"" + server.url("/secret.txt") + "\">", +            + "]>", +            + "<contact>", +            + "<name>&secret;</name>", +            + "</contact>"));, +    server.enqueue(new MockResponse(), +        .setBody("hello"));, +, +    Call<Contact> call = service.getXml();, +    try {, +      Response<Contact> response = call.execute();, +      response.body();, +      fail();, +    } catch (RuntimeException expected) {, +      assertThat(expected).hasMessageContaining("ParseError");, +    }, +, +    assertThat(server.getRequestCount()).isEqualTo(1);, +  }, +, +  @Test public void externalDtd() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("", +            + "<?xml version=\"1.0\" ?>", +            + "<!DOCTYPE contact SYSTEM \"" + server.url("/contact.dtd") + "\">", +            + "<contact>", +            + "<name>&secret;</name>", +            + "</contact>"));, +    server.enqueue(new MockResponse(), +        .setBody("", +            + "<!ELEMENT contact (name)>\n", +            + "<!ELEMENT name (#PCDATA)>\n", +            + "<!ENTITY secret \"hello\">"));]
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import retrofit2.http.Tag;, +, +      } else if (annotation instanceof Tag) {, +        validateResolvableType(p, type);, +, +        Class<?> tagType = Utils.getRawType(type);, +        for (int i = p - 1; i >= 0; i--) {, +          ParameterHandler<?> otherHandler = parameterHandlers[i];, +          if (otherHandler instanceof ParameterHandler.Tag, +              && ((ParameterHandler.Tag) otherHandler).cls.equals(tagType)) {, +            throw parameterError(method, p, "@Tag type ", +                + tagType.getName(), +                + " is duplicate of parameter #", +                + (i + 1), +                + " and would always overwrite its value.");, +          }, +        }, +, +        return new ParameterHandler.Tag<>(tagType);, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import retrofit2.http.Tag;, +, +      } else if (annotation instanceof Tag) {, +        validateResolvableType(p, type);, +, +        Class<?> tagType = Utils.getRawType(type);, +        for (int i = p - 1; i >= 0; i--) {, +          ParameterHandler<?> otherHandler = parameterHandlers[i];, +          if (otherHandler instanceof ParameterHandler.Tag, +              && ((ParameterHandler.Tag) otherHandler).cls.equals(tagType)) {, +            throw parameterError(method, p, "@Tag type ", +                + tagType.getName()]
[+++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.protocol.HTTP;, +  static final String UTF_8 = "UTF-8";, +            String headerName = realHeader.getName();, +            String headerValue = realHeader.getValue();, +, +            if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) //, +                && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {, +              throw new IOException("Only UTF-8 charset supported.");, +            }, +, +            headers[i] = new Header(headerName, headerValue);, +    String bodyString = new String(body, UTF_8);, +      callbackType = Utils.getGenericSupertype(callbackType, callbackClass, Callback.class);, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.protocol.HTTP;, +  static final String UTF_8 = "UTF-8";, +            String headerName = realHeader.getName();, +            String headerValue = realHeader.getValue();, +, +            if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) //, +                && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {, +              throw new IOException("Only UTF-8 charset supported.");, +            }, +, +            headers[i] = new Header(headerName, headerValue);, +    String bodyString = new String(body, UTF_8);, +      callbackType = Utils.getGenericSupertype(callbackType, callbackClass, Callback.class);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.protocol.HTTP;, +  static final String UTF_8 = "UTF-8";, +            String headerName = realHeader.getName();, +            String headerValue = realHeader.getValue();, +, +            if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) //, +                && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {, +              throw new IOException("Only UTF-8 charset supported.");, +            }, +, +            headers[i] = new Header(headerName, headerValue);, +    String bodyString = new String(body, UTF_8);, +      callbackType = Utils.getGenericSupertype(callbackType, callbackClass, Callback.class);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Utils.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +]
[+++ b/retrofit/src/main/java/retrofit/RequestAction.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.RequestBody;, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Array;, +import java.util.Map;, +, +import static retrofit.Utils.checkNotNull;, +, +abstract class RequestAction<T> {, +  abstract void perform(RequestBuilder builder, T value);, +, +  static final class Url extends RequestAction<String> {, +    @Override void perform(RequestBuilder builder, String value) {, +      builder.setRelativeUrl(value);, +    }, +  }, +, +  static final class Header extends RequestAction<Object> {, +    private final String name;, +, +    Header(String name) {, +      this.name = checkNotNull(name, "name == null");, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) return; // Skip null values., +, +      if (value instanceof Iterable) {, +        for (Object iterableValue : (Iterable<?>) value) {, +          if (iterableValue != null) { // Skip null values., +            builder.addHeader(name, iterableValue.toString());, +          }, +        }, +      } else if (value.getClass().isArray()) {, +        for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +          Object arrayValue = Array.get(value, x);, +          if (arrayValue != null) { // Skip null values., +            builder.addHeader(name, arrayValue.toString());, +          }, +        }, +      } else {, +        builder.addHeader(name, value.toString());, +      }, +    }, +  }, +, +  static final class Path extends RequestAction<Object> {, +    private final String name;, +    private final boolean encoded;, +, +    Path(String name, boolean encoded) {, +      this.name = checkNotNull(name, "name == null");, +      this.encoded = encoded;, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) {, +        throw new IllegalArgumentException(, +            "Path parameter \"" + name + "\" value must not be null.");, +      }, +      builder.addPathParam(name, value.toString(), encoded);, +    }, +  }, +, +  static final class Query extends RequestAction<Object> {, +    private final String name;, +    private final boolean encoded;, +, +    Query(String name, boolean encoded) {, +      this.name = checkNotNull(name, "name == null");, +      this.encoded = encoded;, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) return; // Skip null values., +, +      if (value instanceof Iterable) {, +        for (Object iterableValue : (Iterable<?>) value) {, +          if (iterableValue != null) { // Skip null values., +            builder.addQueryParam(name, iterableValue.toString(), encoded);, +          }]
[+++ b/pom.xml, +    <module>retrofit-samples</module>, +++ b/pom.xml, +    <module>retrofit-samples</module>, +++ b/retrofit-samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit.samples</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.0.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>github-client</artifactId>, +  <name>Sample: GitHub Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <module>retrofit-samples</module>, +++ b/retrofit-samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit.samples</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.0.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>github-client</artifactId>, +  <name>Sample: GitHub Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import java.util.List;, +import retrofit.http.GET;, +import retrofit.http.Path;, +import retrofit.RestAdapter;, +, +public class GitHubClient {, +  private static final String API_URL = "https://api.github.com";, +, +  static class Contributor {, +    String login;, +    int contributions;, +  }, +, +  interface GitHub {, +    @GET("/repos/{owner}/{repo}/contributors"), +    List<Contributor> contributors(, +        @Path("owner") String owner,, +        @Path("repo") String repo, +    );, +  }, +, +  public static void main(String... args) {, +    // Create a very simple REST adapter which points the GitHub API endpoint., +    RestAdapter restAdapter = new RestAdapter.Builder(), +        .setServer(API_URL), +        .build();, +, +    // Create an instance of our GitHub API interface.]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .addConverterFactory(GsonConverterFactory.create(gson)), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .addConverterFactory(GsonConverterFactory.create(gson)), +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .addConverterFactory(GsonConverterFactory.create(gson)), +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterFactoryTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.core.JsonGenerator;, +import com.fasterxml.jackson.core.JsonParser;, +import com.fasterxml.jackson.core.JsonToken;, +import com.fasterxml.jackson.databind.DeserializationContext;, +import com.fasterxml.jackson.databind.MapperFeature;, +import com.fasterxml.jackson.databind.ObjectMapper;, +import com.fasterxml.jackson.databind.SerializerProvider;, +import com.fasterxml.jackson.databind.deser.std.StdDeserializer;, +import com.fasterxml.jackson.databind.module.SimpleModule;, +import com.fasterxml.jackson.databind.ser.std.StdSerializer;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.io.IOException;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import retrofit.http.Body;, +import retrofit.http.POST;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class JacksonConverterFactoryTest {, +  interface AnInterface {, +    String getName();, +  }, +, +  static class AnImplementation implements AnInterface {, +    private String theName;, +, +    AnImplementation() {, +    }, +, +    AnImplementation(String name) {, +      theName = name;, +    }, +, +    @Override public String getName() {, +      return theName;, +    }, +  }, +, +  static class AnInterfaceSerializer extends StdSerializer<AnInterface> {, +    AnInterfaceSerializer() {, +      super(AnInterface.class);, +    }, +, +    @Override public void serialize(AnInterface anInterface, JsonGenerator jsonGenerator,]
[+++ b/android-native/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/pom.xml, +    <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc3</version>, +++ b/pom.xml, +    <version>0.6.0-rc3</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-rc3</version>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, +  private final ExecutorService executor;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, +      Class<T> service) {, +    this.executor = executor;, +    final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, +  private final ExecutorService executor;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, +      Class<T> service) {, +    this.executor = executor;, +    final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +  private final ExecutorService executor;, +  MockRetrofit(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor) {, +    this.executor = executor;, +  public Executor backgroundExecutor() {, +    return executor;, +  }, +, +    return new BehaviorDelegate<>(retrofit, behavior, executor, service);, +  }, +, +  public static final class Builder {, +    private final Retrofit retrofit;, +    private NetworkBehavior behavior;, +    private ExecutorService executor;, +, +    public Builder(Retrofit retrofit) {, +      if (retrofit == null) throw new NullPointerException("retrofit == null");, +      this.retrofit = retrofit;, +    }, +, +    public Builder networkBehavior(NetworkBehavior behavior) {, +      if (behavior == null) throw new NullPointerException("behavior == null");, +      this.behavior = behavior;, +      return this;, +    }, +, +    public Builder backgroundExecutor(ExecutorService executor) {, +      if (executor == null) throw new NullPointerException("executor == null");, +      this.executor = executor;, +      return this;, +    }, +, +    public MockRetrofit build() {, +      if (behavior == null) behavior = NetworkBehavior.create();, +      if (executor == null) executor = Executors.newCachedThreadPool();, +      return new MockRetrofit(retrofit, behavior, executor);, +    }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, +  private final ExecutorService executor;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, +      Class<T> service) {, +    this.executor = executor;, +    final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +  private final ExecutorService executor;, +  MockRetrofit(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor) {, +    this.executor = executor;, +  public Executor backgroundExecutor() {, +    return executor;, +  }, +, +    return new BehaviorDelegate<>(retrofit, behavior, executor, service);, +  }, +, +  public static final class Builder {, +    private final Retrofit retrofit;, +    private NetworkBehavior behavior;, +    private ExecutorService executor;, +, +    public Builder(Retrofit retrofit) {, +      if (retrofit == null) throw new NullPointerException("retrofit == null");, +      this.retrofit = retrofit;, +    }, +, +    public Builder networkBehavior(NetworkBehavior behavior) {, +      if (behavior == null) throw new NullPointerException("behavior == null");, +      this.behavior = behavior;, +      return this;, +    }, +, +    public Builder backgroundExecutor(ExecutorService executor) {, +      if (executor == null) throw new NullPointerException("executor == null");, +      this.executor = executor;, +      return this;, +    }, +, +    public MockRetrofit build() {, +      if (behavior == null) behavior = NetworkBehavior.create();]
[+++ b/README.md, +++ b/README.md, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +            <groupId>com.google.android</groupId>, +            <artifactId>android</artifactId>, +            <scope>provided</scope>, +            <optional>true</optional>, +        </dependency>, +, +        <dependency>, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +            <groupId>com.google.android</groupId>, +            <artifactId>android</artifactId>, +            <scope>provided</scope>, +            <optional>true</optional>, +        </dependency>, +, +        <dependency>, +++ b/http/src/main/java/retrofit/android/AndroidMainThread.java, +// Copyright 2012 Square, Inc., +package retrofit.android;, +, +import android.os.Handler;, +import android.os.Looper;, +import android.os.SystemClock;, +import retrofit.http.MainThread;, +, +import java.util.concurrent.CountDownLatch;, +, +/** Executor that runs tasks on Android's main thread. */, +public class AndroidMainThread implements MainThread {, +, +  private final Looper looper = Looper.getMainLooper();, +  private final Handler handler = new Handler(looper);, +, +  @Override public void execute(Runnable r) {, +    handler.post(r);, +  }, +, +  @Override public void executeDelayed(Runnable r, long delay) {, +    handler.postAtTime(r, SystemClock.uptimeMillis() + delay);, +  }, +, +  @Override, +  public void executeSynchronously(final Runnable runnable) {, +    if (Looper.getMainLooper().getThread() == Thread.currentThread()) {, +      runnable.run();, +    } else {, +      final CountDownLatch latch = new CountDownLatch(1);, +      execute(new Runnable() {, +        @Override public void run() {, +          try {, +            runnable.run();, +          } finally {, +            latch.countDown();, +          }, +        }, +      });, +      while (true) {, +        try {, +          latch.await();, +          return;, +        } catch (InterruptedException e) { /* ignore */ }, +      }, +    }, +  }, +, +  @Override public void executeOnMain(Runnable runnable) {, +    if (Looper.getMainLooper().getThread() == Thread.currentThread()) {, +      runnable.run();, +    } else {, +      execute(runnable);, +    }, +  }, +, +  @Override public void cancel(Runnable r) {, +    handler.removeCallbacks(r);]
[+++ b/pom.xml, +    <mockito.version>1.9.5</mockito.version>, +      <dependency>, +        <groupId>org.mockito</groupId>, +        <artifactId>mockito-core</artifactId>, +        <version>${mockito.version}</version>, +      </dependency>, +++ b/pom.xml, +    <mockito.version>1.9.5</mockito.version>, +      <dependency>, +        <groupId>org.mockito</groupId>, +        <artifactId>mockito-core</artifactId>, +        <version>${mockito.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +++ b/pom.xml, +    <mockito.version>1.9.5</mockito.version>, +      <dependency>, +        <groupId>org.mockito</groupId>, +        <artifactId>mockito-core</artifactId>, +        <version>${mockito.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +++ b/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java, +// Copyright 2013 Square, Inc., +package retrofit.android;, +, +import android.net.http.AndroidHttpClient;, +import retrofit.http.client.ApacheClient;, +, +/**, + * Provides a {@link retrofit.http.client.Client} which uses the Android-specific version of, + * {@link org.apache.http.client.HttpClient}, {@link AndroidHttpClient}., + * <p>, + * If you need to provide a customized version of the {@link AndroidHttpClient} or a different, + * {@link org.apache.http.client.HttpClient} on Android use {@link ApacheClient} directly., + */, +public final class AndroidApacheClient extends ApacheClient {, +  public AndroidApacheClient() {, +    super(AndroidHttpClient.newInstance("Retrofit"));, +  }, +}, +++ b/pom.xml, +    <mockito.version>1.9.5</mockito.version>, +      <dependency>, +        <groupId>org.mockito</groupId>, +        <artifactId>mockito-core</artifactId>, +        <version>${mockito.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +++ b/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java, +// Copyright 2013 Square, Inc., +package retrofit.android;, +, +import android.net.http.AndroidHttpClient;, +import retrofit.http.client.ApacheClient;, +, +/**, + * Provides a {@link retrofit.http.client.Client} which uses the Android-specific version of, + * {@link org.apache.http.client.HttpClient}, {@link AndroidHttpClient}., + * <p>, + * If you need to provide a customized version of the {@link AndroidHttpClient} or a different, + * {@link org.apache.http.client.HttpClient} on Android use {@link ApacheClient} directly., + */, +public final class AndroidApacheClient extends ApacheClient {, +  public AndroidApacheClient() {, +    super(AndroidHttpClient.newInstance("Retrofit"));, +  }, +}, +++ b/retrofit/src/main/java/retrofit/android/MainThreadExecutor.java, +public final class MainThreadExecutor implements Executor {, +++ b/pom.xml, +    <mockito.version>1.9.5</mockito.version>, +      <dependency>, +        <groupId>org.mockito</groupId>, +        <artifactId>mockito-core</artifactId>, +        <version>${mockito.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +++ b/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java, +// Copyright 2013 Square, Inc., +package retrofit.android;, +, +import android.net.http.AndroidHttpClient;, +import retrofit.http.client.ApacheClient;, +, +/**, + * Provides a {@link retrofit.http.client.Client} which uses the Android-specific version of, + * {@link org.apache.http.client.HttpClient}, {@link AndroidHttpClient}., + * <p>, + * If you need to provide a customized version of the {@link AndroidHttpClient} or a different, + * {@link org.apache.http.client.HttpClient} on Android use {@link ApacheClient} directly.]
[+++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +++ b/retrofit/src/main/java/retrofit/http/RetrofitError.java, +  static RetrofitError networkError(String url, IOException exception) {, +  static RetrofitError conversionError(String url, Response response, Converter converter,, +  static RetrofitError httpError(String url, Response response, Converter converter,, +  static RetrofitError unexpectedError(String url, Throwable exception) {]
[+++ b/pom.xml, +    <moshi.version>1.8.0</moshi.version>, +++ b/pom.xml, +    <moshi.version>1.8.0</moshi.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +      reader.skipName();, +      assertThat(e).hasMessage("Cannot skip unexpected NAME at $.");]
[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +    return new MoshiConverterFactory(moshi, false, false, false);, +  private final boolean failOnUnknown;, +  private MoshiConverterFactory(Moshi moshi, boolean lenient, boolean failOnUnknown,, +      boolean serializeNulls) {, +    this.failOnUnknown = failOnUnknown;, +    return new MoshiConverterFactory(moshi, true, failOnUnknown, serializeNulls);, +  }, +, +  /**, +   * Return a new factory which uses {@link JsonAdapter#failOnUnknown()} adapters., +   */, +  public MoshiConverterFactory failOnUnknown() {, +    return new MoshiConverterFactory(moshi, lenient, true, serializeNulls);, +    return new MoshiConverterFactory(moshi, lenient, failOnUnknown, true);, +    if (failOnUnknown) {, +      adapter = adapter.failOnUnknown();, +    }, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +    if (failOnUnknown) {, +      adapter = adapter.failOnUnknown();, +    }, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +    return new MoshiConverterFactory(moshi, false, false, false);, +  private final boolean failOnUnknown;, +  private MoshiConverterFactory(Moshi moshi, boolean lenient, boolean failOnUnknown,, +      boolean serializeNulls) {, +    this.failOnUnknown = failOnUnknown;, +    return new MoshiConverterFactory(moshi, true, failOnUnknown, serializeNulls);, +  }, +, +  /**, +   * Return a new factory which uses {@link JsonAdapter#failOnUnknown()} adapters., +   */, +  public MoshiConverterFactory failOnUnknown() {, +    return new MoshiConverterFactory(moshi, lenient, true, serializeNulls);, +    return new MoshiConverterFactory(moshi, lenient, failOnUnknown, true);, +    if (failOnUnknown) {, +      adapter = adapter.failOnUnknown();, +    }, +  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +    if (failOnUnknown) {, +      adapter = adapter.failOnUnknown();, +    }, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import com.squareup.moshi.JsonDataException;, +  private Service serviceFailOnUnknown;, +    MoshiConverterFactory factoryFailOnUnknown = factory.failOnUnknown();, +    Retrofit retrofitFailOnUnknown = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(factoryFailOnUnknown), +        .build();, +    serviceFailOnUnknown = retrofitFailOnUnknown.create(Service.class);, +  @Test public void failOnUnknown() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("{\"taco\":\"delicious\"}"));, +, +    Call<AnImplementation> call = serviceFailOnUnknown.anImplementation(new AnImplementation(null));, +    try {, +      call.execute();, +    } catch (JsonDataException e) {, +      assertThat(e).hasMessage("Cannot skip unexpected STRING at $.taco");, +    }, +  }, +]
[+++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java, +    ObjectReader reader = mapper.readerFor(javaType);, +    ObjectWriter writer = mapper.writerFor(javaType);]
[+++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import java.util.Optional;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +import retrofit2.helpers.ObjectInstanceConverterFactory;, +import retrofit2.http.GET;, +, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.fail;, +import static org.robolectric.annotation.Config.NEWEST_SDK;, +, +@RunWith(RobolectricTestRunner.class), +@Config(sdk = NEWEST_SDK), +public final class OptionalConverterFactoryAndroidTest {, +  interface Service {, +    @GET("/") Call<Optional<Object>> optional();, +    @GET("/") Call<Object> object();, +  }, +, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private Service service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new ObjectInstanceConverterFactory()), +        .build();, +    service = retrofit.create(Service.class);, +  }, +, +  @Config(sdk = 24), +  @Test public void optionalApi24() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Optional<Object> optional = service.optional().execute().body();, +    assertThat(optional).isNotNull();, +    assertThat(optional.get()).isSameAs(ObjectInstanceConverterFactory.VALUE);]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, +        Throwable t = new HttpException(response);, +        try {, +          subscriber.onError(t);, +        } catch (Throwable inner) {, +          CompositeException composite = new CompositeException(t, inner);, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +        }, +      } else {, +        // This should never happen! onNext handles and forwards errors automatically., +        Throwable broken = new AssertionError(, +            "This should never happen! Report as a Retrofit bug with the full stacktrace.");, +        //noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only., +        broken.initCause(throwable);, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(broken);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, +        Throwable t = new HttpException(response);, +        try {, +          subscriber.onError(t);, +        } catch (Throwable inner) {, +          CompositeException composite = new CompositeException(t, inner);, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +        }, +      } else {, +        // This should never happen! onNext handles and forwards errors automatically., +        Throwable broken = new AssertionError(, +            "This should never happen! Report as a Retrofit bug with the full stacktrace.");, +        //noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only., +        broken.initCause(throwable);, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(broken);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, +      boolean terminated = false;, +          terminated = true;, +        if (terminated) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(t);, +        } else if (!call.isCanceled()) {, +          try {, +          } catch (Throwable inner) {, +            CompositeException composite = new CompositeException(t, inner);, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +          }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, +        Throwable t = new HttpException(response);, +        try {, +          subscriber.onError(t);, +        } catch (Throwable inner) {, +          CompositeException composite = new CompositeException(t, inner);, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +        }, +      } else {, +        // This should never happen! onNext handles and forwards errors automatically., +        Throwable broken = new AssertionError(, +            "This should never happen! Report as a Retrofit bug with the full stacktrace.");, +        //noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only., +        broken.initCause(throwable);, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(broken);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, +      boolean terminated = false;, +          terminated = true;, +        if (terminated) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(t);, +        } else if (!call.isCanceled()) {, +          try {, +          } catch (Throwable inner) {, +            CompositeException composite = new CompositeException(t, inner);, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +          }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, +        try {, +        } catch (Throwable inner) {, +          CompositeException composite = new CompositeException(t, inner);, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +        }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, +        Throwable t = new HttpException(response);, +        try {, +          subscriber.onError(t);, +        } catch (Throwable inner) {, +          CompositeException composite = new CompositeException(t, inner);, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +        }, +      } else {, +        // This should never happen! onNext handles and forwards errors automatically., +        Throwable broken = new AssertionError(, +            "This should never happen! Report as a Retrofit bug with the full stacktrace.");, +        //noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only.]
[+++ b/checkstyle.xml, +        <!--module name="InnerAssignment"/-->, +++ b/checkstyle.xml, +        <!--module name="InnerAssignment"/-->, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private String relativeUrl;, +  private StringBuilder queryParams;, +  private List<Header> headers;, +      headers = new ArrayList<Header>(methodInfo.headers);, +      queryParams = new StringBuilder().append('?').append(requestQuery);, +    List<Header> headers = this.headers;, +    if (headers == null) {, +      this.headers = headers = new ArrayList<Header>(2);, +    }, +      if (queryParams == null) {, +        this.queryParams = queryParams = new StringBuilder();, +      }, +, +    if (multipartBody != null && multipartBody.getPartCount() == 0) {, +      throw new IllegalStateException("Multipart requests must contain at least one part.");, +    }, +    String apiUrl = this.apiUrl;, +    if (queryParams != null) {]
[+++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +Version 2.4.0 *(2018-03-14)*, +----------------------------, +, + * New: `Retrofit.Builder` exposes mutable lists of the added converter and call adapter factories., + * New: Call adapter added for Scala's `Future`., + * New: Converter for JAXB replaces the now-deprecated converter for Simple XML Framework., + * New: Add Java 9 automatic module names for each artifact corresponding to their root package., + * Fix: Do not swallow `Error`s from callbacks (usually `OutOfMemoryError`)., + * Fix: Moshi and Gson converters now assert that the full response was consumed. This prevents, +   hiding bugs in faulty adapters which might not have consumed the full JSON input which would, +   then cause failures on the next request over that connection., + * Fix: Do not conflate OkHttp `Call` cancelation with RxJava unsubscription/disposal. Prior to, +   this change, canceling of a `Call` would prevent a cancelation exception from propagating down, +   the Rx stream., +, +, +   [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +Version 2.4.0 *(2018-03-14)*, +----------------------------, +, + * New: `Retrofit.Builder` exposes mutable lists of the added converter and call adapter factories., + * New: Call adapter added for Scala's `Future`., + * New: Converter for JAXB replaces the now-deprecated converter for Simple XML Framework., + * New: Add Java 9 automatic module names for each artifact corresponding to their root package., + * Fix: Do not swallow `Error`s from callbacks (usually `OutOfMemoryError`)., + * Fix: Moshi and Gson converters now assert that the full response was consumed. This prevents, +   hiding bugs in faulty adapters which might not have consumed the full JSON input which would, +   then cause failures on the next request over that connection., + * Fix: Do not conflate OkHttp `Call` cancelation with RxJava unsubscription/disposal. Prior to, +   this change, canceling of a `Call` would prevent a cancelation exception from propagating down, +   the Rx stream., +, +, +   [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/README.md, +  <version>2.4.0</version>, +implementation 'com.squareup.retrofit2:retrofit:2.4.0', +You might also need rules for OkHttp and Okio which are dependencies., +, + [1]: https://square.github.io/retrofit/, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +Version 2.4.0 *(2018-03-14)*, +----------------------------, +, + * New: `Retrofit.Builder` exposes mutable lists of the added converter and call adapter factories., + * New: Call adapter added for Scala's `Future`., + * New: Converter for JAXB replaces the now-deprecated converter for Simple XML Framework., + * New: Add Java 9 automatic module names for each artifact corresponding to their root package., + * Fix: Do not swallow `Error`s from callbacks (usually `OutOfMemoryError`)., + * Fix: Moshi and Gson converters now assert that the full response was consumed. This prevents, +   hiding bugs in faulty adapters which might not have consumed the full JSON input which would, +   then cause failures on the next request over that connection., + * Fix: Do not conflate OkHttp `Call` cancelation with RxJava unsubscription/disposal. Prior to, +   this change, canceling of a `Call` would prevent a cancelation exception from propagating down, +   the Rx stream., +, +, +   [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/README.md, +  <version>2.4.0</version>, +implementation 'com.squareup.retrofit2:retrofit:2.4.0', +You might also need rules for OkHttp and Okio which are dependencies., +, + [1]: https://square.github.io/retrofit/, +++ b/pom.xml, +  <version>2.4.1-SNAPSHOT</version>, +  <url>https://github.com/square/retrofit/</url>, +    <url>https://github.com/square/retrofit</url>, +    <url>https://github.com/square/retrofit/issues</url>, +      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>, +    <url>https://squareup.com</url>, +        <version>2.4.2</version>, +        <dependencies>, +          <dependency>, +            <groupId>org.apache.maven.scm</groupId>, +            <artifactId>maven-scm-provider-gitexe</artifactId>, +            <version>1.9</version>, +          </dependency>, +        </dependencies>, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +Version 2.4.0 *(2018-03-14)*, +----------------------------, +, + * New: `Retrofit.Builder` exposes mutable lists of the added converter and call adapter factories., + * New: Call adapter added for Scala's `Future`.]
[+++ b/pom.xml, +    <module>retrofit-appengine</module>, +++ b/pom.xml, +    <module>retrofit-appengine</module>, +++ b/retrofit-appengine/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-appengine</artifactId>, +  <name>Retrofit AppEngine</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <module>retrofit-appengine</module>, +++ b/retrofit-appengine/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-appengine</artifactId>, +  <name>Retrofit AppEngine</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>]
[+++ b/pom.xml, +    <jackson.version>2.2.2</jackson.version>, +      <dependency>, +        <groupId>com.fasterxml.jackson.core</groupId>, +        <artifactId>jackson-databind</artifactId>, +        <version>${jackson.version}</version>, +     </dependency>, +, +++ b/pom.xml, +    <jackson.version>2.2.2</jackson.version>, +      <dependency>, +        <groupId>com.fasterxml.jackson.core</groupId>, +        <artifactId>jackson-databind</artifactId>, +        <version>${jackson.version}</version>, +     </dependency>, +, +++ b/retrofit-converters/jackson/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>1.1.2-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-jackson</artifactId>, +  <name>Converter: Jackson</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.fasterxml.jackson.core</groupId>, +      <artifactId>jackson-databind</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <jackson.version>2.2.2</jackson.version>, +      <dependency>, +        <groupId>com.fasterxml.jackson.core</groupId>, +        <artifactId>jackson-databind</artifactId>, +        <version>${jackson.version}</version>, +     </dependency>, +, +++ b/retrofit-converters/jackson/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>1.1.2-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-jackson</artifactId>, +  <name>Converter: Jackson</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.fasterxml.jackson.core</groupId>, +      <artifactId>jackson-databind</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +        if (type == HttpUrl.class, +            || type == String.class, +            || type == URI.class, +            || (type instanceof Class && "android.net.Uri".equals(((Class<?>) type).getName()))) {, +          return new ParameterHandler.RelativeUrl();, +          throw parameterError(p,, +              "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.");, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +        if (type == HttpUrl.class, +            || type == String.class, +            || type == URI.class, +            || (type instanceof Class && "android.net.Uri".equals(((Class<?>) type).getName()))) {, +          return new ParameterHandler.RelativeUrl();, +          throw parameterError(p,, +              "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.");, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +import okhttp3.HttpUrl;, +  @Test public void getWithHttpUrl() {, +    class Example {, +      @GET, +      Call<ResponseBody> method(@Url HttpUrl url) {, +        return null;, +      }, +    }, +, +    Request request = buildRequest(Example.class, HttpUrl.parse("http://example.com/foo/bar/"));, +    assertThat(request.method()).isEqualTo("GET");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.url()).isEqualTo(HttpUrl.parse("http://example.com/foo/bar/"));, +    assertThat(request.body()).isNull();, +  }, +, +  @Test public void getWithNullUrl() {, +    class Example {, +      @GET, +      Call<ResponseBody> method(@Url HttpUrl url) {, +        return null;, +      }, +    }, +, +    try {, +      buildRequest(Example.class, (HttpUrl) null);, +      fail();, +    } catch (NullPointerException expected) {, +      assertThat(expected).hasMessage("@Url parameter is null.");, +    }, +  }, +, +          "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.", +              + " (parameter #1)\n", +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +        if (type == HttpUrl.class, +            || type == String.class, +            || type == URI.class, +            || (type instanceof Class && "android.net.Uri".equals(((Class<?>) type).getName()))) {, +          return new ParameterHandler.RelativeUrl();, +          throw parameterError(p,, +              "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.");, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +import okhttp3.HttpUrl;, +  @Test public void getWithHttpUrl() {, +    class Example {]
[+++ b/pom.xml]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +import java.util.concurrent.Callable;, +import okhttp3.ResponseBody;, +import retrofit2.Response;, +  private static final int DEFAULT_ERROR_PERCENT = 0; // 0% of network calls will return errors., +  private volatile int errorPercent = DEFAULT_ERROR_PERCENT;, +  private volatile Callable<Response<?>> errorFactory = new Callable<Response<?>>() {, +    @Override public Response<?> call() {, +      return Response.error(500, ResponseBody.create(null, new byte[0]));, +    }, +  };, +   * It is a best practice to remove the stack trace from {@code exception} since it can, +   * misleadingly point to code unrelated to this class., +  public void setFailureException(Throwable exception) {, +    if (exception == null) {, +      throw new NullPointerException("exception == null");, +    this.failureException = exception;, +  /** The percentage of calls to {@link #calculateIsError()} that return {@code true}. */, +  public int errorPercent() {, +    return errorPercent;, +  }, +, +  /** Set the percentage of calls to {@link #calculateIsError()} that return {@code true}. */, +  public void setErrorPercent(int errorPercent) {, +    if (errorPercent < 0 || errorPercent > 100) {, +      throw new IllegalArgumentException("Error percentage must be between 0 and 100.");, +    }, +    this.errorPercent = errorPercent;, +  }, +, +  /**, +   * Set the error response factory to be used when an error is triggered. This factory may only, +   * return responses for which {@link Response#isSuccessful()} returns false., +   */, +  public void setErrorFactory(Callable<Response<?>> errorFactory) {, +    if (errorFactory == null) {, +      throw new NullPointerException("errorFactory == null");, +    }, +    this.errorFactory = errorFactory;, +  }, +, +  /** The HTTP error to be used when an error is triggered. */, +  public Response<?> createErrorResponse() {, +    Response<?> call;, +    try {, +      call = errorFactory.call();, +    } catch (Exception e) {, +      throw new IllegalStateException("Error factory threw an exception.", e);, +    }, +    if (call == null) {, +      throw new IllegalStateException("Error factory returned null.");, +    }, +    if (call.isSuccessful()) {, +      throw new IllegalStateException("Error factory returned successful response.");, +    }, +    return call;, +  }, +, +    return random.nextInt(100) < failurePercent;, +  }, +, +  /**, +   * Randomly determine whether this call should result in an HTTP error in accordance with, +   * configured behavior. When true, {@link #createErrorResponse()} should be returned., +   */, +  public boolean calculateIsError() {, +    return random.nextInt(100) < errorPercent;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +import java.util.concurrent.Callable;, +import okhttp3.ResponseBody;, +import retrofit2.Response;, +  private static final int DEFAULT_ERROR_PERCENT = 0; // 0% of network calls will return errors., +  private volatile int errorPercent = DEFAULT_ERROR_PERCENT;, +  private volatile Callable<Response<?>> errorFactory = new Callable<Response<?>>() {, +    @Override public Response<?> call() {, +      return Response.error(500, ResponseBody.create(null, new byte[0]));, +    }, +  };, +   * It is a best practice to remove the stack trace from {@code exception} since it can, +   * misleadingly point to code unrelated to this class., +  public void setFailureException(Throwable exception) {, +    if (exception == null) {]
[+++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response) {, +    String url = response.getFinalUrl().toString();, +    return new Response(url, status, "", headers, body);, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response) {, +    String url = response.getFinalUrl().toString();, +    return new Response(url, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response) {, +    String url = response.getFinalUrl().toString();, +    return new Response(url, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "text/plain; charset=UTF-8");, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "multipart/form-data; boundary=foobarbaz");, +    Response response = UrlFetchClient.parseResponse(fetchResponse);, +    Response response = UrlFetchClient.parseResponse(fetchResponse);, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response) {, +    String url = response.getFinalUrl().toString();, +    return new Response(url, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "text/plain; charset=UTF-8");, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "multipart/form-data; boundary=foobarbaz");, +    Response response = UrlFetchClient.parseResponse(fetchResponse);, +    Response response = UrlFetchClient.parseResponse(fetchResponse);, +++ b/retrofit/src/test/java/retrofit/mime/MimeHelper.java, +, +  public static MultipartTypedOutput newMultipart(String boundary) {, +    return new MultipartTypedOutput(boundary);, +  }]
[+++ b/checkstyle.xml, +        <!--module name="MethodLength"/-->, +        <!--module name="ParameterNumber"/-->, +        <!--module name="TypecastParenPad"/-->, +        <!--module name="ModifierOrder"/-->, +        <!--module name="AvoidNestedBlocks"/-->, +        <!--module name="InterfaceIsType"/-->, +        <!--module name="ArrayTypeStyle"/-->, +++ b/checkstyle.xml, +        <!--module name="MethodLength"/-->, +        <!--module name="ParameterNumber"/-->, +        <!--module name="TypecastParenPad"/-->, +        <!--module name="ModifierOrder"/-->, +        <!--module name="AvoidNestedBlocks"/-->, +        <!--module name="InterfaceIsType"/-->, +        <!--module name="ArrayTypeStyle"/-->, +++ b/examples/pom.xml, +    <module>twitter-client</module>, +++ b/checkstyle.xml, +        <!--module name="MethodLength"/-->, +        <!--module name="ParameterNumber"/-->, +        <!--module name="TypecastParenPad"/-->, +        <!--module name="ModifierOrder"/-->, +        <!--module name="AvoidNestedBlocks"/-->, +        <!--module name="InterfaceIsType"/-->, +        <!--module name="ArrayTypeStyle"/-->, +++ b/examples/pom.xml, +    <module>twitter-client</module>, +++ b/examples/twitter-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<!--, +  ~ Copyright 2012 Square, Inc., +  -->, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup</groupId>, +    <artifactId>retrofit-examples</artifactId>, +    <version>0.8.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-example-twitter-client</artifactId>, +  <packaging>jar</packaging>, +  <name>Example: Twitter Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>retrofit-http</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-checkstyle-plugin</artifactId>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/checkstyle.xml, +        <!--module name="MethodLength"/-->, +        <!--module name="ParameterNumber"/-->, +        <!--module name="TypecastParenPad"/-->, +        <!--module name="ModifierOrder"/-->, +        <!--module name="AvoidNestedBlocks"/-->, +        <!--module name="InterfaceIsType"/-->, +        <!--module name="ArrayTypeStyle"/-->, +++ b/examples/pom.xml, +    <module>twitter-client</module>, +++ b/examples/twitter-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<!--, +  ~ Copyright 2012 Square, Inc., +  -->, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup</groupId>, +    <artifactId>retrofit-examples</artifactId>]
[+++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <distributionManagement>, +        <repository>, +            <id>${retrofit.repo.id}</id>, +            <url>${retrofit.repo.url}</url>, +        </repository>, +        <snapshotRepository>, +            <id>${retrofit.snapshot.repo.id}</id>, +            <url>${retrofit.snapshot.repo.url}</url>, +        </snapshotRepository>, +    </distributionManagement>, +]
[+++ b/README.md, +Type-safe HTTP client for Android and Java by Square, Inc., +++ b/README.md, +Type-safe HTTP client for Android and Java by Square, Inc., +++ b/pom.xml, +  <description>Type-safe HTTP client for Android and Java by Square, Inc.</description>, +++ b/README.md, +Type-safe HTTP client for Android and Java by Square, Inc., +++ b/pom.xml, +  <description>Type-safe HTTP client for Android and Java by Square, Inc.</description>, +++ b/website/index.html, +    <meta name="description" content="A type-safe HTTP client for Android and Java">]
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import java.lang.reflect.Method;, +    private final Method method;, +    private final int p;, +, +    RelativeUrl(Method method, int p) {, +      this.method = method;, +      this.p = p;, +    }, +, +      if (value == null) {, +        throw Utils.parameterError(method, p, "@Url parameter is null.");, +      }, +    private final Method method;, +    private final int p;, +, +    Path(Method method, int p, String name, Converter<T, String> valueConverter, boolean encoded) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p,, +    private final Method method;, +    private final int p;, +    QueryMap(Method method, int p, Converter<T, String> valueConverter, boolean encoded) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p, "Query map was null");, +          throw Utils.parameterError(method, p, "Query map contained null key.");, +          throw Utils.parameterError(method, p,, +          throw Utils.parameterError(method, p, "Query map value '", +    private final Method method;, +    private final int p;, +    HeaderMap(Method method, int p, Converter<T, String> valueConverter) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p, "Header map was null.");, +          throw Utils.parameterError(method, p, "Header map contained null key.");, +          throw Utils.parameterError(method, p,, +    private final Method method;, +    private final int p;, +    FieldMap(Method method, int p, Converter<T, String> valueConverter, boolean encoded) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p, "Field map was null.");, +          throw Utils.parameterError(method, p, "Field map contained null key.");, +          throw Utils.parameterError(method, p,, +          throw Utils.parameterError(method, p, "Field map value '", +    private final Method method;, +    private final int p;, +    Part(Method method, int p, Headers headers, Converter<T, RequestBody> converter) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p, "Unable to convert " + value + " to RequestBody", e);, +    private final Method method;, +    private final int p;, +    PartMap(Method method, int p,, +            Converter<T, RequestBody> valueConverter, String transferEncoding) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p, "Part map was null.");, +          throw Utils.parameterError(method, p, "Part map contained null key.");, +          throw Utils.parameterError(method, p,, +    private final Method method;, +    private final int p;, +    Body(Method method, int p, Converter<T, RequestBody> converter) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p, "Body parameter value must not be null.");, +        throw Utils.parameterError(method, e, p, "Unable to convert " + value + " to RequestBody");, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import java.lang.reflect.Method;, +    private final Method method;, +    private final int p;, +, +    RelativeUrl(Method method, int p) {, +      this.method = method;, +      this.p = p;, +    }, +, +      if (value == null) {, +        throw Utils.parameterError(method, p, "@Url parameter is null.");, +      }, +    private final Method method;, +    private final int p;, +, +    Path(Method method, int p, String name, Converter<T, String> valueConverter, boolean encoded) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p,, +    private final Method method;, +    private final int p;, +    QueryMap(Method method, int p, Converter<T, String> valueConverter, boolean encoded) {, +      this.method = method;, +      this.p = p;, +        throw Utils.parameterError(method, p, "Query map was null");, +          throw Utils.parameterError(method, p, "Query map contained null key.");, +          throw Utils.parameterError(method, p,, +          throw Utils.parameterError(method, p, "Query map value '", +    private final Method method;, +    private final int p;, +    HeaderMap(Method method, int p, Converter<T, String> valueConverter) {]
[+++ b/pom.xml, +    <rxjava.version>0.14.9</rxjava.version>, +      <dependency>, +        <groupId>com.netflix.rxjava</groupId>, +        <artifactId>rxjava-core</artifactId>, +        <version>${rxjava.version}</version>, +      </dependency>, +++ b/pom.xml, +    <rxjava.version>0.14.9</rxjava.version>, +      <dependency>, +        <groupId>com.netflix.rxjava</groupId>, +        <artifactId>rxjava-core</artifactId>, +        <version>${rxjava.version}</version>, +      </dependency>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, +      final JavaType javaType = TypeFactory.defaultInstance().constructType(type);, +++ b/pom.xml, +    <rxjava.version>0.14.9</rxjava.version>, +      <dependency>, +        <groupId>com.netflix.rxjava</groupId>, +        <artifactId>rxjava-core</artifactId>, +        <version>${rxjava.version}</version>, +      </dependency>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, +      final JavaType javaType = TypeFactory.defaultInstance().constructType(type);, +++ b/retrofit-mock/pom.xml, +      <groupId>com.netflix.rxjava</groupId>, +      <artifactId>rxjava-core</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +++ b/pom.xml, +    <rxjava.version>0.14.9</rxjava.version>, +      <dependency>, +        <groupId>com.netflix.rxjava</groupId>, +        <artifactId>rxjava-core</artifactId>, +        <version>${rxjava.version}</version>, +      </dependency>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, +      final JavaType javaType = TypeFactory.defaultInstance().constructType(type);, +++ b/retrofit-mock/pom.xml, +      <groupId>com.netflix.rxjava</groupId>, +      <artifactId>rxjava-core</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.concurrency.Schedulers;, +, +      if (methodInfo.isObservable) {, +        return Observable.create(new Observable.OnSubscribeFunc<Object>() {, +          @Override public Subscription onSubscribe(Observer<? super Object> observer) {, +            try {, +              Observable observable = (Observable) invokeSync(methodInfo, interceptorTape, args);, +              //noinspection unchecked, +              return observable.subscribe(observer);, +            } catch (Throwable throwable) {, +              return Observable.error(throwable).subscribe(observer);, +            }, +          }, +        }).subscribeOn(Schedulers.executor(restAdapter.httpExecutor));, +      }, +, +++ b/pom.xml, +    <rxjava.version>0.14.9</rxjava.version>, +      <dependency>, +        <groupId>com.netflix.rxjava</groupId>, +        <artifactId>rxjava-core</artifactId>, +        <version>${rxjava.version}</version>, +      </dependency>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, +      final JavaType javaType = TypeFactory.defaultInstance().constructType(type);, +++ b/retrofit-mock/pom.xml, +      <groupId>com.netflix.rxjava</groupId>, +      <artifactId>rxjava-core</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.concurrency.Schedulers;, +, +      if (methodInfo.isObservable) {, +        return Observable.create(new Observable.OnSubscribeFunc<Object>() {, +          @Override public Subscription onSubscribe(Observer<? super Object> observer) {, +            try {, +              Observable observable = (Observable) invokeSync(methodInfo, interceptorTape, args);, +              //noinspection unchecked]
[+++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +      <dependency>, +        <groupId>org.robolectric</groupId>, +        <artifactId>robolectric</artifactId>, +        <version>${robolectric.version}</version>, +      </dependency>, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +      <dependency>, +        <groupId>org.robolectric</groupId>, +        <artifactId>robolectric</artifactId>, +        <version>${robolectric.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +      <dependency>, +        <groupId>org.robolectric</groupId>, +        <artifactId>robolectric</artifactId>, +        <version>${robolectric.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit2/RequestAction.java, +import android.net.Uri;, +import java.net.URI;, +  static final class StringUrl extends RequestAction<String> {, +  static final class JavaUriUrl extends RequestAction<URI> {, +    @Override void perform(RequestBuilder builder, URI value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +  static final class AndroidUriUrl extends RequestAction<Uri> {, +    @Override void perform(RequestBuilder builder, Uri value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +      <dependency>, +        <groupId>org.robolectric</groupId>, +        <artifactId>robolectric</artifactId>, +        <version>${robolectric.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit2/RequestAction.java, +import android.net.Uri;, +import java.net.URI;, +  static final class StringUrl extends RequestAction<String> {, +  static final class JavaUriUrl extends RequestAction<URI> {, +    @Override void perform(RequestBuilder builder, URI value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +  static final class AndroidUriUrl extends RequestAction<Uri> {, +    @Override void perform(RequestBuilder builder, Uri value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactoryParser.java, +import java.net.URI;, +            if (methodParameterType == String.class) {, +              action = new RequestAction.StringUrl();, +            } else if (methodParameterType == URI.class) {, +              action = new RequestAction.JavaUriUrl();, +            } else if (methodParameterType instanceof Class, +                && "android.net.Uri".equals(((Class<?>) methodParameterType).getCanonicalName())) {, +              action = new RequestAction.AndroidUriUrl();, +            } else {, +              throw parameterError(i,, +                  "@Url must be String, java.net.URI, or android.net.Uri type.");, +            }, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +      <dependency>, +        <groupId>org.robolectric</groupId>, +        <artifactId>robolectric</artifactId>, +        <version>${robolectric.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>]
[+++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>]
[+++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-guava</artifactId>, +  <name>Adapter: Guava</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-guava</artifactId>, +  <name>Adapter: Guava</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXmlConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +, +/**, + * A {@link Converter} which uses SimpleXML for reading and writing entities., + *, + * @author Fabien Ric (fabien.ric@gmail.com), + */, +public class SimpleXmlConverter implements Converter {, +  private static final boolean DEFAULT_STRICT = true;, +  private static final String CHARSET = "UTF-8";, +  private static final MediaType MEDIA_TYPE =, +      MediaType.parse("application/xml; charset=" + CHARSET);, +, +  private final Serializer serializer;, +, +  private final boolean strict;, +, +  public SimpleXmlConverter() {, +    this(DEFAULT_STRICT);, +  }, +, +  public SimpleXmlConverter(boolean strict) {, +    this(new Persister(), strict);, +  }, +, +  public SimpleXmlConverter(Serializer serializer) {, +    this(serializer, DEFAULT_STRICT);, +  }, +, +  public SimpleXmlConverter(Serializer serializer, boolean strict) {, +    this.serializer = serializer;, +    this.strict = strict;, +  }, +, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +    try {, +      return serializer.read((Class<?>) type, is, strict);, +    } catch (IOException e) {, +      throw e;, +    } catch (Exception e) {, +      throw new RuntimeException(e);, +    } finally {, +      try {, +        is.close();, +      } catch (IOException ignored) {, +      }, +    }, +  }, +, +  @Override public RequestBody toBody(Object source, Type type) {, +    byte[] bytes;, +    try {, +      Buffer buffer = new Buffer();, +      OutputStreamWriter osw = new OutputStreamWriter(buffer.outputStream(), CHARSET);, +      serializer.write(source, osw);, +      osw.flush();, +      bytes = buffer.readByteArray();, +    } catch (Exception e) {, +      throw new AssertionError(e);, +    }, +    return RequestBody.create(MEDIA_TYPE, bytes);, +  }, +, +  public boolean isStrict() {, +    return strict;, +  }, +}, +++ /dev/null, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXmlConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +, +/**, + * A {@link Converter} which uses SimpleXML for reading and writing entities., + *]
[+++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.lang.annotation.Annotation;, +import retrofit.http.Part;, +import retrofit.http.PartMap;, +  private final Annotation[] paramAnnotations;, +    paramAnnotations = methodInfo.requestParamAnnotation;, +      Annotation annotation = paramAnnotations[i];, +            String transferEncoding = ((Part) annotation).encoding();, +              multipartBody.addPart(name, transferEncoding, (TypedOutput) value);, +              multipartBody.addPart(name, transferEncoding, new TypedString((String) value));, +              multipartBody.addPart(name, transferEncoding, converter.toBody(value));, +            String transferEncoding = ((PartMap) annotation).encoding();, +                  multipartBody.addPart(entryName, transferEncoding, (TypedOutput) entryValue);, +                  multipartBody.addPart(entryName, transferEncoding,, +                      new TypedString((String) entryValue));, +                  multipartBody.addPart(entryName, transferEncoding, converter.toBody(entryValue));, +++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.lang.annotation.Annotation;, +import retrofit.http.Part;, +import retrofit.http.PartMap;, +  private final Annotation[] paramAnnotations;, +    paramAnnotations = methodInfo.requestParamAnnotation;, +      Annotation annotation = paramAnnotations[i];, +            String transferEncoding = ((Part) annotation).encoding();, +              multipartBody.addPart(name, transferEncoding, (TypedOutput) value);, +              multipartBody.addPart(name, transferEncoding, new TypedString((String) value));, +              multipartBody.addPart(name, transferEncoding, converter.toBody(value));, +            String transferEncoding = ((PartMap) annotation).encoding();, +                  multipartBody.addPart(entryName, transferEncoding, (TypedOutput) entryValue);, +                  multipartBody.addPart(entryName, transferEncoding,, +                      new TypedString((String) entryValue));, +                  multipartBody.addPart(entryName, transferEncoding, converter.toBody(entryValue));, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  Annotation[] requestParamAnnotation;, +   * Loads {@link #requestParamNames}, {@link #requestParamUsage}, and, +   * {@link #requestParamAnnotation}. Must be called after {@link #parseMethodAnnotations()}., +    Class<?>[] methodParameterTypes = method.getParameterTypes();, +    Annotation[][] methodParameterAnnotationArrays = method.getParameterAnnotations();, +    int count = methodParameterAnnotationArrays.length;, +    String[] requestParamNames = new String[count];, +    ParamUsage[] requestParamUsage = new ParamUsage[count];, +    Annotation[] requestParamAnnotation = new Annotation[count];, +      Class<?> methodParameterType = methodParameterTypes[i];, +      Annotation[] methodParameterAnnotations = methodParameterAnnotationArrays[i];, +      if (methodParameterAnnotations != null) {, +        for (Annotation methodParameterAnnotation : methodParameterAnnotations) {, +          Class<? extends Annotation> methodAnnotationType =, +              methodParameterAnnotation.annotationType();, +          if (methodAnnotationType == Path.class) {, +            String name = ((Path) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.PATH;, +          } else if (methodAnnotationType == EncodedPath.class) {, +            String name = ((EncodedPath) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.ENCODED_PATH;, +          } else if (methodAnnotationType == Query.class) {, +            String name = ((Query) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.QUERY;, +          } else if (methodAnnotationType == EncodedQuery.class) {, +            String name = ((EncodedQuery) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.ENCODED_QUERY;, +          } else if (methodAnnotationType == QueryMap.class) {, +            if (!Map.class.isAssignableFrom(methodParameterType)) {, +            requestParamUsage[i] = ParamUsage.QUERY_MAP;, +          } else if (methodAnnotationType == EncodedQueryMap.class) {, +            if (!Map.class.isAssignableFrom(methodParameterType)) {, +            requestParamUsage[i] = ParamUsage.ENCODED_QUERY_MAP;, +          } else if (methodAnnotationType == Header.class) {, +            String name = ((Header) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.HEADER;, +          } else if (methodAnnotationType == Field.class) {, +            String name = ((Field) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.FIELD;, +          } else if (methodAnnotationType == FieldMap.class) {, +            if (!Map.class.isAssignableFrom(methodParameterType)) {, +            requestParamUsage[i] = ParamUsage.FIELD_MAP;, +          } else if (methodAnnotationType == Part.class) {, +            String name = ((Part) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.PART;, +          } else if (methodAnnotationType == PartMap.class) {, +            if (!Map.class.isAssignableFrom(methodParameterType)) {, +            requestParamUsage[i] = ParamUsage.PART_MAP;, +          } else if (methodAnnotationType == Body.class) {, +            requestParamUsage[i] = ParamUsage.BODY;, +          } else {, +            // This is a non-Retrofit annotation. Skip to the next one., +            continue;, +]
[+++ b/checkstyle.xml, +        <module name="MethodLength"/>, +        <module name="ParameterNumber"/>, +        <module name="TypecastParenPad"/>, +        <module name="ModifierOrder"/>, +        <module name="AvoidNestedBlocks"/>, +        <module name="InterfaceIsType"/>, +        <module name="ArrayTypeStyle"/>, +++ b/checkstyle.xml, +        <module name="MethodLength"/>, +        <module name="ParameterNumber"/>, +        <module name="TypecastParenPad"/>, +        <module name="ModifierOrder"/>, +        <module name="AvoidNestedBlocks"/>, +        <module name="InterfaceIsType"/>, +        <module name="ArrayTypeStyle"/>, +++ b/http/src/main/java/retrofit/http/RestException.java, +  public abstract static class HttpException extends RestException {]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), +    .endpoint("https://api.example.com"), +    .converter(new ProtoConverter()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), +    .endpoint("https://api.example.com"), +    .converter(new ProtoConverter()), +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, + * @see MockRetrofit, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), +    .endpoint("https://api.example.com"), +    .converter(new ProtoConverter()), +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, + * @see MockRetrofit, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + *   MockRetrofit mockRetrofit = MockRetrofit.from(restAdapter);, + *   UserService service = mockRetrofit.create(UserService.class, new MockUserService());, +public final class MockRetrofit {, +   * Create a new {@link MockRetrofit} which will act as a factory for mock services. Some of, +  public static MockRetrofit from(RestAdapter restAdapter, Executor executor) {, +    return new MockRetrofit(restAdapter, executor);, +  private MockRetrofit(RestAdapter restAdapter, Executor executor) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), +    .endpoint("https://api.example.com"), +    .converter(new ProtoConverter()), +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, + * @see MockRetrofit, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + *   MockRetrofit mockRetrofit = MockRetrofit.from(restAdapter);, + *   UserService service = mockRetrofit.create(UserService.class, new MockUserService());, +public final class MockRetrofit {, +   * Create a new {@link MockRetrofit} which will act as a factory for mock services. Some of, +  public static MockRetrofit from(RestAdapter restAdapter, Executor executor) {, +    return new MockRetrofit(restAdapter, executor);, +  private MockRetrofit(RestAdapter restAdapter, Executor executor) {, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +public class MockRetrofitTest {, +  private MockRetrofit mockRetrofit;, +    mockRetrofit = MockRetrofit.from(restAdapter, httpExecutor);, +    mockRetrofit.random.setSeed(2847);, +      mockRetrofit.setDelay(-1);, +      mockRetrofit.setDelay(Long.MAX_VALUE);, +      mockRetrofit.setVariancePercentage(-13);, +      mockRetrofit.setVariancePercentage(174);, +      mockRetrofit.setErrorPercentage(-13);, +      mockRetrofit.setErrorPercentage(174);, +    mockRetrofit.setErrorPercentage(0);, +      assertThat(mockRetrofit.calculateIsFailure()).isFalse();, +    mockRetrofit.setErrorPercentage(3);, +      if (mockRetrofit.calculateIsFailure()) {, +    mockRetrofit.setDelay(2000);, +    mockRetrofit.setVariancePercentage(0);, +      assertThat(mockRetrofit.calculateDelayForCall()).isEqualTo(2000);, +    mockRetrofit.setVariancePercentage(40);, +      int delay = mockRetrofit.calculateDelayForCall();, +    mockRetrofit.setDelay(2000);, +      int delay = mockRetrofit.calculateDelayForError();, +    mockRetrofit.setErrorPercentage(100);, +    mockRetrofit.setDelay(1);, +    SyncExample mockService = mockRetrofit.create(SyncExample.class, new MockSyncExample());, +    mockRetrofit.setDelay(1);, +    mockRetrofit.setErrorPercentage(100);, +    AsyncExample mockService = mockRetrofit.create(AsyncExample.class, new MockAsyncExample());, +    mockRetrofit.setDelay(100);, +    mockRetrofit.setVariancePercentage(0);, +    mockRetrofit.setErrorPercentage(0);, +    SyncExample mockService = mockRetrofit.create(SyncExample.class, new MockSyncExample());, +    mockRetrofit.setDelay(100);, +    mockRetrofit.setVariancePercentage(0);, +    mockRetrofit.setErrorPercentage(0);, +    AsyncExample mockService = mockRetrofit.create(AsyncExample.class, new MockAsyncExample());, +    mockRetrofit.setDelay(100);, +    mockRetrofit.setVariancePercentage(0);, +    mockRetrofit.setErrorPercentage(0);, +        mockRetrofit.create(ObservableExample.class, new MockObservableExample());, +    mockRetrofit.setDelay(100);, +    mockRetrofit.setVariancePercentage(0);, +    mockRetrofit.setErrorPercentage(0);]
[+++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, + * @deprecated Retrofit includes support for Optional. This no longer needs to be added to the, + * Retrofit instance explicitly., + * <p>, +@Deprecated, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, + * @deprecated Retrofit includes support for Optional. This no longer needs to be added to the, + * Retrofit instance explicitly., + * <p>, +@Deprecated, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/Java8OptionalConverterFactoryTest.java, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, + * @deprecated Retrofit includes support for Optional. This no longer needs to be added to the, + * Retrofit instance explicitly., + * <p>, +@Deprecated, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/Java8OptionalConverterFactoryTest.java, +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/ProtoConverterFactoryTest.java, +          + "   * retrofit2.converter.protobuf.ProtoConverterFactory\n", +          + "   * retrofit2.OptionalConverterFactory");, +          + "   * retrofit2.converter.protobuf.ProtoConverterFactory\n", +          + "   * retrofit2.OptionalConverterFactory");, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, + * @deprecated Retrofit includes support for Optional. This no longer needs to be added to the, + * Retrofit instance explicitly., + * <p>, +@Deprecated, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/Java8OptionalConverterFactoryTest.java, +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/ProtoConverterFactoryTest.java, +          + "   * retrofit2.converter.protobuf.ProtoConverterFactory\n", +          + "   * retrofit2.OptionalConverterFactory");, +          + "   * retrofit2.converter.protobuf.ProtoConverterFactory\n", +          + "   * retrofit2.OptionalConverterFactory");, +++ b/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterFactoryTest.java, +          + "   * retrofit2.converter.scalars.ScalarsConverterFactory\n", +          + "   * retrofit2.OptionalConverterFactory");, +          + "   * retrofit2.converter.scalars.ScalarsConverterFactory\n", +          + "   * retrofit2.OptionalConverterFactory");, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, + * @deprecated Retrofit includes support for Optional. This no longer needs to be added to the, + * Retrofit instance explicitly., + * <p>, +@Deprecated]
[+++ b/checkstyle.xml, +        <module name="MethodLength"/>, +        <module name="ParameterNumber"/>, +        <module name="TypecastParenPad"/>, +        <module name="ModifierOrder"/>, +        <module name="AvoidNestedBlocks"/>, +        <module name="InterfaceIsType"/>, +        <module name="ArrayTypeStyle"/>, +++ b/checkstyle.xml, +        <module name="MethodLength"/>, +        <module name="ParameterNumber"/>, +        <module name="TypecastParenPad"/>, +        <module name="ModifierOrder"/>, +        <module name="AvoidNestedBlocks"/>, +        <module name="InterfaceIsType"/>, +        <module name="ArrayTypeStyle"/>, +++ b/http/pom.xml, +      <scope>provided</scope>, +, +      <plugin>, +        <groupId>org.sonatype.plugins</groupId>, +        <artifactId>jarjar-maven-plugin</artifactId>, +        <executions>, +          <execution>, +            <phase>package</phase>, +            <goals>, +              <goal>jarjar</goal>, +            </goals>, +            <configuration>, +              <includes>, +                <include>com.google.code.gson:gson</include>, +              </includes>, +              <rules>, +                <rule>, +                  <pattern>com.google.gson.**</pattern>, +                  <result>retrofit.internal.gson.@1</result>, +                </rule>, +              </rules>, +            </configuration>, +          </execution>, +        </executions>, +      </plugin>, +++ b/checkstyle.xml, +        <module name="MethodLength"/>, +        <module name="ParameterNumber"/>, +        <module name="TypecastParenPad"/>, +        <module name="ModifierOrder"/>, +        <module name="AvoidNestedBlocks"/>, +        <module name="InterfaceIsType"/>, +        <module name="ArrayTypeStyle"/>, +++ b/http/pom.xml, +      <scope>provided</scope>, +, +      <plugin>, +        <groupId>org.sonatype.plugins</groupId>, +        <artifactId>jarjar-maven-plugin</artifactId>, +        <executions>, +          <execution>, +            <phase>package</phase>, +            <goals>, +              <goal>jarjar</goal>, +            </goals>, +            <configuration>, +              <includes>, +                <include>com.google.code.gson:gson</include>, +              </includes>, +              <rules>, +                <rule>, +                  <pattern>com.google.gson.**</pattern>, +                  <result>retrofit.internal.gson.@1</result>, +                </rule>, +              </rules>, +            </configuration>, +          </execution>, +        </executions>, +      </plugin>, +++ b/http/src/main/java/retrofit/http/RestException.java, +  public abstract static class HttpException extends RestException {]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.atomic.AtomicInteger;, +import retrofit2.Call;, +import retrofit2.Response;, +import rx.Producer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.exceptions.CompositeException;, +import rx.exceptions.Exceptions;, +import rx.plugins.RxJavaPlugins;, +, +final class CallArbiter<T> extends AtomicInteger implements Subscription, Producer {, +  private static final int STATE_WAITING = 0;, +  private static final int STATE_REQUESTED = 1;, +  private static final int STATE_HAS_RESPONSE = 2;, +  private static final int STATE_TERMINATED = 3;, +, +  private final Call<T> call;, +  private final Subscriber<? super Response<T>> subscriber;, +, +  private volatile Response<T> response;, +, +  CallArbiter(Call<T> call, Subscriber<? super Response<T>> subscriber) {, +    super(STATE_WAITING);, +, +    this.call = call;, +    this.subscriber = subscriber;, +  }, +, +  @Override public void unsubscribe() {, +    call.cancel();, +  }, +, +  @Override public boolean isUnsubscribed() {, +    return call.isCanceled();, +  }, +, +  @Override public void request(long amount) {, +    if (amount == 0) {, +      return;, +    }, +    while (true) {, +      int state = get();, +      switch (state) {, +        case STATE_WAITING:, +          if (compareAndSet(STATE_WAITING, STATE_REQUESTED)) {, +            return;, +          }, +          break; // State transition failed. Try again., +, +        case STATE_HAS_RESPONSE:, +          if (compareAndSet(STATE_HAS_RESPONSE, STATE_TERMINATED)) {, +            deliverResponse(response);, +            return;, +          }, +          break; // State transition failed. Try again., +, +        case STATE_REQUESTED:, +        case STATE_TERMINATED:, +          return; // Nothing to do., +, +        default:, +          throw new IllegalStateException("Unknown state: " + state);, +      }, +    }, +  }, +, +  void emitResponse(Response<T> response) {, +    while (true) {, +      int state = get();, +      switch (state) {, +        case STATE_WAITING:, +          this.response = response;, +          if (compareAndSet(STATE_WAITING, STATE_HAS_RESPONSE)) {, +            return;, +          }, +          break; // State transition failed. Try again., +, +        case STATE_REQUESTED:, +          if (compareAndSet(STATE_REQUESTED, STATE_TERMINATED)) {, +            deliverResponse(response);, +            return;, +          }]
[+++ b/samples/pom.xml, +      <artifactId>converter-moshi</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/samples/pom.xml, +      <artifactId>converter-moshi</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/samples/src/main/java/com/example/retrofit/AnnotatedConverters.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import com.google.gson.GsonBuilder;, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.annotation.Retention;, +import java.lang.reflect.Type;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.simpleframework.xml.Attribute;, +import org.simpleframework.xml.Default;, +import org.simpleframework.xml.DefaultType;, +import retrofit2.Call;, +import retrofit2.Converter;, +import retrofit2.Retrofit;, +import retrofit2.converter.gson.GsonConverterFactory;, +import retrofit2.converter.moshi.MoshiConverterFactory;, +import retrofit2.converter.simplexml.SimpleXmlConverterFactory;, +import retrofit2.http.GET;, +, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +final class AnnotatedConverters {, +  public static final class AnnotatedConverterFactory extends Converter.Factory {, +    private final Map<Class<? extends Annotation>, Converter.Factory> factories;, +, +    public static final class Builder {, +      private final Map<Class<? extends Annotation>, Converter.Factory> factories =, +          new LinkedHashMap<>();, +, +      public Builder add(Class<? extends Annotation> cls, Converter.Factory factory) {, +        if (cls == null) {, +          throw new NullPointerException("cls == null");, +        }, +        if (factory == null) {, +          throw new NullPointerException("factory == null");, +        }, +        factories.put(cls, factory);, +        return this;, +      }, +, +      public AnnotatedConverterFactory build() {, +        return new AnnotatedConverterFactory(factories);, +      }, +    }, +, +    AnnotatedConverterFactory(Map<Class<? extends Annotation>, Converter.Factory> factories) {, +      this.factories = new LinkedHashMap<>(factories);, +    }, +, +    @Override, +    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +      for (Annotation annotation : annotations) {, +        Converter.Factory factory = factories.get(annotation.annotationType());, +        if (factory != null) {, +          return factory.responseBodyConverter(type, annotations, retrofit);, +        }, +      }, +      return null;, +    }, +, +    @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +      for (Annotation annotation : parameterAnnotations) {, +        Converter.Factory factory = factories.get(annotation.annotationType());, +        if (factory != null) {, +          return factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations,]
[+++ b/pom.xml, +    <robolectric.version>3.8</robolectric.version>, +++ b/pom.xml, +    <robolectric.version>3.8</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/pom.xml, +    <robolectric.version>3.8</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/pom.xml, +    <robolectric.version>3.8</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/RequestFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE)]
[+++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  // Upper and lower characters, digits, underscores, and hyphens, starting with a character., +  private static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, +  private static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, +  private static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, +      Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(query);, +            if (!PARAM_NAME_REGEX.matcher(name).matches()) {, +              throw new IllegalStateException("Path parameter name is not valid: ", +                  + name, +                  + ". Must match ", +                  + PARAM_URL_REGEX.pattern());, +            }, +                  "Method URL \"" + requestUrl + "\" does not contain {" + name + "}.");, +    Matcher m = PARAM_URL_REGEX.matcher(path);, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  // Upper and lower characters, digits, underscores, and hyphens, starting with a character., +  private static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, +  private static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, +  private static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, +      Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(query);, +            if (!PARAM_NAME_REGEX.matcher(name).matches()) {, +              throw new IllegalStateException("Path parameter name is not valid: ", +                  + name, +                  + ". Must match ", +                  + PARAM_URL_REGEX.pattern());, +            }, +                  "Method URL \"" + requestUrl + "\" does not contain {" + name + "}.");, +    Matcher m = PARAM_URL_REGEX.matcher(path);, +++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java, +import static org.junit.Assert.fail;, +    expectParams("/foo/bar");, +    expectParams("/foo/bar/{}");, +    expectParams("/foo/bar/{taco}", "taco");, +    expectParams("/foo/bar/{t}", "t");, +    expectParams("/foo/bar/{!!!}/"); // Invalid parameter., +    expectParams("/foo/bar/{}/{taco}", "taco");, +    expectParams("/foo/bar/{taco}/or/{burrito}", "taco", "burrito");, +    expectParams("/foo/bar/{taco}/or/{taco}", "taco");, +    expectParams("/foo/bar/{taco-shell}", "taco-shell");, +    expectParams("/foo/bar/{taco_shell}", "taco_shell");, +    expectParams("/foo/bar/{sha256}", "sha256");, +    expectParams("/foo/bar/{TACO}", "TACO");, +    expectParams("/foo/bar/{taco}/{tAco}/{taCo}", "taco", "tAco", "taCo");, +    expectParams("/foo/bar/{1}"); // Invalid parameter, name cannot start with digit., +  @Test public void invalidPathParam() throws Exception {, +    class Example {, +      @GET("/") Response a(@Path("hey!") String thing) {, +        return null;, +      }, +    }, +, +    Method method = TestingUtils.getMethod(Example.class, "a");, +    RestMethodInfo methodInfo = new RestMethodInfo(method);, +    try {, +      methodInfo.init();, +      fail();, +    } catch (IllegalStateException e) {, +      assertThat(e.getMessage()).startsWith("Path parameter name is not valid: hey!.");, +    }, +  }, +]
[+++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.2.2-SNAPSHOT</version>]
[+++ b/pom.xml, +    <gson.version>2.8.0</gson.version>, +    <moshi.version>1.4.0</moshi.version>]
[+++ b/pom.xml, +        <exclusions>, +          <exclusion>, +            <groupId>commons-logging</groupId>, +            <artifactId>commons-logging</artifactId>, +          </exclusion>, +        </exclusions>]
[+++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import retrofit.http.EncodedPath;, +import retrofit.http.EncodedQuery;, +import retrofit.http.EncodedQueryMap;, +      } else if (annotationType == EncodedPath.class) {, +        String name = ((EncodedPath) annotation).value();, +        if (value == null) {, +          throw new IllegalArgumentException(, +              "Path parameter \"" + name + "\" value must not be null.");, +        }, +        addPathParam(name, value.toString(), false);, +      } else if (annotationType == EncodedQuery.class) {]
[+++ b/pom.xml, +    <gson.version>2.4</gson.version>, +++ b/pom.xml, +    <gson.version>2.4</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonRequestBodyConverter<>(gson, adapter);, +++ b/pom.xml, +    <gson.version>2.4</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonRequestBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonWriter;, +  private final Gson gson;, +  GsonRequestBodyConverter(Gson gson, TypeAdapter<T> adapter) {, +    this.gson = gson;, +    JsonWriter jsonWriter = gson.newJsonWriter(writer);, +      adapter.write(jsonWriter, value);, +      jsonWriter.flush();, +++ b/pom.xml, +    <gson.version>2.4</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonRequestBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonWriter;, +  private final Gson gson;, +  GsonRequestBodyConverter(Gson gson, TypeAdapter<T> adapter) {, +    this.gson = gson;, +    JsonWriter jsonWriter = gson.newJsonWriter(writer);, +      adapter.write(jsonWriter, value);, +      jsonWriter.flush();, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +  }, +  @Test public void serializeUsesConfiguration() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("{}"));, +, +    service.anImplementation(new AnImplementation(null)).execute();, +, +    RecordedRequest request = server.takeRequest();, +    assertThat(request.getBody().readUtf8()).isEqualTo("{}"); // Null value was not serialized., +    assertThat(request.getHeader("Content-Type")).isEqualTo("application/json; charset=UTF-8");]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, + * By default, instances of this class will use a 2 second delay with 40% variance. Failures, + * will occur 3% of the time. HTTP errors will occur 0% of the time.]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.0</version>, +++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.0</version>, +++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.0</version>, +++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.0</version>, +++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.0</version>, +++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.0</version>, +++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.5.0</version>, +++ b/pom.xml, +  <version>1.5.0</version>, +    <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.5.0</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.5.0</version>, +++ b/pom.xml]
[+++ b/pom.xml, +  <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.0</version>, +++ b/retrofit/pom.xml, +    <version>1.2.0</version>]
[+++ b/retrofit-adapters/README.md, +Retrofit ships with a default adapter for executing `Call` instances. The child modules contained, +herein are additional adapters for other popular execution mechanisms., +, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +, +```java, +Retrofit retrofit = new Retrofit.Builder(), +    .baseUrl("https://api.example.com"), +    .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), +    .build();, +```, +++ b/retrofit-adapters/README.md, +Retrofit ships with a default adapter for executing `Call` instances. The child modules contained, +herein are additional adapters for other popular execution mechanisms., +, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +, +```java, +Retrofit retrofit = new Retrofit.Builder(), +    .baseUrl("https://api.example.com"), +    .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), +    .build();, +```, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * A {@linkplain CallAdapter.Factory call adapter} which uses RxJava for creating observables., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link Observable} from service, + * methods., + * <pre>{@code, + * interface MyService {, + *   &#64;GET("user/me"), + *   Observable<User> getUser(), + * }, + * }</pre>, +   * Returns an instance which creates synchronous observables that do not operate on any scheduler, +   * by default., +   * Returns an instance which creates synchronous observables that, +   * {@linkplain Observable#subscribeOn(Scheduler) subscribe on} {@code scheduler} by default., +++ b/retrofit-adapters/README.md, +Retrofit ships with a default adapter for executing `Call` instances. The child modules contained, +herein are additional adapters for other popular execution mechanisms., +, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +, +```java, +Retrofit retrofit = new Retrofit.Builder(), +    .baseUrl("https://api.example.com"), +    .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), +    .build();, +```, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * A {@linkplain CallAdapter.Factory call adapter} which uses RxJava for creating observables., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link Observable} from service, + * methods., + * <pre>{@code, + * interface MyService {, + *   &#64;GET("user/me"), + *   Observable<User> getUser(), + * }, + * }</pre>, +   * Returns an instance which creates synchronous observables that do not operate on any scheduler, +   * by default., +   * Returns an instance which creates synchronous observables that, +   * {@linkplain Observable#subscribeOn(Scheduler) subscribe on} {@code scheduler} by default., +++ b/retrofit-converters/README.md, +Retrofit ships with support for OkHttp's `RequestBody` and `ResponseBody` types but the library is, +content-format agnostic. The child modules contained herein are additional converters for other, +popular formats., +    .addConverterFactory(GsonConverterFactory.create()), +++ b/retrofit-adapters/README.md, +Retrofit ships with a default adapter for executing `Call` instances. The child modules contained, +herein are additional adapters for other popular execution mechanisms., +, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +, +```java, +Retrofit retrofit = new Retrofit.Builder(), +    .baseUrl("https://api.example.com"), +    .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), +    .build();, +```, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * A {@linkplain CallAdapter.Factory call adapter} which uses RxJava for creating observables., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link Observable} from service, + * methods., + * <pre>{@code, + * interface MyService {, + *   &#64;GET("user/me"), + *   Observable<User> getUser(), + * }, + * }</pre>, +   * Returns an instance which creates synchronous observables that do not operate on any scheduler, +   * by default., +   * Returns an instance which creates synchronous observables that, +   * {@linkplain Observable#subscribeOn(Scheduler) subscribe on} {@code scheduler} by default., +++ b/retrofit-converters/README.md, +Retrofit ships with support for OkHttp's `RequestBody` and `ResponseBody` types but the library is]
[+++ b/retrofit-converters/simplexml/README.md, +Deprecated – Please switch to the JAXB Converter, +------------------------------------------------, +, +The Simple XML project is no longer maintained. We recommend switching to the, +[JAXB converter](https://github.com/square/retrofit/tree/master/retrofit-converters/jaxb)., +, +-----, +, +++ b/retrofit-converters/simplexml/README.md, +Deprecated – Please switch to the JAXB Converter, +------------------------------------------------, +, +The Simple XML project is no longer maintained. We recommend switching to the, +[JAXB converter](https://github.com/square/retrofit/tree/master/retrofit-converters/jaxb)., +, +-----, +, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlConverterFactory.java, + *, + * @deprecated we recommend switching to the JAXB converter., +@Deprecated]
[+++ b/pom.xml, +    <rxjava.version>1.3.0</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>1.3.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapter.java, +    return observable;, +++ b/pom.xml, +    <rxjava.version>1.3.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +    boolean isCompletable = rawType == Completable.class;]
[+++ b/pom.xml, +    <okhttp.version>3.6.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>3.6.0</okhttp.version>, +++ /dev/null, +++ b/pom.xml, +    <okhttp.version>3.6.0</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <okhttp.version>3.6.0</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <okhttp.version>3.6.0</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.atomic.AtomicInteger;, +import retrofit2.Call;, +import retrofit2.Response;, +import rx.Observable.OnSubscribe;, +import rx.Producer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.exceptions.CompositeException;, +import rx.exceptions.Exceptions;, +import rx.plugins.RxJavaPlugins;, +, +final class CallOnSubscribe<T> implements OnSubscribe<Response<T>> {, +  private final Call<T> originalCall;, +, +  CallOnSubscribe(Call<T> originalCall) {, +    this.originalCall = originalCall;, +  }, +, +  @Override public void call(Subscriber<? super Response<T>> subscriber) {, +    // Since Call is a one-shot type, clone it for each new subscriber., +    Call<T> call = originalCall.clone();, +    CallArbiter<T> arbiter = new CallArbiter<>(call, subscriber);, +    subscriber.add(arbiter);, +    subscriber.setProducer(arbiter);, +, +    Response<T> response;, +    try {, +      response = call.execute();, +    } catch (Throwable t) {, +      Exceptions.throwIfFatal(t);, +      arbiter.emitError(t);, +      return;, +    }, +    arbiter.emitResponse(response);, +  }, +, +  static final class CallArbiter<T> extends AtomicInteger implements Subscription, Producer {, +    private static final int STATE_WAITING = 0;, +    private static final int STATE_REQUESTED = 1;, +    private static final int STATE_HAS_RESPONSE = 2;, +    private static final int STATE_TERMINATED = 3;, +, +    private final Call<T> call;, +    private final Subscriber<? super Response<T>> subscriber;, +, +    private volatile Response<T> response;, +, +    CallArbiter(Call<T> call, Subscriber<? super Response<T>> subscriber) {, +      super(STATE_WAITING);, +, +      this.call = call;, +      this.subscriber = subscriber;, +    }, +, +    @Override public void unsubscribe() {, +      call.cancel();, +    }, +, +    @Override public boolean isUnsubscribed() {, +      return call.isCanceled();, +    }, +, +    @Override public void request(long amount) {]
[+++ b/pom.xml, +      <dependency>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>mockwebserver</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +++ b/pom.xml, +      <dependency>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>mockwebserver</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/pom.xml, +      <dependency>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>mockwebserver</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.io.IOException;, +import java.io.OutputStream;, +  private String contentTypeHeader;, +    contentTypeHeader = methodInfo.contentTypeHeader;, +    if ("Content-Type".equalsIgnoreCase(name)) {, +      contentTypeHeader = value;, +      return;, +    }, +, +    if (body != null && contentTypeHeader != null) {, +      body = new MimeOverridingTypedOutput(body, contentTypeHeader);, +, +  private static class MimeOverridingTypedOutput implements TypedOutput {, +    private final TypedOutput delegate;, +    private final String mimeType;, +, +    MimeOverridingTypedOutput(TypedOutput delegate, String mimeType) {, +      this.delegate = delegate;, +      this.mimeType = mimeType;, +    }, +, +    @Override public String fileName() {, +      return delegate.fileName();, +    }, +, +    @Override public String mimeType() {, +      return mimeType;, +    }, +, +    @Override public long length() {, +      return delegate.length();, +    }, +, +    @Override public void writeTo(OutputStream out) throws IOException {, +      delegate.writeTo(out);, +    }, +  }, +++ b/pom.xml, +      <dependency>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>mockwebserver</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.io.IOException;, +import java.io.OutputStream;, +  private String contentTypeHeader;, +    contentTypeHeader = methodInfo.contentTypeHeader;, +    if ("Content-Type".equalsIgnoreCase(name)) {, +      contentTypeHeader = value;, +      return;, +    }, +, +    if (body != null && contentTypeHeader != null) {, +      body = new MimeOverridingTypedOutput(body, contentTypeHeader);, +, +  private static class MimeOverridingTypedOutput implements TypedOutput {, +    private final TypedOutput delegate;, +    private final String mimeType;, +, +    MimeOverridingTypedOutput(TypedOutput delegate, String mimeType) {, +      this.delegate = delegate;, +      this.mimeType = mimeType;]
[+++ b/pom.xml, +  <version>1.1.0</version>, +++ b/pom.xml, +  <version>1.1.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.0</version>, +++ b/pom.xml, +  <version>1.1.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.0</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.0</version>, +++ b/pom.xml, +  <version>1.1.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.0</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.0</version>, +++ b/retrofit/pom.xml, +    <version>1.1.0</version>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/ObservableTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import retrofit2.http.GET;, +import rx.Observable;, +import rx.observables.BlockingObservable;, +, +import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.fail;, +, +public final class ObservableTest {, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  interface Service {, +    @GET("/") Observable<String> body();, +    @GET("/") Observable<Response<String>> response();, +    @GET("/") Observable<Result<String>> result();, +  }, +, +  private Service service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), +        .build();, +    service = retrofit.create(Service.class);, +  }, +, +  @Test public void bodySuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<String> o = service.body().toBlocking();, +    assertThat(o.first()).isEqualTo("Hi");, +  }, +, +  @Test public void bodySuccess404() {, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    BlockingObservable<String> o = service.body().toBlocking();, +    try {, +      o.first();]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.lang.reflect.Type;, +import static retrofit2.Utils.methodError;, +, +    Type returnType = method.getGenericReturnType();, +    if (Utils.hasUnresolvableType(returnType)) {, +      throw methodError(method,, +          "Method return type must not include a type variable or wildcard: %s", returnType);, +    }, +    if (returnType == void.class) {, +      throw methodError(method, "Service methods cannot return void.");, +    }, +]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, +  final Retrofit retrofit;, +  private final ExecutorService executor;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, +      Class<T> service) {, +    this.executor = executor;, +    final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, +  final Retrofit retrofit;, +  private final ExecutorService executor;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, +      Class<T> service) {, +    this.executor = executor;, +    final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +  private final ExecutorService executor;, +  MockRetrofit(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor) {, +    this.executor = executor;, +  public Executor backgroundExecutor() {, +    return executor;, +  }, +, +    return new BehaviorDelegate<>(retrofit, behavior, executor, service);, +  }, +, +  public static final class Builder {, +    private final Retrofit retrofit;, +    private NetworkBehavior behavior;, +    private ExecutorService executor;, +, +    public Builder(Retrofit retrofit) {, +      if (retrofit == null) throw new NullPointerException("retrofit == null");, +      this.retrofit = retrofit;, +    }, +, +    public Builder networkBehavior(NetworkBehavior behavior) {, +      if (behavior == null) throw new NullPointerException("behavior == null");, +      this.behavior = behavior;, +      return this;, +    }, +, +    public Builder backgroundExecutor(ExecutorService executor) {, +      if (executor == null) throw new NullPointerException("executor == null");, +      this.executor = executor;, +      return this;, +    }, +, +    public MockRetrofit build() {, +      if (behavior == null) behavior = NetworkBehavior.create();, +      if (executor == null) executor = Executors.newCachedThreadPool();, +      return new MockRetrofit(retrofit, behavior, executor);, +    }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {]
[+++ b/pom.xml, +  <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.0</version>]
[+++ b/pom.xml, +  <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.3-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.3-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.3-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.3-SNAPSHOT</version>]
[+++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1-SNAPSHOT</version>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.converter.gson;, +, +import com.google.gson.Gson;, +import com.google.gson.TypeAdapter;, +import com.google.gson.reflect.TypeToken;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +import retrofit2.Retrofit;, +, +/**, + * A {@linkplain Converter.Factory converter} which uses Gson for JSON., + * <p>, + * Because Gson is so flexible in the types it supports, this converter assumes that it can handle, + * all types. If you are mixing JSON serialization with something else (such as protocol buffers),, + * you must {@linkplain Retrofit.Builder#addConverterFactory(Converter.Factory) add this instance}, + * last to allow the other converters a chance to see their types., + */, +public final class GsonConverterFactory extends Converter.Factory {, +  /**, +   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and, +   * decoding from JSON (when no charset is specified by a header) will use UTF-8., +   */, +  public static GsonConverterFactory create() {, +    return create(new Gson());, +  }, +, +  /**, +   * Create an instance using {@code gson} for conversion. Encoding to JSON and, +   * decoding from JSON (when no charset is specified by a header) will use UTF-8., +   */, +  public static GsonConverterFactory create(Gson gson) {, +    return new GsonConverterFactory(gson);, +  }, +, +  private final Gson gson;, +, +  private GsonConverterFactory(Gson gson) {, +    if (gson == null) throw new NullPointerException("gson == null");, +    this.gson = gson;, +  }, +, +  @Override, +  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonResponseBodyConverter<>(adapter);, +  }, +, +  @Override, +  public Converter<?, RequestBody> requestBodyConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonRequestBodyConverter<>(gson, adapter);, +  }, +}, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +      if (Utils.hasUnresolvableType(returnType)) {, +        throw methodError(method,, +            "Method return type must not include a type variable or wildcard: %s", returnType);, +      }, +      if (returnType == void.class) {, +        throw methodError(method, "Service methods cannot return void.");, +      }, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +      if (Utils.hasUnresolvableType(returnType)) {, +        throw methodError(method,, +            "Method return type must not include a type variable or wildcard: %s", returnType);, +      }, +      if (returnType == void.class) {, +        throw methodError(method, "Service methods cannot return void.");, +      }, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    ExceptionCatchingResponseBody catchingBody = new ExceptionCatchingResponseBody(rawBody);, +  static final class ExceptionCatchingResponseBody extends ResponseBody {, +    ExceptionCatchingResponseBody(ResponseBody delegate) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +      if (Utils.hasUnresolvableType(returnType)) {, +        throw methodError(method,, +            "Method return type must not include a type variable or wildcard: %s", returnType);, +      }, +      if (returnType == void.class) {, +        throw methodError(method, "Service methods cannot return void.");, +      }, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    ExceptionCatchingResponseBody catchingBody = new ExceptionCatchingResponseBody(rawBody);, +  static final class ExceptionCatchingResponseBody extends ResponseBody {, +    ExceptionCatchingResponseBody(ResponseBody delegate) {, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java]
[+++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.2-SNAPSHOT</version>]
[+++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>]
[+++ b/pom.xml, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <version>2.10.3</version>, +        <executions>, +          <execution>, +            <id>attach-javadocs</id>, +            <phase>package</phase>, +            <goals>, +              <goal>jar</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +, +      <plugin>, +++ b/pom.xml, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <version>2.10.3</version>, +        <executions>, +          <execution>, +            <id>attach-javadocs</id>, +            <phase>package</phase>, +            <goals>, +              <goal>jar</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +, +      <plugin>, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +      if (executed) throw new IllegalStateException("Already executed");, +  public Response<T> execute() throws IOException {, +      if (executed) throw new IllegalStateException("Already executed");, +++ b/pom.xml, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <version>2.10.3</version>, +        <executions>, +          <execution>, +            <id>attach-javadocs</id>, +            <phase>package</phase>, +            <goals>, +              <goal>jar</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +, +      <plugin>, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +      if (executed) throw new IllegalStateException("Already executed");, +  public Response<T> execute() throws IOException {, +      if (executed) throw new IllegalStateException("Already executed");, +++ b/retrofit/src/main/java/retrofit2/http/Field.java, + * <pre>{@code, + * Call&lt;ResponseBody> example(, + *     &#64;Field("name") String name,, + *     &#64;Field("occupation") String occupation);, + * }</pre>, + * Array/Varargs Example:, + * <pre>{@code, + * Call&lt;ResponseBody> example(@Field("name") String... names);, + * }</pre>, +++ b/pom.xml, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <version>2.10.3</version>, +        <executions>, +          <execution>, +            <id>attach-javadocs</id>, +            <phase>package</phase>, +            <goals>, +              <goal>jar</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +, +      <plugin>, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +      if (executed) throw new IllegalStateException("Already executed");, +  public Response<T> execute() throws IOException {, +      if (executed) throw new IllegalStateException("Already executed");, +++ b/retrofit/src/main/java/retrofit2/http/Field.java, + * <pre>{@code, + * Call&lt;ResponseBody> example(, + *     &#64;Field("name") String name,, + *     &#64;Field("occupation") String occupation);, + * }</pre>, + * Array/Varargs Example:, + * <pre>{@code, + * Call&lt;ResponseBody> example(@Field("name") String... names);, + * }</pre>, +++ b/retrofit/src/main/java/retrofit2/http/FieldMap.java, + * <pre>{@code, + * Call&lt;ResponseBody> things(@FieldMap Map&lt;String, String&gt; fields);, + * }</pre>]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T> serviceMethod;, +  OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    Request request = serviceMethod.toRequest(args);, +    okhttp3.Call call = serviceMethod.callFactory.newCall(request);, +      T body = serviceMethod.toResponse(catchingBody);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T> serviceMethod;, +  OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    Request request = serviceMethod.toRequest(args);, +    okhttp3.Call call = serviceMethod.callFactory.newCall(request);, +      T body = serviceMethod.toResponse(catchingBody);, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T> serviceMethod;, +  OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    Request request = serviceMethod.toRequest(args);, +    okhttp3.Call call = serviceMethod.callFactory.newCall(request);, +      T body = serviceMethod.toResponse(catchingBody);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import android.net.Uri;, +import java.io.IOException;, +import java.lang.reflect.Array;, +import java.net.URI;, +import java.util.Map;, +import okhttp3.Headers;, +import okhttp3.RequestBody;, +, +import static retrofit2.Utils.checkNotNull;, +, +abstract class ParameterHandler<T> {, +  abstract void apply(RequestBuilder builder, T value) throws IOException;, +, +  final ParameterHandler<Iterable<T>> iterable() {, +    return new ParameterHandler<Iterable<T>>() {, +      @Override void apply(RequestBuilder builder, Iterable<T> values) throws IOException {, +        if (values == null) return; // Skip null values., +, +        for (T value : values) {, +          ParameterHandler.this.apply(builder, value);, +        }, +      }, +    };, +  }, +, +  final ParameterHandler<Object> array() {, +    return new ParameterHandler<Object>() {, +      @Override void apply(RequestBuilder builder, Object values) throws IOException {, +        if (values == null) return; // Skip null values., +, +        for (int i = 0, size = Array.getLength(values); i < size; i++) {, +          //noinspection unchecked, +          ParameterHandler.this.apply(builder, (T) Array.get(values, i));, +        }, +      }, +    };, +  }, +, +  static final class StringUrl extends ParameterHandler<String> {, +    @Override void apply(RequestBuilder builder, String value) {, +      builder.setRelativeUrl(value);, +    }, +  }, +, +  static final class JavaUriUrl extends ParameterHandler<URI> {, +    @Override void apply(RequestBuilder builder, URI value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +  static final class AndroidUriUrl extends ParameterHandler<Uri> {, +    @Override void apply(RequestBuilder builder, Uri value) {]
[+++ b/.travis.yml, +language: java, +, +branches:, +  except:, +    - gh-pages, +, +notifications:, +  email: false, +, +before_install:, +  - wget http://dl.google.com/android/android-sdk_r20.0.3-linux.tgz, +  - tar -zxf android-sdk_r20.0.3-linux.tgz, +  - export ANDROID_HOME=~/builds/square/retrofit/android-sdk-linux, +  - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools, +  - android update sdk --filter 1,3 --no-ui --force]
[+++ b/pom.xml, +    <okhttp.version>3.1.0</okhttp.version>]
[+++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder().url("http://localhost").build();, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder().url("http://localhost").build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +import java.io.FileNotFoundException;, +import retrofit2.Retrofit;, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder().url("http://localhost").build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +import java.io.FileNotFoundException;, +import retrofit2.Retrofit;, +++ b/retrofit/src/main/java/retrofit2/CompletableFutureCallAdapterFactory.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.util.concurrent.CompletableFuture;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Java 8 futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link CompletableFuture} from, + * service methods., + * <pre><code>, + * interface MyService {, + *   &#64;GET("user/me"), + *   CompletableFuture&lt;User&gt; getUser(), + * }, + * </code></pre>, + * There are two configurations supported for the {@code CompletableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code CompletableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, + * <li>Response wrapped body (e.g., {@code CompletableFuture<Response<User>>}) returns a, + * {@link Response} object for all HTTP responses and sets {@link IOException} for network]
[+++ b/pom.xml, +    <gson.version>2.2.3</gson.version>]
[+++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +  T convert(F value) throws IOException;, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +  T convert(F value) throws IOException;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final MediaType contentType;, +    NoContentResponseBody(MediaType contentType, long contentLength) {, +    IOException thrownException;, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +  T convert(F value) throws IOException;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final MediaType contentType;, +    NoContentResponseBody(MediaType contentType, long contentLength) {, +    IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +  T convert(F value) throws IOException;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final MediaType contentType;, +    NoContentResponseBody(MediaType contentType, long contentLength) {, +    IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +  T convert(F value) throws IOException;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final MediaType contentType;, +    NoContentResponseBody(MediaType contentType, long contentLength) {, +    IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +    private HttpUrl baseUrl;, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +  T convert(F value) throws IOException;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final MediaType contentType;, +    NoContentResponseBody(MediaType contentType, long contentLength) {, +    IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +    private HttpUrl baseUrl;, +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, +  private final Serializer serializer;, +++ b/pom.xml, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, +  private final Serializer serializer;, +++ b/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java]
[+++ b/pom.xml, +    <okhttp.version>3.8.0</okhttp.version>, +    <gson.version>2.7</gson.version>, +    <moshi.version>1.4.0</moshi.version>, +++ b/pom.xml, +    <okhttp.version>3.8.0</okhttp.version>, +    <gson.version>2.7</gson.version>, +    <moshi.version>1.4.0</moshi.version>, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import javax.annotation.concurrent.GuardedBy;, +  @GuardedBy("this"), +  private boolean executed;]
[+++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, +    HttpResponse apacheResponse = client.execute(apacheRequest);, +++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, +    HttpResponse apacheResponse = client.execute(apacheRequest);, +++ b/samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>samples</artifactId>, +    <version>1.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>sample-github-client</artifactId>, +  <name>Sample: GitHub Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, +    HttpResponse apacheResponse = client.execute(apacheRequest);, +++ b/samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>samples</artifactId>, +    <version>1.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>sample-github-client</artifactId>, +  <name>Sample: GitHub Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/samples/github-client/src/main/java/com/squareup/retrofit/sample/github/Client.java, +// Copyright 2012 Square, Inc., +package com.squareup.retrofit.sample.github;, +, +import java.util.List;, +import retrofit.http.GET;, +import retrofit.http.Name;, +import retrofit.http.RestAdapter;, +, +public class Client {, +  private static final String API_URL = "https://api.github.com";, +, +  class Contributor {, +    String login;, +    int contributions;, +  }, +, +  interface GitHub {, +    @GET("/repos/{owner}/{repo}/contributors"), +    List<Contributor> contributors(, +        @Name("owner") String owner,, +        @Name("repo") String repo, +    );, +  }, +, +  public static void main(String... args) {, +    // Create a very simple REST adapter which points the GitHub API endpoint., +    RestAdapter restAdapter = new RestAdapter.Builder(), +        .setServer(API_URL), +        .build();, +, +    // Create an instance of our GitHub API interface., +    GitHub github = restAdapter.create(GitHub.class);, +, +    // Fetch and print a list of the contributors to this library., +    List<Contributor> contributors = github.contributors("square", "retrofit");, +    for (Contributor contributor : contributors) {, +      System.out.println(contributor.login + " (" + contributor.contributions + ")");, +    }, +  }, +}, +++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java]
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/pom.xml, +++ b/retrofit/src/main/java/retrofit/Callback.java, + * Communicates responses from a server or offline requests. One and only one method will be, + * invoked in response to a given request., + * <p>, + * Callback methods are executed using the {@link RestAdapter} callback executor. When none is, + * specified, the following defaults are used:, + * <ul>, + * <li>Android: Callbacks are executed on the application's main (UI) thread.</li>, + * <li>JVM: Callbacks are executed on the background thread which performed the request.</li>, + * </ul>, + * @see RestAdapter.Builder#setExecutors]
[+++ b/retrofit/src/main/java/retrofit2/Response.java, +import okhttp3.Request;, +        .request(new Request.Builder().url("http://localhost").build()), +        .request(new Request.Builder().url("http://localhost").build())]
[+++ b/pom.xml, +, +        <!-- Snapshot Repository URL (override in ~/.m2/settings.xml profile) -->, +        <snapshot.repo.id>example-nexus</snapshot.repo.id>, +        <snapshot.repo.url>http://example.com/snapshots</snapshot.repo.url>, +, +    <distributionManagement>, +        <snapshotRepository>, +            <id>${snapshot.repo.id}</id>, +            <url>${snapshot.repo.url}</url>, +        </snapshotRepository>, +    </distributionManagement>]
[+++ b/checkstyle.xml, +        <!--module name="ParameterNumber"/-->, +++ b/checkstyle.xml, +        <!--module name="ParameterNumber"/-->, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, +// Copyright 2012 Square, Inc., +  /** Successful HTTP response. */, +  void success(T t);, +   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected, +   * exception., +  void failure(RetrofitError error);, +++ b/checkstyle.xml, +        <!--module name="ParameterNumber"/-->, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, +// Copyright 2012 Square, Inc., +  /** Successful HTTP response. */, +  void success(T t);, +   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected, +   * exception., +  void failure(RetrofitError error);, +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, +          callback.success((T) response);, +    } catch (final RetrofitError e) {, +          callback.failure(e);, +++ b/checkstyle.xml, +        <!--module name="ParameterNumber"/-->, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, +// Copyright 2012 Square, Inc., +  /** Successful HTTP response. */, +  void success(T t);, +   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected, +   * exception., +  void failure(RetrofitError error);, +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, +          callback.success((T) response);, +    } catch (final RetrofitError e) {, +          callback.failure(e);, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +/** Represents an HTTP header name/value pair. */, +public final class Header {, +  private final String name;, +  private final String value;, +, +  Header(String name, String value) {, +    this.name = name;, +    this.value = value;, +  }, +, +  public String getName() {, +    return name;, +  }, +, +  public String getValue() {, +    return value;, +  }, +, +  @Override public boolean equals(Object o) {, +    if (this == o) return true;, +    if (o == null || getClass() != o.getClass()) return false;, +, +    Header header = (Header) o;, +, +    if (name != null ? !name.equals(header.name) : header.name != null) return false;, +    if (value != null ? !value.equals(header.value) : header.value != null) return false;, +, +    return true;, +  }, +, +  @Override public int hashCode() {, +    int result = name != null ? name.hashCode() : 0;, +    result = 31 * result + (value != null ? value.hashCode() : 0);, +    return result;, +  }, +, +  @Override public String toString() {, +    return (name != null ? name : "") + ": " + (value != null ? value : "");, +  }, +}, +++ b/checkstyle.xml, +        <!--module name="ParameterNumber"/-->, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, +// Copyright 2012 Square, Inc., +  /** Successful HTTP response. */, +  void success(T t);, +   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected, +   * exception., +  void failure(RetrofitError error);, +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, +          callback.success((T) response);, +    } catch (final RetrofitError e) {, +          callback.failure(e);, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +/** Represents an HTTP header name/value pair. */, +public final class Header {]
[+++ b/.gitignore, +.idea, +*.iml, +classes, +++ b/.gitignore, +.idea, +*.iml, +classes, +++ b/android/pom.xml, +, +    <build>, +        <plugins>, +            <plugin>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-checkstyle-plugin</artifactId>, +                <configuration>, +                    <configLocation>../checkstyle.xml</configLocation>, +                </configuration>, +                <executions>, +                    <execution>, +                        <phase>verify</phase>, +                        <goals>, +                            <goal>checkstyle</goal>, +                        </goals>, +                    </execution>, +                </executions>, +            </plugin>, +        </plugins>, +    </build>, +++ b/.gitignore, +.idea, +*.iml, +classes, +++ b/android/pom.xml, +, +    <build>, +        <plugins>, +            <plugin>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-checkstyle-plugin</artifactId>, +                <configuration>, +                    <configLocation>../checkstyle.xml</configLocation>, +                </configuration>, +                <executions>, +                    <execution>, +                        <phase>verify</phase>, +                        <goals>, +                            <goal>checkstyle</goal>, +                        </goals>, +                    </execution>, +                </executions>, +            </plugin>, +        </plugins>, +    </build>, +++ b/android/src/main/java/retrofit/android/ShakeDetector.java, +      while (sampleCount >= MIN_QUEUE_SIZE, +          && oldest != null && cutoff - oldest.timestamp > 0) {, +++ b/.gitignore, +.idea, +*.iml, +classes, +++ b/android/pom.xml, +, +    <build>, +        <plugins>, +            <plugin>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-checkstyle-plugin</artifactId>, +                <configuration>, +                    <configLocation>../checkstyle.xml</configLocation>, +                </configuration>, +                <executions>, +                    <execution>, +                        <phase>verify</phase>, +                        <goals>, +                            <goal>checkstyle</goal>, +                        </goals>, +                    </execution>, +                </executions>, +            </plugin>, +        </plugins>, +    </build>, +++ b/android/src/main/java/retrofit/android/ShakeDetector.java, +      while (sampleCount >= MIN_QUEUE_SIZE, +          && oldest != null && cutoff - oldest.timestamp > 0) {, +++ b/android/src/main/java/retrofit/io/QueueFile.java, +  private static final Logger LOGGER =, +    first = Element.NULL;, +    last = Element.NULL;, +      LOGGER.log(Level.WARNING, "read error", e);, +    void read(InputStream in, int length) throws IOException;, +++ b/.gitignore, +.idea, +*.iml, +classes, +++ b/android/pom.xml, +, +    <build>, +        <plugins>, +            <plugin>]
[+++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0</version>, +++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0</version>, +++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0</version>, +++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.0</version>, +++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.4.0</version>, +++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.4.0</version>, +++ b/pom.xml, +  <version>2.4.0</version>, +    <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.4.0</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.4.0</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <okhttp.version>3.5.0</okhttp.version>]
[+++ b/pom.xml, +    <jackson.version>2.8.0</jackson.version>]
[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      MediaType type = MediaType.parse(value);, +      if (type == null) {, +        throw new IllegalArgumentException("Malformed content type: " + value);, +      }, +      contentType = type;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      MediaType type = MediaType.parse(value);, +      if (type == null) {, +        throw new IllegalArgumentException("Malformed content type: " + value);, +      }, +      contentType = type;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +          MediaType type = MediaType.parse(headerValue);, +          if (type == null) {, +            throw methodError("Malformed content type: %s", headerValue);, +          }, +          contentType = type;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      MediaType type = MediaType.parse(value);, +      if (type == null) {, +        throw new IllegalArgumentException("Malformed content type: " + value);, +      }, +      contentType = type;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +          MediaType type = MediaType.parse(headerValue);, +          if (type == null) {, +            throw methodError("Malformed content type: %s", headerValue);, +          }, +          contentType = type;, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +  @Test public void malformedContentTypeHeaderThrows() {, +    class Example {, +      @POST("/") //, +      @Headers("Content-Type: hello, world!") //, +      Call<ResponseBody> method(@Body RequestBody body) {, +        return null;, +      }, +    }, +    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");, +    try {, +      buildRequest(Example.class, body);, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("Malformed content type: hello, world!\n", +          + "    for method Example.method");, +    }, +  }, +, +  @Test public void malformedContentTypeParameterThrows() {, +    class Example {, +      @POST("/") //, +      Call<ResponseBody> method(@Header("Content-Type") String contentType, @Body RequestBody body) {, +        return null;, +      }, +    }, +    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");, +    try {, +      buildRequest(Example.class, "hello, world!", body);, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("Malformed content type: hello, world!");, +    }, +  }, +]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/http/MultipartTypedOutput.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.UUID;, +import retrofit.http.mime.TypedFile;, +  final Map<String, TypedOutput> parts = new LinkedHashMap<String, TypedOutput>();, +  private final String boundary;, +, +  MultipartTypedOutput() {, +    boundary = UUID.randomUUID().toString();, +  }, +    if (name == null) {, +      throw new NullPointerException("Part name must not be null.");, +    }, +    if (body == null) {, +      throw new NullPointerException("Part body must not be null.");, +    }, +    parts.put(name, body);, +    return "multipart/form-data; boundary=" + boundary;, +    return -1;, +    boolean first = true;, +    for (Map.Entry<String, TypedOutput> part : parts.entrySet()) {, +      writeBoundary(out, boundary, first, false);, +      writePart(out, part);, +      first = false;, +    }, +    writeBoundary(out, boundary, false, true);, +  private static void writeBoundary(OutputStream out, String boundary, boolean first, boolean last), +      throws IOException {, +    StringBuilder sb = new StringBuilder();, +    if (!first) {, +      sb.append("\r\n");, +    }, +    sb.append("--");, +    sb.append(boundary);, +    if (last) {, +      sb.append("--");, +    } else {, +      sb.append("\r\n");, +    }, +    out.write(sb.toString().getBytes("UTF-8"));, +  private static void writePart(OutputStream out, Map.Entry<String, TypedOutput> part), +      throws IOException {, +    String name = part.getKey();, +    TypedOutput value = part.getValue();, +    StringBuilder headers = new StringBuilder();, +    headers.append("Content-Disposition: form-data; name=\"");, +    headers.append(name);, +    if (value instanceof TypedFile) {, +      headers.append("; filename=\"");, +      headers.append(((TypedFile) value).file().getName());, +    headers.append("\"\r\nContent-Type: ");, +    headers.append(value.mimeType());, +    headers.append("\r\nContent-Transfer-Encoding: binary\r\n\r\n");, +    out.write(headers.toString().getBytes("UTF-8"));, +    value.writeTo(out);, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/http/MultipartTypedOutput.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.UUID;, +import retrofit.http.mime.TypedFile;, +  final Map<String, TypedOutput> parts = new LinkedHashMap<String, TypedOutput>();, +  private final String boundary;, +, +  MultipartTypedOutput() {, +    boundary = UUID.randomUUID().toString();, +  }, +    if (name == null) {, +      throw new NullPointerException("Part name must not be null.");, +    }, +    if (body == null) {, +      throw new NullPointerException("Part body must not be null.");, +    }, +    parts.put(name, body);, +    return "multipart/form-data; boundary=" + boundary;, +    return -1;, +    boolean first = true;, +    for (Map.Entry<String, TypedOutput> part : parts.entrySet()) {, +      writeBoundary(out, boundary, first, false);, +      writePart(out, part);, +      first = false;, +    }, +    writeBoundary(out, boundary, false, true);, +  private static void writeBoundary(OutputStream out, String boundary, boolean first, boolean last), +      throws IOException {, +    StringBuilder sb = new StringBuilder();, +    if (!first) {, +      sb.append("\r\n");, +    }, +    sb.append("--");, +    sb.append(boundary);, +    if (last) {, +      sb.append("--");]
[+++ b/pom.xml, +    <wire.version>2.1.0</wire.version>, +++ b/pom.xml, +    <wire.version>2.1.0</wire.version>, +++ b/retrofit-converters/wire/src/test/java/retrofit2/Phone.java, +// Source file: phone.proto at 6:1, +import com.squareup.wire.WireField;, +import com.squareup.wire.internal.Internal;, +  public static final ProtoAdapter<Phone> ADAPTER = new ProtoAdapter_Phone();, +, +  private static final long serialVersionUID = 0L;, +, +  public static final String DEFAULT_NUMBER = "";, +, +  @WireField(, +      tag = 1,, +      adapter = "com.squareup.wire.ProtoAdapter#STRING", +  ), +  public final String number;, +, +  public Phone(String number) {, +    this(number, ByteString.EMPTY);, +  }, +, +  public Phone(String number, ByteString unknownFields) {, +    super(ADAPTER, unknownFields);, +    this.number = number;, +  }, +, +  @Override, +  public Builder newBuilder() {, +    Builder builder = new Builder();, +    builder.number = number;, +    builder.addUnknownFields(unknownFields());, +    return builder;, +  }, +, +  @Override, +  public boolean equals(Object other) {, +    if (other == this) return true;, +    if (!(other instanceof Phone)) return false;, +    Phone o = (Phone) other;, +    return Internal.equals(unknownFields(), o.unknownFields()), +        && Internal.equals(number, o.number);, +  }, +, +  @Override, +  public int hashCode() {, +    int result = super.hashCode;, +    if (result == 0) {, +      result = unknownFields().hashCode();, +      result = result * 37 + (number != null ? number.hashCode() : 0);, +      super.hashCode = result;, +    }, +    return result;, +  }, +, +  @Override, +  public String toString() {, +    StringBuilder builder = new StringBuilder();, +    if (number != null) builder.append(", number=").append(number);, +    return builder.replace(0, 2, "Phone{").append('}').toString();, +  }, +, +  public static final class Builder extends Message.Builder<Phone, Builder> {, +    public String number;, +, +    public Builder() {, +    }, +, +    public Builder number(String number) {, +      this.number = number;, +      return this;, +    }, +, +    @Override, +    public Phone build() {, +      return new Phone(number, buildUnknownFields());, +    }, +  }, +, +  private static final class ProtoAdapter_Phone extends ProtoAdapter<Phone> {, +    ProtoAdapter_Phone() {, +      super(FieldEncoding.LENGTH_DELIMITED, Phone.class);, +    }, +]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-mock/src/test/java/retrofit2/mock/MockRetrofitTest.java, +    } catch (IOException e) {, +      assertThat(e).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, +    assertThat(failureRef.get()).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, +    } catch (IOException e) {, +      assertThat(e).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, +    assertThat(failureRef.get()).isExactlyInstanceOf(IOException.class).hasMessage("canceled");]
[+++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "text/plain; charset=UTF-8");, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "multipart/form-data; boundary=foobarbaz");, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +, +    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");, +    assertThat(response.getStatus()).isEqualTo(200);, +    assertThat(response.getReason()).isEqualTo("");, +    assertThat(response.getHeaders()).hasSize(3) //, +        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"),, +            new Header("Content-Type", "text/plain"));, +    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");, +, +    verifyNoMoreInteractions(creatingRequest);, +  }, +, +  @Test public void responseNullUrlPullsFromRequest() throws Exception {, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +    when(creatingRequest.getURL()).thenReturn(new URL(HOST + "/foo/bar/"));, +, +    HTTPResponse fetchResponse = mock(HTTPResponse.class);, +    when(fetchResponse.getHeaders()).thenReturn(, +        asList(new HTTPHeader("foo", "bar"), new HTTPHeader("kit", "kat"),, +            new HTTPHeader("Content-Type", "text/plain")));, +    when(fetchResponse.getContent()).thenReturn("hello".getBytes("UTF-8"));, +    when(fetchResponse.getFinalUrl()).thenReturn(null);, +    when(fetchResponse.getResponseCode()).thenReturn(200);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +, +    verifyNoMoreInteractions(creatingRequest);, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {]
[+++ b/pom.xml, +    <okhttp.version>3.8.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>3.8.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit2/Response.java, +        .message("Response.error()"), +++ b/pom.xml, +    <okhttp.version>3.8.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit2/Response.java, +        .message("Response.error()"), +++ b/retrofit/src/test/java/retrofit2/ResponseTest.java, +    assertThat(response.message()).isEqualTo("Response.error()");]
[+++ b/pom.xml, +    <rxjava.version>1.0.10</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>1.0.10</rxjava.version>, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/ObservableBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.mock;, +, +import rx.Observable;, +import rx.functions.Func1;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +public final class ObservableBehaviorAdapter implements BehaviorAdapter<Observable<?>> {, +  public static ObservableBehaviorAdapter create() {, +    return new ObservableBehaviorAdapter();, +  }, +, +  private ObservableBehaviorAdapter() {, +  }, +, +  @Override public Observable<?> applyBehavior(final Behavior behavior, final Observable<?> value) {, +    return Observable.timer(behavior.calculateDelay(MILLISECONDS), MILLISECONDS), +        .flatMap(new Func1<Long, Observable<?>>() {, +          @Override public Observable<?> call(Long ignored) {, +            if (behavior.calculateIsFailure()) {, +              return Observable.error(behavior.failureException());, +            }, +            return value;, +          }, +        });, +  }, +}, +++ b/pom.xml, +    <rxjava.version>1.0.10</rxjava.version>, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/ObservableBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.mock;, +, +import rx.Observable;, +import rx.functions.Func1;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +public final class ObservableBehaviorAdapter implements BehaviorAdapter<Observable<?>> {, +  public static ObservableBehaviorAdapter create() {, +    return new ObservableBehaviorAdapter();, +  }, +, +  private ObservableBehaviorAdapter() {, +  }, +, +  @Override public Observable<?> applyBehavior(final Behavior behavior, final Observable<?> value) {, +    return Observable.timer(behavior.calculateDelay(MILLISECONDS), MILLISECONDS), +        .flatMap(new Func1<Long, Observable<?>>() {, +          @Override public Observable<?> call(Long ignored) {, +            if (behavior.calculateIsFailure()) {, +              return Observable.error(behavior.failureException());, +            }, +            return value;, +          }, +        });, +  }, +}, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.0.10</rxjava.version>, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/ObservableBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");]
[+++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  Converter<?> responseConverter;, +    parseResponseType();, +  /** Loads {@link #adapter} and {@link #responseConverter}. */, +    this.adapter = adapter;, +, +    if (responseType == ResponseBody.class) {, +      responseConverter = new OkHttpResponseBodyConverter(isStreaming);, +    } else {, +      if (converterFactory == null) {, +      responseConverter = converterFactory.get(responseType);, +    }, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  Converter<?> responseConverter;, +    parseResponseType();, +  /** Loads {@link #adapter} and {@link #responseConverter}. */, +    this.adapter = adapter;, +, +    if (responseType == ResponseBody.class) {, +      responseConverter = new OkHttpResponseBodyConverter(isStreaming);, +    } else {, +      if (converterFactory == null) {, +      responseConverter = converterFactory.get(responseType);, +    }, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  private final Endpoint endpoint;, +  private final Converter<T> responseConverter;, +  OkHttpCall(OkHttpClient client, Endpoint endpoint, Converter<T> responseConverter,, +    this.endpoint = endpoint;, +    this.responseConverter = responseConverter;, +    return new OkHttpCall<>(client, endpoint, responseConverter, methodInfo, args);, +    RequestBuilder requestBuilder = new RequestBuilder(url, methodInfo);, +      T body = responseConverter.fromBody(catchingBody);, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  Converter<?> responseConverter;, +    parseResponseType();, +  /** Loads {@link #adapter} and {@link #responseConverter}. */, +    this.adapter = adapter;, +, +    if (responseType == ResponseBody.class) {, +      responseConverter = new OkHttpResponseBodyConverter(isStreaming);, +    } else {, +      if (converterFactory == null) {, +      responseConverter = converterFactory.get(responseType);, +    }, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  private final Endpoint endpoint;, +  private final Converter<T> responseConverter;, +  OkHttpCall(OkHttpClient client, Endpoint endpoint, Converter<T> responseConverter,, +    this.endpoint = endpoint;, +    this.responseConverter = responseConverter;, +    return new OkHttpCall<>(client, endpoint, responseConverter, methodInfo, args);, +    RequestBuilder requestBuilder = new RequestBuilder(url, methodInfo);, +      T body = responseConverter.fromBody(catchingBody);, +++ b/retrofit/src/main/java/retrofit/OkHttpResponseBodyConverter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.RequestBody;]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, Class<T> service) {, +    final Call<?> behaviorCall =, +        new BehaviorCall<>(behavior, retrofit.client().getDispatcher().getExecutorService(), call);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, Class<T> service) {, +    final Call<?> behaviorCall =, +        new BehaviorCall<>(behavior, retrofit.client().getDispatcher().getExecutorService(), call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +  public static MockRetrofit create(Retrofit retrofit) {, +    return create(retrofit, NetworkBehavior.create());, +  }, +, +  public static MockRetrofit create(Retrofit retrofit, NetworkBehavior behavior) {, +    return new MockRetrofit(retrofit, behavior);, +  }, +, +  public MockRetrofit(Retrofit retrofit, NetworkBehavior behavior) {, +    return new BehaviorDelegate<>(retrofit, behavior, service);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, Class<T> service) {, +    final Call<?> behaviorCall =, +        new BehaviorCall<>(behavior, retrofit.client().getDispatcher().getExecutorService(), call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +  public static MockRetrofit create(Retrofit retrofit) {, +    return create(retrofit, NetworkBehavior.create());, +  }, +, +  public static MockRetrofit create(Retrofit retrofit, NetworkBehavior behavior) {, +    return new MockRetrofit(retrofit, behavior);, +  }, +, +  public MockRetrofit(Retrofit retrofit, NetworkBehavior behavior) {, +    return new BehaviorDelegate<>(retrofit, behavior, service);, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");]
[+++ b/pom.xml, +    <okhttp.version>2.2.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>2.2.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +        MediaType mediaType = body.contentType();, +        return mediaType == null ? null : mediaType.toString();, +++ b/pom.xml, +    <okhttp.version>2.2.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +        MediaType mediaType = body.contentType();, +        return mediaType == null ? null : mediaType.toString();, +++ b/retrofit/src/test/java/retrofit/client/OkClientTest.java, +  @Test public void responseNoContentType() throws IOException {, +    com.squareup.okhttp.Response okResponse = new com.squareup.okhttp.Response.Builder(), +        .code(200).message("OK"), +        .body(new TestResponseBody("hello", null)), +        .addHeader("foo", "bar"), +        .addHeader("kit", "kat"), +        .protocol(Protocol.HTTP_1_1), +        .request(new com.squareup.okhttp.Request.Builder(), +            .url(HOST + "/foo/bar/"), +            .get(), +            .build()), +        .build();, +    Response response = OkClient.parseResponse(okResponse);, +, +    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");, +    assertThat(response.getStatus()).isEqualTo(200);, +    assertThat(response.getReason()).isEqualTo("OK");, +    assertThat(response.getHeaders()) //, +        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"));, +    TypedInput responseBody = response.getBody();, +    assertThat(responseBody.mimeType()).isNull();, +    assertBytes(ByteStreams.toByteArray(responseBody.in()), "hello");, +  }, +]
[+++ b/pom.xml, +    <wire.version>1.0.1-SNAPSHOT</wire.version>, +++ b/pom.xml, +    <wire.version>1.0.1-SNAPSHOT</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, +      return wire.parseFrom(body.in(), (Class<Message>) c);]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import retrofit2.Response;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +import rx.exceptions.CompositeException;, +import rx.exceptions.Exceptions;, +import rx.plugins.RxJavaPlugins;, +, +final class BodyOnSubscribe<T> implements OnSubscribe<T> {, +  private final OnSubscribe<Response<T>> upstream;, +, +  BodyOnSubscribe(OnSubscribe<Response<T>> upstream) {, +    this.upstream = upstream;, +  }, +, +  @Override public void call(Subscriber<? super T> subscriber) {, +    upstream.call(new BodySubscriber<>(subscriber));, +  }, +, +  private static class BodySubscriber<R> extends Subscriber<Response<R>> {, +    private final Subscriber<? super R> subscriber;, +    /** Indicates whether a terminal event has been sent to {@link #subscriber}. */, +    private boolean subscriberTerminated;, +, +    BodySubscriber(Subscriber<? super R> subscriber) {, +      super(subscriber);, +      this.subscriber = subscriber;, +    }, +, +    @Override public void onNext(Response<R> response) {, +      if (response.isSuccessful()) {, +        subscriber.onNext(response.body());, +      } else {, +        subscriberTerminated = true;, +        Throwable t = new HttpException(response);, +        try {, +          subscriber.onError(t);, +        } catch (Throwable inner) {, +          Exceptions.throwIfFatal(inner);, +          CompositeException composite = new CompositeException(t, inner);, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +        }, +      }, +    }, +, +    @Override public void onError(Throwable throwable) {, +      if (!subscriberTerminated) {, +        subscriber.onError(throwable);, +      } else {, +        // This should never happen! onNext handles and forwards errors automatically., +        Throwable broken = new AssertionError(, +            "This should never happen! Report as a Retrofit bug with the full stacktrace.");, +        //noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only., +        broken.initCause(throwable);, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(broken);, +      }, +    }, +, +    @Override public void onCompleted() {, +      if (!subscriberTerminated) {, +        subscriber.onCompleted();, +      }, +    }, +  }, +}, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]
[+++ b/pom.xml, +    <module>samples</module>, +++ b/pom.xml, +    <module>samples</module>, +++ /dev/null, +++ b/pom.xml, +    <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit.samples</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.7.1-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>github-client</artifactId>, +  <name>Sample: GitHub Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit.samples</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.7.1-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>github-client</artifactId>, +  <name>Sample: GitHub Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software]
[+++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.2.3-SNAPSHOT</version>]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.atomic.AtomicInteger;, +import retrofit2.Call;, +import retrofit2.Response;, +import rx.Producer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.exceptions.CompositeException;, +import rx.exceptions.Exceptions;, +import rx.plugins.RxJavaPlugins;, +, +final class CallArbiter<T> extends AtomicInteger implements Subscription, Producer {, +  private static final int STATE_WAITING = 0;, +  private static final int STATE_REQUESTED = 1;, +  private static final int STATE_HAS_RESPONSE = 2;, +  private static final int STATE_TERMINATED = 3;, +, +  private final Call<T> call;, +  private final Subscriber<? super Response<T>> subscriber;, +, +  private volatile Response<T> response;, +, +  CallArbiter(Call<T> call, Subscriber<? super Response<T>> subscriber) {, +    super(STATE_WAITING);, +, +    this.call = call;, +    this.subscriber = subscriber;, +  }, +, +  @Override public void unsubscribe() {, +    call.cancel();, +  }, +, +  @Override public boolean isUnsubscribed() {, +    return call.isCanceled();, +  }, +, +  @Override public void request(long amount) {, +    if (amount == 0) {, +      return;, +    }, +    while (true) {, +      int state = get();, +      switch (state) {, +        case STATE_WAITING:, +          if (compareAndSet(STATE_WAITING, STATE_REQUESTED)) {, +            return;, +          }, +          break; // State transition failed. Try again., +, +        case STATE_HAS_RESPONSE:, +          if (compareAndSet(STATE_HAS_RESPONSE, STATE_TERMINATED)) {, +            deliverResponse(response);, +            return;, +          }, +          break; // State transition failed. Try again., +, +        case STATE_REQUESTED:, +        case STATE_TERMINATED:, +          return; // Nothing to do., +, +        default:, +          throw new IllegalStateException("Unknown state: " + state);, +      }, +    }, +  }, +, +  void emitResponse(Response<T> response) {, +    while (true) {, +      int state = get();, +      switch (state) {, +        case STATE_WAITING:, +          this.response = response;, +          if (compareAndSet(STATE_WAITING, STATE_HAS_RESPONSE)) {, +            return;, +          }, +          break; // State transition failed. Try again., +, +        case STATE_REQUESTED:, +          if (compareAndSet(STATE_REQUESTED, STATE_TERMINATED)) {, +            deliverResponse(response);, +            return;, +          }]
[+++ b/CHANGELOG.md, +Version 2.2.0 *(2017-02-21)*, +----------------------------, +, + * RxJava 2.x is now supported with a first-party 'adapter-rxjava2' artifact., + * New: `@QueryName` annotation allows creating a query parameter with no '=' separator or value., + * New: Support for messages generated by Protobuf 3.0 or newer when using the converter for Google's, +   protobuf., + * New: RxJava 1.x call adapter now correctly handles broken subscribers whose methods throw exceptions., + * New: Add `toString()` implementations for `Response` and `Result`., + * New: The Moshi converter factory now offers methods for enabling null serialization and lenient, +   parsing., + * New: Add `createAsync()` to RxJava 1.x call adapter factory which executes requests using, +   `Call.enqueue()` using the underlying HTTP client's asynchronous support., + * New: `NetworkBehavior` now allows setting an error percentage and returns HTTP errors when triggered., + * `HttpException` has been moved into the main artifact and should be used instead of the versions, +   embedded in each adapter (which have been deprecated)., + * Promote the response body generic type on `CallAdapter` from the `adapt` method to the enclosing, +   class. This is a source-incompatible but binary-compatible change which is only relevant if you are, +   implementing your own `CallAdapter`s., + * Remove explicit handling of the now-defunct RoboVM platform., + * Fix: Close response on HTTP 204 and 205 to avoid resource leak., + * Fix: Reflect the canceled state of the HTTP client's `Call` in Retrofit's `Call`., + * Fix: Use supplied string converters for the `String` type on non-body parameters. This allows user, +   converters to handle cases such as when annotating string parameters instead of them always using, +   the raw string., + * Fix: Skip a UTF-8 BOM (if present) when using the converter for Moshi., +, +, +++ b/CHANGELOG.md, +Version 2.2.0 *(2017-02-21)*, +----------------------------, +, + * RxJava 2.x is now supported with a first-party 'adapter-rxjava2' artifact., + * New: `@QueryName` annotation allows creating a query parameter with no '=' separator or value., + * New: Support for messages generated by Protobuf 3.0 or newer when using the converter for Google's, +   protobuf., + * New: RxJava 1.x call adapter now correctly handles broken subscribers whose methods throw exceptions., + * New: Add `toString()` implementations for `Response` and `Result`., + * New: The Moshi converter factory now offers methods for enabling null serialization and lenient, +   parsing., + * New: Add `createAsync()` to RxJava 1.x call adapter factory which executes requests using, +   `Call.enqueue()` using the underlying HTTP client's asynchronous support., + * New: `NetworkBehavior` now allows setting an error percentage and returns HTTP errors when triggered., + * `HttpException` has been moved into the main artifact and should be used instead of the versions, +   embedded in each adapter (which have been deprecated)., + * Promote the response body generic type on `CallAdapter` from the `adapt` method to the enclosing, +   class. This is a source-incompatible but binary-compatible change which is only relevant if you are, +   implementing your own `CallAdapter`s., + * Remove explicit handling of the now-defunct RoboVM platform., + * Fix: Close response on HTTP 204 and 205 to avoid resource leak., + * Fix: Reflect the canceled state of the HTTP client's `Call` in Retrofit's `Call`., + * Fix: Use supplied string converters for the `String` type on non-body parameters. This allows user, +   converters to handle cases such as when annotating string parameters instead of them always using, +   the raw string., + * Fix: Skip a UTF-8 BOM (if present) when using the converter for Moshi., +, +, +++ b/README.md, +  <version>2.2.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.2.0', +++ b/CHANGELOG.md, +Version 2.2.0 *(2017-02-21)*, +----------------------------, +, + * RxJava 2.x is now supported with a first-party 'adapter-rxjava2' artifact., + * New: `@QueryName` annotation allows creating a query parameter with no '=' separator or value., + * New: Support for messages generated by Protobuf 3.0 or newer when using the converter for Google's, +   protobuf., + * New: RxJava 1.x call adapter now correctly handles broken subscribers whose methods throw exceptions., + * New: Add `toString()` implementations for `Response` and `Result`., + * New: The Moshi converter factory now offers methods for enabling null serialization and lenient, +   parsing., + * New: Add `createAsync()` to RxJava 1.x call adapter factory which executes requests using, +   `Call.enqueue()` using the underlying HTTP client's asynchronous support., + * New: `NetworkBehavior` now allows setting an error percentage and returns HTTP errors when triggered., + * `HttpException` has been moved into the main artifact and should be used instead of the versions, +   embedded in each adapter (which have been deprecated)., + * Promote the response body generic type on `CallAdapter` from the `adapt` method to the enclosing, +   class. This is a source-incompatible but binary-compatible change which is only relevant if you are, +   implementing your own `CallAdapter`s., + * Remove explicit handling of the now-defunct RoboVM platform., + * Fix: Close response on HTTP 204 and 205 to avoid resource leak., + * Fix: Reflect the canceled state of the HTTP client's `Call` in Retrofit's `Call`., + * Fix: Use supplied string converters for the `String` type on non-body parameters. This allows user, +   converters to handle cases such as when annotating string parameters instead of them always using, +   the raw string., + * Fix: Skip a UTF-8 BOM (if present) when using the converter for Moshi., +, +, +++ b/README.md, +  <version>2.2.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.2.0', +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <moshi.version>1.4.0</moshi.version>, +          <version>3.6.1</version>, +            <compilerId>javac-with-errorprone</compilerId>, +            <forceJavacCompilerUse>true</forceJavacCompilerUse>, +          <dependencies>]
[+++ b/pom.xml, +    <!-- Sample Dependencies -->, +    <jsoup.version>1.7.3</jsoup.version>, +, +++ b/pom.xml, +    <!-- Sample Dependencies -->, +    <jsoup.version>1.7.3</jsoup.version>, +, +++ b/samples/pom.xml, +    <dependency>, +      <groupId>org.jsoup</groupId>, +      <artifactId>jsoup</artifactId>, +      <version>${jsoup.version}</version>, +    </dependency>, +++ b/pom.xml, +    <!-- Sample Dependencies -->, +    <jsoup.version>1.7.3</jsoup.version>, +, +++ b/samples/pom.xml, +    <dependency>, +      <groupId>org.jsoup</groupId>, +      <artifactId>jsoup</artifactId>, +      <version>${jsoup.version}</version>, +    </dependency>, +++ b/samples/src/main/java/com/example/retrofit/Crawler.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +import okhttp3.ConnectionPool;, +import okhttp3.Dispatcher;, +import okhttp3.HttpUrl;, +import okhttp3.OkHttpClient;, +import okhttp3.ResponseBody;, +import org.jsoup.Jsoup;, +import org.jsoup.nodes.Document;, +import org.jsoup.nodes.Element;, +import retrofit2.Call;, +import retrofit2.Callback;, +import retrofit2.Converter;, +import retrofit2.Response;, +import retrofit2.Retrofit;, +import retrofit2.http.GET;, +import retrofit2.http.Url;, +, +/** A simple web crawler that uses a Retrofit service to turn URLs into webpages. */, +public final class Crawler {, +  private final Set<HttpUrl> fetchedUrls = Collections.synchronizedSet(, +      new LinkedHashSet<HttpUrl>());, +  private final ConcurrentHashMap<String, AtomicInteger> hostnames = new ConcurrentHashMap<>();, +  private final PageService pageService;, +, +  public Crawler(PageService pageService) {, +    this.pageService = pageService;, +  }, +, +  public void crawlPage(HttpUrl url) {, +    // Skip hosts that we've visited many times., +    AtomicInteger hostnameCount = new AtomicInteger();, +    AtomicInteger previous = hostnames.putIfAbsent(url.host(), hostnameCount);, +    if (previous != null) hostnameCount = previous;, +    if (hostnameCount.incrementAndGet() > 100) return;, +, +    // Asynchronously visit URL., +    pageService.get(url).enqueue(new Callback<Page>() {, +      @Override public void onResponse(Call<Page> call, Response<Page> response) {, +        if (!response.isSuccessful()) {, +          System.out.println(call.request().url() + ": failed: " + response.code());, +          return;, +        }, +, +        // Print this page's URL and title., +        Page page = response.body();, +        HttpUrl base = response.raw().request().url();, +        System.out.println(base + ": " + page.title);]
[+++ b/retrofit/src/main/java/retrofit/http/Field.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Named pair for a form-encoded request., + *, + * <pre>, + * &#64;FormUrlEncoded, + * &#64;POST("/"), + * void example(@Field("name") String name, @Field("occupation") String occupation, ..);, + * }, + * </pre>, + */, +@Target(PARAMETER) @Retention(RUNTIME), +public @interface Field {, +  String value();, +}, +++ b/retrofit/src/main/java/retrofit/http/Field.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Named pair for a form-encoded request., + *, + * <pre>, + * &#64;FormUrlEncoded, + * &#64;POST("/"), + * void example(@Field("name") String name, @Field("occupation") String occupation, ..);, + * }, + * </pre>, + */, +@Target(PARAMETER) @Retention(RUNTIME), +public @interface Field {, +  String value();, +}, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Field.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Named pair for a form-encoded request., + *, + * <pre>, + * &#64;FormUrlEncoded, + * &#64;POST("/"), + * void example(@Field("name") String name, @Field("occupation") String occupation, ..);, + * }, + * </pre>, + */, +@Target(PARAMETER) @Retention(RUNTIME), +public @interface Field {, +  String value();, +}, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/FormUrlEncoded.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Denotes that the request body will use form URL encoding. Fields should be declared as, + * parameters and annotated with {@link Field @Field}., + * <p>, + * Requests made with this annotation will have {@code application/x-www-form-urlencoded} MIME, + * type. Field names and values will be UTF-8 encoded before being URI-encoded in accordance to, + * <a href="http://tools.ietf.org/html/rfc3986">RFC-3986</a>., + */, +@Target(METHOD) @Retention(RUNTIME), +public @interface FormUrlEncoded {, +}, +++ b/retrofit/src/main/java/retrofit/http/Field.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;]
[+++ b/pom.xml, +        <gson.version>2.1</gson.version>]
[+++ b/README.md, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, +        <dependency>, +          <groupId>com.squareup</groupId>, +          <artifactId>retrofit-http</artifactId>, +          <version>${project.version}</version>, +        </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java]
[+++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +        if (type == HttpUrl.class, +            || type == String.class, +            || type == URI.class, +            || (type instanceof Class && "android.net.Uri".equals(((Class<?>) type).getName()))) {, +          return new ParameterHandler.RelativeUrl();, +          throw parameterError(p,, +              "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.");, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +        if (type == HttpUrl.class, +            || type == String.class, +            || type == URI.class, +            || (type instanceof Class && "android.net.Uri".equals(((Class<?>) type).getName()))) {, +          return new ParameterHandler.RelativeUrl();, +          throw parameterError(p,, +              "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.");, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +import okhttp3.HttpUrl;, +  @Test public void getWithHttpUrl() {, +    class Example {, +      @GET, +      Call<ResponseBody> method(@Url HttpUrl url) {, +        return null;, +      }, +    }, +, +    Request request = buildRequest(Example.class, HttpUrl.parse("http://example.com/foo/bar/"));, +    assertThat(request.method()).isEqualTo("GET");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.url()).isEqualTo(HttpUrl.parse("http://example.com/foo/bar/"));, +    assertThat(request.body()).isNull();, +  }, +, +  @Test public void getWithNullUrl() {, +    class Example {, +      @GET, +      Call<ResponseBody> method(@Url HttpUrl url) {, +        return null;, +      }, +    }, +, +    try {, +      buildRequest(Example.class, (HttpUrl) null);, +      fail();, +    } catch (NullPointerException expected) {, +      assertThat(expected).hasMessage("@Url parameter is null.");, +    }, +  }, +, +          "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.", +              + " (parameter #1)\n"]
[+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +  static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, +  static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, +  static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, +  final okhttp3.Call.Factory callFactory;, +  final CallAdapter<?> callAdapter;, +  Request toRequest(Object... args) throws IOException {, +  T toResponse(ResponseBody body) throws IOException {, +  static Class<?> boxIfPrimitive(Class<?> type) {, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +  static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, +  static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, +  static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, +  final okhttp3.Call.Factory callFactory;, +  final CallAdapter<?> callAdapter;, +  Request toRequest(Object... args) throws IOException {, +  T toResponse(ResponseBody body) throws IOException {, +  static Class<?> boxIfPrimitive(Class<?> type) {, +++ b/retrofit/src/main/java/retrofit2/Utils.java, +  static final Type[] EMPTY_TYPE_ARRAY = new Type[0];, +  static int hashCodeOrZero(Object o) {, +  static void checkNotPrimitive(Type type) {]
[+++ b/pom.xml, +    <kotlin.version>1.2.60</kotlin.version>, +        <groupId>org.jetbrains.kotlin</groupId>, +        <artifactId>kotlin-stdlib</artifactId>, +        <version>${kotlin.version}</version>, +      </dependency>, +      <dependency>, +++ b/pom.xml, +    <kotlin.version>1.2.60</kotlin.version>, +        <groupId>org.jetbrains.kotlin</groupId>, +        <artifactId>kotlin-stdlib</artifactId>, +        <version>${kotlin.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.jetbrains.kotlin</groupId>, +      <artifactId>kotlin-stdlib</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/pom.xml, +    <kotlin.version>1.2.60</kotlin.version>, +        <groupId>org.jetbrains.kotlin</groupId>, +        <artifactId>kotlin-stdlib</artifactId>, +        <version>${kotlin.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.jetbrains.kotlin</groupId>, +      <artifactId>kotlin-stdlib</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +import kotlin.Unit;, +  /** Not volatile because we don't mind multiple threads discovering this. */, +  private boolean checkForKotlinUnit = true;, +, +    if (checkForKotlinUnit) {, +      try {, +        if (type == Unit.class) {, +          return UnitResponseBodyConverter.INSTANCE;, +        }, +      } catch (NoClassDefFoundError ignored) {, +        checkForKotlinUnit = false;, +      }, +    }, +  static final class UnitResponseBodyConverter implements Converter<ResponseBody, Unit> {, +    static final UnitResponseBodyConverter INSTANCE = new UnitResponseBodyConverter();, +, +    @Override public Unit convert(ResponseBody value) {, +      value.close();, +      return Unit.INSTANCE;, +    }, +  }, +, +++ b/pom.xml, +    <kotlin.version>1.2.60</kotlin.version>, +        <groupId>org.jetbrains.kotlin</groupId>, +        <artifactId>kotlin-stdlib</artifactId>, +        <version>${kotlin.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.jetbrains.kotlin</groupId>, +      <artifactId>kotlin-stdlib</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +import kotlin.Unit;, +  /** Not volatile because we don't mind multiple threads discovering this. */, +  private boolean checkForKotlinUnit = true;, +, +    if (checkForKotlinUnit) {, +      try {, +        if (type == Unit.class) {, +          return UnitResponseBodyConverter.INSTANCE;, +        }, +      } catch (NoClassDefFoundError ignored) {, +        checkForKotlinUnit = false;, +      }, +    }, +  static final class UnitResponseBodyConverter implements Converter<ResponseBody, Unit> {, +    static final UnitResponseBodyConverter INSTANCE = new UnitResponseBodyConverter();, +, +    @Override public Unit convert(ResponseBody value) {, +      value.close();, +      return Unit.INSTANCE;, +    }, +  }, +, +++ b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro, +, +# Guarded by a NoClassDefFoundError try/catch and only used when on the classpath., +-dontwarn kotlin.Unit, +++ b/pom.xml, +    <kotlin.version>1.2.60</kotlin.version>, +        <groupId>org.jetbrains.kotlin</groupId>, +        <artifactId>kotlin-stdlib</artifactId>]
[+++ b/pom.xml, +    <moshi.version>1.5.0</moshi.version>, +    <robolectric.version>3.8</robolectric.version>, +++ b/pom.xml, +    <moshi.version>1.5.0</moshi.version>, +    <robolectric.version>3.8</robolectric.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +      reader.nextName();, +      assertThat(e).hasMessage("Cannot skip unexpected STRING at $.taco");, +++ b/pom.xml, +    <moshi.version>1.5.0</moshi.version>, +    <robolectric.version>3.8</robolectric.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +      reader.nextName();, +      assertThat(e).hasMessage("Cannot skip unexpected STRING at $.taco");, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/pom.xml, +    <moshi.version>1.5.0</moshi.version>, +    <robolectric.version>3.8</robolectric.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +      reader.nextName();, +      assertThat(e).hasMessage("Cannot skip unexpected STRING at $.taco");, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/pom.xml, +    <moshi.version>1.5.0</moshi.version>, +    <robolectric.version>3.8</robolectric.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +      reader.nextName();, +      assertThat(e).hasMessage("Cannot skip unexpected STRING at $.taco");, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/RequestFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE)]
[+++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to replace `RequestHeaders`. An interceptor provided to the, +   `RestAdapter.Builder` will be called for every request and allow setting both headers and, +   additional path parameter replacements., +, +, +++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to replace `RequestHeaders`. An interceptor provided to the, +   `RestAdapter.Builder` will be called for every request and allow setting both headers and, +   additional path parameter replacements., +, +, +++ b/pom.xml, +  <version>1.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to replace `RequestHeaders`. An interceptor provided to the, +   `RestAdapter.Builder` will be called for every request and allow setting both headers and, +   additional path parameter replacements., +, +, +++ b/pom.xml, +  <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to replace `RequestHeaders`. An interceptor provided to the, +   `RestAdapter.Builder` will be called for every request and allow setting both headers and, +   additional path parameter replacements., +, +, +++ b/pom.xml, +  <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to replace `RequestHeaders`. An interceptor provided to the, +   `RestAdapter.Builder` will be called for every request and allow setting both headers and, +   additional path parameter replacements., +, +, +++ b/pom.xml, +  <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to replace `RequestHeaders`. An interceptor provided to the, +   `RestAdapter.Builder` will be called for every request and allow setting both headers and, +   additional path parameter replacements., +, +, +++ b/pom.xml, +  <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.0-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +final class RequestBuilder implements RequestInterceptor.RequestFacade {, +  private final List<Header> headers;, +  private final StringBuilder queryParams;, +  private final String[] paramNames;, +  private final RestMethodInfo.ParamUsage[] paramUsages;, +  private final String requestMethod;, +  private final boolean isSynchronous;, +  private final FormUrlEncodedTypedOutput formBody;, +  private final MultipartTypedOutput multipartBody;, +  private TypedOutput body;, +, +  private String relativeUrl;, +  RequestBuilder(Converter converter, RestMethodInfo methodInfo) {, +, +    paramNames = methodInfo.requestParamNames;, +    paramUsages = methodInfo.requestParamUsage;, +    requestMethod = methodInfo.requestMethod;]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +   * Inspects the annotations on an interface method to construct a reusable service method that, +   * speaks HTTP. This requires potentially-expensive reflection so it is best to build each service, +   * method only once and reuse it., +  static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations(, +      Retrofit retrofit, Method method, RequestFactory requestFactory) {, +    CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method);, +    Type responseType = callAdapter.responseType();, +    Converter<ResponseBody, ResponseT> responseConverter =, +        createResponseConverter(retrofit, method, responseType);, +, +    okhttp3.Call.Factory callFactory = retrofit.callFactory;, +    return new HttpServiceMethod<>(requestFactory, callFactory, callAdapter, responseConverter);, +  private static <ResponseT, ReturnT> CallAdapter<ResponseT, ReturnT> createCallAdapter(, +      Retrofit retrofit, Method method) {, +  private static <ResponseT> Converter<ResponseBody, ResponseT> createResponseConverter(, +      Retrofit retrofit, Method method, Type responseType) {, +, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +, +  private HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +      CallAdapter<ResponseT, ReturnT> callAdapter,, +      Converter<ResponseBody, ResponseT> responseConverter) {, +    this.requestFactory = requestFactory;, +    this.callFactory = callFactory;, +    this.callAdapter = callAdapter;, +    this.responseConverter = responseConverter;, +  }, +, +  @Override ReturnT invoke(@Nullable Object[] args) {, +    return callAdapter.adapt(, +        new OkHttpCall<>(requestFactory, args, callFactory, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +   * Inspects the annotations on an interface method to construct a reusable service method that, +   * speaks HTTP. This requires potentially-expensive reflection so it is best to build each service, +   * method only once and reuse it., +  static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations(, +      Retrofit retrofit, Method method, RequestFactory requestFactory) {, +    CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method);, +    Type responseType = callAdapter.responseType();, +    Converter<ResponseBody, ResponseT> responseConverter =, +        createResponseConverter(retrofit, method, responseType);, +, +    okhttp3.Call.Factory callFactory = retrofit.callFactory;, +    return new HttpServiceMethod<>(requestFactory, callFactory, callAdapter, responseConverter);, +  private static <ResponseT, ReturnT> CallAdapter<ResponseT, ReturnT> createCallAdapter(, +      Retrofit retrofit, Method method) {, +  private static <ResponseT> Converter<ResponseBody, ResponseT> createResponseConverter(, +      Retrofit retrofit, Method method, Type responseType) {, +, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +, +  private HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +      CallAdapter<ResponseT, ReturnT> callAdapter,, +      Converter<ResponseBody, ResponseT> responseConverter) {, +    this.requestFactory = requestFactory;, +    this.callFactory = callFactory;, +    this.callAdapter = callAdapter;, +    this.responseConverter = responseConverter;, +  }, +, +  @Override ReturnT invoke(@Nullable Object[] args) {, +    return callAdapter.adapt(, +        new OkHttpCall<>(requestFactory, args, callFactory, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +    RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, method);, +, +    return HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);]
[+++ b/retrofit-adapters/pom.xml, +    <module>rxjava-mock</module>, +++ b/retrofit-adapters/pom.xml, +    <module>rxjava-mock</module>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-rxjava-mock</artifactId>, +  <name>Adapter: RxJava Mock</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>adapter-rxjava</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>io.reactivex</groupId>, +      <artifactId>rxjava</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-adapters/pom.xml, +    <module>rxjava-mock</module>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-rxjava-mock</artifactId>, +  <name>Adapter: RxJava Mock</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>adapter-rxjava</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>io.reactivex</groupId>, +      <artifactId>rxjava</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>]
[+++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2</version>, +++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2</version>, +++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2</version>, +++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2</version>, +++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.2</version>, +++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.2</version>, +++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.2</version>, +++ b/pom.xml, +  <version>2.0.2</version>, +    <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.2</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.2</version>, +++ b/pom.xml]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' | xargs rm -rf, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' | xargs rm -rf, +++ b/pom.xml, +    <gson.version>2.3.1</gson.version>, +    <wire.version>1.7.0</wire.version>, +    <moshi.version>0.9.0</moshi.version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' | xargs rm -rf, +++ b/pom.xml, +    <gson.version>2.3.1</gson.version>, +    <wire.version>1.7.0</wire.version>, +    <moshi.version>0.9.0</moshi.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +      if (subscriber.isUnsubscribed()) {, +        return;, +      }, +, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' | xargs rm -rf, +++ b/pom.xml, +    <gson.version>2.3.1</gson.version>, +    <wire.version>1.7.0</wire.version>, +    <moshi.version>0.9.0</moshi.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +      if (subscriber.isUnsubscribed()) {, +        return;, +      }, +, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonRequestBodyConverter<>(adapter);, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' | xargs rm -rf, +++ b/pom.xml, +    <gson.version>2.3.1</gson.version>, +    <wire.version>1.7.0</wire.version>, +    <moshi.version>0.9.0</moshi.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +      if (subscriber.isUnsubscribed()) {, +        return;, +      }, +, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +  GsonRequestBodyConverter(TypeAdapter<T> adapter) {, +      adapter.toJson(writer, value);, +      writer.flush();, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' | xargs rm -rf, +++ b/pom.xml, +    <gson.version>2.3.1</gson.version>, +    <wire.version>1.7.0</wire.version>, +    <moshi.version>0.9.0</moshi.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +      if (subscriber.isUnsubscribed()) {, +        return;, +      }, +, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +  GsonRequestBodyConverter(TypeAdapter<T> adapter) {, +      adapter.toJson(writer, value);]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import retrofit.http.android.AndroidApacheClient;, +import retrofit.http.android.MainThreadExecutor;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import retrofit.http.android.AndroidApacheClient;, +import retrofit.http.android.MainThreadExecutor;, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +import retrofit.http.mime.TypedOutput;, +import retrofit.http.mime.TypedString;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import retrofit.http.android.AndroidApacheClient;, +import retrofit.http.android.MainThreadExecutor;, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +import retrofit.http.mime.TypedOutput;, +import retrofit.http.mime.TypedString;, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import retrofit.http.mime.TypedByteArray;, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import retrofit.http.android.AndroidApacheClient;, +import retrofit.http.android.MainThreadExecutor;, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +import retrofit.http.mime.TypedOutput;, +import retrofit.http.mime.TypedString;, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import retrofit.http.mime.TypedByteArray;, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/RestMethodInfo.java, +import retrofit.http.mime.TypedOutput;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import retrofit.http.android.AndroidApacheClient;, +import retrofit.http.android.MainThreadExecutor;, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +import retrofit.http.mime.TypedOutput;, +import retrofit.http.mime.TypedString;, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import retrofit.http.mime.TypedByteArray;, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/RestMethodInfo.java, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/RetrofitError.java]
[+++ b/build-macros.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!-- Copyright 2010 Square, Inc. -->, +, +<!--, +  - Ant macro definitions., +  -->, +<project name="Macros" basedir="." default="help">, +, +  <target name="help">, +    <echo>Import this build file into the main build.xml.</echo>, +  </target>, +, +  <!--, +    - Compiles a module., +    -->, +  <macrodef name="compile.module">, +    <attribute name="module", +               description="The directory name under 'modules'."/>, +    <element name="compile.main.classpath" optional="true"/>, +    <element name="compile.tests.classpath" optional="true"/>, +, +    <sequential>, +      <mkdir dir="${build.dir}/@{module}/main"/>, +, +      <!-- Compile src/* and place classes in build/[module]/main. -->, +      <javac srcdir="modules/@{module}/src", +             destdir="${build.dir}/@{module}/main", +             fork="true", +             debug="true", +             includeantruntime="false">, +        <classpath>, +          <fileset dir="${lib.dir}" includes="*.jar"/>, +          <compile.main.classpath/>, +        </classpath>, +      </javac>, +, +      <!-- Compile src-tests/* and place classes in build/[module]/tests. -->, +      <mkdir dir="${build.dir}/@{module}/tests"/>, +      <javac srcdir="modules/@{module}/src-tests", +             destdir="${build.dir}/@{module}/tests", +             fork="true", +             debug="true", +             includeantruntime="false">, +        <classpath>, +          <fileset dir="${lib.dir}" includes="*.jar"/>, +          <pathelement location="${build.dir}/@{module}/main"/>, +          <compile.tests.classpath/>, +        </classpath>, +      </javac>, +    </sequential>, +  </macrodef>, +, +, +  <!--, +    - Builds a module's JAR file., +    -->, +  <macrodef name="jar.module">, +    <attribute name="module", +               description="The directory name under 'modules'."/>, +    <element name="compile.main.classpath" optional="true"/>, +    <element name="compile.tests.classpath" optional="true"/>, +, +    <sequential>, +      <!-- Create the JAR files. -->, +      <jar jarfile="${build.dir}/retrofit-@{module}-${retrofit.revision}.jar">, +        <manifest>, +          <attribute name="Build-Time" value="${build.time}"/>, +          <attribute name="Copyright", +                     value="${build.year}, Square, Inc."/>, +          <attribute name="Commit-Hash" value="${commit.hash}"/>, +        </manifest>, +        <fileset dir="${build.dir}/@{module}/main"/>, +      </jar>, +, +      <jar jarfile="${build.dir}/retrofit-@{module}-${retrofit.revision}-src.jar">, +        <manifest>, +          <attribute name="Build-Time" value="${build.time}"/>, +          <attribute name="Copyright", +                     value="${build.year}, Square, Inc."/>, +          <attribute name="Commit-Hash" value="${commit.hash}"/>, +        </manifest>, +        <fileset dir="modules/@{module}/src"/>, +      </jar>, +    </sequential>, +  </macrodef>, +, +</project>, +, +++ b/build-macros.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!-- Copyright 2010 Square, Inc. -->, +, +<!--, +  - Ant macro definitions., +  -->, +<project name="Macros" basedir="." default="help">, +, +  <target name="help">, +    <echo>Import this build file into the main build.xml.</echo>]
[+++ b/.travis.yml]
[+++ b/android-native/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/pom.xml, +    <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc2</version>, +++ b/pom.xml, +    <version>0.6.0-rc2</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-rc2</version>]
[+++ b/checkstyle.xml, +        <!--<module name="MethodLength"/>-->, +++ b/checkstyle.xml, +        <!--<module name="MethodLength"/>-->, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +        requestType = RequestType.MULTIPART;, +++ b/checkstyle.xml, +        <!--<module name="MethodLength"/>-->, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +        requestType = RequestType.MULTIPART;, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.MultipartBuilder;, +import retrofit.http.Part;, +import retrofit.http.PartMap;, +  private MultipartBuilder multipartBody;, +, +    switch (methodInfo.requestType) {, +      //case FORM_URL_ENCODED:, +      //  // Will be set to 'body' in 'build'., +      //  formBody = new FormUrlEncodedTypedOutput();, +      //  break;, +      case MULTIPART:, +        // Will be set to 'body' in 'build'., +        multipartBody = new MultipartBuilder();, +        break;, +      case SIMPLE:, +        // If present, 'body' will be set in 'setArguments' call., +        break;, +      default:, +        throw new IllegalArgumentException("Unknown request type: " + methodInfo.requestType);, +    }, +      } else if (annotationType == Part.class) {, +        if (value != null) { // Skip null values., +          String name = ((Part) annotation).value();, +          String transferEncoding = ((Part) annotation).encoding();, +          Headers headers = Headers.of(, +              "Content-Disposition", "name=\"" + name + "\"",, +              "Content-Transfer-Encoding", transferEncoding);, +          if (value instanceof RequestBody) {, +            multipartBody.addPart(headers, (RequestBody) value);, +          } else if (value instanceof String) {, +            multipartBody.addPart(headers, RequestBody.create(, +                MediaType.parse("text/plain"), (String) value));, +          } else {, +            multipartBody.addPart(headers,, +                converter.toBody(value, value.getClass()));, +          }, +        }, +      } else if (annotationType == PartMap.class) {, +        if (value != null) { // Skip null values., +          String transferEncoding = ((PartMap) annotation).encoding();, +          for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {, +            Object entryKey = entry.getKey();, +            if (entryKey == null) {, +              throw new IllegalArgumentException(, +                  "Parameter #" + (i + 1) + " part map contained null key.");, +            }, +            String entryName = entryKey.toString();, +            Object entryValue = entry.getValue();, +            Headers headers = Headers.of(, +                "Content-Disposition", "name=\"" + entryName + "\"",, +                "Content-Transfer-Encoding", transferEncoding);, +            if (entryValue != null) { // Skip null values., +              if (entryValue instanceof RequestBody) {, +                multipartBody.addPart(headers, (RequestBody) entryValue);, +              } else if (entryValue instanceof String) {, +                multipartBody.addPart(headers, RequestBody.create(, +                    MediaType.parse("text/plain"), (String) entryValue));, +              } else {, +                multipartBody.addPart(headers, converter.toBody(entryValue, entryValue.getClass()));, +              }, +            }, +          }, +        }, +    if (multipartBody != null) {, +      body = multipartBody.build();, +    }, +++ b/checkstyle.xml, +        <!--<module name="MethodLength"/>-->, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +        requestType = RequestType.MULTIPART;, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.MultipartBuilder;, +import retrofit.http.Part;, +import retrofit.http.PartMap;, +  private MultipartBuilder multipartBody;, +, +    switch (methodInfo.requestType) {, +      //case FORM_URL_ENCODED:, +      //  // Will be set to 'body' in 'build'., +      //  formBody = new FormUrlEncodedTypedOutput();, +      //  break;, +      case MULTIPART:, +        // Will be set to 'body' in 'build'., +        multipartBody = new MultipartBuilder();, +        break;, +      case SIMPLE:, +        // If present, 'body' will be set in 'setArguments' call., +        break;, +      default:]
[+++ b/.gitignore, +build, +out, +lib, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Multipart part \"" + name + "\" value must not be null.");, +          }, +++ b/CHANGELOG.md, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Multipart part \"" + name + "\" value must not be null.");, +          }, +++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +  private String encode;, +    this(gson, "UTF-8");, +  }, +  , +  public GsonConverter(Gson gson, String encode) {, +    this.encode = encode;, +      return new JsonTypedOutput(gson.toJson(object).getBytes(encode), encode);, +    private final String encode;, +    JsonTypedOutput(byte[] jsonBytes, String encode) {, +      this.encode = encode;, +      return "application/json; charset=" + encode;, +++ b/CHANGELOG.md, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Multipart part \"" + name + "\" value must not be null.");, +          }, +++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +  private String encode;, +    this(gson, "UTF-8");, +  }, +  , +  public GsonConverter(Gson gson, String encode) {, +    this.encode = encode;, +      return new JsonTypedOutput(gson.toJson(object).getBytes(encode), encode);, +    private final String encode;, +    JsonTypedOutput(byte[] jsonBytes, String encode) {, +      this.encode = encode;, +      return "application/json; charset=" + encode;, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * Denotes a single part of a mutli-part request., + * The parameter type on which this annotation exists will be processed in one of two ways:, + * void example(&#64;Part("description") TypedString description,, +++ b/CHANGELOG.md, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>]
[+++ b/pom.xml, +    <okhttp.version>3.8.1</okhttp.version>]
[+++ b/pom.xml, +    <gson.version>2.3.1</gson.version>]
[+++ b/pom.xml, +    <okhttp.version>3.2.0</okhttp.version>, +    <protobuf.version>2.6.1</protobuf.version>, +    <jackson.version>2.7.2</jackson.version>, +    <wire.version>2.1.1</wire.version>, +    <guava.version>19.0</guava.version>]
[+++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.0-SNAPSHOT</version>]
[+++ b/revision.properties, +retrofit.revision=0.4-SNAPSHOT]
[+++ b/retrofit/src/main/java/retrofit2/Response.java, +   * Create a synthetic successful response using {@code headers} with {@code body} as the, +   * deserialized body., +   */, +  public static <T> Response<T> success(T body, Headers headers) {, +    if (headers == null) throw new NullPointerException("headers == null");, +    return success(body, new okhttp3.Response.Builder() //, +        .code(200), +        .message("OK"), +        .protocol(Protocol.HTTP_1_1), +        .headers(headers), +        .request(new Request.Builder().url("http://localhost").build()), +        .build());, +  }, +, +  /**, +++ b/retrofit/src/main/java/retrofit2/Response.java, +   * Create a synthetic successful response using {@code headers} with {@code body} as the, +   * deserialized body., +   */, +  public static <T> Response<T> success(T body, Headers headers) {, +    if (headers == null) throw new NullPointerException("headers == null");, +    return success(body, new okhttp3.Response.Builder() //, +        .code(200), +        .message("OK"), +        .protocol(Protocol.HTTP_1_1), +        .headers(headers), +        .request(new Request.Builder().url("http://localhost").build()), +        .build());, +  }, +, +  /**, +++ b/retrofit/src/test/java/retrofit2/ResponseTest.java, +import okhttp3.Headers;, +  @Test public void successWithHeaders() {, +    Object body = new Object();, +    Headers headers = Headers.of("foo", "bar");, +    Response<Object> response = Response.success(body, headers);, +    assertThat(response.raw()).isNotNull();, +    assertThat(response.code()).isEqualTo(200);, +    assertThat(response.message()).isEqualTo("OK");, +    assertThat(response.headers().toMultimap()).isEqualTo(headers.toMultimap());, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isSameAs(body);, +    assertThat(response.errorBody()).isNull();, +  }, +, +  @Test public void succesWithNullHeadersThrows() {, +    try {, +      Response.success("", (okhttp3.Headers) null);, +      fail();, +    } catch (NullPointerException e) {, +      assertThat(e).hasMessage("headers == null");, +    }, +  }, +, +      Response.success("", (okhttp3.Response) null);]
[+++ b/retrofit-converters/guava/README.md, +Guava Converter, +===============, +, +A `Converter` which supports Guava's `Optional<T>` by delegating to other converters for `T`, +and then wrapping it into `Optional`., +, +, +Download, +--------, +, +Download [the latest JAR][1] or grab via [Maven][2]:, +```xml, +<dependency>, +  <groupId>com.squareup.retrofit2</groupId>, +  <artifactId>converter-guava</artifactId>, +  <version>latest.version</version>, +</dependency>, +```, +or [Gradle][2]:, +```groovy, +compile 'com.squareup.retrofit2:converter-guava:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [1]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-guava&v=LATEST, + [2]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-guava%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/retrofit-converters/guava/README.md, +Guava Converter, +===============, +, +A `Converter` which supports Guava's `Optional<T>` by delegating to other converters for `T`, +and then wrapping it into `Optional`., +, +, +Download, +--------, +, +Download [the latest JAR][1] or grab via [Maven][2]:, +```xml, +<dependency>, +  <groupId>com.squareup.retrofit2</groupId>, +  <artifactId>converter-guava</artifactId>, +  <version>latest.version</version>, +</dependency>, +```, +or [Gradle][2]:, +```groovy, +compile 'com.squareup.retrofit2:converter-guava:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [1]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-guava&v=LATEST, + [2]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-guava%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/retrofit-converters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>2.3.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-guava</artifactId>, +  <name>Converter: Guava</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>]
[+++ b/pom.xml, +    <httpcomponents.version>4.0.1</httpcomponents.version>]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/Result.java, +, +  @Override public String toString() {, +    if (error != null) {, +      return "Result{isError=true, error=\"" + error + "\"}";, +    }, +    return "Result{isError=false, response=" + response + '}';, +  }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/Result.java, +, +  @Override public String toString() {, +    if (error != null) {, +      return "Result{isError=true, error=\"" + error + "\"}";, +    }, +    return "Result{isError=false, response=" + response + '}';, +  }, +++ b/retrofit/src/main/java/retrofit2/Response.java, +, +  @Override public String toString() {, +    return rawResponse.toString();, +  }]
[+++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.JsonIOException;, +import com.google.gson.stream.JsonToken;, +      T result = adapter.read(jsonReader);, +      if (jsonReader.peek() != JsonToken.END_DOCUMENT) {, +        throw new JsonIOException("JSON document was not fully consumed.");, +      }, +      return result;, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.JsonIOException;, +import com.google.gson.stream.JsonToken;, +      T result = adapter.read(jsonReader);, +      if (jsonReader.peek() != JsonToken.END_DOCUMENT) {, +        throw new JsonIOException("JSON document was not fully consumed.");, +      }, +      return result;, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java, +import com.google.gson.JsonIOException;, +import retrofit2.http.GET;, +import static org.junit.Assert.fail;, +  static final class Value {, +    static final TypeAdapter<Value> BROKEN_ADAPTER = new TypeAdapter<Value>() {, +      @Override public void write(JsonWriter out, Value value) {, +        throw new AssertionError();, +      }, +, +      @Override public Value read(JsonReader reader) throws IOException {, +        reader.beginObject();, +        reader.nextName();, +        String theName = reader.nextString();, +        return new Value(theName);, +      }, +    };, +, +    final String theName;, +, +    Value(String theName) {, +      this.theName = theName;, +    }, +  }, +, +    @GET("/") Call<Value> value();, +        .registerTypeAdapter(Value.class, Value.BROKEN_ADAPTER), +, +  @Test public void requireFullResponseDocumentConsumption() throws Exception {, +    server.enqueue(new MockResponse().setBody("{\"theName\":\"value\"}"));, +, +    Call<Value> call = service.value();, +    try {, +      call.execute();, +      fail();, +    } catch (JsonIOException e) {, +      assertThat(e).hasMessage("JSON document was not fully consumed.");, +    }, +  }]
[+++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, +  <component name="ProjectResources">, +    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, +  </component>, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, +  <component name="ProjectResources">, +    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, +  </component>, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, +  <component name="ProjectResources">, +    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, +  </component>, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/build.xml, +  <target name="repackage-gson" depends="prepare">, +    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask">, +      <classpath>, +        <fileset dir="lib" includes="jarjar*.jar"/>, +      </classpath>, +    </taskdef>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6.jar">, +      <zipfileset src="lib/gson-1.6.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6-sources.jar">, +      <zipfileset src="lib/gson-1.6-sources.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +  </target>, +, +  <target name="compile" depends="repackage-gson">, +	      <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>, +        <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>, +        <fileset dir="${build.dir}" includes="retrofit-gson*.jar"/>, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, +  <component name="ProjectResources">, +    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, +  </component>, +  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/build.xml, +  <target name="repackage-gson" depends="prepare">, +    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask">, +      <classpath>, +        <fileset dir="lib" includes="jarjar*.jar"/>, +      </classpath>, +    </taskdef>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6.jar">, +      <zipfileset src="lib/gson-1.6.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +    <jarjar jarfile="${build.dir}/retrofit-gson-1.6-sources.jar">, +      <zipfileset src="lib/gson-1.6-sources.jar"/>, +      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, +    </jarjar>, +  </target>, +, +  <target name="compile" depends="repackage-gson">, +	      <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>]
[+++ b/pom.xml, +  <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.2-SNAPSHOT</version>]
[+++ b/pom.xml, +  <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.2.1</version>, +++ b/retrofit/pom.xml, +    <version>1.2.1</version>]
[+++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, +    if (getRawType(returnType) != ListenableFuture.class) {, +    Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, +    if (getRawType(innerType) != Response.class) {, +    Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, +    if (getRawType(returnType) != ListenableFuture.class) {, +    Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, +    if (getRawType(innerType) != Response.class) {, +    Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, +    if (getRawType(returnType) != ListenableFuture.class) {, +    Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, +    if (getRawType(innerType) != Response.class) {, +    Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, +    if (getRawType(returnType) != ListenableFuture.class) {, +    Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, +    if (getRawType(innerType) != Response.class) {, +    Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, +    if (getRawType(returnType) != ListenableFuture.class) {, +    Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, +    if (getRawType(innerType) != Response.class) {, +    Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, +    if (getRawType(returnType) != ListenableFuture.class) {, +    Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, +    if (getRawType(innerType) != Response.class) {, +    Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +package retrofit2.adapter.rxjava;, +, +import retrofit2.Response;, +, +/** Exception for an unexpected, non-2xx HTTP response. */, +public final class HttpException extends Exception {, +  private final int code;, +  private final String message;, +  private final transient Response<?> response;, +, +  public HttpException(Response<?> response) {, +    super("HTTP " + response.code() + " " + response.message());, +    this.code = response.code();, +    this.message = response.message();, +    this.response = response;, +  }, +, +  /** HTTP status code. */, +  public int code() {, +    return code;, +  }, +, +  /** HTTP status message. */, +  public String message() {, +    return message;, +  }, +, +  /**, +   * The full HTTP response. This may be null if the exception was serialized., +   */, +  public Response<?> response() {, +    return response;, +  }, +}, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, +    if (getRawType(returnType) != ListenableFuture.class) {, +    Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, +    if (getRawType(innerType) != Response.class) {, +    Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null]
[+++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create()), +        .build();, +, +    server.enqueue(new MockResponse());, +, +    Service service = retrofit.create(Service.class);, +    Optional<Object> optional = service.optional().execute().body();, +    assertThat(optional).isNotNull();, +    assertThat(optional.isPresent()).isFalse();, +  }, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create()), +        .build();, +, +    server.enqueue(new MockResponse());, +, +    Service service = retrofit.create(Service.class);, +    Optional<Object> optional = service.optional().execute().body();, +    assertThat(optional).isNotNull();, +    assertThat(optional.isPresent()).isFalse();, +  }, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create())]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava2;, +, +import io.reactivex.Observable;, +import io.reactivex.Observer;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.exceptions.CompositeException;, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.plugins.RxJavaPlugins;, +import retrofit2.Call;, +import retrofit2.Callback;, +import retrofit2.Response;, +, +final class CallEnqueueObservable<T> extends Observable<Response<T>> {, +  private final Call<T> originalCall;, +, +  CallEnqueueObservable(Call<T> originalCall) {, +    this.originalCall = originalCall;, +  }, +, +  @Override protected void subscribeActual(Observer<? super Response<T>> observer) {, +    // Since Call is a one-shot type, clone it for each new observer., +    Call<T> call = originalCall.clone();, +    CallCallback<T> callback = new CallCallback<>(call, observer);, +    observer.onSubscribe(callback);, +    call.enqueue(callback);, +  }, +, +  private static final class CallCallback<T> implements Disposable, Callback<T> {, +    private final Call<?> call;, +    private final Observer<? super Response<T>> observer;, +    boolean terminated = false;, +, +    CallCallback(Call<?> call, Observer<? super Response<T>> observer) {, +      this.call = call;, +      this.observer = observer;, +    }, +, +    @Override public void onResponse(Call<T> call, Response<T> response) {, +      if (call.isCanceled()) return;, +, +      try {, +        observer.onNext(response);, +, +        if (!call.isCanceled()) {, +          terminated = true;, +          observer.onComplete();, +        }, +      } catch (Throwable t) {, +        if (terminated) {, +          RxJavaPlugins.onError(t);, +        } else if (!call.isCanceled()) {, +          try {, +            observer.onError(t);, +          } catch (Throwable inner) {, +            Exceptions.throwIfFatal(inner);, +            RxJavaPlugins.onError(new CompositeException(t, inner));, +          }, +        }, +      }, +    }, +, +    @Override public void onFailure(Call<T> call, Throwable t) {, +      if (call.isCanceled()) return;, +, +      try {, +        observer.onError(t);, +      } catch (Throwable inner) {, +        Exceptions.throwIfFatal(inner);, +        RxJavaPlugins.onError(new CompositeException(t, inner));, +      }, +    }, +, +    @Override public void dispose() {, +      call.cancel();, +    }, +, +    @Override public boolean isDisposed() {, +      return call.isCanceled();, +    }, +  }, +}, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +/*, + * Copyright (C) 2016 Jake Wharton]
[+++ b/checkstyle.xml, +        <module name="Indentation">, +          <property name="basicOffset" value="2"/>, +        </module>, +++ b/checkstyle.xml, +        <module name="Indentation">, +          <property name="basicOffset" value="2"/>, +        </module>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/checkstyle.xml, +        <module name="Indentation">, +          <property name="basicOffset" value="2"/>, +        </module>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/checkstyle.xml, +        <module name="Indentation">, +          <property name="basicOffset" value="2"/>, +        </module>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/retrofit-converters/moshi/src/main/java/retrofit/MoshiResponseBodyConverter.java, +      Utils.closeQuietly(source);, +++ b/checkstyle.xml, +        <module name="Indentation">, +          <property name="basicOffset" value="2"/>, +        </module>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/retrofit-converters/moshi/src/main/java/retrofit/MoshiResponseBodyConverter.java, +      Utils.closeQuietly(source);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/ProtoResponseBodyConverter.java, +      Utils.closeQuietly(is);, +++ b/checkstyle.xml, +        <module name="Indentation">, +          <property name="basicOffset" value="2"/>, +        </module>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonResponseBodyConverter.java, +      Utils.closeQuietly(reader);, +++ b/retrofit-converters/moshi/src/main/java/retrofit/MoshiResponseBodyConverter.java, +      Utils.closeQuietly(source);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/ProtoResponseBodyConverter.java, +      Utils.closeQuietly(is);, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireResponseBodyConverter.java, +      BufferedSource source = value.source();, +      Utils.closeQuietly(value);]
[+++ b/pom.xml, +    <okhttp.version>3.9.1</okhttp.version>]
[+++ b/pom.xml, +        <version>2.4.2</version>, +        <dependencies>, +          <dependency>, +            <groupId>org.apache.maven.scm</groupId>, +            <artifactId>maven-scm-provider-gitexe</artifactId>, +            <version>1.9</version>, +          </dependency>, +        </dependencies>]
[+++ b/pom.xml, +    <moshi.version>1.5.0</moshi.version>]
[+++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <scala.version>2.12.4</scala.version>, +++ b/pom.xml, +    <scala.version>2.12.4</scala.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +      return adapter.read(jsonReader);, +++ b/pom.xml, +    <scala.version>2.12.4</scala.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +      return adapter.read(jsonReader);, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java]
[+++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0</version>, +++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0</version>, +++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0</version>, +++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.3.0</version>, +++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.3.0</version>, +++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/pom.xml, +  <version>2.3.0</version>, +    <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.3.0</version>, +++ b/pom.xml]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +      String apiUrl = restAdapter.baseUrl.url();, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, +    .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, +        .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java, +        .baseUrl(server.getUrl("/").toString())]
[+++ b/pom.xml, +    <rxjava.version>1.0.13</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.mock;, +, +import rx.Observable;, +import rx.functions.Func1;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  public static RxJavaBehaviorAdapter create() {, +    return new RxJavaBehaviorAdapter();, +  }, +, +  private RxJavaBehaviorAdapter() {, +  }, +, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +    if (value instanceof Observable) {, +      return applyObservableBehavior(behavior, (Observable<?>) value);, +    }, +    String name = value.getClass().getCanonicalName();, +    if ("rx.Single".equals(name)) {, +      // Apply behavior to the Single from a separate class. This defers classloading such that, +      // regular Observable operation can be leveraged without relying on this unstable RxJava API., +      return SingleHelper.applySingleBehavior(behavior, value);, +    }, +    throw new IllegalStateException("Unsupported type " + name);, +  }, +, +  public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, +      final Observable<?> value) {, +    return Observable.timer(behavior.calculateDelay(MILLISECONDS), MILLISECONDS), +        .flatMap(new Func1<Long, Observable<?>>() {, +          @Override public Observable<?> call(Long ignored) {, +            if (behavior.calculateIsFailure()) {, +              return Observable.error(behavior.failureException());, +            }, +            return value;, +          }, +        });, +  }, +}, +++ b/pom.xml, +    <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.mock;, +, +import rx.Observable;, +import rx.functions.Func1;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  public static RxJavaBehaviorAdapter create() {, +    return new RxJavaBehaviorAdapter();, +  }, +, +  private RxJavaBehaviorAdapter() {, +  }, +, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +  public static void assertMultipart(TypedOutput typedOutput) {, +    assertThat(typedOutput).isInstanceOf(MultipartTypedOutput.class);, +  }, +, +  public static void assertBytes(byte[] bytes, String expected) throws Exception {, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +  public static void assertMultipart(TypedOutput typedOutput) {, +    assertThat(typedOutput).isInstanceOf(MultipartTypedOutput.class);, +  }, +, +  public static void assertBytes(byte[] bytes, String expected) throws Exception {, +++ /dev/null, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +  public static void assertMultipart(TypedOutput typedOutput) {, +    assertThat(typedOutput).isInstanceOf(MultipartTypedOutput.class);, +  }, +, +  public static void assertBytes(byte[] bytes, String expected) throws Exception {, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/client/ApacheClientTest.java, +import static retrofit.TestingUtils.assertMultipart;, +  @Test public void post() throws Exception {, +    assertThat(apacheRequest.getAllHeaders()).hasSize(0);, +    assertThat(apacheRequest.getAllHeaders()).hasSize(0);, +    assertMultipart(entity.typedOutput);, +  @Test public void response() throws Exception {, +  @Test public void emptyResponse() throws Exception {, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +  public static void assertMultipart(TypedOutput typedOutput) {, +    assertThat(typedOutput).isInstanceOf(MultipartTypedOutput.class);, +  }, +, +  public static void assertBytes(byte[] bytes, String expected) throws Exception {, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/client/ApacheClientTest.java, +import static retrofit.TestingUtils.assertMultipart;, +  @Test public void post() throws Exception {, +    assertThat(apacheRequest.getAllHeaders()).hasSize(0);, +    assertThat(apacheRequest.getAllHeaders()).hasSize(0);, +    assertMultipart(entity.typedOutput);, +  @Test public void response() throws Exception {, +  @Test public void emptyResponse() throws Exception {, +++ b/website/index.html, +                <li><a href="http://stackoverflow.com/questions/tagged/retrofit?sort=active">StackOverflow</a></li>]
[+++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +++ b/retrofit/src/test/java/retrofit/EndpointsTest.java, +// Copyright 2014 Square, Inc., +package retrofit;, +, +import org.junit.Test;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class EndpointsTest {, +  @Test public void endpointOnly() {, +    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com");, +    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, +  }, +, +  @Test public void endpointAndName() {, +    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com", "production");, +    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, +    assertThat(endpoint.getName()).isEqualTo("production");, +  }, +}, +++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +++ b/retrofit/src/test/java/retrofit/EndpointsTest.java, +// Copyright 2014 Square, Inc., +package retrofit;, +, +import org.junit.Test;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class EndpointsTest {, +  @Test public void endpointOnly() {, +    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com");, +    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, +  }, +, +  @Test public void endpointAndName() {, +    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com", "production");, +    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, +    assertThat(endpoint.getName()).isEqualTo("production");, +  }, +}, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java]
[+++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile">, +        <property name="lineSeparator" value="lf" />, +    </module>]
[+++ b/pom.xml, +    <protobuf.version>3.5.0</protobuf.version>]
[+++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import javax.annotation.Nullable;, +, +  public @Nullable Response<?> response() {]
[+++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.6.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +        <gson.version>2.2.3-SNAPSHOT</gson.version>, +    <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +    <repositories>, +        <repository>, +            <id>sonatype-nexus-snapshots</id>, +            <name>Sonatype Nexus Snapshots</name>, +            <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +            <releases>, +                <enabled>false</enabled>, +            </releases>, +            <snapshots>, +                <enabled>true</enabled>, +            </snapshots>, +        </repository>, +    </repositories>, +]
[+++ b/pom.xml, +    <gson.version>2.3</gson.version>]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.lang.reflect.ParameterizedType;, +import java.net.URI;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import okhttp3.Headers;, +import okhttp3.HttpUrl;, +import okhttp3.MediaType;, +import okhttp3.MultipartBody;, +import okhttp3.RequestBody;, +import retrofit2.http.Body;, +import retrofit2.http.DELETE;, +import retrofit2.http.Field;, +import retrofit2.http.FieldMap;, +import retrofit2.http.FormUrlEncoded;, +import retrofit2.http.GET;, +import retrofit2.http.HEAD;, +import retrofit2.http.HTTP;, +import retrofit2.http.Header;, +import retrofit2.http.HeaderMap;, +import retrofit2.http.Multipart;, +import retrofit2.http.OPTIONS;, +import retrofit2.http.PATCH;, +import retrofit2.http.POST;, +import retrofit2.http.PUT;, +import retrofit2.http.Part;, +import retrofit2.http.PartMap;, +import retrofit2.http.Path;, +import retrofit2.http.Query;, +import retrofit2.http.QueryMap;, +import retrofit2.http.QueryName;, +import retrofit2.http.Url;, +  // Upper and lower characters, digits, underscores, and hyphens, starting with a character., +  static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, +  static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, +  static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, +, +, +  private final HttpUrl baseUrl;, +  private final String httpMethod;, +  private final String relativeUrl;, +  private final Headers headers;, +  private final MediaType contentType;, +  private final boolean hasBody;, +  private final boolean isFormEncoded;, +  private final boolean isMultipart;, +  private final ParameterHandler<?>[] parameterHandlers;, +    this.callFactory = builder.retrofit.callFactory();, +    this.callAdapter = builder.callAdapter;, +    this.baseUrl = builder.retrofit.baseUrl();, +    this.responseConverter = builder.responseConverter;, +    this.httpMethod = builder.httpMethod;, +    this.relativeUrl = builder.relativeUrl;, +    this.headers = builder.headers;, +    this.contentType = builder.contentType;, +    this.hasBody = builder.hasBody;, +    this.isFormEncoded = builder.isFormEncoded;, +    this.isMultipart = builder.isMultipart;, +    this.parameterHandlers = builder.parameterHandlers;, +  okhttp3.Call toCall(@Nullable Object... args) throws IOException {, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +, +    @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types., +    ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;, +, +    int argumentCount = args != null ? args.length : 0;, +    if (argumentCount != handlers.length) {, +      throw new IllegalArgumentException("Argument count (" + argumentCount, +          + ") doesn't match expected count (" + handlers.length + ")");, +    }, +, +    for (int p = 0; p < argumentCount; p++) {, +      handlers[p].apply(requestBuilder, args[p]);, +    }, +, +    return callFactory.newCall(requestBuilder.build());, +    final Annotation[] methodAnnotations;, +    final Annotation[][] parameterAnnotationsArray;, +    final Type[] parameterTypes;, +    boolean gotField;, +    boolean gotPart;, +    boolean gotBody;, +    boolean gotPath;, +    boolean gotQuery;, +    boolean gotUrl;, +    String httpMethod;, +    boolean hasBody;, +    boolean isFormEncoded;, +    boolean isMultipart;, +    String relativeUrl;, +    Headers headers;, +    MediaType contentType;, +    Set<String> relativeUrlParamNames;, +    ParameterHandler<?>[] parameterHandlers;]
[+++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +++ b/retrofit/pom.xml, +++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2013 Square, Inc., +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +/**, + * Replaces the header with the the value of its target. If the target is null,, + * the header is removed., + *, + * <p/>, + * ex., + *, + * <pre>, + * @GET("/"), + * void foo(@Header("Auth-Token") String token, ..);, + * </pre>, + *, + * @author Adrian Cole (adrianc@netflix.com), + */, +@Retention(RUNTIME) @Target(PARAMETER), +public @interface Header {, +  String value();, +++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2013 Square, Inc., +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;]
[+++ b/samples/pom.xml, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>converter-gson</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/pom.xml, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>converter-gson</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/src/main/java/com/example/retrofit/SimpleService.java, +import retrofit.GsonConverterFactory;, +        .addConverterFactory(GsonConverterFactory.create())]
[+++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java]
[+++ b/README.md, + *  Android - Contains Android-specific utility classes., +++ b/README.md, + *  Android - Contains Android-specific utility classes., +++ /dev/null, +++ b/README.md, + *  Android - Contains Android-specific utility classes., +++ /dev/null, +++ /dev/null, +++ b/README.md, + *  Android - Contains Android-specific utility classes., +++ /dev/null, +++ /dev/null, +++ b/io/src/main/java/retrofit/io/QueueFile.java, +/*, + * Copyright (C) 2010 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.io;, +, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.RandomAccessFile;, +import java.nio.channels.FileChannel;, +import java.util.NoSuchElementException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +/**, + * A reliable, efficient, file-based, FIFO queue. Additions and removals are, + * O(1). All operations are atomic. Writes are synchronous; data will be written, + * to disk before an operation returns. The underlying file is structured to, + * survive process and even system crashes. If an I/O exception is thrown during, + * a mutating change, the change is aborted. It is safe to continue to use a, + * {@code QueueFile} instance after an exception., + * <p/>, + * <p>All operations are synchronized. In a traditional queue, the remove, + * operation returns an element. In this queue, {@link #peek} and {@link, + * #remove} are used in conjunction. Use {@code peek} to retrieve the first, + * element, and then {@code remove} to remove it after successful processing. If, + * the system crashes after {@code peek} and during processing, the element will, + * remain in the queue, to be processed when the system restarts., + * <p/>, + * <p><b><font color="red">NOTE:</font></b> The current implementation is built, + * for file systems that support atomic segment writes (like YAFFS). Most, + * conventional file systems don't support this; if the power goes out while, + * writing a segment, the segment will contain garbage and the file will be, + * corrupt. We'll add journaling support so this class can be used with more, + * file systems later., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class QueueFile {, +  private static final Logger LOGGER =, +      Logger.getLogger(QueueFile.class.getName());, +, +  /** Initial file size in bytes. */, +  private static final int INITIAL_LENGTH = 4096; // one file system block, +, +  /** Length of header in bytes. */, +  static final int HEADER_LENGTH = 16;, +, +  /**, +   * The underlying file. Uses a ring buffer to store entries. Designed so that, +   * a modification isn't committed or visible until we write the header. The, +   * header is much smaller than a segment. So long as the underlying file, +   * system supports atomic segment writes, changes to the queue are atomic., +   * Storing the file length ensures we can recover from a failed expansion, +   * (i.e. if setting the file length succeeds but the process dies before the, +   * data can be copied)., +   * <p/>, +   * <pre>, +   *   Format:, +   *     Header              (16 bytes), +   *     Element Ring Buffer (File Length - 16 bytes), +   * <p/>, +   *   Header:, +   *     File Length            (4 bytes), +   *     Element Count          (4 bytes), +   *     First Element Position (4 bytes, =0 if null), +   *     Last Element Position  (4 bytes, =0 if null), +   * <p/>, +   *   Element:, +   *     Length (4 bytes), +   *     Data   (Length bytes), +   * </pre>, +   */]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +import rx.Scheduler;, +  static CallAdapter<Completable> createCallAdapter(Scheduler scheduler) {, +    return new CompletableCallAdapter(scheduler);, +, +  static class CompletableCallAdapter implements CallAdapter<Completable> {, +    private final Scheduler scheduler;, +, +    CompletableCallAdapter(Scheduler scheduler) {, +      this.scheduler = scheduler;, +    }, +, +    @Override public Type responseType() {, +      return Void.class;, +    }, +, +    @Override public Completable adapt(Call call) {, +      Completable completable = Completable.create(new CompletableCallOnSubscribe(call));, +      if (scheduler != null) {, +        return completable.subscribeOn(scheduler);, +      }, +      return completable;, +    }, +  }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +import rx.Scheduler;, +  static CallAdapter<Completable> createCallAdapter(Scheduler scheduler) {, +    return new CompletableCallAdapter(scheduler);, +, +  static class CompletableCallAdapter implements CallAdapter<Completable> {, +    private final Scheduler scheduler;, +, +    CompletableCallAdapter(Scheduler scheduler) {, +      this.scheduler = scheduler;, +    }, +, +    @Override public Type responseType() {, +      return Void.class;, +    }, +, +    @Override public Completable adapt(Call call) {, +      Completable completable = Completable.create(new CompletableCallOnSubscribe(call));, +      if (scheduler != null) {, +        return completable.subscribeOn(scheduler);, +      }, +      return completable;, +    }, +  }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Scheduler;, +    return new RxJavaCallAdapterFactory(null);, +  /**, +   * TODO, +   */, +  public static RxJavaCallAdapterFactory createWithScheduler(Scheduler scheduler) {, +    if (scheduler == null) throw new NullPointerException("scheduler == null");, +    return new RxJavaCallAdapterFactory(scheduler);, +  }, +, +  private final Scheduler scheduler;, +, +  private RxJavaCallAdapterFactory(Scheduler scheduler) {, +    this.scheduler = scheduler;, +      return CompletableHelper.createCallAdapter(scheduler);, +    CallAdapter<Observable<?>> callAdapter = getCallAdapter(returnType, scheduler);, +  private CallAdapter<Observable<?>> getCallAdapter(Type returnType, Scheduler scheduler) {, +      return new ResponseCallAdapter(responseType, scheduler);, +      return new ResultCallAdapter(responseType, scheduler);, +    return new SimpleCallAdapter(observableType, scheduler);, +    private final Scheduler scheduler;, +    ResponseCallAdapter(Type responseType, Scheduler scheduler) {, +      this.scheduler = scheduler;, +      Observable<Response<R>> observable = Observable.create(new CallOnSubscribe<>(call));, +      if (scheduler != null) {, +        return observable.subscribeOn(scheduler);, +      }, +      return observable;, +    private final Scheduler scheduler;, +    SimpleCallAdapter(Type responseType, Scheduler scheduler) {, +      this.scheduler = scheduler;, +      Observable<R> observable = Observable.create(new CallOnSubscribe<>(call)) //, +      if (scheduler != null) {, +        return observable.subscribeOn(scheduler);, +      }, +      return observable;, +    private final Scheduler scheduler;, +    ResultCallAdapter(Type responseType, Scheduler scheduler) {, +      this.scheduler = scheduler;, +      Observable<Result<R>> observable = Observable.create(new CallOnSubscribe<>(call)) //, +          }).onErrorReturn(new Func1<Throwable, Result<R>>() {, +      if (scheduler != null) {, +        return observable.subscribeOn(scheduler);, +      }, +      return observable;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +import rx.Scheduler;, +  static CallAdapter<Completable> createCallAdapter(Scheduler scheduler) {, +    return new CompletableCallAdapter(scheduler);, +, +  static class CompletableCallAdapter implements CallAdapter<Completable> {]
[+++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/jaxb/README.md, +**Note that JAXB does not work on Android.**, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;]
[+++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="ProjectCodeStyleSettingsManager">, +    <option name="PER_PROJECT_SETTINGS">, +      <value />, +    </option>, +  </component>, +</project>, +, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="ProjectCodeStyleSettingsManager">, +    <option name="PER_PROJECT_SETTINGS">, +      <value />, +    </option>, +  </component>, +</project>, +, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, +  <component name="ProjectCodeStyleSettingsManager">, +    <option name="PER_PROJECT_SETTINGS">, +      <value />, +    </option>, +  </component>, +</project>, +, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import static org.easymock.EasyMock.capture;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.expectLastCall;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.verify;]
[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +  private final MockRxSupport mockRxSupport;, +    } else {, +      mockRxSupport = null;, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +  private final MockRxSupport mockRxSupport;, +    } else {, +      mockRxSupport = null;, +++ b/retrofit-samples/mock-github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<!--, +  ~ Copyright 2013 Square, Inc., +  -->, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit.samples</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.2.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>mock-github-client</artifactId>, +  <name>Sample: Mock GitHub Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +  private final MockRxSupport mockRxSupport;, +    } else {, +      mockRxSupport = null;, +++ b/retrofit-samples/mock-github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<!--, +  ~ Copyright 2013 Square, Inc., +  -->, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit.samples</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.2.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>mock-github-client</artifactId>, +  <name>Sample: Mock GitHub Client</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-samples/mock-github-client/src/main/java/com/example/retrofit/GitHubClient.java, +// Copyright 2013 Square, Inc., +package com.example.retrofit;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import retrofit.MockRestAdapter;, +import retrofit.RestAdapter;, +import retrofit.http.GET;, +import retrofit.http.Path;, +, +public class GitHubClient {, +  private static final String API_URL = "https://api.github.com";, +, +  static class Contributor {, +    public final String login;, +    public final int contributions;, +, +    Contributor(String login, int contributions) {]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java]
[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import com.squareup.moshi.JsonDataException;, +import com.squareup.moshi.JsonReader;, +      JsonReader reader = JsonReader.of(source);, +      T result = adapter.fromJson(reader);, +      if (reader.peek() != JsonReader.Token.END_DOCUMENT) {, +        throw new JsonDataException("JSON document was not fully consumed.");, +      }, +      return result;, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import com.squareup.moshi.JsonDataException;, +import com.squareup.moshi.JsonReader;, +      JsonReader reader = JsonReader.of(source);, +      T result = adapter.fromJson(reader);, +      if (reader.peek() != JsonReader.Token.END_DOCUMENT) {, +        throw new JsonDataException("JSON document was not fully consumed.");, +      }, +      return result;, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import retrofit2.http.GET;, +  static final class Value {, +    final String theName;, +, +    Value(String theName) {, +      this.theName = theName;, +    }, +  }, +, +, +    @FromJson public Value readWithoutEndingObject(JsonReader reader) throws IOException {, +      reader.beginObject();, +      reader.nextName();, +      String theName = reader.nextString();, +      return new Value(theName);, +    }, +    @GET("/") Call<Value> value();, +, +  @Test public void requireFullResponseDocumentConsumption() throws Exception {, +    server.enqueue(new MockResponse().setBody("{\"theName\":\"value\"}"));, +, +    Call<Value> call = service.value();, +    try {, +      call.execute();, +      fail();, +    } catch (JsonDataException e) {, +      assertThat(e).hasMessage("JSON document was not fully consumed.");, +    }, +  }]
[+++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.2.0</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <assertj.version>1.5.0</assertj.version>, +        <groupId>org.assertj</groupId>, +        <artifactId>assertj-core</artifactId>, +        <version>${assertj.version}</version>, +++ b/pom.xml, +    <assertj.version>1.5.0</assertj.version>, +        <groupId>org.assertj</groupId>, +        <artifactId>assertj-core</artifactId>, +        <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/pom.xml, +    <assertj.version>1.5.0</assertj.version>, +        <groupId>org.assertj</groupId>, +        <artifactId>assertj-core</artifactId>, +        <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/pom.xml, +    <assertj.version>1.5.0</assertj.version>, +        <groupId>org.assertj</groupId>, +        <artifactId>assertj-core</artifactId>, +        <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/protobuf/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/pom.xml, +    <assertj.version>1.5.0</assertj.version>, +        <groupId>org.assertj</groupId>, +        <artifactId>assertj-core</artifactId>, +        <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/protobuf/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/pom.xml, +    <assertj.version>1.5.0</assertj.version>, +        <groupId>org.assertj</groupId>, +        <artifactId>assertj-core</artifactId>, +        <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/protobuf/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/simplexml/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/pom.xml, +    <assertj.version>1.5.0</assertj.version>, +        <groupId>org.assertj</groupId>, +        <artifactId>assertj-core</artifactId>, +        <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/protobuf/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/simplexml/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/pom.xml, +    <assertj.version>1.5.0</assertj.version>, +        <groupId>org.assertj</groupId>, +        <artifactId>assertj-core</artifactId>, +        <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/protobuf/pom.xml]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  final Executor callbackExecutor;, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  final Executor callbackExecutor;, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    IOException thrownException;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  final Executor callbackExecutor;, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  Retrofit(Call.Factory callFactory, BaseUrl baseUrl, List<Converter.Factory> converterFactories,, +      List<CallAdapter.Factory> adapterFactories, Executor callbackExecutor,, +      boolean validateEagerly) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  final Executor callbackExecutor;, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  Retrofit(Call.Factory callFactory, BaseUrl baseUrl, List<Converter.Factory> converterFactories,, +      List<CallAdapter.Factory> adapterFactories, Executor callbackExecutor,, +      boolean validateEagerly) {, +++ b/retrofit/src/test/java/retrofit2/ToStringConverterFactory.java, +  static final MediaType MEDIA_TYPE = MediaType.parse("text/plain");]
[+++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Completable;, +import rx.Single;, + * Adding this class to {@link Retrofit} allows you to return an {@link Observable}, {@link Single},, + * or {@link Completable} from service methods., + * There are three configurations supported for the {@code Observable} or {@code Single} type, + * parameter:, + * <p>, + * <em>Note:</em> Support for {@link Single} and {@link Completable} is experimental and subject, + * to backwards-incompatible changes at any time since both of these types are not considered, + * stable by RxJava., +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Completable;, +import rx.Single;, + * Adding this class to {@link Retrofit} allows you to return an {@link Observable}, {@link Single},, + * or {@link Completable} from service methods., + * There are three configurations supported for the {@code Observable} or {@code Single} type, + * parameter:, + * <p>, + * <em>Note:</em> Support for {@link Single} and {@link Completable} is experimental and subject, + * to backwards-incompatible changes at any time since both of these types are not considered, + * stable by RxJava., +++ /dev/null, +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Completable;, +import rx.Single;, + * Adding this class to {@link Retrofit} allows you to return an {@link Observable}, {@link Single},, + * or {@link Completable} from service methods., + * There are three configurations supported for the {@code Observable} or {@code Single} type, + * parameter:, + * <p>, + * <em>Note:</em> Support for {@link Single} and {@link Completable} is experimental and subject, + * to backwards-incompatible changes at any time since both of these types are not considered, + * stable by RxJava., +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +import rx.observers.TestSubscriber;, +, +    TestSubscriber<Void> subscriber = new TestSubscriber<>();, +    service.completable().subscribe(subscriber);, +    subscriber.assertCompleted();, +    TestSubscriber<Void> subscriber = new TestSubscriber<>();, +    service.completable().subscribe(subscriber);, +    Throwable cause = subscriber.getOnErrorEvents().get(0);, +    TestSubscriber<Void> subscriber = new TestSubscriber<>();, +    service.completable().subscribe(subscriber);, +    subscriber.assertError(IOException.class);, +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Completable;, +import rx.Single;, + * Adding this class to {@link Retrofit} allows you to return an {@link Observable}, {@link Single},, + * or {@link Completable} from service methods., + * There are three configurations supported for the {@code Observable} or {@code Single} type]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final Object[] args;, +  OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final Object[] args;, +  OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(Object[] args) throws IOException {, +    int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final Object[] args;, +  OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(Object[] args) throws IOException {, +    int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          private final Object[] emptyArgs = new Object[0];, +            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final Object[] args;, +  OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(Object[] args) throws IOException {, +    int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          private final Object[] emptyArgs = new Object[0];, +            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +  abstract T invoke(Object[] args);]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java]
[+++ b/retrofit-adapters/guava/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>retrofit2.adapter.guava</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/retrofit-adapters/guava/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>retrofit2.adapter.guava</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/retrofit-adapters/java8/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>retrofit2.adapter.java8</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/retrofit-adapters/guava/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>retrofit2.adapter.guava</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/retrofit-adapters/java8/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>retrofit2.adapter.java8</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/retrofit-adapters/rxjava/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>retrofit2.adapter.rxjava</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/retrofit-adapters/guava/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.google.common.reflect.TypeToken;, +      return RequestBody.create(MediaType.parse("text/plain"), String.valueOf(object));, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.google.common.reflect.TypeToken;, +      return RequestBody.create(MediaType.parse("text/plain"), String.valueOf(object));, +++ b/retrofit-converters/gson/README.md, +Gson Converter, +==============, +, +A `Converter` which uses [Gson][1] for serialization to and from JSON., +, +A default `Gson` instance will be created or one can be configured and passed to the, +`GsonConverter` construction to further control the serialization., +, +, + [1]: https://github.com/google/gson, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.google.common.reflect.TypeToken;, +      return RequestBody.create(MediaType.parse("text/plain"), String.valueOf(object));, +++ b/retrofit-converters/gson/README.md, +Gson Converter, +==============, +, +A `Converter` which uses [Gson][1] for serialization to and from JSON., +, +A default `Gson` instance will be created or one can be configured and passed to the, +`GsonConverter` construction to further control the serialization., +, +, + [1]: https://github.com/google/gson, +++ b/retrofit-converters/gson/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-gson</artifactId>, +  <name>Converter: Gson</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.google.common.reflect.TypeToken;, +      return RequestBody.create(MediaType.parse("text/plain"), String.valueOf(object));, +++ b/retrofit-converters/gson/README.md, +Gson Converter, +==============, +, +A `Converter` which uses [Gson][1] for serialization to and from JSON., +, +A default `Gson` instance will be created or one can be configured and passed to the, +`GsonConverter` construction to further control the serialization., +, +, + [1]: https://github.com/google/gson, +++ b/retrofit-converters/gson/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>]
[+++ b/http/pom.xml, +    <version>0.8.0-SNAPSHOT</version>, +++ b/http/pom.xml, +    <version>0.8.0-SNAPSHOT</version>, +++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @param error message to show user, or null if no message was returned, +  void sessionExpired(ServerError error);, +   * @param error message to show user, or null if no message was returned, +  void serverError(ServerError error, int statusCode);, +, +, +  /** JSON object for parsing server error responses. */, +  static class ServerError {, +    public final String message;, +, +    public ServerError(String message) {, +      this.message = message;, +    }, +  }, +++ b/http/pom.xml, +    <version>0.8.0-SNAPSHOT</version>, +++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @param error message to show user, or null if no message was returned, +  void sessionExpired(ServerError error);, +   * @param error message to show user, or null if no message was returned, +  void serverError(ServerError error, int statusCode);, +, +, +  /** JSON object for parsing server error responses. */, +  static class ServerError {, +    public final String message;, +, +    public ServerError(String message) {, +      this.message = message;, +    }, +  }, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +import retrofit.http.Callback.ServerError;, +, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +    HttpEntity entity = response.getEntity();, +      if (entity != null) {, +        // TODO: Use specified encoding., +        String body = new String(HttpClients.entityToBytes(entity), "UTF-8");, +        LOGGER.fine("Session expired. Body: " + body + ". Request url " + requestUrl);, +        callback.sessionExpired(parseServerMessage(statusCode, body));, +      } else {, +        callback.sessionExpired(null);, +      }, +  private ServerError parseServerMessage(int statusCode, String body) {, +        return gson.fromJson(body, ServerError.class);, +++ b/http/pom.xml, +    <version>0.8.0-SNAPSHOT</version>, +++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @param error message to show user, or null if no message was returned, +  void sessionExpired(ServerError error);, +   * @param error message to show user, or null if no message was returned, +  void serverError(ServerError error, int statusCode);, +, +, +  /** JSON object for parsing server error responses. */, +  static class ServerError {, +    public final String message;, +, +    public ServerError(String message) {, +      this.message = message;, +    }, +  }, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +import retrofit.http.Callback.ServerError;, +, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +    HttpEntity entity = response.getEntity();, +      if (entity != null) {, +        // TODO: Use specified encoding., +        String body = new String(HttpClients.entityToBytes(entity), "UTF-8");, +        LOGGER.fine("Session expired. Body: " + body + ". Request url " + requestUrl);, +        callback.sessionExpired(parseServerMessage(statusCode, body));, +      } else {, +        callback.sessionExpired(null);, +      }, +  private ServerError parseServerMessage(int statusCode, String body) {, +        return gson.fromJson(body, ServerError.class);, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.Header;, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.ResponseHandler;, +import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;, +import org.apache.http.client.methods.HttpUriRequest;, +, +import javax.inject.Inject;]
[+++ b/pom.xml, +    <rxjava.version>0.17.1</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.17.1</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Subscriber;, +      return Observable.create(new Observable.OnSubscribe<Object>() {, +        @Override public void call(Subscriber<? super Object> subscriber) {, +            observable.subscribe(subscriber);, +            Observable.error(throwable).subscribe(subscriber);, +++ b/pom.xml, +    <rxjava.version>0.17.1</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Subscriber;, +      return Observable.create(new Observable.OnSubscribe<Object>() {, +        @Override public void call(Subscriber<? super Object> subscriber) {, +            observable.subscribe(subscriber);, +            Observable.error(throwable).subscribe(subscriber);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +import rx.functions.Action1;, +++ b/pom.xml, +    <rxjava.version>0.17.1</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Subscriber;, +      return Observable.create(new Observable.OnSubscribe<Object>() {, +        @Override public void call(Subscriber<? super Object> subscriber) {, +            observable.subscribe(subscriber);, +            Observable.error(throwable).subscribe(subscriber);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +import rx.functions.Action1;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import rx.Subscriber;, +      return Observable.create(new Observable.OnSubscribe<Object>() {, +        @Override public void call(Subscriber<? super Object> subscriber) {, +          if (subscriber.isUnsubscribed()) {, +            return;, +          }, +            if (subscriber.isUnsubscribed()) {, +              return;, +            }, +            subscriber.onNext(wrapper.responseBody);, +            subscriber.onCompleted();, +            subscriber.onError(e);, +++ b/pom.xml, +    <rxjava.version>0.17.1</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Subscriber;, +      return Observable.create(new Observable.OnSubscribe<Object>() {, +        @Override public void call(Subscriber<? super Object> subscriber) {, +            observable.subscribe(subscriber);, +            Observable.error(throwable).subscribe(subscriber);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +import rx.functions.Action1;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import rx.Subscriber;, +      return Observable.create(new Observable.OnSubscribe<Object>() {, +        @Override public void call(Subscriber<? super Object> subscriber) {, +          if (subscriber.isUnsubscribed()) {, +            return;, +          }, +            if (subscriber.isUnsubscribed()) {, +              return;, +            }, +            subscriber.onNext(wrapper.responseBody);, +            subscriber.onCompleted();, +            subscriber.onError(e);, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java, +import rx.functions.Action1;]
[+++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/modules/android/.gitignore, +android-ndk, +obj, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/modules/android/.gitignore, +android-ndk, +obj, +++ b/modules/android/README.jni, +The native portions of Retofit's Android module live in ./jni., +, +Building:, +, +  ./build-jni.sh, +, +Installation:, +, +  Copy ./libs to your Android project root., +, +Testing:, +, +  Run test_app on a device or emulator., +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/modules/android/.gitignore, +android-ndk, +obj, +++ b/modules/android/README.jni, +The native portions of Retofit's Android module live in ./jni., +, +Building:, +, +  ./build-jni.sh, +, +Installation:, +, +  Copy ./libs to your Android project root., +, +Testing:, +, +  Run test_app on a device or emulator., +++ b/modules/android/build-jni.sh, +#!/bin/sh, +, +if [ ! -d android-ndk ], +then, +  echo Downloading Android NDK..., +  curl http://dl.google.com/android/ndk/android-ndk-r5b-darwin-x86.tar.bz2 > /tmp/android-ndk.tgz, +  tar zxf /tmp/android-ndk.tgz -C /tmp, +  echo Extracting Android NDK..., +  mv /tmp/android-ndk-r5b ./android-ndk, +fi, +, +./android-ndk/ndk-build, +, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/modules/android/.gitignore, +android-ndk, +obj, +++ b/modules/android/README.jni, +The native portions of Retofit's Android module live in ./jni., +, +Building:, +, +  ./build-jni.sh, +, +Installation:, +, +  Copy ./libs to your Android project root., +, +Testing:, +, +  Run test_app on a device or emulator., +++ b/modules/android/build-jni.sh, +#!/bin/sh, +, +if [ ! -d android-ndk ], +then, +  echo Downloading Android NDK..., +  curl http://dl.google.com/android/ndk/android-ndk-r5b-darwin-x86.tar.bz2 > /tmp/android-ndk.tgz, +  tar zxf /tmp/android-ndk.tgz -C /tmp, +  echo Extracting Android NDK..., +  mv /tmp/android-ndk-r5b ./android-ndk, +fi, +, +./android-ndk/ndk-build, +, +++ b/modules/android/jni/Android.mk, +LOCAL_PATH := $(call my-dir), +, +include $(CLEAR_VARS), +, +LOCAL_MODULE    := retrofit, +LOCAL_SRC_FILES := retrofit.c, +]
[+++ b/android-native/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/pom.xml, +    <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc4</version>, +++ b/pom.xml, +    <version>0.6.0-rc4</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-rc4</version>]
[+++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +          callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +            callback.onFailure(BehaviorCall.this, behavior.failureException());, +            @Override public void onResponse(Call<T> call, Response<T> response) {, +                callback.onResponse(call, response);, +            @Override public void onFailure(Call<T> call, Throwable t) {, +                callback.onFailure(call, t);, +      @Override public void onResponse(Call<T> call, Response<T> response) {, +      @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +          callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +            callback.onFailure(BehaviorCall.this, behavior.failureException());, +            @Override public void onResponse(Call<T> call, Response<T> response) {, +                callback.onResponse(call, response);, +            @Override public void onFailure(Call<T> call, Throwable t) {, +                callback.onFailure(call, t);, +      @Override public void onResponse(Call<T> call, Response<T> response) {, +      @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +        callback.onResponse(this, response);, +        callback.onFailure(this, failure);, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +          callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +            callback.onFailure(BehaviorCall.this, behavior.failureException());, +            @Override public void onResponse(Call<T> call, Response<T> response) {, +                callback.onResponse(call, response);, +            @Override public void onFailure(Call<T> call, Throwable t) {, +                callback.onFailure(call, t);, +      @Override public void onResponse(Call<T> call, Response<T> response) {, +      @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +        callback.onResponse(this, response);, +        callback.onFailure(this, failure);, +++ b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +          callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +            callback.onFailure(BehaviorCall.this, behavior.failureException());, +            @Override public void onResponse(Call<T> call, Response<T> response) {, +                callback.onResponse(call, response);, +            @Override public void onFailure(Call<T> call, Throwable t) {, +                callback.onFailure(call, t);, +      @Override public void onResponse(Call<T> call, Response<T> response) {, +      @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +        callback.onResponse(this, response);, +        callback.onFailure(this, failure);, +++ b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +++ b/retrofit/src/main/java/retrofit2/Callback.java, +  void onResponse(Call<T> call, Response<T> response);]
[+++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile">, +        <property name="lineSeparator" value="lf" />, +    </module>]
[+++ b/pom.xml, +    <wire.version>1.0.1</wire.version>]
[+++ b/pom.xml, +    <jaxb.version>2.2.12</jaxb.version><!-- 2.3.0 breaks due to https://github.com/mojohaus/animal-sniffer/issues/29 -->, +        <groupId>javax.xml.bind</groupId>, +        <artifactId>jaxb-api</artifactId>, +        <version>${jaxb.version}</version>, +      </dependency>, +      <dependency>, +++ b/pom.xml, +    <jaxb.version>2.2.12</jaxb.version><!-- 2.3.0 breaks due to https://github.com/mojohaus/animal-sniffer/issues/29 -->, +        <groupId>javax.xml.bind</groupId>, +        <artifactId>jaxb-api</artifactId>, +        <version>${jaxb.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit-converters/jaxb/README.md, +JAXB Converter, +==============, +, +A `Converter` which uses [JAXB][1] for serialization to and from XML., +, +A default `JAXBContext` instance will be created or one can be configured and passed, +to `JaxbConverterFactory.create()` to further control the serialization., +, +, +Download, +--------, +, +Download [the latest JAR][2] or grab via [Maven][3]:, +```xml, +<dependency>, +  <groupId>com.squareup.retrofit2</groupId>, +  <artifactId>converter-jaxb</artifactId>, +  <version>latest.version</version>, +</dependency>, +```, +or [Gradle][3]:, +```groovy, +compile 'com.squareup.retrofit2:converter-jaxb:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [1]: https://github.com/javaee/jaxb-v2, + [2]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-jaxb&v=LATEST, + [3]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-jaxb%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/pom.xml, +    <jaxb.version>2.2.12</jaxb.version><!-- 2.3.0 breaks due to https://github.com/mojohaus/animal-sniffer/issues/29 -->, +        <groupId>javax.xml.bind</groupId>, +        <artifactId>jaxb-api</artifactId>, +        <version>${jaxb.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit-converters/jaxb/README.md, +JAXB Converter, +==============, +, +A `Converter` which uses [JAXB][1] for serialization to and from XML., +, +A default `JAXBContext` instance will be created or one can be configured and passed, +to `JaxbConverterFactory.create()` to further control the serialization., +, +, +Download, +--------, +, +Download [the latest JAR][2] or grab via [Maven][3]:, +```xml, +<dependency>, +  <groupId>com.squareup.retrofit2</groupId>, +  <artifactId>converter-jaxb</artifactId>, +  <version>latest.version</version>, +</dependency>, +```, +or [Gradle][3]:, +```groovy, +compile 'com.squareup.retrofit2:converter-jaxb:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [1]: https://github.com/javaee/jaxb-v2, + [2]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-jaxb&v=LATEST, + [3]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-jaxb%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/retrofit-converters/jaxb/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>2.4.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>]
[+++ b/pom.xml, +        <!-- Deployment Repository URLs (override in ~/.m2/settings.xml profile) -->, +        <retrofit.repo.id>example-nexus</retrofit.repo.id>, +        <retrofit.repo.url>http://example.com/releases</retrofit.repo.url>, +        <retrofit.snapshot.repo.id>example-nexus</retrofit.snapshot.repo.id>, +        <retrofit.snapshot.repo.url>http://example.com/snapshots</retrofit.snapshot.repo.url>, +        <repository>, +            <id>${retrofit.repo.id}</id>, +            <url>${retrofit.repo.url}</url>, +        </repository>, +            <id>${retrofit.snapshot.repo.id}</id>, +            <url>${retrofit.snapshot.repo.url}</url>]
[+++ b/pom.xml, +    <okhttp.version>2.0.0</okhttp.version>, +    <rxjava.version>0.19.2</rxjava.version>, +    <appengine.version>1.9.6</appengine.version>, +    <jackson.version>2.4.1</jackson.version>, +    <wire.version>1.5.1</wire.version>, +++ b/pom.xml, +    <okhttp.version>2.0.0</okhttp.version>, +    <rxjava.version>0.19.2</rxjava.version>, +    <appengine.version>1.9.6</appengine.version>, +    <jackson.version>2.4.1</jackson.version>, +    <wire.version>1.5.1</wire.version>, +++ b/retrofit-converters/wire/src/test/java/retrofit/converter/Person.java, +   * A list of the customer's phone numbers., +  public Person(String name, Integer id, String email, List<PhoneNumber> phone) {, +    this.name = name;, +    this.id = id;, +    this.email = email;, +    this.phone = immutableCopyOf(phone);, +  }, +, +    this(builder.name, builder.id, builder.email, builder.phone);, +    setBuilder(builder);, +    if (other == this) return true;, +      result = result * 37 + (phone != null ? phone.hashCode() : 1);, +    /**, +     * The customer's full name., +     */, +    /**, +     * The customer's ID number., +     */, +    /**, +     * Email address for the customer., +     */, +    /**, +     * A list of the customer's phone numbers., +     */, +      this.phone = checkForNulls(phone);, +  public enum PhoneType, +      implements ProtoEnum {, +    MOBILE(0),, +    HOME(1),, +    /**, +     * Could be phone or fax., +     */, +    WORK(2);, +, +    private final int value;, +, +    private PhoneType(int value) {, +      this.value = value;, +    }, +, +    @Override, +    public int getValue() {, +      return value;, +    }, +     * The customer's phone number., +    public PhoneNumber(String number, PhoneType type) {, +      this.number = number;, +      this.type = type;, +    }, +, +      this(builder.number, builder.type);, +      setBuilder(builder);, +      if (other == this) return true;, +      /**, +       * The customer's phone number., +       */, +      /**, +       * The type of phone stored here., +       */]
[+++ b/android-native/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/src/main/java/retrofit/http/GsonResponseHandler.java, +  private final String startTime;, +  private GsonResponseHandler(Gson gson, Type type, Callback<T> callback, String url,, +      String startTime) {, +    this.startTime = startTime;, +      String startTime) {, +    return new GsonResponseHandler<T>(gson, type, callback, url, startTime);, +        entity = HttpClients.copyAndLog(entity, url, startTime);, +++ b/android-native/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/src/main/java/retrofit/http/GsonResponseHandler.java, +  private final String startTime;, +  private GsonResponseHandler(Gson gson, Type type, Callback<T> callback, String url,, +      String startTime) {, +    this.startTime = startTime;, +      String startTime) {, +    return new GsonResponseHandler<T>(gson, type, callback, url, startTime);, +        entity = HttpClients.copyAndLog(entity, url, startTime);, +++ b/http/src/main/java/retrofit/http/HttpClients.java, +  public static HttpEntity copyAndLog(HttpEntity entity, String url, String startTime), +      LOGGER.fine("----Response from " + url + " at " + startTime + ":");, +++ b/android-native/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/src/main/java/retrofit/http/GsonResponseHandler.java, +  private final String startTime;, +  private GsonResponseHandler(Gson gson, Type type, Callback<T> callback, String url,, +      String startTime) {, +    this.startTime = startTime;, +      String startTime) {, +    return new GsonResponseHandler<T>(gson, type, callback, url, startTime);, +        entity = HttpClients.copyAndLog(entity, url, startTime);, +++ b/http/src/main/java/retrofit/http/HttpClients.java, +  public static HttpEntity copyAndLog(HttpEntity entity, String url, String startTime), +      LOGGER.fine("----Response from " + url + " at " + startTime + ":");, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +      return new SimpleDateFormat("HH:mm:ss");, +            GsonResponseHandler.create(gson, resultType, callback, url, startTime);, +++ b/android-native/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc5</version>, +++ b/http/src/main/java/retrofit/http/GsonResponseHandler.java, +  private final String startTime;, +  private GsonResponseHandler(Gson gson, Type type, Callback<T> callback, String url,, +      String startTime) {, +    this.startTime = startTime;, +      String startTime) {, +    return new GsonResponseHandler<T>(gson, type, callback, url, startTime);, +        entity = HttpClients.copyAndLog(entity, url, startTime);, +++ b/http/src/main/java/retrofit/http/HttpClients.java, +  public static HttpEntity copyAndLog(HttpEntity entity, String url, String startTime), +      LOGGER.fine("----Response from " + url + " at " + startTime + ":");, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +      return new SimpleDateFormat("HH:mm:ss");, +            GsonResponseHandler.create(gson, resultType, callback, url, startTime);, +++ b/io/pom.xml]
[+++ b/CHANGELOG.md, +Version 2.0.0-beta2 *(2015-09-28)*, +----------------------------------, +, + * New: Using a response type of `Void` (e.g., `Call<Void>`) will ignore and discard the response body. This, +   can be used when there will be no response body (such as in a 201 response) or whenever the body is not, +   needed. `@Head` requests are now forced to use this as their response type., + * New: `validateEagerly()` method on `Retrofit.Builder` will verify the correctness of all service methods, +   on calls to `create()` instead of lazily validating on first use., + * New: `Converter` is now parameterized over both 'from' and 'to' types with a single `convert` method., +   `Converter.Factory` is now an abstract class and has factory methods for both request body and response, +   body., + * New: `Converter.Factory` and `CallAdapter.Factory` now receive the method annotations when being created, +   for a return/response type and the parameter annotations when being created for a parameter type., + * New: `callAdapter()` method on `Retrofit` allows querying a `CallAdapter` for a given type. The, +   `nextCallAdapter()` method allows delegating to another `CallAdapter` from within a `CallAdapter.Factory`., +   This is useful for composing call adapters to incrementally build up behavior., + * New: `requestConverter()` and `responseConverter()` methods on `Retrofit` allow querying a `Converter` for, +   a given type., + * New: `onResponse` method in `Callback` now receives the `Retrofit` instance. Combined with the, +   `responseConverter()` method on `Retrofit`, this provides a way of deserializing an error body on `Response`., +   See the `DeserializeErrorBody` sample for an example., + * New: The `MoshiConverterFactory` has been updated for its v1.0.0., + * Fix: Using `ResponseBody` for the response type or `RequestBody` for a parameter type is now correctly, +   identified. Previously these types would erroneously be passed to the supplied converter., + * Fix: The encoding of `@Path` values has been corrected to conform to OkHttp's `HttpUrl`., + * Fix: Use form-data content disposition subtype for `@Multipart`., + * Fix: `Observable` and `Single`-based execution of requests now behave synchronously (and thus requires, +   `subscribeOn()` for running in the background)., + * Fix: Correct `GsonConverterFactory` to honor the configuration of the `Gson` instances (such as not, +   serializing null values, the default)., +, +, +++ b/CHANGELOG.md, +Version 2.0.0-beta2 *(2015-09-28)*, +----------------------------------, +, + * New: Using a response type of `Void` (e.g., `Call<Void>`) will ignore and discard the response body. This, +   can be used when there will be no response body (such as in a 201 response) or whenever the body is not, +   needed. `@Head` requests are now forced to use this as their response type., + * New: `validateEagerly()` method on `Retrofit.Builder` will verify the correctness of all service methods, +   on calls to `create()` instead of lazily validating on first use., + * New: `Converter` is now parameterized over both 'from' and 'to' types with a single `convert` method., +   `Converter.Factory` is now an abstract class and has factory methods for both request body and response, +   body., + * New: `Converter.Factory` and `CallAdapter.Factory` now receive the method annotations when being created, +   for a return/response type and the parameter annotations when being created for a parameter type., + * New: `callAdapter()` method on `Retrofit` allows querying a `CallAdapter` for a given type. The, +   `nextCallAdapter()` method allows delegating to another `CallAdapter` from within a `CallAdapter.Factory`., +   This is useful for composing call adapters to incrementally build up behavior., + * New: `requestConverter()` and `responseConverter()` methods on `Retrofit` allow querying a `Converter` for, +   a given type., + * New: `onResponse` method in `Callback` now receives the `Retrofit` instance. Combined with the, +   `responseConverter()` method on `Retrofit`, this provides a way of deserializing an error body on `Response`., +   See the `DeserializeErrorBody` sample for an example., + * New: The `MoshiConverterFactory` has been updated for its v1.0.0., + * Fix: Using `ResponseBody` for the response type or `RequestBody` for a parameter type is now correctly, +   identified. Previously these types would erroneously be passed to the supplied converter., + * Fix: The encoding of `@Path` values has been corrected to conform to OkHttp's `HttpUrl`., + * Fix: Use form-data content disposition subtype for `@Multipart`., + * Fix: `Observable` and `Single`-based execution of requests now behave synchronously (and thus requires, +   `subscribeOn()` for running in the background)., + * Fix: Correct `GsonConverterFactory` to honor the configuration of the `Gson` instances (such as not, +   serializing null values, the default)., +, +, +++ b/README.md, +  <version>2.0.0-beta2</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta2', +++ b/CHANGELOG.md, +Version 2.0.0-beta2 *(2015-09-28)*, +----------------------------------, +, + * New: Using a response type of `Void` (e.g., `Call<Void>`) will ignore and discard the response body. This, +   can be used when there will be no response body (such as in a 201 response) or whenever the body is not, +   needed. `@Head` requests are now forced to use this as their response type., + * New: `validateEagerly()` method on `Retrofit.Builder` will verify the correctness of all service methods, +   on calls to `create()` instead of lazily validating on first use., + * New: `Converter` is now parameterized over both 'from' and 'to' types with a single `convert` method., +   `Converter.Factory` is now an abstract class and has factory methods for both request body and response, +   body., + * New: `Converter.Factory` and `CallAdapter.Factory` now receive the method annotations when being created, +   for a return/response type and the parameter annotations when being created for a parameter type., + * New: `callAdapter()` method on `Retrofit` allows querying a `CallAdapter` for a given type. The, +   `nextCallAdapter()` method allows delegating to another `CallAdapter` from within a `CallAdapter.Factory`., +   This is useful for composing call adapters to incrementally build up behavior., + * New: `requestConverter()` and `responseConverter()` methods on `Retrofit` allow querying a `Converter` for, +   a given type., + * New: `onResponse` method in `Callback` now receives the `Retrofit` instance. Combined with the, +   `responseConverter()` method on `Retrofit`, this provides a way of deserializing an error body on `Response`., +   See the `DeserializeErrorBody` sample for an example., + * New: The `MoshiConverterFactory` has been updated for its v1.0.0., + * Fix: Using `ResponseBody` for the response type or `RequestBody` for a parameter type is now correctly, +   identified. Previously these types would erroneously be passed to the supplied converter., + * Fix: The encoding of `@Path` values has been corrected to conform to OkHttp's `HttpUrl`., + * Fix: Use form-data content disposition subtype for `@Multipart`., + * Fix: `Observable` and `Single`-based execution of requests now behave synchronously (and thus requires, +   `subscribeOn()` for running in the background)., + * Fix: Correct `GsonConverterFactory` to honor the configuration of the `Gson` instances (such as not, +   serializing null values, the default).]
[+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.net.URI;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import javax.annotation.Nullable;, +import okhttp3.Headers;, +import okhttp3.HttpUrl;, +import okhttp3.MediaType;, +import okhttp3.MultipartBody;, +import okhttp3.RequestBody;, +import retrofit2.http.Body;, +import retrofit2.http.DELETE;, +import retrofit2.http.Field;, +import retrofit2.http.FieldMap;, +import retrofit2.http.FormUrlEncoded;, +import retrofit2.http.GET;, +import retrofit2.http.HEAD;, +import retrofit2.http.HTTP;, +import retrofit2.http.Header;, +import retrofit2.http.HeaderMap;, +import retrofit2.http.Multipart;, +import retrofit2.http.OPTIONS;, +import retrofit2.http.PATCH;, +import retrofit2.http.POST;, +import retrofit2.http.PUT;, +import retrofit2.http.Part;, +import retrofit2.http.PartMap;, +import retrofit2.http.Path;, +import retrofit2.http.Query;, +import retrofit2.http.QueryMap;, +import retrofit2.http.QueryName;, +import retrofit2.http.Url;, +, +final class RequestFactory {, +  static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {, +    return new Builder(retrofit, method).build();, +  }, +, +  private final HttpUrl baseUrl;, +  final String httpMethod;, +  private final String relativeUrl;, +  private final Headers headers;, +  private final MediaType contentType;, +  private final boolean hasBody;, +  private final boolean isFormEncoded;, +  private final boolean isMultipart;, +  private final ParameterHandler<?>[] parameterHandlers;, +, +  RequestFactory(Builder builder) {, +    baseUrl = builder.retrofit.baseUrl;, +    httpMethod = builder.httpMethod;, +    relativeUrl = builder.relativeUrl;, +    headers = builder.headers;, +    contentType = builder.contentType;, +    hasBody = builder.hasBody;, +    isFormEncoded = builder.isFormEncoded;, +    isMultipart = builder.isMultipart;, +    parameterHandlers = builder.parameterHandlers;, +  }, +, +  okhttp3.Request create(@Nullable Object[] args) throws IOException {, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +, +    @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types., +    ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;, +, +    int argumentCount = args != null ? args.length : 0;, +    if (argumentCount != handlers.length) {, +      throw new IllegalArgumentException("Argument count (" + argumentCount, +          + ") doesn't match expected count (" + handlers.length + ")");, +    }, +, +    for (int p = 0; p < argumentCount; p++) {, +      handlers[p].apply(requestBuilder, args[p]);]
[+++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +    doReturn(expectedAdapter).when(factory).stringConverter(type, annotations, retrofit);, +    verify(factory).stringConverter(type, annotations, retrofit);, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +    doReturn(expectedAdapter).when(factory).stringConverter(type, annotations, retrofit);, +    verify(factory).stringConverter(type, annotations, retrofit);, +++ b/retrofit/src/test/java/retrofit2/helpers/NonMatchingConverterFactory.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +    doReturn(expectedAdapter).when(factory).stringConverter(type, annotations, retrofit);, +    verify(factory).stringConverter(type, annotations, retrofit);, +++ b/retrofit/src/test/java/retrofit2/helpers/NonMatchingConverterFactory.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/samples/src/main/java/com/example/retrofit/JsonQueryParameters.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.annotation.Retention;, +import java.lang.reflect.Type;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;]
[+++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.1-SNAPSHOT</version>]
[+++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +++ b/modules/http/src/retrofit/http/RestAdapter.java, +  private static final Logger logger = Logger.getLogger(RestAdapter.class.getName());, +   * Adapts a Java interface to a REST API. HTTP requests happen in a background thread. Callbacks, +   * happen in the UI thread., +   * <p>Gets the relative path for a given method from a {@link GET}, {@link POST}, {@link PUT}, or, +   * {@link DELETE} annotation on the method. Gets the names of URL parameters from {@link, +   * com.google.inject.name.Named} annotations on the method parameters., +   * <p>The last method parameter should be of type {@link Callback}. The JSON HTTP response will be, +   * converted to the callback's parameter type using GSON. If the callback parameter type uses a, +   * wildcard, the lower bound will be used as the conversion type., +            return (T) Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[] {type},, +                handler);, +    @Override public Object invoke(Object proxy, final Method method, final Object[] args) {, +      final UiCallback<?> callback = UiCallback.create((Callback<?>) args[args.length - 1], mainThread);, +      try {, +        // Build the request (headers in particular) on the main thread., +        final HttpUriRequest request = new HttpRequestBuilder(gson).setMethod(method), +        // Execute HTTP request in the background., +        executor.execute(new Runnable() {, +          @Override public void run() {, +            backgroundInvoke(request, method, callback);, +          }, +        });, +      } catch (Throwable e) {, +        callback.unexpectedError(e);, +      }, +, +      // Methods should return void., +      return null;, +    }, +, +    private void backgroundInvoke(HttpUriRequest request, Method method, UiCallback<?> callback) {, +, +      try {, +        final Type resultType = getCallbackParameterType(method, genericParameterTypes);, +        logger.fine("Sending " + request.getMethod() + " to " + request.getURI());, +        ResponseHandler<Void> rh = (profiler == null) ? gsonResponseHandler, +            : createProfiler(gsonResponseHandler, profiler, method, server.apiUrl());, +    /** Wraps a {@code GsonResponseHandler} with a {@code ProfilingResponseHandler}. */, +    private ProfilingResponseHandler createProfiler(ResponseHandler<Void> handlerToWrap,]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      return;, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      return;, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +        } catch (OnCompletedFailedException, +            | OnErrorFailedException, +            | OnErrorNotImplementedException e) {, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      return;, +      } catch (OnCompletedFailedException, +          | OnErrorFailedException, +          | OnErrorNotImplementedException e) {, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +    } catch (OnCompletedFailedException, +        | OnErrorFailedException, +        | OnErrorNotImplementedException e) {, +      RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +      } catch (OnCompletedFailedException]
[+++ b/pom.xml, +  <version>1.0.1</version>, +++ b/pom.xml, +  <version>1.0.1</version>, +++ b/retrofit/pom.xml, +    <version>1.0.1</version>, +++ b/pom.xml, +  <version>1.0.1</version>, +++ b/retrofit/pom.xml, +    <version>1.0.1</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.1</version>, +++ b/pom.xml, +  <version>1.0.1</version>, +++ b/retrofit/pom.xml, +    <version>1.0.1</version>, +++ b/samples/github-client/pom.xml, +    <version>1.0.1</version>, +++ b/samples/pom.xml, +    <version>1.0.1</version>]
[+++ b/pom.xml, +        <gson.version>2.2.1</gson.version>]
[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final Converter<ResponseBody, T> responseConverter;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +      okhttp3.Call.Factory callFactory, Converter<ResponseBody, T> responseConverter) {, +    this.requestFactory = requestFactory;, +    this.callFactory = callFactory;, +    this.responseConverter = responseConverter;, +    return new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, +    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, +      T body = responseConverter.convert(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final Converter<ResponseBody, T> responseConverter;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +      okhttp3.Call.Factory callFactory, Converter<ResponseBody, T> responseConverter) {, +    this.requestFactory = requestFactory;, +    this.callFactory = callFactory;, +    this.responseConverter = responseConverter;, +    return new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, +    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, +      T body = responseConverter.convert(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +    return callAdapter.adapt(, +        new OkHttpCall<>(requestFactory, args, callFactory, responseConverter));]
[+++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/retrofit", +JDK="oraclejdk8", +BRANCH="master", +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/retrofit", +JDK="oraclejdk8", +BRANCH="master", +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/retrofit", +JDK="oraclejdk8", +BRANCH="master", +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +jdk:, +  - oraclejdk7, +  - oraclejdk8, +]
[+++ b/pom.xml, +    <gson.version>2.8.5</gson.version>]
[+++ b/retrofit-converters/moshi/pom.xml]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +      if (!isUnsubscribed()) {, +      }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +      if (!isUnsubscribed()) {, +      }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +import rx.functions.Action1;, +  @Test public void responseUnsubscribedDoesNotCallCompleted() throws InterruptedException {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    final RecordingSubscriber<Response<String>> subscriber = subscriberRule.create();, +    service.response(), +        .doOnNext(new Action1<Response<String>>() {, +          @Override, +          public void call(Response<String> response) {, +            subscriber.unsubscribe();, +          }, +        }), +        .subscribe(subscriber);, +, +    assertThat(subscriber.takeValue().body()).isEqualTo("Hi");, +  }, +]
[+++ b/pom.xml, +        <gson.version>2.1</gson.version>]
[+++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  private final @Nullable String relativeUrl;, +  private final @Nullable Headers headers;, +  private final @Nullable MediaType contentType;, +    @Nullable String httpMethod;, +    @Nullable String relativeUrl;, +    @Nullable Headers headers;, +    @Nullable MediaType contentType;, +    @Nullable Set<String> relativeUrlParamNames;, +    @Nullable ParameterHandler<?>[] parameterHandlers;, +    @Nullable, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  private final @Nullable String relativeUrl;, +  private final @Nullable Headers headers;, +  private final @Nullable MediaType contentType;, +    @Nullable String httpMethod;, +    @Nullable String relativeUrl;, +    @Nullable Headers headers;, +    @Nullable MediaType contentType;, +    @Nullable Set<String> relativeUrlParamNames;, +    @Nullable ParameterHandler<?>[] parameterHandlers;, +    @Nullable, +++ /dev/null, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  private final @Nullable String relativeUrl;, +  private final @Nullable Headers headers;, +  private final @Nullable MediaType contentType;, +    @Nullable String httpMethod;, +    @Nullable String relativeUrl;, +    @Nullable Headers headers;, +    @Nullable MediaType contentType;, +    @Nullable Set<String> relativeUrlParamNames;, +    @Nullable ParameterHandler<?>[] parameterHandlers;, +    @Nullable, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +        .addConverterFactory(new ObjectToNullConverterFactory()), +    assertThat(optional.isPresent()).isFalse();, +    assertThat(body).isNull();, +  }, +, +  static final class ObjectToNullConverterFactory extends Converter.Factory {, +    @Override public @Nullable Converter<ResponseBody, ?> responseBodyConverter(, +        Type type, Annotation[] annotations, Retrofit retrofit) {, +      if (type != Object.class) {, +        return null;, +      }, +      return new Converter<ResponseBody, Object>() {, +        @Override public Object convert(ResponseBody value) {, +          return null;]
[+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java, +    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())]
[+++ b/.idea/vcs.xml, +    <mapping directory="" vcs="Git" />, +++ b/.idea/vcs.xml, +    <mapping directory="" vcs="Git" />, +++ b/modules/io/src/retrofit/io/Files.java, +, +  /**, +   * Create the indicated directory, if it doesn't already exist., +   *, +   * @throws IllegalStateException if there is an error creating the directory., +   * @throws IllegalArgumentException if param represents a file instead, +   *  of a directory., +   */, +  public static void makeDirectory(File directory) {, +    if (!directory.exists()) {, +      if (!directory.mkdirs()) {, +        throw new IllegalStateException("Error creating " + directory + ".");, +      }, +    } else {, +      if (!directory.isDirectory()) {, +        throw new IllegalArgumentException("File " + directory +, +            " is not a directory");, +      }, +    }, +  }, +, +  /**, +   * Build a File object from the given parts, appending each path part to, +   * the preceding part., +   */, +  public static File build(File baseFile, String... parts) {, +    File file = baseFile;, +    for (String part : parts) {, +      file = new File(file, part);, +    }, +    return file;, +  }]
[+++ b/pom.xml, +    <moshi.version>1.1.0</moshi.version>]
[+++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.ProtoConverterFactory");, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.ProtoConverterFactory");, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.ProtoConverterFactory");, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.ProtoConverterFactory");, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.WireConverterFactory");, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.WireConverterFactory");, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.ProtoConverterFactory");, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.ProtoConverterFactory");, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.WireConverterFactory");, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.WireConverterFactory");, +++ b/retrofit/src/main/java/retrofit/BuiltInConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import retrofit.http.Streaming;, +, +final class BuiltInConverterFactory implements Converter.Factory {, +  @Override public Converter<?> get(Type type, Annotation[] annotations) {, +    if (!(type instanceof Class)) {, +      return null;, +    }, +    Class<?> cls = (Class<?>) type;, +    if (RequestBody.class.isAssignableFrom(cls)) {, +      return new OkHttpRequestBodyConverter();, +    }, +    if (cls == ResponseBody.class) {, +      boolean streaming = Utils.isAnnotationPresent(annotations, Streaming.class);, +      return new OkHttpResponseBodyConverter(streaming);, +    }, +    if (cls == Void.class) {, +      return new VoidConverter();, +    }, +    return null;, +  }, +}, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.ProtoConverterFactory");, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.ProtoConverterFactory");, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.WireConverterFactory");, +              + " * retrofit.BuiltInConverterFactory\n", +              + " * retrofit.WireConverterFactory");, +++ b/retrofit/src/main/java/retrofit/BuiltInConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;]
[+++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder(), +          .url("http://localhost"), +          .build();, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder(), +          .url("http://localhost"), +          .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder(), +          .url("http://localhost"), +          .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ /dev/null, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +      return new Request.Builder(), +          .url("http://localhost"), +          .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +import static retrofit2.Utils.checkNotNull;, +, +/**, + * A single invocation of a Retrofit service interface method. This class captures both the method, + * that was called and the arguments to the method., + *, + * <p>Retrofit automatically adds an invocation to each OkHttp request as a tag. You can retrieve, + * the invocation in an OkHttp interceptor for metrics and monitoring., + *, + * <pre><code>, + * class InvocationLogger implements Interceptor {, + *   &#64;Override public Response intercept(Chain chain) throws IOException {, + *     Request request = chain.request();, + *     Invocation invocation = request.tag(Invocation.class);, + *     if (invocation != null) {, + *       System.out.printf("%s.%s %s%n",, + *           invocation.method().getDeclaringClass().getSimpleName(),, + *           invocation.method().getName(), invocation.arguments());, + *     }, + *     return chain.proceed(request);, + *   }, + * }, + * </code></pre>, + *, + * <strong>Note:</strong> use caution when examining an invocation's arguments. Although the, + * arguments list is unmodifiable, the arguments themselves may be mutable. They may also be unsafe, + * for concurrent access. For best results declare Retrofit service interfaces using only immutable, + * types for parameters!, + */, +public final class Invocation {, +  private final Method method;, +  private final List<?> arguments;, +, +  public Invocation(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +, +    this.method = method;, +    this.arguments = Collections.unmodifiableList(new ArrayList<>(arguments)); // Immutable copy., +  }, +, +  public Method method() {, +    return method;, +  }, +]
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    /**, +     * Log the headers, body, and metadata for both requests and responses., +     * <p>, +     * Note: This requires that the entire request and response body be buffered in memory!, +     */, +  private final Server server;, +  private final Executor httpExecutor;, +  private final Executor callbackExecutor;, +  private final RequestInterceptor requestInterceptor;, +  private final Converter converter;, +  private final ErrorHandler errorHandler;, +  private final Log log;, +  private volatile LogLevel logLevel;, +    if (!service.isInterface()) {, +      throw new IllegalArgumentException("Only interface endpoint definitions are supported.");, +    }, +    // Prevent API interfaces from extending other interfaces. This not only avoids a bug in, +    // Android (http://b.android.com/58753) but it forces composition of API declarations which is, +    // the recommended pattern., +    if (service.getSuperclass() != null) {, +      throw new IllegalArgumentException("Interface definitions must not extend other interfaces.");, +    }, +        new RestHandler());, +    private final Map<Method, RestMethodInfo> methodDetailsCache =, +        new LinkedHashMap<Method, RestMethodInfo>();, +      final RestMethodInfo methodDetails;, +      synchronized (methodDetailsCache) {, +        RestMethodInfo tempMethodDetails = methodDetailsCache.get(method);, +        if (tempMethodDetails == null) {, +          tempMethodDetails = new RestMethodInfo(method);, +          methodDetailsCache.put(method, tempMethodDetails);, +        }, +        methodDetails = tempMethodDetails;, +      }, +      if (methodDetails.isSynchronous) {, +          return invokeRequest(requestInterceptor, methodDetails, args);, +          return (ResponseWrapper) invokeRequest(interceptorTape, methodDetails, args);, +        RestMethodInfo methodDetails, Object[] args) {, +      methodDetails.init(); // Ensure all relevant method information has been loaded., +        RequestBuilder requestBuilder = new RequestBuilder(converter, methodDetails);, +        if (!methodDetails.isSynchronous) {, +          request = logAndReplaceRequest(request);, +          RequestInformation requestInfo = getRequestInfo(serverUrl, methodDetails, request);, +        Type type = methodDetails.responseObjectType;, +            if (methodDetails.isSynchronous) {, +            if (methodDetails.isSynchronous) {, +        if (!methodDetails.isSynchronous) {, +  private Request logAndReplaceRequest(Request request) throws IOException {, +    log.log(String.format("---> HTTP %s %s", request.getMethod(), request.getUrl()));, +      log.log(String.format("---> END HTTP (%s-byte body)", bodySize));, +  private void logException(Throwable t, String url) {, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/checkstyle.xml, +          <property name="caseIndent" value="2"/>, +++ b/checkstyle.xml, +          <property name="caseIndent" value="2"/>, +++ b/pom.xml, +        <version>2.17</version>, +        <dependencies>, +          <dependency>, +            <groupId>com.puppycrawl.tools</groupId>, +            <artifactId>checkstyle</artifactId>, +            <version>7.3</version>, +          </dependency>, +        </dependencies>, +++ b/checkstyle.xml, +          <property name="caseIndent" value="2"/>, +++ b/pom.xml, +        <version>2.17</version>, +        <dependencies>, +          <dependency>, +            <groupId>com.puppycrawl.tools</groupId>, +            <artifactId>checkstyle</artifactId>, +            <version>7.3</version>, +          </dependency>, +        </dependencies>, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +    Builder(Retrofit retrofit, Method method) {, +++ b/checkstyle.xml, +          <property name="caseIndent" value="2"/>, +++ b/pom.xml, +        <version>2.17</version>, +        <dependencies>, +          <dependency>, +            <groupId>com.puppycrawl.tools</groupId>, +            <artifactId>checkstyle</artifactId>, +            <version>7.3</version>, +          </dependency>, +        </dependencies>, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +    Builder(Retrofit retrofit, Method method) {, +++ b/retrofit/src/main/java/retrofit2/Utils.java, +    ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments) {, +    GenericArrayTypeImpl(Type componentType) {, +    WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {, +++ b/checkstyle.xml, +          <property name="caseIndent" value="2"/>, +++ b/pom.xml, +        <version>2.17</version>, +        <dependencies>, +          <dependency>, +            <groupId>com.puppycrawl.tools</groupId>, +            <artifactId>checkstyle</artifactId>, +            <version>7.3</version>, +          </dependency>, +        </dependencies>, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +    Builder(Retrofit retrofit, Method method) {, +++ b/retrofit/src/main/java/retrofit2/Utils.java, +    ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments) {, +    GenericArrayTypeImpl(Type componentType) {, +    WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {, +++ b/samples/src/main/java/com/example/retrofit/Crawler.java, +    final String title;, +    final List<String> links;, +    Page(String title, List<String> links) {, +++ b/checkstyle.xml, +          <property name="caseIndent" value="2"/>, +++ b/pom.xml, +        <version>2.17</version>, +        <dependencies>, +          <dependency>, +            <groupId>com.puppycrawl.tools</groupId>, +            <artifactId>checkstyle</artifactId>, +            <version>7.3</version>, +          </dependency>, +        </dependencies>, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +    Builder(Retrofit retrofit, Method method) {, +++ b/retrofit/src/main/java/retrofit2/Utils.java, +    ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments) {, +    GenericArrayTypeImpl(Type componentType) {, +    WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {, +++ b/samples/src/main/java/com/example/retrofit/Crawler.java, +    final String title;, +    final List<String> links;, +    Page(String title, List<String> links) {, +++ b/samples/src/main/java/com/example/retrofit/JsonQueryParameters.java, +    final String userId;, +    Filter(String userId) {, +++ b/checkstyle.xml, +          <property name="caseIndent" value="2"/>, +++ b/pom.xml, +        <version>2.17</version>, +        <dependencies>, +          <dependency>, +            <groupId>com.puppycrawl.tools</groupId>, +            <artifactId>checkstyle</artifactId>, +            <version>7.3</version>, +          </dependency>, +        </dependencies>, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import java.io.IOException;, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Guava futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link ListenableFuture} from service, + * methods., + * <pre>{@code, + * interface MyService {, + *   &#64;GET("user/me"), + *   ListenableFuture<User> getUser(), + * }, + * }</pre>, + * There are two configurations supported for the {@code ListenableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code ListenableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link HttpException} errors for non-2XX responses, and sets {@link IOException}, + * for network errors.</li>, + * <li>Response wrapped body (e.g., {@code ListenableFuture<Response<User>>}) returns a, + * {@link Response} object for all HTTP responses and sets {@link IOException} for network, + * errors</li>, + * </ul>, + */, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import java.io.IOException;, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Guava futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link ListenableFuture} from service, + * methods., + * <pre>{@code, + * interface MyService {, + *   &#64;GET("user/me"), + *   ListenableFuture<User> getUser(), + * }, + * }</pre>, + * There are two configurations supported for the {@code ListenableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code ListenableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link HttpException} errors for non-2XX responses, and sets {@link IOException}, + * for network errors.</li>, + * <li>Response wrapped body (e.g., {@code ListenableFuture<Response<User>>}) returns a, + * {@link Response} object for all HTTP responses and sets {@link IOException} for network, + * errors</li>, + * </ul>, + */, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import java.io.IOException;, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Java 8 futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link CompletableFuture} from, + * service methods., + * <pre>{@code, + * interface MyService {, + *   &#64;GET("user/me"), + *   CompletableFuture<User> getUser(), + * }, + * }</pre>, + * There are two configurations supported for the {@code CompletableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code CompletableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link HttpException} errors for non-2XX responses, and sets {@link IOException}, + * for network errors.</li>, + * <li>Response wrapped body (e.g., {@code CompletableFuture<Response<User>>}) returns a, + * {@link Response} object for all HTTP responses and sets {@link IOException} for network, + * errors</li>, + * </ul>, + */, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import java.io.IOException;, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Guava futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link ListenableFuture} from service, + * methods., + * <pre>{@code, + * interface MyService {, + *   &#64;GET("user/me"), + *   ListenableFuture<User> getUser(), + * }, + * }</pre>, + * There are two configurations supported for the {@code ListenableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code ListenableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link HttpException} errors for non-2XX responses, and sets {@link IOException}, + * for network errors.</li>, + * <li>Response wrapped body (e.g., {@code ListenableFuture<Response<User>>}) returns a, + * {@link Response} object for all HTTP responses and sets {@link IOException} for network, + * errors</li>, + * </ul>, + */, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import java.io.IOException;, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Java 8 futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link CompletableFuture} from, + * service methods., + * <pre>{@code]
[+++ b/pom.xml, +    <okhttp.version>1.6.0</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/pom.xml, +    <okhttp.version>1.6.0</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/pom.xml, +    <okhttp.version>1.6.0</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */, +    boolean okUrlFactory = false;, +    try {, +      Class.forName("com.squareup.okhttp.OkUrlFactory");, +      okUrlFactory = true;, +    } catch (ClassNotFoundException e) {, +    }, +, +    boolean okHttpClient = false;, +      okHttpClient = true;, +, +    if (okHttpClient != okUrlFactory) {, +      throw new RuntimeException("", +          + "Retrofit detected an unsupported OkHttp on the classpath.\n", +          + "To use OkHttp with this version of Retrofit, you'll need:\n", +          + "1. com.squareup.okhttp:okhttp:1.6.0 (or newer)\n", +          + "2. com.squareup.okhttp:okhttp-urlconnection:1.6.0 (or newer)\n", +          + "Note that OkHttp 2.0.0+ is supported!");, +    }, +, +    return okHttpClient;, +++ b/pom.xml, +    <okhttp.version>1.6.0</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */, +    boolean okUrlFactory = false;, +    try {, +      Class.forName("com.squareup.okhttp.OkUrlFactory");, +      okUrlFactory = true;, +    } catch (ClassNotFoundException e) {, +    }, +, +    boolean okHttpClient = false;, +      okHttpClient = true;, +, +    if (okHttpClient != okUrlFactory) {, +      throw new RuntimeException("", +          + "Retrofit detected an unsupported OkHttp on the classpath.\n", +          + "To use OkHttp with this version of Retrofit, you'll need:\n", +          + "1. com.squareup.okhttp:okhttp:1.6.0 (or newer)\n", +          + "2. com.squareup.okhttp:okhttp-urlconnection:1.6.0 (or newer)\n", +          + "Note that OkHttp 2.0.0+ is supported!");, +    }, +, +    return okHttpClient;, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +import com.squareup.okhttp.OkUrlFactory;, +  private final OkUrlFactory okUrlFactory;, +    this.okUrlFactory = new OkUrlFactory(client);, +    return okUrlFactory.open(new URL(request.getUrl()));]
[+++ b/README.md, +public interface DummyService {, +Note that each method _must_ have a `Callback` object at the end of the parameter list.  This is how, +your application will handle the results of your network calls: errors and successful responses are, +both handled by the `Callback` interface., +your `MyJsonObject` will need to implement `TypedBytes`.  For convenience, you can extend, +`GsonRequestEntity` if you're just trying to send a JSON string in the request body., +++ b/README.md, +public interface DummyService {, +Note that each method _must_ have a `Callback` object at the end of the parameter list.  This is how, +your application will handle the results of your network calls: errors and successful responses are, +both handled by the `Callback` interface., +your `MyJsonObject` will need to implement `TypedBytes`.  For convenience, you can extend, +`GsonRequestEntity` if you're just trying to send a JSON string in the request body., +++ b/http/src/main/java/retrofit/http/Callback.java, +  static class ServerError {, +++ b/README.md, +public interface DummyService {, +Note that each method _must_ have a `Callback` object at the end of the parameter list.  This is how, +your application will handle the results of your network calls: errors and successful responses are, +both handled by the `Callback` interface., +your `MyJsonObject` will need to implement `TypedBytes`.  For convenience, you can extend, +`GsonRequestEntity` if you're just trying to send a JSON string in the request body., +++ b/http/src/main/java/retrofit/http/Callback.java, +  static class ServerError {, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpResponse;, +import org.apache.http.HttpStatus;, +import org.apache.http.StatusLine;, +import org.apache.http.client.ResponseHandler;, +import retrofit.http.Callback.ServerError;, +, +import java.io.IOException;, +import java.lang.reflect.Type;, +import java.text.DateFormat;, +import java.util.Date;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +/**, + * Support for response handlers that invoke {@link Callback}., + *, + * @author Bob Lee (bob@squareup.com), + * @author Jake Wharton (jw@squareup.com), + */, +class CallbackResponseHandler<R> implements ResponseHandler<Void> {, +, +  private static final Logger LOGGER = Logger.getLogger(CallbackResponseHandler.class.getName());, +, +  private final Callback<R> callback;, +  private final Type callbackType;, +  private final Converter converter;, +  private final String requestUrl; // Can be null., +  private final Date start;, +  private final ThreadLocal<DateFormat> dateFormat;, +, +  protected CallbackResponseHandler(Callback<R> callback, Type callbackType, Converter converter, String requestUrl,, +        Date start, ThreadLocal<DateFormat> dateFormat) {, +    this.callback = callback;, +    this.callbackType = callbackType;, +    this.converter = converter;, +    this.requestUrl = requestUrl;, +    this.start = start;, +    this.dateFormat = dateFormat;, +  }, +, +  /**, +   * Parses the HTTP entity and creates an object that will be passed to, +   * {@link Callback#call(R)}. Invoked in background thread., +   *, +   * @param entity HTTP entity to read and parse, not null, +   * @param type destination object type which is guaranteed to match <T>, +   * @return parsed response, +   * @throws ConversionException if the server returns an unexpected response, +   */, +  private Object parse(HttpEntity entity, Type type) throws ConversionException {, +    if (LOGGER.isLoggable(Level.FINE)) {, +      try {, +        entity = HttpClients.copyAndLog(entity, requestUrl, start, dateFormat.get());, +      } catch (IOException e) {, +        throw new RuntimeException(e);, +      }, +    }, +, +    return converter.to(entity, type);, +  }, +, +  @SuppressWarnings("unchecked") // Type is extracted from generic properties so cast is safe., +  public Void handleResponse(HttpResponse response) throws IOException {, +    // Note: An IOException thrown from here (while downloading the HTTP, +    // entity, for example) will propagate to the caller and be reported as a, +    // network error., +    //, +    // Callback methods actually execute in the main thread, so we don't, +    // have to worry about unhandled exceptions thrown by them., +]
[+++ b/pom.xml, +    <rxjava.version>1.1.5</rxjava.version>, +    <gson.version>2.7</gson.version>, +    <wire.version>2.2.0</wire.version>]
[+++ b/pom.xml, +    <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, +  <repositories>, +    <repository>, +      <id>sonatype-snapshots</id>, +      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, +    </repository>, +  </repositories>, +, +        <groupId>com.squareup.okhttp3</groupId>, +        <groupId>com.squareup.okhttp3</groupId>, +++ b/pom.xml, +    <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, +  <repositories>, +    <repository>, +      <id>sonatype-snapshots</id>, +      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, +    </repository>, +  </repositories>, +, +        <groupId>com.squareup.okhttp3</groupId>, +        <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +++ b/pom.xml, +    <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, +  <repositories>, +    <repository>, +      <id>sonatype-snapshots</id>, +      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, +    </repository>, +  </repositories>, +, +        <groupId>com.squareup.okhttp3</groupId>, +        <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +++ b/pom.xml, +    <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, +  <repositories>, +    <repository>, +      <id>sonatype-snapshots</id>, +      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, +    </repository>, +  </repositories>, +, +        <groupId>com.squareup.okhttp3</groupId>, +        <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +++ b/retrofit-converters/gson/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +++ b/pom.xml, +    <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, +  <repositories>, +    <repository>, +      <id>sonatype-snapshots</id>, +      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, +    </repository>, +  </repositories>, +, +        <groupId>com.squareup.okhttp3</groupId>, +        <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +++ b/retrofit-converters/gson/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/GsonConverterFactory.java, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +++ b/pom.xml, +    <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, +  <repositories>, +    <repository>, +      <id>sonatype-snapshots</id>, +      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, +    </repository>, +  </repositories>, +]
[+++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +import java.lang.reflect.Modifier;, +      if (!platform.isDefaultMethod(method) && !Modifier.isStatic(method.getModifiers())) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +import java.lang.reflect.Modifier;, +      if (!platform.isDefaultMethod(method) && !Modifier.isStatic(method.getModifiers())) {, +++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java, +  //  Response<String> response2 = example.user("Hi").execute();, +  //  assertThat(response2.body()).isEqualTo("Hi");, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +import java.lang.reflect.Modifier;, +      if (!platform.isDefaultMethod(method) && !Modifier.isStatic(method.getModifiers())) {, +++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java, +  //  Response<String> response2 = example.user("Hi").execute();, +  //  assertThat(response2.body()).isEqualTo("Hi");, +++ b/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +// TODO this test doesn't play nice in the IDE because it relies on Java 8 language features., +public final class Java8DefaultStaticMethodsInValidationTest {, +  //@Rule public final MockWebServer server = new MockWebServer();, +  //, +  //interface Example {, +  //  @GET("/") Call<String> user(@Query("name") String name);, +  //, +  //  default Call<String> user() {, +  //    return user("hey");, +  //  }, +  //, +  //  static String staticMethod() {, +  //    return "Hi";, +  //  }, +  //}, +  //, +  //@Test public void test() throws IOException {, +  //  Retrofit retrofit = new Retrofit.Builder(), +  //      .baseUrl(server.url("/")), +  //      .addConverterFactory(new ToStringConverterFactory()), +  //      .validateEagerly(true), +  //      .build();, +  //  Example example = retrofit.create(Example.class);, +  //}, +}]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +    } finally {, +      value.close();, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +    } finally {, +      value.close();, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +          t.printStackTrace();, +          t.printStackTrace();]
[+++ b/retrofit/src/main/java/retrofit2/BaseUrl.java, +package retrofit2;, +, +import okhttp3.HttpUrl;, +, +/** The base URL of the remote service. */, +public interface BaseUrl {, +  /**, +   * The base URL., +   * <p>, +   * Consumers will call this method every time they need to create a request allowing values, +   * to change over time., +   */, +  HttpUrl url();, +}, +++ b/retrofit/src/main/java/retrofit2/BaseUrl.java, +package retrofit2;, +, +import okhttp3.HttpUrl;, +, +/** The base URL of the remote service. */, +public interface BaseUrl {, +  /**, +   * The base URL., +   * <p>, +   * Consumers will call this method every time they need to create a request allowing values, +   * to change over time., +   */, +  HttpUrl url();, +}, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final BaseUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, BaseUrl baseUrl,, +  public BaseUrl baseUrl() {, +    private BaseUrl baseUrl;, +    public Builder baseUrl(final HttpUrl baseUrl) {, +      return baseUrl(new BaseUrl() {, +        @Override public HttpUrl url() {, +          return baseUrl;, +        }, +      });, +    }, +, +    /**, +     * Set an API base URL which can change over time., +     *, +     * @see #baseUrl(HttpUrl), +     */, +    public Builder baseUrl(BaseUrl baseUrl) {, +      this.baseUrl = checkNotNull(baseUrl, "baseUrl == null");, +++ b/retrofit/src/main/java/retrofit2/BaseUrl.java, +package retrofit2;, +, +import okhttp3.HttpUrl;, +, +/** The base URL of the remote service. */, +public interface BaseUrl {, +  /**, +   * The base URL., +   * <p>, +   * Consumers will call this method every time they need to create a request allowing values, +   * to change over time., +   */, +  HttpUrl url();, +}, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final BaseUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, BaseUrl baseUrl,, +  public BaseUrl baseUrl() {, +    private BaseUrl baseUrl;, +    public Builder baseUrl(final HttpUrl baseUrl) {, +      return baseUrl(new BaseUrl() {, +        @Override public HttpUrl url() {, +          return baseUrl;, +        }, +      });, +    }, +, +    /**, +     * Set an API base URL which can change over time., +     *, +     * @see #baseUrl(HttpUrl), +     */, +    public Builder baseUrl(BaseUrl baseUrl) {, +      this.baseUrl = checkNotNull(baseUrl, "baseUrl == null");, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +  private final BaseUrl baseUrl;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl.url(), relativeUrl,, +        headers, contentType, hasBody, isFormEncoded, isMultipart);, +++ b/retrofit/src/main/java/retrofit2/BaseUrl.java, +package retrofit2;, +, +import okhttp3.HttpUrl;, +, +/** The base URL of the remote service. */, +public interface BaseUrl {, +  /**, +   * The base URL., +   * <p>, +   * Consumers will call this method every time they need to create a request allowing values]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +++ b/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import org.jetbrains.annotations.NotNull;, +import static org.junit.Assert.assertTrue;, +  private final CallAdapter.Factory factory = new DefaultCallAdapterFactory(new Executor() {, +    @Override public void execute(@NotNull Runnable command) {, +      command.run();, +      @Override public Response<String> execute() {, +    final AtomicBoolean cloned = new AtomicBoolean();, +    Call<String> delegate = new EmptyCall() {, +      @Override public Call<String> clone() {, +        cloned.set(true);, +        return this;, +      }, +    };, +    assertThat(call.clone()).isNotSameAs(call);, +    assertTrue(cloned.get());, +    final AtomicBoolean canceled = new AtomicBoolean();, +    Call<String> delegate = new EmptyCall() {, +      @Override public void cancel() {, +        canceled.set(true);, +      }, +    };, +    assertTrue(canceled.get());, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +++ b/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import org.jetbrains.annotations.NotNull;, +import static org.junit.Assert.assertTrue;, +  private final CallAdapter.Factory factory = new DefaultCallAdapterFactory(new Executor() {, +    @Override public void execute(@NotNull Runnable command) {, +      command.run();, +      @Override public Response<String> execute() {, +    final AtomicBoolean cloned = new AtomicBoolean();, +    Call<String> delegate = new EmptyCall() {, +      @Override public Call<String> clone() {, +        cloned.set(true);, +        return this;, +      }, +    };, +    assertThat(call.clone()).isNotSameAs(call);, +    assertTrue(cloned.get());, +    final AtomicBoolean canceled = new AtomicBoolean();, +    Call<String> delegate = new EmptyCall() {, +      @Override public void cancel() {, +        canceled.set(true);, +      }, +    };, +    assertTrue(canceled.get());, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +import org.jetbrains.annotations.NotNull;, +import static org.junit.Assert.assertNotNull;, +    CallAdapter.Factory callAdapter = new CallAdapter.Factory() {, +      @Nullable @Override, +      public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +        throw new AssertionError();, +      }, +    };, +    Converter.Factory converter = new Converter.Factory() {};]
[+++ b/pom.xml, +    <jackson.version>2.7.1</jackson.version>]
[+++ b/retrofit/src/main/java/retrofit2/Converter.java, +     * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, +     * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/Converter.java, +     * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, +     * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class HeaderMap<T> extends ParameterHandler<Map<String, T>> {, +    private final Converter<T, String> valueConverter;, +, +    HeaderMap(Converter<T, String> valueConverter) {, +      this.valueConverter = valueConverter;, +    }, +, +    @Override void apply(RequestBuilder builder, Map<String, T> value) throws IOException {, +      if (value == null) {, +        throw new IllegalArgumentException("Header map was null.");, +      }, +, +      for (Map.Entry<String, T> entry : value.entrySet()) {, +        String headerName = entry.getKey();, +        if (headerName == null) {, +          throw new IllegalArgumentException("Header map contained null key.");, +        }, +        T headerValue = entry.getValue();, +        if (headerValue == null) {, +          throw new IllegalArgumentException(, +              "Header map contained null value for key '" + headerName + "'.");, +        }, +        builder.addHeader(headerName, valueConverter.convert(headerValue));, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +     * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, +     * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class HeaderMap<T> extends ParameterHandler<Map<String, T>> {, +    private final Converter<T, String> valueConverter;, +, +    HeaderMap(Converter<T, String> valueConverter) {, +      this.valueConverter = valueConverter;, +    }, +, +    @Override void apply(RequestBuilder builder, Map<String, T> value) throws IOException {, +      if (value == null) {, +        throw new IllegalArgumentException("Header map was null.");, +      }, +, +      for (Map.Entry<String, T> entry : value.entrySet()) {, +        String headerName = entry.getKey();, +        if (headerName == null) {, +          throw new IllegalArgumentException("Header map contained null key.");, +        }, +        T headerValue = entry.getValue();, +        if (headerValue == null) {, +          throw new IllegalArgumentException(, +              "Header map contained null value for key '" + headerName + "'.");, +        }, +        builder.addHeader(headerName, valueConverter.convert(headerValue));, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import retrofit2.http.HeaderMap;, +      } else if (annotation instanceof HeaderMap) {, +        Class<?> rawParameterType = Utils.getRawType(type);, +        if (!Map.class.isAssignableFrom(rawParameterType)) {, +          throw parameterError(p, "@HeaderMap parameter type must be Map.");, +        }, +        Type mapType = Utils.getSupertype(type, rawParameterType, Map.class);, +        if (!(mapType instanceof ParameterizedType)) {, +          throw parameterError(p, "Map must include generic types (e.g., Map<String, String>)");, +        }, +        ParameterizedType parameterizedType = (ParameterizedType) mapType;, +        Type keyType = Utils.getParameterUpperBound(0, parameterizedType);, +        if (String.class != keyType) {, +          throw parameterError(p, "@HeaderMap keys must be of type String: " + keyType);, +        }, +        Type valueType = Utils.getParameterUpperBound(1, parameterizedType);, +        Converter<?, String> valueConverter =, +            retrofit.stringConverter(valueType, annotations);, +, +        return new ParameterHandler.HeaderMap<>(valueConverter);, +, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +     * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, +     * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class HeaderMap<T> extends ParameterHandler<Map<String, T>> {, +    private final Converter<T, String> valueConverter;, +, +    HeaderMap(Converter<T, String> valueConverter) {, +      this.valueConverter = valueConverter;, +    }, +, +    @Override void apply(RequestBuilder builder, Map<String, T> value) throws IOException {, +      if (value == null) {]
[+++ b/pom.xml, +    <okhttp.version>3.9.0</okhttp.version>]
[+++ b/pom.xml]
[+++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      throw new ConversionException("Response content type was not a proto: " + mimeType);, +      throw new ConversionException(c.getName() + ".parseFrom() failed", e.getCause());, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      throw new ConversionException("Response content type was not a proto: " + mimeType);, +      throw new ConversionException(c.getName() + ".parseFrom() failed", e.getCause());, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +    } catch (ConversionException expected) {, +    } catch (ConversionException e) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      throw new ConversionException("Response content type was not a proto: " + mimeType);, +      throw new ConversionException(c.getName() + ".parseFrom() failed", e.getCause());, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +    } catch (ConversionException expected) {, +    } catch (ConversionException e) {, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      throw new ConversionException(e);, +      } catch (IOException e) {, +        throw new AssertionError(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-java8</artifactId>, +  <name>Adapter: Java 8</name>, +, +  <properties>, +    <java.version>1.8</java.version>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-maven-plugin</artifactId>, +        <version>${animal.sniffer.version}</version>, +        <configuration>, +          <signature>, +            <groupId>org.kaazing.mojo.signature</groupId>, +            <artifactId>java18</artifactId>, +            <version>1.0</version>, +          </signature>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-java8</artifactId>, +  <name>Adapter: Java 8</name>, +, +  <properties>, +    <java.version>1.8</java.version>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>]
[+++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/io/src/test/java/retrofit/internal/ObjectsTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/io/src/test/java/retrofit/internal/ObjectsTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/io/src/test/java/retrofit/io/FilesTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/io/src/test/java/retrofit/internal/ObjectsTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/io/src/test/java/retrofit/io/FilesTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/io/src/test/java/retrofit/io/TypedByteArrayTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/io/src/test/java/retrofit/internal/ObjectsTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/io/src/test/java/retrofit/io/FilesTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/io/src/test/java/retrofit/io/TypedByteArrayTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/src/test/java/retrofit/io/TypedFileTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +      assertThat(tempFile.length()).isEqualTo(5);, +++ b/http/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/pom.xml, +      <artifactId>fest-assert-core</artifactId>, +++ b/io/src/test/java/retrofit/internal/ObjectsTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/io/src/test/java/retrofit/io/FilesTest.java]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.atomic.AtomicBoolean;, +  /**, +   * Invokes {@code callable} once for the returned {@link Call} and once for each instance that is, +   * obtained from {@linkplain Call#clone() cloning} the returned {@link Call}., +   */, +  public static <T> Call<T> defer(Callable<Call<T>> callable) {, +    return new DeferredCall<>(callable);, +  }, +, +    return new FakeCall<>(Response.success(successValue), null);, +  public static <T> Call<T> response(Response<T> response) {, +    return new FakeCall<>(response, null);, +  public static <T> Call<T> failure(IOException failure) {, +    return new FakeCall<>(null, failure);, +, +  static final class FakeCall<T> implements Call<T> {, +    private final Response<T> response;, +    private final IOException error;, +    private final AtomicBoolean canceled = new AtomicBoolean();, +    private final AtomicBoolean executed = new AtomicBoolean();, +, +    FakeCall(Response<T> response, IOException error) {, +      if ((response == null) == (error == null)) {, +        throw new AssertionError("Only one of response or error can be set.");, +      }, +      this.response = response;, +      this.error = error;, +    }, +, +    @Override public Response<T> execute() throws IOException {, +      if (!executed.compareAndSet(false, true)) {, +        throw new IllegalStateException("Already executed");, +      }, +      if (canceled.get()) {, +        throw new IOException("canceled");, +      }, +      if (response != null) {, +        return response;, +      }, +      throw error;, +    }, +, +    @Override public void enqueue(Callback<T> callback) {, +      if (callback == null) {, +        throw new NullPointerException("callback == null");, +      }, +      if (!executed.compareAndSet(false, true)) {, +        throw new IllegalStateException("Already executed");, +      }, +      if (canceled.get()) {, +        callback.onFailure(this, new IOException("canceled"));, +      } else if (response != null) {, +        callback.onResponse(this, response);, +      } else {, +        callback.onFailure(this, error);, +      }, +    }, +, +    @Override public boolean isExecuted() {, +      return executed.get();, +    }, +, +    @Override public void cancel() {, +      canceled.set(true);, +    }, +, +    @Override public boolean isCanceled() {, +      return canceled.get();, +    }, +, +    @Override public Call<T> clone() {, +      return new FakeCall<>(response, error);, +    }, +, +    @Override public Request request() {, +      if (response != null) {, +        return response.raw().request();, +      }, +      return new Request.Builder().url("http://localhost").build();, +    }, +  }, +, +  static final class DeferredCall<T> implements Call<T> {, +    private final Callable<Call<T>> callable;, +    private Call<T> delegate;, +]
[+++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, +  boolean isStreaming;, +      } else if (annotationType == Streaming.class) {, +              "Only methods having %s as data type are allowed to have @%s annotation.",, +              Response.class.getSimpleName(), Streaming.class.getSimpleName());, +        isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, +  boolean isStreaming;, +      } else if (annotationType == Streaming.class) {, +              "Only methods having %s as data type are allowed to have @%s annotation.",, +              Response.class.getSimpleName(), Streaming.class.getSimpleName());, +        isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +/**, + * An HTTP response., + * <p>, + * When used directly as a data type for an interface method, the response body is buffered to a, + * {@code byte[]}. Annotate the method with {@link retrofit.http.Streaming @Streaming} for an, + * unbuffered stream from the network., + */, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, +  boolean isStreaming;, +      } else if (annotationType == Streaming.class) {, +              "Only methods having %s as data type are allowed to have @%s annotation.",, +              Response.class.getSimpleName(), Streaming.class.getSimpleName());, +        isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +/**, + * An HTTP response., + * <p>, + * When used directly as a data type for an interface method, the response body is buffered to a, + * {@code byte[]}. Annotate the method with {@link retrofit.http.Streaming @Streaming} for an, + * unbuffered stream from the network., + */, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, +  boolean isStreaming;, +      } else if (annotationType == Streaming.class) {, +              "Only methods having %s as data type are allowed to have @%s annotation.",, +              Response.class.getSimpleName(), Streaming.class.getSimpleName());, +        isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +/**, + * An HTTP response., + * <p>, + * When used directly as a data type for an interface method, the response body is buffered to a, + * {@code byte[]}. Annotate the method with {@link retrofit.http.Streaming @Streaming} for an, + * unbuffered stream from the network., + */, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Streaming.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.http;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Treat the response body on methods returning {@link retrofit.client.Response Response} as is,, + * i.e. without converting {@link retrofit.client.Response#getBody() getBody()} to {@code byte[]}., + */, +@Documented, +@Target(METHOD)]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final Object[] args;, +  OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final Object[] args;, +  OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(Object[] args) throws IOException {, +    int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final Object[] args;, +  OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(Object[] args) throws IOException {, +    int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          private final Object[] emptyArgs = new Object[0];, +            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +  @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final Object[] args;, +  OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(Object[] args) throws IOException {, +    int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          private final Object[] emptyArgs = new Object[0];, +            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +  abstract T invoke(Object[] args);]
[+++ b/pom.xml, +    <jackson.version>2.2.2</jackson.version>, +      <dependency>, +        <groupId>com.fasterxml.jackson.core</groupId>, +        <artifactId>jackson-databind</artifactId>, +        <version>${jackson.version}</version>, +     </dependency>, +, +++ b/pom.xml, +    <jackson.version>2.2.2</jackson.version>, +      <dependency>, +        <groupId>com.fasterxml.jackson.core</groupId>, +        <artifactId>jackson-databind</artifactId>, +        <version>${jackson.version}</version>, +     </dependency>, +, +++ b/retrofit-converters/jackson/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>1.1.2-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-jackson</artifactId>, +  <name>Converter: Jackson</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.fasterxml.jackson.core</groupId>, +      <artifactId>jackson-databind</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <jackson.version>2.2.2</jackson.version>, +      <dependency>, +        <groupId>com.fasterxml.jackson.core</groupId>, +        <artifactId>jackson-databind</artifactId>, +        <version>${jackson.version}</version>, +     </dependency>, +, +++ b/retrofit-converters/jackson/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>1.1.2-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-jackson</artifactId>, +  <name>Converter: Jackson</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.fasterxml.jackson.core</groupId>, +      <artifactId>jackson-databind</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>]
[+++ b/CHANGELOG.md, +Version 1.9.0 *(2015-01-07)*, +----------------------------, +, + * Update to OkHttp 2.x's native API. If you are using OkHttp you must use version 2.0 or newer (the latest, +   is 2.2 at time of writing) and you no longer need to use the `okhttp-urlconnection` shim., + * New: Allow disabling Simple XML Framework's strict parsing., + * New: `@Header` now accepts a `List` or array for a type., + * New: `@Field` and `@FieldMap` now ahve options for enabling or disabling URL encoding of names and values., + * Fix: Remove query parameters from thread name when running background requests for asynchronous use., +, +, +++ b/CHANGELOG.md, +Version 1.9.0 *(2015-01-07)*, +----------------------------, +, + * Update to OkHttp 2.x's native API. If you are using OkHttp you must use version 2.0 or newer (the latest, +   is 2.2 at time of writing) and you no longer need to use the `okhttp-urlconnection` shim., + * New: Allow disabling Simple XML Framework's strict parsing., + * New: `@Header` now accepts a `List` or array for a type., + * New: `@Field` and `@FieldMap` now ahve options for enabling or disabling URL encoding of names and values., + * Fix: Remove query parameters from thread name when running background requests for asynchronous use., +, +, +++ b/README.md, +  <version>1.9.0</version>, +compile 'com.squareup.retrofit:retrofit:1.9.0', +++ b/CHANGELOG.md, +Version 1.9.0 *(2015-01-07)*, +----------------------------, +, + * Update to OkHttp 2.x's native API. If you are using OkHttp you must use version 2.0 or newer (the latest, +   is 2.2 at time of writing) and you no longer need to use the `okhttp-urlconnection` shim., + * New: Allow disabling Simple XML Framework's strict parsing., + * New: `@Header` now accepts a `List` or array for a type., + * New: `@Field` and `@FieldMap` now ahve options for enabling or disabling URL encoding of names and values., + * Fix: Remove query parameters from thread name when running background requests for asynchronous use., +, +, +++ b/README.md, +  <version>1.9.0</version>, +compile 'com.squareup.retrofit:retrofit:1.9.0', +++ b/pom.xml, +  <version>1.9.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.9.0 *(2015-01-07)*, +----------------------------, +, + * Update to OkHttp 2.x's native API. If you are using OkHttp you must use version 2.0 or newer (the latest, +   is 2.2 at time of writing) and you no longer need to use the `okhttp-urlconnection` shim., + * New: Allow disabling Simple XML Framework's strict parsing., + * New: `@Header` now accepts a `List` or array for a type., + * New: `@Field` and `@FieldMap` now ahve options for enabling or disabling URL encoding of names and values., + * Fix: Remove query parameters from thread name when running background requests for asynchronous use., +, +, +++ b/README.md, +  <version>1.9.0</version>, +compile 'com.squareup.retrofit:retrofit:1.9.0', +++ b/pom.xml, +  <version>1.9.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.9.0 *(2015-01-07)*, +----------------------------, +, + * Update to OkHttp 2.x's native API. If you are using OkHttp you must use version 2.0 or newer (the latest, +   is 2.2 at time of writing) and you no longer need to use the `okhttp-urlconnection` shim., + * New: Allow disabling Simple XML Framework's strict parsing., + * New: `@Header` now accepts a `List` or array for a type., + * New: `@Field` and `@FieldMap` now ahve options for enabling or disabling URL encoding of names and values., + * Fix: Remove query parameters from thread name when running background requests for asynchronous use., +, +, +++ b/README.md, +  <version>1.9.0</version>, +compile 'com.squareup.retrofit:retrofit:1.9.0', +++ b/pom.xml, +  <version>1.9.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.9.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.9.0 *(2015-01-07)*, +----------------------------, +, + * Update to OkHttp 2.x's native API. If you are using OkHttp you must use version 2.0 or newer (the latest, +   is 2.2 at time of writing) and you no longer need to use the `okhttp-urlconnection` shim., + * New: Allow disabling Simple XML Framework's strict parsing., + * New: `@Header` now accepts a `List` or array for a type., + * New: `@Field` and `@FieldMap` now ahve options for enabling or disabling URL encoding of names and values., + * Fix: Remove query parameters from thread name when running background requests for asynchronous use., +, +, +++ b/README.md, +  <version>1.9.0</version>, +compile 'com.squareup.retrofit:retrofit:1.9.0', +++ b/pom.xml]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import okhttp3.Request;, +  @Override public Request request() {, +    return delegate.request();, +  }, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import okhttp3.Request;, +  @Override public Request request() {, +    return delegate.request();, +  }, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import okhttp3.Request;, +, +      @Override public Request request() {, +        return response.raw().request();, +      }, +, +      @Override public Request request() {, +        return new Request.Builder().url("http://localhost").build();, +      }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import okhttp3.Request;, +  @Override public Request request() {, +    return delegate.request();, +  }, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import okhttp3.Request;, +, +      @Override public Request request() {, +        return response.raw().request();, +      }, +, +      @Override public Request request() {, +        return new Request.Builder().url("http://localhost").build();, +      }, +++ b/retrofit/src/main/java/retrofit2/Call.java, +import okhttp3.Request;, +, +  /** The original HTTP request. */, +  Request request();, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import okhttp3.Request;, +  @Override public Request request() {, +    return delegate.request();, +  }, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import okhttp3.Request;, +, +      @Override public Request request() {, +        return response.raw().request();, +      }, +, +      @Override public Request request() {, +        return new Request.Builder().url("http://localhost").build();, +      }, +++ b/retrofit/src/main/java/retrofit2/Call.java, +import okhttp3.Request;, +, +  /** The original HTTP request. */, +  Request request();, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import okhttp3.Request;, +, +    @Override public Request request() {, +      return delegate.request();, +    }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import okhttp3.Request;, +  @Override public Request request() {, +    return delegate.request();, +  }, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import okhttp3.Request;, +, +      @Override public Request request() {, +        return response.raw().request();, +      }, +, +      @Override public Request request() {, +        return new Request.Builder().url("http://localhost").build();, +      }, +++ b/retrofit/src/main/java/retrofit2/Call.java, +import okhttp3.Request;, +, +  /** The original HTTP request. */, +  Request request();, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import okhttp3.Request;, +, +    @Override public Request request() {, +      return delegate.request();, +    }, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import okhttp3.Request;, +  // All guarded by this.]
[+++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, +    <list size="1">, +      <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, +    </list>, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, +    <list size="1">, +      <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, +    </list>, +++ b/.idea/scopes/scope_settings.xml, +<component name="DependencyValidationManager">, +  <state>, +    <option name="SKIP_IMPORT_STATEMENTS" value="false" />, +  </state>, +</component>, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, +    <list size="1">, +      <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, +    </list>, +++ b/.idea/scopes/scope_settings.xml, +<component name="DependencyValidationManager">, +  <state>, +    <option name="SKIP_IMPORT_STATEMENTS" value="false" />, +  </state>, +</component>, +++ b/modules/http/src-tests/retrofit/http/FetcherTest.java, +import retrofit.internal.gson.Gson;, +    Fetcher fetcher = new Fetcher(new Gson(), new Provider<HttpClient>() {, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, +    <list size="1">, +      <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, +    </list>, +++ b/.idea/scopes/scope_settings.xml, +<component name="DependencyValidationManager">, +  <state>, +    <option name="SKIP_IMPORT_STATEMENTS" value="false" />, +  </state>, +</component>, +++ b/modules/http/src-tests/retrofit/http/FetcherTest.java, +import retrofit.internal.gson.Gson;, +    Fetcher fetcher = new Fetcher(new Gson(), new Provider<HttpClient>() {, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import retrofit.internal.gson.Gson;, +, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +    return  new HttpRequestBuilder(new Gson()).setMethod(method), +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, +    <list size="1">, +      <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, +    </list>, +++ b/.idea/scopes/scope_settings.xml, +<component name="DependencyValidationManager">, +  <state>, +    <option name="SKIP_IMPORT_STATEMENTS" value="false" />, +  </state>, +</component>, +++ b/modules/http/src-tests/retrofit/http/FetcherTest.java, +import retrofit.internal.gson.Gson;, +    Fetcher fetcher = new Fetcher(new Gson(), new Provider<HttpClient>() {, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import retrofit.internal.gson.Gson;, +, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +    return  new HttpRequestBuilder(new Gson()).setMethod(method), +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import retrofit.internal.gson.Gson;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +, +import static org.easymock.EasyMock.*;, +  private Gson gson = new Gson();, +    expectResponseCalls(gson.toJson(response));, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, +    <list size="1">, +      <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, +    </list>, +++ b/.idea/scopes/scope_settings.xml, +<component name="DependencyValidationManager">]
[+++ b/pom.xml, +    <wire.version>1.0.1</wire.version>, +++ b/pom.xml, +    <wire.version>1.0.1</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, +    InputStream in = null;, +      in = body.in();, +      return wire.parseFrom(in, (Class<Message>) c);, +    } finally {, +      if (in != null) {, +        try {, +          in.close();, +        } catch (IOException ignored) {, +        }, +      }, +++ b/pom.xml, +    <wire.version>1.0.1</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, +    InputStream in = null;, +      in = body.in();, +      return wire.parseFrom(in, (Class<Message>) c);, +    } finally {, +      if (in != null) {, +        try {, +          in.close();, +        } catch (IOException ignored) {, +        }, +      }, +++ b/website/index.html, +              <li>URL paramater replacement and query parameter support</li>]
[+++ b/revision.properties, +# Note - with the next change, increment this to 0.5-SNAPSHOT, +retrofit.revision=0.4]
[+++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + * {@link retrofit.http.Query @Query}., +    /** Log the basic information along with request and response headers. */, +    HEADERS,, +        if (logLevel.ordinal() > LogLevel.NONE.ordinal()) {, +          // Log the request data., +        if (logLevel.ordinal() > LogLevel.NONE.ordinal()) {, +          // Log the response data., +    log.log(String.format("---> HTTP %s %s", request.getMethod(), request.getUrl()));, +    if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {, +      long bodySize = 0;, +        bodySize = body.length();, +        String bodyMime = body.mimeType();, +, +        if (bodyMime != null) {, +          log.log("Content-Type: " + bodyMime);, +        }, +        if (bodySize != -1) {, +          log.log("Content-Length: " + bodySize);, +        }, +, +        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {, +          if (!(body instanceof TypedByteArray)) {, +            // Read the entire response body to we can log it and replace the original response, +            request = Utils.readBodyToBytesIfNecessary(request);, +            body = request.getBody();, +          }, +          byte[] bodyBytes = ((TypedByteArray) body).getBytes();, +          String bodyCharset = MimeUtil.parseCharset(bodyMime);, +          String bodyString = new String(bodyBytes, bodyCharset);, +        }, +    }, +    return request;, +    log.log(String.format("<--- HTTP %s %s (%sms)", response.getStatus(), url, elapsedTime));, +    if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {, +      long bodySize = 0;, +        bodySize = body.length();, +, +        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {, +      }, +    }, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + * {@link retrofit.http.Query @Query}., +    /** Log the basic information along with request and response headers. */, +    HEADERS,, +        if (logLevel.ordinal() > LogLevel.NONE.ordinal()) {, +          // Log the request data., +        if (logLevel.ordinal() > LogLevel.NONE.ordinal()) {, +          // Log the response data., +    log.log(String.format("---> HTTP %s %s", request.getMethod(), request.getUrl()));, +    if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {, +      long bodySize = 0;, +        bodySize = body.length();, +        String bodyMime = body.mimeType();, +, +        if (bodyMime != null) {, +          log.log("Content-Type: " + bodyMime);, +        }, +        if (bodySize != -1) {, +          log.log("Content-Length: " + bodySize);, +        }, +, +        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {, +          if (!(body instanceof TypedByteArray)) {, +            // Read the entire response body to we can log it and replace the original response, +            request = Utils.readBodyToBytesIfNecessary(request);, +            body = request.getBody();, +          }, +          byte[] bodyBytes = ((TypedByteArray) body).getBytes();, +          String bodyCharset = MimeUtil.parseCharset(bodyMime);, +          String bodyString = new String(bodyBytes, bodyCharset);, +        }, +    }, +    return request;, +    log.log(String.format("<--- HTTP %s %s (%sms)", response.getStatus(), url, elapsedTime));, +    if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {, +      long bodySize = 0;, +        bodySize = body.length();, +, +        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {, +      }, +    }, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java]
[+++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.3.0', + [1]: http://square.github.io/retrofit/, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.3.0', + [1]: http://square.github.io/retrofit/, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +  <url>http://github.com/square/retrofit/</url>, +    <url>http://github.com/square/retrofit</url>, +    <url>http://github.com/square/retrofit/issues</url>, +      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>, +    <url>http://squareup.com</url>, +        <version>2.5</version>, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.3.0', + [1]: http://square.github.io/retrofit/, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +  <url>http://github.com/square/retrofit/</url>, +    <url>http://github.com/square/retrofit</url>, +    <url>http://github.com/square/retrofit/issues</url>, +      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>, +    <url>http://squareup.com</url>, +        <version>2.5</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.3.0', + [1]: http://square.github.io/retrofit/, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +  <url>http://github.com/square/retrofit/</url>, +    <url>http://github.com/square/retrofit</url>, +    <url>http://github.com/square/retrofit/issues</url>, +      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>, +    <url>http://squareup.com</url>, +        <version>2.5</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.3.0', + [1]: http://square.github.io/retrofit/, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +  <url>http://github.com/square/retrofit/</url>, +    <url>http://github.com/square/retrofit</url>, +    <url>http://github.com/square/retrofit/issues</url>, +      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>, +    <url>http://squareup.com</url>, +        <version>2.5</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior.]
[+++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/pom.xml, +  <version>2.0.0-beta3</version>, +    <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/retrofit-converters/scalars/pom.xml, +    <version>2.0.0-beta3</version>, +++ b/pom.xml]
[+++ b/http/pom.xml, +            <scope>provided</scope>]
[+++ b/pom.xml, +    <kotlin.version>1.3.10</kotlin.version>, +    <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, +        <groupId>org.jetbrains.kotlinx</groupId>, +        <artifactId>kotlinx-coroutines-core</artifactId>, +        <version>${kotlinx.coroutines.version}</version>, +      </dependency>, +      <dependency>, +          <groupId>org.jetbrains.kotlin</groupId>, +          <artifactId>kotlin-maven-plugin</artifactId>, +          <version>${kotlin.version}</version>, +        </plugin>, +        <plugin>, +++ b/pom.xml, +    <kotlin.version>1.3.10</kotlin.version>, +    <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, +        <groupId>org.jetbrains.kotlinx</groupId>, +        <artifactId>kotlinx-coroutines-core</artifactId>, +        <version>${kotlinx.coroutines.version}</version>, +      </dependency>, +      <dependency>, +          <groupId>org.jetbrains.kotlin</groupId>, +          <artifactId>kotlin-maven-plugin</artifactId>, +          <version>${kotlin.version}</version>, +        </plugin>, +        <plugin>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.jetbrains.kotlinx</groupId>, +      <artifactId>kotlinx-coroutines-core</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/pom.xml, +    <kotlin.version>1.3.10</kotlin.version>, +    <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, +        <groupId>org.jetbrains.kotlinx</groupId>, +        <artifactId>kotlinx-coroutines-core</artifactId>, +        <version>${kotlinx.coroutines.version}</version>, +      </dependency>, +      <dependency>, +          <groupId>org.jetbrains.kotlin</groupId>, +          <artifactId>kotlin-maven-plugin</artifactId>, +          <version>${kotlin.version}</version>, +        </plugin>, +        <plugin>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.jetbrains.kotlinx</groupId>, +      <artifactId>kotlinx-coroutines-core</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import java.lang.reflect.ParameterizedType;, +import javax.annotation.Nullable;, +import kotlin.coroutines.Continuation;, +import okhttp3.Call;, +import static retrofit2.Utils.getRawType;, +abstract class HttpServiceMethod<ResponseT, ReturnT> extends ServiceMethod<ReturnT> {, +    CallAdapter<ResponseT, ReturnT> callAdapter = null;, +    boolean continuationWantsResponse = false;, +    boolean continuationBodyNullable = false;, +    Type responseType;, +    if (requestFactory.isKotlinSuspendFunction) {, +      Type[] parameterTypes = method.getGenericParameterTypes();, +      Type continuationType = parameterTypes[parameterTypes.length - 1];, +      responseType = Utils.getParameterLowerBound(0, (ParameterizedType) continuationType);, +      if (getRawType(responseType) == Response.class && responseType instanceof ParameterizedType) {, +        // Unwrap the actual body type from Response<T>., +        responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType);, +        continuationWantsResponse = true;, +      } else {, +        // TODO figure out if type is nullable or not, +        // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class), +        // Find the entry for method, +        // Determine if return type is nullable or not, +      }, +    } else {, +      callAdapter = createCallAdapter(retrofit, method);, +      responseType = callAdapter.responseType();, +    }, +, +    if (responseType == okhttp3.Response.class) {, +          + getRawType(responseType).getName(), +    if (responseType == Response.class) {, +      throw methodError(method, "Response must include generic type (e.g., Response<String>)");, +    }, +    // TODO support Unit for Kotlin?, +    if (callAdapter != null) {, +      return new CallAdapted<>(requestFactory, callFactory, callAdapter, responseConverter);, +    } else if (continuationWantsResponse) {, +      //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object., +      return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForResponse<>(requestFactory,, +          callFactory, responseConverter);, +    } else {, +      //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object., +      return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForBody<>(requestFactory,, +          callFactory, responseConverter, continuationBodyNullable);, +    }, +  HttpServiceMethod(RequestFactory requestFactory, Call.Factory callFactory,, +  @Override final @Nullable ReturnT invoke(Object[] args) {]
[+++ b/pom.xml, +    <android-maven.version>3.4.0</android-maven.version>]
[+++ b/pom.xml, +    <okhttp.version>1.6.0</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/pom.xml, +    <okhttp.version>1.6.0</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/pom.xml, +    <okhttp.version>1.6.0</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */, +    boolean okUrlFactory = false;, +    try {, +      Class.forName("com.squareup.okhttp.OkUrlFactory");, +      okUrlFactory = true;, +    } catch (ClassNotFoundException e) {, +    }, +, +    boolean okHttpClient = false;, +      okHttpClient = true;, +, +    if (okHttpClient != okUrlFactory) {, +      throw new RuntimeException("", +          + "Retrofit detected an unsupported OkHttp on the classpath.\n", +          + "To use OkHttp with this version of Retrofit, you'll need:\n", +          + "1. com.squareup.okhttp:okhttp:1.6.0 (or newer)\n", +          + "2. com.squareup.okhttp:okhttp-urlconnection:1.6.0 (or newer)\n", +          + "Note that OkHttp 2.0.0+ is supported!");, +    }, +, +    return okHttpClient;, +++ b/pom.xml, +    <okhttp.version>1.6.0</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */, +    boolean okUrlFactory = false;, +    try {, +      Class.forName("com.squareup.okhttp.OkUrlFactory");, +      okUrlFactory = true;, +    } catch (ClassNotFoundException e) {, +    }, +, +    boolean okHttpClient = false;, +      okHttpClient = true;, +, +    if (okHttpClient != okUrlFactory) {, +      throw new RuntimeException("", +          + "Retrofit detected an unsupported OkHttp on the classpath.\n", +          + "To use OkHttp with this version of Retrofit, you'll need:\n", +          + "1. com.squareup.okhttp:okhttp:1.6.0 (or newer)\n", +          + "2. com.squareup.okhttp:okhttp-urlconnection:1.6.0 (or newer)\n", +          + "Note that OkHttp 2.0.0+ is supported!");, +    }, +, +    return okHttpClient;, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +import com.squareup.okhttp.OkUrlFactory;, +  private final OkUrlFactory okUrlFactory;, +    this.okUrlFactory = new OkUrlFactory(client);, +    return okUrlFactory.open(new URL(request.getUrl()));]
[+++ b/pom.xml, +    <okhttp.version>1.3.0</okhttp.version>, +    <rxjava.version>0.16.1</rxjava.version>, +    <guava.version>16.0</guava.version>, +++ b/pom.xml, +    <okhttp.version>1.3.0</okhttp.version>, +    <rxjava.version>0.16.1</rxjava.version>, +    <guava.version>16.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import rx.schedulers.Schedulers;]
[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +import java.util.regex.Pattern;, +  /**, +   * Matches strings that contain {@code .} or {@code ..} as a complete path segment. This also, +   * matches dots in their percent-encoded form, {@code %2E}., +   *, +   * <p>It is okay to have these strings within a larger path segment (like {@code a..z} or {@code, +   * index.html}) but when alone they have a special meaning. A single dot resolves to no path, +   * segment so {@code /one/./three/} becomes {@code /one/three/}. A double-dot pops the preceding, +   * directory, so {@code /one/../three/} becomes {@code /three/}., +   *, +   * <p>We forbid these in Retrofit paths because they're likely to have the unintended effect., +   * For example, passing {@code ..} to {@code DELETE /account/book/{isbn}/} yields {@code DELETE, +   * /account/}., +   */, +  private static final Pattern PATH_TRAVERSAL = Pattern.compile("(.*/)?(\\.|%2e|%2E){1,2}(/.*)?");, +, +    String replacement = canonicalizeForPath(value, encoded);, +    String newRelativeUrl = relativeUrl.replace("{" + name + "}", replacement);, +    if (PATH_TRAVERSAL.matcher(newRelativeUrl).matches()) {, +      throw new IllegalArgumentException(, +          "@Path parameters shouldn't perform path traversal ('.' or '..'): " + value);, +    }, +    relativeUrl = newRelativeUrl;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +import java.util.regex.Pattern;, +  /**, +   * Matches strings that contain {@code .} or {@code ..} as a complete path segment. This also, +   * matches dots in their percent-encoded form, {@code %2E}., +   *, +   * <p>It is okay to have these strings within a larger path segment (like {@code a..z} or {@code, +   * index.html}) but when alone they have a special meaning. A single dot resolves to no path, +   * segment so {@code /one/./three/} becomes {@code /one/three/}. A double-dot pops the preceding, +   * directory, so {@code /one/../three/} becomes {@code /three/}., +   *, +   * <p>We forbid these in Retrofit paths because they're likely to have the unintended effect., +   * For example, passing {@code ..} to {@code DELETE /account/book/{isbn}/} yields {@code DELETE, +   * /account/}., +   */, +  private static final Pattern PATH_TRAVERSAL = Pattern.compile("(.*/)?(\\.|%2e|%2E){1,2}(/.*)?");, +, +    String replacement = canonicalizeForPath(value, encoded);, +    String newRelativeUrl = relativeUrl.replace("{" + name + "}", replacement);, +    if (PATH_TRAVERSAL.matcher(newRelativeUrl).matches()) {, +      throw new IllegalArgumentException(, +          "@Path parameters shouldn't perform path traversal ('.' or '..'): " + value);, +    }, +    relativeUrl = newRelativeUrl;, +++ b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java, +  @Test public void pathParametersAndPathTraversal() {, +    class Example {, +      @GET("/foo/bar/{ping}/") //, +      Call<ResponseBody> method(@Path(value = "ping") String ping) {, +        return null;, +      }, +    }, +, +    assertMalformedRequest(Example.class, ".");, +    assertMalformedRequest(Example.class, "..");, +, +    assertThat(buildRequest(Example.class, "./a").url().encodedPath()), +        .isEqualTo("/foo/bar/.%2Fa/");, +    assertThat(buildRequest(Example.class, "a/.").url().encodedPath()), +        .isEqualTo("/foo/bar/a%2F./");, +    assertThat(buildRequest(Example.class, "a/..").url().encodedPath()), +        .isEqualTo("/foo/bar/a%2F../");, +    assertThat(buildRequest(Example.class, "../a").url().encodedPath()), +        .isEqualTo("/foo/bar/..%2Fa/");, +    assertThat(buildRequest(Example.class, "..\\..").url().encodedPath()), +        .isEqualTo("/foo/bar/..%5C../");, +, +    assertThat(buildRequest(Example.class, "%2E").url().encodedPath()), +        .isEqualTo("/foo/bar/%252E/");, +    assertThat(buildRequest(Example.class, "%2E%2E").url().encodedPath()), +        .isEqualTo("/foo/bar/%252E%252E/");, +  }, +, +  @Test public void encodedPathParametersAndPathTraversal() {, +    class Example {, +      @GET("/foo/bar/{ping}/") //, +      Call<ResponseBody> method(@Path(value = "ping", encoded = true) String ping) {, +        return null;, +      }, +    }, +, +    assertMalformedRequest(Example.class, ".");, +    assertMalformedRequest(Example.class, "%2E");, +    assertMalformedRequest(Example.class, "%2e");, +    assertMalformedRequest(Example.class, "..");, +    assertMalformedRequest(Example.class, "%2E.");, +    assertMalformedRequest(Example.class, "%2e.");, +    assertMalformedRequest(Example.class, ".%2E");, +    assertMalformedRequest(Example.class, ".%2e");, +    assertMalformedRequest(Example.class, "%2E%2e");, +    assertMalformedRequest(Example.class, "%2e%2E");, +    assertMalformedRequest(Example.class, "./a");, +    assertMalformedRequest(Example.class, "a/.");, +    assertMalformedRequest(Example.class, "../a");, +    assertMalformedRequest(Example.class, "a/..");, +    assertMalformedRequest(Example.class, "a/../b");]
[+++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    if (objectMapper == null) throw new NullPointerException("objectMapper == null");, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +      return objectMapper.readValue(is, javaType);, +        is.close();, +  @Override public RequestBody toBody(Object object, Type type) {, +      return RequestBody.create(MEDIA_TYPE, json);, +      throw new RuntimeException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    if (objectMapper == null) throw new NullPointerException("objectMapper == null");, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +      return objectMapper.readValue(is, javaType);, +        is.close();, +  @Override public RequestBody toBody(Object object, Type type) {, +      return RequestBody.create(MEDIA_TYPE, json);, +      throw new RuntimeException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import okio.Buffer;, +import org.assertj.core.api.AbstractCharSequenceAssert;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    RequestBody body = converter.toBody(OBJECT, MyObject.class);, +    assertThat(body.contentType()).isEqualTo(MEDIA_TYPE);, +    assertBody(body).isEqualTo(JSON);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);, +    MyObject result = (MyObject) converter.fromBody(body, MyObject.class);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, "{\"foo\":\"bar\"}");, +      converter.fromBody(body, MyObject.class);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);, +      converter.fromBody(body, String.class);, +  private static AbstractCharSequenceAssert<?, String> assertBody(RequestBody body) throws IOException {, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    return assertThat(buffer.readUtf8());, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    if (objectMapper == null) throw new NullPointerException("objectMapper == null");, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +      return objectMapper.readValue(is, javaType);, +        is.close();, +  @Override public RequestBody toBody(Object object, Type type) {, +      return RequestBody.create(MEDIA_TYPE, json);, +      throw new RuntimeException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import okio.Buffer;, +import org.assertj.core.api.AbstractCharSequenceAssert;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    RequestBody body = converter.toBody(OBJECT, MyObject.class);, +    assertThat(body.contentType()).isEqualTo(MEDIA_TYPE);, +    assertBody(body).isEqualTo(JSON);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);, +    MyObject result = (MyObject) converter.fromBody(body, MyObject.class);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, "{\"foo\":\"bar\"}");, +      converter.fromBody(body, MyObject.class);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);, +      converter.fromBody(body, String.class);, +  private static AbstractCharSequenceAssert<?, String> assertBody(RequestBody body) throws IOException {, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    return assertThat(buffer.readUtf8());, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/x-protobuf");, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +      return parseFrom.invoke(null, is);, +    } finally {, +      try {, +        is.close();, +      } catch (IOException ignored) {, +      }, +  @Override public RequestBody toBody(Object object, Type type) {, +    return RequestBody.create(MEDIA_TYPE, bytes);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;]
[+++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <javax.inject.version>1</javax.inject.version>, +    <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import java.io.PrintWriter;, +import java.io.StringWriter;, +    FULL;, +, +    public boolean log() {, +      return this != NONE;, +    }, +        if (logLevel.log()) {, +        if (logLevel.log()) {, +        if (logLevel.log()) {, +          logException(e, url);, +        }, +        if (logLevel.log()) {, +          logException(t, url);, +        }, +  /** Log an exception that occurred during the processing of a request or response. */, +  private void logException(Throwable t, String url) {, +    log.log(String.format("---- ERROR %s", url));, +    StringWriter sw = new StringWriter();, +    t.printStackTrace(new PrintWriter(sw));, +    log.log(sw.toString());, +    log.log("---- END ERROR");, +  }, +]
[+++ b/.gitignore, +eclipsebin, +++ b/.gitignore, +eclipsebin, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +package retrofit.http;, +, +import com.google.gson.Gson;, +import com.google.inject.AbstractModule;, +import com.google.inject.Guice;, +import com.google.inject.Injector;, +import com.google.inject.name.Named;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +import junit.framework.TestCase;, +import org.apache.http.HttpMessage;, +import org.apache.http.HttpResponse;, +import org.apache.http.ProtocolVersion;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpDelete;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.client.methods.HttpPut;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.entity.StringEntity;, +import org.apache.http.message.BasicStatusLine;, +import org.easymock.Capture;, +import org.easymock.IAnswer;, +import org.junit.Before;, +import retrofit.core.Callback;, +import retrofit.core.MainThread;, +, +import static org.easymock.EasyMock.capture;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.expectLastCall;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.verify;, +import static retrofit.http.RestAdapter.service;, +, +public class RestAdapterTest extends TestCase {, +  private static final String ID = "123";, +  private static final String ENTITY = "entity";, +  private static final String ENTITY_PATH_PARAM = "entity/{id}";, +  private static final String BASE_URL = "http://host/api/entity";, +  private static final String PATH_URL_PREFIX = BASE_URL + "/";, +  private static final String GET_DELETE_SIMPLE_URL = BASE_URL + "?";, +, +  private Injector injector;, +  private HttpClient mockHttpClient;, +  private Executor mockExecutor;, +  private MainThread mockMainThread;, +  private Headers mockHeaders;, +  @SuppressWarnings("rawtypes") private Callback mockCallback;, +  private HttpResponse mockResponse;, +, +  @Override @Before public void setUp() throws Exception {, +    mockHttpClient = createMock(HttpClient.class);, +    mockExecutor   = createMock(Executor.class);, +    mockMainThread = createMock(MainThread.class);, +    mockHeaders    = createMock(Headers.class);, +    mockCallback   = createMock(Callback.class);, +    mockResponse   = createMock(HttpResponse.class);, +, +    injector = Guice.createInjector(, +        new AbstractModule() {, +          @Override protected void configure() {, +            bind(Server.class).toInstance(new Server("http://host/api/",, +                "http://host/web/", true));, +            bind(HttpClient.class).toInstance(mockHttpClient);, +            bind(Executor.class).toInstance(mockExecutor);, +            bind(MainThread.class).toInstance(mockMainThread);, +            bind(Headers.class).toInstance(mockHeaders);, +            install(service(DeleteService.class));, +            install(service(GetService.class));, +            install(service(PostService.class));, +            install(service(PutService.class));, +          }, +        });, +  }, +, +  @SuppressWarnings("unchecked"), +  public void testServiceDeleteSimple() throws IOException {, +    expectLifecycle(HttpDelete.class, GET_DELETE_SIMPLE_URL);, +    replayAll();, +, +    DeleteService service = injector.getInstance(DeleteService.class);, +    service.delete(mockCallback);, +    verifyAll();, +  }, +, +  @SuppressWarnings("unchecked"), +  public void testServiceDeleteParam() throws IOException {, +    expectLifecycle(HttpDelete.class, GET_DELETE_SIMPLE_URL + "id=" + ID);, +    replayAll();, +, +    DeleteService service = injector.getInstance(DeleteService.class);, +    service.deleteWithParam(ID, mockCallback);]
[+++ b/pom.xml, +  <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.4.1</version>, +++ b/pom.xml, +  <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.4.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.4.1</version>]
[+++ b/samples/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>adapter-rxjava</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>adapter-rxjava</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/src/main/java/com/example/retrofit/RxJavaObserveOnMainThread.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import retrofit2.Call;, +import retrofit2.CallAdapter;, +import retrofit2.Retrofit;, +import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;, +import rx.Observable;, +import rx.Scheduler;, +import rx.schedulers.Schedulers;, +, +import static rx.schedulers.Schedulers.io;, +, +public final class RxJavaObserveOnMainThread {, +  public static void main(String... args) {, +    Scheduler observeOn = Schedulers.computation(); // Or use mainThread() for Android., +, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl("http://example.com"), +        .addCallAdapterFactory(new ObserveOnMainCallAdapterFactory(observeOn)), +        .addCallAdapterFactory(RxJavaCallAdapterFactory.createWithScheduler(io())), +        .build();, +, +    // Services created with this instance that use Observable will execute on the 'io' scheduler, +    // and notify their observer on the 'computation' scheduler., +  }, +, +  static final class ObserveOnMainCallAdapterFactory extends CallAdapter.Factory {, +    final Scheduler scheduler;, +, +    ObserveOnMainCallAdapterFactory(Scheduler scheduler) {, +      this.scheduler = scheduler;, +    }, +, +    @Override, +    public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      if (getRawType(returnType) != Observable.class) {, +        return null; // Ignore non-Observable types., +      }, +, +      // Look up the next call adapter which would otherwise be used if this one was not present., +      //noinspection unchecked returnType checked above to be Observable., +      final CallAdapter<Object, Observable<?>> delegate =, +          (CallAdapter<Object, Observable<?>>) retrofit.nextCallAdapter(this, returnType,, +              annotations);, +, +      return new CallAdapter<Object, Object>() {, +        @Override public Object adapt(Call<Object> call) {, +          // Delegate to get the normal Observable..., +          Observable<?> o = delegate.adapt(call);, +          // ...and change it to send notifications to the observer on the specified scheduler., +          return o.observeOn(scheduler);, +        }, +, +        @Override public Type responseType() {, +          return delegate.responseType();, +        }, +      };, +    }, +  }, +}]
[+++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +  private final Server server;, +  private final Provider<HttpClient> httpClientProvider;, +  private final Executor executor;, +  private final MainThread mainThread;, +  private final Headers headers;, +  private final Gson gson;, +  private final HttpProfiler profiler;, +  private final ThreadLocal<SimpleDateFormat> dateFormat = new ThreadLocal<SimpleDateFormat>() {, +  @Inject, +  RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Executor executor,, +      MainThread mainThread, Headers headers, Gson gson, HttpProfiler profiler) {, +    this.server = server;, +    this.httpClientProvider = httpClientProvider;, +    this.executor = executor;, +    this.mainThread = mainThread;, +    this.headers = headers;, +    this.gson = gson;, +    this.profiler = profiler;, +  }, +, +   * javax.inject.Named} annotations on the method parameters., +++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +  private final Server server;, +  private final Provider<HttpClient> httpClientProvider;, +  private final Executor executor;, +  private final MainThread mainThread;, +  private final Headers headers;, +  private final Gson gson;, +  private final HttpProfiler profiler;, +  private final ThreadLocal<SimpleDateFormat> dateFormat = new ThreadLocal<SimpleDateFormat>() {, +  @Inject, +  RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Executor executor,, +      MainThread mainThread, Headers headers, Gson gson, HttpProfiler profiler) {, +    this.server = server;, +    this.httpClientProvider = httpClientProvider;, +    this.executor = executor;, +    this.mainThread = mainThread;, +    this.headers = headers;, +    this.gson = gson;, +    this.profiler = profiler;, +  }, +, +   * javax.inject.Named} annotations on the method parameters., +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import javax.inject.Named;, +++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +  private final Server server;, +  private final Provider<HttpClient> httpClientProvider;, +  private final Executor executor;, +  private final MainThread mainThread;, +  private final Headers headers;, +  private final Gson gson;, +  private final HttpProfiler profiler;, +  private final ThreadLocal<SimpleDateFormat> dateFormat = new ThreadLocal<SimpleDateFormat>() {, +  @Inject, +  RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Executor executor,, +      MainThread mainThread, Headers headers, Gson gson, HttpProfiler profiler) {, +    this.server = server;, +    this.httpClientProvider = httpClientProvider;, +    this.executor = executor;, +    this.mainThread = mainThread;, +    this.headers = headers;, +    this.gson = gson;, +    this.profiler = profiler;, +  }, +, +   * javax.inject.Named} annotations on the method parameters., +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import javax.inject.Named;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import javax.inject.Named;, +import javax.inject.Provider;, +  private RestAdapter restAdapter;, +    Server server = new Server("http://host/api/", "http://host/web/", true);, +    Provider<HttpClient> httpClientProvider = new Provider<HttpClient>() {, +      @Override public HttpClient get() {]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import retrofit2.Response;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +import rx.exceptions.CompositeException;, +import rx.exceptions.Exceptions;, +import rx.plugins.RxJavaPlugins;, +, +final class BodyOnSubscribe<T> implements OnSubscribe<T> {, +  private final OnSubscribe<Response<T>> upstream;, +, +  BodyOnSubscribe(OnSubscribe<Response<T>> upstream) {, +    this.upstream = upstream;, +  }, +, +  @Override public void call(Subscriber<? super T> subscriber) {, +    upstream.call(new BodySubscriber<>(subscriber));, +  }, +, +  private static class BodySubscriber<R> extends Subscriber<Response<R>> {, +    private final Subscriber<? super R> subscriber;, +    /** Indicates whether a terminal event has been sent to {@link #subscriber}. */, +    private boolean subscriberTerminated;, +, +    BodySubscriber(Subscriber<? super R> subscriber) {, +      super(subscriber);, +      this.subscriber = subscriber;, +    }, +, +    @Override public void onNext(Response<R> response) {, +      if (response.isSuccessful()) {, +        subscriber.onNext(response.body());, +      } else {, +        subscriberTerminated = true;, +        Throwable t = new HttpException(response);, +        try {, +          subscriber.onError(t);, +        } catch (Throwable inner) {, +          Exceptions.throwIfFatal(inner);, +          CompositeException composite = new CompositeException(t, inner);, +          RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, +        }, +      }, +    }, +, +    @Override public void onError(Throwable throwable) {, +      if (!subscriberTerminated) {, +        subscriber.onError(throwable);, +      } else {, +        // This should never happen! onNext handles and forwards errors automatically., +        Throwable broken = new AssertionError(, +            "This should never happen! Report as a Retrofit bug with the full stacktrace.");, +        //noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only., +        broken.initCause(throwable);, +        RxJavaPlugins.getInstance().getErrorHandler().handleError(broken);, +      }, +    }, +, +    @Override public void onCompleted() {, +      if (!subscriberTerminated) {, +        subscriber.onCompleted();, +      }, +    }, +  }, +}, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]
[+++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/pom.xml, +  <version>2.0.0-beta1</version>, +    <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-beta1</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <jackson.version>2.3.1</jackson.version>, +++ b/pom.xml, +    <jackson.version>2.3.1</jackson.version>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.lang.reflect.Type;, +import retrofit.mime.TypedByteArray;, +import retrofit.mime.TypedInput;, +import retrofit.mime.TypedOutput;, +  public JacksonConverter() {, +    this(new ObjectMapper());, +  }, +, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      JavaType javaType = objectMapper.getTypeFactory().constructType(type);, +    } catch (JsonParseException e) {, +    } catch (JsonMappingException e) {, +    } catch (IOException e) {, +      String json = objectMapper.writeValueAsString(object);, +    } catch (JsonProcessingException e) {, +    } catch (UnsupportedEncodingException e) {, +++ b/pom.xml, +    <jackson.version>2.3.1</jackson.version>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.lang.reflect.Type;, +import retrofit.mime.TypedByteArray;, +import retrofit.mime.TypedInput;, +import retrofit.mime.TypedOutput;, +  public JacksonConverter() {, +    this(new ObjectMapper());, +  }, +, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      JavaType javaType = objectMapper.getTypeFactory().constructType(type);, +    } catch (JsonParseException e) {, +    } catch (JsonMappingException e) {, +    } catch (IOException e) {, +      String json = objectMapper.writeValueAsString(object);, +    } catch (JsonProcessingException e) {, +    } catch (UnsupportedEncodingException e) {, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import com.fasterxml.jackson.annotation.JsonProperty;, +import static org.fest.assertions.api.Assertions.assertThat;, +  private static final MyObject OBJECT = new MyObject("hello world", 10);, +  private final String JSON = "{\"message\":\"hello world\",\"count\":10}";, +  private final JacksonConverter converter = new JacksonConverter();, +    TypedOutput typedOutput = converter.toBody(OBJECT);, +    assertThat(asString(typedOutput)).isEqualTo(JSON);, +    TypedInput input = new TypedByteArray(MIME_TYPE, JSON.getBytes());, +    MyObject result = (MyObject) converter.fromBody(input, MyObject.class);, +    assertThat(result).isEqualTo(OBJECT);, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +    TypedInput input = new TypedByteArray(MIME_TYPE, "{\"foo\":\"bar\"}".getBytes());, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +    TypedInput input = new TypedByteArray(MIME_TYPE, JSON.getBytes());, +    ByteArrayOutputStream bytes = new ByteArrayOutputStream();, +    @Override, +    public boolean equals(Object o) {, +      if (this == o) return true;, +      if (o == null || getClass() != o.getClass()) return false;, +      MyObject myObject = (MyObject) o;, +      return count == myObject.count, +          && !(message != null ? !message.equals(myObject.message) : myObject.message != null);, +      int result = message != null ? message.hashCode() : 0;, +      result = 31 * result + count;]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  private final Executor callbackExecutor;, +    private final Executor callbackExecutor;, +    private final Call<T> delegate;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  private final Executor callbackExecutor;, +    private final Executor callbackExecutor;, +    private final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    private IOException thrownException;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  private final Executor callbackExecutor;, +    private final Executor callbackExecutor;, +    private final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    private IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  private static String canonicalize(String input, boolean alreadyEncoded) {, +  private static void canonicalize(Buffer out, String input, int pos, int limit,, +      boolean alreadyEncoded) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  private final Executor callbackExecutor;, +    private final Executor callbackExecutor;, +    private final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    private IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  private static String canonicalize(String input, boolean alreadyEncoded) {, +  private static void canonicalize(Buffer out, String input, int pos, int limit,, +      boolean alreadyEncoded) {, +++ b/retrofit/src/main/java/retrofit2/RequestFactoryParser.java, +  private static Class<?> boxIfPrimitive(Class<?> type) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;]
[+++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlRequestBodyConverter.java, +    } catch (RuntimeException | IOException e) {, +      throw e;]
[+++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, +      checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, +      checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(response, "response == null");, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, +      checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(response, "response == null");, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, +      checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(response, "response == null");, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(relativeUrl, "@Url parameter is null.");, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, +      checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(response, "response == null");, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(relativeUrl, "@Url parameter is null.");, +++ b/retrofit/src/main/java/retrofit2/Response.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(headers, "headers == null");, +    checkNotNull(rawResponse, "rawResponse == null");, +    checkNotNull(body, "body == null");, +    checkNotNull(rawResponse, "rawResponse == null");, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, +      checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(response, "response == null");, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(relativeUrl, "@Url parameter is null.");, +++ b/retrofit/src/main/java/retrofit2/Response.java, +import static retrofit2.Utils.checkNotNull;, +, +    checkNotNull(headers, "headers == null");, +    checkNotNull(rawResponse, "rawResponse == null");, +    checkNotNull(body, "body == null");, +    checkNotNull(rawResponse, "rawResponse == null");, +++ b/retrofit/src/main/java/retrofit2/Utils.java, +    checkNotNull(type, "type == null");]
[+++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import retrofit.http.client.OkClient;, +, +      final Client client;, +      if (hasOkHttpOnClasspath()) {, +        client = OkClientInstantiator.instantiate();, +      } else {, +        client = new UrlConnectionClient();, +      }, +      if (hasOkHttpOnClasspath()) {, +        client = OkClientInstantiator.instantiate();, +      } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +, +  /** Determine whether or not OkHttp is present on the runtime classpath. */, +  private static boolean hasOkHttpOnClasspath() {, +    try {, +      Class.forName("com.squareup.okhttp.OkHttpClient");, +      return true;, +    } catch (ClassNotFoundException e) {]
[+++ b/CHANGELOG.md, +Version 2.0.0-beta4 *(2016-02-04)*, +----------------------------------, +, + * New: `Call` instance is now passed to both `onResponse` and `onFailure` methods of `Callback`. This aids, +   in detecting when `onFailure` is called as a result of `Call.cancel()` by checking `Call.isCanceled()`., + * New: `Call.request()` returns (optionally creating) the `Request` object for the call. Note: If this is, +   called before `Call.execute()` or `Call.enqueue()` this will do relatively expensive work synchronously., +   Doing so in performance-critical sections (like on the Android main thread) should be avoided., + * New: Support for the release version of OkHttp 3.0 and newer., + * New: `adapter-guava` module provides a `CallAdapter.Factory` for Guava's `ListenableFuture`., + * New: `adapter-java8` module provides a `CallAdapter.Factory` for Java 8's `CompleteableFuture`., + * New: `ScalarsConverterFactory` (from `converter-scalars` module) now supports parsing response bodies, +   into either `String`, the 8 primitive types, or the 8 boxed primitive types., + * New: Automatic support for sending callbacks to the iOS main thread when running via RoboVM., + * New: Method annotations are now passed to the factory for request body converters. This allows converters, +   to alter the structure of both request bodies and response bodies with a single method-level annotation., + * Each converter has been moved to its own package under `retrofit2.converter.<name>`. This prevents type, +   collisions when many converters are simultaneously in use., + * Fix: Exceptions thrown when unable to locate a `CallAdapter.Factory` for a method return type now, +   correctly list the `CallAdapter.Factory` instances checked., + * Fix: Ensure default methods on service interfaces can be invoked., + * Fix: Correctly resolve the generic parameter types of collection interfaces when subclasses of those, +   collections are used as method parameters., + * Fix: Do not encode `/` characters in `@Path` replacements when `encoded = true`., +, +, +   whether the callback was invoked from cancellation or actual transport failure., +++ b/CHANGELOG.md, +Version 2.0.0-beta4 *(2016-02-04)*, +----------------------------------, +, + * New: `Call` instance is now passed to both `onResponse` and `onFailure` methods of `Callback`. This aids, +   in detecting when `onFailure` is called as a result of `Call.cancel()` by checking `Call.isCanceled()`., + * New: `Call.request()` returns (optionally creating) the `Request` object for the call. Note: If this is, +   called before `Call.execute()` or `Call.enqueue()` this will do relatively expensive work synchronously., +   Doing so in performance-critical sections (like on the Android main thread) should be avoided., + * New: Support for the release version of OkHttp 3.0 and newer., + * New: `adapter-guava` module provides a `CallAdapter.Factory` for Guava's `ListenableFuture`., + * New: `adapter-java8` module provides a `CallAdapter.Factory` for Java 8's `CompleteableFuture`., + * New: `ScalarsConverterFactory` (from `converter-scalars` module) now supports parsing response bodies, +   into either `String`, the 8 primitive types, or the 8 boxed primitive types., + * New: Automatic support for sending callbacks to the iOS main thread when running via RoboVM., + * New: Method annotations are now passed to the factory for request body converters. This allows converters, +   to alter the structure of both request bodies and response bodies with a single method-level annotation., + * Each converter has been moved to its own package under `retrofit2.converter.<name>`. This prevents type, +   collisions when many converters are simultaneously in use., + * Fix: Exceptions thrown when unable to locate a `CallAdapter.Factory` for a method return type now, +   correctly list the `CallAdapter.Factory` instances checked., + * Fix: Ensure default methods on service interfaces can be invoked., + * Fix: Correctly resolve the generic parameter types of collection interfaces when subclasses of those, +   collections are used as method parameters., + * Fix: Do not encode `/` characters in `@Path` replacements when `encoded = true`., +, +, +   whether the callback was invoked from cancellation or actual transport failure., +++ b/README.md, +  <version>2.0.0-beta4</version>, +compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4', +++ b/CHANGELOG.md, +Version 2.0.0-beta4 *(2016-02-04)*, +----------------------------------, +, + * New: `Call` instance is now passed to both `onResponse` and `onFailure` methods of `Callback`. This aids, +   in detecting when `onFailure` is called as a result of `Call.cancel()` by checking `Call.isCanceled()`., + * New: `Call.request()` returns (optionally creating) the `Request` object for the call. Note: If this is, +   called before `Call.execute()` or `Call.enqueue()` this will do relatively expensive work synchronously., +   Doing so in performance-critical sections (like on the Android main thread) should be avoided., + * New: Support for the release version of OkHttp 3.0 and newer., + * New: `adapter-guava` module provides a `CallAdapter.Factory` for Guava's `ListenableFuture`., + * New: `adapter-java8` module provides a `CallAdapter.Factory` for Java 8's `CompleteableFuture`., + * New: `ScalarsConverterFactory` (from `converter-scalars` module) now supports parsing response bodies, +   into either `String`, the 8 primitive types, or the 8 boxed primitive types., + * New: Automatic support for sending callbacks to the iOS main thread when running via RoboVM., + * New: Method annotations are now passed to the factory for request body converters. This allows converters, +   to alter the structure of both request bodies and response bodies with a single method-level annotation., + * Each converter has been moved to its own package under `retrofit2.converter.<name>`. This prevents type, +   collisions when many converters are simultaneously in use., + * Fix: Exceptions thrown when unable to locate a `CallAdapter.Factory` for a method return type now, +   correctly list the `CallAdapter.Factory` instances checked., + * Fix: Ensure default methods on service interfaces can be invoked., + * Fix: Correctly resolve the generic parameter types of collection interfaces when subclasses of those, +   collections are used as method parameters., + * Fix: Do not encode `/` characters in `@Path` replacements when `encoded = true`., +, +, +   whether the callback was invoked from cancellation or actual transport failure., +++ b/README.md, +  <version>2.0.0-beta4</version>, +compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4', +++ b/pom.xml, +    <okhttp.version>3.1.2</okhttp.version>, +    <rxjava.version>1.1.1</rxjava.version>, +    <gson.version>2.6.1</gson.version>, +++ b/CHANGELOG.md, +Version 2.0.0-beta4 *(2016-02-04)*, +----------------------------------, +, + * New: `Call` instance is now passed to both `onResponse` and `onFailure` methods of `Callback`. This aids, +   in detecting when `onFailure` is called as a result of `Call.cancel()` by checking `Call.isCanceled()`.]
[+++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "text/plain; charset=UTF-8");, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "multipart/form-data; boundary=foobarbaz");, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "text/plain; charset=UTF-8");, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "multipart/form-data; boundary=foobarbaz");, +++ b/retrofit/src/test/java/retrofit/mime/MimeHelper.java, +, +  public static MultipartTypedOutput newMultipart(String boundary) {, +    return new MultipartTypedOutput(boundary);, +  }]
[+++ b/retrofit/src/main/java/retrofit/Callback.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import retrofit.client.Response;, +, +/**, + * Communicates responses to server or offline requests. Contains a callback method for each, + * possible outcome. One and only one method will be invoked in response to a given request., + *, + * @param <T> expected response type, + * @author Bob Lee (bob@squareup.com), + */, +public interface Callback<T> {, +, +  /** Successful HTTP response. */, +  void success(T t, Response response);, +, +  /**, +   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected, +   * exception., +   */, +  void failure(RetrofitError error);, +}, +++ b/retrofit/src/main/java/retrofit/Callback.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import retrofit.client.Response;, +, +/**, + * Communicates responses to server or offline requests. Contains a callback method for each, + * possible outcome. One and only one method will be invoked in response to a given request., + *, + * @param <T> expected response type, + * @author Bob Lee (bob@squareup.com), + */, +public interface Callback<T> {, +, +  /** Successful HTTP response. */, +  void success(T t, Response response);, +, +  /**, +   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected, +   * exception., +   */, +  void failure(RetrofitError error);, +}, +++ b/retrofit/src/main/java/retrofit/CallbackRunnable.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import java.util.concurrent.Executor;, +, +/**, + * A {@link Runnable} executed on a background thread to invoke {@link #obtainResponse()} which, + * performs an HTTP request. The response of the request, whether it be an object or exception, is, + * then marshaled to the supplied {@link Executor} in the form of a method call on a]
[+++ b/pom.xml, +  <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.0</version>]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXmlConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +, +/**, + * A {@link Converter} which uses SimpleXML for reading and writing entities., + *, + * @author Fabien Ric (fabien.ric@gmail.com), + */, +public class SimpleXmlConverter implements Converter {, +  private static final boolean DEFAULT_STRICT = true;, +  private static final String CHARSET = "UTF-8";, +  private static final MediaType MEDIA_TYPE =, +      MediaType.parse("application/xml; charset=" + CHARSET);, +, +  private final Serializer serializer;, +, +  private final boolean strict;, +, +  public SimpleXmlConverter() {, +    this(DEFAULT_STRICT);, +  }, +, +  public SimpleXmlConverter(boolean strict) {, +    this(new Persister(), strict);, +  }, +, +  public SimpleXmlConverter(Serializer serializer) {, +    this(serializer, DEFAULT_STRICT);, +  }, +, +  public SimpleXmlConverter(Serializer serializer, boolean strict) {, +    this.serializer = serializer;, +    this.strict = strict;, +  }, +, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +    try {, +      return serializer.read((Class<?>) type, is, strict);, +    } catch (IOException e) {, +      throw e;, +    } catch (Exception e) {, +      throw new RuntimeException(e);, +    } finally {, +      try {, +        is.close();, +      } catch (IOException ignored) {, +      }, +    }, +  }, +, +  @Override public RequestBody toBody(Object source, Type type) {, +    byte[] bytes;, +    try {, +      Buffer buffer = new Buffer();, +      OutputStreamWriter osw = new OutputStreamWriter(buffer.outputStream(), CHARSET);, +      serializer.write(source, osw);, +      osw.flush();, +      bytes = buffer.readByteArray();, +    } catch (Exception e) {, +      throw new AssertionError(e);, +    }, +    return RequestBody.create(MEDIA_TYPE, bytes);, +  }, +, +  public boolean isStrict() {, +    return strict;, +  }, +}, +++ /dev/null, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXmlConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +, +/**, + * A {@link Converter} which uses SimpleXML for reading and writing entities., + *]
[+++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +/** Represents an HTTP header name/value pair. */, +public final class Header {, +  private final String name;, +  private final String value;, +, +  public Header(String name, String value) {, +    this.name = name;, +    this.value = value;, +  }, +, +  public String getName() {, +    return name;, +  }, +, +  public String getValue() {, +    return value;, +  }, +, +  @Override public boolean equals(Object o) {, +    if (this == o) return true;, +    if (o == null || getClass() != o.getClass()) return false;, +, +    Header header = (Header) o;, +, +    if (name != null ? !name.equals(header.name) : header.name != null) return false;, +    if (value != null ? !value.equals(header.value) : header.value != null) return false;, +, +    return true;, +  }, +, +  @Override public int hashCode() {, +    int result = name != null ? name.hashCode() : 0;, +    result = 31 * result + (value != null ? value.hashCode() : 0);, +    return result;, +  }, +, +  @Override public String toString() {, +    return (name != null ? name : "") + ": " + (value != null ? value : "");, +  }, +}, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +/** Represents an HTTP header name/value pair. */, +public final class Header {, +  private final String name;, +  private final String value;, +, +  public Header(String name, String value) {, +    this.name = name;, +    this.value = value;, +  }, +, +  public String getName() {, +    return name;, +  }, +, +  public String getValue() {, +    return value;, +  }, +, +  @Override public boolean equals(Object o) {, +    if (this == o) return true;, +    if (o == null || getClass() != o.getClass()) return false;, +, +    Header header = (Header) o;, +, +    if (name != null ? !name.equals(header.name) : header.name != null) return false;, +    if (value != null ? !value.equals(header.value) : header.value != null) return false;, +, +    return true;, +  }, +, +  @Override public int hashCode() {, +    int result = name != null ? name.hashCode() : 0;, +    result = 31 * result + (value != null ? value.hashCode() : 0);, +    return result;, +  }, +, +  @Override public String toString() {, +    return (name != null ? name : "") + ": " + (value != null ? value : "");, +  }, +}, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +/** Represents an HTTP header name/value pair. */, +public final class Header {, +  private final String name;, +  private final String value;, +, +  public Header(String name, String value) {, +    this.name = name;]
[+++ b/pom.xml, +    <rxjava.version>1.0.14</rxjava.version>]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/OperatorMapResponseToBodyOrError.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import retrofit2.Response;, +import rx.Observable;, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.functions.Func1;, +, +/**, + * A version of {@link Observable#map(Func1)} which lets us trigger {@code onError} without having, + * to use {@link Observable#flatMap(Func1)} which breaks producer requests from propagating., + */, +final class OperatorMapResponseToBodyOrError<T> implements Operator<T, Response<T>> {, +  private static final OperatorMapResponseToBodyOrError<Object> INSTANCE =, +      new OperatorMapResponseToBodyOrError<>();, +, +  @SuppressWarnings("unchecked") // Safe because of erasure., +  static <R> OperatorMapResponseToBodyOrError<R> instance() {, +    return (OperatorMapResponseToBodyOrError<R>) INSTANCE;, +  }, +, +  @Override public Subscriber<? super Response<T>> call(final Subscriber<? super T> child) {, +    return new Subscriber<Response<T>>(child) {, +      @Override public void onNext(Response<T> response) {, +        if (response.isSuccessful()) {, +          child.onNext(response.body());, +        } else {, +          child.onError(new HttpException(response));, +        }, +      }, +, +      @Override public void onCompleted() {, +        child.onCompleted();, +      }, +, +      @Override public void onError(Throwable e) {, +        child.onError(e);, +      }, +    };, +  }, +}, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/OperatorMapResponseToBodyOrError.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import retrofit2.Response;, +import rx.Observable;, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.functions.Func1;, +, +/**, + * A version of {@link Observable#map(Func1)} which lets us trigger {@code onError} without having, + * to use {@link Observable#flatMap(Func1)} which breaks producer requests from propagating., + */, +final class OperatorMapResponseToBodyOrError<T> implements Operator<T, Response<T>> {, +  private static final OperatorMapResponseToBodyOrError<Object> INSTANCE =, +      new OperatorMapResponseToBodyOrError<>();, +, +  @SuppressWarnings("unchecked") // Safe because of erasure., +  static <R> OperatorMapResponseToBodyOrError<R> instance() {, +    return (OperatorMapResponseToBodyOrError<R>) INSTANCE;, +  }, +, +  @Override public Subscriber<? super Response<T>> call(final Subscriber<? super T> child) {, +    return new Subscriber<Response<T>>(child) {, +      @Override public void onNext(Response<T> response) {, +        if (response.isSuccessful()) {, +          child.onNext(response.body());, +        } else {]
[+++ b/pom.xml, +    <rxjava2.version>2.0.0</rxjava2.version>, +    <guava.version>19.0</guava.version>, +      <dependency>, +        <groupId>io.reactivex.rxjava2</groupId>, +        <artifactId>rxjava</artifactId>, +        <version>${rxjava2.version}</version>, +      </dependency>, +++ b/pom.xml, +    <rxjava2.version>2.0.0</rxjava2.version>, +    <guava.version>19.0</guava.version>, +      <dependency>, +        <groupId>io.reactivex.rxjava2</groupId>, +        <artifactId>rxjava</artifactId>, +        <version>${rxjava2.version}</version>, +      </dependency>, +++ b/retrofit-adapters/pom.xml, +    <module>rxjava2</module>, +++ b/pom.xml, +    <rxjava2.version>2.0.0</rxjava2.version>, +    <guava.version>19.0</guava.version>, +      <dependency>, +        <groupId>io.reactivex.rxjava2</groupId>, +        <artifactId>rxjava</artifactId>, +        <version>${rxjava2.version}</version>, +      </dependency>, +++ b/retrofit-adapters/pom.xml, +    <module>rxjava2</module>, +++ b/retrofit-adapters/rxjava2/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.1.1-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>adapter-rxjava2</artifactId>, +  <name>Adapter: RxJava 2</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>io.reactivex.rxjava2</groupId>, +      <artifactId>rxjava</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <rxjava2.version>2.0.0</rxjava2.version>, +    <guava.version>19.0</guava.version>, +      <dependency>, +        <groupId>io.reactivex.rxjava2</groupId>, +        <artifactId>rxjava</artifactId>, +        <version>${rxjava2.version}</version>, +      </dependency>, +++ b/retrofit-adapters/pom.xml, +    <module>rxjava2</module>, +++ b/retrofit-adapters/rxjava2/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-adapters</artifactId>, +    <version>2.1.1-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +      return true;, +    } catch (ClassNotFoundException ignored) {, +    return false;, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +      return true;, +    } catch (ClassNotFoundException ignored) {, +    return false;, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.InputStream;, +import java.util.ArrayList;, +import java.util.List;, +import okio.BufferedSink;, +import retrofit.mime.TypedInput;, +import retrofit.mime.TypedOutput;, +public class OkClient implements Client {, +  private final OkHttpClient client;, +    if (client == null) throw new NullPointerException("client == null");, +    this.client = client;, +  @Override public Response execute(Request request) throws IOException {, +    return parseResponse(client.newCall(createRequest(request)).execute());, +  }, +, +  static com.squareup.okhttp.Request createRequest(Request request) {, +    com.squareup.okhttp.Request.Builder builder = new com.squareup.okhttp.Request.Builder(), +        .url(request.getUrl()), +        .method(request.getMethod(), createRequestBody(request.getBody()));, +, +    List<Header> headers = request.getHeaders();, +    for (int i = 0, size = headers.size(); i < size; i++) {, +      Header header = headers.get(i);, +      builder.addHeader(header.getName(), header.getValue());, +    }, +, +    return builder.build();, +  }, +, +  static Response parseResponse(com.squareup.okhttp.Response response) {, +    return new Response(response.request().urlString(), response.code(), response.message(),, +        createHeaders(response.headers()), createResponseBody(response.body()));, +  }, +, +  private static RequestBody createRequestBody(final TypedOutput body) {, +    if (body == null) {, +      return null;, +    }, +    final MediaType mediaType = MediaType.parse(body.mimeType());, +    return new RequestBody() {, +      @Override public MediaType contentType() {, +        return mediaType;, +      }, +, +      @Override public void writeTo(BufferedSink sink) throws IOException {, +        body.writeTo(sink.outputStream());, +      }, +, +      @Override public long contentLength() {, +        return body.length();, +      }, +    };, +  }, +, +  private static TypedInput createResponseBody(final ResponseBody body) {, +    if (body.contentLength() == 0) {, +      return null;, +    }, +    return new TypedInput() {, +      @Override public String mimeType() {, +        return body.contentType().toString();, +      }, +, +      @Override public long length() {, +        return body.contentLength();, +      }, +, +      @Override public InputStream in() throws IOException {, +        return body.byteStream();, +      }, +    };, +  }, +, +  private static List<Header> createHeaders(Headers headers) {, +    int size = headers.size();, +    List<Header> headerList = new ArrayList<Header>(size);, +    for (int i = 0; i < size; i++) {, +      headerList.add(new Header(headers.name(i), headers.value(i)));, +    }, +    return headerList;, +++ b/pom.xml]
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import retrofit2.http.Tag;, +, +      } else if (annotation instanceof Tag) {, +        validateResolvableType(p, type);, +, +        Class<?> tagType = Utils.getRawType(type);, +        for (int i = p - 1; i >= 0; i--) {, +          ParameterHandler<?> otherHandler = parameterHandlers[i];, +          if (otherHandler instanceof ParameterHandler.Tag, +              && ((ParameterHandler.Tag) otherHandler).cls.equals(tagType)) {, +            throw parameterError(method, p, "@Tag type ", +                + tagType.getName(), +                + " is duplicate of parameter #", +                + (i + 1), +                + " and would always overwrite its value.");, +          }, +        }, +, +        return new ParameterHandler.Tag<>(tagType);, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import retrofit2.http.Tag;, +, +      } else if (annotation instanceof Tag) {, +        validateResolvableType(p, type);, +, +        Class<?> tagType = Utils.getRawType(type);, +        for (int i = p - 1; i >= 0; i--) {, +          ParameterHandler<?> otherHandler = parameterHandlers[i];, +          if (otherHandler instanceof ParameterHandler.Tag, +              && ((ParameterHandler.Tag) otherHandler).cls.equals(tagType)) {, +            throw parameterError(method, p, "@Tag type ", +                + tagType.getName()]
[+++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml]
[+++ b/pom.xml, +          <version>3.6.1</version>, +            <compilerId>javac-with-errorprone</compilerId>, +            <forceJavacCompilerUse>true</forceJavacCompilerUse>, +          <dependencies>, +            <dependency>, +              <groupId>org.codehaus.plexus</groupId>, +              <artifactId>plexus-compiler-javac-errorprone</artifactId>, +              <version>2.8.1</version>, +            </dependency>, +            <dependency>, +              <groupId>com.google.errorprone</groupId>, +              <artifactId>error_prone_core</artifactId>, +              <version>2.0.16</version>, +            </dependency>, +          </dependencies>, +++ b/pom.xml, +          <version>3.6.1</version>, +            <compilerId>javac-with-errorprone</compilerId>, +            <forceJavacCompilerUse>true</forceJavacCompilerUse>, +          <dependencies>, +            <dependency>, +              <groupId>org.codehaus.plexus</groupId>, +              <artifactId>plexus-compiler-javac-errorprone</artifactId>, +              <version>2.8.1</version>, +            </dependency>, +            <dependency>, +              <groupId>com.google.errorprone</groupId>, +              <artifactId>error_prone_core</artifactId>, +              <version>2.0.16</version>, +            </dependency>, +          </dependencies>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +    upstream.call(new BodySubscriber<T>(subscriber));, +++ b/pom.xml, +          <version>3.6.1</version>, +            <compilerId>javac-with-errorprone</compilerId>, +            <forceJavacCompilerUse>true</forceJavacCompilerUse>, +          <dependencies>, +            <dependency>, +              <groupId>org.codehaus.plexus</groupId>, +              <artifactId>plexus-compiler-javac-errorprone</artifactId>, +              <version>2.8.1</version>, +            </dependency>, +            <dependency>, +              <groupId>com.google.errorprone</groupId>, +              <artifactId>error_prone_core</artifactId>, +              <version>2.0.16</version>, +            </dependency>, +          </dependencies>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +    upstream.call(new BodySubscriber<T>(subscriber));, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/BodyObservable.java, +    upstream.subscribe(new BodyObserver<T>(observer));]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/CompletableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/CompletableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/CompletableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/CompletableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/CompletableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +          if (response.isSuccessful()) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +              if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +    assertThat(response.isSuccessful()).isTrue();, +    assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +          if (response.isSuccessful()) {]
[+++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +/** Represents an HTTP header name/value pair. */, +public final class Header {, +  private final String name;, +  private final String value;, +  public Header(String name, String value) {, +    this.name = name;, +    this.value = value;, +  }, +  public String getName() {, +    return name;, +  }, +, +  public String getValue() {, +    return value;, +  }, +, +  @Override public boolean equals(Object o) {, +    if (this == o) return true;, +    if (o == null || getClass() != o.getClass()) return false;, +, +    Header header = (Header) o;, +, +    if (name != null ? !name.equals(header.name) : header.name != null) return false;, +    if (value != null ? !value.equals(header.value) : header.value != null) return false;, +, +    return true;, +  }, +, +  @Override public int hashCode() {, +    int result = name != null ? name.hashCode() : 0;, +    result = 31 * result + (value != null ? value.hashCode() : 0);, +    return result;, +  }, +, +  @Override public String toString() {, +    return (name != null ? name : "") + ": " + (value != null ? value : "");, +  }, +++ b/pom.xml, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +        <groupId>com.squareup.okhttp</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${okhttp.version}</version>, +      </dependency>, +      <dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +/** Represents an HTTP header name/value pair. */, +public final class Header {, +  private final String name;, +  private final String value;, +  public Header(String name, String value) {, +    this.name = name;, +    this.value = value;, +  }, +  public String getName() {]
[+++ b/pom.xml, +    <okhttp.version>3.4.1</okhttp.version>]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, +    latch.await(1, SECONDS);, +    //noinspection ThrowableResultOfMethodCallIgnored, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, +    latch.await(1, SECONDS);, +    //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, +    latch.await(1, SECONDS);, +    //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, +    latch.await(1, SECONDS);, +    //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, +    latch.await(1, SECONDS);, +    //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, +    latch.await(1, SECONDS);, +    //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, +    latch.await(1, SECONDS);, +    //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +      String headerValue = valueConverter.convert(value);, +      if (headerValue == null) return; // Skip converted but null values., +, +      builder.addHeader(name, headerValue);, +, +      String queryValue = valueConverter.convert(value);, +      if (queryValue == null) return; // Skip converted but null values, +, +      builder.addQueryParam(name, queryValue, encoded);, +, +        String convertedEntryValue = valueConverter.convert(entryValue);, +        if (convertedEntryValue == null) {, +          throw new IllegalArgumentException("Query map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addQueryParam(entryKey, convertedEntryValue, encoded);, +, +      String fieldValue = valueConverter.convert(value);, +      if (fieldValue == null) return; // Skip null converted values, +, +      builder.addFormField(name, fieldValue, encoded);, +, +        String fieldEntry = valueConverter.convert(entryValue);, +        if (fieldEntry == null) {]
[+++ b/pom.xml, +	<simplexml.version>2.7.1</simplexml.version>, +      <dependency>, +        <groupId>org.simpleframework</groupId>, +        <artifactId>simple-xml</artifactId>, +        <version>${simplexml.version}</version>, +      </dependency>, +++ b/pom.xml, +	<simplexml.version>2.7.1</simplexml.version>, +      <dependency>, +        <groupId>org.simpleframework</groupId>, +        <artifactId>simple-xml</artifactId>, +        <version>${simplexml.version}</version>, +      </dependency>, +++ b/retrofit-converters/pom.xml, +    <module>simplexml</module>, +++ b/pom.xml, +	<simplexml.version>2.7.1</simplexml.version>, +      <dependency>, +        <groupId>org.simpleframework</groupId>, +        <artifactId>simple-xml</artifactId>, +        <version>${simplexml.version}</version>, +      </dependency>, +++ b/retrofit-converters/pom.xml, +    <module>simplexml</module>, +++ b/retrofit-converters/simplexml/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>1.2.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-simplexml</artifactId>, +  <name>Converter: SimpleXML</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.simpleframework</groupId>, +      <artifactId>simple-xml</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +	<simplexml.version>2.7.1</simplexml.version>, +      <dependency>, +        <groupId>org.simpleframework</groupId>, +        <artifactId>simple-xml</artifactId>, +        <version>${simplexml.version}</version>, +      </dependency>, +++ b/retrofit-converters/pom.xml, +    <module>simplexml</module>, +++ b/retrofit-converters/simplexml/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>1.2.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-simplexml</artifactId>, +  <name>Converter: SimpleXML</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>]
[+++ b/pom.xml, +    <okhttp.version>3.3.0</okhttp.version>]
[+++ b/pom.xml, +    <okhttp.version>3.8.1</okhttp.version>, +    <gson.version>2.7</gson.version>]
[+++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, +    <version>1.1.1-SNAPSHOT</version>]
[+++ b/pom.xml, +    <okhttp.version>1.3.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>1.3.0</okhttp.version>, +++ b/retrofit-converters/README.md, +    .setEndpoint("https://api.example.com"), +++ b/pom.xml, +    <okhttp.version>1.3.0</okhttp.version>, +++ b/retrofit-converters/README.md, +    .setEndpoint("https://api.example.com"), +++ b/retrofit-converters/jackson/README.md, +Jackson Converter, +=================, +, +A `Converter` which uses [Jackson][1] for serialization to and from JSON., +, +A default `ObjectMapper` instance will be created or one can be configured and passed to the, +`JacksonConverter` construction to further control the serialization., +, +, + [1]: http://wiki.fasterxml.com/JacksonHome, +++ b/pom.xml, +    <okhttp.version>1.3.0</okhttp.version>, +++ b/retrofit-converters/README.md, +    .setEndpoint("https://api.example.com"), +++ b/retrofit-converters/jackson/README.md, +Jackson Converter, +=================, +, +A `Converter` which uses [Jackson][1] for serialization to and from JSON., +, +A default `ObjectMapper` instance will be created or one can be configured and passed to the, +`JacksonConverter` construction to further control the serialization., +, +, + [1]: http://wiki.fasterxml.com/JacksonHome, +++ b/retrofit-converters/protobuf/README.md, +Google Protocol Buffer Converter, +================================, +, +A `Converter` which uses [Protocol Buffer][1] binary serialization., +, +, + [1]: https://developers.google.com/protocol-buffers/, +++ b/pom.xml, +    <okhttp.version>1.3.0</okhttp.version>, +++ b/retrofit-converters/README.md, +    .setEndpoint("https://api.example.com"), +++ b/retrofit-converters/jackson/README.md, +Jackson Converter, +=================, +, +A `Converter` which uses [Jackson][1] for serialization to and from JSON., +, +A default `ObjectMapper` instance will be created or one can be configured and passed to the, +`JacksonConverter` construction to further control the serialization., +, +, + [1]: http://wiki.fasterxml.com/JacksonHome, +++ b/retrofit-converters/protobuf/README.md, +Google Protocol Buffer Converter, +================================, +, +A `Converter` which uses [Protocol Buffer][1] binary serialization., +, +, + [1]: https://developers.google.com/protocol-buffers/, +++ b/retrofit-converters/simplexml/README.md, +Simple XML Converter, +====================, +, +A `Converter` which uses [Simple][1] for XML serialization., +, +A default `Serializer` instance will be created or one can be configured and passed to the, +`SimpleXMLConverter` construction to further control the serialization., +, +, +Android, +-------, +, +Simple depends on artifacts which are already provided by the Android platform. When specifying as, +a Maven or Gradle dependency, exclude the following transitive dependencies: `stax:stax-api`,, +`stax:stax`, and `xpp3:xpp3`., +, +, +, + [1]: http://simple.sourceforge.net/, +++ b/pom.xml, +    <okhttp.version>1.3.0</okhttp.version>, +++ b/retrofit-converters/README.md, +    .setEndpoint("https://api.example.com"), +++ b/retrofit-converters/jackson/README.md, +Jackson Converter, +=================, +, +A `Converter` which uses [Jackson][1] for serialization to and from JSON., +, +A default `ObjectMapper` instance will be created or one can be configured and passed to the, +`JacksonConverter` construction to further control the serialization., +]
[+++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/README.md, + [1]: https://square.github.io/retrofit/, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/README.md, + [1]: https://square.github.io/retrofit/, +++ b/pom.xml, +  <url>https://github.com/square/retrofit/</url>, +    <url>https://github.com/square/retrofit</url>, +    <url>https://github.com/square/retrofit/issues</url>, +      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>, +    <url>https://squareup.com</url>, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/README.md, + [1]: https://square.github.io/retrofit/, +++ b/pom.xml, +  <url>https://github.com/square/retrofit/</url>, +    <url>https://github.com/square/retrofit</url>, +    <url>https://github.com/square/retrofit/issues</url>, +      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>, +    <url>https://squareup.com</url>, +++ b/website/index.html, +                <li><a href="https://github.com/square/retrofit" data-title="View GitHub Project" class="menu github"><img src="static/icon-github.png" alt="GitHub"/></a></li>, +                <li><a href="https://square.github.io/" data-title="Square Open Source Portal" class="menu square"><img src="static/icon-square.png" alt="Square"/></a></li>, +              <p>The source code to the Retrofit, its samples, and this website is <a href="https://github.com/square/retrofit">available on GitHub</a>.</p>, +              <p>Before your code can be accepted into the project you must also sign the <a href="https://squ.re/sign-the-cla">Individual Contributor License Agreement (CLA)</a>.</p>, +                <li><a href="https://stackoverflow.com/questions/tagged/retrofit?sort=active">StackOverflow</a></li>, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +   [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/README.md, + [1]: https://square.github.io/retrofit/, +++ b/pom.xml, +  <url>https://github.com/square/retrofit/</url>, +    <url>https://github.com/square/retrofit</url>, +    <url>https://github.com/square/retrofit/issues</url>, +      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>, +    <url>https://squareup.com</url>, +++ b/website/index.html, +                <li><a href="https://github.com/square/retrofit" data-title="View GitHub Project" class="menu github"><img src="static/icon-github.png" alt="GitHub"/></a></li>, +                <li><a href="https://square.github.io/" data-title="Square Open Source Portal" class="menu square"><img src="static/icon-square.png" alt="Square"/></a></li>, +              <p>The source code to the Retrofit, its samples, and this website is <a href="https://github.com/square/retrofit">available on GitHub</a>.</p>, +              <p>Before your code can be accepted into the project you must also sign the <a href="https://squ.re/sign-the-cla">Individual Contributor License Agreement (CLA)</a>.</p>, +                <li><a href="https://stackoverflow.com/questions/tagged/retrofit?sort=active">StackOverflow</a></li>, +++ b/website/static/jquery-maven-artifact.min.js, +(function($){function downloadUrl(groupId,artifactId,version,type){var groupPath=groupId.replace(/\./g,"/");return"https://repo1.maven.org/maven2/"+groupPath+"/"+artifactId+"/"+version+"/"+artifactId+"-"+version+type}$.fn.artifactVersion=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='https://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}var version=versions[0].latestVersion;var versionUrl=downloadUrl(groupId,artifactId,version,".jar");callback(version,versionUrl)})};$.fn.artifactVersions=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='https://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&rows=10&core=gav&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}versions.sort(function(o1,o2){return o1.v>o2.v?-1:1});var newVersions=[];for(var i=0;i<versions.length;i++){var version=versions[i].v;newVersions.push({name:version,url:downloadUrl(groupId,artifactId,version,".jar")})}callback(newVersions)})}})(jQuery);]
[+++ b/pom.xml, +    <moshi.version>1.0.0</moshi.version>, +++ b/pom.xml, +    <moshi.version>1.0.0</moshi.version>, +++ b/retrofit-converters/moshi/README.md, +A default `Moshi` instance will be created or one can be configured and passed to, +`MoshiConverterFactory.create()` to further control the serialization.]
[+++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, +  <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, +  <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, +  <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, +  <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, +  <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, +  <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, +  <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B]
[+++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, +  private final HttpUrl baseUrl;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, +  private final HttpUrl baseUrl;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +++ b/retrofit/src/main/java/retrofit2/http/QueryMap.java, + * Calling with {@code foo.list(ImmutableMap.of("foo", "foo+bar"))} yields, + * {@code /search?foo=foo+bar}., +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, +  private final HttpUrl baseUrl;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +++ b/retrofit/src/main/java/retrofit2/http/QueryMap.java, + * Calling with {@code foo.list(ImmutableMap.of("foo", "foo+bar"))} yields, + * {@code /search?foo=foo+bar}., +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +    HttpUrl baseUrl = retrofit.baseUrl();, +    assertThat(baseUrl).isEqualTo(HttpUrl.parse("http://example.com/"));, +    assertThat(retrofit.baseUrl()).isSameAs(url);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, +  private final HttpUrl baseUrl;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +++ b/retrofit/src/main/java/retrofit2/http/QueryMap.java, + * Calling with {@code foo.list(ImmutableMap.of("foo", "foo+bar"))} yields, + * {@code /search?foo=foo+bar}., +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +    HttpUrl baseUrl = retrofit.baseUrl();, +    assertThat(baseUrl).isEqualTo(HttpUrl.parse("http://example.com/"));, +    assertThat(retrofit.baseUrl()).isSameAs(url);, +++ /dev/null]
[+++ b/pom.xml, +    <wire.version>1.2.0</wire.version>, +    <guava.version>15.0</guava.version>, +++ b/pom.xml, +    <wire.version>1.2.0</wire.version>, +    <guava.version>15.0</guava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + *   public class UserService {]
[+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import com.google.protobuf.ExtensionRegistryLite;, +    return new ProtoConverterFactory(null);, +  }, +, +  /** Create an instance which uses {@code registry} when deserializing. */, +  public static ProtoConverterFactory createWithRegistry(ExtensionRegistryLite registry) {, +    return new ProtoConverterFactory(registry);, +  }, +, +  private final ExtensionRegistryLite registry;, +, +  private ProtoConverterFactory(ExtensionRegistryLite registry) {, +    this.registry = registry;, +    return new ProtoResponseBodyConverter<>(parser, registry);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import com.google.protobuf.ExtensionRegistryLite;, +    return new ProtoConverterFactory(null);, +  }, +, +  /** Create an instance which uses {@code registry} when deserializing. */, +  public static ProtoConverterFactory createWithRegistry(ExtensionRegistryLite registry) {, +    return new ProtoConverterFactory(registry);, +  }, +, +  private final ExtensionRegistryLite registry;, +, +  private ProtoConverterFactory(ExtensionRegistryLite registry) {, +    this.registry = registry;, +    return new ProtoResponseBodyConverter<>(parser, registry);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoResponseBodyConverter.java, +import com.google.protobuf.ExtensionRegistryLite;, +  private final ExtensionRegistryLite registry;, +  ProtoResponseBodyConverter(Parser<T> parser, ExtensionRegistryLite registry) {, +    this.registry = registry;, +      return parser.parseFrom(value.byteStream(), registry);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import com.google.protobuf.ExtensionRegistryLite;, +    return new ProtoConverterFactory(null);, +  }, +, +  /** Create an instance which uses {@code registry} when deserializing. */, +  public static ProtoConverterFactory createWithRegistry(ExtensionRegistryLite registry) {, +    return new ProtoConverterFactory(registry);, +  }, +, +  private final ExtensionRegistryLite registry;, +, +  private ProtoConverterFactory(ExtensionRegistryLite registry) {, +    this.registry = registry;, +    return new ProtoResponseBodyConverter<>(parser, registry);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoResponseBodyConverter.java, +import com.google.protobuf.ExtensionRegistryLite;, +  private final ExtensionRegistryLite registry;, +  ProtoResponseBodyConverter(Parser<T> parser, ExtensionRegistryLite registry) {, +    this.registry = registry;, +      return parser.parseFrom(value.byteStream(), registry);, +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/PhoneProtos.java, +    registry.add(retrofit2.converter.protobuf.PhoneProtos.voicemail);, +  public interface PhoneOrBuilder extends, +      // @@protoc_insertion_point(interface_extends:retrofit2.converter.protobuf.Phone), +      com.google.protobuf.GeneratedMessage., +          ExtendableMessageOrBuilder<Phone> {, +   * Protobuf type {@code retrofit2.converter.protobuf.Phone}, +      com.google.protobuf.GeneratedMessage.ExtendableMessage<, +        Phone> implements, +      // @@protoc_insertion_point(message_implements:retrofit2.converter.protobuf.Phone), +      PhoneOrBuilder {, +    private Phone(com.google.protobuf.GeneratedMessage.ExtendableBuilder<retrofit2.converter.protobuf.PhoneProtos.Phone, ?> builder) {, +              com.google.protobuf.ByteString bs = input.readBytes();, +              number_ = bs;, +      return retrofit2.converter.protobuf.PhoneProtos.internal_static_retrofit2_converter_protobuf_Phone_descriptor;, +      return retrofit2.converter.protobuf.PhoneProtos.internal_static_retrofit2_converter_protobuf_Phone_fieldAccessorTable, +              retrofit2.converter.protobuf.PhoneProtos.Phone.class, retrofit2.converter.protobuf.PhoneProtos.Phone.Builder.class);, +      if (isInitialized == 1) return true;, +      if (isInitialized == 0) return false;, +      if (!extensionsAreInitialized()) {, +        memoizedIsInitialized = 0;, +        return false;, +      }, +      com.google.protobuf.GeneratedMessage, +        .ExtendableMessage<retrofit2.converter.protobuf.PhoneProtos.Phone>.ExtensionWriter extensionWriter =, +          newExtensionWriter();, +      extensionWriter.writeUntil(3, output);, +      size += extensionsSerializedSize();, +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseFrom(, +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseFrom(, +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseFrom(byte[] data), +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseFrom(, +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseFrom(java.io.InputStream input), +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseFrom(, +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseDelimitedFrom(java.io.InputStream input), +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseDelimitedFrom(, +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseFrom(, +    public static retrofit2.converter.protobuf.PhoneProtos.Phone parseFrom(, +    public static Builder newBuilder(retrofit2.converter.protobuf.PhoneProtos.Phone prototype) {, +     * Protobuf type {@code retrofit2.converter.protobuf.Phone}, +        com.google.protobuf.GeneratedMessage.ExtendableBuilder<, +          retrofit2.converter.protobuf.PhoneProtos.Phone, Builder> implements, +        // @@protoc_insertion_point(builder_implements:retrofit2.converter.protobuf.Phone)]
[+++ b/retrofit-mock/src/test/java/retrofit/MockRetrofitTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package retrofit;, +, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.util.Random;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicLong;, +import java.util.concurrent.atomic.AtomicReference;, +import org.junit.Before;, +import org.junit.Test;, +import retrofit.mock.CallBehaviorAdapter;, +import retrofit.mock.Calls;, +import retrofit.mock.MockRetrofit;, +import retrofit.mock.NetworkBehavior;, +, +import static java.util.concurrent.Executors.newSingleThreadExecutor;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class MockRetrofitTest {, +  interface DoWorkService {, +    Call<String> response();, +    Call<String> failure();, +  }, +, +  private final IOException mockFailure = new IOException("Timeout!");, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +  private DoWorkService service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl("http://example.com"), +        .build();, +, +    DoWorkService mockService = new DoWorkService() {, +      @Override public Call<String> response() {, +        return Calls.response("Response!");, +      }, +, +      @Override public Call<String> failure() {, +        return Calls.failure(mockFailure);, +      }, +    };, +, +    NetworkBehavior.Adapter<?> adapter =, +        new CallBehaviorAdapter(retrofit, newSingleThreadExecutor());, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +    service = mockRetrofit.create(DoWorkService.class, mockService);, +  }, +, +  @Test public void syncFailureThrowsAfterDelay() {, +    behavior.setDelay(100, MILLISECONDS);, +    behavior.setVariancePercent(0);, +    behavior.setFailurePercent(100);, +, +    Call<String> call = service.response();, +, +    long startNanos = System.nanoTime();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);, +      assertThat(e).isSameAs(behavior.failureException());, +      assertThat(tookMs).isGreaterThanOrEqualTo(100);, +    }, +  }, +, +  @Test public void asyncFailureTriggersFailureAfterDelay() throws InterruptedException {, +    behavior.setDelay(100, MILLISECONDS);, +    behavior.setVariancePercent(0);, +    behavior.setFailurePercent(100);, +, +    Call<String> call = service.response();, +, +    final long startNanos = System.nanoTime();, +    final AtomicLong tookMs = new AtomicLong();, +    final AtomicReference<Throwable> failureRef = new AtomicReference<>();, +    final CountDownLatch latch = new CountDownLatch(1);]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import javax.annotation.Nullable;, +  private volatile @Nullable Future<?> task;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import javax.annotation.Nullable;, +  private volatile @Nullable Future<?> task;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +    private @Nullable Call<T> delegate;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import javax.annotation.Nullable;, +  private volatile @Nullable Future<?> task;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +    private @Nullable Call<T> delegate;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +import javax.annotation.Nullable;, +    private @Nullable NetworkBehavior behavior;, +    private @Nullable ExecutorService executor;]
[+++ b/pom.xml, +    <guava.version>18.0</guava.version>]
[+++ b/checkstyle.xml, +            <property name="max" value="100"/>, +        <module name="NoWhitespaceAfter">, +          <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>, +        </module>, +++ b/checkstyle.xml, +            <property name="max" value="100"/>, +        <module name="NoWhitespaceAfter">, +          <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>, +        </module>, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, + * Communicates responses to server or offline requests. Contains a callback method for each, + * possible outcome. One and only one method will be invoked in response to a given request., +   * The session expired or the account has been disabled. Prompt the user to log in again., +  /** Couldn't reach the server. Check network settings and try again. */, +   * The server returned a client error. In most cases, this is a programming error, but it can also, +   * signify a user input error., +   * We reached the server, but it encountered an error (5xx) or its response was unparseable., +   * Please try again later., +   * An unexpected error occurred. Called if the framework throws an unexpected exception or if the, +   * server returns a 400 (Bad Request) error. In either case, the client software likely contains a, +   * bug; otherwise, the error would have been caught sooner. The user should try updating their, +   * client., +++ b/checkstyle.xml, +            <property name="max" value="100"/>, +        <module name="NoWhitespaceAfter">, +          <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>, +        </module>, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, + * Communicates responses to server or offline requests. Contains a callback method for each, + * possible outcome. One and only one method will be invoked in response to a given request., +   * The session expired or the account has been disabled. Prompt the user to log in again., +  /** Couldn't reach the server. Check network settings and try again. */, +   * The server returned a client error. In most cases, this is a programming error, but it can also, +   * signify a user input error., +   * We reached the server, but it encountered an error (5xx) or its response was unparseable., +   * Please try again later., +   * An unexpected error occurred. Called if the framework throws an unexpected exception or if the, +   * server returns a 400 (Bad Request) error. In either case, the client software likely contains a, +   * bug; otherwise, the error would have been caught sooner. The user should try updating their, +   * client., +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, + * A {@link Runnable} executed on a background thread to invoke {@link #obtainResponse()} which, + * performs an HTTP request. The response of the request, whether it be an object or exception, is, + * then marshaled to the supplied {@link Executor} in the form of a method call on a, + * {@link Callback}., +++ b/checkstyle.xml, +            <property name="max" value="100"/>, +        <module name="NoWhitespaceAfter">, +          <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>, +        </module>, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, + * Communicates responses to server or offline requests. Contains a callback method for each, + * possible outcome. One and only one method will be invoked in response to a given request., +   * The session expired or the account has been disabled. Prompt the user to log in again., +  /** Couldn't reach the server. Check network settings and try again. */, +   * The server returned a client error. In most cases, this is a programming error, but it can also, +   * signify a user input error., +   * We reached the server, but it encountered an error (5xx) or its response was unparseable., +   * Please try again later., +   * An unexpected error occurred. Called if the framework throws an unexpected exception or if the, +   * server returns a 400 (Bad Request) error. In either case, the client software likely contains a, +   * bug; otherwise, the error would have been caught sooner. The user should try updating their, +   * client., +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, + * A {@link Runnable} executed on a background thread to invoke {@link #obtainResponse()} which, + * performs an HTTP request. The response of the request, whether it be an object or exception, is, + * then marshaled to the supplied {@link Executor} in the form of a method call on a, + * {@link Callback}., +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +    return URIUtils.createURI(builder.getScheme(), builder.getHost(), -1, builder.getRelativePath(),, +        null, null);, +    return URIUtils.createURI(builder.getScheme(), builder.getHost(), -1, builder.getRelativePath(),, +        queryString, null);, +  private static void addParams(HttpEntityEnclosingRequestBase request,, +      HttpRequestBuilder builder) {, +  private static boolean useMultipart(Class<?>[] parameterTypes,, +      Annotation[][] parameterAnnotations) {, +      if (TypedBytes.class.isAssignableFrom(parameterType) && !hasSingleEntityAnnotation(, +          annotations)) {, +++ b/checkstyle.xml, +            <property name="max" value="100"/>, +        <module name="NoWhitespaceAfter">, +          <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>, +        </module>, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, + * Communicates responses to server or offline requests. Contains a callback method for each, + * possible outcome. One and only one method will be invoked in response to a given request., +   * The session expired or the account has been disabled. Prompt the user to log in again., +  /** Couldn't reach the server. Check network settings and try again. */, +   * The server returned a client error. In most cases, this is a programming error, but it can also, +   * signify a user input error., +   * We reached the server, but it encountered an error (5xx) or its response was unparseable., +   * Please try again later., +   * An unexpected error occurred. Called if the framework throws an unexpected exception or if the, +   * server returns a 400 (Bad Request) error. In either case, the client software likely contains a, +   * bug; otherwise, the error would have been caught sooner. The user should try updating their, +   * client., +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, + * A {@link Runnable} executed on a background thread to invoke {@link #obtainResponse()} which]
[+++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +      package="retrofit.test_app", +      android:versionCode="1", +      android:versionName="1.0">, +    <application android:label="Test Retrofit">, +        <activity android:name="Main", +                  android:label="Test Retrofit">, +            <intent-filter>, +                <action android:name="android.intent.action.MAIN" />, +                <category android:name="android.intent.category.LAUNCHER" />, +            </intent-filter>, +        </activity>, +    </application>, +</manifest> , +++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +      package="retrofit.test_app", +      android:versionCode="1", +      android:versionName="1.0">, +    <application android:label="Test Retrofit">, +        <activity android:name="Main", +                  android:label="Test Retrofit">, +            <intent-filter>, +                <action android:name="android.intent.action.MAIN" />, +                <category android:name="android.intent.category.LAUNCHER" />, +            </intent-filter>, +        </activity>, +    </application>, +</manifest> , +++ b/examples/directory-sync/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup</groupId>, +    <artifactId>retrofit-examples</artifactId>, +    <version>0.8.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-example-directory-sync</artifactId>, +  <packaging>apk</packaging>, +  <name>Example: Directory Sync</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>retrofit-sync</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>com.jayway.maven.plugins.android.generation2</groupId>, +        <artifactId>android-maven-plugin</artifactId>, +        <extensions>true</extensions>, +      </plugin>, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-checkstyle-plugin</artifactId>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +      package="retrofit.test_app", +      android:versionCode="1", +      android:versionName="1.0">, +    <application android:label="Test Retrofit">, +        <activity android:name="Main", +                  android:label="Test Retrofit">, +            <intent-filter>, +                <action android:name="android.intent.action.MAIN" />, +                <category android:name="android.intent.category.LAUNCHER" />, +            </intent-filter>, +        </activity>, +    </application>, +</manifest> , +++ b/examples/directory-sync/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>]
[+++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1.jar!/" />, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1-sources.jar!/" />, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1.jar!/" />, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1-sources.jar!/" />, +++ b/build.xml, +    <jarjar jarfile="${build.dir}/retrofit-gson-2.1.jar">, +      <zipfileset src="lib/gson-2.1.jar"/>, +    <jarjar jarfile="${build.dir}/retrofit-gson-2.1-sources.jar">, +      <zipfileset src="lib/gson-2.1-sources.jar"/>, +	      <pathelement location="${build.dir}/retrofit-gson-2.1.jar"/>, +        <pathelement location="${build.dir}/retrofit-gson-2.1.jar"/>, +++ b/.idea/libraries/JARs.xml, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1.jar!/" />, +      <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1-sources.jar!/" />, +++ b/build.xml, +    <jarjar jarfile="${build.dir}/retrofit-gson-2.1.jar">, +      <zipfileset src="lib/gson-2.1.jar"/>, +    <jarjar jarfile="${build.dir}/retrofit-gson-2.1-sources.jar">, +      <zipfileset src="lib/gson-2.1-sources.jar"/>, +	      <pathelement location="${build.dir}/retrofit-gson-2.1.jar"/>, +        <pathelement location="${build.dir}/retrofit-gson-2.1.jar"/>, +++ b/ivy.xml, +    <dependency org="com.google.code.gson" name="gson" rev="2.1"/>]
[+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.net.URI;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import javax.annotation.Nullable;, +import okhttp3.Headers;, +import okhttp3.HttpUrl;, +import okhttp3.MediaType;, +import okhttp3.MultipartBody;, +import okhttp3.RequestBody;, +import retrofit2.http.Body;, +import retrofit2.http.DELETE;, +import retrofit2.http.Field;, +import retrofit2.http.FieldMap;, +import retrofit2.http.FormUrlEncoded;, +import retrofit2.http.GET;, +import retrofit2.http.HEAD;, +import retrofit2.http.HTTP;, +import retrofit2.http.Header;, +import retrofit2.http.HeaderMap;, +import retrofit2.http.Multipart;, +import retrofit2.http.OPTIONS;, +import retrofit2.http.PATCH;, +import retrofit2.http.POST;, +import retrofit2.http.PUT;, +import retrofit2.http.Part;, +import retrofit2.http.PartMap;, +import retrofit2.http.Path;, +import retrofit2.http.Query;, +import retrofit2.http.QueryMap;, +import retrofit2.http.QueryName;, +import retrofit2.http.Url;, +, +final class RequestFactory {, +  static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {, +    return new Builder(retrofit, method).build();, +  }, +, +  private final HttpUrl baseUrl;, +  final String httpMethod;, +  private final String relativeUrl;, +  private final Headers headers;, +  private final MediaType contentType;, +  private final boolean hasBody;, +  private final boolean isFormEncoded;, +  private final boolean isMultipart;, +  private final ParameterHandler<?>[] parameterHandlers;, +, +  RequestFactory(Builder builder) {, +    baseUrl = builder.retrofit.baseUrl;, +    httpMethod = builder.httpMethod;, +    relativeUrl = builder.relativeUrl;, +    headers = builder.headers;, +    contentType = builder.contentType;, +    hasBody = builder.hasBody;, +    isFormEncoded = builder.isFormEncoded;, +    isMultipart = builder.isMultipart;, +    parameterHandlers = builder.parameterHandlers;, +  }, +, +  okhttp3.Request create(@Nullable Object[] args) throws IOException {, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +, +    @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types., +    ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;, +, +    int argumentCount = args != null ? args.length : 0;, +    if (argumentCount != handlers.length) {, +      throw new IllegalArgumentException("Argument count (" + argumentCount, +          + ") doesn't match expected count (" + handlers.length + ")");, +    }, +, +    for (int p = 0; p < argumentCount; p++) {, +      handlers[p].apply(requestBuilder, args[p]);]
[+++ b/build.xml, +  <property file="revision.properties"/>, +++ b/build.xml, +  <property file="revision.properties"/>, +++ b/revision.properties, +retrofit.revision=0.1-SNAPSHOT, +]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Subscription;, +      subscriber.add(requestArbiter);, +  static final class RequestArbiter<T> extends AtomicBoolean implements Subscription, Producer {, +    @Override public void unsubscribe() {, +, +    @Override public boolean isUnsubscribed() {, +      return call.isCanceled();, +    }]
[+++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java, +  private static final MediaType MEDIA_TYPE = MediaType.get("application/json; charset=UTF-8");, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java, +  private static final MediaType MEDIA_TYPE = MediaType.get("application/json; charset=UTF-8");, +++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonRequestBodyConverter.java, +  private static final MediaType MEDIA_TYPE = MediaType.get("application/json; charset=UTF-8");, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java, +  private static final MediaType MEDIA_TYPE = MediaType.get("application/json; charset=UTF-8");, +++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonRequestBodyConverter.java, +  private static final MediaType MEDIA_TYPE = MediaType.get("application/json; charset=UTF-8");, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbConverterFactory.java, +  static final MediaType XML = MediaType.get("application/xml; charset=utf-8");, +++ b/pom.xml, +    <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java, +        return RequestBody.create(MediaType.get("text/plain"), value);]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +  /** Creates a failed {@link Call} from {@code failure}. */, +    // TODO delete this overload in Retrofit 3.0., +    return new FakeCall<>(null, failure);, +  }, +, +  /**, +   * Creates a failed {@link Call} from {@code failure}., +   * <p>, +   * Note: When invoking {@link Call#execute() execute()} on the returned {@link Call}, if, +   * {@code failure} is a {@link RuntimeException}, {@link Error}, or {@link IOException} subtype, +   * it is thrown directly. Otherwise it is "sneaky thrown" despite not being declared., +   */, +  public static <T> Call<T> failure(Throwable failure) {, +    private final Throwable error;, +    FakeCall(@Nullable Response<T> response, @Nullable Throwable error) {, +      throw FakeCall.<Error>sneakyThrow2(error);, +    }, +, +    @SuppressWarnings("unchecked") // Intentionally abusing this feature., +    private static <T extends Throwable> T sneakyThrow2(Throwable t) throws T {, +      throw (T) t;, +          delegate = failure(e);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +  /** Creates a failed {@link Call} from {@code failure}. */, +    // TODO delete this overload in Retrofit 3.0., +    return new FakeCall<>(null, failure);, +  }, +, +  /**, +   * Creates a failed {@link Call} from {@code failure}., +   * <p>, +   * Note: When invoking {@link Call#execute() execute()} on the returned {@link Call}, if, +   * {@code failure} is a {@link RuntimeException}, {@link Error}, or {@link IOException} subtype, +   * it is thrown directly. Otherwise it is "sneaky thrown" despite not being declared., +   */, +  public static <T> Call<T> failure(Throwable failure) {, +    private final Throwable error;, +    FakeCall(@Nullable Response<T> response, @Nullable Throwable error) {, +      throw FakeCall.<Error>sneakyThrow2(error);, +    }, +, +    @SuppressWarnings("unchecked") // Intentionally abusing this feature., +    private static <T extends Throwable> T sneakyThrow2(Throwable t) throws T {, +      throw (T) t;, +          delegate = failure(e);, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +import java.io.FileNotFoundException;, +import java.security.cert.CertificateException;, +import retrofit2.Retrofit;, +  @Test public void failureExecuteCheckedException() {, +    CertificateException failure = new CertificateException("Hey");, +    Call<Object> taco = Calls.failure(failure);, +    assertFalse(taco.isExecuted());, +    try {, +      taco.execute();, +      fail();, +    } catch (Throwable e) {, +      assertSame(failure, e);, +    }, +    assertTrue(taco.isExecuted());, +  }, +, +, +  @Test public void deferredThrowUncheckedExceptionEnqueue() {, +    final RuntimeException failure = new RuntimeException("Hey");, +    final AtomicReference<Throwable> failureRef = new AtomicReference<>();, +    Calls.failure(failure).enqueue(new Callback<Object>() {, +      @Override public void onResponse(Call<Object> call, Response<Object> response) {, +        fail();, +      }, +, +      @Override public void onFailure(Call<Object> call, Throwable t) {, +        failureRef.set(t);, +      }, +    });, +    assertSame(failure, failureRef.get());, +  }]
[+++ b/pom.xml, +    <wire.version>2.1.0</wire.version>, +    <moshi.version>1.0.0</moshi.version>, +++ b/pom.xml, +    <wire.version>2.1.0</wire.version>, +    <moshi.version>1.0.0</moshi.version>, +++ b/retrofit-converters/wire/src/test/java/retrofit2/Phone.java, +// Source file: phone.proto at 6:1, +import com.squareup.wire.WireField;, +import com.squareup.wire.internal.Internal;, +  public static final ProtoAdapter<Phone> ADAPTER = new ProtoAdapter_Phone();, +, +  private static final long serialVersionUID = 0L;, +, +  public static final String DEFAULT_NUMBER = "";, +, +  @WireField(, +      tag = 1,, +      adapter = "com.squareup.wire.ProtoAdapter#STRING", +  ), +  public final String number;, +, +  public Phone(String number) {, +    this(number, ByteString.EMPTY);, +  }, +, +  public Phone(String number, ByteString unknownFields) {, +    super(ADAPTER, unknownFields);, +    this.number = number;, +  }, +, +  @Override, +  public Builder newBuilder() {, +    Builder builder = new Builder();, +    builder.number = number;, +    builder.addUnknownFields(unknownFields());, +    return builder;, +  }, +, +  @Override, +  public boolean equals(Object other) {, +    if (other == this) return true;, +    if (!(other instanceof Phone)) return false;, +    Phone o = (Phone) other;, +    return Internal.equals(unknownFields(), o.unknownFields()), +        && Internal.equals(number, o.number);, +  }, +, +  @Override, +  public int hashCode() {, +    int result = super.hashCode;, +    if (result == 0) {, +      result = unknownFields().hashCode();, +      result = result * 37 + (number != null ? number.hashCode() : 0);, +      super.hashCode = result;, +    }, +    return result;, +  }, +, +  @Override, +  public String toString() {, +    StringBuilder builder = new StringBuilder();, +    if (number != null) builder.append(", number=").append(number);, +    return builder.replace(0, 2, "Phone{").append('}').toString();, +  }, +, +  public static final class Builder extends Message.Builder<Phone, Builder> {, +    public String number;, +, +    public Builder() {, +    }, +, +    public Builder number(String number) {, +      this.number = number;, +      return this;, +    }, +, +    @Override, +    public Phone build() {, +      return new Phone(number, buildUnknownFields());, +    }, +  }, +, +  private static final class ProtoAdapter_Phone extends ProtoAdapter<Phone> {, +    ProtoAdapter_Phone() {, +      super(FieldEncoding.LENGTH_DELIMITED, Phone.class);, +    }, +]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Subscription;, +      subscriber.add(requestArbiter);, +  static final class RequestArbiter<T> extends AtomicBoolean implements Subscription, Producer {, +    @Override public void unsubscribe() {, +, +    @Override public boolean isUnsubscribed() {, +      return call.isCanceled();, +    }]
[+++ b/samples/pom.xml, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/samples/pom.xml, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/samples/src/main/java/com/example/retrofit/SimpleMockService.java, +// Copyright 2013 Square, Inc., +package com.example.retrofit;, +, +import com.example.retrofit.SimpleService.Contributor;, +import com.example.retrofit.SimpleService.GitHub;, +import com.google.common.util.concurrent.ThreadFactoryBuilder;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import retrofit.Call;, +import retrofit.MockRetrofit;, +import retrofit.Retrofit;, +, +/**, + * An example of using {@link MockRetrofit} to create a mock service implementation with, + * fake data. This re-uses the GitHub service from {@link SimpleService} for its mocking., + */, +public final class SimpleMockService {, +  /** A mock implementation of the {@link GitHub} API interface. */, +  static final class MockGitHub implements GitHub {, +    private final MockRetrofit mockRetrofit;, +    private final Map<String, Map<String, List<Contributor>>> ownerRepoContributors;, +, +    public MockGitHub(MockRetrofit mockRetrofit) {, +      this.mockRetrofit = mockRetrofit;, +, +      ownerRepoContributors = new LinkedHashMap<>();, +, +      // Seed some mock data., +      addContributor("square", "retrofit", "John Doe", 12);, +      addContributor("square", "retrofit", "Bob Smith", 2);, +      addContributor("square", "retrofit", "Big Bird", 40);, +      addContributor("square", "picasso", "Proposition Joe", 39);, +      addContributor("square", "picasso", "Keiser Soze", 152);, +    }, +, +    @Override public Call<List<Contributor>> contributors(String owner, String repo) {, +      List<Contributor> response = Collections.emptyList();, +      Map<String, List<Contributor>> repoContributors = ownerRepoContributors.get(owner);, +      if (repoContributors != null) {, +        List<Contributor> contributors = repoContributors.get(repo);, +        if (contributors != null) {, +          response = contributors;, +        }, +      }, +      return mockRetrofit.newSuccessCall(response);, +    }, +, +    public void addContributor(String owner, String repo, String name, int contributions) {, +      Map<String, List<Contributor>> repoContributors = ownerRepoContributors.get(owner);, +      if (repoContributors == null) {, +        repoContributors = new LinkedHashMap<>();, +        ownerRepoContributors.put(owner, repoContributors);, +      }, +      List<Contributor> contributors = repoContributors.get(repo);, +      if (contributors == null) {, +        contributors = new ArrayList<>();, +        repoContributors.put(repo, contributors);, +      }, +      contributors.add(new Contributor(name, contributions));, +    }, +  }, +, +  public static void main(String... args) throws IOException {, +    // Create a very simple Retrofit adapter which points the GitHub API., +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(SimpleService.API_URL), +        .build();, +, +    // Wrap the Retrofit instance to allow creating mock calls which fake network delay., +    ExecutorService bg = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder(), +        .setNameFormat("mock-retrofit-%d"), +        .setDaemon(true), +        .build());, +    MockRetrofit mockRetrofit = MockRetrofit.from(retrofit, bg);, +, +    // Create the mock implementation passing in the MockRetrofit to use., +    MockGitHub gitHub = new MockGitHub(mockRetrofit);, +, +    // Query for some contributors for a few repositories., +    printContributors(gitHub, "square", "retrofit");, +    printContributors(gitHub, "square", "picasso");]
[+++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.4.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <rxjava.version>1.0.13</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.mock;, +, +import rx.Observable;, +import rx.functions.Func1;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +public final class RxJavaBehaviorAdapter implements BehaviorAdapter<Object> {, +  public static RxJavaBehaviorAdapter create() {, +    return new RxJavaBehaviorAdapter();, +  }, +, +  private RxJavaBehaviorAdapter() {, +  }, +, +  @Override public Object applyBehavior(Behavior behavior, Object value) {, +    if (value instanceof Observable) {, +      return applyObservableBehavior(behavior, (Observable<?>) value);, +    }, +    String name = value.getClass().getCanonicalName();, +    if ("rx.Single".equals(name)) {, +      // Apply behavior to the Single from a separate class. This defers classloading such that, +      // regular Observable operation can be leveraged without relying on this unstable RxJava API., +      return SingleHelper.applySingleBehavior(behavior, value);, +    }, +    throw new IllegalStateException("Unsupported type " + name);, +  }, +, +  public Observable<?> applyObservableBehavior(final Behavior behavior, final Observable<?> value) {, +    return Observable.timer(behavior.calculateDelay(MILLISECONDS), MILLISECONDS), +        .flatMap(new Func1<Long, Observable<?>>() {, +          @Override public Observable<?> call(Long ignored) {, +            if (behavior.calculateIsFailure()) {, +              return Observable.error(behavior.failureException());, +            }, +            return value;, +          }, +        });, +  }, +}, +++ b/pom.xml, +    <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.mock;, +, +import rx.Observable;, +import rx.functions.Func1;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +public final class RxJavaBehaviorAdapter implements BehaviorAdapter<Object> {, +  public static RxJavaBehaviorAdapter create() {, +    return new RxJavaBehaviorAdapter();, +  }, +, +  private RxJavaBehaviorAdapter() {, +  }, +, +  @Override public Object applyBehavior(Behavior behavior, Object value) {, +    if (value instanceof Observable) {]
[+++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +    <moshi.version>1.1.0</moshi.version>, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +    <moshi.version>1.1.0</moshi.version>, +++ b/retrofit-converters/wire/src/test/java/retrofit2/Phone.java, +// Source file: test.proto at 2:1, +  public static final ProtoAdapter<Phone> ADAPTER = new ProtoAdapter<Phone>(FieldEncoding.LENGTH_DELIMITED, Phone.class) {, +  };, +, +  private static final long serialVersionUID = 0L;, +, +  public static final String DEFAULT_NUMBER = "";, +, +  public final String number;, +, +  public Phone(String number) {, +    this(number, ByteString.EMPTY);, +  }, +, +  public Phone(String number, ByteString unknownFields) {, +    super(unknownFields);, +    this.number = number;, +  }, +, +  @Override, +  public Builder newBuilder() {, +    Builder builder = new Builder();, +    builder.number = number;, +    builder.addUnknownFields(unknownFields());, +    return builder;, +  }, +, +  @Override, +  public boolean equals(Object other) {, +    if (other == this) return true;, +    if (!(other instanceof Phone)) return false;, +    Phone o = (Phone) other;, +    return equals(unknownFields(), o.unknownFields()), +        && equals(number, o.number);, +  }, +, +  @Override, +  public int hashCode() {, +    int result = super.hashCode;, +    if (result == 0) {, +      result = unknownFields().hashCode();, +      result = result * 37 + (number != null ? number.hashCode() : 0);, +      super.hashCode = result;, +    }, +    return result;, +  }, +, +  @Override, +  public String toString() {, +    StringBuilder builder = new StringBuilder();, +    if (number != null) builder.append(", number=").append(number);, +    return builder.replace(0, 2, "Phone{").append('}').toString();, +  }, +, +  public static final class Builder extends com.squareup.wire.Message.Builder<Phone, Builder> {, +    public String number;, +, +    public Builder() {, +    }, +, +    public Builder number(String number) {, +      this.number = number;, +      return this;, +    }, +, +    @Override, +    public Phone build() {, +      return new Phone(number, buildUnknownFields());, +    }]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, +  @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, +  @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final @Nullable Object[] args;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, +  @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final @Nullable Object[] args;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(@Nullable Object[] args) throws IOException {, +    int argumentCount = args != null ? args.length : 0;, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, +  @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final @Nullable Object[] args;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(@Nullable Object[] args) throws IOException {, +    int argumentCount = args != null ? args.length : 0;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, +  @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final @Nullable Object[] args;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(@Nullable Object[] args) throws IOException {, +    int argumentCount = args != null ? args.length : 0;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import javax.annotation.Nullable;, +  abstract T invoke(@Nullable Object[] args);, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, +  @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final @Nullable Object[] args;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  okhttp3.Request create(@Nullable Object[] args) throws IOException {, +    int argumentCount = args != null ? args.length : 0;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import javax.annotation.Nullable;, +  abstract T invoke(@Nullable Object[] args);, +++ b/retrofit/src/main/java/retrofit2/http/Streaming.java, +import okhttp3.ResponseBody;, + * Treat the response body on methods returning {@link ResponseBody ResponseBody} as is,, + * i.e. without converting the body to {@code byte[]}.]
[+++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarsConverterFactory.java, +    if (type == Boolean.class || type == boolean.class) {, +    if (type == Byte.class || type == byte.class) {, +    if (type == Character.class || type == char.class) {, +    if (type == Double.class || type == double.class) {, +    if (type == Float.class || type == float.class) {, +    if (type == Integer.class || type == int.class) {, +    if (type == Long.class || type == long.class) {, +    if (type == Short.class || type == short.class) {, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarsConverterFactory.java, +    if (type == Boolean.class || type == boolean.class) {, +    if (type == Byte.class || type == byte.class) {, +    if (type == Character.class || type == char.class) {, +    if (type == Double.class || type == double.class) {, +    if (type == Float.class || type == float.class) {, +    if (type == Integer.class || type == int.class) {, +    if (type == Long.class || type == long.class) {, +    if (type == Short.class || type == short.class) {, +++ b/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterPrimitivesFactoryTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.converter.scalars;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import retrofit2.Call;, +import retrofit2.CallAdapter;, +import retrofit2.Retrofit;, +import retrofit2.http.GET;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public final class ScalarsConverterPrimitivesFactoryTest {, +  interface Service {, +    @GET("/") boolean booleanPrimitive();, +    @GET("/") byte bytePrimitive();, +    @GET("/") char charPrimitive();, +    @GET("/") double doublePrimitive();, +    @GET("/") float floatPrimitive();, +    @GET("/") int integerPrimitive();, +    @GET("/") long longPrimitive();, +    @GET("/") short shortPrimitive();, +  }, +, +  static class DirectCallIOException extends RuntimeException {, +    DirectCallIOException(String message, IOException e) {, +      super(message, e);, +    }, +  }, +, +  static class DirectCallAdapterFactory extends CallAdapter.Factory {, +    @Override, +    public CallAdapter<?> get(final Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new CallAdapter<Object>() {, +        @Override public Type responseType() {, +          return returnType;, +        }, +, +        @Override public Object adapt(Call call) {, +          try {, +            return call.execute().body();, +          } catch (IOException e) {, +            throw new DirectCallIOException(e.getMessage(), e);, +          }, +        }, +      };, +    }, +  }, +, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private Service service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder()]
[+++ b/retrofit/src/main/java/retrofit/RequestAction.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.RequestBody;, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Array;, +import java.util.Map;, +, +import static retrofit.Utils.checkNotNull;, +, +abstract class RequestAction<T> {, +  abstract void perform(RequestBuilder builder, T value);, +, +  static final class Url extends RequestAction<String> {, +    @Override void perform(RequestBuilder builder, String value) {, +      builder.setRelativeUrl(value);, +    }, +  }, +, +  static final class Header extends RequestAction<Object> {, +    private final String name;, +, +    Header(String name) {, +      this.name = checkNotNull(name, "name == null");, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) return; // Skip null values., +, +      if (value instanceof Iterable) {, +        for (Object iterableValue : (Iterable<?>) value) {, +          if (iterableValue != null) { // Skip null values., +            builder.addHeader(name, iterableValue.toString());, +          }, +        }, +      } else if (value.getClass().isArray()) {, +        for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +          Object arrayValue = Array.get(value, x);, +          if (arrayValue != null) { // Skip null values., +            builder.addHeader(name, arrayValue.toString());, +          }, +        }, +      } else {, +        builder.addHeader(name, value.toString());, +      }, +    }, +  }, +, +  static final class Path extends RequestAction<Object> {, +    private final String name;, +    private final boolean encoded;, +, +    Path(String name, boolean encoded) {, +      this.name = checkNotNull(name, "name == null");, +      this.encoded = encoded;, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) {, +        throw new IllegalArgumentException(, +            "Path parameter \"" + name + "\" value must not be null.");, +      }, +      builder.addPathParam(name, value.toString(), encoded);, +    }, +  }, +, +  static final class Query extends RequestAction<Object> {, +    private final String name;, +    private final boolean encoded;, +, +    Query(String name, boolean encoded) {, +      this.name = checkNotNull(name, "name == null");, +      this.encoded = encoded;, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) return; // Skip null values., +, +      if (value instanceof Iterable) {, +        for (Object iterableValue : (Iterable<?>) value) {, +          if (iterableValue != null) { // Skip null values., +            builder.addQueryParam(name, iterableValue.toString(), encoded);, +          }]
[+++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.3.1-SNAPSHOT</version>]
[+++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1</version>, +++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1</version>, +++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1</version>, +++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1</version>, +++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.1</version>, +++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.1</version>, +++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.5.1</version>, +++ b/pom.xml, +  <version>1.5.1</version>, +    <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.5.1</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.5.1</version>, +++ b/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/pom.xml, +    <rxjava.version>1.2.0</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>1.2.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyCallable.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.Callable;, +import retrofit2.Response;, +, +final class BodyCallable<R> implements Callable<R> {, +  private final Callable<Response<R>> responseCallable;, +, +  BodyCallable(Callable<Response<R>> responseCallable) {, +    this.responseCallable = responseCallable;, +  }, +, +  @Override public R call() throws Exception {, +    Response<R> response = responseCallable.call();, +    if (response.isSuccessful()) {, +      return response.body();, +    }, +    throw new HttpException(response);, +  }, +}, +++ b/pom.xml, +    <rxjava.version>1.2.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyCallable.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.Callable;, +import retrofit2.Response;, +, +final class BodyCallable<R> implements Callable<R> {, +  private final Callable<Response<R>> responseCallable;, +, +  BodyCallable(Callable<Response<R>> responseCallable) {, +    this.responseCallable = responseCallable;, +  }, +, +  @Override public R call() throws Exception {, +    Response<R> response = responseCallable.call();, +    if (response.isSuccessful()) {, +      return response.body();, +    }, +    throw new HttpException(response);, +  }, +}, +++ /dev/null, +++ b/pom.xml, +    <rxjava.version>1.2.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyCallable.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.util.concurrent.Callable;]
[+++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to Retrofit you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1]., +, +, + [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to Retrofit you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1]., +, +, + [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/retrofit, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/6608b4713ad80988cdc9, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to Retrofit you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1]., +, +, + [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/retrofit, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/6608b4713ad80988cdc9, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ b/CHANGELOG.md, +   whether the callback was invoked from cancelation or actual transport failure., +++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to Retrofit you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1]., +, +, + [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1]
[+++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String result, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public Observable<String> doStuff() {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public String doStuff() {, +      assertThat(e.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Greetings");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public Observable<String> doStuff() {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +      @Override public Observable<String> doStuff() {, +++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String result, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public Observable<String> doStuff() {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public String doStuff() {, +      assertThat(e.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Greetings");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public Observable<String> doStuff() {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +      @Override public Observable<String> doStuff() {, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (methodInfo.isSynchronous) {, +              return null;, +            }, +++ b/pom.xml, +    <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {]
[+++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/scala/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/guava/pom.xml, +    <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +  @Override public @Nullable CallAdapter<?, ?> get(, +      Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/package-info.java]
[+++ b/pom.xml, +    <okhttp.version>3.1.2</okhttp.version>, +    <rxjava.version>1.1.1</rxjava.version>, +    <gson.version>2.4</gson.version>, +++ b/pom.xml, +    <okhttp.version>3.1.2</okhttp.version>, +    <rxjava.version>1.1.1</rxjava.version>, +    <gson.version>2.4</gson.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import java.lang.reflect.Type;, +import retrofit2.Call;, +import retrofit2.CallAdapter;, +import retrofit2.Response;, +import rx.Completable;, +import rx.Completable.CompletableOnSubscribe;, +import rx.Completable.CompletableSubscriber;, +import rx.Subscription;, +import rx.exceptions.Exceptions;, +import rx.functions.Action0;, +import rx.subscriptions.Subscriptions;, +, +final class CompletableHelper {, +  static final CallAdapter<Completable> INSTANCE =, +      new CallAdapter<Completable>() {, +        @Override public Type responseType() {, +          return Void.class;, +        }, +, +        @Override public Completable adapt(Call call) {, +          return Completable.create(new CompletableCallOnSubscribe(call));, +        }, +      };, +, +  private static final class CompletableCallOnSubscribe implements CompletableOnSubscribe {, +    private final Call originalCall;, +, +    CompletableCallOnSubscribe(Call originalCall) {, +      this.originalCall = originalCall;, +    }, +, +    @Override public void call(CompletableSubscriber subscriber) {, +      // Since Call is a one-shot type, clone it for each new subscriber., +      final Call call = originalCall.clone();, +, +      // Attempt to cancel the call if it is still in-flight on unsubscription., +      Subscription subscription = Subscriptions.create(new Action0() {, +        @Override public void call() {, +          call.cancel();, +        }, +      });, +      subscriber.onSubscribe(subscription);, +, +      try {, +        Response response = call.execute();, +        if (!subscription.isUnsubscribed()) {, +          if (response.isSuccess()) {, +            subscriber.onCompleted();, +          } else {, +            subscriber.onError(new HttpException(response));, +          }, +        }, +      } catch (Throwable t) {, +        Exceptions.throwIfFatal(t);, +        if (!subscription.isUnsubscribed()) {, +          subscriber.onError(t);, +        }, +      }, +    }, +  }, +}, +++ b/pom.xml, +    <okhttp.version>3.1.2</okhttp.version>, +    <rxjava.version>1.1.1</rxjava.version>, +    <gson.version>2.4</gson.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]
[+++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +]
[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final Converter<ResponseBody, T> responseConverter;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +      okhttp3.Call.Factory callFactory, Converter<ResponseBody, T> responseConverter) {, +    this.requestFactory = requestFactory;, +    this.callFactory = callFactory;, +    this.responseConverter = responseConverter;, +    return new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, +    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, +      T body = responseConverter.convert(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final Converter<ResponseBody, T> responseConverter;, +  OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +      okhttp3.Call.Factory callFactory, Converter<ResponseBody, T> responseConverter) {, +    this.requestFactory = requestFactory;, +    this.callFactory = callFactory;, +    this.responseConverter = responseConverter;, +    return new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, +    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, +      T body = responseConverter.convert(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +    return callAdapter.adapt(, +        new OkHttpCall<>(requestFactory, args, callFactory, responseConverter));]
[+++ b/retrofit-converters/protobuf/src/test/java/retrofit2/ProtoConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.String\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.String.\n", +          + "  Tried:\n", +      assertThat(e).hasMessage("", +          + "Unable to create converter for java.util.List<java.lang.String>\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for java.util.List<java.lang.String>.\n", +          + "  Tried:\n", +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/ProtoConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.String\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.String.\n", +          + "  Tried:\n", +      assertThat(e).hasMessage("", +          + "Unable to create converter for java.util.List<java.lang.String>\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for java.util.List<java.lang.String>.\n", +          + "  Tried:\n", +++ b/retrofit-converters/scalars/src/test/java/retrofit2/ScalarsConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create @Body converter for class java.lang.Object (parameter #1)\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate RequestBody converter for class java.lang.Object.\n", +          + "  Tried:\n", +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.Object\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.Object.\n", +          + "  Tried:\n", +          + "   * retrofit2.BuiltInConverters\n", +          + "   * retrofit2.ScalarsConverterFactory");, +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/ProtoConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.String\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.String.\n", +          + "  Tried:\n", +      assertThat(e).hasMessage("", +          + "Unable to create converter for java.util.List<java.lang.String>\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for java.util.List<java.lang.String>.\n", +          + "  Tried:\n", +++ b/retrofit-converters/scalars/src/test/java/retrofit2/ScalarsConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create @Body converter for class java.lang.Object (parameter #1)\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate RequestBody converter for class java.lang.Object.\n", +          + "  Tried:\n", +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.Object\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.Object.\n", +          + "  Tried:\n", +          + "   * retrofit2.BuiltInConverters\n", +          + "   * retrofit2.ScalarsConverterFactory");, +++ b/retrofit-converters/wire/src/test/java/retrofit2/WireConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.String\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.String.\n", +          + "  Tried:\n", +      assertThat(e).hasMessage("", +          + "Unable to create converter for java.util.List<java.lang.String>\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for java.util.List<java.lang.String>.\n", +          + "  Tried:\n", +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/ProtoConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.String\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.String.\n", +          + "  Tried:\n", +      assertThat(e).hasMessage("", +          + "Unable to create converter for java.util.List<java.lang.String>\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for java.util.List<java.lang.String>.\n", +          + "  Tried:\n", +++ b/retrofit-converters/scalars/src/test/java/retrofit2/ScalarsConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create @Body converter for class java.lang.Object (parameter #1)\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate RequestBody converter for class java.lang.Object.\n", +          + "  Tried:\n", +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.Object\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.Object.\n", +          + "  Tried:\n", +          + "   * retrofit2.BuiltInConverters\n", +          + "   * retrofit2.ScalarsConverterFactory");, +++ b/retrofit-converters/wire/src/test/java/retrofit2/WireConverterFactoryTest.java, +      assertThat(e).hasMessage("", +          + "Unable to create converter for class java.lang.String\n", +      assertThat(e.getCause()).hasMessage("", +          + "Could not locate ResponseBody converter for class java.lang.String.\n", +          + "  Tried:\n"]
[+++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.2.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-mock</artifactId>, +  <name>Retrofit Mock Adapter</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.2.3-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-mock</artifactId>, +  <name>Retrofit Mock Adapter</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>]
[+++ b/pom.xml, +    <gson.version>2.2.4</gson.version>, +    <okhttp.version>1.0.2</okhttp.version>, +    <guava.version>14.0.1</guava.version>]
[+++ b/pom.xml, +    <wire.version>1.0.0</wire.version>, +      <dependency>, +        <groupId>com.squareup.wire</groupId>, +        <artifactId>wire-runtime</artifactId>, +        <version>${wire.version}</version>, +      </dependency>, +++ b/pom.xml, +    <wire.version>1.0.0</wire.version>, +      <dependency>, +        <groupId>com.squareup.wire</groupId>, +        <artifactId>wire-runtime</artifactId>, +        <version>${wire.version}</version>, +      </dependency>, +++ b/retrofit-converters/pom.xml, +    <module>wire</module>, +++ b/pom.xml, +    <wire.version>1.0.0</wire.version>, +      <dependency>, +        <groupId>com.squareup.wire</groupId>, +        <artifactId>wire-runtime</artifactId>, +        <version>${wire.version}</version>, +      </dependency>, +++ b/retrofit-converters/pom.xml, +    <module>wire</module>, +++ b/retrofit-converters/wire/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<!--, +  ~ Copyright 2013 Square, Inc., +  -->, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>1.2.1-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-wire</artifactId>, +  <name>Converter: Wire Protocol Buffers</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.wire</groupId>, +      <artifactId>wire-runtime</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <wire.version>1.0.0</wire.version>, +      <dependency>, +        <groupId>com.squareup.wire</groupId>, +        <artifactId>wire-runtime</artifactId>, +        <version>${wire.version}</version>, +      </dependency>, +++ b/retrofit-converters/pom.xml, +    <module>wire</module>, +++ b/retrofit-converters/wire/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<!--, +  ~ Copyright 2013 Square, Inc., +  -->, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>1.2.1-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-wire</artifactId>]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import retrofit2.Response;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +, +final class BodyOnSubscribe<T> implements OnSubscribe<T> {, +  private final OnSubscribe<Response<T>> upstream;, +, +  BodyOnSubscribe(OnSubscribe<Response<T>> upstream) {, +    this.upstream = upstream;, +  }, +, +  @Override public void call(Subscriber<? super T> subscriber) {, +    upstream.call(new BodySubscriber<>(subscriber));, +  }, +, +  private static class BodySubscriber<R> extends Subscriber<Response<R>> {, +    private final Subscriber<? super R> subscriber;, +    /** Indicates whether a terminal event has been sent to {@link #subscriber}. */, +    private boolean subscriberTerminated;, +, +    BodySubscriber(Subscriber<? super R> subscriber) {, +      super(subscriber);, +      this.subscriber = subscriber;, +    }, +, +    @Override public void onNext(Response<R> response) {, +      if (response.isSuccessful()) {, +        subscriber.onNext(response.body());, +      } else {, +        subscriberTerminated = true;, +        subscriber.onError(new HttpException(response));, +      }, +    }, +, +    @Override public void onError(Throwable throwable) {, +      if (!subscriberTerminated) {, +        subscriber.onError(throwable);, +      }, +      // TODO else send to plugin as unhandled error, +    }, +, +    @Override public void onCompleted() {, +      if (!subscriberTerminated) {, +        subscriber.onCompleted();, +      }, +    }, +  }, +}, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.adapter.rxjava;, +, +import retrofit2.Response;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +, +final class BodyOnSubscribe<T> implements OnSubscribe<T> {, +  private final OnSubscribe<Response<T>> upstream;, +, +  BodyOnSubscribe(OnSubscribe<Response<T>> upstream) {, +    this.upstream = upstream;, +  }, +, +  @Override public void call(Subscriber<? super T> subscriber) {, +    upstream.call(new BodySubscriber<>(subscriber));, +  }, +, +  private static class BodySubscriber<R> extends Subscriber<Response<R>> {]
[+++ b/retrofit/src/main/java/retrofit2/HttpException.java, +public class HttpException extends RuntimeException {]
[+++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <!-- Sample Dependencies -->, +    <jsoup.version>1.7.3</jsoup.version>, +, +++ b/pom.xml, +    <!-- Sample Dependencies -->, +    <jsoup.version>1.7.3</jsoup.version>, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import android.net.Uri;, +import java.net.URI;, +  static final class StringUrl extends ParameterHandler<String> {, +    @Override void apply(RequestBuilder builder, String value) {, +  static final class JavaUriUrl extends ParameterHandler<URI> {, +    @Override void apply(RequestBuilder builder, URI value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +  static final class AndroidUriUrl extends ParameterHandler<Uri> {, +    @Override void apply(RequestBuilder builder, Uri value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +++ b/pom.xml, +    <!-- Sample Dependencies -->, +    <jsoup.version>1.7.3</jsoup.version>, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import android.net.Uri;, +import java.net.URI;, +  static final class StringUrl extends ParameterHandler<String> {, +    @Override void apply(RequestBuilder builder, String value) {, +  static final class JavaUriUrl extends ParameterHandler<URI> {, +    @Override void apply(RequestBuilder builder, URI value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +  static final class AndroidUriUrl extends ParameterHandler<Uri> {, +    @Override void apply(RequestBuilder builder, Uri value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(String relativeUrl) {, +    this.relativeUrl = relativeUrl;, +++ b/pom.xml, +    <!-- Sample Dependencies -->, +    <jsoup.version>1.7.3</jsoup.version>, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import android.net.Uri;, +import java.net.URI;, +  static final class StringUrl extends ParameterHandler<String> {, +    @Override void apply(RequestBuilder builder, String value) {, +  static final class JavaUriUrl extends ParameterHandler<URI> {, +    @Override void apply(RequestBuilder builder, URI value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +  static final class AndroidUriUrl extends ParameterHandler<Uri> {, +    @Override void apply(RequestBuilder builder, Uri value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(String relativeUrl) {, +    this.relativeUrl = relativeUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +        if (type == String.class) {, +          return new ParameterHandler.StringUrl();, +        } else if (type == URI.class) {, +          return new ParameterHandler.JavaUriUrl();, +        } else if (type instanceof Class, +            && "android.net.Uri".equals(((Class<?>) type).getCanonicalName())) {, +          return new ParameterHandler.AndroidUriUrl();, +          throw parameterError(p, "@Url must be String, java.net.URI, or android.net.Uri type.");, +++ b/pom.xml, +    <!-- Sample Dependencies -->, +    <jsoup.version>1.7.3</jsoup.version>, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import android.net.Uri;, +import java.net.URI;, +  static final class StringUrl extends ParameterHandler<String> {, +    @Override void apply(RequestBuilder builder, String value) {, +  static final class JavaUriUrl extends ParameterHandler<URI> {, +    @Override void apply(RequestBuilder builder, URI value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +  static final class AndroidUriUrl extends ParameterHandler<Uri> {, +    @Override void apply(RequestBuilder builder, Uri value) {, +      builder.setRelativeUrl(value.toString());]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/pom.xml, +    <animal.sniffer.version>1.14</animal.sniffer.version>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-annotations</artifactId>, +        <version>${animal.sniffer.version}</version>, +      </dependency>, +      <dependency>, +, +      <plugin>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-maven-plugin</artifactId>, +        <version>${animal.sniffer.version}</version>, +        <executions>, +          <execution>, +            <phase>test</phase>, +            <goals>, +              <goal>check</goal>, +            </goals>, +          </execution>, +        </executions>, +        <configuration>, +          <signature>, +            <groupId>org.codehaus.mojo.signature</groupId>, +            <artifactId>java16</artifactId>, +            <version>1.1</version>, +          </signature>, +        </configuration>, +      </plugin>, +++ b/.travis.yml, +++ b/pom.xml, +    <animal.sniffer.version>1.14</animal.sniffer.version>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-annotations</artifactId>, +        <version>${animal.sniffer.version}</version>, +      </dependency>, +      <dependency>, +, +      <plugin>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-maven-plugin</artifactId>, +        <version>${animal.sniffer.version}</version>, +        <executions>, +          <execution>, +            <phase>test</phase>, +            <goals>, +              <goal>check</goal>, +            </goals>, +          </execution>, +        </executions>, +        <configuration>, +          <signature>, +            <groupId>org.codehaus.mojo.signature</groupId>, +            <artifactId>java16</artifactId>, +            <version>1.1</version>, +          </signature>, +        </configuration>, +      </plugin>, +++ b/retrofit/pom.xml, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +++ b/.travis.yml, +++ b/pom.xml, +    <animal.sniffer.version>1.14</animal.sniffer.version>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-annotations</artifactId>, +        <version>${animal.sniffer.version}</version>, +      </dependency>, +      <dependency>, +, +      <plugin>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-maven-plugin</artifactId>, +        <version>${animal.sniffer.version}</version>, +        <executions>, +          <execution>, +            <phase>test</phase>, +            <goals>, +              <goal>check</goal>, +            </goals>, +          </execution>, +        </executions>, +        <configuration>, +          <signature>, +            <groupId>org.codehaus.mojo.signature</groupId>, +            <artifactId>java16</artifactId>, +            <version>1.1</version>, +          </signature>, +        </configuration>, +      </plugin>, +++ b/retrofit/pom.xml, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <optional>true</optional>, +    </dependency>]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +      String name = isFlowable ? "Flowable", +          : isSingle ? "Single", +          : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +      String name = isFlowable ? "Flowable", +          : isSingle ? "Single", +          : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package retrofit2.adapter.rxjava2;, +, +import com.google.common.reflect.TypeToken;, +import io.reactivex.Completable;, +import io.reactivex.Flowable;, +import io.reactivex.Maybe;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import java.util.List;, +import org.junit.Before;, +import org.junit.Test;, +import retrofit2.CallAdapter;, +import retrofit2.Response;, +import retrofit2.Retrofit;, +import io.reactivex.Observable;, +import io.reactivex.Single;, +import io.reactivex.Flowable;, +import io.reactivex.Maybe;, +import io.reactivex.Completable;, +, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.fail;, +, +public class RxJava2CallAdapterFactoryTest {, +  private static final Annotation[] NO_ANNOTATIONS = new Annotation[0];, +, +  private final CallAdapter.Factory factory = RxJava2CallAdapterFactory.create();, +  private Retrofit retrofit;, +, +  @Before public void setUp() {, +    retrofit = new Retrofit.Builder(), +        .baseUrl("http://localhost:1"), +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(factory), +        .build();, +  }, +, +  @Test public void nullSchedulerThrows() {, +    try {, +      RxJava2CallAdapterFactory.createWithScheduler(null);, +      fail();, +    } catch (NullPointerException e) {, +      assertThat(e).hasMessage("scheduler == null");, +    }, +  }, +, +  @Test public void nonRxJavaTypeReturnsNull() {, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +    assertThat(adapter).isNull();, +  }, +, +  @Test public void responseTypes() {, +    Type oBodyClass = new TypeToken<Observable<String>>() {}.getType();, +    assertThat(factory.get(oBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type sBodyClass = new TypeToken<Single<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +, +    Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();, +    assertThat(factory.get(oBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type sBodyWildcard = new TypeToken<Single<? extends String>>() {}.getType();, +    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();, +    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();]
[+++ b/pom.xml, +    <okhttp.version>3.8.1</okhttp.version>, +    <gson.version>2.8.2</gson.version>]
[+++ b/pom.xml, +    <okhttp.version>3.0.0-RC1</okhttp.version>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <module>sync-sample</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <module>sync-sample</module>, +++ b/sync-sample/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +      package="retrofit.test_app", +      android:versionCode="1", +      android:versionName="1.0">, +    <application android:label="Test Retrofit">, +        <activity android:name="Main", +                  android:label="Test Retrofit">, +            <intent-filter>, +                <action android:name="android.intent.action.MAIN" />, +                <category android:name="android.intent.category.LAUNCHER" />, +            </intent-filter>, +        </activity>, +    </application>, +</manifest> , +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <module>sync-sample</module>, +++ b/sync-sample/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +      package="retrofit.test_app", +      android:versionCode="1", +      android:versionName="1.0">, +    <application android:label="Test Retrofit">, +        <activity android:name="Main", +                  android:label="Test Retrofit">, +            <intent-filter>, +                <action android:name="android.intent.action.MAIN" />, +                <category android:name="android.intent.category.LAUNCHER" />, +            </intent-filter>, +        </activity>, +    </application>, +</manifest> , +++ b/sync-sample/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup</groupId>, +    <artifactId>retrofit</artifactId>, +    <version>0.8.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-sync-sample</artifactId>, +  <packaging>apk</packaging>, +  <name>Directory Sync Sample</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>retrofit-sync</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +, +  <build>]
[+++ b/pom.xml, +    <gson.version>2.2.4</gson.version>, +    <okhttp.version>1.0.2</okhttp.version>, +    <guava.version>14.0.1</guava.version>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.converter.gson;, +, +import com.google.gson.Gson;, +import com.google.gson.TypeAdapter;, +import com.google.gson.reflect.TypeToken;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +import retrofit2.Retrofit;, +, +/**, + * A {@linkplain Converter.Factory converter} which uses Gson for JSON., + * <p>, + * Because Gson is so flexible in the types it supports, this converter assumes that it can handle, + * all types. If you are mixing JSON serialization with something else (such as protocol buffers),, + * you must {@linkplain Retrofit.Builder#addConverterFactory(Converter.Factory) add this instance}, + * last to allow the other converters a chance to see their types., + */, +public final class GsonConverterFactory extends Converter.Factory {, +  /**, +   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and, +   * decoding from JSON (when no charset is specified by a header) will use UTF-8., +   */, +  public static GsonConverterFactory create() {, +    return create(new Gson());, +  }, +, +  /**, +   * Create an instance using {@code gson} for conversion. Encoding to JSON and, +   * decoding from JSON (when no charset is specified by a header) will use UTF-8., +   */, +  public static GsonConverterFactory create(Gson gson) {, +    return new GsonConverterFactory(gson);, +  }, +, +  private final Gson gson;, +, +  private GsonConverterFactory(Gson gson) {, +    if (gson == null) throw new NullPointerException("gson == null");, +    this.gson = gson;, +  }, +, +  @Override, +  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonResponseBodyConverter<>(adapter);, +  }, +, +  @Override, +  public Converter<?, RequestBody> requestBodyConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonRequestBodyConverter<>(gson, adapter);, +  }, +}, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*]
[+++ b/build.xml, +    <echo, +        message="${line.separator}Test report written to:${line.separator}${testreports.dir}/index.html"/>, +  </target>, +, +  <!--, +    - Publishes to the Ivy repository using the resolver named, +    - 'retrofit-resolver'., +    -->, +  <target name="publish" depends="dist">, +    <ivy:publish, +        pubrevision="${retrofit.revision}", +        resolver="retrofit-resolver", +        forcedeliver="true", +        update="true", +        overwrite="true", +        publishivy="true">, +      <!--, +        - This pattern selects which files will be published. The artifact, +        - pattern in ivy-settings.xml controls how the names matched here are, +        - published in the Ivy repository., +        -->, +      <artifacts pattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]"/>, +    </ivy:publish>, +++ b/build.xml, +    <echo, +        message="${line.separator}Test report written to:${line.separator}${testreports.dir}/index.html"/>, +  </target>, +, +  <!--, +    - Publishes to the Ivy repository using the resolver named, +    - 'retrofit-resolver'., +    -->, +  <target name="publish" depends="dist">, +    <ivy:publish, +        pubrevision="${retrofit.revision}", +        resolver="retrofit-resolver", +        forcedeliver="true", +        update="true", +        overwrite="true", +        publishivy="true">, +      <!--, +        - This pattern selects which files will be published. The artifact, +        - pattern in ivy-settings.xml controls how the names matched here are, +        - published in the Ivy repository., +        -->, +      <artifacts pattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]"/>, +    </ivy:publish>, +++ b/ivy-build.xml, +<project xmlns:ivy="antlib:org.apache.ivy.ant", +         name="ivy-build" basedir="." default="init-ivy">, +, +    <ivy:configure file="ivy-settings.xml"/>, +++ b/build.xml, +    <echo, +        message="${line.separator}Test report written to:${line.separator}${testreports.dir}/index.html"/>, +  </target>, +, +  <!--, +    - Publishes to the Ivy repository using the resolver named, +    - 'retrofit-resolver'., +    -->, +  <target name="publish" depends="dist">, +    <ivy:publish, +        pubrevision="${retrofit.revision}", +        resolver="retrofit-resolver", +        forcedeliver="true", +        update="true", +        overwrite="true", +        publishivy="true">, +      <!--, +        - This pattern selects which files will be published. The artifact, +        - pattern in ivy-settings.xml controls how the names matched here are, +        - published in the Ivy repository., +        -->, +      <artifacts pattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]"/>, +    </ivy:publish>, +++ b/ivy-build.xml, +<project xmlns:ivy="antlib:org.apache.ivy.ant", +         name="ivy-build" basedir="." default="init-ivy">, +, +    <ivy:configure file="ivy-settings.xml"/>, +++ b/ivy-settings.xml, +<?xml version="1.0" encoding="utf-8"?>, +<!-- Copyright 2010 Square, Inc. -->, +, +<!--, +  - Configures the Ivy resolver. The Ant build file references this using the, +  - <ivy:configure file="ivy-settings.xml"/> tag., +  -, +  - @author Eric Burke (eric@squareup.com), +  -->, +<ivysettings>, +  <settings defaultResolver="retrofit-resolver"/>, +  <resolvers>, +    <chain name="retrofit-resolver">, +      <filesystem name="libraries">, +        <!--, +          - This pattern controls how artifacts are named when published to, +          - the repository.]
[+++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>]
[+++ b/pom.xml, +    <okhttp.version>2.3.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>2.3.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  @Override public long contentLength() throws IOException {, +    try {, +    } catch (IOException e) {, +      thrownException = e;, +      throw e;, +    }, +  @Override public BufferedSource source() throws IOException {, +    BufferedSource delegateSource;, +    try {, +      delegateSource = delegate.source();, +    } catch (IOException e) {, +      thrownException = e;, +      throw e;, +    }, +    return Okio.buffer(new ForwardingSource(delegateSource) {, +++ b/pom.xml, +    <okhttp.version>2.3.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  @Override public long contentLength() throws IOException {, +    try {, +    } catch (IOException e) {, +      thrownException = e;, +      throw e;, +    }, +  @Override public BufferedSource source() throws IOException {, +    BufferedSource delegateSource;, +    try {, +      delegateSource = delegate.source();, +    } catch (IOException e) {, +      thrownException = e;, +      throw e;, +    }, +    return Okio.buffer(new ForwardingSource(delegateSource) {, +++ b/retrofit/src/main/java/retrofit/FormEncodingBuilder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.ByteString;, +, +final class FormEncodingBuilder {, +  private final Buffer content = new Buffer();, +, +  FormEncodingBuilder add(String name, boolean encodeName, String value, boolean encodeValue) {, +    if (content.size() > 0) {, +      content.writeByte('&');, +    }, +    try {, +      if (encodeName) {, +        name = URLEncoder.encode(name, "UTF-8");, +      }, +      if (encodeValue) {, +        value = URLEncoder.encode(value, "UTF-8");, +      }, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError(e);, +    }, +    content.writeUtf8(name);, +    content.writeByte('=');, +    content.writeUtf8(value);, +    return this;, +  }, +, +  RequestBody build() {, +    if (content.size() == 0) {, +      throw new IllegalStateException("Form encoded body must have at least one part.");, +    }, +    return new FormEncodingRequestBody(content.snapshot());, +  }, +, +  private static final class FormEncodingRequestBody extends RequestBody {, +    private static final MediaType CONTENT_TYPE =, +        MediaType.parse("application/x-www-form-urlencoded");, +, +    private final ByteString snapshot;]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +      String name = isFlowable ? "Flowable", +          : isSingle ? "Single", +          : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +      String name = isFlowable ? "Flowable", +          : isSingle ? "Single", +          : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package retrofit2.adapter.rxjava2;, +, +import com.google.common.reflect.TypeToken;, +import io.reactivex.Completable;, +import io.reactivex.Flowable;, +import io.reactivex.Maybe;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import java.util.List;, +import org.junit.Before;, +import org.junit.Test;, +import retrofit2.CallAdapter;, +import retrofit2.Response;, +import retrofit2.Retrofit;, +import io.reactivex.Observable;, +import io.reactivex.Single;, +import io.reactivex.Flowable;, +import io.reactivex.Maybe;, +import io.reactivex.Completable;, +, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.fail;, +, +public class RxJava2CallAdapterFactoryTest {, +  private static final Annotation[] NO_ANNOTATIONS = new Annotation[0];, +, +  private final CallAdapter.Factory factory = RxJava2CallAdapterFactory.create();, +  private Retrofit retrofit;, +, +  @Before public void setUp() {, +    retrofit = new Retrofit.Builder(), +        .baseUrl("http://localhost:1"), +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(factory), +        .build();, +  }, +, +  @Test public void nullSchedulerThrows() {, +    try {, +      RxJava2CallAdapterFactory.createWithScheduler(null);, +      fail();, +    } catch (NullPointerException e) {, +      assertThat(e).hasMessage("scheduler == null");, +    }, +  }, +, +  @Test public void nonRxJavaTypeReturnsNull() {, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +    assertThat(adapter).isNull();, +  }, +, +  @Test public void responseTypes() {, +    Type oBodyClass = new TypeToken<Observable<String>>() {}.getType();, +    assertThat(factory.get(oBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type sBodyClass = new TypeToken<Single<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +, +    Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();, +    assertThat(factory.get(oBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type sBodyWildcard = new TypeToken<Single<? extends String>>() {}.getType();, +    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();, +    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();]
[+++ b/.travis.yml, +  - wget http://dl.google.com/android/ndk/android-ndk-r8b-linux-x86.tar.bz2, +  - tar -jxf android-ndk-r8b-linux-x86.tar.bz2, +  - export ANDROID_NDK_HOME=~/builds/square/retrofit/android-ndk-r8b, +  - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_NDK_HOME}]
[+++ b/pom.xml, +    <gson.version>2.8.0</gson.version>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +    return response(Response.success(successValue));, +  public static <T> Call<T> response(final Response<T> response) {, +    return new Call<T>() {, +      @Override public Response<T> execute() throws IOException {, +        return response;, +      @Override public void enqueue(Callback<T> callback) {, +        callback.onResponse(this, response);, +      }, +, +      @Override public boolean isExecuted() {, +        return false;, +      }, +, +      @Override public void cancel() {, +      }, +, +      @Override public boolean isCanceled() {, +        return false;, +      }, +, +      @SuppressWarnings("CloneDoesntCallSuperClone") // Immutable object., +      @Override public Call<T> clone() {, +        return this;, +      }, +, +      @Override public Request request() {, +        return response.raw().request();, +      }, +    };, +  }, +, +  public static <T> Call<T> failure(final IOException failure) {, +    return new Call<T>() {, +      @Override public Response<T> execute() throws IOException {, +        throw failure;, +      }, +, +      @Override public void enqueue(Callback<T> callback) {, +        callback.onFailure(this, failure);, +      }, +, +      @Override public boolean isExecuted() {, +        return false;, +      }, +, +      @Override public void cancel() {, +      }, +, +      @Override public boolean isCanceled() {, +        return false;, +      }, +, +      @SuppressWarnings("CloneDoesntCallSuperClone") // Immutable object., +      @Override public Call<T> clone() {, +        return this;, +      }, +, +      @Override public Request request() {, +        return new Request.Builder().url("http://localhost").build();, +      }, +    };, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +    return response(Response.success(successValue));, +  public static <T> Call<T> response(final Response<T> response) {, +    return new Call<T>() {, +      @Override public Response<T> execute() throws IOException {, +        return response;, +      @Override public void enqueue(Callback<T> callback) {, +        callback.onResponse(this, response);, +      }, +, +      @Override public boolean isExecuted() {, +        return false;, +      }, +, +      @Override public void cancel() {, +      }, +, +      @Override public boolean isCanceled() {, +        return false;, +      }, +, +      @SuppressWarnings("CloneDoesntCallSuperClone") // Immutable object., +      @Override public Call<T> clone() {, +        return this;, +      }, +, +      @Override public Request request() {, +        return response.raw().request();, +      }, +    };, +  }, +, +  public static <T> Call<T> failure(final IOException failure) {, +    return new Call<T>() {, +      @Override public Response<T> execute() throws IOException {]
[+++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1</version>, +++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1</version>, +++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1</version>, +++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1</version>, +++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.1</version>, +++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.1</version>, +++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.6.1</version>, +++ b/pom.xml, +  <version>1.6.1</version>, +    <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.6.1</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.6.1</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +        url.append('?').append(requestQuery);, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +        url.append('?').append(requestQuery);, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +        .setQuery("hi=mom") //, +  @Test public void getWithQuery() throws Exception {, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .setQuery("hi=mom") //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()).isEmpty();, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?hi=mom");, +    assertThat(request.getBody()).isNull();, +  }, +]
[+++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/pom.xml, +  <version>2.0.0-beta2</version>, +    <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>2.0.0-beta2</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <okhttp.version>3.8.1</okhttp.version>, +    <gson.version>2.8.0</gson.version>, +    <moshi.version>1.5.0</moshi.version>]
[+++ b/retrofit-converters/guava/README.md, +Guava Converter, +===============, +, +A `Converter` which supports Guava's `Optional<T>` by delegating to other converters for `T`, +and then wrapping it into `Optional`., +, +, +Download, +--------, +, +Download [the latest JAR][1] or grab via [Maven][2]:, +```xml, +<dependency>, +  <groupId>com.squareup.retrofit2</groupId>, +  <artifactId>converter-guava</artifactId>, +  <version>latest.version</version>, +</dependency>, +```, +or [Gradle][2]:, +```groovy, +compile 'com.squareup.retrofit2:converter-guava:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [1]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-guava&v=LATEST, + [2]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-guava%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/retrofit-converters/guava/README.md, +Guava Converter, +===============, +, +A `Converter` which supports Guava's `Optional<T>` by delegating to other converters for `T`, +and then wrapping it into `Optional`., +, +, +Download, +--------, +, +Download [the latest JAR][1] or grab via [Maven][2]:, +```xml, +<dependency>, +  <groupId>com.squareup.retrofit2</groupId>, +  <artifactId>converter-guava</artifactId>, +  <version>latest.version</version>, +</dependency>, +```, +or [Gradle][2]:, +```groovy, +compile 'com.squareup.retrofit2:converter-guava:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [1]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-guava&v=LATEST, + [2]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-guava%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/retrofit-converters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit2</groupId>, +    <artifactId>retrofit-converters</artifactId>, +    <version>2.3.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>converter-guava</artifactId>, +  <name>Converter: Guava</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>]
[+++ b/retrofit/src/main/java/retrofit/ChangeableServer.java, +/** An {@link Endpoint} whose URL and name can be changed at runtime. */, +@Deprecated public class ChangeableServer implements Endpoint {, +++ b/retrofit/src/main/java/retrofit/ChangeableServer.java, +/** An {@link Endpoint} whose URL and name can be changed at runtime. */, +@Deprecated public class ChangeableServer implements Endpoint {, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +package retrofit;, +, +/**, + * Represents an API endpoint URL and associated name. Callers should always consult the instance, + * for the latest values rather than caching the returned values., + *, + * @author Matt Hickman (mhickman@palantir.com), + */, +public interface Endpoint {, +, +  /** The base API URL. */, +  String getUrl();, +, +  /** A name for differentiating between multiple API URLs. */, +  String getName();, +, +}, +++ b/retrofit/src/main/java/retrofit/ChangeableServer.java, +/** An {@link Endpoint} whose URL and name can be changed at runtime. */, +@Deprecated public class ChangeableServer implements Endpoint {, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +package retrofit;, +, +/**, + * Represents an API endpoint URL and associated name. Callers should always consult the instance, + * for the latest values rather than caching the returned values., + *, + * @author Matt Hickman (mhickman@palantir.com), + */, +public interface Endpoint {, +, +  /** The base API URL. */, +  String getUrl();, +, +  /** A name for differentiating between multiple API URLs. */, +  String getName();, +, +}, +++ b/retrofit/src/main/java/retrofit/Endpoints.java, +package retrofit;, +, +/**, + * Static factory methods for creating {@link Endpoint}, + * instances., + *, + * @author Matt Hickman (mhickman@palantir.com), + */, +public abstract class Endpoints {, +, +  /** Create a server with the provided URL. */, +  public static Endpoint newFixedEndpoint(String url) {, +    return new Server(url);, +  }, +, +  /** Create an endpoint with the provided URL and name. */, +  public static Endpoint newFixedEndpoint(String url, String name) {, +    return new Server(url, name);, +  }, +, +}, +++ b/retrofit/src/main/java/retrofit/ChangeableServer.java, +/** An {@link Endpoint} whose URL and name can be changed at runtime. */, +@Deprecated public class ChangeableServer implements Endpoint {, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +package retrofit;, +, +/**, + * Represents an API endpoint URL and associated name. Callers should always consult the instance, + * for the latest values rather than caching the returned values., + *, + * @author Matt Hickman (mhickman@palantir.com), + */, +public interface Endpoint {, +, +  /** The base API URL. */, +  String getUrl();, +, +  /** A name for differentiating between multiple API URLs. */, +  String getName();, +, +}, +++ b/retrofit/src/main/java/retrofit/Endpoints.java, +package retrofit;, +, +/**, + * Static factory methods for creating {@link Endpoint}, + * instances., + *, + * @author Matt Hickman (mhickman@palantir.com), + */, +public abstract class Endpoints {, +, +  /** Create a server with the provided URL. */]
[+++ b/pom.xml, +    <wire.version>1.7.0</wire.version>, +++ b/pom.xml, +    <wire.version>1.7.0</wire.version>, +++ b/retrofit-converters/gson/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/pom.xml, +    <wire.version>1.7.0</wire.version>, +++ b/retrofit-converters/gson/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import com.google.gson.TypeAdapter;, +import com.google.gson.stream.JsonReader;, +import com.google.gson.stream.JsonToken;, +import com.google.gson.stream.JsonWriter;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Rule;, +import retrofit.http.Body;, +import retrofit.http.POST;, +  interface AnInterface {, +  static class AnImplementation implements AnInterface {, +    AnImplementation(String name) {, +  static class AnInterfaceAdapter extends TypeAdapter<AnInterface> {, +    @Override public void write(JsonWriter jsonWriter, AnInterface anInterface) throws IOException {, +      jsonWriter.beginObject();, +      jsonWriter.name("name").value(anInterface.getName());, +      jsonWriter.endObject();, +    }, +, +    @Override public AnInterface read(JsonReader jsonReader) throws IOException {, +      jsonReader.beginObject();, +, +      String name = null;, +      while (jsonReader.peek() != JsonToken.END_OBJECT) {, +        switch (jsonReader.nextName()) {, +          case "name":, +            name = jsonReader.nextString();, +            break;, +        }, +      }, +, +      jsonReader.endObject();, +      return new AnImplementation(name);, +    }, +  }, +, +  interface Service {, +    @POST("/") Call<AnImplementation> anImplementation(@Body AnImplementation impl);, +    @POST("/") Call<AnInterface> anInterface(@Body AnInterface impl);, +  }, +, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +, +  private Service service;, +, +        .registerTypeAdapter(AnInterface.class, new AnInterfaceAdapter()), +    Converter converter = new GsonConverter(gson);, +    Retrofit retrofit = new Retrofit.Builder(), +        .endpoint(server.getUrl("/").toString()), +        .converter(converter), +        .build();, +    service = retrofit.create(Service.class);, +  @Test public void anInterface() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("{\"name\":\"value\"}"));, +, +    Call<AnInterface> call = service.anInterface(new AnImplementation("value"));, +    Response<AnInterface> response = call.execute();, +    AnInterface body = response.body();, +    assertThat(body.getName()).isEqualTo("value");, +, +    RecordedRequest request = server.takeRequest();, +    assertThat(request.getBody().readUtf8()).isEqualTo("{\"name\":\"value\"}");, +    assertThat(request.getHeader("Content-Type")).isEqualTo("application/json; charset=UTF-8");, +  @Test public void anImplementation() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("{\"theName\":\"value\"}"));, +    Call<AnImplementation> call = service.anImplementation(new AnImplementation("value"));, +    Response<AnImplementation> response = call.execute();]
[+++ b/pom.xml, +    <okhttp.version>2.5.0</okhttp.version>, +    <rxjava.version>1.0.13</rxjava.version>, +++ b/pom.xml, +    <okhttp.version>2.5.0</okhttp.version>, +    <rxjava.version>1.0.13</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/pom.xml, +    <okhttp.version>2.5.0</okhttp.version>, +    <rxjava.version>1.0.13</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +        client = new OkHttpClient();]
[+++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java]
[+++ b/pom.xml, +    <moshi.version>1.8.0</moshi.version>, +++ b/pom.xml, +    <moshi.version>1.8.0</moshi.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +      reader.skipName();, +      assertThat(e).hasMessage("Cannot skip unexpected NAME at $.");]
[+++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit-adapters/java8/README.md, +Java 8 Adapter (Deprecated), +===========================, +A call adapter [Java 8's `CompletableFuture`][1]., +This adapter is no longer needed. Support for `CompletableFuture` is built-in to Retrofit and now, +works without configuration., +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit-adapters/java8/README.md, +Java 8 Adapter (Deprecated), +===========================, +A call adapter [Java 8's `CompletableFuture`][1]., +This adapter is no longer needed. Support for `CompletableFuture` is built-in to Retrofit and now, +works without configuration., +++ b/retrofit-converters/java8/README.md, +Java 8 Converter (Deprecated), +=============================, +This converter is no longer needed. Support for `Optional` is built-in to Retrofit and now works, +without configuration., +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit-adapters/java8/README.md, +Java 8 Adapter (Deprecated), +===========================, +A call adapter [Java 8's `CompletableFuture`][1]., +This adapter is no longer needed. Support for `CompletableFuture` is built-in to Retrofit and now, +works without configuration., +++ b/retrofit-converters/java8/README.md, +Java 8 Converter (Deprecated), +=============================, +This converter is no longer needed. Support for `Optional` is built-in to Retrofit and now works, +without configuration., +++ b/retrofit/src/main/java/retrofit2/CompletableFutureCallAdapterFactory.java, +import java.io.IOException;, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Java 8 futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link CompletableFuture} from, + * service methods., + * <pre><code>, + * interface MyService {, + *   &#64;GET("user/me"), + *   CompletableFuture&lt;User&gt; getUser(), + * }, + * </code></pre>, + * There are two configurations supported for the {@code CompletableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code CompletableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, + * <li>Response wrapped body (e.g., {@code CompletableFuture<Response<User>>}) returns a, + * {@link Response} object for all HTTP responses and sets {@link IOException} for network, + * errors</li>, + * </ul>, + */, +@IgnoreJRERequirement, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit-adapters/java8/README.md, +Java 8 Adapter (Deprecated), +===========================, +A call adapter [Java 8's `CompletableFuture`][1]., +This adapter is no longer needed. Support for `CompletableFuture` is built-in to Retrofit and now, +works without configuration., +++ b/retrofit-converters/java8/README.md, +Java 8 Converter (Deprecated), +=============================, +This converter is no longer needed. Support for `Optional` is built-in to Retrofit and now works, +without configuration., +++ b/retrofit/src/main/java/retrofit2/CompletableFutureCallAdapterFactory.java, +import java.io.IOException;, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Java 8 futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link CompletableFuture} from, + * service methods., + * <pre><code>, + * interface MyService {, + *   &#64;GET("user/me"), + *   CompletableFuture&lt;User&gt; getUser(), + * }, + * </code></pre>, + * There are two configurations supported for the {@code CompletableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code CompletableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, + * <li>Response wrapped body (e.g., {@code CompletableFuture<Response<User>>}) returns a, + * {@link Response} object for all HTTP responses and sets {@link IOException} for network, + * errors</li>, + * </ul>, + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another]
[+++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/pom.xml, +    <module>retrofit-converters</module>, +    <okhttp.version>1.1.1</okhttp.version>, +, +    <!-- Converter Dependencies -->, +    <protobuf.version>2.5.0</protobuf.version>, +        <groupId>com.google.protobuf</groupId>, +        <artifactId>protobuf-java</artifactId>, +        <version>${protobuf.version}</version>, +      </dependency>, +, +      <dependency>, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/pom.xml, +    <module>retrofit-converters</module>, +    <okhttp.version>1.1.1</okhttp.version>, +, +    <!-- Converter Dependencies -->, +    <protobuf.version>2.5.0</protobuf.version>, +        <groupId>com.google.protobuf</groupId>, +        <artifactId>protobuf-java</artifactId>, +        <version>${protobuf.version}</version>, +      </dependency>, +, +      <dependency>, +++ b/retrofit-converters/README.md, +Retrofit Converters, +===================, +, +Retrofit ships with a default converter for JSON that uses Gson but the library is content-format, +agnostic. The child modules contained herein are additional converters for other popular formats., +, +To use, supply an instance of your desired converter when building your `RestAdapter` instance., +, +```java, +RestAdapter restAdapter = new RestAdapter.Builder(), +    .setServer("https://api.fake.google.com"), +    .setConverter(new ProtoConverter()), +    .build();, +```, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/pom.xml, +    <module>retrofit-converters</module>, +    <okhttp.version>1.1.1</okhttp.version>, +, +    <!-- Converter Dependencies -->, +    <protobuf.version>2.5.0</protobuf.version>, +        <groupId>com.google.protobuf</groupId>, +        <artifactId>protobuf-java</artifactId>, +        <version>${protobuf.version}</version>, +      </dependency>, +, +      <dependency>, +++ b/retrofit-converters/README.md, +Retrofit Converters, +===================, +, +Retrofit ships with a default converter for JSON that uses Gson but the library is content-format, +agnostic. The child modules contained herein are additional converters for other popular formats., +, +To use, supply an instance of your desired converter when building your `RestAdapter` instance., +, +```java, +RestAdapter restAdapter = new RestAdapter.Builder(), +    .setServer("https://api.fake.google.com"), +    .setConverter(new ProtoConverter()), +    .build();, +```, +++ b/retrofit-converters/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.1.2-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-converters</artifactId>, +  <name>Converters</name>, +  <packaging>pom</packaging>, +, +  <modules>, +    <module>protobuf</module>, +  </modules>, +</project>, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/pom.xml, +    <module>retrofit-converters</module>, +    <okhttp.version>1.1.1</okhttp.version>]
[+++ b/pom.xml, +    <rxjava.version>1.1.9</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>1.1.9</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +  @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    subscriber.assertError(HttpException.class, "HTTP 404 Client Error");, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +++ b/pom.xml, +    <rxjava.version>1.1.9</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +  @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    subscriber.assertError(HttpException.class, "HTTP 404 Client Error");, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableWithSchedulerTest.java, +  @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, +    RecordingSubscriber<String> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    subscriber.assertNoEvents();, +++ b/pom.xml, +    <rxjava.version>1.1.9</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +  @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    subscriber.assertError(HttpException.class, "HTTP 404 Client Error");, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableWithSchedulerTest.java, +  @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, +    RecordingSubscriber<String> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    subscriber.assertNoEvents();, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +  @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, +    RecordingSubscriber<String> subscriber = subscriberRule.create();, +    service.body().unsafeSubscribe(subscriber);, +    subscriber.assertValue("Hi").assertCompleted();, +    RecordingSubscriber<String> subscriber = subscriberRule.create();, +    service.body().unsafeSubscribe(subscriber);, +    subscriber.assertError(HttpException.class, "HTTP 404 Client Error");, +    RecordingSubscriber<String> subscriber = subscriberRule.create();, +    service.body().unsafeSubscribe(subscriber);, +    RecordingSubscriber<String> subscriber = subscriberRule.createWithInitialRequest(0);, +    service.body().unsafeSubscribe(subscriber);, +    subscriber.assertAnyValue().assertCompleted();, +    RecordingSubscriber<Response<String>> subscriber = subscriberRule.create();, +    service.response().unsafeSubscribe(subscriber);, +    assertThat(subscriber.takeValue().body()).isEqualTo("Hi");, +    server.enqueue(new MockResponse().setResponseCode(404));, +    RecordingSubscriber<Response<String>> subscriber = subscriberRule.create();, +    service.response().unsafeSubscribe(subscriber);, +    assertThat(subscriber.takeValue().code()).isEqualTo(404);, +    RecordingSubscriber<Response<String>> subscriber = subscriberRule.create();, +    service.response().unsafeSubscribe(subscriber);, +    RecordingSubscriber<Response<String>> subscriber = subscriberRule.createWithInitialRequest(0);, +    service.response().unsafeSubscribe(subscriber);, +    subscriber.assertAnyValue().assertCompleted();, +    RecordingSubscriber<Result<String>> subscriber = subscriberRule.create();, +    service.result().unsafeSubscribe(subscriber);, +    assertThat(subscriber.takeValue().response().body()).isEqualTo("Hi");, +    server.enqueue(new MockResponse().setResponseCode(404));, +    RecordingSubscriber<Result<String>> subscriber = subscriberRule.create();, +    service.result().unsafeSubscribe(subscriber);, +    assertThat(subscriber.takeValue().response().code()).isEqualTo(404);, +    RecordingSubscriber<Result<String>> subscriber = subscriberRule.create();, +    service.result().unsafeSubscribe(subscriber);, +    assertThat(subscriber.takeValue().error()).isInstanceOf(IOException.class);, +    RecordingSubscriber<Result<String>> subscriber = subscriberRule.createWithInitialRequest(0);, +    service.result().unsafeSubscribe(subscriber);, +    subscriber.assertAnyValue().assertCompleted();, +++ b/pom.xml, +    <rxjava.version>1.1.9</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +  @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    subscriber.assertError(HttpException.class, "HTTP 404 Client Error");, +    RecordingSubscriber<Void> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableWithSchedulerTest.java, +  @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, +    RecordingSubscriber<String> subscriber = subscriberRule.create();, +    service.completable().unsafeSubscribe(subscriber);, +    subscriber.assertNoEvents();, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java]
[+++ b/pom.xml, +    <wire.version>1.0.0</wire.version>, +++ b/pom.xml, +    <wire.version>1.0.0</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +import java.io.OutputStream;, +      byte[] data = consumeAsBytes(body.in());, +      return wire.parseFrom(data, (Class<Message>) c);, +, +  /** Reads a stream into a {@code byte} array. */, +  private byte[] consumeAsBytes(InputStream in) throws IOException {, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    pipe(in, out);, +    return out.toByteArray();, +  }, +, +  /** Reads content from the given input and pipes it to the given output. */, +  private void pipe(InputStream in, OutputStream out) throws IOException {, +    byte[] buffer = new byte[4096];, +    int count;, +    while ((count = in.read(buffer)) != -1) {, +      out.write(buffer, 0, count);, +    }, +  }, +++ b/pom.xml, +    <wire.version>1.0.0</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +import java.io.OutputStream;, +      byte[] data = consumeAsBytes(body.in());, +      return wire.parseFrom(data, (Class<Message>) c);, +, +  /** Reads a stream into a {@code byte} array. */, +  private byte[] consumeAsBytes(InputStream in) throws IOException {, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    pipe(in, out);, +    return out.toByteArray();, +  }, +, +  /** Reads content from the given input and pipes it to the given output. */, +  private void pipe(InputStream in, OutputStream out) throws IOException {, +    byte[] buffer = new byte[4096];, +    int count;, +    while ((count = in.read(buffer)) != -1) {, +      out.write(buffer, 0, count);, +    }, +  }, +++ b/website/index.html, +              <li>URL parameter replacement and query parameter support</li>]
[+++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.5.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, + * {@link Flowable}, {@link Single}, {@link Completable} or {@link Maybe} from service methods.]
[+++ b/android-native/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/pom.xml, +    <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc1</version>, +++ b/pom.xml, +    <version>0.6.0-rc1</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-rc1</version>]
[+++ b/retrofit/src/main/java/retrofit/Callback.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import retrofit.client.Response;, +, +/**, + * Communicates responses to server or offline requests. Contains a callback method for each, + * possible outcome. One and only one method will be invoked in response to a given request., + *, + * @param <T> expected response type, + * @author Bob Lee (bob@squareup.com), + */, +public interface Callback<T> {, +, +  /** Successful HTTP response. */, +  void success(T t, Response response);, +, +  /**, +   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected, +   * exception., +   */, +  void failure(RetrofitError error);, +}, +++ b/retrofit/src/main/java/retrofit/Callback.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import retrofit.client.Response;, +, +/**, + * Communicates responses to server or offline requests. Contains a callback method for each, + * possible outcome. One and only one method will be invoked in response to a given request., + *, + * @param <T> expected response type, + * @author Bob Lee (bob@squareup.com), + */, +public interface Callback<T> {, +, +  /** Successful HTTP response. */, +  void success(T t, Response response);, +, +  /**, +   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected, +   * exception., +   */, +  void failure(RetrofitError error);, +}, +++ b/retrofit/src/main/java/retrofit/CallbackRunnable.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import java.util.concurrent.Executor;, +, +/**, + * A {@link Runnable} executed on a background thread to invoke {@link #obtainResponse()} which, + * performs an HTTP request. The response of the request, whether it be an object or exception, is, + * then marshaled to the supplied {@link Executor} in the form of a method call on a]
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +import android.os.Handler;, +import android.os.Looper;, +class Platform {, +    return new Platform();, +  Converter defaultConverter() {, +    return new GsonConverter();, +  Executor defaultCallbackExecutor() {, +      return new Executor() {, +        private final Handler handler = new Handler(Looper.getMainLooper());, +        @Override public void execute(Runnable r) {, +          handler.post(r);, +      };, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +import android.os.Handler;, +import android.os.Looper;, +class Platform {, +    return new Platform();, +  Converter defaultConverter() {, +    return new GsonConverter();, +  Executor defaultCallbackExecutor() {, +      return new Executor() {, +        private final Handler handler = new Handler(Looper.getMainLooper());, +        @Override public void execute(Runnable r) {, +          handler.post(r);, +      };, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import retrofit.client.OkClient;, +        client = new OkClient();, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +import android.os.Handler;, +import android.os.Looper;, +class Platform {, +    return new Platform();, +  Converter defaultConverter() {, +    return new GsonConverter();, +  Executor defaultCallbackExecutor() {, +      return new Executor() {, +        private final Handler handler = new Handler(Looper.getMainLooper());, +        @Override public void execute(Runnable r) {, +          handler.post(r);, +      };, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import retrofit.client.OkClient;, +        client = new OkClient();, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ /dev/null, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +   * {@link Callback#call(T)}. Invoked in background thread., +      try {, +        callback.clientError(parse(entity));, +      } catch (ServerException e) {, +        logger.log(Level.WARNING, e.getMessage(), e);, +        callback.serverError(null);, +      }, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ /dev/null, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +   * {@link Callback#call(T)}. Invoked in background thread., +      try {, +        callback.clientError(parse(entity));, +      } catch (ServerException e) {, +        logger.log(Level.WARNING, e.getMessage(), e);, +        callback.serverError(null);, +      }, +++ b/modules/http/src/retrofit/http/UiCallback.java, +  public void clientError(final T response) {, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ /dev/null, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +   * {@link Callback#call(T)}. Invoked in background thread., +      try {, +        callback.clientError(parse(entity));, +      } catch (ServerException e) {, +        logger.log(Level.WARNING, e.getMessage(), e);, +        callback.serverError(null);, +      }, +++ b/modules/http/src/retrofit/http/UiCallback.java, +  public void clientError(final T response) {, +++ b/revision.properties, +# Note - with the next change, increment this to 0.6-SNAPSHOT, +retrofit.revision=0.5]
[+++ b/retrofit/src/main/java/retrofit/BuiltInConverters.java, +  private OkHttpResponseBodyConverter streamingResponseBodyConverter;, +  private OkHttpResponseBodyConverter bufferingResponseBodyConverter;, +  private VoidConverter voidResponseBodyConverter;, +  private OkHttpRequestBodyConverter requestBodyConverter;, +, +    if (ResponseBody.class == type) {, +      if (Utils.isAnnotationPresent(annotations, Streaming.class)) {, +        OkHttpResponseBodyConverter converter = streamingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (streamingResponseBodyConverter = new OkHttpResponseBodyConverter(true));, +      } else {, +        OkHttpResponseBodyConverter converter = bufferingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (bufferingResponseBodyConverter = new OkHttpResponseBodyConverter(false));, +    }, +    if (Void.class == type) {, +      VoidConverter converter = voidResponseBodyConverter;, +      return converter != null, +          ? converter, +          : (voidResponseBodyConverter = new VoidConverter());, +    if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {, +      return requestBodyConverter != null, +          ? requestBodyConverter, +          : (requestBodyConverter = new OkHttpRequestBodyConverter());, +++ b/retrofit/src/main/java/retrofit/BuiltInConverters.java, +  private OkHttpResponseBodyConverter streamingResponseBodyConverter;, +  private OkHttpResponseBodyConverter bufferingResponseBodyConverter;, +  private VoidConverter voidResponseBodyConverter;, +  private OkHttpRequestBodyConverter requestBodyConverter;, +, +    if (ResponseBody.class == type) {, +      if (Utils.isAnnotationPresent(annotations, Streaming.class)) {, +        OkHttpResponseBodyConverter converter = streamingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (streamingResponseBodyConverter = new OkHttpResponseBodyConverter(true));, +      } else {, +        OkHttpResponseBodyConverter converter = bufferingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (bufferingResponseBodyConverter = new OkHttpResponseBodyConverter(false));, +    }, +    if (Void.class == type) {, +      VoidConverter converter = voidResponseBodyConverter;, +      return converter != null, +          ? converter, +          : (voidResponseBodyConverter = new VoidConverter());, +    if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {, +      return requestBodyConverter != null, +          ? requestBodyConverter, +          : (requestBodyConverter = new OkHttpRequestBodyConverter());, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/BuiltInConverters.java, +  private OkHttpResponseBodyConverter streamingResponseBodyConverter;, +  private OkHttpResponseBodyConverter bufferingResponseBodyConverter;, +  private VoidConverter voidResponseBodyConverter;, +  private OkHttpRequestBodyConverter requestBodyConverter;, +, +    if (ResponseBody.class == type) {, +      if (Utils.isAnnotationPresent(annotations, Streaming.class)) {, +        OkHttpResponseBodyConverter converter = streamingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (streamingResponseBodyConverter = new OkHttpResponseBodyConverter(true));, +      } else {, +        OkHttpResponseBodyConverter converter = bufferingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (bufferingResponseBodyConverter = new OkHttpResponseBodyConverter(false));, +    }, +    if (Void.class == type) {, +      VoidConverter converter = voidResponseBodyConverter;, +      return converter != null, +          ? converter, +          : (voidResponseBodyConverter = new VoidConverter());, +    if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {, +      return requestBodyConverter != null, +          ? requestBodyConverter, +          : (requestBodyConverter = new OkHttpRequestBodyConverter());, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;]
[+++ b/retrofit/src/main/java/retrofit/DefaultCallAdapterFactory.java, +    return "Default CallAdapterFactory";, +++ b/retrofit/src/main/java/retrofit/DefaultCallAdapterFactory.java, +    return "Default CallAdapterFactory";, +++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.ResponseBody;, +import java.lang.reflect.Method;, +import java.lang.reflect.Type;, +import retrofit.http.Streaming;, +, +import static retrofit.Utils.methodError;, +, +final class MethodHandler<T> {, +  @SuppressWarnings("unchecked"), +  static MethodHandler<?> create(Method method, OkHttpClient client, Endpoint endpoint,, +      CallAdapter.Factory callAdapterFactory, Converter.Factory converterFactory) {, +    CallAdapter<Object> callAdapter =, +        (CallAdapter<Object>) createCallAdapter(method, callAdapterFactory);, +    Converter<Object> responseConverter =, +        (Converter<Object>) createResponseConverter(method, callAdapter.responseType(),, +            converterFactory);, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, endpoint, converterFactory);, +    return new MethodHandler<>(client, requestFactory, callAdapter, responseConverter);, +  }, +, +  private static CallAdapter<?> createCallAdapter(Method method,, +      CallAdapter.Factory adapterFactory) {, +    Type returnType = method.getGenericReturnType();, +    if (Utils.hasUnresolvableType(returnType)) {, +      throw methodError(method,, +          "Method return type must not include a type variable or wildcard: %s", returnType);, +    }, +, +    if (returnType == void.class) {, +      throw methodError(method, "Service methods cannot return void.");, +    }, +, +    CallAdapter<?> adapter = adapterFactory.get(returnType);, +    if (adapter == null) {, +      throw methodError(method, "Call adapter factory '%s' was unable to handle return type %s",, +          adapterFactory, returnType);, +    }, +    return adapter;, +  }, +, +  private static Converter<?> createResponseConverter(Method method, Type responseType,, +      Converter.Factory converterFactory) {, +    if (responseType == ResponseBody.class) {, +      boolean isStreaming = method.isAnnotationPresent(Streaming.class);, +      return new OkHttpResponseBodyConverter(isStreaming);, +    }, +, +    if (converterFactory == null) {, +      throw methodError(method, "Method response type is ", +          + responseType, +          + " but no converter factory registered. ", +          + "Either add a converter factory to the Retrofit instance or use ResponseBody.");, +    }, +, +    Converter<?> converter = converterFactory.get(responseType);, +    if (converter == null) {, +      throw methodError(method, "Converter factory '%s' was unable to handle response type %s",, +          converterFactory, responseType);, +    }, +    return converter;, +  }, +, +  private final OkHttpClient client;, +  private final RequestFactory requestFactory;, +  private final CallAdapter<T> callAdapter;, +  private final Converter<T> responseConverter;, +, +  private MethodHandler(OkHttpClient client, RequestFactory requestFactory,, +      CallAdapter<T> callAdapter, Converter<T> responseConverter) {, +    this.client = client;, +    this.requestFactory = requestFactory;, +    this.callAdapter = callAdapter;, +    this.responseConverter = responseConverter;, +  }, +, +  Object invoke(Object... args) {, +    return callAdapter.adapt(new OkHttpCall<>(client, requestFactory, responseConverter, args));]
[+++ b/pom.xml, +    <appengine.version>1.8.9</appengine.version>, +      <dependency>, +        <groupId>com.google.appengine</groupId>, +        <artifactId>appengine-api-1.0-sdk</artifactId>, +        <version>${appengine.version}</version>, +      </dependency>, +++ b/pom.xml, +    <appengine.version>1.8.9</appengine.version>, +      <dependency>, +        <groupId>com.google.appengine</groupId>, +        <artifactId>appengine-api-1.0-sdk</artifactId>, +        <version>${appengine.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <configuration>, +          <!-- The AppEngine dependency has an annotation processor we don't want to run. -->, +          <compilerArgument>-proc:none</compilerArgument>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/pom.xml, +    <appengine.version>1.8.9</appengine.version>, +      <dependency>, +        <groupId>com.google.appengine</groupId>, +        <artifactId>appengine-api-1.0-sdk</artifactId>, +        <version>${appengine.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <configuration>, +          <!-- The AppEngine dependency has an annotation processor we don't want to run. -->, +          <compilerArgument>-proc:none</compilerArgument>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +import retrofit.appengine.UrlFetchClient;, +, +    if (System.getProperty("com.google.appengine.runtime.version") != null) {, +      return new AppEngine();, +    }, +, +  private static class AppEngine extends Base {, +    @Override Client.Provider defaultClient() {, +      final UrlFetchClient client = new UrlFetchClient();, +      return new Client.Provider() {, +        @Override public Client get() {, +          return client;, +        }, +      };, +    }, +  }, +, +++ b/pom.xml, +    <appengine.version>1.8.9</appengine.version>, +      <dependency>, +        <groupId>com.google.appengine</groupId>, +        <artifactId>appengine-api-1.0-sdk</artifactId>, +        <version>${appengine.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <configuration>]
[+++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-samples/mock-github-client/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.7.0-SNAPSHOT</version>]
[+++ b/http/pom.xml, +      <optional>true</optional>]
[+++ b/android/pom.xml, +        <version>${project.version}</version>]
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +      String headerValue = valueConverter.convert(value);, +      if (headerValue == null) return; // Skip converted but null values., +, +      builder.addHeader(name, headerValue);, +, +      String queryValue = valueConverter.convert(value);, +      if (queryValue == null) return; // Skip converted but null values, +, +      builder.addQueryParam(name, queryValue, encoded);, +, +        String convertedEntryValue = valueConverter.convert(entryValue);, +        if (convertedEntryValue == null) {, +          throw new IllegalArgumentException("Query map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addQueryParam(entryKey, convertedEntryValue, encoded);, +, +      String fieldValue = valueConverter.convert(value);, +      if (fieldValue == null) return; // Skip null converted values, +, +      builder.addFormField(name, fieldValue, encoded);, +, +        String fieldEntry = valueConverter.convert(entryValue);, +        if (fieldEntry == null) {, +          throw new IllegalArgumentException("Field map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addFormField(entryKey, fieldEntry, encoded);, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +      String headerValue = valueConverter.convert(value);, +      if (headerValue == null) return; // Skip converted but null values., +, +      builder.addHeader(name, headerValue);, +, +      String queryValue = valueConverter.convert(value);, +      if (queryValue == null) return; // Skip converted but null values, +, +      builder.addQueryParam(name, queryValue, encoded);, +, +        String convertedEntryValue = valueConverter.convert(entryValue);, +        if (convertedEntryValue == null) {, +          throw new IllegalArgumentException("Query map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addQueryParam(entryKey, convertedEntryValue, encoded);, +, +      String fieldValue = valueConverter.convert(value);, +      if (fieldValue == null) return; // Skip null converted values, +, +      builder.addFormField(name, fieldValue, encoded);, +, +        String fieldEntry = valueConverter.convert(entryValue);, +        if (fieldEntry == null) {, +          throw new IllegalArgumentException("Field map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addFormField(entryKey, fieldEntry, encoded);, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +import retrofit2.helpers.NullObjectConverterFactory;, +  @Test public void queryParamsSkippedIfConvertedToNull() throws Exception {, +    class Example {, +      @GET("/query") Call<ResponseBody> queryPath(@Query("a") Object a) {, +        return null;, +      }, +    }, +, +    Retrofit.Builder retrofitBuilder = new Retrofit.Builder(), +        .baseUrl("http://example.com"), +        .addConverterFactory(new NullObjectConverterFactory());, +, +    Request request = buildRequest(Example.class, retrofitBuilder, "Ignored");, +, +    assertThat(request.url().toString()).doesNotContain("Ignored");]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/test/java/retrofit/mock/MockRetrofitTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package retrofit.mock;, +, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.util.Random;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicLong;, +import java.util.concurrent.atomic.AtomicReference;, +import org.junit.Before;, +import org.junit.Test;, +import retrofit.Call;, +import retrofit.Callback;, +import retrofit.Response;, +import retrofit.Retrofit;, +import retrofit.mock.CallBehaviorAdapter;, +import retrofit.mock.Calls;, +import retrofit.mock.MockRetrofit;, +import retrofit.mock.NetworkBehavior;, +, +import static java.util.concurrent.Executors.newSingleThreadExecutor;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class MockRetrofitTest {, +  interface DoWorkService {, +    Call<String> response();, +    Call<String> failure();, +  }, +, +  private final IOException mockFailure = new IOException("Timeout!");, +  private final NetworkBehavior behavior = NetworkBehavior.create(new Random(2847));, +  private DoWorkService service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl("http://example.com"), +        .build();, +, +    DoWorkService mockService = new DoWorkService() {, +      @Override public Call<String> response() {, +        return Calls.response("Response!");, +      }, +, +      @Override public Call<String> failure() {, +        return Calls.failure(mockFailure);, +      }, +    };, +, +    NetworkBehavior.Adapter<?> adapter =, +        new CallBehaviorAdapter(retrofit, newSingleThreadExecutor());, +    MockRetrofit mockRetrofit = new MockRetrofit(behavior, adapter);, +    service = mockRetrofit.create(DoWorkService.class, mockService);, +  }, +, +  @Test public void syncFailureThrowsAfterDelay() {, +    behavior.setDelay(100, MILLISECONDS);, +    behavior.setVariancePercent(0);, +    behavior.setFailurePercent(100);, +, +    Call<String> call = service.response();, +, +    long startNanos = System.nanoTime();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);, +      assertThat(e).isSameAs(behavior.failureException());, +      assertThat(tookMs).isGreaterThanOrEqualTo(100);, +    }, +  }, +, +  @Test public void asyncFailureTriggersFailureAfterDelay() throws InterruptedException {, +    behavior.setDelay(100, MILLISECONDS);]
[+++ b/http/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import java.io.IOException;, +import java.lang.reflect.Type;, +import java.util.concurrent.Executor;, +, +final class ExecutorCallAdapterFactory implements CallAdapter.Factory {, +  private final Executor callbackExecutor;, +, +  ExecutorCallAdapterFactory(Executor callbackExecutor) {, +    this.callbackExecutor = callbackExecutor;, +  }, +, +  @Override public String toString() {, +    return "ExecutorCallAdapterFactory[" + callbackExecutor + ']';, +  }, +, +  @Override public CallAdapter<?> get(Type returnType) {, +    if (Utils.getRawType(returnType) != Call.class) {, +      return null;, +    }, +    final Type responseType = Utils.getCallResponseType(returnType);, +    return new CallAdapter<Object>() {, +      @Override public Type responseType() {, +        return responseType;, +      }, +, +      @Override public Call<Object> adapt(Call<Object> call) {, +        return new ExecutorCallbackCall<>(callbackExecutor, call);, +      }, +    };, +  }, +, +  static final class ExecutorCallbackCall<T> implements Call<T> {, +    private final Executor callbackExecutor;, +    private final Call<T> delegate;, +, +    ExecutorCallbackCall(Executor callbackExecutor, Call<T> delegate) {, +      this.callbackExecutor = callbackExecutor;, +      this.delegate = delegate;, +    }, +, +    @Override public void enqueue(Callback<T> callback) {, +      delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback));, +    }, +, +    @Override public Response<T> execute() throws IOException {, +      return delegate.execute();, +    }, +, +    @Override public void cancel() {, +      delegate.cancel();, +    }, +, +    @SuppressWarnings("CloneDoesntCallSuperClone") // Performing deep clone., +    @Override public Call<T> clone() {, +      return new ExecutorCallbackCall<>(callbackExecutor, delegate.clone());, +    }, +  }, +, +  static final class ExecutorCallback<T> implements Callback<T> {, +    private final Executor callbackExecutor;, +    private final Callback<T> delegate;, +, +    ExecutorCallback(Executor callbackExecutor, Callback<T> delegate) {, +      this.callbackExecutor = callbackExecutor;, +      this.delegate = delegate;, +    }, +, +    @Override public void success(final Response<T> response) {, +      callbackExecutor.execute(new Runnable() {, +        @Override public void run() {, +          delegate.success(response);, +        }, +      });, +    }, +, +    @Override public void failure(final Throwable t) {, +      callbackExecutor.execute(new Runnable() {, +        @Override public void run() {, +          delegate.failure(t);, +        }]
[+++ b/pom.xml, +    <rxjava.version>1.1.0</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>1.1.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import rx.singles.BlockingSingle;, +  @Test public void singleBodySuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingSingle<String> o = service.singleBody().toBlocking();, +    assertThat(o.value()).isEqualTo("Hi");, +  }, +, +  @Test public void singleBodySuccess404() {, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    BlockingSingle<String> o = service.singleBody().toBlocking();, +    try {, +      o.value();, +      fail();, +    } catch (RuntimeException e) {, +      Throwable cause = e.getCause();, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 OK");, +    }, +  }, +, +  @Test public void singleBodyFailure() {, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingSingle<String> o = service.singleBody().toBlocking();, +    try {, +      o.value();, +      fail();, +    } catch (RuntimeException e) {, +      assertThat(e.getCause()).isInstanceOf(IOException.class);, +    }, +  }, +, +  @Test public void singleResponseSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingSingle<Response<String>> o = service.singleResponse().toBlocking();, +    Response<String> response = o.value();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");, +  }, +, +  @Test public void singleResponseSuccess404() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));, +, +    BlockingSingle<Response<String>> o = service.singleResponse().toBlocking();, +    Response<String> response = o.value();, +    assertThat(response.isSuccess()).isFalse();, +    assertThat(response.errorBody().string()).isEqualTo("Hi");, +  }, +, +  @Test public void singleResponseFailure() {, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingSingle<Response<String>> o = service.singleResponse().toBlocking();, +    try {, +      o.value();, +      fail();, +    } catch (RuntimeException t) {, +      assertThat(t.getCause()).isInstanceOf(IOException.class);, +    }, +  }, +, +  @Test public void singleResultSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingSingle<Result<String>> o = service.singleResult().toBlocking();, +    Result<String> result = o.value();, +    assertThat(result.isError()).isFalse();, +    Response<String> response = result.response();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");, +  }, +, +  @Test public void singleResultSuccess404() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));, +, +    BlockingSingle<Result<String>> o = service.singleResult().toBlocking();, +    Result<String> result = o.value();, +    assertThat(result.isError()).isFalse();, +    Response<String> response = result.response();, +    assertThat(response.isSuccess()).isFalse();, +    assertThat(response.errorBody().string()).isEqualTo("Hi");, +  }, +, +  @Test public void singleResultFailure() {, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingSingle<Result<String>> o = service.singleResult().toBlocking();, +    Result<String> result = o.value();, +    assertThat(result.isError()).isTrue();, +    assertThat(result.error()).isInstanceOf(IOException.class);]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, +  private final HttpUrl baseUrl;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, +  private final HttpUrl baseUrl;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +++ b/retrofit/src/main/java/retrofit2/http/QueryMap.java, + * Calling with {@code foo.list(ImmutableMap.of("foo", "foo+foo"))} yields, + * {@code /search?foo=foo%2Bbar}., +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  private final HttpUrl baseUrl;, +  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, +  public HttpUrl baseUrl() {, +    private HttpUrl baseUrl;, +    public Builder baseUrl(HttpUrl baseUrl) {, +      this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, +  private final HttpUrl baseUrl;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +++ b/retrofit/src/main/java/retrofit2/http/QueryMap.java, + * Calling with {@code foo.list(ImmutableMap.of("foo", "foo+foo"))} yields, + * {@code /search?foo=foo%2Bbar}., +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +    HttpUrl baseUrl = retrofit.baseUrl();, +    assertThat(baseUrl).isEqualTo(HttpUrl.parse("http://example.com/"));, +    assertThat(retrofit.baseUrl()).isSameAs(url);]
[+++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +      package="retrofit.test_app", +      android:versionCode="1", +      android:versionName="1.0">, +    <application android:label="Test Retrofit">, +        <activity android:name="Main", +                  android:label="Test Retrofit">, +            <intent-filter>, +                <action android:name="android.intent.action.MAIN" />, +                <category android:name="android.intent.category.LAUNCHER" />, +            </intent-filter>, +        </activity>, +    </application>, +</manifest> , +++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +      package="retrofit.test_app", +      android:versionCode="1", +      android:versionName="1.0">, +    <application android:label="Test Retrofit">, +        <activity android:name="Main", +                  android:label="Test Retrofit">, +            <intent-filter>, +                <action android:name="android.intent.action.MAIN" />, +                <category android:name="android.intent.category.LAUNCHER" />, +            </intent-filter>, +        </activity>, +    </application>, +</manifest> , +++ b/examples/directory-sync/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup</groupId>, +    <artifactId>retrofit-examples</artifactId>, +    <version>0.8.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-example-directory-sync</artifactId>, +  <packaging>apk</packaging>, +  <name>Example: Directory Sync</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>retrofit-sync</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>com.jayway.maven.plugins.android.generation2</groupId>, +        <artifactId>android-maven-plugin</artifactId>, +        <extensions>true</extensions>, +      </plugin>, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-checkstyle-plugin</artifactId>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +      package="retrofit.test_app", +      android:versionCode="1", +      android:versionName="1.0">, +    <application android:label="Test Retrofit">, +        <activity android:name="Main", +                  android:label="Test Retrofit">, +            <intent-filter>, +                <action android:name="android.intent.action.MAIN" />, +                <category android:name="android.intent.category.LAUNCHER" />, +            </intent-filter>, +        </activity>, +    </application>, +</manifest> , +++ b/examples/directory-sync/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>]
[+++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +          <version>1.7</version>, +          <version>3.0</version>, +      </plugins>, +    </pluginManagement>, +, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-release-plugin</artifactId>, +        <configuration>, +          <autoVersionSubmodules>true</autoVersionSubmodules>, +        </configuration>, +      </plugin>, +          <configLocation>checkstyle.xml</configLocation>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +          <version>1.7</version>, +          <version>3.0</version>, +      </plugins>, +    </pluginManagement>, +, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-release-plugin</artifactId>, +        <configuration>, +          <autoVersionSubmodules>true</autoVersionSubmodules>, +        </configuration>, +      </plugin>, +          <configLocation>checkstyle.xml</configLocation>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +          <version>1.7</version>, +          <version>3.0</version>, +      </plugins>, +    </pluginManagement>, +, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-release-plugin</artifactId>, +        <configuration>, +          <autoVersionSubmodules>true</autoVersionSubmodules>, +        </configuration>, +      </plugin>, +          <configLocation>checkstyle.xml</configLocation>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +++ b/retrofit/src/main/java/retrofit/http/Name.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +@Retention(RUNTIME) @Target(PARAMETER), +public @interface Name {, +  String value();, +}, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +          <version>1.7</version>, +          <version>3.0</version>, +      </plugins>, +    </pluginManagement>, +, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-release-plugin</artifactId>, +        <configuration>, +          <autoVersionSubmodules>true</autoVersionSubmodules>, +        </configuration>, +      </plugin>, +          <configLocation>checkstyle.xml</configLocation>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +++ b/retrofit/src/main/java/retrofit/http/Name.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;]
[+++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0</version>, +++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.9.0</version>, +++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.9.0</version>, +++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.9.0</version>, +++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.9.0</version>, +++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.9.0</version>, +++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit/pom.xml, +    <version>1.9.0</version>, +++ b/pom.xml, +  <version>1.9.0</version>, +    <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-converters/wire/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit-mock/pom.xml, +    <version>1.9.0</version>, +++ b/retrofit/pom.xml, +    <version>1.9.0</version>, +++ b/samples/github-client/pom.xml, +    <version>1.9.0</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <protobuf.version>3.0.0</protobuf.version>, +++ b/pom.xml, +    <protobuf.version>3.0.0</protobuf.version>, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +      Method method = c.getDeclaredMethod("parser");, +      //noinspection unchecked, +      parser = (Parser<MessageLite>) method.invoke(null);, +    } catch (InvocationTargetException e) {, +      throw new RuntimeException(e.getCause());, +    } catch (NoSuchMethodException | IllegalAccessException ignored) {, +      // If the method is missing, fall back to original static field for pre-3.0 support., +      try {, +        throw new IllegalArgumentException("Found a protobuf message but ", +            + c.getName(), +            + " had no parser() method or PARSER field.");, +      }, +++ b/pom.xml, +    <protobuf.version>3.0.0</protobuf.version>, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +      Method method = c.getDeclaredMethod("parser");, +      //noinspection unchecked, +      parser = (Parser<MessageLite>) method.invoke(null);, +    } catch (InvocationTargetException e) {, +      throw new RuntimeException(e.getCause());, +    } catch (NoSuchMethodException | IllegalAccessException ignored) {, +      // If the method is missing, fall back to original static field for pre-3.0 support., +      try {, +        throw new IllegalArgumentException("Found a protobuf message but ", +            + c.getName(), +            + " had no parser() method or PARSER field.");, +      }, +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/FallbackParserFinderTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.converter.protobuf;, +, +import com.google.protobuf.MessageLite;, +import com.google.protobuf.Parser;, +import java.lang.annotation.Annotation;, +import okhttp3.ResponseBody;, +import org.junit.Test;, +import retrofit2.Converter;, +import retrofit2.Retrofit;, +import retrofit2.converter.protobuf.PhoneProtos.Phone;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public final class FallbackParserFinderTest {, +  @Test public void converterFactoryFallsBackToParserField() {, +    Retrofit retrofit = new Retrofit.Builder().baseUrl("http://localhost/").build();, +    ProtoConverterFactory factory = ProtoConverterFactory.create();, +    Converter<ResponseBody, ?> converter =, +        factory.responseBodyConverter(FakePhone.class, new Annotation[0], retrofit);, +    assertThat(converter).isNotNull();, +  }, +, +  @SuppressWarnings("unused") // Used reflectively., +  public static abstract class FakePhone implements MessageLite {, +    public static final Parser<Phone> PARSER = Phone.parser();, +  }, +}, +++ b/pom.xml, +    <protobuf.version>3.0.0</protobuf.version>, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +      Method method = c.getDeclaredMethod("parser");, +      //noinspection unchecked, +      parser = (Parser<MessageLite>) method.invoke(null);, +    } catch (InvocationTargetException e) {, +      throw new RuntimeException(e.getCause());, +    } catch (NoSuchMethodException | IllegalAccessException ignored) {, +      // If the method is missing, fall back to original static field for pre-3.0 support., +      try {, +        throw new IllegalArgumentException("Found a protobuf message but ", +            + c.getName(), +            + " had no parser() method or PARSER field.");, +      }, +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/FallbackParserFinderTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *]
[+++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +++ b/retrofit/pom.xml, +++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +++ b/retrofit/pom.xml, +++ /dev/null, +++ b/pom.xml, +    <gson.version>2.2.2</gson.version>, +  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, +  <repositories>, +    <repository>, +      <id>sonatype-nexus-snapshots</id>, +      <name>Sonatype Nexus Snapshots</name>, +      <url>https://oss.sonatype.org/content/repositories/snapshots</url>, +      <releases>, +        <enabled>false</enabled>, +      </releases>, +      <snapshots>, +        <enabled>true</enabled>, +      </snapshots>, +    </repository>, +  </repositories>, +, +++ b/retrofit/pom.xml, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/HeaderPair.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +/** Represents an HTTP header name/value pair. */, +public final class HeaderPair {, +  private final String name;, +  private final String value;, +, +  public HeaderPair(String name, String value) {, +    this.name = name;, +    this.value = value;, +  }, +, +  public String getName() {, +    return name;, +  }, +, +  public String getValue() {, +    return value;, +  }, +, +  @Override public boolean equals(Object o) {, +    if (this == o) return true;, +    if (o == null || getClass() != o.getClass()) return false;, +, +    HeaderPair header = (HeaderPair) o;]
[+++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, +        <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, +    <version>0.6.0-SNAPSHOT</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-SNAPSHOT</version>]
[+++ b/retrofit/src/main/java/retrofit2/Call.java, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +  private final okhttp3.Call.Factory callFactory;, +  private MethodHandler(okhttp3.Call.Factory callFactory, RequestFactory requestFactory,, +    return callAdapter.adapt(, +        new OkHttpCall<>(callFactory, requestFactory, args, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +  private final okhttp3.Call.Factory callFactory;, +  private MethodHandler(okhttp3.Call.Factory callFactory, RequestFactory requestFactory,, +    return callAdapter.adapt(, +        new OkHttpCall<>(callFactory, requestFactory, args, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final okhttp3.Call.Factory callFactory;, +  private final RequestFactory requestFactory;, +  private final Object[] args;, +  OkHttpCall(okhttp3.Call.Factory callFactory, RequestFactory requestFactory, Object[] args,, +    this.callFactory = callFactory;, +    this.requestFactory = requestFactory;, +    this.args = args;, +    return new OkHttpCall<>(callFactory, requestFactory, args, responseConverter);, +    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, +    if (call == null) {, +      throw new NullPointerException("Call.Factory returned null.");, +    }, +    return call;, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +  private final okhttp3.Call.Factory callFactory;, +  private MethodHandler(okhttp3.Call.Factory callFactory, RequestFactory requestFactory,, +    return callAdapter.adapt(, +        new OkHttpCall<>(callFactory, requestFactory, args, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final okhttp3.Call.Factory callFactory;, +  private final RequestFactory requestFactory;, +  private final Object[] args;, +  OkHttpCall(okhttp3.Call.Factory callFactory, RequestFactory requestFactory, Object[] args,, +    this.callFactory = callFactory;, +    this.requestFactory = requestFactory;, +    this.args = args;, +    return new OkHttpCall<>(callFactory, requestFactory, args, responseConverter);, +    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, +    if (call == null) {, +      throw new NullPointerException("Call.Factory returned null.");, +    }, +    return call;, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +  private final okhttp3.Call.Factory callFactory;, +  private MethodHandler(okhttp3.Call.Factory callFactory, RequestFactory requestFactory,, +    return callAdapter.adapt(, +        new OkHttpCall<>(callFactory, requestFactory, args, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final okhttp3.Call.Factory callFactory;, +  private final RequestFactory requestFactory;, +  private final Object[] args;, +  OkHttpCall(okhttp3.Call.Factory callFactory, RequestFactory requestFactory, Object[] args,, +    this.callFactory = callFactory;, +    this.requestFactory = requestFactory;, +    this.args = args;, +    return new OkHttpCall<>(callFactory, requestFactory, args, responseConverter);, +    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, +    if (call == null) {, +      throw new NullPointerException("Call.Factory returned null.");, +    }, +    return call;, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +  private final okhttp3.Call.Factory callFactory;, +  private MethodHandler(okhttp3.Call.Factory callFactory, RequestFactory requestFactory,, +    return callAdapter.adapt(, +        new OkHttpCall<>(callFactory, requestFactory, args, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final okhttp3.Call.Factory callFactory;, +  private final RequestFactory requestFactory;, +  private final Object[] args;, +  OkHttpCall(okhttp3.Call.Factory callFactory, RequestFactory requestFactory, Object[] args,, +    this.callFactory = callFactory;, +    this.requestFactory = requestFactory;, +    this.args = args;, +    return new OkHttpCall<>(callFactory, requestFactory, args, responseConverter);, +    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, +    if (call == null) {, +      throw new NullPointerException("Call.Factory returned null.");, +    }, +    return call;, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java]
[+++ b/retrofit/src/main/java/retrofit2/Invocation.java, +  public static Invocation of(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +    return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., +  }, +, +  /** Trusted constructor assumes ownership of {@code arguments}. */, +  Invocation(Method method, List<?> arguments) {, +    this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +  public static Invocation of(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +    return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., +  }, +, +  /** Trusted constructor assumes ownership of {@code arguments}. */, +  Invocation(Method method, List<?> arguments) {, +    this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  RequestBuilder(String method, HttpUrl baseUrl,, +    this.requestBuilder = new Request.Builder();, +  Request.Builder get() {, +        .method(method, body);, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +  public static Invocation of(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +    return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., +  }, +, +  /** Trusted constructor assumes ownership of {@code arguments}. */, +  Invocation(Method method, List<?> arguments) {, +    this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  RequestBuilder(String method, HttpUrl baseUrl,, +    this.requestBuilder = new Request.Builder();, +  Request.Builder get() {, +        .method(method, body);, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import java.util.ArrayList;, +import java.util.List;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl,, +    List<Object> argumentList = new ArrayList<>(argumentCount);, +      argumentList.add(args[p]);, +    return requestBuilder.get(), +        .tag(Invocation.class, new Invocation(method, argumentList)), +        .build();, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +  public static Invocation of(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +    return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., +  }, +, +  /** Trusted constructor assumes ownership of {@code arguments}. */, +  Invocation(Method method, List<?> arguments) {, +    this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  RequestBuilder(String method, HttpUrl baseUrl,, +    this.requestBuilder = new Request.Builder();, +  Request.Builder get() {, +        .method(method, body);, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import java.util.ArrayList;, +import java.util.List;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl,, +    List<Object> argumentList = new ArrayList<>(argumentCount);, +      argumentList.add(args[p]);, +    return requestBuilder.get(), +        .tag(Invocation.class, new Invocation(method, argumentList)), +        .build();, +++ b/retrofit/src/test/java/retrofit2/InvocationTest.java, +      Invocation.of(null, Arrays.asList("one", "two"));, +      Invocation.of(Example.class.getDeclaredMethods()[0], null);, +    Invocation invocation = Invocation.of(Example.class.getDeclaredMethods()[0], mutableList);]
[+++ b/pom.xml, +    <junit.version>4.11</junit.version>, +    <assertj.version>1.6.1</assertj.version>, +    <guava.version>17.0</guava.version>]
[+++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create()), +        .build();, +, +    server.enqueue(new MockResponse());, +, +    Service service = retrofit.create(Service.class);, +    Optional<Object> optional = service.optional().execute().body();, +    assertThat(optional).isNotNull();, +    assertThat(optional.isPresent()).isFalse();, +  }, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create()), +        .build();, +, +    server.enqueue(new MockResponse());, +, +    Service service = retrofit.create(Service.class);, +    Optional<Object> optional = service.optional().execute().body();, +    assertThat(optional).isNotNull();, +    assertThat(optional.isPresent()).isFalse();, +  }, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create())]
[+++ b/android-native/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/pom.xml, +    <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/android/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/core/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/http/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/io/pom.xml, +        <version>0.6.0-rc6</version>, +++ b/pom.xml, +    <version>0.6.0-rc6</version>, +++ b/sample-android/pom.xml, +        <version>0.6.0-rc6</version>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +  private volatile Throwable failureException;, +, +    failureException = new IOException("Mock failure!");, +    failureException.setStackTrace(new StackTraceElement[0]);, +  /**, +   * Set the exception to be used when a failure is triggered., +   * <p>, +   * It is a best practice to remove the stack trace from {@code t} since it can misleadingly, +   * point to code unrelated to this class., +   */, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +  private volatile Throwable failureException;, +, +    failureException = new IOException("Mock failure!");, +    failureException.setStackTrace(new StackTraceElement[0]);, +  /**, +   * Set the exception to be used when a failure is triggered., +   * <p>, +   * It is a best practice to remove the stack trace from {@code t} since it can misleadingly, +   * point to code unrelated to this class., +   */, +++ b/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java, +import java.io.IOException;, +  @Test public void defaultThrowable() {, +    Throwable t = behavior.failureException();, +    assertThat(t).isExactlyInstanceOf(IOException.class).hasMessage("Mock failure!");, +    assertThat(t.getStackTrace()).isEmpty();, +  }, +]
[+++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit/src/main/java/retrofit2/CompletableFutureCallAdapterFactory.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.util.concurrent.CompletableFuture;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Java 8 futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link CompletableFuture} from, + * service methods., + * <pre><code>, + * interface MyService {, + *   &#64;GET("user/me"), + *   CompletableFuture&lt;User&gt; getUser(), + * }, + * </code></pre>, + * There are two configurations supported for the {@code CompletableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code CompletableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, + * <li>Response wrapped body (e.g., {@code CompletableFuture<Response<User>>}) returns a, + * {@link Response} object for all HTTP responses and sets {@link IOException} for network, + * errors</li>, + * </ul>, + */, +@IgnoreJRERequirement, +final class CompletableFutureCallAdapterFactory extends CallAdapter.Factory {, +  static final CallAdapter.Factory INSTANCE = new CompletableFutureCallAdapterFactory();, +, +  @Override, +  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +    if (getRawType(returnType) != CompletableFuture.class) {, +      return null;, +    }, +    if (!(returnType instanceof ParameterizedType)) {, +      throw new IllegalStateException("CompletableFuture return type must be parameterized", +          + " as CompletableFuture<Foo> or CompletableFuture<? extends Foo>");, +    }, +    Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, +, +    if (getRawType(innerType) != Response.class) {, +      // Generic type is not Response<T>. Use it for body-only adapter., +      return new BodyCallAdapter<>(innerType);, +    }, +, +    // Generic type is Response<T>. Extract T and create the Response version of the adapter., +    if (!(innerType instanceof ParameterizedType)) {, +      throw new IllegalStateException("Response must be parameterized", +          + " as Response<Foo> or Response<? extends Foo>");, +    }, +    Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, +    return new ResponseCallAdapter<>(responseType);, +  }, +]
[+++ b/.gitignore, +# Eclipse, +# Idea, +#MacOS]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<CompletableFuture<?>> {, +    @Override public <R> CompletableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<CompletableFuture<?>> {, +    @Override public <R> CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<CompletableFuture<?>> {, +    @Override public <R> CompletableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<CompletableFuture<?>> {, +    @Override public <R> CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<CompletableFuture<?>> {, +    @Override public <R> CompletableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<CompletableFuture<?>> {, +    @Override public <R> CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapter.java, +final class RxJavaCallAdapter implements CallAdapter<Object> {, +  @Override public <R> Object adapt(Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<ListenableFuture<?>> {, +    @Override public <R> ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new BodyCallAdapter(innerType);, +    return new ResponseCallAdapter(responseType);, +  private static class BodyCallAdapter implements CallAdapter<CompletableFuture<?>> {, +    @Override public <R> CompletableFuture<R> adapt(final Call<R> call) {, +  private static class ResponseCallAdapter implements CallAdapter<CompletableFuture<?>> {, +    @Override public <R> CompletableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapter.java]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  final Executor callbackExecutor;, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  final Executor callbackExecutor;, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    IOException thrownException;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  final Executor callbackExecutor;, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  Retrofit(Call.Factory callFactory, BaseUrl baseUrl, List<Converter.Factory> converterFactories,, +      List<CallAdapter.Factory> adapterFactories, Executor callbackExecutor,, +      boolean validateEagerly) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  final Retrofit retrofit;, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +  final Executor callbackExecutor;, +    final Executor callbackExecutor;, +    final Call<T> delegate;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {, +    IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  Retrofit(Call.Factory callFactory, BaseUrl baseUrl, List<Converter.Factory> converterFactories,, +      List<CallAdapter.Factory> adapterFactories, Executor callbackExecutor,, +      boolean validateEagerly) {, +++ b/retrofit/src/main/java/retrofit2/Utils.java, +    IllegalArgumentException e = new IllegalArgumentException(message, +        + method.getName());, +    e.initCause(cause);, +    return e;, +, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java]
[+++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String result, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public Observable<String> doStuff() {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public String doStuff() {, +      assertThat(e.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Greetings");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public Observable<String> doStuff() {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +      @Override public Observable<String> doStuff() {, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String result, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public Observable<String> doStuff() {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public String doStuff() {, +      assertThat(e.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Greetings");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public Observable<String> doStuff() {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +      @Override public Observable<String> doStuff() {, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (methodInfo.isSynchronous) {, +              return null;, +            }, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {]
[+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +          if (Iterable.class.isAssignableFrom(rawParameterType)) {, +            if (!(type instanceof ParameterizedType)) {, +              throw parameterError(p, rawParameterType.getSimpleName(), +                  + " must include generic type (e.g., ", +                  + rawParameterType.getSimpleName(), +                  + "<String>)");, +            }, +            ParameterizedType parameterizedType = (ParameterizedType) type;, +            Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);, +            if (!MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, +            return ParameterHandler.RawPart.INSTANCE.iterable();, +          } else if (rawParameterType.isArray()) {, +            Class<?> arrayComponentType = rawParameterType.getComponentType();, +            if (!MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, +              throw parameterError(p,, +                  "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +            }, +            return ParameterHandler.RawPart.INSTANCE.array();, +          } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, +            throw parameterError(p,, +                "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +          }, +        } else {, +            if (MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, +              throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                  + "include a part name in the annotation.");, +            }, +            if (MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, +              throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                  + "include a part name in the annotation.");, +            }, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +          if (Iterable.class.isAssignableFrom(rawParameterType)) {, +            if (!(type instanceof ParameterizedType)) {, +              throw parameterError(p, rawParameterType.getSimpleName(), +                  + " must include generic type (e.g., ", +                  + rawParameterType.getSimpleName(), +                  + "<String>)");, +            }, +            ParameterizedType parameterizedType = (ParameterizedType) type;, +            Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);, +            if (!MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, +            return ParameterHandler.RawPart.INSTANCE.iterable();, +          } else if (rawParameterType.isArray()) {, +            Class<?> arrayComponentType = rawParameterType.getComponentType();, +            if (!MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, +              throw parameterError(p,, +                  "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +            }, +            return ParameterHandler.RawPart.INSTANCE.array();, +          } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, +            throw parameterError(p,, +                "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +          }, +        } else {, +            if (MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, +              throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                  + "include a part name in the annotation.");, +            }, +            if (MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, +              throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                  + "include a part name in the annotation.");, +            }, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +  @Test public void multipartIterableRequiresName() {, +    class Example {, +      @Multipart //, +      @POST("/foo/bar/") //, +      Call<ResponseBody> method(@Part List<RequestBody> part) {, +        return null;, +      }, +    }, +, +    try {, +      buildRequest(Example.class, new Object[] { null });, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\n", +              + "    for method Example.method");, +    }, +  }, +, +  @Test public void multipartArrayRequiresName() {, +    class Example {, +      @Multipart //, +      @POST("/foo/bar/") //, +      Call<ResponseBody> method(@Part RequestBody[] part) {, +        return null;, +      }, +    }, +, +    try {, +      buildRequest(Example.class, new Object[] { null });, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\n", +              + "    for method Example.method");]
[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +    return new MoshiConverterFactory(moshi, false);, +  private final boolean lenient;, +  private MoshiConverterFactory(Moshi moshi, boolean lenient) {, +    this.lenient = lenient;, +  }, +, +  /** Return a new factory which uses {@linkplain JsonAdapter#lenient() lenient} adapters. */, +  public MoshiConverterFactory asLenient() {, +    return new MoshiConverterFactory(moshi, true);, +    if (lenient) {, +      adapter = adapter.lenient();, +    }, +    if (lenient) {, +      adapter = adapter.lenient();, +    }, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +    return new MoshiConverterFactory(moshi, false);, +  private final boolean lenient;, +  private MoshiConverterFactory(Moshi moshi, boolean lenient) {, +    this.lenient = lenient;, +  }, +, +  /** Return a new factory which uses {@linkplain JsonAdapter#lenient() lenient} adapters. */, +  public MoshiConverterFactory asLenient() {, +    return new MoshiConverterFactory(moshi, true);, +    if (lenient) {, +      adapter = adapter.lenient();, +    }, +    if (lenient) {, +      adapter = adapter.lenient();, +    }, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +  private Service serviceLenient;, +    MoshiConverterFactory factory = MoshiConverterFactory.create(moshi);, +    MoshiConverterFactory factoryLenient = factory.asLenient();, +        .addConverterFactory(factory), +        .build();, +    Retrofit retrofitLenient = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(factoryLenient), +    serviceLenient = retrofitLenient.create(Service.class);, +, +  @Test public void asLenient() throws IOException, InterruptedException {, +    MockResponse malformedResponse = new MockResponse().setBody("{\"theName\":value}");, +    server.enqueue(malformedResponse);, +    server.enqueue(malformedResponse);, +, +    Call<AnImplementation> call = service.anImplementation(new AnImplementation("value"));, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      assertEquals(e.getMessage(),, +          "Use JsonReader.setLenient(true) to accept malformed JSON at path $.theName");, +    }, +, +    Call<AnImplementation> call2 = serviceLenient.anImplementation(new AnImplementation("value"));, +    Response<AnImplementation> response = call2.execute();, +    AnImplementation body = response.body();, +    assertThat(body.theName).isEqualTo("value");, +  }]
[+++ b/.idea/libraries/JARs.xml, +      <root url="file://$PROJECT_DIR$/lib" />, +      <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, +    <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/libraries/JARs.xml, +      <root url="file://$PROJECT_DIR$/lib" />, +      <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, +    <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/util/android.iml" filepath="$PROJECT_DIR$/modules/util/android.iml" />, +++ b/.idea/libraries/JARs.xml, +      <root url="file://$PROJECT_DIR$/lib" />, +      <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, +    <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/util/android.iml" filepath="$PROJECT_DIR$/modules/util/android.iml" />, +++ b/build.xml, +    <compile.module module="android"/>, +    <jar.module module="android"/>, +        <pathelement location="${build.dir}/android/main"/>, +        <pathelement location="${build.dir}/android/tests"/>, +        <fileset dir="modules/android/src-tests">, +++ b/.idea/libraries/JARs.xml, +      <root url="file://$PROJECT_DIR$/lib" />, +      <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, +    <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/util/android.iml" filepath="$PROJECT_DIR$/modules/util/android.iml" />, +++ b/build.xml, +    <compile.module module="android"/>, +    <jar.module module="android"/>, +        <pathelement location="${build.dir}/android/main"/>, +        <pathelement location="${build.dir}/android/tests"/>, +        <fileset dir="modules/android/src-tests">, +++ b/ivy.xml, +    <conf name="android" description="Classes with Android dependencies."/>, +    <artifact conf="android" name="retrofit-android" ext="jar"/>, +    <artifact conf="android" name="retrofit-android" ext="jar" e:classifier="src"/>, +  <!-- Note: find these at http://mvnrepository.com/ -->, +    <!-- <dependency org="com.google.android" name="android" rev="2.2.1"/> -->, +    <dependency org="com.google.android" name="android-test" rev="2.2.1"/>, +++ b/.idea/libraries/JARs.xml, +      <root url="file://$PROJECT_DIR$/lib" />, +      <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, +    <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/util/android.iml" filepath="$PROJECT_DIR$/modules/util/android.iml" />, +++ b/build.xml, +    <compile.module module="android"/>, +    <jar.module module="android"/>, +        <pathelement location="${build.dir}/android/main"/>, +        <pathelement location="${build.dir}/android/tests"/>, +        <fileset dir="modules/android/src-tests">, +++ b/ivy.xml, +    <conf name="android" description="Classes with Android dependencies."/>, +    <artifact conf="android" name="retrofit-android" ext="jar"/>, +    <artifact conf="android" name="retrofit-android" ext="jar" e:classifier="src"/>, +  <!-- Note: find these at http://mvnrepository.com/ -->, +    <!-- <dependency org="com.google.android" name="android" rev="2.2.1"/> -->, +    <dependency org="com.google.android" name="android-test" rev="2.2.1"/>, +++ b/modules/android/android.iml, +<?xml version="1.0" encoding="UTF-8"?>, +<module type="JAVA_MODULE" version="4">, +  <component name="NewModuleRootManager" inherit-compiler-output="true">, +    <exclude-output />, +    <content url="file://$MODULE_DIR$">, +      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />, +      <sourceFolder url="file://$MODULE_DIR$/src-tests" isTestSource="true" />, +    </content>, +    <orderEntry type="inheritedJdk" />, +    <orderEntry type="sourceFolder" forTests="false" />, +    <orderEntry type="library" name="JARs" level="project" />, +  </component>, +</module>, +, +++ b/.idea/libraries/JARs.xml, +      <root url="file://$PROJECT_DIR$/lib" />, +      <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, +    <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/modules.xml, +      <module fileurl="file://$PROJECT_DIR$/modules/util/android.iml" filepath="$PROJECT_DIR$/modules/util/android.iml" />, +++ b/build.xml, +    <compile.module module="android"/>, +    <jar.module module="android"/>, +        <pathelement location="${build.dir}/android/main"/>, +        <pathelement location="${build.dir}/android/tests"/>, +        <fileset dir="modules/android/src-tests">, +++ b/ivy.xml, +    <conf name="android" description="Classes with Android dependencies."/>, +    <artifact conf="android" name="retrofit-android" ext="jar"/>, +    <artifact conf="android" name="retrofit-android" ext="jar" e:classifier="src"/>, +  <!-- Note: find these at http://mvnrepository.com/ -->, +    <!-- <dependency org="com.google.android" name="android" rev="2.2.1"/> -->, +    <dependency org="com.google.android" name="android-test" rev="2.2.1"/>, +++ b/modules/android/android.iml, +<?xml version="1.0" encoding="UTF-8"?>, +<module type="JAVA_MODULE" version="4">, +  <component name="NewModuleRootManager" inherit-compiler-output="true">, +    <exclude-output />, +    <content url="file://$MODULE_DIR$">]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.lang.reflect.Type;, +import static retrofit2.Utils.methodError;, +, +    Type returnType = method.getGenericReturnType();, +    if (Utils.hasUnresolvableType(returnType)) {, +      throw methodError(method,, +          "Method return type must not include a type variable or wildcard: %s", returnType);, +    }, +    if (returnType == void.class) {, +      throw methodError(method, "Service methods cannot return void.");, +    }, +]
[+++ b/retrofit-converters/moshi/pom.xml, +    <!-- TODO remove this dependency once Moshi or OkHttp ships with 1.9.0 or newer. -->, +    <dependency>, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>1.9.0</version>, +    </dependency>, +++ b/retrofit-converters/moshi/pom.xml, +    <!-- TODO remove this dependency once Moshi or OkHttp ships with 1.9.0 or newer. -->, +    <dependency>, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>1.9.0</version>, +    </dependency>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import okio.BufferedSource;, +import okio.ByteString;, +  private static final ByteString UTF8_BOM = ByteString.decodeHex("EFBBBF");, +, +    BufferedSource source = value.source();, +      // Moshi has no document-level API so the responsibility of BOM skipping falls to whatever, +      // is delegating to it. Since it's a UTF-8-only library as well we only honor the UTF-8 BOM., +      if (source.rangeEquals(0, UTF8_BOM)) {, +        source.skip(UTF8_BOM.size());, +      }, +      return adapter.fromJson(source);, +++ b/retrofit-converters/moshi/pom.xml, +    <!-- TODO remove this dependency once Moshi or OkHttp ships with 1.9.0 or newer. -->, +    <dependency>, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>1.9.0</version>, +    </dependency>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import okio.BufferedSource;, +import okio.ByteString;, +  private static final ByteString UTF8_BOM = ByteString.decodeHex("EFBBBF");, +, +    BufferedSource source = value.source();, +      // Moshi has no document-level API so the responsibility of BOM skipping falls to whatever, +      // is delegating to it. Since it's a UTF-8-only library as well we only honor the UTF-8 BOM., +      if (source.rangeEquals(0, UTF8_BOM)) {, +        source.skip(UTF8_BOM.size());, +      }, +      return adapter.fromJson(source);, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import java.nio.charset.Charset;, +import okio.Buffer;, +import okio.ByteString;, +, +  @Test public void utf8BomSkipped() throws IOException {, +    Buffer responseBody = new Buffer(), +        .write(ByteString.decodeHex("EFBBBF")), +        .writeUtf8("{\"theName\":\"value\"}");, +    MockResponse malformedResponse = new MockResponse().setBody(responseBody);, +    server.enqueue(malformedResponse);, +, +    Call<AnImplementation> call = service.anImplementation(new AnImplementation("value"));, +    Response<AnImplementation> response = call.execute();, +    AnImplementation body = response.body();, +    assertThat(body.theName).isEqualTo("value");, +  }, +, +  @Test public void nonUtf8BomIsNotSkipped() throws IOException {, +    Buffer responseBody = new Buffer(), +        .write(ByteString.decodeHex("FEFF")), +        .writeString("{\"theName\":\"value\"}", Charset.forName("UTF-16"));, +    MockResponse malformedResponse = new MockResponse().setBody(responseBody);, +    server.enqueue(malformedResponse);, +, +    Call<AnImplementation> call = service.anImplementation(new AnImplementation("value"));, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +  }]
[+++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.0</version>, +++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.0</version>, +++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.0</version>, +++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.0</version>, +++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.1.0</version>, +++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.1.0</version>, +++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.1.0</version>, +++ b/pom.xml, +  <version>2.1.0</version>, +    <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/gson/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/jackson/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/moshi/pom.xml, +    <version>2.1.0</version>, +++ b/retrofit-converters/pom.xml, +    <version>2.1.0</version>, +++ b/pom.xml]
[+++ b/pom.xml, +    <module>retrofit-appengine</module>, +++ b/pom.xml, +    <module>retrofit-appengine</module>, +++ b/retrofit-appengine/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-appengine</artifactId>, +  <name>Retrofit AppEngine</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <module>retrofit-appengine</module>, +++ b/retrofit-appengine/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.retrofit</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +    <relativePath>../pom.xml</relativePath>, +  </parent>, +, +  <artifactId>retrofit-appengine</artifactId>, +  <name>Retrofit AppEngine</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.appengine</groupId>, +      <artifactId>appengine-api-1.0-sdk</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>]
[+++ b/modules/http/src/retrofit/http/GET.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a GET request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface GET {, +  String value();, +}, +++ b/modules/http/src/retrofit/http/GET.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a GET request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface GET {, +  String value();, +}, +++ b/modules/http/src/retrofit/http/Headers.java, +  public void setOn(HttpMessage message);, +++ b/modules/http/src/retrofit/http/GET.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a GET request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface GET {, +  String value();, +}, +++ b/modules/http/src/retrofit/http/Headers.java, +  public void setOn(HttpMessage message);, +++ b/modules/http/src/retrofit/http/POST.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a POST request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface POST {, +  String value();, +}, +++ b/modules/http/src/retrofit/http/GET.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a GET request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface GET {, +  String value();, +}, +++ b/modules/http/src/retrofit/http/Headers.java]
[+++ b/pom.xml, +    <guava.version>14.0-rc3</guava.version>, +      <dependency>, +        <groupId>com.google.guava</groupId>, +        <artifactId>guava</artifactId>, +        <version>${guava.version}</version>, +      </dependency>, +++ b/pom.xml, +    <guava.version>14.0-rc3</guava.version>, +      <dependency>, +        <groupId>com.google.guava</groupId>, +        <artifactId>guava</artifactId>, +        <version>${guava.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/pom.xml, +    <guava.version>14.0-rc3</guava.version>, +      <dependency>, +        <groupId>com.google.guava</groupId>, +        <artifactId>guava</artifactId>, +        <version>${guava.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.io.TypedInput;, +import retrofit.io.TypedOutput;, +  Object fromBody(TypedInput body, Type type) throws ConversionException;, +  TypedOutput toBody(Object object);, +++ b/pom.xml, +    <guava.version>14.0-rc3</guava.version>, +      <dependency>, +        <groupId>com.google.guava</groupId>, +        <artifactId>guava</artifactId>, +        <version>${guava.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.io.TypedInput;, +import retrofit.io.TypedOutput;, +  Object fromBody(TypedInput body, Type type) throws ConversionException;, +  TypedOutput toBody(Object object);, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.io.TypedInput;, +import retrofit.io.TypedOutput;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    InputStreamReader isr = null;, +      isr = new InputStreamReader(body.in(), UTF_8);, +    } finally {, +      if (isr != null) {, +        try {, +          isr.close();, +        } catch (IOException ignored) {, +        }, +      }, +  @Override public TypedOutput toBody(Object object) {, +      return new JsonTypedOutput(gson.toJson(object).getBytes(UTF_8));, +  static class JsonTypedOutput implements TypedOutput {, +    private final byte[] jsonBytes;, +    JsonTypedOutput(byte[] jsonBytes) {, +    @Override public long length() {, +++ b/pom.xml, +    <guava.version>14.0-rc3</guava.version>, +      <dependency>, +        <groupId>com.google.guava</groupId>, +        <artifactId>guava</artifactId>, +        <version>${guava.version}</version>, +      </dependency>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.io.TypedInput;, +import retrofit.io.TypedOutput;, +  Object fromBody(TypedInput body, Type type) throws ConversionException;, +  TypedOutput toBody(Object object);, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.io.TypedInput;, +import retrofit.io.TypedOutput;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    InputStreamReader isr = null;, +      isr = new InputStreamReader(body.in(), UTF_8);, +    } finally {]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .converterFactory(new StringConverterFactory()), +  static class StringConverterFactory implements Converter.Factory {, +    @Override public Converter<?> get(Type type) {, +      return new Converter<String>() {, +        @Override public String fromBody(ResponseBody body) throws IOException {, +        @Override public RequestBody toBody(String value) {, +          return RequestBody.create(MediaType.parse("text/plain"), value);, +        }, +      };, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .converterFactory(new StringConverterFactory()), +  static class StringConverterFactory implements Converter.Factory {, +    @Override public Converter<?> get(Type type) {, +      return new Converter<String>() {, +        @Override public String fromBody(ResponseBody body) throws IOException {, +        @Override public RequestBody toBody(String value) {, +          return RequestBody.create(MediaType.parse("text/plain"), value);, +        }, +      };, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverter.java, +import com.google.gson.TypeAdapter;, +import java.io.OutputStreamWriter;, +import java.io.Reader;, +import java.io.Writer;, +import okio.Buffer;, +final class GsonConverter<T> implements Converter<T> {, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +  private static final Charset UTF_8 = Charset.forName("UTF-8");, +  private final TypeAdapter<T> typeAdapter;, +, +  GsonConverter(TypeAdapter<T> typeAdapter) {, +    this.typeAdapter = typeAdapter;, +  @Override public T fromBody(ResponseBody body) throws IOException {, +    Reader in = body.charStream();, +      return typeAdapter.fromJson(in);, +        in.close();, +  @Override public RequestBody toBody(T value) {, +    Buffer buffer = new Buffer();, +    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);, +    try {, +      typeAdapter.toJson(writer, value);, +      writer.flush();, +    } catch (IOException e) {, +      throw new AssertionError(e); // Writing to Buffer does no I/O., +    }, +    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .converterFactory(new StringConverterFactory()), +  static class StringConverterFactory implements Converter.Factory {, +    @Override public Converter<?> get(Type type) {, +      return new Converter<String>() {, +        @Override public String fromBody(ResponseBody body) throws IOException {, +        @Override public RequestBody toBody(String value) {, +          return RequestBody.create(MediaType.parse("text/plain"), value);, +        }, +      };, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverter.java, +import com.google.gson.TypeAdapter;, +import java.io.OutputStreamWriter;, +import java.io.Reader;, +import java.io.Writer;, +import okio.Buffer;, +final class GsonConverter<T> implements Converter<T> {, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +  private static final Charset UTF_8 = Charset.forName("UTF-8");, +  private final TypeAdapter<T> typeAdapter;, +, +  GsonConverter(TypeAdapter<T> typeAdapter) {, +    this.typeAdapter = typeAdapter;, +  @Override public T fromBody(ResponseBody body) throws IOException {, +    Reader in = body.charStream();, +      return typeAdapter.fromJson(in);, +        in.close();, +  @Override public RequestBody toBody(T value) {, +    Buffer buffer = new Buffer();, +    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);, +    try {, +      typeAdapter.toJson(writer, value);, +      writer.flush();, +    } catch (IOException e) {, +      throw new AssertionError(e); // Writing to Buffer does no I/O., +    }, +    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]
[+++ b/pom.xml, +    <okhttp.version>3.0.1</okhttp.version>]
[+++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., +    return new WireConverterFactory();, +  private WireConverterFactory() {, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireResponseBodyConverter<>(adapter);, +    Class<?> c = (Class<?>) type;, +    if (!Message.class.isAssignableFrom(c)) {, +    //noinspection unchecked, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireRequestBodyConverter<>(adapter);, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., +    return new WireConverterFactory();, +  private WireConverterFactory() {, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireResponseBodyConverter<>(adapter);, +    Class<?> c = (Class<?>) type;, +    if (!Message.class.isAssignableFrom(c)) {, +    //noinspection unchecked, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireRequestBodyConverter.java, +import com.squareup.wire.ProtoAdapter;, +import okio.Buffer;, +final class WireRequestBodyConverter<T extends Message<T, ?>> implements Converter<T, RequestBody> {, +  private final ProtoAdapter<T> adapter;, +, +  WireRequestBodyConverter(ProtoAdapter<T> adapter) {, +    this.adapter = adapter;, +  }, +, +    Buffer buffer = new Buffer();, +    adapter.encode(buffer, value);, +    return RequestBody.create(MEDIA_TYPE, buffer.snapshot());, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., +    return new WireConverterFactory();, +  private WireConverterFactory() {, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireResponseBodyConverter<>(adapter);, +    Class<?> c = (Class<?>) type;, +    if (!Message.class.isAssignableFrom(c)) {, +    //noinspection unchecked, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireRequestBodyConverter.java, +import com.squareup.wire.ProtoAdapter;, +import okio.Buffer;, +final class WireRequestBodyConverter<T extends Message<T, ?>> implements Converter<T, RequestBody> {, +  private final ProtoAdapter<T> adapter;, +, +  WireRequestBodyConverter(ProtoAdapter<T> adapter) {, +    this.adapter = adapter;, +  }, +, +    Buffer buffer = new Buffer();, +    adapter.encode(buffer, value);, +    return RequestBody.create(MEDIA_TYPE, buffer.snapshot());, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireResponseBodyConverter.java, +import com.squareup.wire.ProtoAdapter;, +final class WireResponseBodyConverter<T extends Message<T, ?>>, +    implements Converter<ResponseBody, T> {, +  private final ProtoAdapter<T> adapter;, +  WireResponseBodyConverter(ProtoAdapter<T> adapter) {, +    this.adapter = adapter;, +      BufferedSource source = value.source();, +      return adapter.decode(source);, +      Utils.closeQuietly(value);, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., +    return new WireConverterFactory();, +  private WireConverterFactory() {, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireResponseBodyConverter<>(adapter);, +    Class<?> c = (Class<?>) type;, +    if (!Message.class.isAssignableFrom(c)) {, +    //noinspection unchecked, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);]
[+++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +        } catch (Exception e) {, +          // This is from the Callable.  It shouldn't actually throw., +          throw new RuntimeException(e);, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +        } catch (Exception e) {, +          // This is from the Callable.  It shouldn't actually throw., +          throw new RuntimeException(e);, +++ b/retrofit/src/test/java/retrofit/EndpointsTest.java, +// Copyright 2014 Square, Inc., +package retrofit;, +, +import org.junit.Test;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class EndpointsTest {, +  @Test public void endpointOnly() {, +    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com");, +    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, +  }, +, +  @Test public void endpointAndName() {, +    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com", "production");, +    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, +    assertThat(endpoint.getName()).isEqualTo("production");, +  }, +}, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +        } catch (Exception e) {, +          // This is from the Callable.  It shouldn't actually throw., +          throw new RuntimeException(e);, +++ b/retrofit/src/test/java/retrofit/EndpointsTest.java, +// Copyright 2014 Square, Inc., +package retrofit;, +, +import org.junit.Test;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class EndpointsTest {, +  @Test public void endpointOnly() {, +    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com");, +    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, +  }, +, +  @Test public void endpointAndName() {, +    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com", "production");, +    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, +    assertThat(endpoint.getName()).isEqualTo("production");, +  }, +}, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java]
