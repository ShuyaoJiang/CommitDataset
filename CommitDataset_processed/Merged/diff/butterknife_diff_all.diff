[+++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/main/proguard.pro, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/main/proguard.pro, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/main/proguard.pro, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10-bin.zip, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +++ b/butterknife-integration-test/src/main/proguard.pro, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10-bin.zip, +++ b/website/index.html, +    <link href="https://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">, +    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>]
[+++ b/gradle.properties, +VERSION_NAME=8.6.1-SNAPSHOT]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +public final class ButterKnife {]
[+++ b/butterknife-sample/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.3-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/build.gradle, +          'core': "androidx.core:core:1.0.0",, +          'test': [, +              'runner': 'androidx.test:runner:1.1.0',, +              'rules': 'androidx.test:rules:1.1.0',, +          ],, +    jcenter(), +++ b/build.gradle, +          'core': "androidx.core:core:1.0.0",, +          'test': [, +              'runner': 'androidx.test:runner:1.1.0',, +              'rules': 'androidx.test:rules:1.1.0',, +          ],, +    jcenter(), +++ b/butterknife-annotations/build.gradle, +  api deps.androidx.annotations, +++ b/build.gradle, +          'core': "androidx.core:core:1.0.0",, +          'test': [, +              'runner': 'androidx.test:runner:1.1.0',, +              'rules': 'androidx.test:rules:1.1.0',, +          ],, +    jcenter(), +++ b/butterknife-annotations/build.gradle, +  api deps.androidx.annotations, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import androidx.annotation.AnimRes;, +++ b/build.gradle, +          'core': "androidx.core:core:1.0.0",, +          'test': [, +              'runner': 'androidx.test:runner:1.1.0',, +              'rules': 'androidx.test:rules:1.1.0',, +          ],, +    jcenter(), +++ b/butterknife-annotations/build.gradle, +  api deps.androidx.annotations, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import androidx.annotation.AnimRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import androidx.annotation.ArrayRes;, +++ b/build.gradle, +          'core': "androidx.core:core:1.0.0",, +          'test': [, +              'runner': 'androidx.test:runner:1.1.0',, +              'rules': 'androidx.test:rules:1.1.0',, +          ],, +    jcenter(), +++ b/butterknife-annotations/build.gradle, +  api deps.androidx.annotations, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import androidx.annotation.AnimRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import androidx.annotation.ArrayRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import androidx.annotation.DrawableRes;, +++ b/build.gradle, +          'core': "androidx.core:core:1.0.0",, +          'test': [, +              'runner': 'androidx.test:runner:1.1.0',, +              'rules': 'androidx.test:rules:1.1.0',, +          ],, +    jcenter(), +++ b/butterknife-annotations/build.gradle, +  api deps.androidx.annotations, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import androidx.annotation.AnimRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import androidx.annotation.ArrayRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import androidx.annotation.DrawableRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import androidx.annotation.BoolRes;, +++ b/build.gradle, +          'core': "androidx.core:core:1.0.0",, +          'test': [, +              'runner': 'androidx.test:runner:1.1.0',, +              'rules': 'androidx.test:rules:1.1.0',, +          ],, +    jcenter(), +++ b/butterknife-annotations/build.gradle, +  api deps.androidx.annotations, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import androidx.annotation.AnimRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import androidx.annotation.ArrayRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import androidx.annotation.DrawableRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import androidx.annotation.BoolRes;, +++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java, +import androidx.annotation.ColorRes;, +++ b/build.gradle, +          'core': "androidx.core:core:1.0.0",, +          'test': [, +              'runner': 'androidx.test:runner:1.1.0',, +              'rules': 'androidx.test:rules:1.1.0',, +          ],, +    jcenter(), +++ b/butterknife-annotations/build.gradle, +  api deps.androidx.annotations]
[+++ b/butterknife-sample/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/build.gradle, +  buildToolsVersion = '24.0.2', +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/build.gradle, +  buildToolsVersion = '24.0.2', +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  testCompile deps.robolectric, +++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/build.gradle, +  buildToolsVersion = '24.0.2', +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  testCompile deps.robolectric, +++ b/butterknife-integration-test/build.gradle, +++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/build.gradle, +  buildToolsVersion = '24.0.2', +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  testCompile deps.robolectric, +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=21, +++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/build.gradle, +  buildToolsVersion = '24.0.2', +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  testCompile deps.robolectric, +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=21, +++ b/butterknife/build.gradle, +++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/build.gradle, +  buildToolsVersion = '24.0.2', +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  testCompile deps.robolectric, +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=21, +++ b/butterknife/build.gradle, +++ /dev/null]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}BindInt(R.integer.columns) int columns;, + * {@literal @}BindColor(R.color.error_red) int errorRed;]
[+++ b/.gitignore, +, +# Gradle, +.gradle, +jniLibs, +build, +local.properties, +reports, +++ b/.gitignore, +, +# Gradle, +.gradle, +jniLibs, +build, +local.properties, +reports, +++ b/.travis.yml, +    - build-tools-23.0.1, +    - android-23, +++ b/.gitignore, +, +# Gradle, +.gradle, +jniLibs, +build, +local.properties, +reports, +++ b/.travis.yml, +    - build-tools-23.0.1, +    - android-23, +++ b/build.gradle, +subprojects { project ->, +, +  repositories {, +    mavenCentral(), +  }, +, +  apply plugin: 'checkstyle', +, +  task checkstyle(type: Checkstyle) {, +    configFile rootProject.file('checkstyle.xml'), +    source 'src/main/java', +    ignoreFailures false, +    showViolations true, +    include '**/*.java', +, +    classpath = files(), +  }, +, +  afterEvaluate {, +    if (project.tasks.findByName('check')) {, +      check.dependsOn('checkstyle'), +    }, +  }, +, +  buildscript {, +    repositories {, +      mavenCentral(), +    }, +    dependencies {, +      classpath 'com.android.tools.build:gradle:1.3.1', +      classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8', +    }, +  }, +}, +, +ext {, +  minSdkVersion = 15, +  targetSdkVersion = 23, +  compileSdkVersion = 23, +  buildToolsVersion = '23.0.1', +  sourceCompatibilityVersion = JavaVersion.VERSION_1_7, +  targetCompatibilityVersion = JavaVersion.VERSION_1_7, +}, +, +ext.deps = [, +    // Android, +    android: 'com.google.android:android:4.1.1.4',, +    , +    // Square, +    javapoet: 'com.squareup:javapoet:1.2.0',, +, +    // Test dependencies, +    junit: 'junit:junit:4.11',, +    festassert: 'org.easytesting:fest-assert-core:2.0M10',, +    festandroid: 'com.squareup:fest-android:1.0.7',, +    mockitocore: 'org.mockito:mockito-core:1.9.5',, +    robolectric: 'org.robolectric:robolectric:2.2',, +    compiletesting: 'com.google.testing.compile:compile-testing:0.6',, +    autoservice: 'com.google.auto.service:auto-service:1.0-rc2', +], +++ b/.gitignore, +, +# Gradle, +.gradle, +jniLibs, +build, +local.properties, +reports, +++ b/.travis.yml]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/website/index.html, +--keep class **$$ViewInjector { *; }</pre>]
[+++ b/.travis.yml, +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +    - $HOME/.android/build-cache]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-integration-test/build.gradle, +    debug {, +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', +    }, +  }, +, +  productFlavors {, +    flavorDimensions 'runtime', +, +    reflect {, +      dimension 'runtime', +      applicationIdSuffix '.reflect', +    }, +    codegen {, +      dimension 'runtime', +      applicationIdSuffix '.codegen', +  reflectImplementation project(':butterknife-reflect'), +, +  codegenImplementation project(':butterknife'), +  codegenAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-integration-test/build.gradle, +    debug {, +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', +    }, +  }, +, +  productFlavors {, +    flavorDimensions 'runtime', +, +    reflect {, +      dimension 'runtime', +      applicationIdSuffix '.reflect', +    }, +    codegen {, +      dimension 'runtime', +      applicationIdSuffix '.codegen', +  reflectImplementation project(':butterknife-reflect'), +, +  codegenImplementation project(':butterknife'), +  codegenAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/proguard.pro, +-dontoptimize, +-dontobfuscate, +++ b/butterknife-annotations/src/main/java/butterknife/BindString.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME) @Target(FIELD), +++ b/butterknife-integration-test/build.gradle, +    debug {, +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', +    }, +  }, +, +  productFlavors {, +    flavorDimensions 'runtime', +, +    reflect {, +      dimension 'runtime', +      applicationIdSuffix '.reflect']
[+++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + * Group multiple views in a list or array. Operate on all of them at once with actions,, +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + * Group multiple views in a list or array. Operate on all of them at once with actions,, +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.Bind;, +  @Bind(R.id.title) TextView title;, +  @Bind(R.id.subtitle) TextView subtitle;, +  @Bind(R.id.hello) Button hello;, +  @Bind(R.id.list_of_things) ListView listOfThings;, +  @Bind(R.id.footer) TextView footer;, +  @Bind({ R.id.title, R.id.subtitle, R.id.hello }), +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + * Group multiple views in a list or array. Operate on all of them at once with actions,, +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.Bind;, +  @Bind(R.id.title) TextView title;, +  @Bind(R.id.subtitle) TextView subtitle;, +  @Bind(R.id.hello) Button hello;, +  @Bind(R.id.list_of_things) ListView listOfThings;, +  @Bind(R.id.footer) TextView footer;, +  @Bind({ R.id.title, R.id.subtitle, R.id.hello }), +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.Bind;, +    @Bind(R.id.word) TextView word;, +    @Bind(R.id.length) TextView length;, +    @Bind(R.id.position) TextView position;, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + * Group multiple views in a list or array. Operate on all of them at once with actions,, +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.Bind;, +  @Bind(R.id.title) TextView title;, +  @Bind(R.id.subtitle) TextView subtitle;, +  @Bind(R.id.hello) Button hello;, +  @Bind(R.id.list_of_things) ListView listOfThings;, +  @Bind(R.id.footer) TextView footer;, +  @Bind({ R.id.title, R.id.subtitle, R.id.hello }), +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.Bind;, +    @Bind(R.id.word) TextView word;, +    @Bind(R.id.length) TextView length;, +    @Bind(R.id.position) TextView position;, +++ b/butterknife/src/main/java/butterknife/Bind.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}Bind(R.id.title) TextView title;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface Bind {, +  /** View ID to which the field will be bound. */, +  int[] value();, +}, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., + * Group multiple views in a list or array. Operate on all of them at once with actions,, +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.Bind;, +  @Bind(R.id.title) TextView title;, +  @Bind(R.id.subtitle) TextView subtitle;, +  @Bind(R.id.hello) Button hello;, +  @Bind(R.id.list_of_things) ListView listOfThings;, +  @Bind(R.id.footer) TextView footer;, +  @Bind({ R.id.title, R.id.subtitle, R.id.hello }), +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.Bind;, +    @Bind(R.id.word) TextView word;, +    @Bind(R.id.length) TextView length;, +    @Bind(R.id.position) TextView position;, +++ b/butterknife/src/main/java/butterknife/Bind.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PROTECTED;, +  private static final ClassName UNBINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewUnbinder");, +  private String parentUnbinder;, +  void setParentUnbinder(String parentUnbinder) {, +    this.parentUnbinder = parentUnbinder;, +  }, +, +  String getParentUnbinder() {, +    return parentUnbinder;, +  }, +, +    if (hasUnbinder()) {, +      // Create unbinding class., +      result.addType(createUnbinderClass());, +      // Now we need to provide child classes to access and override unbinder implementations., +      createUnbinderInternalAccessMethods(result);, +    }, +, +    TypeName generic = TypeVariableName.get("T");, +        .addModifiers(PUBLIC, STATIC), +        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));, +    if (parentUnbinder != null) {, +      result.superclass(ParameterizedTypeName.get(, +          ClassName.bestGuess(parentViewBinder + '.' + UnbinderBinding.UNBINDER_SIMPLE_NAME),, +          generic));, +    } else {, +      result.addSuperinterface(ParameterizedTypeName.get(UNBINDER, generic));, +      result.addField(generic, "target", PRIVATE);, +    }, +, +    result.addMethod(createUnbinderConstructor(generic));, +    if (parentUnbinder == null) {, +      result.addMethod(createUnbindInterfaceMethod());, +    }, +    result.addMethod(createUnbindMethod(result, generic));, +, +    return result.build();, +  }, +, +  private MethodSpec createUnbinderConstructor(TypeName targetType) {, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +    if (parentUnbinder != null) {, +      constructor.addStatement("super(target)");, +    } else {, +      constructor.addStatement("this.$1N = $1N", "target");, +    }, +    return constructor.build();, +  }, +, +  private MethodSpec createUnbindInterfaceMethod() {, +    return MethodSpec.methodBuilder("unbind"), +        .addModifiers(PUBLIC, FINAL), +        .addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +            "Bindings already cleared."), +        .addStatement("unbind(target)"), +        .addStatement("target = null"), +        .build();, +  }, +  private MethodSpec createUnbindMethod(TypeSpec.Builder unbinderClass, TypeName targetType) {, +    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind"), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +, +    if (parentUnbinder != null) {, +      result.addAnnotation(Override.class);, +      result.addStatement("super.unbind(target)");, +    }, +      addFieldAndUnbindStatement(unbinderClass, result, bindings);, +        result.addStatement("target.$L = null", fieldBinding.getName());, +      result.addStatement("target.$L = null", fieldCollectionBinding.getName());, +    if (unbinderBinding.getUnbinderFieldName() != null) {, +      result.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());, +    }, +  private void createUnbinderInternalAccessMethods(TypeSpec.Builder viewBindingClass) {, +    // Create type variable <U extends Unbinder<T>>., +    ClassName unbinderClassName;, +    if (parentUnbinder != null) {, +      unbinderClassName = ClassName.bestGuess(parentUnbinder);, +    } else {, +      unbinderClassName = unbinderBinding.getUnbinderClassName();, +    }, +    TypeVariableName returnType = TypeVariableName.get("U", ParameterizedTypeName.get(, +        unbinderClassName, TypeVariableName.get("T")));, +, +    // We are casting inside the access methods., +    AnnotationSpec suppressWarnign = AnnotationSpec.builder(SuppressWarnings.class), +        .addMember("value", "\"unchecked\""), +        .build();, +, +    MethodSpec.Builder createUnbinder = MethodSpec.methodBuilder("createUnbinder"), +        .addAnnotation(suppressWarnign), +        .addModifiers(PROTECTED), +        .addTypeVariable(returnType), +        .returns(returnType), +        .addParameter(TypeVariableName.get("T"), "target"), +        .addStatement("return ($T) new $T($L)", returnType, unbinderBinding.getUnbinderClassName(),]
[+++ b/butterknife-sample/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife-sample/pom.xml, +    <version>1.3.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.3.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.3.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.annotation.TargetApi;, +import android.os.Build;, + * There are three convenience methods for working with view collections:, + * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>, +  /** A simple setter that can be apply a value to a list of views. */, +  public interface Setter<T extends View, V> {, +    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */, +    void set(T view, V value, int index);, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */, +  public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      setter.set(list.get(i), value, i);, +    }, +  }, +, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.annotation.TargetApi;, +import android.os.Build;, + * There are three convenience methods for working with view collections:, + * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>, +  /** A simple setter that can be apply a value to a list of views. */, +  public interface Setter<T extends View, V> {, +    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */, +    void set(T view, V value, int index);, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */, +  public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      setter.set(list.get(i), value, i);, +    }, +  }, +, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =, +      new ButterKnife.Setter<View, Boolean>() {, +        @Override public void set(View view, Boolean value, int index) {, +          view.setEnabled(value);, +        }, +      };, +  @Test public void setterAppliedToEveryView() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1).isEnabled();, +    assertThat(view2).isEnabled();, +    assertThat(view3).isEnabled();, +, +    List<View> views = Arrays.asList(view1, view2, view3);, +    ButterKnife.apply(views, SETTER_ENABLED, false);, +, +    assertThat(view1).isDisabled();, +    assertThat(view2).isDisabled();, +    assertThat(view3).isDisabled();, +  }, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.annotation.TargetApi;, +import android.os.Build;, + * There are three convenience methods for working with view collections:, + * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>, +  /** A simple setter that can be apply a value to a list of views. */, +  public interface Setter<T extends View, V> {, +    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */, +    void set(T view, V value, int index);, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */, +  public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      setter.set(list.get(i), value, i);, +    }, +  }, +, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =, +      new ButterKnife.Setter<View, Boolean>() {, +        @Override public void set(View view, Boolean value, int index) {, +          view.setEnabled(value);, +        }, +      };, +  @Test public void setterAppliedToEveryView() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1).isEnabled();, +    assertThat(view2).isEnabled();, +    assertThat(view3).isEnabled();, +, +    List<View> views = Arrays.asList(view1, view2, view3);, +    ButterKnife.apply(views, SETTER_ENABLED, false);]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final List<ResourceBinding> resourceBindings;, +  private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,, +      Collection<ResourceBinding> resourceBindings, BindingSet parentBinding) {, +    if (parentBinding != null) {, +      result.superclass(parentBinding.bindingClassName);, +    if (hasTargetField()) {, +    if (!constructorNeedsView()) {, +    if (hasViewBindings() || parentBinding == null) {, +    if (constructorNeedsView()) {, +    if (parentBinding != null) {, +      if (parentBinding.constructorNeedsView()) {, +        constructor.addStatement("super(target, source)");, +      } else if (constructorNeedsView()) {, +        constructor.addStatement("super(target, source.getContext())");, +      } else {, +        constructor.addStatement("super(target, context)");, +      }, +      constructor.addCode("\n");, +    }, +    if (hasTargetField()) {, +      constructor.addStatement("this.target = target");, +      constructor.addCode("\n");, +    }, +, +      if (hasViewLocal()) {, +      if (!resourceBindings.isEmpty()) {, +    if (!resourceBindings.isEmpty()) {, +      if (constructorNeedsView()) {, +      if (hasResourceBindingsNeedingResource()) {, +      for (ResourceBinding binding : resourceBindings) {, +    if (!isFinal && parentBinding == null) {, +    if (hasTargetField()) {, +    if (parentBinding != null) {, +    for (ResourceBinding binding : resourceBindings) {, +      if (!binding.id().qualifed) {, +    for (ResourceBinding binding : resourceBindings) {, +      if (binding.requiresResources()) {, +  private boolean hasTargetField() {, +  private boolean hasViewLocal() {, +  /** True if this binding requires a view. Otherwise only a context is needed. */, +  private boolean constructorNeedsView() {, +    return hasViewBindings() //, +        || parentBinding != null && parentBinding.constructorNeedsView();, +  }, +, +    private final List<ResourceBinding> resourceBindings = new ArrayList<>();, +    void addResource(ResourceBinding binding) {, +          collectionBindings, resourceBindings, parentBinding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final List<ResourceBinding> resourceBindings;, +  private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,, +      Collection<ResourceBinding> resourceBindings, BindingSet parentBinding) {, +    if (parentBinding != null) {, +      result.superclass(parentBinding.bindingClassName);, +    if (hasTargetField()) {, +    if (!constructorNeedsView()) {, +    if (hasViewBindings() || parentBinding == null) {, +    if (constructorNeedsView()) {, +    if (parentBinding != null) {, +      if (parentBinding.constructorNeedsView()) {, +        constructor.addStatement("super(target, source)");, +      } else if (constructorNeedsView()) {, +        constructor.addStatement("super(target, source.getContext())");, +      } else {, +        constructor.addStatement("super(target, context)");, +      }, +      constructor.addCode("\n");, +    }, +    if (hasTargetField()) {, +      constructor.addStatement("this.target = target");, +      constructor.addCode("\n");, +    }, +, +      if (hasViewLocal()) {, +      if (!resourceBindings.isEmpty()) {, +    if (!resourceBindings.isEmpty()) {, +      if (constructorNeedsView()) {, +      if (hasResourceBindingsNeedingResource()) {, +      for (ResourceBinding binding : resourceBindings) {, +    if (!isFinal && parentBinding == null) {, +    if (hasTargetField()) {, +    if (parentBinding != null) {, +    for (ResourceBinding binding : resourceBindings) {, +      if (!binding.id().qualifed) {, +    for (ResourceBinding binding : resourceBindings) {, +      if (binding.requiresResources()) {, +  private boolean hasTargetField() {, +  private boolean hasViewLocal() {, +  /** True if this binding requires a view. Otherwise only a context is needed. */, +  private boolean constructorNeedsView() {, +    return hasViewBindings() //, +        || parentBinding != null && parentBinding.constructorNeedsView();, +  }, +, +    private final List<ResourceBinding> resourceBindings = new ArrayList<>();, +    void addResource(ResourceBinding binding) {, +          collectionBindings, resourceBindings, parentBinding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    builder.addResource(binding);]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    } else {, +      constructor.addParameter(CONTEXT, "context");, +      if (parentBinding.bindNeedsView()) {, +        invoke.add(", source");, +      } else {, +        invoke.add(", context");, +      }, +      if (bindNeedsView()) {, +        invoke.add(", source");, +      } else {, +        invoke.add(", source.getContext()");, +      }, +        .addModifiers(PUBLIC, STATIC), +        .addParameter(targetTypeName, "target"), +        .addParameter(CONTEXT, "context");, +      if (parentBinding.bindNeedsView()) {, +        invoke.add(", source");, +      } else if (bindNeedsView()) {, +        invoke.add(", source.getContext()"); // We have a view but the parent only needs context., +      } else {, +        invoke.add(", context");, +      }, +      boolean hasView = bindNeedsView() || isFinal;, +      boolean needsSourceToContext = bindNeedsTheme() && hasView;, +      if (needsSourceToContext) {, +        result.addStatement("$T context = source.getContext()", CONTEXT);, +      }, +      result.addStatement("$T res = $N.getResources()", RESOURCES,, +          needsSourceToContext || !hasView ? "context" : "source");, +      if (bindNeedsTheme()) {, +        result.addStatement("$T theme = context.getTheme()", THEME);, +      }, +, +  /** True if this binding requires a view. Otherwise only a context is needed. */, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    } else {, +      constructor.addParameter(CONTEXT, "context");, +      if (parentBinding.bindNeedsView()) {, +        invoke.add(", source");, +      } else {, +        invoke.add(", context");, +      }, +      if (bindNeedsView()) {, +        invoke.add(", source");, +      } else {, +        invoke.add(", source.getContext()");, +      }, +        .addModifiers(PUBLIC, STATIC), +        .addParameter(targetTypeName, "target"), +        .addParameter(CONTEXT, "context");, +      if (parentBinding.bindNeedsView()) {, +        invoke.add(", source");, +      } else if (bindNeedsView()) {, +        invoke.add(", source.getContext()"); // We have a view but the parent only needs context., +      } else {, +        invoke.add(", context");, +      }, +      boolean hasView = bindNeedsView() || isFinal;, +      boolean needsSourceToContext = bindNeedsTheme() && hasView;, +      if (needsSourceToContext) {, +        result.addStatement("$T context = source.getContext()", CONTEXT);, +      }, +      result.addStatement("$T res = $N.getResources()", RESOURCES,, +          needsSourceToContext || !hasView ? "context" : "source");, +      if (bindNeedsTheme()) {, +        result.addStatement("$T theme = context.getTheme()", THEME);, +      }, +, +  /** True if this binding requires a view. Otherwise only a context is needed. */, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java, +  /** When true, requires delegating the method to our {@code Utils} class. */, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    } else {, +      constructor.addParameter(CONTEXT, "context");, +      if (parentBinding.bindNeedsView()) {, +        invoke.add(", source");, +      } else {, +        invoke.add(", context");, +      }, +      if (bindNeedsView()) {, +        invoke.add(", source");, +      } else {, +        invoke.add(", source.getContext()");, +      }, +        .addModifiers(PUBLIC, STATIC), +        .addParameter(targetTypeName, "target"), +        .addParameter(CONTEXT, "context");, +      if (parentBinding.bindNeedsView()) {, +        invoke.add(", source");, +      } else if (bindNeedsView()) {, +        invoke.add(", source.getContext()"); // We have a view but the parent only needs context., +      } else {, +        invoke.add(", context");, +      }, +      boolean hasView = bindNeedsView() || isFinal;, +      boolean needsSourceToContext = bindNeedsTheme() && hasView;, +      if (needsSourceToContext) {, +        result.addStatement("$T context = source.getContext()", CONTEXT);, +      }]
[+++ b/butterknife-sample/pom.xml, +    <version>1.3.2</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.2</version>, +++ b/butterknife/pom.xml, +    <version>1.3.2</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.2</version>, +++ b/butterknife/pom.xml, +    <version>1.3.2</version>, +++ b/pom.xml, +  <version>1.3.2</version>, +    <tag>butterknife-parent-1.3.2</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    result.addMethod(createNewBindMethod(targetType));, +      result.addMethod(createNewBindToTargetMethod());, +      if (methodBindingsNeedFinder()) {, +        constructor.addParameter(FINDER, "finder", FINAL);, +      } else {, +      }, +  private MethodSpec createNewBindMethod(TypeName targetType) {, +  private MethodSpec createNewBindToTargetMethod() {, +    if (bindNeedsFinder()) {, +      result.addParameter(FINDER, "finder"), +          .addParameter(Object.class, "source");, +    }, +    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {, +      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";, +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());, +      if (fieldBinding.requiresCast()) {, +  private boolean methodBindingsNeedFinder() {, +    for (ViewBindings viewBindings : viewIdMap.values()) {, +      for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> entry, +          : viewBindings.getMethodBindings().entrySet()) {, +        Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = entry.getValue();, +        for (ListenerMethod method : getListenerMethods(entry.getKey())) {, +          if (methodBindings.containsKey(method)) {, +            String[] parameterTypes = method.parameters();, +            for (MethodViewBinding methodViewBinding : methodBindings.get(method)) {, +              for (Parameter parameter : methodViewBinding.getParameters()) {, +                if (parameter.requiresCast(parameterTypes[parameter.getListenerPosition()])) {, +                  return true;, +                }, +              }, +            }, +          }, +        }, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    result.addMethod(createNewBindMethod(targetType));, +      result.addMethod(createNewBindToTargetMethod());, +      if (methodBindingsNeedFinder()) {, +        constructor.addParameter(FINDER, "finder", FINAL);, +      } else {, +      }, +  private MethodSpec createNewBindMethod(TypeName targetType) {, +  private MethodSpec createNewBindToTargetMethod() {, +    if (bindNeedsFinder()) {, +      result.addParameter(FINDER, "finder"), +          .addParameter(Object.class, "source");, +    }, +    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {, +      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";, +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());, +      if (fieldBinding.requiresCast()) {, +  private boolean methodBindingsNeedFinder() {, +    for (ViewBindings viewBindings : viewIdMap.values()) {, +      for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> entry, +          : viewBindings.getMethodBindings().entrySet()) {, +        Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = entry.getValue();, +        for (ListenerMethod method : getListenerMethods(entry.getKey())) {, +          if (methodBindings.containsKey(method)) {, +            String[] parameterTypes = method.parameters();, +            for (MethodViewBinding methodViewBinding : methodBindings.get(method)) {, +              for (Parameter parameter : methodViewBinding.getParameters()) {, +                if (parameter.requiresCast(parameterTypes[parameter.getListenerPosition()])) {, +                  return true;, +                }, +              }, +            }, +          }, +        }, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;, +, +, +  public boolean requiresCast() {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    result.addMethod(createNewBindMethod(targetType));, +      result.addMethod(createNewBindToTargetMethod());, +      if (methodBindingsNeedFinder()) {, +        constructor.addParameter(FINDER, "finder", FINAL);, +      } else {, +      }, +  private MethodSpec createNewBindMethod(TypeName targetType) {, +  private MethodSpec createNewBindToTargetMethod() {, +    if (bindNeedsFinder()) {, +      result.addParameter(FINDER, "finder"), +          .addParameter(Object.class, "source");, +    }]
[+++ b/CHANGELOG.md, +Version 8.0.1 *(2016-04-27)*, +----------------------------, +, + * Fix: ProGuard rules now prevent obfuscation of only types which reference ButterKnife annotations., + * Eliminate some of the generated machinery when referenced from `final` types., +, +, +++ b/CHANGELOG.md, +Version 8.0.1 *(2016-04-27)*, +----------------------------, +, + * Fix: ProGuard rules now prevent obfuscation of only types which reference ButterKnife annotations., + * Eliminate some of the generated machinery when referenced from `final` types., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.0.1', +  apt 'com.jakewharton:butterknife-compiler:8.0.1', +++ b/CHANGELOG.md, +Version 8.0.1 *(2016-04-27)*, +----------------------------, +, + * Fix: ProGuard rules now prevent obfuscation of only types which reference ButterKnife annotations., + * Eliminate some of the generated machinery when referenced from `final` types., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.0.1', +  apt 'com.jakewharton:butterknife-compiler:8.0.1', +++ b/gradle.properties, +VERSION_NAME=8.0.1]
[+++ b/gradle.properties, +VERSION_NAME=8.0.2-SNAPSHOT]
[+++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-gradle-plugin/src/test/build.gradle, +    compileSdkVersion 28, +        sourceCompatibility = JavaVersion.VERSION_1_8, +        targetCompatibility = JavaVersion.VERSION_1_8, +    implementation "com.android.support:support-v4:28.0.0", +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-gradle-plugin/src/test/build.gradle, +    compileSdkVersion 28, +        sourceCompatibility = JavaVersion.VERSION_1_8, +        targetCompatibility = JavaVersion.VERSION_1_8, +    implementation "com.android.support:support-v4:28.0.0", +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java, +  private static final Action<View> ALPHA_FADE = (view, index) -> {, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-gradle-plugin/src/test/build.gradle, +    compileSdkVersion 28, +        sourceCompatibility = JavaVersion.VERSION_1_8, +        targetCompatibility = JavaVersion.VERSION_1_8, +    implementation "com.android.support:support-v4:28.0.0", +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java, +  private static final Action<View> ALPHA_FADE = (view, index) -> {, +++ b/butterknife-runtime/build.gradle, +  compileOptions {, +    sourceCompatibility JavaVersion.VERSION_1_8, +    targetCompatibility JavaVersion.VERSION_1_8, +  }, +, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-gradle-plugin/src/test/build.gradle, +    compileSdkVersion 28, +        sourceCompatibility = JavaVersion.VERSION_1_8, +        targetCompatibility = JavaVersion.VERSION_1_8, +    implementation "com.android.support:support-v4:28.0.0", +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java, +  private static final Action<View> ALPHA_FADE = (view, index) -> {, +++ b/butterknife-runtime/build.gradle, +  compileOptions {, +    sourceCompatibility JavaVersion.VERSION_1_8, +    targetCompatibility JavaVersion.VERSION_1_8, +  }, +, +++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java, +      (view, value, index) -> view.setEnabled(value);, +  private static final Action<View> ACTION_DISABLE = (view, index) -> view.setEnabled(false);, +  private static final Action<View> ACTION_ZERO_ALPHA = (view, index) -> view.setAlpha(0f);, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_8, +targetCompatibility = JavaVersion.VERSION_1_8, +++ b/butterknife-gradle-plugin/src/test/build.gradle, +    compileSdkVersion 28, +        sourceCompatibility = JavaVersion.VERSION_1_8, +        targetCompatibility = JavaVersion.VERSION_1_8, +    implementation "com.android.support:support-v4:28.0.0", +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java, +  private static final Action<View> ALPHA_FADE = (view, index) -> {, +++ b/butterknife-runtime/build.gradle, +  compileOptions {, +    sourceCompatibility JavaVersion.VERSION_1_8, +    targetCompatibility JavaVersion.VERSION_1_8, +  }, +, +++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java, +      (view, value, index) -> view.setEnabled(value);, +  private static final Action<View> ACTION_DISABLE = (view, index) -> view.setEnabled(false);, +  private static final Action<View> ACTION_ZERO_ALPHA = (view, index) -> view.setAlpha(0f);, +++ b/butterknife-runtime/src/main/java/butterknife/Unbinder.java, +  Unbinder EMPTY = () -> { };]
[+++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-bin.zip]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final List<FieldCollectionViewBinding> collectionBindings;, +      Collection<FieldCollectionViewBinding> collectionBindings,, +    this.collectionBindings = ImmutableList.copyOf(collectionBindings);, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        constructor.addStatement("$L", binding.render());, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        result.addStatement("target.$L = null", binding.name);, +  static boolean requiresCast(TypeName type) {, +    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();, +    void addFieldCollection(FieldCollectionViewBinding binding) {, +      collectionBindings.add(binding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final List<FieldCollectionViewBinding> collectionBindings;, +      Collection<FieldCollectionViewBinding> collectionBindings,, +    this.collectionBindings = ImmutableList.copyOf(collectionBindings);, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        constructor.addStatement("$L", binding.render());, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        result.addStatement("target.$L = null", binding.name);, +  static boolean requiresCast(TypeName type) {, +    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();, +    void addFieldCollection(FieldCollectionViewBinding binding) {, +      collectionBindings.add(binding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    builder.addField(getId(id), new FieldViewBinding(name, type, required));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL));, +    builder.addResource(new FieldResourceBinding(getId(id), name,, +            : FieldResourceBinding.Type.COLOR));, +    builder.addResource(new FieldResourceBinding(getId(id), name,, +        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));, +    builder.addResource(, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP));, +    builder.addResource(new FieldDrawableBinding(getId(id), name, getId(tint)));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT));, +    builder.addResource(, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING));, +    builder.addResource(new FieldResourceBinding(getId(id), name, type));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final List<FieldCollectionViewBinding> collectionBindings;, +      Collection<FieldCollectionViewBinding> collectionBindings,, +    this.collectionBindings = ImmutableList.copyOf(collectionBindings);, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        constructor.addStatement("$L", binding.render());, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        result.addStatement("target.$L = null", binding.name);, +  static boolean requiresCast(TypeName type) {, +    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();, +    void addFieldCollection(FieldCollectionViewBinding binding) {, +      collectionBindings.add(binding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    builder.addField(getId(id), new FieldViewBinding(name, type, required));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL));, +    builder.addResource(new FieldResourceBinding(getId(id), name,, +            : FieldResourceBinding.Type.COLOR));, +    builder.addResource(new FieldResourceBinding(getId(id), name,, +        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));, +    builder.addResource(, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP));, +    builder.addResource(new FieldDrawableBinding(getId(id), name, getId(tint)));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT));, +    builder.addResource(, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING));, +    builder.addResource(new FieldResourceBinding(getId(id), name, type));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +import com.squareup.javapoet.CodeBlock;, +import java.util.List;, +import static butterknife.compiler.BindingSet.UTILS;, +import static butterknife.compiler.BindingSet.requiresCast;, +, +final class FieldCollectionViewBinding {, +    ARRAY("arrayOf"),, +    LIST("listOf");, +, +    final String factoryName;, +, +    Kind(String factoryName) {, +      this.factoryName = factoryName;, +    }, +  final String name;, +  private final List<Id> ids;, +  FieldCollectionViewBinding(String name, TypeName type, Kind kind, List<Id> ids,, +      boolean required) {, +    this.ids = ids;, +  CodeBlock render() {, +    CodeBlock.Builder builder = CodeBlock.builder(), +        .add("target.$L = $T.$L(", name, UTILS, kind.factoryName);, +    for (int i = 0; i < ids.size(); i++) {, +      if (i > 0) {, +        builder.add(", ");, +      builder.add("\n");, +      boolean requiresCast = requiresCast(type);, +      if (!requiresCast && !required) {, +        builder.add("source.findViewById($L)", ids.get(i).code);, +      } else {, +        builder.add("$T.find", UTILS);]
[+++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + * Group multiple views in a list using `@BindViews`. Operate on all of them at once with actions,, + * Eliminate resource lookups by using resource annotations on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +, +  @BindString(R.string.login_error), +  String loginErrorMessage;, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + * Group multiple views in a list using `@BindViews`. Operate on all of them at once with actions,, + * Eliminate resource lookups by using resource annotations on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +, +  @BindString(R.string.login_error), +  String loginErrorMessage;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.BindView;, +import butterknife.BindViews;, +  @BindView(R.id.title) TextView title;, +  @BindView(R.id.subtitle) TextView subtitle;, +  @BindView(R.id.hello) Button hello;, +  @BindView(R.id.list_of_things) ListView listOfThings;, +  @BindView(R.id.footer) TextView footer;, +  @BindViews({ R.id.title, R.id.subtitle, R.id.hello }), +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + * Group multiple views in a list using `@BindViews`. Operate on all of them at once with actions,, + * Eliminate resource lookups by using resource annotations on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +, +  @BindString(R.string.login_error), +  String loginErrorMessage;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.BindView;, +import butterknife.BindViews;, +  @BindView(R.id.title) TextView title;, +  @BindView(R.id.subtitle) TextView subtitle;, +  @BindView(R.id.hello) Button hello;, +  @BindView(R.id.list_of_things) ListView listOfThings;, +  @BindView(R.id.footer) TextView footer;, +  @BindViews({ R.id.title, R.id.subtitle, R.id.hello }), +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.BindView;, +    @BindView(R.id.word) TextView word;, +    @BindView(R.id.length) TextView length;, +    @BindView(R.id.position) TextView position;, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + * Group multiple views in a list using `@BindViews`. Operate on all of them at once with actions,, + * Eliminate resource lookups by using resource annotations on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +, +  @BindString(R.string.login_error), +  String loginErrorMessage;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.BindView;, +import butterknife.BindViews;, +  @BindView(R.id.title) TextView title;, +  @BindView(R.id.subtitle) TextView subtitle;, +  @BindView(R.id.hello) Button hello;, +  @BindView(R.id.list_of_things) ListView listOfThings;, +  @BindView(R.id.footer) TextView footer;, +  @BindViews({ R.id.title, R.id.subtitle, R.id.hello }), +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.BindView;, +    @BindView(R.id.word) TextView word;, +    @BindView(R.id.length) TextView length;, +    @BindView(R.id.position) TextView position;, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +  @Test public void verifyContentViewBinding() {, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., + * Group multiple views in a list using `@BindViews`. Operate on all of them at once with actions,, + * Eliminate resource lookups by using resource annotations on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +, +  @BindString(R.string.login_error), +  String loginErrorMessage;, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.BindView;, +import butterknife.BindViews;, +  @BindView(R.id.title) TextView title;, +  @BindView(R.id.subtitle) TextView subtitle;, +  @BindView(R.id.hello) Button hello;, +  @BindView(R.id.list_of_things) ListView listOfThings;, +  @BindView(R.id.footer) TextView footer;, +  @BindViews({ R.id.title, R.id.subtitle, R.id.hello }), +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.BindView;, +    @BindView(R.id.word) TextView word;, +    @BindView(R.id.length) TextView length;, +    @BindView(R.id.position) TextView position;, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +  @Test public void verifyContentViewBinding() {]
[+++ b/butterknife-sample/pom.xml, +    <version>5.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.1</version>, +++ b/butterknife/pom.xml, +    <version>5.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.1</version>, +++ b/butterknife/pom.xml, +    <version>5.0.1</version>, +++ b/pom.xml, +  <version>5.0.1</version>, +    <tag>butterknife-parent-5.0.1</tag>]
[+++ /dev/null, +++ /dev/null, +++ b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties, +implementation-class=butterknife.plugin.ButterKnifePlugin, +++ /dev/null, +++ b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties, +implementation-class=butterknife.plugin.ButterKnifePlugin, +++ b/butterknife-sample-lib/build.gradle, +apply plugin: 'com.jakewharton.butterknife', +++ /dev/null, +++ b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties, +implementation-class=butterknife.plugin.ButterKnifePlugin, +++ b/butterknife-sample-lib/build.gradle, +apply plugin: 'com.jakewharton.butterknife', +++ b/settings.gradle, +//include ':butterknife-sample', +//include ':butterknife-sample-lib']
[+++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:10.0.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:10.0.0', +++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:10.0.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:10.0.0', +++ b/gradle.properties, +VERSION_NAME=10.0.0]
[+++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife/src/main/java/butterknife/Views.java, +  static void inject(Object target, Object source, Finder finder) {, +++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife/src/main/java/butterknife/Views.java, +  static void inject(Object target, Object source, Finder finder) {, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTestRunner.java, +package butterknife;, +, +import java.lang.reflect.Method;, +import org.junit.runners.model.InitializationError;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.shadows.ShadowApplication;, +, +public class ButterKnifeTestRunner extends RobolectricTestRunner {, +  public ButterKnifeTestRunner(Class<?> testClass) throws InitializationError {, +    super(testClass);, +  }, +, +  @Override public void setupApplicationState(Method testMethod) {, +    Robolectric.application = ShadowApplication.bind(createApplication(), null, null);, +  }, +}, +++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife/src/main/java/butterknife/Views.java, +  static void inject(Object target, Object source, Finder finder) {, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTestRunner.java, +package butterknife;, +, +import java.lang.reflect.Method;, +import org.junit.runners.model.InitializationError;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.shadows.ShadowApplication;, +, +public class ButterKnifeTestRunner extends RobolectricTestRunner {, +  public ButterKnifeTestRunner(Class<?> testClass) throws InitializationError {, +    super(testClass);, +  }, +, +  @Override public void setupApplicationState(Method testMethod) {, +    Robolectric.application = ShadowApplication.bind(createApplication(), null, null);, +  }, +}, +++ b/butterknife/src/test/java/butterknife/ViewsTest.java, +package butterknife;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +@RunWith(ButterKnifeTestRunner.class), +public class ViewsTest {, +  @Test public void zeroInjectionsDoesNotThrowException() {, +    class Example {, +    }, +, +    Example example = new Example();, +    Views.inject(example, null, null);, +  }, +}, +++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife/src/main/java/butterknife/Views.java, +  static void inject(Object target, Object source, Finder finder) {, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTestRunner.java, +package butterknife;, +, +import java.lang.reflect.Method;, +import org.junit.runners.model.InitializationError;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.shadows.ShadowApplication;, +, +public class ButterKnifeTestRunner extends RobolectricTestRunner {]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      if (e instanceof InvocationTargetException) {, +        e = (Exception) e.getCause();, +      }]
[+++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/.travis.yml, +    - build-tools-24.0.2, +++ b/build.gradle, +  buildToolsVersion = '24.0.2']
[+++ b/butterknife-sample/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife-sample/pom.xml, +    <version>2.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>2.0.0</version>, +++ b/butterknife/pom.xml, +    <version>2.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>2.0.0</version>, +++ b/butterknife/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>butterknife-parent-2.0.0</tag>]
[+++ b/build.gradle, +    // Other, +    rxjava: 'io.reactivex:rxjava:1.1.2',, +, +++ b/build.gradle, +    // Other, +    rxjava: 'io.reactivex:rxjava:1.1.2',, +, +++ /dev/null, +++ b/build.gradle, +    // Other, +    rxjava: 'io.reactivex:rxjava:1.1.2',, +, +++ /dev/null, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +, +  compile deps.rxjava, +++ b/build.gradle, +    // Other, +    rxjava: 'io.reactivex:rxjava:1.1.2',, +, +++ /dev/null, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +, +  compile deps.rxjava, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +, +import java.util.LinkedHashSet;, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +, +  private static final ClassName BUTTERKNIFE = ClassName.get("butterknife", "ButterKnife");, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");, +  public static final String UNBINDER_SIMPLE_NAME = "InnerUnbinder";, +  private final Set<BindingClass> descendantBindingClasses = new LinkedHashSet<>();, +  private final String classFqcn;, +  private BindingClass parentBinding;, +  private ClassName unbinderClassName;  // If this is null'd out, it has no unbinder and uses NOP., +  private ClassName highestUnbinderClassName; // If this is null'd out, there is no parent unbinder., +  BindingClass(String classPackage, String className, String targetClass, String classFqcn) {, +    this.classFqcn = classFqcn;, +, +    // Default to this, but this can be null'd out by the processor before we brew if it's not, +    // necessary., +    this.unbinderClassName = ClassName.get(classPackage, className, UNBINDER_SIMPLE_NAME);, +  void addDescendant(BindingClass bindingClass) {, +    descendantBindingClasses.add(bindingClass);, +  boolean addMethod(, +      int id,, +      ListenerClass listener,, +      ListenerMethod method,, +  void setParent(BindingClass parent) {, +    this.parentBinding = parent;, +    if (hasParentBinding()) {, +      result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentBinding.classFqcn),, +    if (hasUnbinder() && hasViewBindings()) {, +      createUnbinderCreateUnbinderMethod(result);, +        TypeSpec.classBuilder(unbinderClassName.simpleName()), +            .addModifiers(PROTECTED, STATIC), +    if (hasParentBinding() && parentBinding.hasUnbinder()) {, +          parentBinding.getUnbinderClassName(), generic));, +      result.addSuperinterface(UNBINDER);, +    if (!hasParentBinding() || !parentBinding.hasUnbinder()) {, +    if (hasParentBinding() && parentBinding.hasUnbinder()) {, +    if (hasParentBinding() && parentBinding.hasUnbinder()) {, +  private void addFieldAndUnbindStatement(, +      TypeSpec.Builder result,, +      MethodSpec.Builder unbindMethod,, +    // Using unique view id for name uniqueness., +    String fieldName = "view" + bindings.getUniqueIdSuffix();, +  private void createUnbinderCreateUnbinderMethod(TypeSpec.Builder viewBindingClass) {, +    // Create type variable InnerUnbinder<T>, +    TypeName returnType = ParameterizedTypeName.get(, +        unbinderClassName, TypeVariableName.get("T"));, +        .addStatement("return new $T($L)", unbinderClassName, "target");, +    if (hasParentBinding() && parentBinding.hasUnbinder()) {, +        .returns(UNBINDER), +    if (hasParentBinding()) {, +      if (hasViewBindings()) {, +        if (highestUnbinderClassName != unbinderClassName) {, +          // This has an unbinder class and there exists an unbinder class farther up, so use super, +          // and let the super implementation create it for us., +          result.addStatement("$T unbinder = ($T) super.bind(finder, target, source)",, +              unbinderClassName,, +              unbinderClassName);, +          // This has an unbinder class and there is no implementation higher up, so we'll call, +          // super but ignore the result since it's just the NOP. Instead, create the unbinder here, +          // for our implementation and any descendant classes., +          result.addStatement("super.bind(finder, target, source)");, +          result.addStatement("$T unbinder = createUnbinder(target)", unbinderClassName);, +      } else {, +        // This has no unbinder class, just defer to super (which could be NOP or real,, +        // we don't care)., +        result.addStatement("$T unbinder = super.bind(finder, target, source)", UNBINDER);, +      }, +    } else if (hasViewBindings()) {]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java, +    return sdk >= 26;, +        : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java, +    return sdk >= 26;, +        : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);, +++ b/butterknife/src/test/java/butterknife/BindFontTest.java, +        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"]
[+++ b/checkstyle.xml, +    <property name="format" value="^\s*(for|if)\b[^ ]"/>]
[+++ b/.travis.yml, +script:, +  - ./gradlew butterknife-gradle-plugin:install -Dorg.gradle.configureondemand=true &&, +    ./gradlew build connectedCheck, +, +++ b/.travis.yml, +script:, +  - ./gradlew butterknife-gradle-plugin:install -Dorg.gradle.configureondemand=true &&, +    ./gradlew build connectedCheck, +, +++ b/build.gradle, +  if (!project.name.equals('butterknife-gradle-plugin')) {, +  }, +      maven {, +        url "https://plugins.gradle.org/m2/", +      }, +      classpath 'com.android.tools.build:gradle:2.1.2', +      classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', +def androidToolsVersion = '25.1.2', +, +    androidGradle: 'com.android.tools.build:gradle:2.1.2',, +    lint: "com.android.tools.lint:lint:$androidToolsVersion",, +    lintApi: "com.android.tools.lint:lint-api:$androidToolsVersion",, +    lintChecks: "com.android.tools.lint:lint-checks:$androidToolsVersion",, +    lintTests: "com.android.tools.lint:lint-tests:$androidToolsVersion",, +    // Third Party, +    javaparser: 'com.github.javaparser:javaparser-core:2.4.0',, +, +++ b/.travis.yml, +script:, +  - ./gradlew butterknife-gradle-plugin:install -Dorg.gradle.configureondemand=true &&, +    ./gradlew build connectedCheck, +, +++ b/build.gradle, +  if (!project.name.equals('butterknife-gradle-plugin')) {, +  }, +      maven {, +        url "https://plugins.gradle.org/m2/", +      }, +      classpath 'com.android.tools.build:gradle:2.1.2', +      classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', +def androidToolsVersion = '25.1.2', +, +    androidGradle: 'com.android.tools.build:gradle:2.1.2',, +    lint: "com.android.tools.lint:lint:$androidToolsVersion",, +    lintApi: "com.android.tools.lint:lint-api:$androidToolsVersion",, +    lintChecks: "com.android.tools.lint:lint-checks:$androidToolsVersion",, +    lintTests: "com.android.tools.lint:lint-tests:$androidToolsVersion",, +    // Third Party, +    javaparser: 'com.github.javaparser:javaparser-core:2.4.0',, +, +++ b/butterknife-annotations/build.gradle, +  compileOnly deps.android, +++ b/.travis.yml, +script:, +  - ./gradlew butterknife-gradle-plugin:install -Dorg.gradle.configureondemand=true &&, +    ./gradlew build connectedCheck, +, +++ b/build.gradle, +  if (!project.name.equals('butterknife-gradle-plugin')) {, +  }, +      maven {, +        url "https://plugins.gradle.org/m2/", +      }, +      classpath 'com.android.tools.build:gradle:2.1.2', +      classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', +def androidToolsVersion = '25.1.2', +, +    androidGradle: 'com.android.tools.build:gradle:2.1.2',, +    lint: "com.android.tools.lint:lint:$androidToolsVersion",, +    lintApi: "com.android.tools.lint:lint-api:$androidToolsVersion",, +    lintChecks: "com.android.tools.lint:lint-checks:$androidToolsVersion",, +    lintTests: "com.android.tools.lint:lint-tests:$androidToolsVersion",, +    // Third Party, +    javaparser: 'com.github.javaparser:javaparser-core:2.4.0',, +, +++ b/butterknife-annotations/build.gradle, +  compileOnly deps.android, +++ b/butterknife-annotations/src/main/java/butterknife/RClass.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.TYPE;, +import static java.lang.annotation.RetentionPolicy.SOURCE;, +, +/**, + * Denote the R class to lookup symbols for generated code., + */, +@Retention(SOURCE) @Target(TYPE), +public @interface RClass {, +, +  // The R class, +  Class<?> value();, +}, +++ b/.travis.yml, +script:, +  - ./gradlew butterknife-gradle-plugin:install -Dorg.gradle.configureondemand=true &&, +    ./gradlew build connectedCheck]
[+++ b/butterknife-sample/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.4.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/.travis.yml, +  - echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$ANDROID_HOME/licenses/android-sdk-license"]
[+++ b/gradle.properties, +VERSION_NAME=8.4.1-SNAPSHOT]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +import javax.lang.model.type.TypeMirror;, +import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;, +  private final boolean isView;, +  private final boolean isActivity;, +  private final boolean isDialog;, +      boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,, +    this.isView = isView;, +    this.isActivity = isActivity;, +    this.isDialog = isDialog;, +    if (isView) {, +      result.addMethod(createBindingConstructorForView());, +    } else if (isActivity) {, +      result.addMethod(createBindingConstructorForActivity());, +    } else if (isDialog) {, +      result.addMethod(createBindingConstructorForDialog());, +    }, +  private MethodSpec createBindingConstructorForView() {, +    MethodSpec.Builder builder = MethodSpec.constructorBuilder(), +        .addAnnotation(UI_THREAD), +        .addModifiers(PUBLIC), +        .addParameter(targetTypeName, "target");, +    if (constructorNeedsView()) {, +      builder.addStatement("this(target, target)");, +    } else {, +      builder.addStatement("this(target, target.getContext())");, +    }, +    return builder.build();, +  }, +, +  private MethodSpec createBindingConstructorForActivity() {, +    MethodSpec.Builder builder = MethodSpec.constructorBuilder(), +        .addAnnotation(UI_THREAD), +        .addModifiers(PUBLIC), +        .addParameter(targetTypeName, "target");, +    if (constructorNeedsView()) {, +      builder.addStatement("this(target, target.getWindow().getDecorView())");, +    } else {, +      builder.addStatement("this(target, target)");, +    }, +    return builder.build();, +  }, +, +  private MethodSpec createBindingConstructorForDialog() {, +    MethodSpec.Builder builder = MethodSpec.constructorBuilder(), +        .addAnnotation(UI_THREAD), +        .addModifiers(PUBLIC), +        .addParameter(targetTypeName, "target");, +    if (constructorNeedsView()) {, +      builder.addStatement("this(target, target.getWindow().getDecorView())");, +    } else {, +      builder.addStatement("this(target, target.getContext())");, +    }, +    return builder.build();, +  }, +, +    TypeMirror typeMirror = enclosingElement.asType();, +, +    boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);, +    boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);, +    boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);, +, +    TypeName targetType = TypeName.get(typeMirror);, +    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);, +    private final boolean isView;, +    private final boolean isActivity;, +    private final boolean isDialog;, +    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,, +        boolean isView, boolean isActivity, boolean isDialog) {, +      this.isView = isView;, +      this.isActivity = isActivity;, +      this.isDialog = isDialog;, +      return new BindingSet(targetTypeName, bindingClassName, isFinal, isView, isActivity, isDialog,, +          viewBindings.build(), collectionBindings.build(), resourceBindings.build(),, +          parentBinding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +import javax.lang.model.type.TypeMirror;, +import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;, +  private final boolean isView;, +  private final boolean isActivity;, +  private final boolean isDialog;, +      boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,, +    this.isView = isView;, +    this.isActivity = isActivity;, +    this.isDialog = isDialog;, +    if (isView) {, +      result.addMethod(createBindingConstructorForView());, +    } else if (isActivity) {, +      result.addMethod(createBindingConstructorForActivity());, +    } else if (isDialog) {, +      result.addMethod(createBindingConstructorForDialog());, +    }, +  private MethodSpec createBindingConstructorForView() {, +    MethodSpec.Builder builder = MethodSpec.constructorBuilder(), +        .addAnnotation(UI_THREAD), +        .addModifiers(PUBLIC)]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnFocusChange, + * @see OnItemSelected, + * @see OnPageChange, + * @see OnTextChanged, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnFocusChange, + * @see OnItemSelected, + * @see OnPageChange, + * @see OnTextChanged, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +import butterknife.internal.ListenerMethod;, + * unchecked. Corresponds to adding an {@link OnCheckedChangeListener OnCheckedChangeListener} to, + * the views specified., + * Any number of parameters from, + * {@link OnCheckedChangeListener#onCheckedChanged(android.widget.CompoundButton, boolean), + * onCheckedChanged} may be used on the method., +@Target(METHOD), +@Retention(CLASS), +    callbacks = OnCheckedChanged.Callback.class, +), +public @interface OnCheckedChanged {, +  int[] value();, +  Callback callback() default Callback.CHECKED_CHANGED;, +, +  enum Callback {, +    @ListenerMethod(, +    CHECKED_CHANGED, +  }, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnFocusChange, + * @see OnItemSelected, + * @see OnPageChange, + * @see OnTextChanged, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +import butterknife.internal.ListenerMethod;, + * unchecked. Corresponds to adding an {@link OnCheckedChangeListener OnCheckedChangeListener} to, + * the views specified., + * Any number of parameters from, + * {@link OnCheckedChangeListener#onCheckedChanged(android.widget.CompoundButton, boolean), + * onCheckedChanged} may be used on the method., +@Target(METHOD), +@Retention(CLASS), +    callbacks = OnCheckedChanged.Callback.class, +), +public @interface OnCheckedChanged {, +  int[] value();, +  Callback callback() default Callback.CHECKED_CHANGED;, +, +  enum Callback {, +    @ListenerMethod(, +    CHECKED_CHANGED, +  }, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import butterknife.internal.ListenerMethod;, + * Corresponds to adding an {@link OnClickListener OnClickListener} to the views specified., + * Any number of parameters from, + * {@link OnClickListener#onClick(android.view.View) onClick} may be used on the, + * method., +@Target(METHOD), +@Retention(CLASS), +    callbacks = OnClick.Callback.class, +  Callback callback() default Callback.CLICK;, +, +  enum Callback {, +    @ListenerMethod(, +        name = "onClick",, +        parameters = "android.view.View", +    ), +    CLICK, +  }, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnFocusChange, + * @see OnItemSelected, + * @see OnPageChange, + * @see OnTextChanged, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +import butterknife.internal.ListenerMethod;, + * unchecked. Corresponds to adding an {@link OnCheckedChangeListener OnCheckedChangeListener} to, + * the views specified., + * Any number of parameters from, + * {@link OnCheckedChangeListener#onCheckedChanged(android.widget.CompoundButton, boolean), + * onCheckedChanged} may be used on the method., +@Target(METHOD), +@Retention(CLASS), +    callbacks = OnCheckedChanged.Callback.class, +), +public @interface OnCheckedChanged {, +  int[] value();, +  Callback callback() default Callback.CHECKED_CHANGED;, +, +  enum Callback {, +    @ListenerMethod(, +    CHECKED_CHANGED, +  }, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import butterknife.internal.ListenerMethod;, + * Corresponds to adding an {@link OnClickListener OnClickListener} to the views specified., + * Any number of parameters from, + * {@link OnClickListener#onClick(android.view.View) onClick} may be used on the]
[+++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.1.3', +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Sep 02 22:21:42 PDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/RELEASING.md, + 11. Update the two sample modules to point to the newly released version., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +            applyPlugin(featureVariants), +            applyPlugin(libraryVariants), +        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), +        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), +  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, +        // TODO proper task registered as source-generating?, +        processResources.doLast {, +          val pathToR = processResources.packageForR.replace('.', File.separatorChar), +          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, +              processResources.packageForR, "R2"), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +            applyPlugin(featureVariants), +            applyPlugin(libraryVariants), +        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), +        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), +  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, +        // TODO proper task registered as source-generating?, +        processResources.doLast {, +          val pathToR = processResources.packageForR.replace('.', File.separatorChar), +          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, +              processResources.packageForR, "R2"), +++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/butterknife-sample/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife-sample/pom.xml, +    <version>4.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>4.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>4.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>4.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>4.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>4.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>method-cannot-have-dupliate-ids</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>method-cannot-have-dupliate-ids</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/src/main/java/test/Test.java, +package test;, +, +import android.app.Activity;]
[+++ b/butterknife-annotations/build.gradle, +, +apply from: rootProject.file('gradle/gradle-mvn-push.gradle'), +++ b/butterknife-annotations/build.gradle, +, +apply from: rootProject.file('gradle/gradle-mvn-push.gradle'), +++ b/butterknife-annotations/gradle.properties, +POM_NAME=Butterknife Annotations, +POM_ARTIFACT_ID=butterknife-annotations, +POM_PACKAGING=jar]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  BindingClass(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {, +  JavaFile brewJava() {, +    return JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +    if (!bindNeedsView()) {, +      // Add a delegating constructor with a target type + view signature for reflective use., +      result.addMethod(createBindingViewDelegateConstructor(targetType));, +    }, +, +  private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {, +    return MethodSpec.constructorBuilder(), +        .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    ", +                + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",, +            bindingClassName, targetType, CONTEXT), +        .addAnnotation(Deprecated.class), +        .addModifiers(PUBLIC), +        .addParameter(targetType, "target"), +        .addParameter(VIEW, "source"), +        .addStatement(("this(target, source.getContext())")), +        .build();, +  }, +, +    return bindingClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  BindingClass(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {, +  JavaFile brewJava() {, +    return JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +    if (!bindNeedsView()) {, +      // Add a delegating constructor with a target type + view signature for reflective use., +      result.addMethod(createBindingViewDelegateConstructor(targetType));, +    }, +, +  private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {, +    return MethodSpec.constructorBuilder(), +        .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    ", +                + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",, +            bindingClassName, targetType, CONTEXT), +        .addAnnotation(Deprecated.class), +        .addModifiers(PUBLIC), +        .addParameter(targetType, "target"), +        .addParameter(VIEW, "source"), +        .addStatement(("this(target, source.getContext())")), +        .build();, +  }, +, +    return bindingClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      JavaFile javaFile = bindingClass.brewJava();, +        error(typeElement, "Unable to write binding for type %s: %s", typeElement, e.getMessage());, +      bindingClass = new BindingClass(targetType, bindingClassName, isFinal);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  BindingClass(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {, +  JavaFile brewJava() {, +    return JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +    if (!bindNeedsView()) {, +      // Add a delegating constructor with a target type + view signature for reflective use., +      result.addMethod(createBindingViewDelegateConstructor(targetType));, +    }, +, +  private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {, +    return MethodSpec.constructorBuilder(), +        .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    ", +                + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",, +            bindingClassName, targetType, CONTEXT), +        .addAnnotation(Deprecated.class), +        .addModifiers(PUBLIC), +        .addParameter(targetType, "target"), +        .addParameter(VIEW, "source"), +        .addStatement(("this(target, source.getContext())")), +        .build();, +  }, +, +    return bindingClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      JavaFile javaFile = bindingClass.brewJava();, +        error(typeElement, "Unable to write binding for type %s: %s", typeElement, e.getMessage());, +      bindingClass = new BindingClass(targetType, bindingClassName, isFinal);, +++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java, +        + "import android.view.View;\n", +        + "import java.lang.Deprecated;\n", +        + "  /**\n", +        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n", +        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n", +        + "   */\n", +        + "  @Deprecated\n", +        + "  public Test_ViewBinding(T target, View source) {\n", +        + "    this(target, source.getContext());\n", +        + "  }\n", +        .generatesSources(bindingSource);, +        + "import android.view.View;\n", +        + "import java.lang.Deprecated;\n", +        + "  /**\n", +        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n", +        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n", +        + "   */\n", +        + "  @Deprecated\n", +        + "  public Test_ViewBinding(T target, View source) {\n"]
[+++ b/butterknife-sample/pom.xml, +    <version>7.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>7.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>7.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>7.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>7.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>7.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +, +  String typeAndroidX() default "";, +, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +, +  String typeAndroidX() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable, useAndroidX);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);, +      ViewBinding bindings, boolean useAndroidX) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));, +      String targetType = getTargetType(listenerClass, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),, +  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {, +    String type = listenerClass.type();, +    String typeAndroidX = listenerClass.typeAndroidX();, +    if (useAndroidX && !typeAndroidX.isEmpty()) {, +      type = typeAndroidX;, +    }, +    return type;, +  }, +, +  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {, +    String targetType = listenerClass.targetType();, +    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();, +    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {, +      targetType = targetTypeAndroidX;, +    }, +    return targetType;, +  }, +, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,, +      boolean useAndroidX) {, +    addMethodBindings(result, binding, debuggable, useAndroidX);, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,, +      boolean useAndroidX) {, +          .superclass(ClassName.bestGuess(getType(listener, useAndroidX)));, +        TypeName listenerClassName = bestGuess(getType(listener, useAndroidX));, +      String targetType = getTargetType(listener, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,, +++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +, +  String typeAndroidX() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable, useAndroidX);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);, +      ViewBinding bindings, boolean useAndroidX) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));, +      String targetType = getTargetType(listenerClass, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),, +  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {, +    String type = listenerClass.type();, +    String typeAndroidX = listenerClass.typeAndroidX();, +    if (useAndroidX && !typeAndroidX.isEmpty()) {, +      type = typeAndroidX;, +    }, +    return type;, +  }, +, +  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {, +    String targetType = listenerClass.targetType();, +    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();, +    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {, +      targetType = targetTypeAndroidX;]
[+++ b/butterknife-sample/pom.xml, +    <version>5.1.2</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.2</version>, +++ b/butterknife/pom.xml, +    <version>5.1.2</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.2</version>, +++ b/butterknife/pom.xml, +    <version>5.1.2</version>, +++ b/pom.xml, +  <version>5.1.2</version>, +    <tag>butterknife-parent-5.1.2</tag>]
[+++ b/butterknife/proguard-rules.txt, +# Retain generated class which implement ViewBinder., +, +# Prevent obfuscation of types which use ButterKnife annotations since the simple name, +# is used to reflectively look up the generated ViewBinder., +-keepclasseswithmembernames class * { @butterknife.* *; }]
[+++ b/build.gradle, +def androidToolsVersion = '25.2.0', +++ b/build.gradle, +def androidToolsVersion = '25.2.0', +++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java, +import com.android.tools.lint.detector.api.LintUtils;, +import com.intellij.psi.JavaElementVisitor;, +import com.intellij.psi.JavaRecursiveElementVisitor;, +import com.intellij.psi.PsiAnnotation;, +import com.intellij.psi.PsiClass;, +import com.intellij.psi.PsiElement;, +import com.intellij.psi.PsiExpression;, +import com.intellij.psi.PsiReferenceExpression;, +, +import java.util.Collections;, +import java.util.List;, +public class InvalidR2UsageDetector extends Detector implements Detector.JavaPsiScanner {, +  @Override public List<Class<? extends PsiElement>> getApplicablePsiTypes() {, +    return Collections.<Class<? extends PsiElement>>singletonList(PsiClass.class);, +  @Override public JavaElementVisitor createPsiVisitor(final JavaContext context) {, +    return new JavaElementVisitor() {, +      @Override public void visitClass(PsiClass node) {, +        node.accept(new R2UsageVisitor(context));, +  private static class R2UsageVisitor extends JavaRecursiveElementVisitor {, +    private final JavaContext context;, +    R2UsageVisitor(JavaContext context) {, +      this.context = context;, +    @Override public void visitAnnotation(PsiAnnotation annotation) {, +      // skip annotations, +    }, +, +    @Override public void visitReferenceExpression(PsiReferenceExpression expression) {, +      detectR2(context, expression);, +      super.visitReferenceExpression(expression);, +    }, +, +    private static void detectR2(JavaContext context, PsiElement node) {, +      PsiClass[] classes = context.getJavaFile().getClasses();, +      if (classes.length > 0 && classes[0].getName() != null) {, +        String qualifiedName = classes[0].getName();, +        if (qualifiedName.contains("_ViewBinder") || qualifiedName.contains("_ViewBinding"), +            || qualifiedName.equals(R2)) {, +          // skip generated files and R2, +          return;, +        }, +      }, +      boolean isR2 = isR2Expression(node);, +      if (isR2 && !context.isSuppressedWithComment(node, ISSUE)) {, +        context.report(ISSUE, node, context.getLocation(node), LINT_ERROR_BODY);, +      }, +    }, +, +    private static boolean isR2Expression(PsiElement node) {, +      if (node.getParent() == null) {, +        return false;, +      }, +      String text = node.getText();, +      PsiElement parent = LintUtils.skipParentheses(node.getParent());, +      return (text.equals(R2) || text.contains(".R2")), +          && parent instanceof PsiExpression, +          && endsWithAny(parent.getText(), SUPPORTED_TYPES);, +    }, +, +    private static boolean endsWithAny(String text, Set<String> possibleValues) {, +      String[] tokens = text.split("\\.");, +      return tokens.length > 1 && possibleValues.contains(tokens[tokens.length - 1]);, +    }, +++ b/build.gradle, +def androidToolsVersion = '25.2.0', +++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java, +import com.android.tools.lint.detector.api.LintUtils;, +import com.intellij.psi.JavaElementVisitor;, +import com.intellij.psi.JavaRecursiveElementVisitor;, +import com.intellij.psi.PsiAnnotation;, +import com.intellij.psi.PsiClass;, +import com.intellij.psi.PsiElement;, +import com.intellij.psi.PsiExpression;, +import com.intellij.psi.PsiReferenceExpression;, +, +import java.util.Collections;, +import java.util.List;, +public class InvalidR2UsageDetector extends Detector implements Detector.JavaPsiScanner {, +  @Override public List<Class<? extends PsiElement>> getApplicablePsiTypes() {, +    return Collections.<Class<? extends PsiElement>>singletonList(PsiClass.class);, +  @Override public JavaElementVisitor createPsiVisitor(final JavaContext context) {, +    return new JavaElementVisitor() {, +      @Override public void visitClass(PsiClass node) {, +        node.accept(new R2UsageVisitor(context));, +  private static class R2UsageVisitor extends JavaRecursiveElementVisitor {, +    private final JavaContext context;, +    R2UsageVisitor(JavaContext context) {, +      this.context = context;, +    @Override public void visitAnnotation(PsiAnnotation annotation) {, +      // skip annotations, +    }, +, +    @Override public void visitReferenceExpression(PsiReferenceExpression expression) {, +      detectR2(context, expression);, +      super.visitReferenceExpression(expression);, +    }]
[+++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +import butterknife.compiler.ButterKnifeProcessor;, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +import butterknife.compiler.ButterKnifeProcessor;, +++ b/butterknife-sample/build.gradle, +    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +    targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +import butterknife.compiler.ButterKnifeProcessor;, +++ b/butterknife-sample/build.gradle, +    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +    targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +import butterknife.compiler.ButterKnifeProcessor;, +++ b/butterknife-sample/build.gradle, +    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +    targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri May 20 21:08:42 PDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-all.zip, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +import butterknife.compiler.ButterKnifeProcessor;, +++ b/butterknife-sample/build.gradle, +    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +    targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri May 20 21:08:42 PDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-all.zip, +++ b/gradlew, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, +    ls=`ls -ld "$PRG"`, +    link=`expr "$ls" : '.*-> \(.*\)$'`, +    if expr "$link" : '/.*' > /dev/null; then, +        PRG="$link", +    else, +        PRG=`dirname "$PRG"`"/$link", +    fi, +done, +SAVED="`pwd`", +cd "`dirname \"$PRG\"`/" >/dev/null, +APP_HOME="`pwd -P`", +cd "$SAVED" >/dev/null, +# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +DEFAULT_JVM_OPTS="", +, +nonstop=false, +  NONSTOP* ), +    nonstop=true, +    ;;, +if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then, +    JAVACMD=`cygpath --unix "$JAVACMD"`, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +        int tintAttributeId = binding.getTintAttributeId().value;, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId);, +              UTILS, binding.getId().code);, +              UTILS, binding.getMethod(), binding.getId().code);, +              binding.getId().code);, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +        int tintAttributeId = binding.getTintAttributeId().value;, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId);, +              UTILS, binding.getId().code);, +              UTILS, binding.getMethod(), binding.getId().code);, +              binding.getId().code);, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.value) {, +            ClassName rClassName = ClassName.get(packageName, "R", className);, +            VarScanner scanner = new VarScanner(ids, rClassName);, +    private final ClassName className;, +    private VarScanner(Map<Integer, Id> ids, ClassName className) {, +        String resourceName = jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, className, resourceName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +        int tintAttributeId = binding.getTintAttributeId().value;, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId);, +              UTILS, binding.getId().code);, +              UTILS, binding.getMethod(), binding.getId().code);, +              binding.getId().code);, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.value) {, +            ClassName rClassName = ClassName.get(packageName, "R", className);, +            VarScanner scanner = new VarScanner(ids, rClassName);, +    private final ClassName className;, +    private VarScanner(Map<Integer, Id> ids, ClassName className) {, +        String resourceName = jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, className, resourceName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +, +  final int value;, +  final CodeBlock code;, +  Id(int value) {, +    this.value = value;, +    this.code = CodeBlock.of("$L", value);, +  Id(int value, ClassName className, String resourceName) {, +    this.value = value;, +    this.code = CodeBlock.of("$T.$N", className, resourceName);, +    return o instanceof Id && value == ((Id) o).value;, +    return value;, +    return String.valueOf(value);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +        int tintAttributeId = binding.getTintAttributeId().value;, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId);, +              UTILS, binding.getId().code);, +              UTILS, binding.getMethod(), binding.getId().code);, +              binding.getId().code);, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.value) {, +            ClassName rClassName = ClassName.get(packageName, "R", className);, +            VarScanner scanner = new VarScanner(ids, rClassName);, +    private final ClassName className;, +    private VarScanner(Map<Integer, Id> ids, ClassName className) {, +        String resourceName = jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, className, resourceName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +, +  final int value;, +  final CodeBlock code;, +  Id(int value) {, +    this.value = value;, +    this.code = CodeBlock.of("$L", value);, +  Id(int value, ClassName className, String resourceName) {, +    this.value = value;, +    this.code = CodeBlock.of("$T.$N", className, resourceName);, +    return o instanceof Id && value == ((Id) o).value;, +    return value;, +    return String.valueOf(value);, +++ b/butterknife-compiler/src/test/java/butterknife/RClassTest.java, +        + "    target.one = res.getInteger(R.integer.res);\n", +        + "    target.bool = res.getBoolean(R.bool.res);\n"]
[+++ b/butterknife-sample/pom.xml, +    <version>7.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>7.0.0</version>, +++ b/butterknife/pom.xml, +    <version>7.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>7.0.0</version>, +++ b/butterknife/pom.xml, +    <version>7.0.0</version>, +++ b/pom.xml, +  <version>7.0.0</version>, +    <tag>butterknife-parent-7.0.0</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    return bind(target, sourceView);, +    return bind(target, target);, +    return bind(target, sourceView);, +    return bind(target, sourceView);, +    return bind(target, sourceView);, +  /**, +   * BindView annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link View} as the view root., +   *, +   * @param target Target class for view binding., +   * @param source View root on which IDs will be looked up., +   */, +  @NonNull @UiThread, +  public static Unbinder bind(@NonNull Object target, @NonNull View source) {]
[+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +    trySet(field, target, view);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +          tryInvoke(method, target);, +          tryInvoke(method, target, v);, +          returnValue = tryInvoke(method, target);, +          returnValue = tryInvoke(method, target, v);, +  static void trySet(Field field, Object target, @Nullable Object value) {, +  private static Object tryInvoke(Method method, Object target, Object... arguments) {, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +    trySet(field, target, view);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +    trySet(field, target, value);, +          tryInvoke(method, target);, +          tryInvoke(method, target, v);, +          returnValue = tryInvoke(method, target);, +          returnValue = tryInvoke(method, target, v);, +  static void trySet(Field field, Object target, @Nullable Object value) {, +  private static Object tryInvoke(Method method, Object target, Object... arguments) {, +++ b/butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java, +import static butterknife.ButterKnife.trySet;, +    trySet(field, target, null);]
[+++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/one-find-per-id/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/one-find-per-id/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/superclass/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/one-find-per-id/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/superclass/pom.xml, +      <version>2.1</version>, +++ /dev/null, +++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/one-find-per-id/pom.xml, +      <version>2.1</version>, +++ b/butterknife/src/it/superclass/pom.xml, +      <version>2.1</version>, +++ /dev/null, +++ b/butterknife/src/it/superclass/src/test/java/butterknife/SuperclassTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE)]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import java.util.Arrays;, +      int end = 0;, +      for (int i = 0; i < views.length; i++) {, +        T view = views[i];, +          views[end++] = view;, +      return Arrays.copyOfRange(views, 0, end);]
[+++ b/butterknife-sample/pom.xml, +    <version>5.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.0</version>, +++ b/butterknife/pom.xml, +    <version>5.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.0</version>, +++ b/butterknife/pom.xml, +    <version>5.0.0</version>, +++ b/pom.xml, +  <version>5.0.0</version>, +    <tag>butterknife-parent-5.0.0</tag>]
[+++ b/butterknife-sample/pom.xml, +    <version>1.1.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.1.1</version>, +++ b/butterknife/pom.xml, +    <version>1.1.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.1.1</version>, +++ b/butterknife/pom.xml, +    <version>1.1.1</version>, +++ b/pom.xml, +  <version>1.1.1</version>, +    <tag>butterknife-parent-1.1.1</tag>]
[+++ b/build.gradle, +      'compileSdk': 27,, +      'supportLibrary': '27.0.2',, +      'androidPlugin': '3.0.1',, +      'androidTools': '26.0.1',, +      'kotlin': '1.2.10',, +      javaparser: 'com.github.javaparser:javaparser-core:3.5.7',, +      truth: 'com.google.truth:truth:0.37',, +      robolectric: 'org.robolectric:robolectric:3.6.1',, +      compiletesting: 'com.google.testing.compile:compile-testing:0.15',, +          'service': 'com.google.auto.service:auto-service:1.0-rc4',, +          'common': 'com.google.auto:auto-common:0.9',, +      'guava': 'com.google.guava:guava:23.6-jre',, +++ b/build.gradle, +      'compileSdk': 27,, +      'supportLibrary': '27.0.2',, +      'androidPlugin': '3.0.1',, +      'androidTools': '26.0.1',, +      'kotlin': '1.2.10',, +      javaparser: 'com.github.javaparser:javaparser-core:3.5.7',, +      truth: 'com.google.truth:truth:0.37',, +      robolectric: 'org.robolectric:robolectric:3.6.1',, +      compiletesting: 'com.google.testing.compile:compile-testing:0.15',, +          'service': 'com.google.auto.service:auto-service:1.0-rc4',, +          'common': 'com.google.auto:auto-common:0.9',, +      'guava': 'com.google.guava:guava:23.6-jre',, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +      'compileSdk': 27,, +      'supportLibrary': '27.0.2',, +      'androidPlugin': '3.0.1',, +      'androidTools': '26.0.1',, +      'kotlin': '1.2.10',, +      javaparser: 'com.github.javaparser:javaparser-core:3.5.7',, +      truth: 'com.google.truth:truth:0.37',, +      robolectric: 'org.robolectric:robolectric:3.6.1',, +      compiletesting: 'com.google.testing.compile:compile-testing:0.15',, +          'service': 'com.google.auto.service:auto-service:1.0-rc4',, +          'common': 'com.google.auto:auto-common:0.9',, +      'guava': 'com.google.guava:guava:23.6-jre',, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.4.1-all.zip]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +package butterknife.compiler;, +, +import android.content.res.Resources;, +import android.graphics.BitmapFactory;, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.TypeVariableName;, +import com.squareup.javapoet.WildcardTypeName;, +import java.lang.reflect.Field;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;, +import static java.util.Collections.singletonList;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PUBLIC;, +, +final class BindingClass {, +  private static final ClassName FINDER = ClassName.get("butterknife.internal", "Finder");, +  private static final ClassName VIEW_BINDER = ClassName.get("butterknife.internal", "ViewBinder");, +  private static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  private static final ClassName VIEW = ClassName.get("android.view", "View");, +  private static final ClassName BUTTERKNIFE_TOOLS =, +      ClassName.get("butterknife.internal", "ButterKnifeTools");, +  private static final int NO_ID = -1;, +, +  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, +  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();, +  private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();, +  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();, +  private final String classPackage;, +  private final String className;, +  private final String targetClass;, +  private String parentViewBinder;, +, +  BindingClass(String classPackage, String className, String targetClass) {, +    this.classPackage = classPackage;, +    this.className = className;, +    this.targetClass = targetClass;, +  }, +, +  void addBitmap(FieldBitmapBinding binding) {, +    bitmapBindings.add(binding);, +  }, +, +  void addDrawable(FieldDrawableBinding binding) {, +    drawableBindings.add(binding);, +  }, +, +  void addField(int id, FieldViewBinding binding) {, +    getOrCreateViewBindings(id).addFieldBinding(binding);, +  }, +, +  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {, +    collectionBindings.put(binding, ids);, +  }, +, +  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,, +      MethodViewBinding binding) {, +    ViewBindings viewBindings = getOrCreateViewBindings(id);, +    if (viewBindings.hasMethodBinding(listener, method), +        && !"void".equals(method.returnType())) {, +      return false;, +    }, +    viewBindings.addMethodBinding(listener, method, binding);, +    return true;, +  }, +, +  void addResource(FieldResourceBinding binding) {, +    resourceBindings.add(binding);, +  }, +, +  void setParentViewBinder(String parentViewBinder) {, +    this.parentViewBinder = parentViewBinder;, +  }, +, +  ViewBindings getViewBinding(int id) {, +    return viewIdMap.get(id);, +  }, +, +  private ViewBindings getOrCreateViewBindings(int id) {, +    ViewBindings viewId = viewIdMap.get(id);, +    if (viewId == null) {, +      viewId = new ViewBindings(id);, +      viewIdMap.put(id, viewId);]
[+++ b/CHANGELOG.md, +Version 4.0.0 *(In Development)*, +--------------------------------, +, +`Views` class is now named `ButterKnife`, +, + * New: Views are now only checked to be `null` once if at least one of the fields and/or methods, +   lack the `@Optional` annotation., + * Fix: Do no emit redundant casts to `View` for methods., +, +, +++ b/CHANGELOG.md, +Version 4.0.0 *(In Development)*, +--------------------------------, +, +`Views` class is now named `ButterKnife`, +, + * New: Views are now only checked to be `null` once if at least one of the fields and/or methods, +   lack the `@Optional` annotation., + * Fix: Do no emit redundant casts to `View` for methods., +, +, +++ b/butterknife-sample/pom.xml, +    <version>4.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 4.0.0 *(In Development)*, +--------------------------------, +, +`Views` class is now named `ButterKnife`, +, + * New: Views are now only checked to be `null` once if at least one of the fields and/or methods, +   lack the `@Optional` annotation., + * Fix: Do no emit redundant casts to `View` for methods., +, +, +++ b/butterknife-sample/pom.xml, +    <version>4.0.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>4.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 4.0.0 *(In Development)*, +--------------------------------, +, +`Views` class is now named `ButterKnife`, +, + * New: Views are now only checked to be `null` once if at least one of the fields and/or methods, +   lack the `@Optional` annotation., + * Fix: Do no emit redundant casts to `View` for methods., +, +, +++ b/butterknife-sample/pom.xml, +    <version>4.0.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>4.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>4.0.0-SNAPSHOT</version>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +            + " was not found. If this view is optional add '@Optional' annotation.");]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, +      } else {, +        builder.add("finder.findOptionalView(source, $L)", ids[i]);, +      }, +      result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, +      if (requiresCast(fieldBinding.getType())) {, +  private static boolean requiresCast(TypeName type) {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, +      } else {, +        builder.add("finder.findOptionalView(source, $L)", ids[i]);, +      }, +      result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, +      if (requiresCast(fieldBinding.getType())) {, +  private static boolean requiresCast(TypeName type) {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, +      } else {, +        builder.add("finder.findOptionalView(source, $L)", ids[i]);, +      }, +      result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, +      if (requiresCast(fieldBinding.getType())) {, +  private static boolean requiresCast(TypeName type) {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "      view = finder.findOptionalView(source, 1);\n", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, +      } else {, +        builder.add("finder.findOptionalView(source, $L)", ids[i]);, +      }, +      result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, +      if (requiresCast(fieldBinding.getType())) {, +  private static boolean requiresCast(TypeName type) {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "      view = finder.findOptionalView(source, 1);\n", +++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java, +        + "          finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 2, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 3, \"field 'thing'\"));\n", +        + "          finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 2, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 3, \"field 'thing'\"));\n", +        + "          (TextView) finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          (TextView) finder.findRequiredView(source, 2, \"field 'thing'\"), \n", +        + "          (TextView) finder.findRequiredView(source, 3, \"field 'thing'\"));\n", +        + "          finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 2, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 3, \"field 'thing'\"));\n", +        + "          (Test.TestInterface) finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          (Test.TestInterface) finder.findRequiredView(source, 2, \"field 'thing'\"), \n", +        + "          (Test.TestInterface) finder.findRequiredView(source, 3, \"field 'thing'\"));\n", +        + "          finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 2, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 3, \"field 'thing'\"));\n", +        + "          finder.findOptionalView(source, 1), \n", +        + "          finder.findOptionalView(source, 2), \n", +        + "          finder.findOptionalView(source, 3));\n", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],]
[+++ b/.travis.yml]
[+++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +]
[+++ b/butterknife-integration-test/build.gradle, +  androidTestCodegenAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/build.gradle, +  androidTestCodegenAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java, +package com.example.butterknife.functional;, +, +import android.content.Context;, +import android.support.test.InstrumentationRegistry;, +import android.view.View;, +import android.view.ViewGroup;, +import android.widget.Button;, +import android.widget.FrameLayout;, +import android.widget.TextView;, +import butterknife.ButterKnife;, +import butterknife.OnClick;, +import butterknife.Optional;, +import butterknife.Unbinder;, +import com.example.butterknife.BuildConfig;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assume.assumeFalse;, +, +@SuppressWarnings("unused") // Used reflectively / by code gen., +public final class OnClickTest {, +  static final class Simple {, +    int clicks = 0;, +, +    @OnClick(1) void click() {, +      clicks++;, +    }, +  }, +, +  @Test public void simple() {, +    View tree = treeWithIds(1);, +    View view1 = tree.findViewById(1);, +, +    Simple target = new Simple();, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertEquals(0, target.clicks);, +, +    view1.performClick();, +    assertEquals(1, target.clicks);, +, +    unbinder.unbind();, +    view1.performClick();, +    assertEquals(1, target.clicks);, +  }, +, +  static final class MultipleBindings {, +    int clicks = 0;, +, +    @OnClick(1) void click1() {, +      clicks++;, +    }, +, +    @OnClick(1) void clicks2() {, +      clicks++;, +    }, +  }, +, +  @Test public void multipleBindings() {, +    assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO, +, +    View tree = treeWithIds(1);, +    View view1 = tree.findViewById(1);, +, +    MultipleBindings target = new MultipleBindings();, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertEquals(0, target.clicks);, +, +    view1.performClick();, +    assertEquals(2, target.clicks);, +, +    unbinder.unbind();, +    view1.performClick();, +    assertEquals(2, target.clicks);, +  }, +, +  static final class Visibilities {, +    int clicks = 0;, +, +    @OnClick(1) public void publicClick() {, +      clicks++;, +    }, +, +    @OnClick(2) void packageClick() {, +      clicks++;, +    }, +, +    @OnClick(3) protected void protectedClick() {, +      clicks++;, +    }, +  }, +, +  @Test public void visibilities() {, +    View tree = treeWithIds(1, 2, 3);, +    View view1 = tree.findViewById(1);]
[+++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java, +import java.util.Arrays;, +    return end == length, +        ? views, +        : Arrays.copyOfRange(views, 0, end);, +++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java, +import java.util.Arrays;, +    return end == length, +        ? views, +        : Arrays.copyOfRange(views, 0, end);, +++ b/butterknife-runtime/src/test/java/butterknife/UtilsTest.java, +    assertThat(listFilteringNull("One", "Two", "Three")).containsExactly("One", "Two", "Three");, +  @Test public void arrayFilteringNullRemovesNulls() {, +  @Test public void arrayFilteringNullReturnsOriginalWhenNoNulls() {, +    String[] input = { "One", "Two", "Three" };, +    String[] actual = arrayFilteringNull(input);, +    assertThat(actual).isSameAs(input);, +    // Even though we got the same reference back check to ensure its contents weren't mutated., +    assertThat(actual).asList().containsExactly("One", "Two", "Three");, +  }, +]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnTouch, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnTouch, +++ b/butterknife/src/main/java/butterknife/OnTouch.java, +package butterknife;, +, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static android.view.View.OnTouchListener;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified., + * <pre><code>, + * {@literal @}OnTouch(R.id.example) void onTouch() {, + *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();, + * }, + * </code></pre>, + * Any number of parameters from, + * {@link OnTouchListener#onTouch(android.view.View, android.view.MotionEvent) onTouch} may be used, + * on the method., + *, + * @see OnTouchListener, + * @see Optional, + */, +@Target(METHOD), +@Retention(CLASS), +@ListenerClass(, +    targetType = "android.view.View",, +    setter = "setOnTouchListener",, +    type = "android.view.View.OnTouchListener",, +    method = @ListenerMethod(, +        name = "onTouch",, +        parameters = {, +            "android.view.View",, +            "android.view.MotionEvent", +        },, +        returnType = "boolean",, +        defaultReturn = "false", +    ), +), +public @interface OnTouch {, +  /** View IDs to which the method will be bound. */, +  int[] value();, +}, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnTouch, +++ b/butterknife/src/main/java/butterknife/OnTouch.java, +package butterknife;, +, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static android.view.View.OnTouchListener;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified., + * <pre><code>, + * {@literal @}OnTouch(R.id.example) void onTouch() {, + *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();, + * }, + * </code></pre>, + * Any number of parameters from, + * {@link OnTouchListener#onTouch(android.view.View, android.view.MotionEvent) onTouch} may be used, + * on the method., + *, + * @see OnTouchListener, + * @see Optional, + */, +@Target(METHOD), +@Retention(CLASS), +@ListenerClass(, +    targetType = "android.view.View",, +    setter = "setOnTouchListener",, +    type = "android.view.View.OnTouchListener",, +    method = @ListenerMethod(, +        name = "onTouch",, +        parameters = {, +            "android.view.View",, +            "android.view.MotionEvent", +        },, +        returnType = "boolean",, +        defaultReturn = "false", +    ), +), +public @interface OnTouch {, +  /** View IDs to which the method will be bound. */, +  int[] value();, +}, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import butterknife.OnTouch;]
[+++ b/.travis.yml, +language: android, +android:, +  components:, +    - build-tools-20.0.0, +    - android-16, +  licenses:, +    - android-sdk-license-5be876d5, +branches:, +  except:, +    - gh-pages]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        boolean hasReturnValue = false;, +        Set<MethodViewBinding> methodViewBindings = methodBindings.get(method);, +        if (methodViewBindings != null) {, +          for (MethodViewBinding methodBinding : methodViewBindings) {, +            if (methodBinding.hasReturnValue()) {, +              hasReturnValue = true;, +              builder.add("return "); // TODO what about multiple methods?, +, +        if (!"void".equals(method.returnType()) && !hasReturnValue) {, +          builder.add("return $L;\n", method.defaultReturn());, +        }, +, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        boolean hasReturnValue = false;, +        Set<MethodViewBinding> methodViewBindings = methodBindings.get(method);, +        if (methodViewBindings != null) {, +          for (MethodViewBinding methodBinding : methodViewBindings) {, +            if (methodBinding.hasReturnValue()) {, +              hasReturnValue = true;, +              builder.add("return "); // TODO what about multiple methods?, +, +        if (!"void".equals(method.returnType()) && !hasReturnValue) {, +          builder.add("return $L;\n", method.defaultReturn());, +        }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    String returnTypeString = returnType.toString();]
[+++ b/build.gradle, +    supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/build.gradle, +    supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, +  compile deps.supportAnnotations, +++ b/build.gradle, +    supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, +  compile deps.supportAnnotations, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.support.annotation.NonNull;, +    @Override public void apply(@NonNull View view, int index) {, +++ b/build.gradle, +    supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, +  compile deps.supportAnnotations, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.support.annotation.NonNull;, +    @Override public void apply(@NonNull View view, int index) {, +++ b/butterknife/build.gradle, +  compile deps.supportAnnotations, +++ b/build.gradle, +    supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, +  compile deps.supportAnnotations, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.support.annotation.NonNull;, +    @Override public void apply(@NonNull View view, int index) {, +++ b/butterknife/build.gradle, +  compile deps.supportAnnotations, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.support.annotation.CheckResult;, +import android.support.annotation.IdRes;, +import android.support.annotation.NonNull;, +    void apply(@NonNull T view, int index);, +    void set(@NonNull T view, V value, int index);, +  public static void bind(@NonNull Activity target) {, +  @NonNull, +  public static View bind(@NonNull View target) {, +  public static void bind(@NonNull Dialog target) {, +  public static void bind(@NonNull Object target, @NonNull Activity source) {, +  @NonNull, +  public static View bind(@NonNull Object target, @NonNull View source) {, +  public static void bind(@NonNull Object target, @NonNull Dialog source) {, +  static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder finder) {, +  @NonNull, +  @SafeVarargs public static <T extends View> void apply(@NonNull List<T> list,, +      @NonNull Action<? super T>... actions) {, +  @SafeVarargs public static <T extends View> void apply(@NonNull T[] array,, +      @NonNull Action<? super T>... actions) {, +  public static <T extends View> void apply(@NonNull List<T> list,, +      @NonNull Action<? super T> action) {, +  public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {, +  @SafeVarargs public static <T extends View> void apply(@NonNull T view,, +      @NonNull Action<? super T>... actions) {, +  public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {, +  public static <T extends View, V> void apply(@NonNull List<T> list,, +      @NonNull Setter<? super T, V> setter, V value) {, +  public static <T extends View, V> void apply(@NonNull T[] array,, +      @NonNull Setter<? super T, V> setter, V value) {, +  public static <T extends View, V> void apply(@NonNull T view,, +      @NonNull Setter<? super T, V> setter, V value) {, +  public static <T extends View, V> void apply(@NonNull List<T> list,, +      @NonNull Property<? super T, V> setter, V value) {, +  public static <T extends View, V> void apply(@NonNull T[] array,, +      @NonNull Property<? super T, V> setter, V value) {, +  public static <T extends View, V> void apply(@NonNull T view,, +      @NonNull Property<? super T, V> setter, V value) {, +  @CheckResult, +  public static <T extends View> T findById(@NonNull View view, @IdRes int id) {, +  @CheckResult, +  public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {, +  @CheckResult, +  public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {, +++ b/build.gradle, +    supportAnnotations: 'com.android.support:support-annotations:23.0.1',, +++ b/butterknife-annotations/build.gradle, +  compile deps.supportAnnotations, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.support.annotation.NonNull;, +    @Override public void apply(@NonNull View view, int index) {, +++ b/butterknife/build.gradle, +  compile deps.supportAnnotations, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.support.annotation.CheckResult;, +import android.support.annotation.IdRes;, +import android.support.annotation.NonNull;, +    void apply(@NonNull T view, int index);, +    void set(@NonNull T view, V value, int index);, +  public static void bind(@NonNull Activity target) {, +  @NonNull, +  public static View bind(@NonNull View target) {, +  public static void bind(@NonNull Dialog target) {, +  public static void bind(@NonNull Object target, @NonNull Activity source) {, +  @NonNull, +  public static View bind(@NonNull Object target, @NonNull View source) {, +  public static void bind(@NonNull Object target, @NonNull Dialog source) {, +  static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder finder) {, +  @NonNull]
[+++ b/build.gradle, +      'supportLibrary': '27.1.1',, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +      'kotlin': '1.2.61',, +      truth: 'com.google.truth:truth:0.42',, +          'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/build.gradle, +      'supportLibrary': '27.1.1',, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +      'kotlin': '1.2.61',, +      truth: 'com.google.truth:truth:0.42',, +          'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/butterknife-gradle-plugin/build.gradle, +  implementation deps.kotlin.stdLibJdk8, +++ b/build.gradle, +      'supportLibrary': '27.1.1',, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +      'kotlin': '1.2.61',, +      truth: 'com.google.truth:truth:0.42',, +          'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/butterknife-gradle-plugin/build.gradle, +  implementation deps.kotlin.stdLibJdk8, +++ b/butterknife-integration-test/build.gradle, +    disable 'UnknownNullness', +++ b/build.gradle, +      'supportLibrary': '27.1.1',, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +      'kotlin': '1.2.61',, +      truth: 'com.google.truth:truth:0.42',, +          'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/butterknife-gradle-plugin/build.gradle, +  implementation deps.kotlin.stdLibJdk8, +++ b/butterknife-integration-test/build.gradle, +    disable 'UnknownNullness', +++ b/gradle.properties, +, +# TODO https://issuetracker.google.com/issues/73450622, +android.enableAapt2=false, +++ b/build.gradle, +      'supportLibrary': '27.1.1',, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +      'kotlin': '1.2.61',, +      truth: 'com.google.truth:truth:0.42',, +          'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/butterknife-gradle-plugin/build.gradle, +  implementation deps.kotlin.stdLibJdk8, +++ b/butterknife-integration-test/build.gradle, +    disable 'UnknownNullness', +++ b/gradle.properties, +, +# TODO https://issuetracker.google.com/issues/73450622, +android.enableAapt2=false, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +      'supportLibrary': '27.1.1',, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +      'kotlin': '1.2.61',, +      truth: 'com.google.truth:truth:0.42',, +          'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",, +++ b/butterknife-gradle-plugin/build.gradle, +  implementation deps.kotlin.stdLibJdk8, +++ b/butterknife-integration-test/build.gradle, +    disable 'UnknownNullness', +++ b/gradle.properties, +, +# TODO https://issuetracker.google.com/issues/73450622, +android.enableAapt2=false, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10-bin.zip]
[+++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestImplementation deps.support.test.rules, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestImplementation deps.support.test.rules, +++ /dev/null, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestImplementation deps.support.test.rules, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestImplementation deps.support.test.rules, +++ /dev/null, +++ /dev/null, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java, +package com.example.butterknife.library;, +, +import android.support.test.rule.ActivityTestRule;, +import butterknife.ButterKnife;, +import butterknife.Unbinder;, +import com.example.butterknife.R;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +, +public final class SimpleActivityTest {, +  @Rule public final ActivityTestRule<SimpleActivity> activityRule =, +      new ActivityTestRule<>(SimpleActivity.class);, +, +  @Test public void verifyContentViewBinding() {, +    SimpleActivity activity = activityRule.getActivity();, +, +    Unbinder unbinder = ButterKnife.bind(activity);, +    verifySimpleActivityBound(activity);, +    unbinder.unbind();, +    verifySimpleActivityUnbound(activity);, +  }, +, +  protected static void verifySimpleActivityBound(SimpleActivity activity) {, +    assertThat(activity.title.getId()).isEqualTo(R.id.title);, +    assertThat(activity.subtitle.getId()).isEqualTo(R.id.subtitle);, +    assertThat(activity.hello.getId()).isEqualTo(R.id.hello);, +    assertThat(activity.listOfThings.getId()).isEqualTo(R.id.list_of_things);, +    assertThat(activity.footer.getId()).isEqualTo(R.id.footer);, +  }, +, +  protected static void verifySimpleActivityUnbound(SimpleActivity activity) {, +    assertThat(activity.title).isNull();, +    assertThat(activity.subtitle).isNull();, +    assertThat(activity.hello).isNull();, +    assertThat(activity.listOfThings).isNull();, +    assertThat(activity.footer).isNull();, +  }, +}, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +    }, +            .addModifiers(PROTECTED, STATIC);, +      result.addField(targetType, "target", PROTECTED);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +      constructor.addStatement("super(target)");, +  private void addFieldAndUnbindStatement(, +      TypeSpec.Builder result,, +      MethodSpec.Builder unbindMethod,, +    result.addField(VIEW, fieldName);, +      boolean requiresRemoval = !listenerClass.remover().isEmpty();, +        result.addField(listenerClassName, listenerField);, +    boolean needsUnbinder = bindNeedsUnbinder();, +    if (needsUnbinder) {, +      result.addStatement("$1T unbinder = new $1T(target)", getHierarchyUnbinder());, +    }, +, +    if (isFinal) {, +      if (needsResources || needsUnbinder) {, +      CodeBlock.Builder invoke = CodeBlock.builder().add("$N(target", BIND_TO_TARGET);, +      if (needsUnbinder) invoke.add(", unbinder");, +    }, +    if (needsUnbinder) {, +      result.addStatement("return unbinder");, +    } else if (hasHierarchyUnbinder()) {, +      result.addStatement("return new $T(target)", getHierarchyUnbinder());, +    } else {, +    if (bindNeedsUnbinder()) {, +      result.addParameter(getHierarchyUnbinder(), "unbinder");, +    }, +    if (hasParentBinding()) {, +      if (parentBinding.bindNeedsUnbinder()) invoke.add(", unbinder");, +      result.addStatement("unbinder.$L = view", fieldName);, +        result.addStatement("unbinder.$L = $L", listenerField, callback.build());, +            listener.setter(), requiresRemoval ? "unbinder." + listenerField : callback.build());, +            requiresRemoval ? "unbinder." + listenerField : callback.build());, +    return hasViewBindings();, +    return hasParentBinding() && parentBinding.hasHierarchyUnbinder();, +    return parentBinding.getHierarchyUnbinder();, +  }, +, +  /** True when this type or any of its parents contain an unbinder subclass. */, +  private boolean hasHierarchyUnbinder() {, +    return isGeneratingUnbinder() || hasInheritedUnbinder();, +  }, +, +  /** Return this type's unbinder subclass or the nearest one from its parents. */, +  private ClassName getHierarchyUnbinder() {, +    if (isGeneratingUnbinder()) {, +      return unbinderClassName;, +    }, +    return parentBinding.getHierarchyUnbinder();, +  private boolean bindNeedsUnbinder() {, +    return isGeneratingUnbinder() && hasMethodBindings() //, +        || hasParentBinding() && parentBinding.bindNeedsUnbinder();, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +    }, +            .addModifiers(PROTECTED, STATIC);, +      result.addField(targetType, "target", PROTECTED);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +      constructor.addStatement("super(target)");, +  private void addFieldAndUnbindStatement(, +      TypeSpec.Builder result,, +      MethodSpec.Builder unbindMethod,, +    result.addField(VIEW, fieldName);, +      boolean requiresRemoval = !listenerClass.remover().isEmpty();, +        result.addField(listenerClassName, listenerField);, +    boolean needsUnbinder = bindNeedsUnbinder();, +    if (needsUnbinder) {, +      result.addStatement("$1T unbinder = new $1T(target)", getHierarchyUnbinder());, +    }, +, +    if (isFinal) {, +      if (needsResources || needsUnbinder) {, +      CodeBlock.Builder invoke = CodeBlock.builder().add("$N(target", BIND_TO_TARGET);, +      if (needsUnbinder) invoke.add(", unbinder");, +    }, +    if (needsUnbinder) {, +      result.addStatement("return unbinder");, +    } else if (hasHierarchyUnbinder()) {, +      result.addStatement("return new $T(target)", getHierarchyUnbinder());, +    } else {, +    if (bindNeedsUnbinder()) {, +      result.addParameter(getHierarchyUnbinder(), "unbinder");, +    }, +    if (hasParentBinding()) {, +      if (parentBinding.bindNeedsUnbinder()) invoke.add(", unbinder");, +      result.addStatement("unbinder.$L = view", fieldName);, +        result.addStatement("unbinder.$L = $L", listenerField, callback.build());, +            listener.setter(), requiresRemoval ? "unbinder." + listenerField : callback.build());]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-2-all.zip]
[+++ b/butterknife/src/main/java/butterknife/OnClick.java, +    type = "butterknife.internal.DebouncingOnClickListener",, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +    type = "butterknife.internal.DebouncingOnClickListener",, +++ /dev/null, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +    type = "butterknife.internal.DebouncingOnClickListener",, +++ /dev/null, +++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java, +package butterknife.internal;, +, +import android.view.View;, +, +/**, + * A {@link View.OnClickListener} that enables debouncing of multiple clicks posted in a row., + *, + * Once a click is fired, a post is enqueued to the main thread looper queue and no further click, + * is allowed until that post is dequeued., + *, + * A click on one button disables all buttons., + *, + */, +public abstract class DebouncingOnClickListener implements View.OnClickListener {, +, +  /**, +   * This is static because we want to disable clicks for all click listeners., +   */, +  private static boolean enabled = true;, +, +  private static final Runnable ENABLE_AGAIN = new Runnable() {, +    @Override public void run() {, +      enabled = true;, +    }, +  };, +, +  @Override public final void onClick(View v) {, +    if (enabled) {, +      enabled = false;, +      v.post(ENABLE_AGAIN);, +      doClick(v);, +    }, +  }, +, +  public abstract void doClick(View v);, +}, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +    type = "butterknife.internal.DebouncingOnClickListener",, +++ /dev/null, +++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java, +package butterknife.internal;, +, +import android.view.View;, +, +/**, + * A {@link View.OnClickListener} that enables debouncing of multiple clicks posted in a row., + *, + * Once a click is fired, a post is enqueued to the main thread looper queue and no further click, + * is allowed until that post is dequeued., + *, + * A click on one button disables all buttons., + *, + */, +public abstract class DebouncingOnClickListener implements View.OnClickListener {, +, +  /**, +   * This is static because we want to disable clicks for all click listeners., +   */, +  private static boolean enabled = true;, +, +  private static final Runnable ENABLE_AGAIN = new Runnable() {, +    @Override public void run() {, +      enabled = true;, +    }, +  };, +, +  @Override public final void onClick(View v) {, +    if (enabled) {, +      enabled = false;, +      v.post(ENABLE_AGAIN);, +      doClick(v);, +    }, +  }, +, +  public abstract void doClick(View v);, +}, +++ b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java, +            "      new butterknife.internal.DebouncingOnClickListener() {",, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +    type = "butterknife.internal.DebouncingOnClickListener",, +++ /dev/null, +++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java, +package butterknife.internal;, +, +import android.view.View;, +, +/**, + * A {@link View.OnClickListener} that enables debouncing of multiple clicks posted in a row., + *, + * Once a click is fired, a post is enqueued to the main thread looper queue and no further click, + * is allowed until that post is dequeued.]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +/**, + * View injection utilities. Use this class to simplify finding views and attaching listeners by, + * injecting them., + * <p>, + * Injecting views from your activity is as easy as:, + * <pre><code>, + * public class ExampleActivity extends Activity {, + *   {@literal @}InjectView(R.id.title) EditText titleView;, + *   {@literal @}InjectView(R.id.subtitle) EditText subtitleView;, + *, + *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {, + *     super.onCreate(savedInstanceState);, + *     setContentView(R.layout.example_activity);, + *     ButterKnife.inject(this);, + *   }, + * }, + * </code></pre>, + * You can inject an {@link #inject(Activity) activity directly} or a {@link #inject(View) view, + * directly}, or inject an {@link #inject(Object, Activity) activity into another object} or a, + * {@link #inject(Object, View) view into another object}., + * <p>, + * To inject listeners to your views you can annotate your methods:, + * <pre><code>, + * {@literal @}OnClick(R.id.submit) void onSubmit() {, + *   // React to button click., + * }, + * </code></pre>, + * Any number of parameters from the listener may be used on the method., + * <pre><code>, + * {@literal @}OnItemClick(R.id.tweet_list) void onTweetClicked(int position) {, + *   // React to tweet click., + * }, + * </code></pre>, + * <p>, + * Be default, views are required to be present in the layout for both field and method injections., + * If a view is optional add the {@link Optional @Optional} annotation., + * <pre><code>, + * {@literal @}Optional @InjectView(R.id.title) TextView subtitleView;, + * </code></pre>, + *, + * @see InjectView, + * @see OnClick, + * @see OnItemClick, + * @see OnLongClick, + */, +  /**, +   * A means of finding a view in either an {@link Activity} or a {@link View}. Exposed for use only, +   * by generated code., +   */, +  private static Method findInjectorForClass(Class<?> cls) throws NoSuchMethodException {, +  private static Method findResettersForClass(Class<?> cls) throws NoSuchMethodException {, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +/**, + * View injection utilities. Use this class to simplify finding views and attaching listeners by, + * injecting them., + * <p>, + * Injecting views from your activity is as easy as:, + * <pre><code>, + * public class ExampleActivity extends Activity {, + *   {@literal @}InjectView(R.id.title) EditText titleView;, + *   {@literal @}InjectView(R.id.subtitle) EditText subtitleView;, + *, + *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {, + *     super.onCreate(savedInstanceState);, + *     setContentView(R.layout.example_activity);, + *     ButterKnife.inject(this);, + *   }, + * }, + * </code></pre>, + * You can inject an {@link #inject(Activity) activity directly} or a {@link #inject(View) view, + * directly}, or inject an {@link #inject(Object, Activity) activity into another object} or a, + * {@link #inject(Object, View) view into another object}., + * <p>, + * To inject listeners to your views you can annotate your methods:, + * <pre><code>, + * {@literal @}OnClick(R.id.submit) void onSubmit() {, + *   // React to button click., + * }, + * </code></pre>, + * Any number of parameters from the listener may be used on the method., + * <pre><code>, + * {@literal @}OnItemClick(R.id.tweet_list) void onTweetClicked(int position) {, + *   // React to tweet click., + * }, + * </code></pre>, + * <p>, + * Be default, views are required to be present in the layout for both field and method injections., + * If a view is optional add the {@link Optional @Optional} annotation., + * <pre><code>, + * {@literal @}Optional @InjectView(R.id.title) TextView subtitleView;, + * </code></pre>, + *, + * @see InjectView, + * @see OnClick, + * @see OnItemClick, + * @see OnLongClick, + */, +  /**, +   * A means of finding a view in either an {@link Activity} or a {@link View}. Exposed for use only]
[+++ b/.travis.yml, +    - extra-android-m2repository, +++ b/.travis.yml, +    - extra-android-m2repository, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:23.0.1',, +++ b/.travis.yml, +    - extra-android-m2repository, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:23.0.1',, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(value = R.drawable.placeholder, tint = R.attr.colorAccent), + *  Drawable tintedPlaceholder;, +, +  /** Color attribute resource ID that is used to tint the drawable. */, +  int tint() default 0;, +++ b/.travis.yml, +    - extra-android-m2repository, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:23.0.1',, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(value = R.drawable.placeholder, tint = R.attr.colorAccent), + *  Drawable tintedPlaceholder;, +, +  /** Color attribute resource ID that is used to tint the drawable. */, +  int tint() default 0;, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +  private static final ClassName BUTTERKNIFE_TOOLS =, +      ClassName.get("butterknife.internal", "ButterKnifeTools");, +  private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();, +  void addDrawable(FieldDrawableBinding binding) {, +    drawableBindings.add(binding);, +  }, +, +      if (!drawableBindings.isEmpty()) {, +        result.addStatement("$T theme = finder.getContext(source).getTheme()",, +            Resources.Theme.class);, +, +        for (FieldDrawableBinding binding : drawableBindings) {, +          result.addStatement("target.$L = $T.getDrawable(res, $L, $L, theme)",, +              binding.getName(), BUTTERKNIFE_TOOLS, binding.getId(), binding.getTintAttributeId());, +        }, +      }, +, +    return !(bitmapBindings.isEmpty() && drawableBindings.isEmpty() && resourceBindings.isEmpty());, +++ b/.travis.yml, +    - extra-android-m2repository, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:23.0.1',, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(value = R.drawable.placeholder, tint = R.attr.colorAccent), + *  Drawable tintedPlaceholder;, +, +  /** Color attribute resource ID that is used to tint the drawable. */, +  int tint() default 0;, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +  private static final ClassName BUTTERKNIFE_TOOLS =, +      ClassName.get("butterknife.internal", "ButterKnifeTools");, +  private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();, +  void addDrawable(FieldDrawableBinding binding) {, +    drawableBindings.add(binding);, +  }, +, +      if (!drawableBindings.isEmpty()) {, +        result.addStatement("$T theme = finder.getContext(source).getTheme()",, +            Resources.Theme.class);, +, +        for (FieldDrawableBinding binding : drawableBindings) {, +          result.addStatement("target.$L = $T.getDrawable(res, $L, $L, theme)",, +              binding.getName(), BUTTERKNIFE_TOOLS, binding.getId(), binding.getTintAttributeId());, +        }, +      }, +, +    return !(bitmapBindings.isEmpty() && drawableBindings.isEmpty() && resourceBindings.isEmpty());, +++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    int tint = element.getAnnotation(BindDrawable.class).tint();, +    FieldDrawableBinding binding = new FieldDrawableBinding(id, name, tint);, +    bindingClass.addDrawable(binding);, +++ b/.travis.yml, +    - extra-android-m2repository, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:23.0.1',, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(value = R.drawable.placeholder, tint = R.attr.colorAccent), + *  Drawable tintedPlaceholder;, +, +  /** Color attribute resource ID that is used to tint the drawable. */, +  int tint() default 0;, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +  private static final ClassName BUTTERKNIFE_TOOLS =, +      ClassName.get("butterknife.internal", "ButterKnifeTools");, +  private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();, +  void addDrawable(FieldDrawableBinding binding) {, +    drawableBindings.add(binding);, +  }, +, +      if (!drawableBindings.isEmpty()) {, +        result.addStatement("$T theme = finder.getContext(source).getTheme()",, +            Resources.Theme.class);, +]
[+++ b/.travis.yml, +    - $HOME/.gradle, +, +++ b/.travis.yml, +    - $HOME/.gradle, +, +++ b/build.gradle, +      'supportLibrary': '26.0.1',]
[+++ b/butterknife-sample/pom.xml, +    <version>6.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>6.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>6.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>6.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>6.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>6.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, +  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, +  private static final ClassName VIEW_BINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, +        .addParameter(FINDER, "finder", FINAL), +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +          asHumanDescription(singletonList(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, +        builder.build());, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, +  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, +  private static final ClassName VIEW_BINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, +        .addParameter(FINDER, "finder", FINAL), +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +          asHumanDescription(singletonList(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, +        builder.build());, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import com.squareup.javapoet.TypeName;, +  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";, +    if (qualifiedName.startsWith("android.")) {, +    if (qualifiedName.startsWith("java.")) {, +    TypeName type = TypeName.get(elementType);, +    TypeName type = TypeName.get(viewType);, +            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, +  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, +  private static final ClassName VIEW_BINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, +        .addParameter(FINDER, "finder", FINAL), +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +          asHumanDescription(singletonList(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, +        builder.build());, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import com.squareup.javapoet.TypeName;, +  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";, +    if (qualifiedName.startsWith("android.")) {, +    if (qualifiedName.startsWith("java.")) {, +    TypeName type = TypeName.get(elementType);, +    TypeName type = TypeName.get(viewType);, +            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));, +++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java, +import com.squareup.javapoet.TypeName;, +, +  private final TypeName type;, +  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {, +  public TypeName getType() {, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, +  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, +  private static final ClassName VIEW_BINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, +        .addParameter(FINDER, "finder", FINAL), +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +          asHumanDescription(singletonList(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, +        builder.build());, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import com.squareup.javapoet.TypeName;, +  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";, +    if (qualifiedName.startsWith("android.")) {, +    if (qualifiedName.startsWith("java.")) {, +    TypeName type = TypeName.get(elementType);, +    TypeName type = TypeName.get(viewType);, +            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));, +++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java, +import com.squareup.javapoet.TypeName;, +, +  private final TypeName type;, +  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {, +  public TypeName getType() {, +++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java, +import com.squareup.javapoet.TypeName;, +, +  private final TypeName type;, +  FieldViewBinding(String name, TypeName type, boolean required) {, +  public TypeName getType() {, +    return !VIEW_TYPE.equals(type.toString());, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java]
[+++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +        defaultReturn = "false", +++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +        defaultReturn = "false", +++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +        defaultReturn = "false", +++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +        defaultReturn = "false", +++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +        defaultReturn = "false", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        boolean hasReturnType = !"void".equals(method.returnType());, +        if (hasReturnType) {, +          builder.add("return ");, +, +        if (methodBindings.containsKey(method)) {, +          for (MethodViewBinding methodBinding : methodBindings.get(method)) {, +        } else if (hasReturnType) {, +          builder.add("$L;\n", method.defaultReturn());, +++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +        defaultReturn = "false", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        boolean hasReturnType = !"void".equals(method.returnType());, +        if (hasReturnType) {, +          builder.add("return ");, +, +        if (methodBindings.containsKey(method)) {, +          for (MethodViewBinding methodBinding : methodBindings.get(method)) {, +        } else if (hasReturnType) {, +          builder.add("$L;\n", method.defaultReturn());, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    if (!returnType.toString().equals(method.returnType())) {, +    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);, +++ b/build.gradle, +          'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +        defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java]
[+++ b/build.gradle, +      'compileSdk': 28,, +      'supportLibrary': '28.0.0',, +      'kotlin': '1.2.70',, +          'annotations': "androidx.annotation:annotation:1.0.0",, +++ b/build.gradle, +      'compileSdk': 28,, +      'supportLibrary': '28.0.0',, +      'kotlin': '1.2.70',, +          'annotations': "androidx.annotation:annotation:1.0.0",, +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java, +  @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;, +++ b/build.gradle, +      'compileSdk': 28,, +      'supportLibrary': '28.0.0',, +      'kotlin': '1.2.70',, +          'annotations': "androidx.annotation:annotation:1.0.0",, +++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java, +  @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;, +++ b/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java, +        + "  @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;\n", +        + "    target.holoGreenDark = ContextCompat.getColor(context, android.R.color.holo_green_dark);\n"]
[+++ b/butterknife-sample/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/butterknife-sample/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/butterknife-sample/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.0.0</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <version>1.0.0</version>, +    <tag>butterknife-parent-1.0.0</tag>]
[+++ b/checkstyle.xml]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +  private static final ClassName ANDROID_R = ClassName.get("android", "R");, +, +    this.code = className.topLevelClassName().equals(ANDROID_R), +      ? CodeBlock.of("$L.$N", className, resourceName), +      : CodeBlock.of("$T.$N", className, resourceName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +  private static final ClassName ANDROID_R = ClassName.get("android", "R");, +, +    this.code = className.topLevelClassName().equals(ANDROID_R), +      ? CodeBlock.of("$L.$N", className, resourceName), +      : CodeBlock.of("$T.$N", className, resourceName);, +++ b/butterknife-compiler/src/test/java/butterknife/RClassTest.java, +        + "    target.black = Utils.getColor(res, theme, android.R.color.black);\n", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +  private static final ClassName ANDROID_R = ClassName.get("android", "R");, +, +    this.code = className.topLevelClassName().equals(ANDROID_R), +      ? CodeBlock.of("$L.$N", className, resourceName), +      : CodeBlock.of("$T.$N", className, resourceName);, +++ b/butterknife-compiler/src/test/java/butterknife/RClassTest.java, +        + "    target.black = Utils.getColor(res, theme, android.R.color.black);\n", +++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java, +        + "    target.blackColor = Utils.getColor(res, theme, android.R.color.black);\n", +        + "    target.whiteColor = Utils.getColor(res, theme, android.R.color.white);\n", +        + "    target.button1 = finder.findRequiredView(source, android.R.id.button1, \"field 'button1'\");\n", +        + "    target.transparentColor = Utils.getColor(res, theme, android.R.color.transparent);\n", +        + "    target.grayColor = Utils.getColor(res, theme, android.R.color.darker_gray);\n", +        + "    target.backgroundDarkColor = Utils.getColor(res, theme, android.R.color.background_dark);\n", +        + "    target.backgroundLightColor = Utils.getColor(res, theme, android.R.color.background_light);\n", +        + "    target.button2 = finder.findRequiredView(source, android.R.id.button2, \"field 'button2'\");\n", +        + "    view = finder.findRequiredView(source, android.R.id.content, \"method 'onClick'\");\n", +        + "    target.grayColor = Utils.getColor(res, theme, android.R.color.darker_gray);\n", +        + "    target.button3 = finder.findRequiredView(source, android.R.id.button3, \"field 'button3'\");\n", +        + "    target.grayColor = Utils.getColor(res, theme, android.R.color.primary_text_dark);\n"]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import java.util.HashSet;, +import javax.lang.model.element.Name;, +  private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();, +    Name qualifiedName = enclosingElement.getQualifiedName();, +    Name simpleName = element.getSimpleName();, +            BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);, +            BindView.class.getSimpleName(), qualifiedName, simpleName);, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));, +    String name = simpleName.toString();, +    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));, +  private QualifiedId elementToQualifiedId(Element element, int id) {, +    return new QualifiedId(elementUtils.getPackageOf(element).getQualifiedName().toString(), id);, +  }, +, +      QualifiedId qualifiedId = elementToQualifiedId(element, id);, +      idVars.add(getId(qualifiedId));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BOOL));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BITMAP));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    QualifiedId qualifiedTint = elementToQualifiedId(element, tint);, +    builder.addResource(new FieldDrawableBinding(getId(qualifiedId), name, getId(qualifiedTint)));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.FLOAT));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.INT));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.STRING));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name, type));, +      QualifiedId qualifiedId = elementToQualifiedId(element, id);, +      if (!builder.addMethod(getId(qualifiedId), listener, method, binding)) {, +  private Id getId(QualifiedId qualifiedId) {, +    if (symbols.get(qualifiedId) == null) {, +      symbols.put(qualifiedId, new Id(qualifiedId.id));, +    return symbols.get(qualifiedId);, +          String respectivePackageName =, +              elementUtils.getPackageOf(element).getQualifiedName().toString();, +          scanner.setCurrentPackageName(respectivePackageName);, +    for (Map.Entry<String, Set<String>> packageNameToRClassSet : scanner.getRClasses().entrySet()) {, +      String respectivePackageName = packageNameToRClassSet.getKey();, +      for (String rClass : packageNameToRClassSet.getValue()) {, +        parseRClass(respectivePackageName, rClass);, +      }, +  private void parseRClass(String respectivePackageName, String rClass) {, +      IdScanner idScanner = new IdScanner(symbols, elementUtils.getPackageOf(element), +          .getQualifiedName().toString(), respectivePackageName);, +      parseCompiledR(respectivePackageName, (TypeElement) element);, +  private void parseCompiledR(String respectivePackageName, TypeElement rClass) {, +              QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);, +              symbols.put(qualifiedId, new Id(id, rClassName, resourceName));, +    // Maps the currently evaulated rPackageName to R Classes, +    private final Map<String, Set<String>> rClasses = new LinkedHashMap<>();, +    private String currentPackageName;, +        Set<String> rClassSet = rClasses.get(currentPackageName);, +        if (rClassSet == null) {, +          rClassSet = new HashSet<>();, +          rClasses.put(currentPackageName, rClassSet);, +        }, +        rClassSet.add(symbol.getEnclosingElement().getEnclosingElement().enclClass().className());, +    Map<String, Set<String>> getRClasses() {, +, +    void setCurrentPackageName(String respectivePackageName) {, +      this.currentPackageName = respectivePackageName;, +    }, +    private final Map<QualifiedId, Id> ids;, +    private final String rPackageName;, +    private final String respectivePackageName;, +    IdScanner(Map<QualifiedId, Id> ids, String rPackageName, String respectivePackageName) {, +      this.rPackageName = rPackageName;, +      this.respectivePackageName = respectivePackageName;, +            ClassName rClassName = ClassName.get(rPackageName, "R", className);, +            VarScanner scanner = new VarScanner(ids, rClassName, respectivePackageName);, +    private final Map<QualifiedId, Id> ids;, +    private final String respectivePackageName;, +    private VarScanner(Map<QualifiedId, Id> ids, ClassName className,, +        String respectivePackageName) {, +      this.respectivePackageName = respectivePackageName;, +        QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);, +        ids.put(qualifiedId, new Id(id, className, resourceName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import java.util.HashSet;, +import javax.lang.model.element.Name;, +  private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();, +    Name qualifiedName = enclosingElement.getQualifiedName();, +    Name simpleName = element.getSimpleName();, +            BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);, +            BindView.class.getSimpleName(), qualifiedName, simpleName);, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.0.0', +++ b/.travis.yml, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-sample/build.gradle, +  lintOptions {, +    textReport true, +    textOutput 'stdout', +  }, +, +++ b/.travis.yml, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-sample/build.gradle, +  lintOptions {, +    textReport true, +    textOutput 'stdout', +  }, +, +++ b/butterknife/build.gradle, +, +  lintOptions {, +    textReport true, +    textOutput 'stdout', +  }, +++ b/.travis.yml, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-sample/build.gradle, +  lintOptions {, +    textReport true, +    textOutput 'stdout', +  }, +, +++ b/butterknife/build.gradle, +, +  lintOptions {, +    textReport true, +    textOutput 'stdout', +  }, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-all.zip]
[+++ b/butterknife-sample/pom.xml, +    <version>3.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>3.0.1</version>, +++ b/butterknife/pom.xml, +    <version>3.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>3.0.1</version>, +++ b/butterknife/pom.xml, +    <version>3.0.1</version>, +++ b/pom.xml, +  <version>3.0.1</version>, +    <tag>butterknife-parent-3.0.1</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      throw new RuntimeException("Unable to reset views for " + targetClass.getName(), e);, +      throw new RuntimeException("Unable to inject views for " + targetClass.getName(), e);]
[+++ b/butterknife-sample/pom.xml, +    <version>4.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>4.0.1</version>, +++ b/butterknife/pom.xml, +    <version>4.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>4.0.1</version>, +++ b/butterknife/pom.xml, +    <version>4.0.1</version>, +++ b/pom.xml, +  <version>4.0.1</version>, +    <tag>butterknife-parent-4.0.1</tag>]
[+++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/CHANGELOG.md, +Version 8.2.1 *(2016-07-11)*, +----------------------------, +, + * Fix: Do not emit `android.R` imports in generated code., + * Fix: Ensure the processor does not crash when scanning for `R` classes. This can occur when used in a, +   Kotlin project., +, +, +++ b/CHANGELOG.md, +Version 8.2.1 *(2016-07-11)*, +----------------------------, +, + * Fix: Do not emit `android.R` imports in generated code., + * Fix: Ensure the processor does not crash when scanning for `R` classes. This can occur when used in a, +   Kotlin project., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.2.1', +  apt 'com.jakewharton:butterknife-compiler:8.2.1', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.2.1', +++ b/CHANGELOG.md, +Version 8.2.1 *(2016-07-11)*, +----------------------------, +, + * Fix: Do not emit `android.R` imports in generated code., + * Fix: Ensure the processor does not crash when scanning for `R` classes. This can occur when used in a, +   Kotlin project., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.2.1', +  apt 'com.jakewharton:butterknife-compiler:8.2.1', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.2.1', +++ b/gradle.properties, +VERSION_NAME=8.2.1]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(R.drawable.placeholder), + * Drawable placeholder;, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(R.drawable.placeholder), + * Drawable placeholder;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, + * {@literal @}BindDrawable(R.drawable.placeholder), + * Drawable placeholder;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  @Test public void propertyAppliedToEveryView() {, +  @Test public void actionAppliedToEveryView() {, +  @Test public void actionsAppliedToEveryView() {, +  @Test public void setterAppliedToEveryView() {]
[+++ b/.travis.yml, +jdk: oraclejdk7, +, +before_install:, +  - export TERM=dumb, +  - sudo apt-get install -qq libstdc++6:i386 lib32z1, +  - export COMPONENTS=build-tools-19.0.1,android-16,extra-android-m2repository, +  - curl -L https://raw.github.com/embarkmobile/android-sdk-installer/version-1/android-sdk-installer | bash /dev/stdin --install=$COMPONENTS, +  - source ~/.android-sdk-installer/env, +]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** @deprecated Compile against API 26 and use {@link View#findViewById(int)}. */, +  @SuppressWarnings("UnusedDeclaration") // Public API., +  @CheckResult @Deprecated, +    return view.findViewById(id);, +  /** @deprecated Compile against API 26 and use {@link Activity#findViewById(int)}. */, +  @SuppressWarnings("UnusedDeclaration") // Public API., +  @CheckResult @Deprecated, +    return activity.findViewById(id);, +  /** @deprecated Compile against API 26 and use {@link Dialog#findViewById(int)}. */, +  @SuppressWarnings("UnusedDeclaration") // Public API., +  @CheckResult @Deprecated, +    return dialog.findViewById(id);]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +package butterknife;, +, +import android.support.annotation.AnimRes;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified animation resource ID., + * <pre><code>, + * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindAnim {, +  /** Animation resource ID to which the field will be bound. */, +  @AnimRes int value();, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +package butterknife;, +, +import android.support.annotation.AnimRes;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified animation resource ID., + * <pre><code>, + * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindAnim {, +  /** Animation resource ID to which the field will be bound. */, +  @AnimRes int value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  static final ClassName ANIMATION_UTILS =, +          ClassName.get("android.view.animation", "AnimationUtils");, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +package butterknife;, +, +import android.support.annotation.AnimRes;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified animation resource ID., + * <pre><code>, + * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindAnim {, +  /** Animation resource ID to which the field will be bound. */, +  @AnimRes int value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  static final ClassName ANIMATION_UTILS =, +          ClassName.get("android.view.animation", "AnimationUtils");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.BindAnim;, +  private static final String ANIMATION_TYPE = "android.view.animation.Animation";, +    annotations.add(BindAnim.class);, +    // Process each @BindAnim element., +    for (Element element : env.getElementsAnnotatedWith(BindAnim.class)) {, +      if (!SuperficialValidation.validateElement(element)) continue;, +      try {, +        parseResourceAnimation(element, builderMap, erasedTargetNames);, +      } catch (Exception e) {, +        logParsingError(element, BindAnim.class, e);, +      }, +    }, +, +  private void parseResourceAnimation(Element element,, +      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {, +    boolean hasError = false;, +    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, +, +    // Verify that the target type is Animation., +    if (!ANIMATION_TYPE.equals(element.asType().toString())) {, +      error(element, "@%s field type must be 'Animation'. (%s.%s)",, +          BindAnim.class.getSimpleName(), enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +    }, +, +    // Verify common generated code restrictions.]
[+++ b/CHANGELOG.md, +Version 8.0.0 *(2016-04-25)*, +----------------------------, +, + *  `@Bind` becomes `@BindView` and `@BindViews` (one view and multiple views, respectively)., + *  Calls to `bind` now return an `Unbinder` instance which can be used to `null` references. This replaces, +    the `unbind` API and adds support for being able to clear listeners., + *  New: `@BindArray` binds `String`, `CharSequence`, and `int` arrays and `TypeArray` to fields., + *  New: `@BindBitmap` binds `Bitmap` instances from resources to fields., + *  `@BindDrawable` now supports a `tint` field which accepts a theme attribute., + *  The runtime and compiler are now split into two artifacts., +, +    ```groovy, +    compile 'com.jakewharton:butterknife:8.0.0', +    apt 'com.jakewharton:butterknife-compiler:8.0.0', +    ```, + *  New: `apply` overloads which accept a single view and arrays of views., + *  ProGuard rules now ship inside of the library and are included automatically., + *  `@Optional` annotation is back to mark methods as being optional., +, +, +++ b/CHANGELOG.md, +Version 8.0.0 *(2016-04-25)*, +----------------------------, +, + *  `@Bind` becomes `@BindView` and `@BindViews` (one view and multiple views, respectively)., + *  Calls to `bind` now return an `Unbinder` instance which can be used to `null` references. This replaces, +    the `unbind` API and adds support for being able to clear listeners., + *  New: `@BindArray` binds `String`, `CharSequence`, and `int` arrays and `TypeArray` to fields., + *  New: `@BindBitmap` binds `Bitmap` instances from resources to fields., + *  `@BindDrawable` now supports a `tint` field which accepts a theme attribute., + *  The runtime and compiler are now split into two artifacts., +, +    ```groovy, +    compile 'com.jakewharton:butterknife:8.0.0', +    apt 'com.jakewharton:butterknife-compiler:8.0.0', +    ```, + *  New: `apply` overloads which accept a single view and arrays of views., + *  ProGuard rules now ship inside of the library and are included automatically., + *  `@Optional` annotation is back to mark methods as being optional., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.0.0', +  apt 'com.jakewharton:butterknife-compiler:8.0.0', +++ b/CHANGELOG.md, +Version 8.0.0 *(2016-04-25)*, +----------------------------, +, + *  `@Bind` becomes `@BindView` and `@BindViews` (one view and multiple views, respectively)., + *  Calls to `bind` now return an `Unbinder` instance which can be used to `null` references. This replaces, +    the `unbind` API and adds support for being able to clear listeners., + *  New: `@BindArray` binds `String`, `CharSequence`, and `int` arrays and `TypeArray` to fields., + *  New: `@BindBitmap` binds `Bitmap` instances from resources to fields., + *  `@BindDrawable` now supports a `tint` field which accepts a theme attribute., + *  The runtime and compiler are now split into two artifacts., +, +    ```groovy, +    compile 'com.jakewharton:butterknife:8.0.0', +    apt 'com.jakewharton:butterknife-compiler:8.0.0', +    ```, + *  New: `apply` overloads which accept a single view and arrays of views., + *  ProGuard rules now ship inside of the library and are included automatically., + *  `@Optional` annotation is back to mark methods as being optional., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.0.0', +  apt 'com.jakewharton:butterknife-compiler:8.0.0', +++ b/RELEASING.md, +Releasing, +========, +, + 1. Change the version in `gradle.properties` to a non-SNAPSHOT verson., + 2. Update the `CHANGELOG.md` for the impending release., + 3. Update the `README.md` with the new version., + 4. `git commit -am "Prepare for release X.Y.Z."` (where X.Y.Z is the new version), + 5. `./gradlew clean uploadArchives`., + 6. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact., + 7. `git tag -a X.Y.X -m "Version X.Y.Z"` (where X.Y.Z is the new version), + 8. Update the `gradle.properties` to the next SNAPSHOT version., + 9. `git commit -am "Prepare next development version."`, + 10. `git push && git push --tags`, +, +If step 5 or 6 fails, drop the Sonatype repo, fix the problem, commit, and start again at step 5., +++ b/CHANGELOG.md, +Version 8.0.0 *(2016-04-25)*, +----------------------------, +, + *  `@Bind` becomes `@BindView` and `@BindViews` (one view and multiple views, respectively)., + *  Calls to `bind` now return an `Unbinder` instance which can be used to `null` references. This replaces, +    the `unbind` API and adds support for being able to clear listeners., + *  New: `@BindArray` binds `String`, `CharSequence`, and `int` arrays and `TypeArray` to fields., + *  New: `@BindBitmap` binds `Bitmap` instances from resources to fields., + *  `@BindDrawable` now supports a `tint` field which accepts a theme attribute., + *  The runtime and compiler are now split into two artifacts., +, +    ```groovy, +    compile 'com.jakewharton:butterknife:8.0.0', +    apt 'com.jakewharton:butterknife-compiler:8.0.0']
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Finding views from your activity is as easy as:, + * Binding can be performed directly on an {@linkplain #bind(Activity) activity}, a, +   * Bind annotated fields and methods in the specified {@link Activity}. The current content, +   * Bind annotated fields and methods in the specified {@link View}. The view and its children, +   * Bind annotated fields and methods in the specified {@link Dialog}. The current content, +   * Bind annotated fields and methods in the specified {@code target} using the {@code source}, +   * Bind annotated fields and methods in the specified {@code target} using the {@code source}, +   * Bind annotated fields and methods in the specified {@code target} using the {@code source}]
[+++ b/sample/app/src/main/AndroidManifest.xml, +      tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">, +++ b/sample/app/src/main/AndroidManifest.xml, +      tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">, +++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java, +import android.annotation.SuppressLint;, +  @SuppressLint("SetTextI18n") //, +++ b/sample/app/src/main/AndroidManifest.xml, +      tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">, +++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java, +import android.annotation.SuppressLint;, +  @SuppressLint("SetTextI18n") //, +++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java, +import android.annotation.SuppressLint;, +  @SuppressLint("SetTextI18n") //]
[+++ b/butterknife-sample/pom.xml, +    <version>1.2.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.0</version>, +++ b/butterknife/pom.xml, +    <version>1.2.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.0</version>, +++ b/butterknife/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +    <tag>butterknife-parent-1.2.0</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (bindNeedsView()) {, +      constructor.addParameter(VIEW, "source");, +      if (parentBinding.bindNeedsView()) invoke.add(", source");, +        .returns(UNBINDER);, +    result.addParameter(VIEW, "source");, +    boolean needsView = bindNeedsView();, +        result.addStatement("$T context = source.getContext()", CONTEXT);, +        result.addStatement("$T res = source.getContext().getResources()", RESOURCES);, +      if (needsView) invoke.add(", source");, +      if (parentBinding.bindNeedsView()) invoke.add(", source");, +      builder.add("\n");, +, +      boolean requiresCast = requiresCast(binding.getType());, +      if (!requiresCast && !binding.isRequired()) {, +        builder.add("source.findViewById($L)", ids.get(i).code);, +      } else {, +        builder.add("$T.find", UTILS);, +        if (requiresCast) {, +        if (binding.isRequired() || requiresCast) {, +        if (requiresCast) {, +    }, +      CodeBlock.Builder builder = CodeBlock.builder(), +          .add("target.$L = ", fieldBinding.getName());, +, +      boolean requiresCast = requiresCast(fieldBinding.getType());, +      if (!requiresCast && !fieldBinding.isRequired()) {, +        builder.add("source.findViewById($L)", bindings.getId().code);, +      } else {, +        builder.add("$T.find", UTILS);, +        builder.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast) {, +          builder.add("AsType");, +        builder.add("(source, $L", bindings.getId().code);, +        if (fieldBinding.isRequired() || requiresCast) {, +          builder.add(", $S", asHumanDescription(singletonList(fieldBinding)));, +        if (requiresCast) {, +          builder.add(", $T.class", fieldBinding.getRawType());, +        builder.add(")");, +      }, +      result.addStatement("$L", builder.build());, +      result.addStatement("view = source.findViewById($L)", bindings.getId().code);, +      result.addStatement("view = $T.findRequiredView(source, $L, $S)", UTILS,, +          bindings.getId().code, asHumanDescription(requiredViewBindings));, +        result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",, +            fieldBinding.getName(), UTILS, bindings.getId().code,, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +  private boolean bindNeedsView() {, +        || hasParentBinding() && parentBinding.bindNeedsView();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (bindNeedsView()) {, +      constructor.addParameter(VIEW, "source");, +      if (parentBinding.bindNeedsView()) invoke.add(", source");, +        .returns(UNBINDER);, +    result.addParameter(VIEW, "source");, +    boolean needsView = bindNeedsView();, +        result.addStatement("$T context = source.getContext()", CONTEXT);, +        result.addStatement("$T res = source.getContext().getResources()", RESOURCES);, +      if (needsView) invoke.add(", source");, +      if (parentBinding.bindNeedsView()) invoke.add(", source");, +      builder.add("\n");, +, +      boolean requiresCast = requiresCast(binding.getType());, +      if (!requiresCast && !binding.isRequired()) {, +        builder.add("source.findViewById($L)", ids.get(i).code);, +      } else {, +        builder.add("$T.find", UTILS);, +        if (requiresCast) {, +        if (binding.isRequired() || requiresCast) {, +        if (requiresCast) {, +    }, +      CodeBlock.Builder builder = CodeBlock.builder(), +          .add("target.$L = ", fieldBinding.getName());, +, +      boolean requiresCast = requiresCast(fieldBinding.getType());, +      if (!requiresCast && !fieldBinding.isRequired()) {, +        builder.add("source.findViewById($L)", bindings.getId().code);, +      } else {, +        builder.add("$T.find", UTILS);, +        builder.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast) {, +          builder.add("AsType");, +        builder.add("(source, $L", bindings.getId().code);, +        if (fieldBinding.isRequired() || requiresCast) {, +          builder.add(", $S", asHumanDescription(singletonList(fieldBinding)));, +        if (requiresCast) {, +          builder.add(", $T.class", fieldBinding.getRawType());, +        builder.add(")");, +      }, +      result.addStatement("$L", builder.build());, +      result.addStatement("view = source.findViewById($L)", bindings.getId().code);, +      result.addStatement("view = $T.findRequiredView(source, $L, $S)", UTILS,, +          bindings.getId().code, asHumanDescription(requiredViewBindings));, +        result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",, +            fieldBinding.getName(), UTILS, bindings.getId().code,, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +  private boolean bindNeedsView() {, +        || hasParentBinding() && parentBinding.bindNeedsView();, +++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java, +        + "import android.view.View;\n"]
[+++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, +  testCompile 'com.google.android:support-v4:r7', +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, +  testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +@RunWith(RobolectricGradleTestRunner.class), +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, +  testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +@RunWith(RobolectricGradleTestRunner.class), +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +, +import org.robolectric.RobolectricGradleTestRunner;, +import org.robolectric.RuntimeEnvironment;, +@RunWith(RobolectricGradleTestRunner.class), +    Context context = RuntimeEnvironment.application;, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, +  testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +@RunWith(RobolectricGradleTestRunner.class), +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +, +import org.robolectric.RobolectricGradleTestRunner;, +import org.robolectric.RuntimeEnvironment;, +@RunWith(RobolectricGradleTestRunner.class), +    Context context = RuntimeEnvironment.application;, +++ b/butterknife-sample/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +import org.robolectric.RuntimeEnvironment;, +@RunWith(RobolectricGradleTestRunner.class), +    FrameLayout frameLayout = new FrameLayout(RuntimeEnvironment.application);, +    Button button1 = new Button(RuntimeEnvironment.application);, +    Button button2 = new Button(RuntimeEnvironment.application);, +    Button button3 = new Button(RuntimeEnvironment.application);, +    View content = new View(RuntimeEnvironment.application);, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, +  testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +@RunWith(RobolectricGradleTestRunner.class), +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +, +import org.robolectric.RobolectricGradleTestRunner;, +import org.robolectric.RuntimeEnvironment;, +@RunWith(RobolectricGradleTestRunner.class), +    Context context = RuntimeEnvironment.application;, +++ b/butterknife-sample/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +import org.robolectric.RuntimeEnvironment;, +@RunWith(RobolectricGradleTestRunner.class), +    FrameLayout frameLayout = new FrameLayout(RuntimeEnvironment.application);, +    Button button1 = new Button(RuntimeEnvironment.application);, +    Button button2 = new Button(RuntimeEnvironment.application);, +    Button button3 = new Button(RuntimeEnvironment.application);, +    View content = new View(RuntimeEnvironment.application);, +++ b/butterknife-sample/src/test/resources/robolectric.properties, +constants=com.example.butterknife.BuildConfig, +sdk=21, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1',, +++ b/butterknife-compiler/build.gradle, +  // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, +  testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +@RunWith(RobolectricGradleTestRunner.class), +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +, +import org.robolectric.RobolectricGradleTestRunner;, +import org.robolectric.RuntimeEnvironment;, +@RunWith(RobolectricGradleTestRunner.class), +    Context context = RuntimeEnvironment.application;, +++ b/butterknife-sample/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java, +import org.robolectric.RobolectricGradleTestRunner;, +import org.robolectric.RuntimeEnvironment;, +@RunWith(RobolectricGradleTestRunner.class), +    FrameLayout frameLayout = new FrameLayout(RuntimeEnvironment.application);, +    Button button1 = new Button(RuntimeEnvironment.application);, +    Button button2 = new Button(RuntimeEnvironment.application);, +    Button button3 = new Button(RuntimeEnvironment.application);]
[+++ b/CHANGELOG.md, +Version 2.0.1 *(2013-07-18)*, +----------------------------, +, + * New: Control debug logging via `Views.setDebug`., +, +, +++ b/CHANGELOG.md, +Version 2.0.1 *(2013-07-18)*, +----------------------------, +, + * New: Control debug logging via `Views.setDebug`., +, +, +++ b/butterknife-sample/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, +      android:label="@string/app_name", +      android:name=".SimpleApp">, +++ b/CHANGELOG.md, +Version 2.0.1 *(2013-07-18)*, +----------------------------, +, + * New: Control debug logging via `Views.setDebug`., +, +, +++ b/butterknife-sample/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, +      android:label="@string/app_name", +      android:name=".SimpleApp">, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +package com.example.butterknife;, +, +import android.app.Application;, +import butterknife.Views;, +, +public class SimpleApp extends Application {, +  @Override public void onCreate() {, +    super.onCreate();, +    Views.setDebug(BuildConfig.DEBUG);, +  }, +}, +++ b/CHANGELOG.md, +Version 2.0.1 *(2013-07-18)*, +----------------------------, +, + * New: Control debug logging via `Views.setDebug`., +, +, +++ b/butterknife-sample/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, +      android:label="@string/app_name", +      android:name=".SimpleApp">, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +package com.example.butterknife;, +, +import android.app.Application;, +import butterknife.Views;, +, +public class SimpleApp extends Application {, +  @Override public void onCreate() {, +    super.onCreate();, +    Views.setDebug(BuildConfig.DEBUG);, +  }, +}, +++ b/butterknife/src/main/java/butterknife/Views.java, +import android.util.Log;, +  private static final String TAG = "ButterKnife";, +  private static boolean debug = false;, +, +  /** Control whether debug logging is enabled. */, +  public static void setDebug(boolean debug) {, +    Views.debug = debug;, +  }, +, +      if (debug) Log.d(TAG, "Looking up view injector for " + targetClass.getName());, +      if (debug) Log.d(TAG, "Looking up view injector for " + targetClass.getName());, +      if (debug) Log.d(TAG, "HIT: Cached in injector map.");, +      if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");, +      if (debug) Log.d(TAG, "HIT: Class loaded injection class.");, +      if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());, +      if (debug) Log.d(TAG, "HIT: Cached in injector map.");, +      if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");, +      if (debug) Log.d(TAG, "HIT: Class loaded injection class.");, +      if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());, +++ b/CHANGELOG.md, +Version 2.0.1 *(2013-07-18)*, +----------------------------, +, + * New: Control debug logging via `Views.setDebug`., +, +, +++ b/butterknife-sample/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, +      android:label="@string/app_name", +      android:name=".SimpleApp">, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +package com.example.butterknife;, +, +import android.app.Application;, +import butterknife.Views;]
[+++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "ESbreW4FNMPQhV1zbFb9iBvhFWFbVHecaig3Si3+4nrJCMn9x4nqB18ZcU+Aviw67WQNcuSH4I0Hl08uknl+kzE/xKEfPLmu28bptXRCSued49aL11i2aQmRj5nqP2yxkinhtRGOQxzIo56NmFt7sIcEXODM3D5a6q7s9tlvPfw=", +    - secure: "JWEeqx0CWBqAkjcREHUg3Ei8wxqp59HZag8EidSLwmekgPJQwipwuEeXMZyPCGJCP+4ijUirtS/hRApi37BW0LYdt+XR7dI1TSZ0HFLTLqSPfWfsUcjmGpmoqVUv8FLVhC+KA42YeEhqkEaCUW92gJeAyK8swxDqGHAPT/sfKRA="]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import java.lang.reflect.InvocationTargetException;, +      if (e instanceof InvocationTargetException) {, +        e = (Exception) e.getCause();, +      }]
[+++ b/build.gradle, +    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/build.gradle, +    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, +  static final ClassName CONTEXT_COMPAT =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +      if (bindNeedsView()) {, +      if (bindNeedsResource()) {, +        constructor.addStatement("$T res = context.getResources()", RESOURCES);, +          constructor.addStatement("target.$L = $T.getTintedDrawable(context, $L, $L)",, +          constructor.addStatement("target.$L = $T.getDrawable(context, $L)", binding.getName(),, +              CONTEXT_COMPAT, binding.getId().code);, +        constructor.addStatement("$L", binding.render());, +    return !(drawableBindings.isEmpty() && resourceBindings.isEmpty());, +      if (!binding.id.qualifed) {, +  /** True when this type's bindings use Resource directly instead of Context. */, +  private boolean hasResourceBindingsNeedingResource() {, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (binding.type.requiresResource) {, +  /** True if this binding requires Resources. Otherwise only Context is needed. */, +  private boolean bindNeedsResource() {, +    return hasResourceBindingsNeedingResource(), +        || hasParentBinding() && parentBinding.bindNeedsResource();, +  }, +, +++ b/build.gradle, +    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, +  static final ClassName CONTEXT_COMPAT =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +      if (bindNeedsView()) {, +      if (bindNeedsResource()) {, +        constructor.addStatement("$T res = context.getResources()", RESOURCES);, +          constructor.addStatement("target.$L = $T.getTintedDrawable(context, $L, $L)",, +          constructor.addStatement("target.$L = $T.getDrawable(context, $L)", binding.getName(),, +              CONTEXT_COMPAT, binding.getId().code);, +        constructor.addStatement("$L", binding.render());, +    return !(drawableBindings.isEmpty() && resourceBindings.isEmpty());, +      if (!binding.id.qualifed) {, +  /** True when this type's bindings use Resource directly instead of Context. */, +  private boolean hasResourceBindingsNeedingResource() {, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (binding.type.requiresResource) {, +  /** True if this binding requires Resources. Otherwise only Context is needed. */, +  private boolean bindNeedsResource() {, +    return hasResourceBindingsNeedingResource(), +        || hasParentBinding() && parentBinding.bindNeedsResource();, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    FieldResourceBinding binding =, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL);, +        isColorStateList ? FieldResourceBinding.Type.COLOR_STATE_LIST, +            : FieldResourceBinding.Type.COLOR);, +        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT);, +    FieldResourceBinding binding =, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP);, +    bindingClass.addResource(binding);, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT);, +    FieldResourceBinding binding =, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT);, +    FieldResourceBinding binding =, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING);, +    FieldResourceBinding.Type type = getArrayResourceMethodName(element);, +    if (type == null) {, +    FieldResourceBinding binding = new FieldResourceBinding(getId(id), name, type);, +  private static FieldResourceBinding.Type getArrayResourceMethodName(Element element) {, +      return FieldResourceBinding.Type.TYPED_ARRAY;, +        return FieldResourceBinding.Type.STRING_ARRAY;, +        return FieldResourceBinding.Type.INT_ARRAY;, +        return FieldResourceBinding.Type.TEXT_ARRAY;, +++ b/build.gradle, +    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, +  static final ClassName CONTEXT_COMPAT =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +      if (bindNeedsView()) {, +      if (bindNeedsResource()) {, +        constructor.addStatement("$T res = context.getResources()", RESOURCES);, +          constructor.addStatement("target.$L = $T.getTintedDrawable(context, $L, $L)",, +          constructor.addStatement("target.$L = $T.getDrawable(context, $L)", binding.getName(),, +              CONTEXT_COMPAT, binding.getId().code);, +        constructor.addStatement("$L", binding.render());, +    return !(drawableBindings.isEmpty() && resourceBindings.isEmpty());, +      if (!binding.id.qualifed) {, +  /** True when this type's bindings use Resource directly instead of Context. */, +  private boolean hasResourceBindingsNeedingResource() {, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (binding.type.requiresResource) {, +  /** True if this binding requires Resources. Otherwise only Context is needed. */, +  private boolean bindNeedsResource() {, +    return hasResourceBindingsNeedingResource(), +        || hasParentBinding() && parentBinding.bindNeedsResource();]
[+++ b/butterknife-sample/pom.xml, +    <version>5.1.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.0</version>, +++ b/butterknife/pom.xml, +    <version>5.1.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.0</version>, +++ b/butterknife/pom.xml, +    <version>5.1.0</version>, +++ b/pom.xml, +  <version>5.1.0</version>, +    <tag>butterknife-parent-5.1.0</tag>]
[+++ b/build.gradle, +      'androidTools': '26.2.0-rc03',, +    classpath 'com.android.tools.build:gradle:3.2.0', +++ b/build.gradle, +      'androidTools': '26.2.0-rc03',, +    classpath 'com.android.tools.build:gradle:3.2.0', +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "android.support.v4.view.ViewPager",, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    type = "android.support.v4.view.ViewPager.OnPageChangeListener",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/build.gradle, +      'androidTools': '26.2.0-rc03',, +    classpath 'com.android.tools.build:gradle:3.2.0', +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "android.support.v4.view.ViewPager",, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    type = "android.support.v4.view.ViewPager.OnPageChangeListener",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +  String typeAndroidX() default "";, +++ b/build.gradle, +      'androidTools': '26.2.0-rc03',, +    classpath 'com.android.tools.build:gradle:3.2.0', +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "android.support.v4.view.ViewPager",, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    type = "android.support.v4.view.ViewPager.OnPageChangeListener",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +  String typeAndroidX() default "";, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +      ClassName.get("android.support.annotation", "UiThread");, +  private static final ClassName UI_THREAD_ANDROIDX =, +      ClassName.get("android.support.annotation", "CallSuper");, +  private static final ClassName CALL_SUPER_ANDROIDX =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +  static final ClassName CONTEXT_COMPAT_ANDROIDX =, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);, +  private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {, +      result.addMethod(createBindingConstructorForView(useAndroidX));, +      result.addMethod(createBindingConstructorForActivity(useAndroidX));, +      result.addMethod(createBindingConstructorForDialog(useAndroidX));, +      result.addMethod(createBindingViewDelegateConstructor(useAndroidX));, +    result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));, +      result.addMethod(createBindingUnbindMethod(result, useAndroidX));, +  private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForView(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +        addViewBinding(constructor, binding, debuggable, useAndroidX);, +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, boolean useAndroidX) {, +      result.addAnnotation(useAndroidX ? CALL_SUPER_ANDROIDX : CALL_SUPER);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);, +      ViewBinding bindings, boolean useAndroidX) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));, +      String targetType = getTargetType(listenerClass, useAndroidX);, +  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {, +    String typeAndroidX = listenerClass.typeAndroidX();, +    if (useAndroidX && !typeAndroidX.isEmpty()) {, +      type = typeAndroidX;, +  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {, +    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();, +    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {, +      targetType = targetTypeAndroidX;, +      boolean useAndroidX) {, +    addMethodBindings(result, binding, debuggable, useAndroidX);, +      boolean useAndroidX) {, +          .superclass(ClassName.bestGuess(getType(listener, useAndroidX)));, +        TypeName listenerClassName = bestGuess(getType(listener, useAndroidX));, +      String targetType = getTargetType(listener, useAndroidX);, +++ b/build.gradle, +      'androidTools': '26.2.0-rc03',, +    classpath 'com.android.tools.build:gradle:3.2.0', +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "android.support.v4.view.ViewPager",, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    type = "android.support.v4.view.ViewPager.OnPageChangeListener",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +  String typeAndroidX() default "";, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +      ClassName.get("android.support.annotation", "UiThread");, +  private static final ClassName UI_THREAD_ANDROIDX =, +      ClassName.get("android.support.annotation", "CallSuper");, +  private static final ClassName CALL_SUPER_ANDROIDX =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +  static final ClassName CONTEXT_COMPAT_ANDROIDX =, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);]
[+++ b/butterknife-integration-test/src/androidTest/proguard.pro, +-dontnote **, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +-dontnote **, +++ b/butterknife-integration-test/src/main/proguard.pro, +-dontnote **, +-dontwarn **, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +-dontnote **, +++ b/butterknife-integration-test/src/main/proguard.pro, +-dontnote **, +-dontwarn **, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-integration-test/src/androidTest/proguard.pro, +-dontnote **, +++ b/butterknife-integration-test/src/main/proguard.pro, +-dontnote **, +-dontwarn **, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-bin.zip]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PRIVATE;, +    } else if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +            .addModifiers(isFinal ? PRIVATE : PROTECTED, STATIC);, +      result.addField(targetType, "target", isFinal ? PRIVATE : PROTECTED);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder();, +    if (!isFinal) {, +      constructor.addModifiers(PROTECTED);, +    }, +    if (hasMethodBindings()) {, +      constructor.addParameter(targetType, "target", FINAL);, +    } else {, +      constructor.addParameter(targetType, "target");, +    }, +, +    if (bindNeedsFinder()) {, +      constructor.addParameter(FINDER, "finder");, +      constructor.addParameter(Object.class, "source");, +    }, +    if (bindNeedsResources()) {, +      constructor.addParameter(RESOURCES, "res");, +    }, +    if (bindNeedsTheme()) {, +      constructor.addParameter(THEME, "theme");, +    }, +, +      CodeBlock.Builder invoke = CodeBlock.builder();, +      invoke.add("super(target");, +      if (parentBinding.bindNeedsFinder()) invoke.add(", finder, source");, +      if (parentBinding.bindNeedsResources()) invoke.add(", res");, +      if (parentBinding.bindNeedsTheme()) invoke.add(", theme");, +      constructor.addStatement("$L", invoke.add(")").build());, +    constructor.addCode("\n");, +, +    generateBindViewBody(constructor);, +, +  private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,, +    result.addField(VIEW, fieldName, PRIVATE);, +      boolean requiresRemoval = !"".equals(listenerClass.remover());, +        result.addField(listenerClassName, listenerField, PRIVATE);, +    if (isFinal && !isGeneratingUnbinder()) {, +      if (needsResources) {, +    }, +, +    CodeBlock.Builder invoke = CodeBlock.builder();, +    if (isGeneratingUnbinder()) {, +      invoke.add("return new $T", unbinderClassName);, +      invoke.add("$N", BIND_TO_TARGET);, +    }, +    invoke.add("(target");, +    if (!isGeneratingUnbinder()) {, +    if (!hasInheritedUnbinder() && hasParentBinding()) {, +      result.addStatement("$L = view", fieldName);, +        result.addStatement("this.$L = $L", listenerField, callback.build());, +            listener.setter(), requiresRemoval ? listenerField : callback.build());, +            requiresRemoval ? listenerField : callback.build());, +    return hasViewBindings() || hasInheritedUnbinder();, +    return hasParentBinding() && parentBinding.isGeneratingUnbinder();, +    return parentBinding.unbinderClassName;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PRIVATE;, +    } else if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +            .addModifiers(isFinal ? PRIVATE : PROTECTED, STATIC);, +      result.addField(targetType, "target", isFinal ? PRIVATE : PROTECTED);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder();, +    if (!isFinal) {, +      constructor.addModifiers(PROTECTED);, +    }, +    if (hasMethodBindings()) {, +      constructor.addParameter(targetType, "target", FINAL);, +    } else {, +      constructor.addParameter(targetType, "target");, +    }, +, +    if (bindNeedsFinder()) {, +      constructor.addParameter(FINDER, "finder");, +      constructor.addParameter(Object.class, "source");, +    }, +    if (bindNeedsResources()) {, +      constructor.addParameter(RESOURCES, "res");, +    }, +    if (bindNeedsTheme()) {, +      constructor.addParameter(THEME, "theme");, +    }, +, +      CodeBlock.Builder invoke = CodeBlock.builder();, +      invoke.add("super(target");, +      if (parentBinding.bindNeedsFinder()) invoke.add(", finder, source");, +      if (parentBinding.bindNeedsResources()) invoke.add(", res");, +      if (parentBinding.bindNeedsTheme()) invoke.add(", theme");, +      constructor.addStatement("$L", invoke.add(")").build());, +    constructor.addCode("\n");, +, +    generateBindViewBody(constructor);, +, +  private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,, +    result.addField(VIEW, fieldName, PRIVATE);, +      boolean requiresRemoval = !"".equals(listenerClass.remover());]
[+++ b/butterknife-sample/pom.xml, +    <version>5.1.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.1.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>5.1.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/gradle.properties, +, +org.gradle.jvmargs=-Xmx1536M]
[+++ b/build.gradle, +      'androidPlugin': '3.2.0-rc03',, +      'androidTools': '26.2.0-rc03',, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc03',, +      'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc03',, +      'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc03',, +      'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +, +  String typeAndroidX() default "";, +, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc03',, +      'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +, +  String typeAndroidX() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final BindingSet parentBinding;, +      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {, +        addViewBinding(constructor, binding, debuggable, useAndroidX);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);, +      ViewBinding bindings, boolean useAndroidX) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));, +      String targetType = getTargetType(listenerClass, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),, +  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {, +    String type = listenerClass.type();, +    String typeAndroidX = listenerClass.typeAndroidX();, +    if (useAndroidX && !typeAndroidX.isEmpty()) {, +      type = typeAndroidX;, +    }, +    return type;, +  }, +, +  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {, +    String targetType = listenerClass.targetType();, +    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();, +    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {, +      targetType = targetTypeAndroidX;, +    }, +    return targetType;, +  }, +, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,, +      boolean useAndroidX) {, +      FieldViewBinding fieldBinding = binding.getFieldBinding();, +    addMethodBindings(result, binding, debuggable, useAndroidX);, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,, +      boolean useAndroidX) {, +          .superclass(ClassName.bestGuess(getType(listener, useAndroidX)));, +        TypeName listenerClassName = bestGuess(getType(listener, useAndroidX));, +      String targetType = getTargetType(listener, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,, +        || parentBinding != null && parentBinding.constructorNeedsView();, +    private BindingSet parentBinding;, +    String findExistingBindingName(Id id) {, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc03',, +      'androidTools': '26.2.0-rc03',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +]
[+++ b/gradle.properties, +VERSION_NAME=8.5.2-SNAPSHOT]
[+++ b/butterknife-compiler/build.gradle, +++ b/butterknife-compiler/build.gradle, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-compiler/build.gradle, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Jun 23 16:29:33 PDT 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-milestone-1-bin.zip]
[+++ b/butterknife/proguard-rules.txt, +-keep public class * implements butterknife.Unbinder { public <init>(**, android.view.View); }]
[+++ b/butterknife-sample/pom.xml, +    <version>1.2.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.1</version>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.2.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.1</version>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +    <tag>butterknife-parent-1.2.1</tag>]
[+++ b/butterknife-sample/pom.xml, +    <version>5.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>5.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/CHANGELOG.md, +Version 1.2.2 *(2013-03-11)*, +----------------------------, +, + * Fix: Prevent annotations on private classes., +, +, +++ b/CHANGELOG.md, +Version 1.2.2 *(2013-03-11)*, +----------------------------, +, + * Fix: Prevent annotations on private classes., +, +, +++ b/butterknife/src/it/class-not-private/invoker.properties, +invoker.buildResult=failure, +++ b/CHANGELOG.md, +Version 1.2.2 *(2013-03-11)*, +----------------------------, +, + * Fix: Prevent annotations on private classes., +, +, +++ b/butterknife/src/it/class-not-private/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/class-not-private/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>class-not-private</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/CHANGELOG.md, +Version 1.2.2 *(2013-03-11)*, +----------------------------, +, + * Fix: Prevent annotations on private classes., +, +, +++ b/butterknife/src/it/class-not-private/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/class-not-private/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>class-not-private</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>]
[+++ b/CHANGELOG.md, +Version 8.8.0 *(2017-08-04)*, +----------------------------, +, + * New: Processor option `butterknife.debuggable` controls whether debug information is generated. When, +   specified as `false`, checks for required views being non-null are elided and casts are no longer guarded, +   with user-friendly error messages. This reduces the amount of generated code for release builds at the, +   expense of less friendly exceptions when something breaks., + * Deprecate the `findById` methods. Compile against API 26 and use the normal `findViewById` for the same, +   functionality., + * Fix: Correct `@BindFont` code generation on pre-API 26 builds to pass a `Context` (not a `Resources`) to, +   `ResourceCompat`., +, +, +++ b/CHANGELOG.md, +Version 8.8.0 *(2017-08-04)*, +----------------------------, +, + * New: Processor option `butterknife.debuggable` controls whether debug information is generated. When, +   specified as `false`, checks for required views being non-null are elided and casts are no longer guarded, +   with user-friendly error messages. This reduces the amount of generated code for release builds at the, +   expense of less friendly exceptions when something breaks., + * Deprecate the `findById` methods. Compile against API 26 and use the normal `findViewById` for the same, +   functionality., + * Fix: Correct `@BindFont` code generation on pre-API 26 builds to pass a `Context` (not a `Resources`) to, +   `ResourceCompat`., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0', +++ b/CHANGELOG.md, +Version 8.8.0 *(2017-08-04)*, +----------------------------, +, + * New: Processor option `butterknife.debuggable` controls whether debug information is generated. When, +   specified as `false`, checks for required views being non-null are elided and casts are no longer guarded, +   with user-friendly error messages. This reduces the amount of generated code for release builds at the, +   expense of less friendly exceptions when something breaks., + * Deprecate the `findById` methods. Compile against API 26 and use the normal `findViewById` for the same, +   functionality., + * Fix: Correct `@BindFont` code generation on pre-API 26 builds to pass a `Context` (not a `Resources`) to, +   `ResourceCompat`., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0', +++ b/gradle.properties]
[+++ b/butterknife/proguard-rules.txt, +-keep class butterknife.*, +-keepclasseswithmembernames class * { @butterknife.* <methods>; }, +-keepclasseswithmembernames class * { @butterknife.* <fields>; }]
[+++ b/gradle.properties, +VERSION_NAME=8.2.1-SNAPSHOT]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.support.annotation.FontRes;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +  @FontRes int value();, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.support.annotation.FontRes;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +  @FontRes int value();, +++ b/butterknife-annotations/src/main/java/butterknife/BindInt.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME)]
[+++ b/butterknife/src/it/optional/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>optional</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>4.10</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <version>2.1</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <version>1.0.4</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/butterknife/src/it/optional/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>optional</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>4.10</version>]
[+++ b/CHANGELOG.md, +Version 8.7.0 *(2017-07-07)*, +----------------------------, +, + * New: `@BindFont` annotation binds `Typeface` instances with an optional style. Requires support libraries, +   26.0.0-beta1 or newer., + * New: `@BindAnim` annotation binds `Animation` instances., + * New: Generate `R2` constants for animation, layout, menu, plurals, styles, and styleables., + * Fix: Properly catch and re-throw type cast exceptions when method binding arguments do not match., +, +, +++ b/CHANGELOG.md, +Version 8.7.0 *(2017-07-07)*, +----------------------------, +, + * New: `@BindFont` annotation binds `Typeface` instances with an optional style. Requires support libraries, +   26.0.0-beta1 or newer., + * New: `@BindAnim` annotation binds `Animation` instances., + * New: Generate `R2` constants for animation, layout, menu, plurals, styles, and styleables., + * Fix: Properly catch and re-throw type cast exceptions when method binding arguments do not match., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.7.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.7.0', +++ b/CHANGELOG.md, +Version 8.7.0 *(2017-07-07)*, +----------------------------, +, + * New: `@BindFont` annotation binds `Typeface` instances with an optional style. Requires support libraries, +   26.0.0-beta1 or newer., + * New: `@BindAnim` annotation binds `Animation` instances., + * New: Generate `R2` constants for animation, layout, menu, plurals, styles, and styleables., + * Fix: Properly catch and re-throw type cast exceptions when method binding arguments do not match., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.7.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.7.0', +++ b/gradle.properties, +VERSION_NAME=8.7.0]
[+++ /dev/null, +++ /dev/null, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +package butterknife.compiler;, +, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableMap;, +import com.squareup.javapoet.AnnotationSpec;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.WildcardTypeName;, +import java.lang.reflect.Field;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.TypeElement;, +, +import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;, +import static com.google.auto.common.MoreElements.getPackage;, +import static java.util.Collections.singletonList;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PRIVATE;, +import static javax.lang.model.element.Modifier.PUBLIC;, +, +/** A set of all the bindings requested by a single type. */, +final class BindingSet {, +  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  private static final ClassName VIEW = ClassName.get("android.view", "View");, +  private static final ClassName CONTEXT = ClassName.get("android.content", "Context");, +  private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");, +  private static final ClassName UI_THREAD =, +      ClassName.get("android.support.annotation", "UiThread");, +  private static final ClassName CALL_SUPER =, +      ClassName.get("android.support.annotation", "CallSuper");, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");, +  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, +  static final ClassName CONTEXT_COMPAT =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +, +  private final TypeName targetTypeName;, +  private final ClassName bindingClassName;, +  private final boolean isFinal;, +  private final List<ViewBindings> viewBindings;, +  private final Map<FieldCollectionViewBinding, List<Id>> collectionBindings;, +  private final List<FieldDrawableBinding> drawableBindings;, +  private final List<FieldResourceBinding> resourceBindings;, +  private final BindingSet parentBinding;, +, +  BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,, +      Collection<ViewBindings> viewBindings,, +      Map<FieldCollectionViewBinding, List<Id>> collectionBindings,, +      Collection<FieldDrawableBinding> drawableBindings,, +      Collection<FieldResourceBinding> resourceBindings, BindingSet parentBinding) {, +    this.isFinal = isFinal;, +    this.targetTypeName = targetTypeName;, +    this.bindingClassName = bindingClassName;, +    this.viewBindings = ImmutableList.copyOf(viewBindings);, +    this.collectionBindings = ImmutableMap.copyOf(collectionBindings);, +    this.drawableBindings = ImmutableList.copyOf(drawableBindings);, +    this.resourceBindings = ImmutableList.copyOf(resourceBindings);, +    this.parentBinding = parentBinding;, +  }, +, +  JavaFile brewJava() {, +    return JavaFile.builder(bindingClassName.packageName(), createType()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +        .build();, +  }, +, +  private TypeSpec createType() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName()), +        .addModifiers(PUBLIC);, +    if (isFinal) {, +      result.addModifiers(FINAL);, +    }, +, +    if (hasParentBinding()) {, +      result.superclass(getParentBinding());, +    } else {, +      result.addSuperinterface(UNBINDER);, +    }, +, +    if (needsTargetField()) {, +      result.addField(targetTypeName, "target", PRIVATE);, +    }, +, +    if (!needsView()) {]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import butterknife.internal.ButterKnifeProcessor;, +      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import butterknife.internal.ButterKnifeProcessor;, +      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +package butterknife.internal;, +, +import butterknife.InjectView;, +import butterknife.OnCheckedChanged;, +import butterknife.OnClick;, +import butterknife.OnEditorAction;, +import butterknife.OnFocusChanged;, +import butterknife.OnItemClick;, +import butterknife.OnItemLongClick;, +import butterknife.OnLongClick;, +import butterknife.Optional;, +import java.io.IOException;, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.io.Writer;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.Collection;, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import javax.annotation.processing.AbstractProcessor;, +import javax.annotation.processing.Filer;, +import javax.annotation.processing.ProcessingEnvironment;, +import javax.annotation.processing.RoundEnvironment;, +import javax.lang.model.SourceVersion;, +import javax.lang.model.element.Element;, +import javax.lang.model.element.ExecutableElement;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.TypeElement;, +import javax.lang.model.element.VariableElement;, +import javax.lang.model.type.DeclaredType;, +import javax.lang.model.type.TypeKind;, +import javax.lang.model.type.TypeMirror;, +import javax.lang.model.util.Elements;, +import javax.lang.model.util.Types;, +import javax.tools.JavaFileObject;, +, +import static javax.lang.model.element.ElementKind.CLASS;, +import static javax.lang.model.element.ElementKind.METHOD;, +import static javax.lang.model.element.Modifier.PRIVATE;, +import static javax.lang.model.element.Modifier.STATIC;, +import static javax.tools.Diagnostic.Kind.ERROR;, +, +public final class ButterKnifeProcessor extends AbstractProcessor {, +  public static final String SUFFIX = "$$ViewInjector";, +  static final String VIEW_TYPE = "android.view.View";, +  private static final Map<String, Listener> LISTENER_MAP = new LinkedHashMap<String, Listener>();, +  private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//, +      OnCheckedChanged.class, //, +      OnClick.class, //, +      OnEditorAction.class, //, +      OnFocusChanged.class, //, +      OnItemClick.class, //, +      OnItemLongClick.class, //, +      OnLongClick.class //, +  );, +, +  private Elements elementUtils;, +  private Types typeUtils;, +  private Filer filer;, +, +  @Override public synchronized void init(ProcessingEnvironment env) {, +    super.init(env);, +, +    elementUtils = env.getElementUtils();, +    typeUtils = env.getTypeUtils();, +    filer = env.getFiler();, +  }, +, +  @Override public Set<String> getSupportedAnnotationTypes() {, +    Set<String> supportTypes = new LinkedHashSet<String>();, +    supportTypes.add(InjectView.class.getCanonicalName());, +    for (Class<? extends Annotation> listener : LISTENERS) {, +      supportTypes.add(listener.getCanonicalName());, +    }, +, +    return supportTypes;, +  }, +, +  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {, +    Map<TypeElement, ViewInjector> targetClassMap = findAndParseTargets(env);, +, +    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {, +      TypeElement typeElement = entry.getKey();, +      ViewInjector viewInjector = entry.getValue();, +]
[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import java.util.concurrent.atomic.AtomicBoolean, +            configureR2Generation(project, featureVariants), +            configureR2Generation(project, libraryVariants), +        is LibraryPlugin -> {, +          project.extensions[LibraryExtension::class].run {, +            configureR2Generation(project, libraryVariants), +          }, +        }, +        is AppPlugin -> {, +          project.extensions[AppExtension::class].run {, +            configureR2Generation(project, applicationVariants), +          }, +        }, +  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {, +      val outputDir = project.buildDir.resolve(, +          "generated/source/r2/${variant.dirName}"), +, +      val task = project.tasks.create("generate${variant.name.capitalize()}R2"), +      task.outputs.dir(outputDir), +      variant.registerJavaGeneratingTask(task, outputDir), +, +      val once = AtomicBoolean(), +        task.dependsOn(processResources), +, +        // Though there might be multiple outputs, their R files are all the same. Thus, we only, +        // need to configure the task once with the R.java input and action., +        if (once.compareAndSet(false, true)) {, +          val rPackage = processResources.packageForR, +          val pathToR = rPackage.replace('.', File.separatorChar), +          task.apply {, +            inputs.file(rFile), +, +            doLast {, +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2"), +            }, +          }, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import java.util.concurrent.atomic.AtomicBoolean, +            configureR2Generation(project, featureVariants), +            configureR2Generation(project, libraryVariants), +        is LibraryPlugin -> {, +          project.extensions[LibraryExtension::class].run {, +            configureR2Generation(project, libraryVariants), +          }, +        }, +        is AppPlugin -> {, +          project.extensions[AppExtension::class].run {, +            configureR2Generation(project, applicationVariants), +          }, +        }, +  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {, +      val outputDir = project.buildDir.resolve(, +          "generated/source/r2/${variant.dirName}"), +, +      val task = project.tasks.create("generate${variant.name.capitalize()}R2"), +      task.outputs.dir(outputDir), +      variant.registerJavaGeneratingTask(task, outputDir), +, +      val once = AtomicBoolean(), +        task.dependsOn(processResources), +, +        // Though there might be multiple outputs, their R files are all the same. Thus, we only, +        // need to configure the task once with the R.java input and action., +        if (once.compareAndSet(false, true)) {, +          val rPackage = processResources.packageForR, +          val pathToR = rPackage.replace('.', File.separatorChar), +          task.apply {, +            inputs.file(rFile), +, +            doLast {, +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2"), +            }, +          }, +++ b/gradle.properties, +VERSION_NAME=8.7.1-SNAPSHOT]
[+++ b/README.md, +<dependency>, +  <groupId>com.jakewharton</groupId>, +  <artifactId>butterknife-compiler</artifactId>, +  <version>7.0.1</version>, +  <optional>true</optional>, +</dependency>, +buildscript {, +  repositories {, +    mavenCentral(), +  }, +, +  dependencies {, +    // ..., +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +  }, +}, +, +// ..., +, +dependencies {, +  apt 'com.jakewharton:butterknife-compiler:7.0.1', +}, +++ b/README.md, +<dependency>, +  <groupId>com.jakewharton</groupId>, +  <artifactId>butterknife-compiler</artifactId>, +  <version>7.0.1</version>, +  <optional>true</optional>, +</dependency>, +buildscript {, +  repositories {, +    mavenCentral(), +  }, +, +  dependencies {, +    // ..., +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +  }, +}, +, +// ..., +, +dependencies {, +  apt 'com.jakewharton:butterknife-compiler:7.0.1', +}, +++ b/butterknife-compiler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.jakewharton</groupId>, +    <artifactId>butterknife-parent</artifactId>, +    <version>7.0.2-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>butterknife-compiler</artifactId>, +  <name>Butter Knife Compiler</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.testing.compile</groupId>, +      <artifactId>compile-testing</artifactId>, +      <scope>test</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +  </dependencies>]
[+++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.0.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.0.0',, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.0.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.0.0',, +++ b/butterknife-integration-test/build.gradle, +apply plugin: 'com.android.application', +apply plugin: 'com.neenbedankt.android-apt', +, +android {, +  compileSdkVersion rootProject.ext.compileSdkVersion, +  buildToolsVersion rootProject.ext.buildToolsVersion, +, +  compileOptions {, +    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +    targetCompatibility = rootProject.ext.targetCompatibilityVersion, +  }, +, +  defaultConfig {, +    applicationId 'com.example.butterknife', +    minSdkVersion rootProject.ext.minSdkVersion, +    targetSdkVersion rootProject.ext.targetSdkVersion, +    versionCode 1, +    versionName '1.0.0', +  }, +, +  lintOptions {, +    textReport true, +    textOutput "stdout", +    checkAllWarnings true, +    warningsAsErrors true, +    showAll true, +    explainIssues true, +  }, +, +  buildTypes {, +    debug {, +      minifyEnabled true, +    }, +  }, +}, +, +dependencies {, +  compile project(':butterknife'), +  apt project(':butterknife-compiler'), +, +  testCompile deps.junit, +  testCompile deps.truth, +  testCompile deps.robolectric, +}, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.0.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.0.0',, +++ b/butterknife-integration-test/build.gradle, +apply plugin: 'com.android.application', +apply plugin: 'com.neenbedankt.android-apt', +, +android {, +  compileSdkVersion rootProject.ext.compileSdkVersion, +  buildToolsVersion rootProject.ext.buildToolsVersion, +, +  compileOptions {, +    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +    targetCompatibility = rootProject.ext.targetCompatibilityVersion, +  }, +, +  defaultConfig {, +    applicationId 'com.example.butterknife', +    minSdkVersion rootProject.ext.minSdkVersion, +    targetSdkVersion rootProject.ext.targetSdkVersion, +    versionCode 1, +    versionName '1.0.0', +  }, +, +  lintOptions {, +    textReport true, +    textOutput "stdout", +    checkAllWarnings true, +    warningsAsErrors true, +    showAll true, +    explainIssues true, +  }, +, +  buildTypes {, +    debug {, +      minifyEnabled true, +    }, +  }, +}, +, +dependencies {, +  compile project(':butterknife'), +  apt project(':butterknife-compiler'), +, +  testCompile deps.junit, +  testCompile deps.truth, +  testCompile deps.robolectric, +}, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java]
[+++ b/gradle.properties, +VERSION_NAME=10.0.1-SNAPSHOT]
[+++ b/gradle.properties, +VERSION_NAME=8.0.1-SNAPSHOT]
[+++ b/butterknife-sample/pom.xml, +    <version>6.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>6.0.0</version>, +++ b/butterknife/pom.xml, +    <version>6.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>6.0.0</version>, +++ b/butterknife/pom.xml, +    <version>6.0.0</version>, +++ b/pom.xml, +  <version>6.0.0</version>, +    <tag>butterknife-parent-6.0.0</tag>]
[+++ b/CHANGELOG.md, + * New listeners!, +   * `View`: `@OnLongClick` and `@OnFocusChanged`., +   * `TextView`: `@OnEditorAction`., +   * `AdapterView`: `@OnItemClick` and `@OnItemLongClick`., +   * `CompoundButton`: `@OnCheckedChanged`., +++ b/CHANGELOG.md, + * New listeners!, +   * `View`: `@OnLongClick` and `@OnFocusChanged`., +   * `TextView`: `@OnEditorAction`., +   * `AdapterView`: `@OnItemClick` and `@OnItemLongClick`., +   * `CompoundButton`: `@OnCheckedChanged`., +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnCheckedChanged, + * @see OnEditorAction, + * @see OnFocusChanged, + * @see OnItemLongClick, +++ b/CHANGELOG.md, + * New listeners!, +   * `View`: `@OnLongClick` and `@OnFocusChanged`., +   * `TextView`: `@OnEditorAction`., +   * `AdapterView`: `@OnItemClick` and `@OnItemLongClick`., +   * `CompoundButton`: `@OnCheckedChanged`., +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnCheckedChanged, + * @see OnEditorAction, + * @see OnFocusChanged, + * @see OnItemLongClick, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +package butterknife;, +, +import butterknife.internal.ListenerClass;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static android.widget.CompoundButton.OnCheckedChangeListener;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Annotation for methods which indicate that they should be called when a view is checked or, + * unchecked. Corresponds to adding a {@link OnCheckedChangeListener} to the views specified by, + * {@link #value()}., + * <pre><code>, + * {@literal @}OnCheckedChanged(R.id.example) void onChecked(boolean checked) {, + *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", LENGTH_SHORT).show();, + * }, + * </code></pre>, + * Any number of parameters from {@link OnCheckedChangeListener} may be used on the method., + *, + * @see OnCheckedChangeListener, + * @see Optional, + */, +@Retention(CLASS) @Target(METHOD), +@ListenerClass(OnCheckedChangeListener.class), +public @interface OnCheckedChanged {, +  int[] value();, +}, +++ b/CHANGELOG.md, + * New listeners!, +   * `View`: `@OnLongClick` and `@OnFocusChanged`., +   * `TextView`: `@OnEditorAction`., +   * `AdapterView`: `@OnItemClick` and `@OnItemLongClick`., +   * `CompoundButton`: `@OnCheckedChanged`., +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * @see OnCheckedChanged, + * @see OnEditorAction, + * @see OnFocusChanged, + * @see OnItemLongClick, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +package butterknife;, +, +import butterknife.internal.ListenerClass;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static android.widget.CompoundButton.OnCheckedChangeListener;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Annotation for methods which indicate that they should be called when a view is checked or, + * unchecked. Corresponds to adding a {@link OnCheckedChangeListener} to the views specified by, + * {@link #value()}., + * <pre><code>, + * {@literal @}OnCheckedChanged(R.id.example) void onChecked(boolean checked) {, + *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", LENGTH_SHORT).show();, + * }, + * </code></pre>, + * Any number of parameters from {@link OnCheckedChangeListener} may be used on the method., + *, + * @see OnCheckedChangeListener, + * @see Optional, + */, +@Retention(CLASS) @Target(METHOD), +@ListenerClass(OnCheckedChangeListener.class), +public @interface OnCheckedChanged {, +  int[] value();, +}, +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java]
[+++ b/butterknife-sample/pom.xml, +    <version>1.3.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.1</version>, +++ b/butterknife/pom.xml, +    <version>1.3.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.1</version>, +++ b/butterknife/pom.xml, +    <version>1.3.1</version>, +++ b/pom.xml, +  <version>1.3.1</version>, +    <tag>butterknife-parent-1.3.1</tag>]
[+++ b/CHANGELOG.md, +Version 8.3.0 *(2016-08-23)*, +----------------------------, +, + * New: Support for Jack compiler in application projects., + * Fix: Generate ~20% less code and ~40% less methods., + * Fix: Allow `@BindView` to reference types which are generated by other annotation processors., + * Experimental: The generated view binding class can now be used directly. This allows ProGuard shrinking,, +   optimization, and obfuscation to work without any rules being needed. For a class `Test`, the binding, +   class will be named `Test_ViewBinding`. Calling its constructor will bind the instance passed in, and, +   the create object is also the implementation of `Unbinder` that can be used to unbind the views., +   Note: The API of this generated code is subject to backwards-incompatible changes until v9.0., +, +, +++ b/CHANGELOG.md, +Version 8.3.0 *(2016-08-23)*, +----------------------------, +, + * New: Support for Jack compiler in application projects., + * Fix: Generate ~20% less code and ~40% less methods., + * Fix: Allow `@BindView` to reference types which are generated by other annotation processors., + * Experimental: The generated view binding class can now be used directly. This allows ProGuard shrinking,, +   optimization, and obfuscation to work without any rules being needed. For a class `Test`, the binding, +   class will be named `Test_ViewBinding`. Calling its constructor will bind the instance passed in, and, +   the create object is also the implementation of `Unbinder` that can be used to unbind the views., +   Note: The API of this generated code is subject to backwards-incompatible changes until v9.0., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.3.0', +  apt 'com.jakewharton:butterknife-compiler:8.3.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.3.0', +++ b/CHANGELOG.md, +Version 8.3.0 *(2016-08-23)*, +----------------------------, +, + * New: Support for Jack compiler in application projects., + * Fix: Generate ~20% less code and ~40% less methods., + * Fix: Allow `@BindView` to reference types which are generated by other annotation processors., + * Experimental: The generated view binding class can now be used directly. This allows ProGuard shrinking,, +   optimization, and obfuscation to work without any rules being needed. For a class `Test`, the binding, +   class will be named `Test_ViewBinding`. Calling its constructor will bind the instance passed in, and, +   the create object is also the implementation of `Unbinder` that can be used to unbind the views., +   Note: The API of this generated code is subject to backwards-incompatible changes until v9.0., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.3.0', +  apt 'com.jakewharton:butterknife-compiler:8.3.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.3.0', +++ b/gradle.properties, +VERSION_NAME=8.3.0]
[+++ b/butterknife/pom.xml, +++ b/butterknife/pom.xml, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/CHANGELOG.md, +Version 8.5.1 *(2017-01-24)*, +----------------------------, +, + * Fix: Tweak bundled ProGuard rules to only retain the two-argument constructor accessed via reflection., +, +, +++ b/CHANGELOG.md, +Version 8.5.1 *(2017-01-24)*, +----------------------------, +, + * Fix: Tweak bundled ProGuard rules to only retain the two-argument constructor accessed via reflection., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.5.1', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.1', +++ b/CHANGELOG.md, +Version 8.5.1 *(2017-01-24)*, +----------------------------, +, + * Fix: Tweak bundled ProGuard rules to only retain the two-argument constructor accessed via reflection., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.5.1', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.1', +++ b/gradle.properties, +VERSION_NAME=8.5.1]
[+++ b/CHANGELOG.md, +Version 9.0.0 *(2019-01-03)*, +----------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, +   AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, +   required for the generated code but does not contain the code to reflectively look up the generated, +   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, +   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, +   remain in the old `butterknife` artifact., + , + * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation, +   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged, +   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more, +   information. Currently about 90% of functionality is covered. File bugs for anything that does not work., +, +   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to, +   having this be a default. As of AGP 3.2 there is no reason not to do this., +, + * New: Lint checks have been ported to UAST and now work on Kotlin code., +, + * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This, +   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older)., + * Use Java 8 bytecode for all artifacts as announced in RC1 release notes., + * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`., + * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities., + * Fix: Correct generated resource annotation names when running Turkish locale., + * Fix: Use the application ID instead of the resource package for generating `R2`., + * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy, +   multiple times., + * Deprecated methods from 8.x have been removed., +, +, +++ b/CHANGELOG.md, +Version 9.0.0 *(2019-01-03)*, +----------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, +   AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, +   required for the generated code but does not contain the code to reflectively look up the generated, +   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, +   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, +   remain in the old `butterknife` artifact., + , + * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation, +   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged, +   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more, +   information. Currently about 90% of functionality is covered. File bugs for anything that does not work., +, +   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to, +   having this be a default. As of AGP 3.2 there is no reason not to do this., +, + * New: Lint checks have been ported to UAST and now work on Kotlin code., +, + * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This, +   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older)., + * Use Java 8 bytecode for all artifacts as announced in RC1 release notes., + * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`., + * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities., + * Fix: Correct generated resource annotation names when running Turkish locale., + * Fix: Use the application ID instead of the resource package for generating `R2`., + * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy, +   multiple times., + * Deprecated methods from 8.x have been removed., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:9.0.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0', +++ b/CHANGELOG.md, +Version 9.0.0 *(2019-01-03)*, +----------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, +   AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, +   required for the generated code but does not contain the code to reflectively look up the generated, +   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, +   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, +   remain in the old `butterknife` artifact., + , + * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation, +   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged, +   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more, +   information. Currently about 90% of functionality is covered. File bugs for anything that does not work., +, +   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to, +   having this be a default. As of AGP 3.2 there is no reason not to do this., +, + * New: Lint checks have been ported to UAST and now work on Kotlin code., +, + * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This, +   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older)., + * Use Java 8 bytecode for all artifacts as announced in RC1 release notes.]
[+++ b/butterknife-sample/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, +  repositories.maven {, +    url = file.toURI(), +  }, +}, +, +++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, +  repositories.maven {, +    url = file.toURI(), +  }, +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, +  repositories.maven {, +    url = file.toURI(), +  }, +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-2-all.zip]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        boolean hasReturnValue = false;, +        Set<MethodViewBinding> methodViewBindings = methodBindings.get(method);, +        if (methodViewBindings != null) {, +          for (MethodViewBinding methodBinding : methodViewBindings) {, +            if (methodBinding.hasReturnValue()) {, +              hasReturnValue = true;, +              builder.add("return "); // TODO what about multiple methods?, +, +        if (!"void".equals(method.returnType()) && !hasReturnValue) {, +          builder.add("return $L;\n", method.defaultReturn());, +        }, +, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, + * <p>, + * If the return type of the method is {@code void}, true will be returned from the listener., +        defaultReturn = "true", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        boolean hasReturnValue = false;, +        Set<MethodViewBinding> methodViewBindings = methodBindings.get(method);, +        if (methodViewBindings != null) {, +          for (MethodViewBinding methodBinding : methodViewBindings) {, +            if (methodBinding.hasReturnValue()) {, +              hasReturnValue = true;, +              builder.add("return "); // TODO what about multiple methods?, +, +        if (!"void".equals(method.returnType()) && !hasReturnValue) {, +          builder.add("return $L;\n", method.defaultReturn());, +        }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    String returnTypeString = returnType.toString();]
[+++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +++ b/butterknife-runtime/src/test/java/butterknife/UtilsTest.java, +package butterknife;, +, +import butterknife.internal.Utils;, +import org.junit.Test;, +, +import static butterknife.internal.Utils.arrayFilteringNull;, +import static butterknife.internal.Utils.listFilteringNull;, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.fail;, +, +public final class UtilsTest {, +  @Test public void listOfFiltersNull() {, +    assertThat(listFilteringNull(null, null, null)).isEmpty();, +    assertThat(listFilteringNull("One", null, null)).containsExactly("One");, +    assertThat(listFilteringNull(null, "One", null)).containsExactly("One");, +    assertThat(listFilteringNull(null, null, "One")).containsExactly("One");, +    assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");, +    assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");, +    assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");, +  }, +, +  @Test public void arrayOfFiltersNull() {, +    assertThat(arrayFilteringNull(null, null, null)).isEmpty();, +    assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");, +    assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");, +    assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");, +    assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");, +    assertThat(arrayFilteringNull("One", null, "Two")).asList().containsExactly("One", "Two");, +    assertThat(arrayFilteringNull(null, "One", "Two")).asList().containsExactly("One", "Two");, +  }, +, +  @Test public void testCastParam() {, +    try {, +      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);, +      fail();, +    } catch (IllegalStateException ise) {, +      assertThat(ise.getMessage()).isEqualTo(, +          "Parameter #4 of method 'Foo' was of the wrong type for parameter #5 of method 'foo()'. See cause for more info.");, +    }, +  }, +}]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +, +  String typeAndroidX() default "";, +, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +, +  String typeAndroidX() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable, useAndroidX);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);, +      ViewBinding bindings, boolean useAndroidX) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));, +      String targetType = getTargetType(listenerClass, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),, +  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {, +    String type = listenerClass.type();, +    String typeAndroidX = listenerClass.typeAndroidX();, +    if (useAndroidX && !typeAndroidX.isEmpty()) {, +      type = typeAndroidX;, +    }, +    return type;, +  }, +, +  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {, +    String targetType = listenerClass.targetType();, +    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();, +    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {, +      targetType = targetTypeAndroidX;, +    }, +    return targetType;, +  }, +, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,, +      boolean useAndroidX) {, +    addMethodBindings(result, binding, debuggable, useAndroidX);, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,, +      boolean useAndroidX) {, +          .superclass(ClassName.bestGuess(getType(listener, useAndroidX)));, +        TypeName listenerClassName = bestGuess(getType(listener, useAndroidX));, +      String targetType = getTargetType(listener, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",, +    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String targetTypeAndroidX() default "";, +, +  String typeAndroidX() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable, useAndroidX);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);, +      ViewBinding bindings, boolean useAndroidX) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));, +      String targetType = getTargetType(listenerClass, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),, +  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {, +    String type = listenerClass.type();, +    String typeAndroidX = listenerClass.typeAndroidX();, +    if (useAndroidX && !typeAndroidX.isEmpty()) {, +      type = typeAndroidX;, +    }, +    return type;, +  }, +, +  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {, +    String targetType = listenerClass.targetType();, +    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();, +    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {, +      targetType = targetTypeAndroidX;, +    }, +    return targetType;, +  }, +, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,, +      boolean useAndroidX) {, +    addMethodBindings(result, binding, debuggable, useAndroidX);, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,, +      boolean useAndroidX) {, +          .superclass(ClassName.bestGuess(getType(listener, useAndroidX)));, +        TypeName listenerClassName = bestGuess(getType(listener, useAndroidX));, +      String targetType = getTargetType(listener, useAndroidX);, +      if (!VIEW_TYPE.equals(targetType)) {, +        result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,, +++ b/butterknife-runtime/build.gradle]
[+++ b/gradle.properties, +VERSION_NAME=10.0.0-SNAPSHOT]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.google.common.collect.ImmutableSet;, +  private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";, +, +  private boolean debuggable = true;, +    debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));, +, +    return ImmutableSet.of(OPTION_SDK_INT, OPTION_DEBUGGABLE);, +      JavaFile javaFile = binding.brewJava(sdk, debuggable);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.google.common.collect.ImmutableSet;, +  private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";, +, +  private boolean debuggable = true;, +    debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));, +]
[+++ b/.travis.yml, +before_install:, +  # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/.travis.yml, +before_install:, +  # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import java.util.concurrent.atomic.AtomicBoolean, +            configureR2Generation(project, featureVariants), +            configureR2Generation(project, libraryVariants), +        is LibraryPlugin -> {, +          project.extensions[LibraryExtension::class].run {, +            configureR2Generation(project, libraryVariants), +          }, +        }, +        is AppPlugin -> {, +          project.extensions[AppExtension::class].run {, +            configureR2Generation(project, applicationVariants), +          }, +        }, +  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {, +      val outputDir = project.buildDir.resolve(, +          "generated/source/r2/${variant.dirName}"), +, +      val task = project.tasks.create("generate${variant.name.capitalize()}R2"), +      task.outputs.dir(outputDir), +      variant.registerJavaGeneratingTask(task, outputDir), +, +      val once = AtomicBoolean(), +        task.dependsOn(processResources), +, +        // Though there might be multiple outputs, their R files are all the same. Thus, we only, +        // need to configure the task once with the R.java input and action., +        if (once.compareAndSet(false, true)) {, +          val rPackage = processResources.packageForR, +          val pathToR = rPackage.replace('.', File.separatorChar), +          task.apply {, +            inputs.file(rFile), +, +            doLast {, +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2"), +            }, +          }, +++ b/.travis.yml, +before_install:, +  # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import java.util.concurrent.atomic.AtomicBoolean, +            configureR2Generation(project, featureVariants), +            configureR2Generation(project, libraryVariants), +        is LibraryPlugin -> {, +          project.extensions[LibraryExtension::class].run {, +            configureR2Generation(project, libraryVariants), +          }, +        }, +        is AppPlugin -> {, +          project.extensions[AppExtension::class].run {, +            configureR2Generation(project, applicationVariants), +          }, +        }, +  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {, +      val outputDir = project.buildDir.resolve(, +          "generated/source/r2/${variant.dirName}"), +, +      val task = project.tasks.create("generate${variant.name.capitalize()}R2"), +      task.outputs.dir(outputDir), +      variant.registerJavaGeneratingTask(task, outputDir), +, +      val once = AtomicBoolean(), +        task.dependsOn(processResources), +, +        // Though there might be multiple outputs, their R files are all the same. Thus, we only, +        // need to configure the task once with the R.java input and action., +        if (once.compareAndSet(false, true)) {, +          val rPackage = processResources.packageForR, +          val pathToR = rPackage.replace('.', File.separatorChar), +          task.apply {, +            inputs.file(rFile), +, +            doLast {, +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2"), +            }]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final TypeName targetTypeName;, +  BindingClass(String classPackage, String className, boolean isFinal, TypeName targetTypeName,, +    this.targetTypeName = targetTypeName;, +        .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +            .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final TypeName targetTypeName;, +  BindingClass(String classPackage, String className, boolean isFinal, TypeName targetTypeName,, +    this.targetTypeName = targetTypeName;, +        .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +            .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.ParameterizedTypeName;, +      TypeName targetType = TypeName.get(enclosingElement.asType());, +      if (targetType instanceof ParameterizedTypeName) {, +        targetType = ((ParameterizedTypeName) targetType).rawType;, +      }, +      String targetPackage = getPackageName(enclosingElement);, +, +      String className = getClassName(enclosingElement, targetPackage) + BINDING_CLASS_SUFFIX;, +      bindingClass = new BindingClass(targetPackage, className, isFinal, targetType, classFqcn);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final TypeName targetTypeName;, +  BindingClass(String classPackage, String className, boolean isFinal, TypeName targetTypeName,, +    this.targetTypeName = targetTypeName;, +        .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +            .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.ParameterizedTypeName;, +      TypeName targetType = TypeName.get(enclosingElement.asType());, +      if (targetType instanceof ParameterizedTypeName) {, +        targetType = ((ParameterizedTypeName) targetType).rawType;, +      }, +      String targetPackage = getPackageName(enclosingElement);, +, +      String className = getClassName(enclosingElement, targetPackage) + BINDING_CLASS_SUFFIX;, +      bindingClass = new BindingClass(targetPackage, className, isFinal, targetType, classFqcn);, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +, +  @Test public void bindingViewInnerClass() {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer",, +        Joiner.on('\n').join(, +            "package test;",, +            "import android.app.Activity;",, +            "import android.view.View;",, +            "import butterknife.BindView;",, +            "public class Outer {",, +            "  public static class Test extends Activity {",, +            "    @BindView(1) View thing;",, +            "  }",, +            "}", +        ));, +, +    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Outer$Test$$ViewBinder", "", +        + "package test;\n", +        + "import android.view.View;\n", +        + "import butterknife.Unbinder;\n", +        + "import butterknife.internal.Finder;\n", +        + "import butterknife.internal.ViewBinder;\n", +        + "import java.lang.IllegalStateException;\n", +        + "import java.lang.Object;\n", +        + "import java.lang.Override;\n", +        + "public class Outer$Test$$ViewBinder<T extends Outer.Test> implements ViewBinder<T> {\n", +        + "  @Override\n", +        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n", +        + "    InnerUnbinder unbinder = createUnbinder(target);\n", +        + "    View view;\n", +        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n", +        + "    target.thing = view;\n", +        + "    return unbinder;\n", +        + "  }\n", +        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n", +        + "    return new InnerUnbinder(target);\n", +        + "  }\n", +        + "  protected static class InnerUnbinder<T extends Outer.Test> implements Unbinder {\n", +        + "    private T target;\n", +        + "    protected InnerUnbinder(T target) {\n", +        + "      this.target = target;\n", +        + "    }\n", +        + "    @Override\n", +        + "    public final void unbind() {\n", +        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n", +        + "      unbind(target);\n", +        + "      target = null;\n", +        + "    }\n", +        + "    protected void unbind(T target) {\n", +        + "      target.thing = null;\n", +        + "    }\n", +        + "  }\n", +        + "}");, +, +    assertAbout(javaSource()).that(source), +        .processedWith(new ButterKnifeProcessor()), +        .compilesWithoutError(), +        .and(), +        .generatesSources(expectedSource);, +  }, +, +  @Test public void bindingViewUppercasePackageName() {]
[+++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"), +++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java, +@ListenerClass("android.widget.AdapterView.OnItemLongClickListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"), +++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java, +@ListenerClass("android.widget.AdapterView.OnItemLongClickListener"), +++ b/butterknife/src/main/java/butterknife/OnLongClick.java, +@ListenerClass("android.view.View.OnLongClickListener"), +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"), +++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java, +@ListenerClass("android.widget.AdapterView.OnItemLongClickListener"), +++ b/butterknife/src/main/java/butterknife/OnLongClick.java, +@ListenerClass("android.view.View.OnLongClickListener"), +++ b/butterknife/src/main/java/butterknife/internal/InjectViewProcessor.java, +  private static final Map<String, Listener> LISTENER_MAP = new LinkedHashMap<String, Listener>();, +    String listenerElement = listenerClass.value();, +    Listener listener = LISTENER_MAP.get(listenerElement);, +        listener = Listener.from(elementUtils.getTypeElement(listenerElement), typeUtils);, +        LISTENER_MAP.put(listenerElement, listener);, +            e.getMessage(), listenerElement, annotationClass.getName());, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, +@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +@ListenerClass("android.view.View.OnClickListener"), +++ b/butterknife/src/main/java/butterknife/OnEditorAction.java, +@ListenerClass("android.widget.TextView.OnEditorActionListener"), +++ b/butterknife/src/main/java/butterknife/OnFocusChanged.java, +@ListenerClass("android.view.View.OnFocusChangeListener"), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +@ListenerClass("android.widget.AdapterView.OnItemClickListener"), +++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java, +@ListenerClass("android.widget.AdapterView.OnItemLongClickListener"), +++ b/butterknife/src/main/java/butterknife/OnLongClick.java, +@ListenerClass("android.view.View.OnLongClickListener"), +++ b/butterknife/src/main/java/butterknife/internal/InjectViewProcessor.java, +  private static final Map<String, Listener> LISTENER_MAP = new LinkedHashMap<String, Listener>();, +    String listenerElement = listenerClass.value();, +    Listener listener = LISTENER_MAP.get(listenerElement);, +        listener = Listener.from(elementUtils.getTypeElement(listenerElement), typeUtils);, +        LISTENER_MAP.put(listenerElement, listener);, +            e.getMessage(), listenerElement, annotationClass.getName());, +++ b/butterknife/src/main/java/butterknife/internal/Listener.java, +import javax.lang.model.element.Element;]
[+++ b/.travis.yml, +  # Install the rest of tools (e.g., avdmanager), +  - sdkmanager tools, +  # Install the system image, +  - sdkmanager "system-images;android-18;default;armeabi-v7a", +  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", +  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/.travis.yml, +  # Install the rest of tools (e.g., avdmanager), +  - sdkmanager tools, +  # Install the system image, +  - sdkmanager "system-images;android-18;default;armeabi-v7a", +  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", +  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/CHANGELOG.md, +++ b/.travis.yml, +  # Install the rest of tools (e.g., avdmanager), +  - sdkmanager tools, +  # Install the system image, +  - sdkmanager "system-images;android-18;default;armeabi-v7a", +  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", +  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/CHANGELOG.md, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0', +++ b/.travis.yml, +  # Install the rest of tools (e.g., avdmanager), +  - sdkmanager tools, +  # Install the system image, +  - sdkmanager "system-images;android-18;default;armeabi-v7a", +  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", +  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/CHANGELOG.md, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +++ b/.travis.yml, +  # Install the rest of tools (e.g., avdmanager), +  - sdkmanager tools, +  # Install the system image, +  - sdkmanager "system-images;android-18;default;armeabi-v7a", +  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", +  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/CHANGELOG.md, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +++ b/butterknife/src/test/java/butterknife/BindViewTest.java, +++ b/.travis.yml, +  # Install the rest of tools (e.g., avdmanager), +  - sdkmanager tools, +  # Install the system image, +  - sdkmanager "system-images;android-18;default;armeabi-v7a", +  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", +  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/CHANGELOG.md, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +++ b/butterknife/src/test/java/butterknife/BindViewTest.java, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/.travis.yml, +  # Install the rest of tools (e.g., avdmanager), +  - sdkmanager tools, +  # Install the system image, +  - sdkmanager "system-images;android-18;default;armeabi-v7a", +  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a", +  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &, +++ b/CHANGELOG.md, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +++ b/butterknife/src/test/java/butterknife/BindViewTest.java, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-2-all.zip]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    return getViewBinder(target).bind(Finder.ACTIVITY, target, target);, +    return getViewBinder(target).bind(Finder.VIEW, target, target);, +    return getViewBinder(target).bind(Finder.DIALOG, target, target);, +    return getViewBinder(target).bind(Finder.VIEW, target, source);, +    return getViewBinder(target).bind(Finder.VIEW, target, source);, +    return getViewBinder(target).bind(Finder.DIALOG, target, source);, +  static ViewBinder<Object> getViewBinder(@NonNull Object target) {, +    return findViewBinderForClass(targetClass);, +  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls) {, +    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type., +    } catch (InstantiationException e) {, +      throw new RuntimeException("Unable to create view binder for " + clsName, e);, +    } catch (IllegalAccessException e) {, +      throw new RuntimeException("Unable to create view binder for " + clsName, e);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    return getViewBinder(target).bind(Finder.ACTIVITY, target, target);, +    return getViewBinder(target).bind(Finder.VIEW, target, target);, +    return getViewBinder(target).bind(Finder.DIALOG, target, target);, +    return getViewBinder(target).bind(Finder.VIEW, target, source);, +    return getViewBinder(target).bind(Finder.VIEW, target, source);, +    return getViewBinder(target).bind(Finder.DIALOG, target, source);, +  static ViewBinder<Object> getViewBinder(@NonNull Object target) {, +    return findViewBinderForClass(targetClass);, +  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls) {, +    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type., +    } catch (InstantiationException e) {, +      throw new RuntimeException("Unable to create view binder for " + clsName, e);, +    } catch (IllegalAccessException e) {, +      throw new RuntimeException("Unable to create view binder for " + clsName, e);, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +    assertThat(ButterKnife.getViewBinder(example)).isSameAs(ButterKnife.NOP_VIEW_BINDER);]
[+++ b/butterknife-sample/pom.xml, +    <version>5.1.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.1</version>, +++ b/butterknife/pom.xml, +    <version>5.1.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.1</version>, +++ b/butterknife/pom.xml, +    <version>5.1.1</version>, +++ b/pom.xml, +  <version>5.1.1</version>, +    <tag>butterknife-parent-5.1.1</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    return getViewBinder(target).bind(Finder.ACTIVITY, target, target);, +    return getViewBinder(target).bind(Finder.VIEW, target, target);, +    return getViewBinder(target).bind(Finder.DIALOG, target, target);, +    return getViewBinder(target).bind(Finder.VIEW, target, source);, +    return getViewBinder(target).bind(Finder.VIEW, target, source);, +    return getViewBinder(target).bind(Finder.DIALOG, target, source);, +  static ViewBinder<Object> getViewBinder(@NonNull Object target) {, +    return findViewBinderForClass(targetClass);, +  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls) {, +    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type., +    } catch (InstantiationException e) {, +      throw new RuntimeException("Unable to create view binder for " + clsName, e);, +    } catch (IllegalAccessException e) {, +      throw new RuntimeException("Unable to create view binder for " + clsName, e);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    return getViewBinder(target).bind(Finder.ACTIVITY, target, target);, +    return getViewBinder(target).bind(Finder.VIEW, target, target);, +    return getViewBinder(target).bind(Finder.DIALOG, target, target);, +    return getViewBinder(target).bind(Finder.VIEW, target, source);, +    return getViewBinder(target).bind(Finder.VIEW, target, source);, +    return getViewBinder(target).bind(Finder.DIALOG, target, source);, +  static ViewBinder<Object> getViewBinder(@NonNull Object target) {, +    return findViewBinderForClass(targetClass);, +  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls) {, +    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type., +    } catch (InstantiationException e) {, +      throw new RuntimeException("Unable to create view binder for " + clsName, e);, +    } catch (IllegalAccessException e) {, +      throw new RuntimeException("Unable to create view binder for " + clsName, e);, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +    assertThat(ButterKnife.getViewBinder(example)).isSameAs(ButterKnife.NOP_VIEW_BINDER);]
[+++ b/butterknife-sample/pom.xml, +    <version>7.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>7.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>7.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>7.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>7.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>7.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/build.gradle, +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +      classpath 'com.android.tools.build:gradle:2.2.0', +    androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/build.gradle, +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +      classpath 'com.android.tools.build:gradle:2.2.0', +    androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, +  annotationProcessor project(':butterknife-compiler'), +++ b/build.gradle, +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +      classpath 'com.android.tools.build:gradle:2.2.0', +    androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, +  annotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +++ b/build.gradle, +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +      classpath 'com.android.tools.build:gradle:2.2.0', +    androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, +  annotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +    View root = View.inflate(context, R.layout.simple_list_item, null);, +++ b/build.gradle, +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +      classpath 'com.android.tools.build:gradle:2.2.0', +    androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, +  annotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +    View root = View.inflate(context, R.layout.simple_list_item, null);, +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +++ b/build.gradle, +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +      classpath 'com.android.tools.build:gradle:2.2.0', +    androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, +  annotationProcessor project(':butterknife-compiler'), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +    View root = View.inflate(context, R.layout.simple_list_item, null);, +++ b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +++ b/butterknife/build.gradle, +  testCompile files(getRuntimeJar()), +def getRuntimeJar() {, +  try {, +    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();, +    File runtimeJar = new File(javaBase, "lib/rt.jar");, +    if (runtimeJar.exists()) {, +      return runtimeJar;, +    }, +    runtimeJar = new File(javaBase, "jre/lib/rt.jar");, +    return runtimeJar.exists() ? runtimeJar : null;, +  } catch (IOException e) {, +    throw new RuntimeException(e);, +  }, +}, +, +++ b/build.gradle, +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +      classpath 'com.android.tools.build:gradle:2.2.0', +    androidGradle: 'com.android.tools.build:gradle:2.2.0',, +++ b/butterknife-integration-test/build.gradle, +  annotationProcessor project(':butterknife-compiler')]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +        int tintAttributeId = binding.getTintAttributeId().value;, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId);, +              UTILS, binding.getId().code);, +              UTILS, binding.getMethod(), binding.getId().code);, +              binding.getId().code);, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +        int tintAttributeId = binding.getTintAttributeId().value;, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId);, +              UTILS, binding.getId().code);, +              UTILS, binding.getMethod(), binding.getId().code);, +              binding.getId().code);, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.value) {, +            ClassName rClassName = ClassName.get(packageName, "R", className);, +            VarScanner scanner = new VarScanner(ids, rClassName);, +    private final ClassName className;, +    private VarScanner(Map<Integer, Id> ids, ClassName className) {, +        String resourceName = jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, className, resourceName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +        int tintAttributeId = binding.getTintAttributeId().value;, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId);, +              UTILS, binding.getId().code);, +              UTILS, binding.getMethod(), binding.getId().code);, +              binding.getId().code);, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.value) {, +            ClassName rClassName = ClassName.get(packageName, "R", className);, +            VarScanner scanner = new VarScanner(ids, rClassName);, +    private final ClassName className;, +    private VarScanner(Map<Integer, Id> ids, ClassName className) {, +        String resourceName = jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, className, resourceName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +, +  final int value;, +  final CodeBlock code;, +  Id(int value) {, +    this.value = value;, +    this.code = CodeBlock.of("$L", value);, +  Id(int value, ClassName className, String resourceName) {, +    this.value = value;, +    this.code = CodeBlock.of("$T.$N", className, resourceName);, +    return o instanceof Id && value == ((Id) o).value;, +    return value;, +    return String.valueOf(value);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +        int tintAttributeId = binding.getTintAttributeId().value;, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId);, +              UTILS, binding.getId().code);, +              UTILS, binding.getMethod(), binding.getId().code);, +              binding.getId().code);, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.value) {, +            ClassName rClassName = ClassName.get(packageName, "R", className);, +            VarScanner scanner = new VarScanner(ids, rClassName);, +    private final ClassName className;, +    private VarScanner(Map<Integer, Id> ids, ClassName className) {, +        String resourceName = jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, className, resourceName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +, +  final int value;, +  final CodeBlock code;, +  Id(int value) {, +    this.value = value;, +    this.code = CodeBlock.of("$L", value);, +  Id(int value, ClassName className, String resourceName) {, +    this.value = value;, +    this.code = CodeBlock.of("$T.$N", className, resourceName);, +    return o instanceof Id && value == ((Id) o).value;, +    return value;, +    return String.valueOf(value);, +++ b/butterknife-compiler/src/test/java/butterknife/RClassTest.java, +        + "    target.one = res.getInteger(R.integer.res);\n", +        + "    target.bool = res.getBoolean(R.bool.res);\n"]
[+++ b/butterknife-sample/pom.xml, +    <version>3.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>3.0.0</version>, +++ b/butterknife/pom.xml, +    <version>3.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>3.0.0</version>, +++ b/butterknife/pom.xml, +    <version>3.0.0</version>, +++ b/pom.xml, +  <version>3.0.0</version>, +    <tag>butterknife-parent-3.0.0</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** An action that can be applied to a list of views. */, +  /** A setter that can apply a value to a list of views. */, +   * Inject annotated fields and methods in the specified {@link Activity}. The current content, +   * view is used as the view root., +   * Inject annotated fields and methods in the specified {@link View}. The view and its children, +   * are used as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link Activity} as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link View} as the view root., +   * Reset fields annotated with {@link InjectView @InjectView} and {@link InjectViews @InjectViews}, +   * to {@code null}., +   * This should only be used in the {@code onDestroyView} method of a fragment., +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** An action that can be applied to a list of views. */, +  /** A setter that can apply a value to a list of views. */, +   * Inject annotated fields and methods in the specified {@link Activity}. The current content, +   * view is used as the view root., +   * Inject annotated fields and methods in the specified {@link View}. The view and its children, +   * are used as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link Activity} as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link View} as the view root., +   * Reset fields annotated with {@link InjectView @InjectView} and {@link InjectViews @InjectViews}, +   * to {@code null}., +   * This should only be used in the {@code onDestroyView} method of a fragment., +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., +  /** View ID to which the field will be bound. */, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** An action that can be applied to a list of views. */, +  /** A setter that can apply a value to a list of views. */, +   * Inject annotated fields and methods in the specified {@link Activity}. The current content, +   * view is used as the view root., +   * Inject annotated fields and methods in the specified {@link View}. The view and its children, +   * are used as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link Activity} as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link View} as the view root., +   * Reset fields annotated with {@link InjectView @InjectView} and {@link InjectViews @InjectViews}, +   * to {@code null}., +   * This should only be used in the {@code onDestroyView} method of a fragment., +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., +  /** View ID to which the field will be bound. */, +++ b/butterknife/src/main/java/butterknife/InjectViews.java, + * Bind a field to the view for each ID specified in a {@link List} or array. Each view will, + * automatically be cast to the list or array type., +  /** View IDs to which the field will be bound. */, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** An action that can be applied to a list of views. */, +  /** A setter that can apply a value to a list of views. */, +   * Inject annotated fields and methods in the specified {@link Activity}. The current content, +   * view is used as the view root., +   * Inject annotated fields and methods in the specified {@link View}. The view and its children, +   * are used as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link Activity} as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link View} as the view root., +   * Reset fields annotated with {@link InjectView @InjectView} and {@link InjectViews @InjectViews}, +   * to {@code null}., +   * This should only be used in the {@code onDestroyView} method of a fragment., +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., +  /** View ID to which the field will be bound. */, +++ b/butterknife/src/main/java/butterknife/InjectViews.java, + * Bind a field to the view for each ID specified in a {@link List} or array. Each view will, + * automatically be cast to the list or array type., +  /** View IDs to which the field will be bound. */, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, + * Bind a method to an {@link OnCheckedChangeListener OnCheckedChangeListener} on the view for, + * each ID specified., +  /** View IDs to which the method will be bound. */, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** An action that can be applied to a list of views. */, +  /** A setter that can apply a value to a list of views. */, +   * Inject annotated fields and methods in the specified {@link Activity}. The current content, +   * view is used as the view root., +   * Inject annotated fields and methods in the specified {@link View}. The view and its children, +   * are used as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link Activity} as the view root., +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link View} as the view root., +   * Reset fields annotated with {@link InjectView @InjectView} and {@link InjectViews @InjectViews}, +   * to {@code null}., +   * This should only be used in the {@code onDestroyView} method of a fragment., +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., +  /** View ID to which the field will be bound. */, +++ b/butterknife/src/main/java/butterknife/InjectViews.java, + * Bind a field to the view for each ID specified in a {@link List} or array. Each view will]
[+++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-invoker-plugin</artifactId>, +        <configuration>, +          <addTestClassPath>true</addTestClassPath>, +          <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>, +          <pomIncludes>, +            <pomInclude>*/pom.xml</pomInclude>, +          </pomIncludes>, +          <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>, +          <postBuildHookScript>verify</postBuildHookScript>, +          <filterProperties>, +            <project.version>${project.version}</project.version>, +          </filterProperties>, +        </configuration>, +        <executions>, +          <execution>, +            <id>integration-test</id>, +            <goals>, +              <goal>install</goal>, +              <goal>run</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-invoker-plugin</artifactId>, +        <configuration>, +          <addTestClassPath>true</addTestClassPath>, +          <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>, +          <pomIncludes>, +            <pomInclude>*/pom.xml</pomInclude>, +          </pomIncludes>, +          <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>, +          <postBuildHookScript>verify</postBuildHookScript>, +          <filterProperties>, +            <project.version>${project.version}</project.version>, +          </filterProperties>, +        </configuration>, +        <executions>, +          <execution>, +            <id>integration-test</id>, +            <goals>, +              <goal>install</goal>, +              <goal>run</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +++ b/butterknife/src/it/field-cannot-be-private/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-invoker-plugin</artifactId>, +        <configuration>, +          <addTestClassPath>true</addTestClassPath>, +          <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>, +          <pomIncludes>, +            <pomInclude>*/pom.xml</pomInclude>, +          </pomIncludes>, +          <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>, +          <postBuildHookScript>verify</postBuildHookScript>, +          <filterProperties>, +            <project.version>${project.version}</project.version>, +          </filterProperties>, +        </configuration>, +        <executions>, +          <execution>, +            <id>integration-test</id>, +            <goals>, +              <goal>install</goal>, +              <goal>run</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +++ b/butterknife/src/it/field-cannot-be-private/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/field-cannot-be-private/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code array} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(T[] array, Action<? super T>... actions) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(array[i], i);, +      }, +    }, +  }, +, +  /** Apply the specified {@code action} across the {@code array} of views. */, +  public static <T extends View> void apply(T[] array, Action<? super T> action) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      action.apply(array[i], i);, +    }, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */, +  public static <T extends View, V> void apply(T[] array, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value, i);, +    }, +  }, +, +  /**, +   * Apply the specified {@code value} across the {@code array} of views using the {@code property}., +   */, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +  public static <T extends View, V> void apply(T[] array, Property<? super T, V> setter,, +      V value) {, +    //noinspection ForLoopReplaceableByForEach, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value);, +    }, +  }, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code array} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(T[] array, Action<? super T>... actions) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(array[i], i);, +      }, +    }, +  }, +, +  /** Apply the specified {@code action} across the {@code array} of views. */, +  public static <T extends View> void apply(T[] array, Action<? super T> action) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      action.apply(array[i], i);, +    }, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */, +  public static <T extends View, V> void apply(T[] array, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value, i);, +    }, +  }, +, +  /**, +   * Apply the specified {@code value} across the {@code array} of views using the {@code property}., +   */, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +  public static <T extends View, V> void apply(T[] array, Property<? super T, V> setter,, +      V value) {, +    //noinspection ForLoopReplaceableByForEach, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value);, +    }, +  }, +, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  @Test public void propertyAppliedToEveryViewInList() {, +  @Test public void propertyAppliedToEveryViewInArray() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();, +, +    View[] views = new View[] { view1, view2, view3 };, +    ButterKnife.apply(views, PROPERTY_ENABLED, false);, +, +    assertThat(view1.isEnabled()).isFalse();, +    assertThat(view2.isEnabled()).isFalse();, +    assertThat(view3.isEnabled()).isFalse();, +  }, +, +  @Test public void actionAppliedToEveryViewInList() {, +  @Test public void actionAppliedToEveryViewInArray() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();]
[+++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, +   their superclasses do., +, +, +++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, +   their superclasses do., +, +, +++ b/butterknife/pom.xml, +++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, +   their superclasses do., +, +, +++ b/butterknife/pom.xml, +++ b/butterknife/src/it/field-visibility/pom.xml, +, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>4.10</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <version>2.0-alpha-2</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <version>1.0.4</version>, +      <scope>test</scope>, +    </dependency>, +++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, +   their superclasses do., +, +, +++ b/butterknife/pom.xml, +++ b/butterknife/src/it/field-visibility/pom.xml, +, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>4.10</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <version>2.0-alpha-2</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <version>1.0.4</version>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife/src/it/field-visibility/src/main/java/test/Target.java, +package test;, +, +import android.app.Activity;, +import android.view.View;, +import butterknife.InjectView;, +import java.lang.Override;, +, +public class Target extends Activity {, +  @InjectView(1) public View thing1;, +  @InjectView(2) protected View thing2;, +  @InjectView(3) View thing3;, +, +  @Override public View findViewById(int id) {, +    return new View(this);, +  }, +}, +++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, +   their superclasses do.]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * If a view is optional add the {@link Nullable @Nullable} annotation., + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, +            + " was not found. If this view is optional add '@Nullable' annotation.");, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * If a view is optional add the {@link Nullable @Nullable} annotation., + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, +            + " was not found. If this view is optional add '@Nullable' annotation.");, +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * @see Nullable, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * If a view is optional add the {@link Nullable @Nullable} annotation., + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, +            + " was not found. If this view is optional add '@Nullable' annotation.");, +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * @see Nullable, +++ b/butterknife/src/main/java/butterknife/Nullable.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Denote that the view specified by the injection is not required to be present., + * <pre><code>, + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, + * </code></pre>, + * This annotation is deprecated, and will be removed in a future release. It is encouraged to use, + * the {@code @Nullable} annotation from Android's "support-annotations" library., + * @see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>, + */, +@Deprecated, +@Retention(CLASS) @Target({ FIELD, METHOD }), +public @interface Nullable {, +}, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * If a view is optional add the {@link Nullable @Nullable} annotation., + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, +            + " was not found. If this view is optional add '@Nullable' annotation.");, +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * @see Nullable, +++ b/butterknife/src/main/java/butterknife/Nullable.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Denote that the view specified by the injection is not required to be present., + * <pre><code>, + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, + * </code></pre>, + * This annotation is deprecated, and will be removed in a future release. It is encouraged to use, + * the {@code @Nullable} annotation from Android's "support-annotations" library., + * @see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>, + */, +@Deprecated, +@Retention(CLASS) @Target({ FIELD, METHOD }), +public @interface Nullable {, +}, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java, + * @see Nullable, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * If a view is optional add the {@link Nullable @Nullable} annotation., + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, +            + " was not found. If this view is optional add '@Nullable' annotation.");, +++ b/butterknife/src/main/java/butterknife/InjectView.java, + * @see Nullable, +++ b/butterknife/src/main/java/butterknife/Nullable.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Denote that the view specified by the injection is not required to be present., + * <pre><code>, + * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;, + * </code></pre>, + * This annotation is deprecated, and will be removed in a future release. It is encouraged to use, + * the {@code @Nullable} annotation from Android's "support-annotations" library., + * @see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>, + */, +@Deprecated, +@Retention(CLASS) @Target({ FIELD, METHOD }), +public @interface Nullable {, +}, +++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java]
[+++ b/.travis.yml, +    - build-tools-24.0.1, +    - $HOME/.gradle, +, +++ b/.travis.yml, +    - build-tools-24.0.1, +    - $HOME/.gradle, +, +++ b/build.gradle, +  buildToolsVersion = '24.0.1']
[+++ b/.travis.yml, +before_install:, +  # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/.travis.yml, +before_install:, +  # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/butterknife-integration-test/build.gradle, +    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks., +    checkReleaseBuilds false, +++ b/.travis.yml, +before_install:, +  # Create and start emulator for the script. Meant to race the install task., +, +install: ./gradlew clean assemble assembleAndroidTest --stacktrace, +, +before_script:, +script: ./gradlew check connectedCheck --stacktrace, +, +++ b/butterknife-integration-test/build.gradle, +    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks., +    checkReleaseBuilds false, +++ b/butterknife/build.gradle, +    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks., +    checkReleaseBuilds false]
[+++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "WGiRUh1V4AWwBsCvMjjxYih+HiyOjlMS9Tz5UqxPVl7h6FccKDQmAaWVB46iwteZsgDQZBJNO+9gDrsUYuOQNW4XLSIEYdPoQAvRbBi+ExhaC/m3imsumw+SJd95MYePE2Z4UD5D4AUQi+QT/LnaVYps1n+IrGat8cSzC9Nhz6A=", +    - secure: "PQFQlep/9TwKicd4PkAS2sB7WqeRyVP8ZQF5sPnyFCHpLrqYQmKOYXaNnxqAlBoJ+UOGYxfKxFcDp7jE/jSaTTDx+zPoG/eVt6X0wq65Qq2t/Mw2b9dPzHF/MYLDRag4D/g4YF59xg6gdP5jFojr7D58ZePmp+EOcBDOFduf+Nk=", +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "WGiRUh1V4AWwBsCvMjjxYih+HiyOjlMS9Tz5UqxPVl7h6FccKDQmAaWVB46iwteZsgDQZBJNO+9gDrsUYuOQNW4XLSIEYdPoQAvRbBi+ExhaC/m3imsumw+SJd95MYePE2Z4UD5D4AUQi+QT/LnaVYps1n+IrGat8cSzC9Nhz6A=", +    - secure: "PQFQlep/9TwKicd4PkAS2sB7WqeRyVP8ZQF5sPnyFCHpLrqYQmKOYXaNnxqAlBoJ+UOGYxfKxFcDp7jE/jSaTTDx+zPoG/eVt6X0wq65Qq2t/Mw2b9dPzHF/MYLDRag4D/g4YF59xg6gdP5jFojr7D58ZePmp+EOcBDOFduf+Nk=", +++ b/butterknife-annotations/src/main/java/butterknife/Unbinder.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a target field to an un-binder instance. Use when binding in a {@linkplain, + * android.app.Fragment fragment}., + * <pre><code>, + * {@literal @}Unbinder ButterKnife.Unbinder unbinder;, + * </code></pre>, + */, +@Retention(CLASS), +@Target(FIELD), +public @interface Unbinder {, +}, +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "WGiRUh1V4AWwBsCvMjjxYih+HiyOjlMS9Tz5UqxPVl7h6FccKDQmAaWVB46iwteZsgDQZBJNO+9gDrsUYuOQNW4XLSIEYdPoQAvRbBi+ExhaC/m3imsumw+SJd95MYePE2Z4UD5D4AUQi+QT/LnaVYps1n+IrGat8cSzC9Nhz6A=", +    - secure: "PQFQlep/9TwKicd4PkAS2sB7WqeRyVP8ZQF5sPnyFCHpLrqYQmKOYXaNnxqAlBoJ+UOGYxfKxFcDp7jE/jSaTTDx+zPoG/eVt6X0wq65Qq2t/Mw2b9dPzHF/MYLDRag4D/g4YF59xg6gdP5jFojr7D58ZePmp+EOcBDOFduf+Nk=", +++ b/butterknife-annotations/src/main/java/butterknife/Unbinder.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a target field to an un-binder instance. Use when binding in a {@linkplain, + * android.app.Fragment fragment}., + * <pre><code>, + * {@literal @}Unbinder ButterKnife.Unbinder unbinder;, + * </code></pre>, + */, +@Retention(CLASS), +@Target(FIELD), +public @interface Unbinder {, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java]
[+++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_LEGACY =, +  private static final ClassName UI_THREAD =, +  private static final ClassName CALL_SUPER_LEGACY =, +  private static final ClassName CALL_SUPER =, +  static final ClassName CONTEXT_COMPAT_LEGACY =, +  static final ClassName CONTEXT_COMPAT =, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useLegacyTypes) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useLegacyTypes);, +  private TypeSpec createType(int sdk, boolean debuggable, boolean useLegacyTypes) {, +      result.addMethod(createBindingConstructorForView(useLegacyTypes));, +      result.addMethod(createBindingConstructorForActivity(useLegacyTypes));, +      result.addMethod(createBindingConstructorForDialog(useLegacyTypes));, +      result.addMethod(createBindingViewDelegateConstructor(useLegacyTypes));, +    result.addMethod(createBindingConstructor(sdk, debuggable, useLegacyTypes));, +      result.addMethod(createBindingUnbindMethod(result, useLegacyTypes));, +  private MethodSpec createBindingViewDelegateConstructor(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForView(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForActivity(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForDialog(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +        addViewBinding(constructor, binding, debuggable, useLegacyTypes);, +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,, +      boolean useLegacyTypes) {, +      result.addAnnotation(useLegacyTypes ? CALL_SUPER_LEGACY : CALL_SUPER);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useLegacyTypes);, +      ViewBinding bindings, boolean useLegacyTypes) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useLegacyTypes));, +      String targetType = getTargetType(listenerClass, useLegacyTypes);, +  private static String getType(ListenerClass listenerClass, boolean useLegacyTypes) {, +    String legacyType = listenerClass.legacyType();, +    if (useLegacyTypes && !legacyType.isEmpty()) {, +      type = legacyType;, +  private static String getTargetType(ListenerClass listenerClass, boolean useLegacyTypes) {, +    String legacyTargetType = listenerClass.legacyTargetType();, +    if (useLegacyTypes && !legacyTargetType.isEmpty()) {, +      targetType = legacyTargetType;, +      boolean useLegacyTypes) {, +    addMethodBindings(result, binding, debuggable, useLegacyTypes);, +      boolean useLegacyTypes) {, +          .superclass(ClassName.bestGuess(getType(listener, useLegacyTypes)));, +        TypeName listenerClassName = bestGuess(getType(listener, useLegacyTypes));, +      String targetType = getTargetType(listener, useLegacyTypes);, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_LEGACY =, +  private static final ClassName UI_THREAD =, +  private static final ClassName CALL_SUPER_LEGACY =, +  private static final ClassName CALL_SUPER =, +  static final ClassName CONTEXT_COMPAT_LEGACY =, +  static final ClassName CONTEXT_COMPAT =, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useLegacyTypes) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useLegacyTypes);, +  private TypeSpec createType(int sdk, boolean debuggable, boolean useLegacyTypes) {, +      result.addMethod(createBindingConstructorForView(useLegacyTypes));, +      result.addMethod(createBindingConstructorForActivity(useLegacyTypes));, +      result.addMethod(createBindingConstructorForDialog(useLegacyTypes));]
[+++ b/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java, +import com.android.tools.lint.detector.api.ApiKt;, +, +  @Override public int getApi() {, +    return ApiKt.CURRENT_API;, +  }]
[+++ b/butterknife-sample/pom.xml, +    <version>4.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>4.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>4.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>4.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>4.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>4.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/.gitignore]
[+++ b/butterknife-sample/pom.xml, +    <version>6.1.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>6.1.0</version>, +++ b/butterknife/pom.xml, +    <version>6.1.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>6.1.0</version>, +++ b/butterknife/pom.xml, +    <version>6.1.0</version>, +++ b/pom.xml, +  <version>6.1.0</version>, +    <tag>butterknife-parent-6.1.0</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (hasUnqualifiedResourceBindings()) {, +  /** True when this type's bindings use raw integer values instead of {@code R} references. */, +  private boolean hasUnqualifiedResourceBindings() {, +    for (FieldBitmapBinding binding : bitmapBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    for (FieldDrawableBinding binding : drawableBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (hasUnqualifiedResourceBindings()) {, +  /** True when this type's bindings use raw integer values instead of {@code R} references. */, +  private boolean hasUnqualifiedResourceBindings() {, +    for (FieldBitmapBinding binding : bitmapBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    for (FieldDrawableBinding binding : drawableBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +  final boolean qualifed;, +    this.qualifed = false;, +    this.qualifed = true;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (hasUnqualifiedResourceBindings()) {, +  /** True when this type's bindings use raw integer values instead of {@code R} references. */, +  private boolean hasUnqualifiedResourceBindings() {, +    for (FieldBitmapBinding binding : bitmapBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    for (FieldDrawableBinding binding : drawableBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (!binding.getId().qualifed) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +  final boolean qualifed;, +    this.qualifed = false;, +    this.qualifed = true;, +++ b/butterknife-compiler/src/test/java/butterknife/RClassTest.java]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  public static View bind(View target) {, +    return target;, +  public static View bind(Object target, View source) {, +    return source;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  public static View bind(View target) {, +    return target;, +  public static View bind(Object target, View source) {, +    return source;, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  @Test public void bindingViewReturnsView() {, +    View view = new View(Robolectric.application);, +, +    View one = ButterKnife.bind(view);, +    assertThat(one).isSameAs(view);, +, +    View two = ButterKnife.bind(new Object(), view);, +    assertThat(two).isSameAs(view);, +  }, +]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    String fieldName = "target";, +    if (!bindings.isBoundToRoot()) {, +      fieldName = "view" + bindings.getId().value;, +    }, +    if (!bindings.isBoundToRoot()) {, +    }, +    String fieldName = "target";, +    String bindName = "target";, +, +      result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    String fieldName = "target";, +    if (!bindings.isBoundToRoot()) {, +      fieldName = "view" + bindings.getId().value;, +    }, +    if (!bindings.isBoundToRoot()) {, +    }, +    String fieldName = "target";, +    String bindName = "target";, +, +      result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +, +          // Verify target type is valid for a binding without an id., +          String targetType = listener.targetType();, +          if (!isSubtypeOfType(enclosingElement.asType(), targetType), +              && !isInterface(enclosingElement.asType())) {, +            error(element, "@%s annotation without an ID may only be used with an object of type ", +                    + "\"%s\" or an interface. (%s.%s)",, +                annotationClass.getSimpleName(), targetType,, +                enclosingElement.getQualifiedName(), element.getSimpleName());, +            hasError = true;, +          }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    String fieldName = "target";, +    if (!bindings.isBoundToRoot()) {, +      fieldName = "view" + bindings.getId().value;, +    }, +    if (!bindings.isBoundToRoot()) {, +    }, +    String fieldName = "target";, +    String bindName = "target";, +, +      result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +, +          // Verify target type is valid for a binding without an id., +          String targetType = listener.targetType();, +          if (!isSubtypeOfType(enclosingElement.asType(), targetType), +              && !isInterface(enclosingElement.asType())) {, +            error(element, "@%s annotation without an ID may only be used with an object of type ", +                    + "\"%s\" or an interface. (%s.%s)",, +                annotationClass.getSimpleName(), targetType,, +                enclosingElement.getQualifiedName(), element.getSimpleName());, +            hasError = true;, +          }, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +  @Test public void failsRootViewBindingWithBadTarget() throws Exception {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.content.Context;\n", +        + "import android.view.View;\n", +        + "import butterknife.OnItemClick;\n", +        + "public class Test extends View {\n", +        + "  @OnItemClick void doStuff() {}\n", +        + "  public Test(Context context) {\n", +        + "    super(context);\n", +        + "  }\n", +        + "}", +    );, +, +    assertAbout(javaSource()), +        .that(source), +        .processedWith(new ButterKnifeProcessor()), +        .failsToCompile(), +        .withErrorContaining(, +            "@OnItemClick annotation without an ID may only be used with an object of type ", +                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"), +        .in(source), +        .onLine(6);, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    String fieldName = "target";, +    if (!bindings.isBoundToRoot()) {, +      fieldName = "view" + bindings.getId().value;, +    }, +    if (!bindings.isBoundToRoot()) {, +    }, +    String fieldName = "target";, +    String bindName = "target";, +, +      result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +, +          // Verify target type is valid for a binding without an id., +          String targetType = listener.targetType();, +          if (!isSubtypeOfType(enclosingElement.asType(), targetType), +              && !isInterface(enclosingElement.asType())) {]
[+++ b/CHANGELOG.md, +Version 9.0.0-rc2 *(2018-11-19)*, +--------------------------------, +, + * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This, +   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older)., + * Use Java 8 bytecode for all artifacts as announced in RC1 release notes., +, +, +++ b/CHANGELOG.md, +Version 9.0.0-rc2 *(2018-11-19)*, +--------------------------------, +, + * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This, +   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older)., + * Use Java 8 bytecode for all artifacts as announced in RC1 release notes., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:9.0.0-rc2', +  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc2', +    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc2', +++ b/CHANGELOG.md, +Version 9.0.0-rc2 *(2018-11-19)*, +--------------------------------, +, + * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This, +   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older)., + * Use Java 8 bytecode for all artifacts as announced in RC1 release notes., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:9.0.0-rc2', +  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc2', +    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc2', +++ b/gradle.properties, +VERSION_NAME=9.0.0-rc2]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +  /* TODO support lib 26.0.0: @FontRes */ int value();, +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +  /* TODO support lib 26.0.0: @FontRes */ int value();, +++ b/butterknife-annotations/src/main/java/butterknife/BindInt.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java, +, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +  /* TODO support lib 26.0.0: @FontRes */ int value();, +++ b/butterknife-annotations/src/main/java/butterknife/BindInt.java, +import static java.lang.annotation.RetentionPolicy.CLASS;, +@Retention(CLASS) @Target(FIELD), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +    uncheckedSet(field, target, view);, +    uncheckedSet(field, target, value);, +    uncheckedSet(field, target, value);, +    uncheckedSet(field, target, value);, +    uncheckedSet(field, target, value);, +      value = source.getContext().getString(bindString.value());, +    uncheckedSet(field, target, value);, +          uncheckedInvoke(method, target);]
[+++ b/.travis.yml, +    - build-tools-24.0.1, +    - $HOME/.gradle, +, +++ b/.travis.yml, +    - build-tools-24.0.1, +    - $HOME/.gradle, +, +++ b/build.gradle, +  buildToolsVersion = '24.0.1']
[+++ b/pom.xml]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  @SuppressWarnings("UnusedDeclaration") // Used by generated code.]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      builder.add("\nfinder.find");, +      builder.add(binding.isRequired() ? "RequiredView" : "OptionalView");, +        builder.add("AsType");, +      builder.add("(source, $L", ids.get(i).code);, +      if (binding.isRequired() || requiresCast(binding.getType())) {, +        builder.add(", $S", asHumanDescription(singletonList(binding)));, +      if (requiresCast(binding.getType())) {, +        builder.add(", $T.class", binding.getRawType());, +      }, +      builder.add(")");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      builder.add("\nfinder.find");, +      builder.add(binding.isRequired() ? "RequiredView" : "OptionalView");, +        builder.add("AsType");, +      builder.add("(source, $L", ids.get(i).code);, +      if (binding.isRequired() || requiresCast(binding.getType())) {, +        builder.add(", $S", asHumanDescription(singletonList(binding)));, +      if (requiresCast(binding.getType())) {, +        builder.add(", $T.class", binding.getRawType());, +      }, +      builder.add(")");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.ParameterizedTypeName;, +  public ClassName getRawType() {, +    if (type instanceof ParameterizedTypeName) {, +      return ((ParameterizedTypeName) type).rawType;, +    }, +    return (ClassName) type;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      builder.add("\nfinder.find");, +      builder.add(binding.isRequired() ? "RequiredView" : "OptionalView");, +        builder.add("AsType");, +      builder.add("(source, $L", ids.get(i).code);, +      if (binding.isRequired() || requiresCast(binding.getType())) {, +        builder.add(", $S", asHumanDescription(singletonList(binding)));, +      if (requiresCast(binding.getType())) {, +        builder.add(", $T.class", binding.getRawType());, +      }, +      builder.add(")");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.ParameterizedTypeName;, +  public ClassName getRawType() {, +    if (type instanceof ParameterizedTypeName) {, +      return ((ParameterizedTypeName) type).rawType;, +    }, +    return (ClassName) type;, +  }, +, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java, +        + "        finder.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class), \n", +        + "        finder.findRequiredViewAsType(source, 2, \"field 'thing'\", TextView.class), \n", +        + "        finder.findRequiredViewAsType(source, 3, \"field 'thing'\", TextView.class));\n", +        + "        finder.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class), \n", +        + "        finder.findRequiredViewAsType(source, 2, \"field 'thing'\", Test.TestInterface.class), \n", +        + "        finder.findRequiredViewAsType(source, 3, \"field 'thing'\", Test.TestInterface.class));\n"]
[+++ b/butterknife-integration-test/build.gradle, +apply plugin: 'com.android.application', +apply plugin: 'com.neenbedankt.android-apt', +, +android {, +  compileSdkVersion rootProject.ext.compileSdkVersion, +  buildToolsVersion rootProject.ext.buildToolsVersion, +, +  compileOptions {, +    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +    targetCompatibility = rootProject.ext.targetCompatibilityVersion, +  }, +, +  defaultConfig {, +    applicationId 'com.example.butterknife', +    minSdkVersion rootProject.ext.minSdkVersion, +    targetSdkVersion rootProject.ext.targetSdkVersion, +    versionCode 1, +    versionName '1.0.0', +  }, +, +  lintOptions {, +    textReport true, +    textOutput "stdout", +    checkAllWarnings true, +    warningsAsErrors true, +    showAll true, +    explainIssues true, +  }, +, +  buildTypes {, +    debug {, +      minifyEnabled true, +    }, +  }, +}, +, +dependencies {, +  compile project(':butterknife'), +  apt project(':butterknife-compiler'), +, +  testCompile deps.junit, +  testCompile deps.truth, +  testCompile deps.robolectric, +}, +++ b/butterknife-integration-test/build.gradle, +apply plugin: 'com.android.application', +apply plugin: 'com.neenbedankt.android-apt', +, +android {, +  compileSdkVersion rootProject.ext.compileSdkVersion, +  buildToolsVersion rootProject.ext.buildToolsVersion, +, +  compileOptions {, +    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +    targetCompatibility = rootProject.ext.targetCompatibilityVersion, +  }, +, +  defaultConfig {, +    applicationId 'com.example.butterknife', +    minSdkVersion rootProject.ext.minSdkVersion, +    targetSdkVersion rootProject.ext.targetSdkVersion, +    versionCode 1, +    versionName '1.0.0', +  }, +, +  lintOptions {, +    textReport true, +    textOutput "stdout", +    checkAllWarnings true, +    warningsAsErrors true, +    showAll true, +    explainIssues true, +  }, +, +  buildTypes {, +    debug {, +      minifyEnabled true, +    }, +  }, +}, +, +dependencies {, +  compile project(':butterknife'), +  apt project(':butterknife-compiler'), +, +  testCompile deps.junit, +  testCompile deps.truth, +  testCompile deps.robolectric, +}, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java, +package com.example.butterknife;, +, +import android.test.ActivityInstrumentationTestCase2;, +import com.example.butterknife.library.SimpleActivity;, +, +public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {, +  public SimpleActivityTest() {, +    super(SimpleActivity.class);, +  }]
[+++ b/CHANGELOG.md, +Version 9.0.0-rc1 *(2018-10-10)*, +--------------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, +   AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, +   required for the generated code but does not contain the code to reflectively look up the generated, +   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, +   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, +   remain in the old `butterknife` artifact., + , + * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation, +   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged, +   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more, +   information. Currently about 90% of functionality is covered. File bugs for anything that does not work., +, +   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to, +   having this be a default. As of AGP 3.2 there is no reason not to do this., +, + * New: Lint checks have been ported to UAST and now work on Kotlin code., +, + * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`., + * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities., + * Fix: Use the application ID instead of the resource package for generating `R2`., + * Deprecated methods from 8.x have been removed., +, +Note: The next release candidate will switch all artifacts to require Java 8 bytecode which will force, +your applications to enable Java 8 bytecode. As of AGP 3.2 there is no cost to this, and there is no, +reason to have it set any lower., +, +, +++ b/CHANGELOG.md, +Version 9.0.0-rc1 *(2018-10-10)*, +--------------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, +   AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, +   required for the generated code but does not contain the code to reflectively look up the generated, +   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, +   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, +   remain in the old `butterknife` artifact., + , + * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation, +   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged, +   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more, +   information. Currently about 90% of functionality is covered. File bugs for anything that does not work., +, +   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to, +   having this be a default. As of AGP 3.2 there is no reason not to do this., +, + * New: Lint checks have been ported to UAST and now work on Kotlin code., +, + * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`., + * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities., + * Fix: Use the application ID instead of the resource package for generating `R2`., + * Deprecated methods from 8.x have been removed., +, +Note: The next release candidate will switch all artifacts to require Java 8 bytecode which will force, +your applications to enable Java 8 bytecode. As of AGP 3.2 there is no cost to this, and there is no, +reason to have it set any lower., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:9.0.0-rc1', +  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc1', +    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc1', +++ b/CHANGELOG.md, +Version 9.0.0-rc1 *(2018-10-10)*, +--------------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, +   AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, +   required for the generated code but does not contain the code to reflectively look up the generated, +   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, +   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, +   remain in the old `butterknife` artifact., + , + * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation, +   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged, +   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more, +   information. Currently about 90% of functionality is covered. File bugs for anything that does not work., +, +   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to, +   having this be a default. As of AGP 3.2 there is no reason not to do this., +, + * New: Lint checks have been ported to UAST and now work on Kotlin code., +, + * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`., + * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities., + * Fix: Use the application ID instead of the resource package for generating `R2`., + * Deprecated methods from 8.x have been removed., +, +Note: The next release candidate will switch all artifacts to require Java 8 bytecode which will force, +your applications to enable Java 8 bytecode. As of AGP 3.2 there is no cost to this, and there is no]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable);, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +        TypeName listenerClassName = bestGuess(listenerClass.type());, +      if (!VIEW_TYPE.equals(listenerClass.targetType())) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +    addMethodBindings(result, binding, debuggable);, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +          .superclass(ClassName.bestGuess(listener.type()));, +        TypeName listenerClassName = bestGuess(listener.type());, +      if (!VIEW_TYPE.equals(listener.targetType())) {, +        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable);, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +        TypeName listenerClassName = bestGuess(listenerClass.type());, +      if (!VIEW_TYPE.equals(listenerClass.targetType())) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +    addMethodBindings(result, binding, debuggable);, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +          .superclass(ClassName.bestGuess(listener.type()));, +        TypeName listenerClassName = bestGuess(listener.type());, +      if (!VIEW_TYPE.equals(listener.targetType())) {, +        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import android.view.MotionEvent;, +, +        unbinder = parseOnTouch(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +  private static @Nullable Unbinder parseOnTouch(final Object target, final Method method,, +      View source) {, +    OnTouch onTouch = method.getAnnotation(OnTouch.class);, +    if (onTouch == null) {, +      return null;, +    }, +    validateMember(method);, +    final boolean propagateReturn = validateReturnType(method, boolean.class);, +    final ArgumentTransformer argumentTransformer =, +        createArgumentTransformer(method, ON_TOUCH_TYPES);, +, +    List<View> views =, +        findViews(source, onTouch.value(), isRequired(method), method.getName(), View.class);, +, +    ViewCollections.set(views, ON_TOUCH, new View.OnTouchListener() {, +      @Override public boolean onTouch(View v, MotionEvent event) {, +        Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));, +        //noinspection SimplifiableConditionalExpression, +        return propagateReturn, +            ? (boolean) returnValue, +            : false;, +      }, +    });, +, +    return new ListenerUnbinder<>(views, ON_TOUCH);, +  }, +, +  private static final Setter<View, View.OnTouchListener> ON_TOUCH =, +      new Setter<View, View.OnTouchListener>() {, +        @Override public void set(@NonNull View view, View.OnTouchListener value, int index) {, +          view.setOnTouchListener(value);, +        }, +      };, +  private static final Class<?>[] ON_TOUCH_TYPES = { View.class, MotionEvent.class };, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable);, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +        TypeName listenerClassName = bestGuess(listenerClass.type());, +      if (!VIEW_TYPE.equals(listenerClass.targetType())) {]
[+++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (isFinal) {, +      } else {, +        invoke.add("return new $T<>", unbinderClassName);, +      }, +++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (isFinal) {, +      } else {, +        invoke.add("return new $T<>", unbinderClassName);, +      }, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (isFinal) {, +      } else {, +        invoke.add("return new $T<>", unbinderClassName);, +      }, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java, +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +++ b/butterknife-annotations/build.gradle, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = 1.7, +targetCompatibility = 1.7, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (isFinal) {, +      } else {, +        invoke.add("return new $T<>", unbinderClassName);, +      }, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n", +        + "    return new InnerUnbinder<>(target, finder, source);\n"]
[+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java, +++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId().value;, +      fieldName = "view" + bindings.getId().value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId().value;, +      fieldName = "view" + bindings.getId().value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +    throw new UnsupportedOperationException("Please use value or code explicitly");]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      @Override protected View findView(Object source, int id) {, +      @Override protected View findView(Object source, int id) {, +      @Override protected View findView(Object source, int id) {, +    public static <T> T[] arrayOf(T... views) {, +    public static <T> List<T> listOf(T... views) {, +      return new ImmutableList<T>(views);, +    public <T> T findRequiredView(Object source, int id, String who) {, +      T view = findOptionalView(source, id, who);, +    public <T> T findOptionalView(Object source, int id, String who) {, +      View view = findView(source, id);, +      return castView(view, id, who);, +    }, +, +    @SuppressWarnings("unchecked") // That's the point., +    public <T> T castView(View view, int id, String who) {, +      try {, +        return (T) view;, +      } catch (ClassCastException e) {, +        if (who == null) {, +          throw new AssertionError();, +        }, +        String name = view.getResources().getResourceEntryName(id);, +        throw new IllegalStateException("View '", +            + name, +            + "' with ID ", +            + id, +            + " for ", +            + who, +            + " was of the wrong type. See cause for more info.", e);, +      }, +    }, +, +    @SuppressWarnings("unchecked") // That's the point., +    public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {, +      try {, +        return (T) value;, +      } catch (ClassCastException e) {, +        throw new IllegalStateException("Parameter #", +            + (fromPosition + 1), +            + " of method '", +            + from, +            + "' was of the wrong type for parameter #", +            + (toPosition + 1), +            + " of method '", +            + to, +            + "'. See cause for more info.", e);, +      }, +    }, +, +    protected abstract View findView(Object source, int id);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      @Override protected View findView(Object source, int id) {, +      @Override protected View findView(Object source, int id) {, +      @Override protected View findView(Object source, int id) {, +    public static <T> T[] arrayOf(T... views) {, +    public static <T> List<T> listOf(T... views) {, +      return new ImmutableList<T>(views);, +    public <T> T findRequiredView(Object source, int id, String who) {, +      T view = findOptionalView(source, id, who);, +    public <T> T findOptionalView(Object source, int id, String who) {, +      View view = findView(source, id);, +      return castView(view, id, who);, +    }, +, +    @SuppressWarnings("unchecked") // That's the point., +    public <T> T castView(View view, int id, String who) {, +      try {, +        return (T) view;, +      } catch (ClassCastException e) {, +        if (who == null) {, +          throw new AssertionError();, +        }, +        String name = view.getResources().getResourceEntryName(id);, +        throw new IllegalStateException("View '", +            + name, +            + "' with ID ", +            + id, +            + " for ", +            + who, +            + " was of the wrong type. See cause for more info.", e);, +      }, +    }, +, +    @SuppressWarnings("unchecked") // That's the point., +    public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {, +      try {, +        return (T) value;, +      } catch (ClassCastException e) {, +        throw new IllegalStateException("Parameter #", +            + (fromPosition + 1), +            + " of method '", +            + from, +            + "' was of the wrong type for parameter #", +            + (toPosition + 1), +            + " of method '", +            + to, +            + "'. See cause for more info.", e);, +      }, +    }]
[+++ b/CHANGELOG.md, +Version 9.0.0-rc3 *(2018-12-20)*, +--------------------------------, +, + * Fix: Correct generated resource annotation names when running Turkish locale., + * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy, +   multiple times., +, +, +++ b/CHANGELOG.md, +Version 9.0.0-rc3 *(2018-12-20)*, +--------------------------------, +, + * Fix: Correct generated resource annotation names when running Turkish locale., + * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy, +   multiple times., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:9.0.0-rc3', +  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc3', +    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc3', +++ b/CHANGELOG.md, +Version 9.0.0-rc3 *(2018-12-20)*, +--------------------------------, +, + * Fix: Correct generated resource annotation names when running Turkish locale., + * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy, +   multiple times., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:9.0.0-rc3', +  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc3', +    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc3', +++ b/gradle.properties, +VERSION_NAME=9.0.0-rc3]
[+++ b/README.md, +  @InjectView(R.id.user) EditText username;, +  @InjectView(R.id.pass) EditText password;, +, +  @OnClick(R.id.submit) void submit() {, +    // TODO call server..., +  }, +++ b/README.md, +  @InjectView(R.id.user) EditText username;, +  @InjectView(R.id.pass) EditText password;, +, +  @OnClick(R.id.submit) void submit() {, +    // TODO call server..., +  }, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.OnClick;, +  @OnClick(R.id.hello) void sayHello() {, +    Toast.makeText(SimpleActivity.this, "Hello, views!", LENGTH_SHORT).show();, +  }, +, +++ b/README.md, +  @InjectView(R.id.user) EditText username;, +  @InjectView(R.id.pass) EditText password;, +, +  @OnClick(R.id.submit) void submit() {, +    // TODO call server..., +  }, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.OnClick;, +  @OnClick(R.id.hello) void sayHello() {, +    Toast.makeText(SimpleActivity.this, "Hello, views!", LENGTH_SHORT).show();, +  }, +, +++ b/butterknife/pom.xml, +          <showErrors>true</showErrors>, +++ b/README.md, +  @InjectView(R.id.user) EditText username;, +  @InjectView(R.id.pass) EditText password;, +, +  @OnClick(R.id.submit) void submit() {, +    // TODO call server..., +  }, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.OnClick;, +  @OnClick(R.id.hello) void sayHello() {, +    Toast.makeText(SimpleActivity.this, "Hello, views!", LENGTH_SHORT).show();, +  }, +, +++ b/butterknife/pom.xml, +          <showErrors>true</showErrors>, +++ b/butterknife/src/it/field-must-extend-view/invoker.properties, +invoker.buildResult=failure, +++ b/README.md, +  @InjectView(R.id.user) EditText username;, +  @InjectView(R.id.pass) EditText password;, +, +  @OnClick(R.id.submit) void submit() {, +    // TODO call server..., +  }, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.OnClick;, +  @OnClick(R.id.hello) void sayHello() {, +    Toast.makeText(SimpleActivity.this, "Hello, views!", LENGTH_SHORT).show();, +  }, +, +++ b/butterknife/pom.xml, +          <showErrors>true</showErrors>, +++ b/butterknife/src/it/field-must-extend-view/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/field-must-extend-view/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>field-must-extend-view</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +  </dependencies>, +]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName binderClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, +      boolean isFinal) {, +    this.binderClassName = binderClassName;, +    this.unbinderClassName = unbinderClassName;, +  Collection<JavaFile> brewJava() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(binderClassName), +      result.superclass(ParameterizedTypeName.get(parentBinding.binderClassName, targetType));, +    List<JavaFile> files = new ArrayList<>();, +      TypeSpec unbinder = createUnbinderClass(targetType);, +      files.add(JavaFile.builder(unbinderClassName.packageName(), unbinder), +          .addFileComment("Generated code from Butter Knife. Do not modify!"), +          .build(), +      );, +    files.add(JavaFile.builder(binderClassName.packageName(), result.build()), +        .build());, +, +    return files;, +        .addModifiers(PUBLIC);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PUBLIC);, +, +        .addModifiers(PUBLIC, STATIC);, +          .add("$T.$N(target", parentBinding.binderClassName, BIND_TO_TARGET);, +    return binderClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName binderClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, +      boolean isFinal) {, +    this.binderClassName = binderClassName;, +    this.unbinderClassName = unbinderClassName;, +  Collection<JavaFile> brewJava() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(binderClassName), +      result.superclass(ParameterizedTypeName.get(parentBinding.binderClassName, targetType));, +    List<JavaFile> files = new ArrayList<>();, +      TypeSpec unbinder = createUnbinderClass(targetType);, +      files.add(JavaFile.builder(unbinderClassName.packageName(), unbinder), +          .addFileComment("Generated code from Butter Knife. Do not modify!"), +          .build(), +      );, +    files.add(JavaFile.builder(binderClassName.packageName(), result.build()), +        .build());, +, +    return files;, +        .addModifiers(PUBLIC);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PUBLIC);, +, +        .addModifiers(PUBLIC, STATIC);, +          .add("$T.$N(target", parentBinding.binderClassName, BIND_TO_TARGET);, +    return binderClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.JavaFile;, +      for (JavaFile javaFile : bindingClass.brewJava()) {, +          javaFile.writeTo(filer);, +    }, +      String className = getClassName(enclosingElement, packageName);, +      ClassName binderClassName = ClassName.get(packageName, className + "_ViewBinder");, +      ClassName unbinderClassName = ClassName.get(packageName, className + "_ViewBinding");, +      bindingClass = new BindingClass(targetType, binderClassName, unbinderClassName, isFinal);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName binderClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, +      boolean isFinal) {, +    this.binderClassName = binderClassName;, +    this.unbinderClassName = unbinderClassName;, +  Collection<JavaFile> brewJava() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(binderClassName), +      result.superclass(ParameterizedTypeName.get(parentBinding.binderClassName, targetType));, +    List<JavaFile> files = new ArrayList<>();, +      TypeSpec unbinder = createUnbinderClass(targetType);, +      files.add(JavaFile.builder(unbinderClassName.packageName(), unbinder), +          .addFileComment("Generated code from Butter Knife. Do not modify!"), +          .build(), +      );, +    files.add(JavaFile.builder(binderClassName.packageName(), result.build()), +        .build());, +, +    return files;, +        .addModifiers(PUBLIC);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PUBLIC);, +, +        .addModifiers(PUBLIC, STATIC);, +          .add("$T.$N(target", parentBinding.binderClassName, BIND_TO_TARGET);, +    return binderClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.JavaFile;, +      for (JavaFile javaFile : bindingClass.brewJava()) {, +          javaFile.writeTo(filer);, +    }, +      String className = getClassName(enclosingElement, packageName);, +      ClassName binderClassName = ClassName.get(packageName, className + "_ViewBinder");, +      ClassName unbinderClassName = ClassName.get(packageName, className + "_ViewBinding");, +      bindingClass = new BindingClass(targetType, binderClassName, unbinderClassName, isFinal);, +++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java, +    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", "", +        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n", +        + "  public static void bindToTarget(Test target, Resources res) {\n"]
[+++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +  repositories {, +    mavenCentral(), +   }, +++ b/build.gradle, +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code array} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(T[] array, Action<? super T>... actions) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(array[i], i);, +      }, +    }, +  }, +, +  /** Apply the specified {@code action} across the {@code array} of views. */, +  public static <T extends View> void apply(T[] array, Action<? super T> action) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      action.apply(array[i], i);, +    }, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */, +  public static <T extends View, V> void apply(T[] array, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value, i);, +    }, +  }, +, +  /**, +   * Apply the specified {@code value} across the {@code array} of views using the {@code property}., +   */, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +  public static <T extends View, V> void apply(T[] array, Property<? super T, V> setter,, +      V value) {, +    //noinspection ForLoopReplaceableByForEach, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value);, +    }, +  }, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code array} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(T[] array, Action<? super T>... actions) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(array[i], i);, +      }, +    }, +  }, +, +  /** Apply the specified {@code action} across the {@code array} of views. */, +  public static <T extends View> void apply(T[] array, Action<? super T> action) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      action.apply(array[i], i);, +    }, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */, +  public static <T extends View, V> void apply(T[] array, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value, i);, +    }, +  }, +, +  /**, +   * Apply the specified {@code value} across the {@code array} of views using the {@code property}., +   */, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +  public static <T extends View, V> void apply(T[] array, Property<? super T, V> setter,, +      V value) {, +    //noinspection ForLoopReplaceableByForEach, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value);, +    }, +  }, +, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  @Test public void propertyAppliedToEveryViewInList() {, +  @Test public void propertyAppliedToEveryViewInArray() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();, +, +    View[] views = new View[] { view1, view2, view3 };, +    ButterKnife.apply(views, PROPERTY_ENABLED, false);, +, +    assertThat(view1.isEnabled()).isFalse();, +    assertThat(view2.isEnabled()).isFalse();, +    assertThat(view3.isEnabled()).isFalse();, +  }, +, +  @Test public void actionAppliedToEveryViewInList() {, +  @Test public void actionAppliedToEveryViewInArray() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();]
[+++ b/gradle.properties, +VERSION_NAME=10.1.1-SNAPSHOT]
[+++ b/butterknife/src/it/field-visibility/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>field-visibility</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/butterknife/src/it/field-visibility/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>field-visibility</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/butterknife/src/it/field-visibility/src/main/java/test/Test.java, +package test;, +, +import android.app.Activity;, +import android.view.View;, +import butterknife.InjectView;, +, +public class Test extends Activity {, +  @InjectView(1) public View thing1;, +  @InjectView(2) protected View thing2;]
[+++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ /dev/null, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ /dev/null, +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}BindView(R.id.title) TextView title;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindView {, +  /** View ID to which the field will be bound. */, +  @IdRes int[] value();, +}, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ /dev/null, +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}BindView(R.id.title) TextView title;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindView {, +  /** View ID to which the field will be bound. */, +  @IdRes int[] value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.BindView;, +    types.add(BindView.class.getCanonicalName());, +    // Process each @BindView element., +    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {, +        logParsingError(element, BindView.class, e);, +    if (isInaccessibleViaGeneratedCode(BindView.class, "fields", element), +        || isBindingInWrongPackage(BindView.class, element)) {, +      error(element, "@%s must be a List or array. (%s.%s)", BindView.class.getSimpleName(),, +          BindView.class.getSimpleName(), enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +    int[] ids = element.getAnnotation(BindView.class).value();, +          BindView.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),, +              BindView.class.getSimpleName(), id, existingBinding.getName(),, +            BindView.class.getSimpleName(), enclosingElement.getQualifiedName(),, +          BindView.class.getSimpleName(), enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +    int[] ids = element.getAnnotation(BindView.class).value();, +      error(element, "@%s must specify at least one ID. (%s.%s)", BindView.class.getSimpleName(),, +      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)",, +          BindView.class.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ /dev/null, +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      return new ImmutableList<>(filterNull(views));, +  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      return new ImmutableList<>(filterNull(views));, +  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java, +  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, +  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();, +  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();, +      List<ListenerMethod> methods = new ArrayList<>();, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      return new ImmutableList<>(filterNull(views));, +  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java, +  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, +  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();, +  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();, +      List<ListenerMethod> methods = new ArrayList<>();, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    Set<String> types = new LinkedHashSet<>();, +    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();, +    Set<String> erasedTargetNames = new LinkedHashSet<>();, +    FieldCollectionViewBinding.Kind kind;, +    Set<Integer> seenElements = new LinkedHashSet<>();, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      return new ImmutableList<>(filterNull(views));, +  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java, +  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, +  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();, +  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();, +      List<ListenerMethod> methods = new ArrayList<>();, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    Set<String> types = new LinkedHashSet<>();, +    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();, +    Set<String> erasedTargetNames = new LinkedHashSet<>();, +    FieldCollectionViewBinding.Kind kind;, +    Set<Integer> seenElements = new LinkedHashSet<>();, +++ b/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java, +    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      return new ImmutableList<>(filterNull(views));, +  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java, +  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, +  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();, +  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();, +      List<ListenerMethod> methods = new ArrayList<>();, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    Set<String> types = new LinkedHashSet<>();, +    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();, +    Set<String> erasedTargetNames = new LinkedHashSet<>();, +    FieldCollectionViewBinding.Kind kind;, +    Set<Integer> seenElements = new LinkedHashSet<>();, +++ b/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java, +    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));, +++ b/butterknife/src/main/java/butterknife/internal/ViewBindings.java, +  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();, +      methodBindings = new LinkedHashMap<>();, +      methods = new LinkedHashMap<>();, +      set = new LinkedHashSet<>();, +    List<ViewBinding> requiredViewBindings = new ArrayList<>();, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      return new ImmutableList<>(filterNull(views));, +  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java, +  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, +  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();, +  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();, +      List<ListenerMethod> methods = new ArrayList<>();, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    Set<String> types = new LinkedHashSet<>();, +    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();, +    Set<String> erasedTargetNames = new LinkedHashSet<>();, +    FieldCollectionViewBinding.Kind kind;, +    Set<Integer> seenElements = new LinkedHashSet<>();, +++ b/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java, +    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));, +++ b/butterknife/src/main/java/butterknife/internal/ViewBindings.java, +  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();, +      methodBindings = new LinkedHashMap<>();, +      methods = new LinkedHashMap<>();, +      set = new LinkedHashSet<>();, +    List<ViewBinding> requiredViewBindings = new ArrayList<>();, +++ b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java, +  @Nullable @Bind(20) View optionalBind;, +  @Nullable @Bind(40) TextView optionalFIndTextView;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      return new ImmutableList<>(filterNull(views));, +  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();, +++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java, +  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, +  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();]
[+++ b/CHANGELOG.md, +Version 8.4.0 *(2016-08-26)*, +----------------------------, +, + * New: `@BindFloat` annotation for dimensions whose format is of type 'float'. See the annotation for more, +   information., + * Generated constructors are now annotated with `@UiThread` and non-final, base classes `unbind()` methods, +   are annotated with `@CallSuper`., +, +, +++ b/CHANGELOG.md, +Version 8.4.0 *(2016-08-26)*, +----------------------------, +, + * New: `@BindFloat` annotation for dimensions whose format is of type 'float'. See the annotation for more, +   information., + * Generated constructors are now annotated with `@UiThread` and non-final, base classes `unbind()` methods, +   are annotated with `@CallSuper`., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.4.0', +  apt 'com.jakewharton:butterknife-compiler:8.4.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0', +++ b/CHANGELOG.md, +Version 8.4.0 *(2016-08-26)*, +----------------------------, +, + * New: `@BindFloat` annotation for dimensions whose format is of type 'float'. See the annotation for more, +   information., + * Generated constructors are now annotated with `@UiThread` and non-final, base classes `unbind()` methods, +   are annotated with `@CallSuper`., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.4.0', +  apt 'com.jakewharton:butterknife-compiler:8.4.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0', +++ b/gradle.properties, +VERSION_NAME=8.4.0]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import com.android.build.gradle.internal.res.GenerateLibraryRFileTask, +import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask, +          // TODO: switch to better API once exists in AGP (https://issuetracker.google.com/118668005), +          val rFile =, +              project.files(, +                  when (processResources) {, +                    is GenerateLibraryRFileTask -> processResources.textSymbolOutputFile, +                    is LinkApplicationAndroidResourcesTask -> processResources.textSymbolOutputFile, +                    else -> throw RuntimeException(, +                        "Minimum supported Android Gradle Plugin is 3.1.0"), +                  }), +                  .builtBy(processResources), +          project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {, +            it.outputDir = outputDir, +            it.rFile = rFile, +            it.useAndroidX = useAndroidX, +            it.packageName = rPackage, +            it.className = "R2", +            variant.registerJavaGeneratingTask(it, outputDir), +++ b/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import com.android.build.gradle.internal.res.GenerateLibraryRFileTask, +import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask, +          // TODO: switch to better API once exists in AGP (https://issuetracker.google.com/118668005), +          val rFile =, +              project.files(, +                  when (processResources) {, +                    is GenerateLibraryRFileTask -> processResources.textSymbolOutputFile, +                    is LinkApplicationAndroidResourcesTask -> processResources.textSymbolOutputFile, +                    else -> throw RuntimeException(, +                        "Minimum supported Android Gradle Plugin is 3.1.0"), +                  }), +                  .builtBy(processResources), +          project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {, +            it.outputDir = outputDir, +            it.rFile = rFile, +            it.useAndroidX = useAndroidX, +            it.packageName = rPackage, +            it.className = "R2", +            variant.registerJavaGeneratingTask(it, outputDir), +++ /dev/null, +++ b/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import com.android.build.gradle.internal.res.GenerateLibraryRFileTask, +import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask, +          // TODO: switch to better API once exists in AGP (https://issuetracker.google.com/118668005), +          val rFile =, +              project.files(, +                  when (processResources) {, +                    is GenerateLibraryRFileTask -> processResources.textSymbolOutputFile, +                    is LinkApplicationAndroidResourcesTask -> processResources.textSymbolOutputFile, +                    else -> throw RuntimeException(, +                        "Minimum supported Android Gradle Plugin is 3.1.0"), +                  }), +                  .builtBy(processResources), +          project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {, +            it.outputDir = outputDir, +            it.rFile = rFile, +            it.useAndroidX = useAndroidX, +            it.packageName = rPackage, +            it.className = "R2", +            variant.registerJavaGeneratingTask(it, outputDir), +++ /dev/null, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt, +package butterknife.plugin, +, +import com.squareup.javapoet.ClassName, +import com.squareup.javapoet.FieldSpec, +import com.squareup.javapoet.JavaFile, +import com.squareup.javapoet.TypeSpec, +import javax.lang.model.element.Modifier.FINAL, +import javax.lang.model.element.Modifier.PUBLIC, +import javax.lang.model.element.Modifier.STATIC, +, +, +private const val ANNOTATION_PACKAGE = "androidx.annotation", +private const val ANNOTATION_PACKAGE_LEGACY = "android.support.annotation", +internal val SUPPORTED_TYPES = setOf("anim", "array", "attr", "bool", "color", "dimen",, +    "drawable", "id", "integer", "layout", "menu", "plurals", "string", "style", "styleable"), +, +/**, + * Generates a class that contains all supported field names in an R file as final values., + * Also enables adding support annotations to indicate the type of resource for every field., + */, +class FinalRClassBuilder(, +  private val packageName: String,, +  private val className: String,, +  private val useLegacyTypes: Boolean, +) {, +, +  private var resourceTypes = mutableMapOf<String, TypeSpec.Builder>(), +]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +, +  /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */, +  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API., +  public static <T extends View> T findById(Dialog dialog, int id) {, +    return (T) dialog.findViewById(id);, +  }, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +, +  /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */, +  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API., +  public static <T extends View> T findById(Dialog dialog, int id) {, +    return (T) dialog.findViewById(id);, +  }, +++ b/website/index.html, +                To prevent ProGuard renaming classes that use @InjectView on a member field the <code>keepnames</code> option is used.</p>, +            <pre>-dontwarn butterknife.internal.**, +-keepnames class * { @butterknife.InjectView *;}</pre>]
[+++ b/pom.xml, +          <configuration>, +            <additionalparam>-Xdoclint:none</additionalparam>, +          </configuration>]
[+++ b/butterknife/proguard-rules.txt, +-keep public class * implements butterknife.internal.ViewBinder { public <init>(); }]
[+++ b/butterknife-sample/pom.xml, +    <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>5.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/.travis.yml, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.0.0', +++ b/.travis.yml, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-annotations/src/main/java/butterknife/Bind.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}Bind(R.id.title) TextView title;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface Bind {, +  /** View ID to which the field will be bound. */, +  @IdRes int[] value();, +}, +++ b/.travis.yml, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-annotations/src/main/java/butterknife/Bind.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}Bind(R.id.title) TextView title;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface Bind {, +  /** View ID to which the field will be bound. */, +  @IdRes int[] value();, +}, +++ /dev/null, +++ b/.travis.yml, +++ b/README.md, + * Eliminate `findViewById` calls by using `@Bind` on fields., +  @Bind(R.id.user) EditText username;, +  @Bind(R.id.pass) EditText password;, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.0.0', +++ b/butterknife-annotations/src/main/java/butterknife/Bind.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}Bind(R.id.title) TextView title;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface Bind {, +  /** View ID to which the field will be bound. */, +  @IdRes int[] value();]
[+++ b/butterknife-gradle-plugin/src/test/build.gradle, +        main.java.srcDirs += '../../../../../butterknife-runtime/src/main/java', +++ b/butterknife-gradle-plugin/src/test/build.gradle, +        main.java.srcDirs += '../../../../../butterknife-runtime/src/main/java', +++ b/butterknife-runtime/build.gradle, +apply plugin: 'com.android.library', +, +android {, +  compileSdkVersion versions.compileSdk, +, +  defaultConfig {, +    minSdkVersion versions.minSdk, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +, +    javaCompileOptions {, +      annotationProcessorOptions {, +        includeCompileClasspath = true, +      }, +    }, +  }, +, +  lintOptions {, +    textReport true, +    textOutput 'stdout', +    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks., +    checkReleaseBuilds false, +  }, +, +  // TODO replace with https://issuetracker.google.com/issues/72050365 once released., +  libraryVariants.all {, +    it.generateBuildConfig.enabled = false, +  }, +}, +, +dependencies {, +  api project(':butterknife-annotations'), +  api deps.support.compat, +, +  lintChecks project(':butterknife-lint'), +, +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestAnnotationProcessor project(':butterknife-compiler'), +, +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.compiletesting, +  testImplementation files(getRuntimeJar()), +  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar()), +  testImplementation project(':butterknife-compiler'), +}, +, +def getRuntimeJar() {, +  try {, +    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();, +    File runtimeJar = new File(javaBase, "lib/rt.jar");, +    if (runtimeJar.exists()) {, +      return runtimeJar;, +    }, +    runtimeJar = new File(javaBase, "jre/lib/rt.jar");, +    return runtimeJar.exists() ? runtimeJar : null;, +  } catch (IOException e) {, +    throw new RuntimeException(e);, +  }, +}, +, +apply from: rootProject.file('gradle/gradle-mvn-push.gradle'), +++ b/butterknife-gradle-plugin/src/test/build.gradle, +        main.java.srcDirs += '../../../../../butterknife-runtime/src/main/java', +++ b/butterknife-runtime/build.gradle, +apply plugin: 'com.android.library', +, +android {, +  compileSdkVersion versions.compileSdk, +, +  defaultConfig {, +    minSdkVersion versions.minSdk, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +, +    javaCompileOptions {, +      annotationProcessorOptions {, +        includeCompileClasspath = true, +      }, +    }, +  }, +, +  lintOptions {, +    textReport true, +    textOutput 'stdout', +    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks., +    checkReleaseBuilds false, +  }, +, +  // TODO replace with https://issuetracker.google.com/issues/72050365 once released., +  libraryVariants.all {, +    it.generateBuildConfig.enabled = false, +  }]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import android.text.Editable;, +import android.text.TextWatcher;, +        unbinder = parseOnTextChanged(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +, +  private static @Nullable Unbinder parseOnTextChanged(Object target, Method method, View source) {, +    OnTextChanged onTextChanged = method.getAnnotation(OnTextChanged.class);, +    if (onTextChanged == null) {, +      return null;, +    }, +    validateMember(method);, +    validateReturnType(method, void.class);, +, +    List<TextView> views =, +        findViews(source, onTextChanged.value(), isRequired(method), method.getName(), View.class);, +, +    TextWatcher textWatcher;, +    switch (onTextChanged.callback()) {, +      case TEXT_CHANGED: {, +        ArgumentTransformer argumentTransformer =, +            createArgumentTransformer(method, ON_TEXT_CHANGED_TYPES);, +        textWatcher = new EmptyTextWatcher() {, +          @Override public void onTextChanged(CharSequence s, int start, int before, int count) {, +            tryInvoke(method, target, argumentTransformer.transform(s, start, before, count));, +          }, +        };, +        break;, +      }, +      case BEFORE_TEXT_CHANGED: {, +        ArgumentTransformer argumentTransformer =, +            createArgumentTransformer(method, BEFORE_TEXT_CHANGED_TYPES);, +        textWatcher = new EmptyTextWatcher() {, +          @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {, +            tryInvoke(method, target, argumentTransformer.transform(s, start, count, after));, +          }, +        };, +        break;, +      }, +      case AFTER_TEXT_CHANGED: {, +        ArgumentTransformer argumentTransformer =, +            createArgumentTransformer(method, AFTER_TEXT_CHANGED_TYPES);, +        textWatcher = new EmptyTextWatcher() {, +          @Override public void afterTextChanged(Editable s) {, +            tryInvoke(method, target, argumentTransformer.transform(s));, +          }, +        };, +        break;, +      }, +      default:, +        throw new AssertionError();, +    }, +, +    ViewCollections.set(views, ADD_TEXT_WATCHER, textWatcher);, +    return new ListenerUnbinder<>(views, REMOVE_TEXT_WATCHER, textWatcher);, +  }, +, +  private static final Setter<TextView, TextWatcher> ADD_TEXT_WATCHER =, +      (view, value, index) -> view.addTextChangedListener(value);, +  private static final Setter<TextView, TextWatcher> REMOVE_TEXT_WATCHER =, +      (view, value, index) -> view.removeTextChangedListener(value);, +  private static final Class<?>[] ON_TEXT_CHANGED_TYPES =, +      { CharSequence.class, int.class, int.class, int.class };, +  private static final Class<?>[] BEFORE_TEXT_CHANGED_TYPES = ON_TEXT_CHANGED_TYPES;, +  private static final Class<?>[] AFTER_TEXT_CHANGED_TYPES = { Editable.class };, +++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import android.text.Editable;, +import android.text.TextWatcher;, +        unbinder = parseOnTextChanged(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +, +  private static @Nullable Unbinder parseOnTextChanged(Object target, Method method, View source) {, +    OnTextChanged onTextChanged = method.getAnnotation(OnTextChanged.class);, +    if (onTextChanged == null) {, +      return null;, +    }, +    validateMember(method);, +    validateReturnType(method, void.class);, +, +    List<TextView> views =, +        findViews(source, onTextChanged.value(), isRequired(method), method.getName(), View.class);, +, +    TextWatcher textWatcher;, +    switch (onTextChanged.callback()) {, +      case TEXT_CHANGED: {, +        ArgumentTransformer argumentTransformer =, +            createArgumentTransformer(method, ON_TEXT_CHANGED_TYPES);, +        textWatcher = new EmptyTextWatcher() {, +          @Override public void onTextChanged(CharSequence s, int start, int before, int count) {, +            tryInvoke(method, target, argumentTransformer.transform(s, start, before, count));, +          }]
[+++ b/gradle.properties, +VERSION_NAME=8.3.1-SNAPSHOT]
[+++ b/.travis.yml]
[+++ b/README.md, +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +++ b/README.md, +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +++ b/butterknife-annotations/src/main/java/butterknife/Optional.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Denote that the view specified by the injection is not required to be present., + * <pre><code>, + * {@literal @}Optional @OnClick(R.id.subtitle) void onSubtitleClick() {}, + * </code></pre>, + */, +@Retention(CLASS) @Target(METHOD), +public @interface Optional {, +}, +++ b/README.md, +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +++ b/butterknife-annotations/src/main/java/butterknife/Optional.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Denote that the view specified by the injection is not required to be present., + * <pre><code>, + * {@literal @}Optional @OnClick(R.id.subtitle) void onSubtitleClick() {}, + * </code></pre>, + */, +@Retention(CLASS) @Target(METHOD), +public @interface Optional {, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.Optional;, +import butterknife.Unbinder;, +    boolean required = isFieldRequired(element);, +    boolean required = isFieldRequired(element);, +    boolean required = isListenerRequired(executableElement);, +            error(element, "ID-free binding must not be annotated with @Optional. (%s.%s)",, +  private static boolean isFieldRequired(Element element) {, +, +  private static boolean isListenerRequired(ExecutableElement element) {, +    return element.getAnnotation(Optional.class) == null;, +  }, +++ b/README.md, +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +++ b/butterknife-annotations/src/main/java/butterknife/Optional.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Denote that the view specified by the injection is not required to be present., + * <pre><code>, + * {@literal @}Optional @OnClick(R.id.subtitle) void onSubtitleClick() {}, + * </code></pre>, + */, +@Retention(CLASS) @Target(METHOD), +public @interface Optional {, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.Optional;, +import butterknife.Unbinder;, +    boolean required = isFieldRequired(element);, +    boolean required = isFieldRequired(element);, +    boolean required = isListenerRequired(executableElement);, +            error(element, "ID-free binding must not be annotated with @Optional. (%s.%s)",, +  private static boolean isFieldRequired(Element element) {, +, +  private static boolean isListenerRequired(ExecutableElement element) {, +    return element.getAnnotation(Optional.class) == null;, +  }, +++ b/butterknife-compiler/src/test/java/butterknife/BindTest.java, +            "import butterknife.Optional;",, +            "  @Optional @OnClick void doStuff() {}",, +            ("ID-free binding must not be annotated with @Optional. (test.Test.doStuff)")), +++ b/README.md, +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +++ b/butterknife-annotations/src/main/java/butterknife/Optional.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.CLASS;]
[+++ b/gradle.properties, +VERSION_NAME=8.7.1-SNAPSHOT]
[+++ b/gradle.properties, +VERSION_NAME=8.5.1-SNAPSHOT]
[+++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.0-rc1</version>, +++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.0-rc1</version>, +++ /dev/null, +++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.0-rc1</version>, +++ /dev/null, +++ b/butterknife/src/it/field-visibility/src/test/java/test/TargetTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE), +++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/pom.xml, +, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/butterknife/src/it/field-visibility/pom.xml, +      <version>2.0-rc1</version>, +++ /dev/null, +++ b/butterknife/src/it/field-visibility/src/test/java/test/TargetTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE), +++ b/butterknife/src/it/one-find-per-id/pom.xml, +      <version>2.0-rc1</version>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +    return String.valueOf(value);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId();, +      fieldName = "view" + bindings.getId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +    return String.valueOf(value);, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.app.Activity;\n", +        + "import android.view.View;\n", +        + "import butterknife.BindView;\n", +        + "public class Test extends Activity {\n", +        + "    @BindView(1) View thing;\n", +        + "}", +    );, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.app.Activity;\n", +        + "import android.view.View;\n", +        + "import butterknife.BindView;\n", +        + "public final class Test extends Activity {\n", +        + "    @BindView(1) View thing;\n", +        + "}", +    );, +    JavaFileObject baseSource = JavaFileObjects.forSourceString("test.Base", "", +        + "package test;\n", +        + "import android.app.Activity;\n", +        + "import android.view.View;\n", +        + "import butterknife.BindView;\n", +        + "public class Base extends Activity {\n", +        + "    @BindView(1) View thing;\n", +        + "}", +    );, +    JavaFileObject testSource = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.view.View;\n", +        + "import butterknife.BindView;\n", +        + "public final class Test extends Base {\n", +        + "    @BindView(1) View thing;\n", +        + "}", +    );, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer", "", +        + "package test;\n", +        + "import android.app.Activity;\n", +        + "import android.view.View;\n", +        + "import butterknife.BindView;\n", +        + "public class Outer {\n", +        + "  public static class Test extends Activity {\n", +        + "    @BindView(1) View thing;\n", +        + "  }\n", +        + "}", +    );, +    JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test", "", +        + "package com.Example;\n", +        + "import android.app.Activity;\n", +        + "import android.view.View;\n", +        + "import butterknife.BindView;\n", +        + "public class Test extends Activity {\n", +        + "    @BindView(1) View thing;\n", +        + "}", +    );, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.app.Activity;\n", +        + "import android.view.View;\n", +        + "import butterknife.BindView;\n", +        + "public class Test extends Activity {\n", +        + "    interface TestInterface {}\n", +        + "    @BindView(1) TestInterface thing;\n", +        + "}", +    );, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.app.Activity;\n", +        + "import android.widget.EditText;\n", +        + "import android.widget.TextView;\n", +        + "import butterknife.BindView;\n", +        + "class Test<T extends TextView> extends Activity {\n", +        + "    @BindView(1) T thing;\n", +        + "}", +    );, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.app.Activity;\n", +        + "import android.view.View;\n", +        + "import butterknife.BindView;\n", +        + "import butterknife.OnClick;\n", +        + "public class Test extends Activity {\n", +        + "  @BindView(1) View thing1;\n", +        + "  @OnClick(1) void doStuff() {}\n", +        + "}", +    );]
[+++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, +  testCompile deps.openglApi, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, +  testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, +  testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/butterknife/build.gradle, +  testCompile deps.openglApi, +++ b/build.gradle, +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, +  testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/butterknife/build.gradle, +  testCompile deps.openglApi, +++ b/butterknife/src/test/resources/robolectric.properties, +constants=butterknife.BuildConfig, +sdk=23]
[+++ b/butterknife-compiler/pom.xml, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>javapoet</artifactId>, +    </dependency>, +++ b/butterknife-compiler/pom.xml, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>javapoet</artifactId>, +    </dependency>, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import android.content.res.Resources;, +import android.graphics.BitmapFactory;, +import butterknife.ButterKnife;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.TypeVariableName;, +import com.squareup.javapoet.WildcardTypeName;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PUBLIC;, +  JavaFile brewJava() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(className), +        .addModifiers(PUBLIC), +        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));, +      result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),, +          TypeVariableName.get("T")));, +      result.addSuperinterface(, +          ParameterizedTypeName.get(ClassName.get(ButterKnife.ViewBinder.class),, +              TypeVariableName.get("T")));, +    result.addMethod(createBindMethod());, +    result.addMethod(createUnbindMethod());, +, +    return JavaFile.builder(classPackage, result.build()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +        .build();, +  }, +, +  private MethodSpec createBindMethod() {, +    MethodSpec.Builder result = MethodSpec.methodBuilder("bind"), +        .addAnnotation(Override.class), +        .addModifiers(PUBLIC), +        .addParameter(ButterKnife.Finder.class, "finder", FINAL), +        .addParameter(TypeVariableName.get("T"), "target", FINAL), +        .addParameter(Object.class, "source");, +      result.addStatement("super.bind(finder, target, source)");, +      result.addStatement("$T view", View.class);, +        addViewBindings(result, bindings);, +        emitCollectionBinding(result, entry.getKey(), entry.getValue());, +      result.addStatement("$T res = finder.getContext(source).getResources()", Resources.class);, +          result.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),, +              BitmapFactory.class, binding.getId());, +          result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),, +              binding.getId());, +    return result.build();, +  private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,, +    String ofName;, +        ofName = "arrayOf";, +        ofName = "listOf";, +    CodeBlock.Builder builder = CodeBlock.builder();, +        builder.add(", ");, +      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";, +      builder.add("\nfinder.<$T>$L(source, $L, $S)", ClassName.bestGuess(binding.getType()),, +          findMethod, ids[i], asHumanDescription(Collections.singleton(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), ButterKnife.Finder.class,, +        ofName, builder.build());, +  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {, +      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());, +        result.addStatement("view = target", bindings.getId());, +        result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),, +            asHumanDescription(requiredViewBindings));, +    addFieldBindings(result, bindings);, +    addMethodBindings(result, bindings);, +  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {, +        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),, +            bindings.getId(), asHumanDescription(fieldBindings));, +        result.addStatement("target.$L = view", fieldBinding.getName());, +  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {, +      result.beginControlFlow("if (view != null)");, +      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder(""), +          .superclass(ClassName.bestGuess(listener.type()));, +        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name()), +            .addAnnotation(Override.class), +            .addModifiers(PUBLIC), +            .returns(bestGuess(method.returnType()));, +          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);, +        CodeBlock.Builder builder = CodeBlock.builder();, +          builder.add("return ");, +          for (MethodViewBinding binding : methodBindings.get(method)) {, +            builder.add("target.$L(", binding.getName());, +              if (i > 0) {, +                builder.add(", ");, +              }, +, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n",, +                    bestGuess(parameter.getType()), listenerPosition, method.name(),]
[+++ b/pom.xml, +  <organization>, +    <name>Square, Inc.</name>, +    <url>http://squareup.com</url>, +  </organization>, +, +++ b/pom.xml, +  <organization>, +    <name>Square, Inc.</name>, +    <url>http://squareup.com</url>, +  </organization>, +, +++ b/website/index.html, +            <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept. , +                To prevent ProGuard renaming classes that use @InjectView on a member field the <code>keepnames</code> option is used.</p>, +-keep class **$$ViewInjector { *; }, +-keepnames class * { @butterknife.InjectView *;}</pre>]
[+++ b/CHANGELOG.md, +Version 6.1.0 *(2015-01-29)*, +----------------------------, +, + * New: Support for injecting interface types everywhere that views were previously supported (e.g., `Checkable`)., + * Eliminate reflection-based method invocation for injection and resetting. This makes performace slightly faster, +   (although if you are worried about the performance of Butter Knife you have other problems). The only reflection, +   in the library is a single `Class.forName` lookup for each type., +, +, +++ b/CHANGELOG.md, +Version 6.1.0 *(2015-01-29)*, +----------------------------, +, + * New: Support for injecting interface types everywhere that views were previously supported (e.g., `Checkable`)., + * Eliminate reflection-based method invocation for injection and resetting. This makes performace slightly faster, +   (although if you are worried about the performance of Butter Knife you have other problems). The only reflection, +   in the library is a single `Class.forName` lookup for each type., +, +, +++ b/README.md, +  <version>6.1.0</version>, +compile 'com.jakewharton:butterknife:6.1.0', +++ b/CHANGELOG.md, +Version 6.1.0 *(2015-01-29)*, +----------------------------, +, + * New: Support for injecting interface types everywhere that views were previously supported (e.g., `Checkable`)., + * Eliminate reflection-based method invocation for injection and resetting. This makes performace slightly faster, +   (although if you are worried about the performance of Butter Knife you have other problems). The only reflection, +   in the library is a single `Class.forName` lookup for each type., +, +, +++ b/README.md, +  <version>6.1.0</version>, +compile 'com.jakewharton:butterknife:6.1.0', +++ b/butterknife-sample/pom.xml, +    <version>6.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 6.1.0 *(2015-01-29)*, +----------------------------, +, + * New: Support for injecting interface types everywhere that views were previously supported (e.g., `Checkable`)., + * Eliminate reflection-based method invocation for injection and resetting. This makes performace slightly faster, +   (although if you are worried about the performance of Butter Knife you have other problems). The only reflection, +   in the library is a single `Class.forName` lookup for each type., +, +, +++ b/README.md, +  <version>6.1.0</version>, +compile 'com.jakewharton:butterknife:6.1.0', +++ b/butterknife-sample/pom.xml, +    <version>6.1.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>6.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 6.1.0 *(2015-01-29)*, +----------------------------, +, + * New: Support for injecting interface types everywhere that views were previously supported (e.g., `Checkable`)., + * Eliminate reflection-based method invocation for injection and resetting. This makes performace slightly faster, +   (although if you are worried about the performance of Butter Knife you have other problems). The only reflection, +   in the library is a single `Class.forName` lookup for each type., +, +, +++ b/README.md, +  <version>6.1.0</version>, +compile 'com.jakewharton:butterknife:6.1.0', +++ b/butterknife-sample/pom.xml, +    <version>6.1.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>6.1.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>6.1.0-SNAPSHOT</version>]
[+++ b/butterknife-sample/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip]
[+++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>com.google.testing.compile</groupId>, +      <artifactId>compile-testing</artifactId>, +      <scope>test</scope>, +    </dependency>, +        <executions>, +          <execution>, +            <id>default-compile</id>, +            <goals><goal>compile</goal></goals>, +              <compilerArgument>-proc:none</compilerArgument>, +          </execution>, +          <execution>, +            <id>default-test-compile</id>, +            <goals><goal>testCompile</goal></goals>, +            <configuration>, +              <annotationProcessors>, +                <annotationProcessor>butterknife.internal.InjectViewProcessor</annotationProcessor>, +              </annotationProcessors>, +            </configuration>, +          </execution>, +        </executions>, +++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>com.google.testing.compile</groupId>, +      <artifactId>compile-testing</artifactId>, +      <scope>test</scope>, +    </dependency>, +        <executions>, +          <execution>, +            <id>default-compile</id>, +            <goals><goal>compile</goal></goals>, +              <compilerArgument>-proc:none</compilerArgument>, +          </execution>, +          <execution>, +            <id>default-test-compile</id>, +            <goals><goal>testCompile</goal></goals>, +            <configuration>, +              <annotationProcessors>, +                <annotationProcessor>butterknife.internal.InjectViewProcessor</annotationProcessor>, +              </annotationProcessors>, +            </configuration>, +          </execution>, +        </executions>, +++ /dev/null, +++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>com.google.testing.compile</groupId>, +      <artifactId>compile-testing</artifactId>, +      <scope>test</scope>, +    </dependency>, +        <executions>, +          <execution>, +            <id>default-compile</id>, +            <goals><goal>compile</goal></goals>, +              <compilerArgument>-proc:none</compilerArgument>, +          </execution>, +          <execution>, +            <id>default-test-compile</id>, +            <goals><goal>testCompile</goal></goals>, +            <configuration>, +              <annotationProcessors>, +                <annotationProcessor>butterknife.internal.InjectViewProcessor</annotationProcessor>, +              </annotationProcessors>, +            </configuration>, +          </execution>, +        </executions>, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>com.google.testing.compile</groupId>, +      <artifactId>compile-testing</artifactId>, +      <scope>test</scope>, +    </dependency>, +        <executions>, +          <execution>, +            <id>default-compile</id>, +            <goals><goal>compile</goal></goals>, +              <compilerArgument>-proc:none</compilerArgument>, +          </execution>, +          <execution>, +            <id>default-test-compile</id>, +            <goals><goal>testCompile</goal></goals>, +            <configuration>, +              <annotationProcessors>, +                <annotationProcessor>butterknife.internal.InjectViewProcessor</annotationProcessor>, +              </annotationProcessors>, +            </configuration>, +          </execution>, +        </executions>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife/pom.xml, +    <dependency>, +      <groupId>com.google.testing.compile</groupId>, +      <artifactId>compile-testing</artifactId>, +      <scope>test</scope>, +    </dependency>]
[+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java, +import com.android.tools.lint.checks.infrastructure.TestFile;, +import org.junit.Test;, +import static com.android.tools.lint.checks.infrastructure.TestFiles.java;, +import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;, +, +public final class InvalidR2UsageDetectorTest {, +  private static final TestFile BIND_TEST = java("", +, +  private static final TestFile R2 = java("", +  @Test public void noR2Usage() {, +    lint() //, +        .files(R2, //, +            java("" //, +                + "package sample;\n" //, +                + "class NoR2Usage {}\n")) //, +        .issues(InvalidR2UsageDetector.ISSUE) //, +        .run() //, +        .expectClean();, +  @Test public void usesR2InAnnotations() {, +    lint() //, +        .files(R2, BIND_TEST, //, +            java("", +                + "}\n") //, +        ) //, +        .issues(InvalidR2UsageDetector.ISSUE) //, +        .run() //, +        .expectClean();, +  @Test public void usesR2OutsideAnnotations() {, +    lint() //, +        .files(R2, //, +            java("", +                + "}\n" //, +            )) //, +        .issues(InvalidR2UsageDetector.ISSUE) //, +        .run() //, +        .expectErrorCount(2) //, +        .expectWarningCount(0);, +  @Test public void usesR2WithSuppression() {, +    lint() //, +        .files(R2, java("", +            + "}\n")) //, +        .issues(InvalidR2UsageDetector.ISSUE) //, +        .run() //, +        .expectClean();, +++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java, +import com.android.tools.lint.checks.infrastructure.TestFile;, +import org.junit.Test;, +import static com.android.tools.lint.checks.infrastructure.TestFiles.java;, +import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;, +, +public final class InvalidR2UsageDetectorTest {, +  private static final TestFile BIND_TEST = java("", +, +  private static final TestFile R2 = java("", +  @Test public void noR2Usage() {, +    lint() //, +        .files(R2, //, +            java("" //, +                + "package sample;\n" //, +                + "class NoR2Usage {}\n")) //, +        .issues(InvalidR2UsageDetector.ISSUE) //, +        .run() //, +        .expectClean();, +  @Test public void usesR2InAnnotations() {, +    lint() //, +        .files(R2, BIND_TEST, //, +            java("", +                + "}\n") //, +        ) //, +        .issues(InvalidR2UsageDetector.ISSUE) //, +        .run() //, +        .expectClean();, +  @Test public void usesR2OutsideAnnotations() {, +    lint() //, +        .files(R2, //, +            java("", +                + "}\n" //, +            )) //, +        .issues(InvalidR2UsageDetector.ISSUE) //, +        .run() //, +        .expectErrorCount(2) //, +        .expectWarningCount(0);, +  @Test public void usesR2WithSuppression() {, +    lint() //, +        .files(R2, java("", +            + "}\n")) //, +        .issues(InvalidR2UsageDetector.ISSUE) //, +        .run() //, +        .expectClean();, +++ b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java, +  @Test public void issues() {]
[+++ b/gradle.properties, +VERSION_NAME=8.2.2-SNAPSHOT]
[+++ b/pom.xml, +    <compile-test.version>0.5</compile-test.version>]
[+++ b/CHANGELOG.md, +Version 10.1.0 *(2019-02-13)*, +-----------------------------, +, + * New: Listeners which require return values (e.g., long click) can now be bound to methods returning `void`., +   The default value of `true` will be returned in this case., + * New: Add support for `@OnTextChanged` and `@OnPageChange` to reflection backend., + * Remove enforcement of required views in the reflection backend. Most `@Nullable` annotations do not have, +   runtime retention so they can't be checked at runtime with reflection. Instead of forcing everyone to find, +   a new annotation, this enforcement is now dropped. While this might lead to nulls in otherwise required, +   view bindings, they'll either be unused or quickly cause a `NullPointerException`., +, +, +++ b/CHANGELOG.md, +Version 10.1.0 *(2019-02-13)*, +-----------------------------, +, + * New: Listeners which require return values (e.g., long click) can now be bound to methods returning `void`., +   The default value of `true` will be returned in this case., + * New: Add support for `@OnTextChanged` and `@OnPageChange` to reflection backend., + * Remove enforcement of required views in the reflection backend. Most `@Nullable` annotations do not have, +   runtime retention so they can't be checked at runtime with reflection. Instead of forcing everyone to find, +   a new annotation, this enforcement is now dropped. While this might lead to nulls in otherwise required, +   view bindings, they'll either be unused or quickly cause a `NullPointerException`., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:10.1.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:10.1.0', +++ b/CHANGELOG.md, +Version 10.1.0 *(2019-02-13)*, +-----------------------------, +, + * New: Listeners which require return values (e.g., long click) can now be bound to methods returning `void`., +   The default value of `true` will be returned in this case., + * New: Add support for `@OnTextChanged` and `@OnPageChange` to reflection backend., + * Remove enforcement of required views in the reflection backend. Most `@Nullable` annotations do not have, +   runtime retention so they can't be checked at runtime with reflection. Instead of forcing everyone to find, +   a new annotation, this enforcement is now dropped. While this might lead to nulls in otherwise required, +   view bindings, they'll either be unused or quickly cause a `NullPointerException`., +, +, +++ b/README.md, +  implementation 'com.jakewharton:butterknife:10.1.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:10.1.0', +++ b/gradle.properties, +VERSION_NAME=10.1.0]
[+++ b/CHANGELOG.md, +Version 8.1.0 *(2016-06-14)*, +----------------------------, +, + * New: Change the structure of generated view binders to optimize for performance and generated code. This, +   should result in faster binding (not that it's slow) and a reduction of methods., + * Fix: Call the correct method on `TextView` to unbind `@OnTextChanged` uses., + * Fix: Properly handle package names which contain uppercase letters., +, +, +++ b/CHANGELOG.md, +Version 8.1.0 *(2016-06-14)*, +----------------------------, +, + * New: Change the structure of generated view binders to optimize for performance and generated code. This, +   should result in faster binding (not that it's slow) and a reduction of methods., + * Fix: Call the correct method on `TextView` to unbind `@OnTextChanged` uses., + * Fix: Properly handle package names which contain uppercase letters., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.1.0', +  apt 'com.jakewharton:butterknife-compiler:8.1.0', +++ b/CHANGELOG.md, +Version 8.1.0 *(2016-06-14)*, +----------------------------, +, + * New: Change the structure of generated view binders to optimize for performance and generated code. This, +   should result in faster binding (not that it's slow) and a reduction of methods., + * Fix: Call the correct method on `TextView` to unbind `@OnTextChanged` uses., + * Fix: Properly handle package names which contain uppercase letters., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.1.0', +  apt 'com.jakewharton:butterknife-compiler:8.1.0', +++ b/gradle.properties, +VERSION_NAME=8.1.0]
[+++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, +  fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, +  fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import groovy.util.XmlSlurper, +  // Parse the variant's main manifest file in order to get the package id which is used to create, +  // R.java in the right place., +  private fun getPackageName(variant : BaseVariant) : String {, +    val slurper = XmlSlurper(false, false), +    val list = variant.sourceSets.map { it.manifestFile }, +, +    // According to the documentation, the earlier files in the list are meant to be overridden by the later ones., +    // So the first file in the sourceSets list should be main., +    val result = slurper.parse(list[0]), +    return result.getProperty("@package").toString(), +  }, +, +      val rPackage = getPackageName(variant), +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, +  fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import groovy.util.XmlSlurper, +  // Parse the variant's main manifest file in order to get the package id which is used to create, +  // R.java in the right place., +  private fun getPackageName(variant : BaseVariant) : String {, +    val slurper = XmlSlurper(false, false), +    val list = variant.sourceSets.map { it.manifestFile }, +, +    // According to the documentation, the earlier files in the list are meant to be overridden by the later ones., +    // So the first file in the sourceSets list should be main., +    val result = slurper.parse(list[0]), +    return result.getProperty("@package").toString(), +  }, +, +      val rPackage = getPackageName(variant), +++ b/butterknife-gradle-plugin/src/test/AndroidManifest.xml, +<manifest package="com.example.butterknife"/>, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, +  fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import groovy.util.XmlSlurper, +  // Parse the variant's main manifest file in order to get the package id which is used to create, +  // R.java in the right place., +  private fun getPackageName(variant : BaseVariant) : String {, +    val slurper = XmlSlurper(false, false), +    val list = variant.sourceSets.map { it.manifestFile }, +, +    // According to the documentation, the earlier files in the list are meant to be overridden by the later ones., +    // So the first file in the sourceSets list should be main., +    val result = slurper.parse(list[0]), +    return result.getProperty("@package").toString(), +  }, +, +      val rPackage = getPackageName(variant), +++ b/butterknife-gradle-plugin/src/test/AndroidManifest.xml, +<manifest package="com.example.butterknife"/>, +++ b/butterknife-gradle-plugin/src/test/build.gradle, +plugins {, +    id 'com.android.application', +    id 'com.jakewharton.butterknife', +}, +, +repositories {]
[+++ b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java, +package butterknife.functional;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.support.test.InstrumentationRegistry;, +import butterknife.BindBitmap;, +import butterknife.BindBool;, +import butterknife.Unbinder;, +import butterknife.test.R;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.assertTrue;, +, +public final class BindBitmapTest {, +  private final Context context = InstrumentationRegistry.getContext();, +, +  static class Target {, +    @BindBitmap(R.drawable.pixel) Bitmap actual;, +  }, +, +  @Test public void asBitmap() {, +    Target target = new Target();, +    Bitmap expected = BitmapFactory.decodeResource(context.getResources(), R.drawable.pixel);, +, +    Unbinder unbinder = new BindBitmapTest$Target_ViewBinding(target, context);, +    assertTrue(target.actual.sameAs(expected));, +, +    unbinder.unbind();, +    assertTrue(target.actual.sameAs(expected));, +  }, +}, +++ b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java, +package butterknife.functional;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.support.test.InstrumentationRegistry;, +import butterknife.BindBitmap;, +import butterknife.BindBool;, +import butterknife.Unbinder;, +import butterknife.test.R;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.assertTrue;, +, +public final class BindBitmapTest {, +  private final Context context = InstrumentationRegistry.getContext();, +, +  static class Target {, +    @BindBitmap(R.drawable.pixel) Bitmap actual;, +  }, +, +  @Test public void asBitmap() {, +    Target target = new Target();, +    Bitmap expected = BitmapFactory.decodeResource(context.getResources(), R.drawable.pixel);, +, +    Unbinder unbinder = new BindBitmapTest$Target_ViewBinding(target, context);, +    assertTrue(target.actual.sameAs(expected));, +, +    unbinder.unbind();, +    assertTrue(target.actual.sameAs(expected));, +  }, +}, +++ b/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java, +import android.content.res.ColorStateList;, +  static class IntTarget {, +    IntTarget target = new IntTarget();, +    Unbinder unbinder = new BindColorTest$IntTarget_ViewBinding(target, context);, +, +  static class ColorStateListTarget {, +    @BindColor(R.color.colors) ColorStateList actual;, +  }, +, +  @Test public void asColorStateList() {, +    ColorStateListTarget target = new ColorStateListTarget();, +    ColorStateList expected = context.getResources().getColorStateList(R.color.colors);, +, +    Unbinder unbinder = new BindColorTest$ColorStateListTarget_ViewBinding(target, context);, +    assertThat(target.actual.toString()).isEqualTo(expected.toString());, +, +    unbinder.unbind();, +    assertThat(target.actual.toString()).isEqualTo(expected.toString());, +  }, +++ b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java, +package butterknife.functional;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.support.test.InstrumentationRegistry;, +import butterknife.BindBitmap;, +import butterknife.BindBool;, +import butterknife.Unbinder;, +import butterknife.test.R;, +import org.junit.Test;]
[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +            applyPlugin(featureVariants), +            applyPlugin(libraryVariants), +        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), +        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), +  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, +        // TODO proper task registered as source-generating?, +        processResources.doLast {, +          val pathToR = processResources.packageForR.replace('.', File.separatorChar), +          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, +              processResources.packageForR, "R2"), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +            applyPlugin(featureVariants), +            applyPlugin(libraryVariants), +        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), +        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), +  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, +        // TODO proper task registered as source-generating?, +        processResources.doLast {, +          val pathToR = processResources.packageForR.replace('.', File.separatorChar), +          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, +              processResources.packageForR, "R2"), +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +            applyPlugin(featureVariants), +            applyPlugin(libraryVariants), +        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants), +        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants), +  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {, +        // TODO proper task registered as source-generating?, +        processResources.doLast {, +          val pathToR = processResources.packageForR.replace('.', File.separatorChar), +          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,, +              processResources.packageForR, "R2"), +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/build.gradle, +      robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/build.gradle, +      robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/butterknife-integration-test/build.gradle, +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.robolectric, +++ b/build.gradle, +      robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/butterknife-integration-test/build.gradle, +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.robolectric, +++ b/butterknife-integration-test/proguard.pro, +-dontoptimize, +-dontobfuscate, +++ b/build.gradle, +      robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/butterknife-integration-test/build.gradle, +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.robolectric, +++ b/butterknife-integration-test/proguard.pro, +-dontoptimize, +-dontobfuscate, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java, +package com.example.butterknife;, +, +import android.test.ActivityInstrumentationTestCase2;, +import com.example.butterknife.library.SimpleActivity;, +, +public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {, +  public SimpleActivityTest() {, +    super(SimpleActivity.class);, +  }, +, +  public void testActivityStarts() {, +    getActivity(); // Trigger activity creation., +    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup., +  }, +}, +++ b/build.gradle, +      robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/butterknife-integration-test/build.gradle, +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.robolectric, +++ b/butterknife-integration-test/proguard.pro, +-dontoptimize, +-dontobfuscate, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java, +package com.example.butterknife;, +, +import android.test.ActivityInstrumentationTestCase2;, +import com.example.butterknife.library.SimpleActivity;, +, +public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {, +  public SimpleActivityTest() {, +    super(SimpleActivity.class);, +  }, +, +  public void testActivityStarts() {, +    getActivity(); // Trigger activity creation., +    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup., +  }, +}, +++ /dev/null, +++ b/build.gradle, +      robolectric: 'org.robolectric:robolectric:3.7.1',, +++ b/butterknife-integration-test/build.gradle, +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro', +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.robolectric, +++ b/butterknife-integration-test/proguard.pro, +-dontoptimize, +-dontobfuscate, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java, +package com.example.butterknife;, +, +import android.test.ActivityInstrumentationTestCase2;, +import com.example.butterknife.library.SimpleActivity;, +, +public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {, +  public SimpleActivityTest() {, +    super(SimpleActivity.class);, +  }, +, +  public void testActivityStarts() {, +    getActivity(); // Trigger activity creation., +    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup., +  }, +}, +++ /dev/null, +++ /dev/null]
[+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, +    ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, +    ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(activity);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, +    ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(activity);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(holder);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, +    ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(activity);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(holder);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +package butterknife;, +, +import android.app.Activity;, +import android.util.Log;, +import android.view.View;, +import butterknife.internal.InjectViewProcessor;, +import java.lang.reflect.Method;, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +/** View injection utilities. */, +public class ButterKnife {, +  private ButterKnife() {, +    // No instances., +  }, +, +  public enum Finder {, +    VIEW {, +      @Override public View findById(Object source, int id) {, +        return ((View) source).findViewById(id);, +      }, +    },, +    ACTIVITY {, +      @Override public View findById(Object source, int id) {, +        return ((Activity) source).findViewById(id);, +      }, +    };, +, +    public abstract View findById(Object source, int id);, +  }, +, +  private static final String TAG = "ButterKnife";, +  private static boolean debug = false;, +, +  static final Map<Class<?>, Method> INJECTORS = new LinkedHashMap<Class<?>, Method>();, +  static final Map<Class<?>, Method> RESETTERS = new LinkedHashMap<Class<?>, Method>();, +  static final Method NO_OP = null;, +, +  /** Control whether debug logging is enabled. */]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "ButterKnife", "Unbinder");, +    result.addMethod(createBindMethod());, +, +    ClassName targetClassName = ClassName.bestGuess(targetClass);, +, +    MethodSpec unbinderConstructor = MethodSpec.constructorBuilder(), +        .addParameter(targetClassName, "target"), +        .addStatement("this.$1N = $1N", "target"), +        .build();, +, +        .addSuperinterface(UNBINDER), +        .addModifiers(PRIVATE, STATIC, FINAL), +        .addField(targetClassName, "target", PRIVATE), +        .addMethod(unbinderConstructor);, +    // Even if there are no bindings we need to implement the interface method., +    MethodSpec.Builder unbindMethod = MethodSpec.methodBuilder("unbind"), +        .addModifiers(PUBLIC);, +    // Throw exception if unbind called twice., +    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +        "Bindings already cleared.");, +      addFieldAndUnbindStatement(result, unbindMethod, bindings);, +        unbindMethod.addStatement("target.$L = null", fieldBinding.getName());, +      unbindMethod.addStatement("target.$L = null", fieldCollectionBinding.getName());, +    unbindMethod.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());, +    unbindMethod.addStatement("target = null");, +    result.addMethod(unbindMethod.build());, +      result.addStatement("$T unbinder = new $T($N)", unbinderBinding.getUnbinderClassName(),, +          unbinderBinding.getUnbinderClassName(), "target");, +    if (hasUnbinder()) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "ButterKnife", "Unbinder");, +    result.addMethod(createBindMethod());, +, +    ClassName targetClassName = ClassName.bestGuess(targetClass);, +, +    MethodSpec unbinderConstructor = MethodSpec.constructorBuilder(), +        .addParameter(targetClassName, "target"), +        .addStatement("this.$1N = $1N", "target"), +        .build();, +, +        .addSuperinterface(UNBINDER), +        .addModifiers(PRIVATE, STATIC, FINAL), +        .addField(targetClassName, "target", PRIVATE), +        .addMethod(unbinderConstructor);, +    // Even if there are no bindings we need to implement the interface method., +    MethodSpec.Builder unbindMethod = MethodSpec.methodBuilder("unbind"), +        .addModifiers(PUBLIC);, +    // Throw exception if unbind called twice., +    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +        "Bindings already cleared.");, +      addFieldAndUnbindStatement(result, unbindMethod, bindings);, +        unbindMethod.addStatement("target.$L = null", fieldBinding.getName());, +      unbindMethod.addStatement("target.$L = null", fieldCollectionBinding.getName());, +    unbindMethod.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());, +    unbindMethod.addStatement("target = null");, +    result.addMethod(unbindMethod.build());, +      result.addStatement("$T unbinder = new $T($N)", unbinderBinding.getUnbinderClassName(),, +          unbinderBinding.getUnbinderClassName(), "target");, +    if (hasUnbinder()) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    Set<String> erasedTargetNames = new LinkedHashSet<>();, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);, +      if (parentClassFqcn != null) {, +        entry.getValue().setParentViewBinder(parentClassFqcn + BINDING_CLASS_SUFFIX);, +      Set<String> erasedTargetNames) {, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    // Verify that the element type is ButterKnife.Unbinder., +          "@%s filed must be of type ButterKnife.Unbinder. (%s.%s)",, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +      Map<TypeElement, BindingClass> targetClassMap, Set<String> erasedTargetNames), +    erasedTargetNames.add(enclosingElement.toString());, +  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {, +      if (parents.contains(typeElement.toString())) {, +    }, +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "ButterKnife", "Unbinder");, +    result.addMethod(createBindMethod());]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;, + * {@literal @}ResourceColor(R.color.error_red) int errorRed;, + * </code></pre>, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +    public abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;, + * {@literal @}ResourceColor(R.color.error_red) int errorRed;, + * </code></pre>, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +    public abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ResourceBool.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified boolean resource ID., + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface ResourceBool {, +  /** Boolean resource ID to which the field will be bound. */, +  int value();, +}, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;, + * {@literal @}ResourceColor(R.color.error_red) int errorRed;, + * </code></pre>, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +    public abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ResourceBool.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified boolean resource ID., + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface ResourceBool {, +  /** Boolean resource ID to which the field will be bound. */, +  int value();, +}, +++ b/butterknife/src/main/java/butterknife/ResourceColor.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified color resource ID. Type can be {@code int} or, + * {@link android.content.res.ColorStateList}., + * <pre><code>, + * {@literal @}ResourceColor(R.color.background_green) int green;, + * {@literal @}ResourceColor(R.color.background_green_selector) ColorStateList greenSelector;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface ResourceColor {, +  /** Color resource ID to which the field will be bound. */, +  int value();, +}, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;, +import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;, +, +    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, +    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;, +import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;, +, +    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, +    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +  public static final String ANDROID_PREFIX = "android.";, +  public static final String JAVA_PREFIX = "java.";, +  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,, +      Element element) {, +    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, +    String qualifiedName = enclosingElement.getQualifiedName().toString();, +, +    if (qualifiedName.startsWith(ANDROID_PREFIX)) {, +      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",, +          annotationClass.getSimpleName(), qualifiedName);, +      return true;, +    }, +    if (qualifiedName.startsWith(JAVA_PREFIX)) {, +      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",, +          annotationClass.getSimpleName(), qualifiedName);, +      return true;, +    }, +, +    return false;, +  }, +, +    hasError |= isBindingInWrongPackage(InjectView.class, element);, +    hasError |= isBindingInWrongPackage(InjectViews.class, element);, +    hasError |= isBindingInWrongPackage(annotationClass, element);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;, +import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;, +, +    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, +    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +  public static final String ANDROID_PREFIX = "android.";, +  public static final String JAVA_PREFIX = "java.";, +  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,, +      Element element) {, +    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, +    String qualifiedName = enclosingElement.getQualifiedName().toString();, +, +    if (qualifiedName.startsWith(ANDROID_PREFIX)) {, +      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",, +          annotationClass.getSimpleName(), qualifiedName);, +      return true;, +    }, +    if (qualifiedName.startsWith(JAVA_PREFIX)) {, +      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",, +          annotationClass.getSimpleName(), qualifiedName);, +      return true;, +    }, +, +    return false;, +  }, +, +    hasError |= isBindingInWrongPackage(InjectView.class, element);, +    hasError |= isBindingInWrongPackage(InjectViews.class, element);, +    hasError |= isBindingInWrongPackage(annotationClass, element);, +++ b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java, +  @Test public void failsInJavaPackage() {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(, +        "package java.test;",, +        "import android.view.View;",, +        "import butterknife.InjectView;",, +        "public class Test {",, +        "  @InjectView(1) View thing;",, +        "}", +    ));, +, +    ASSERT.about(javaSource()).that(source), +        .processedWith(butterknifeProcessors()), +        .failsToCompile(), +        .withErrorContaining(, +            "@InjectView-annotated class incorrectly in Java framework package. (java.test.Test)"), +        .in(source).onLine(5);, +  }, +, +  @Test public void failsInAndroidPackage() {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(, +        "package android.test;",, +        "import android.view.View;",, +        "import butterknife.InjectView;",, +        "public class Test {",, +        "  @InjectView(1) View thing;",, +        "}", +    ));, +, +    ASSERT.about(javaSource()).that(source), +        .processedWith(butterknifeProcessors()), +        .failsToCompile()]
[+++ b/butterknife-sample/pom.xml, +    <version>3.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>3.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>3.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>3.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>3.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>3.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    return getViewBinder(target).bind(Finder.ACTIVITY, target, source);]
[+++ b/butterknife-sample/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply {@code action} to {@code view}. */, +  public static <T extends View> void apply(T view, Action<? super T> action) {, +    action.apply(view, 0);, +  }, +, +  /** Set {@code value} on {@code view} using {@code setter}. */, +  public static <T extends View, V> void apply(T view, Setter<? super T, V> setter, V value) {, +    setter.set(view, value, 0);, +  }, +, +  /** Apply {@code value} to {@code view} using {@code property}. */, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +  public static <T extends View, V> void apply(T view, Property<? super T, V> setter, V value) {, +    setter.set(view, value);, +  }, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply {@code action} to {@code view}. */, +  public static <T extends View> void apply(T view, Action<? super T> action) {, +    action.apply(view, 0);, +  }, +, +  /** Set {@code value} on {@code view} using {@code setter}. */, +  public static <T extends View, V> void apply(T view, Setter<? super T, V> setter, V value) {, +    setter.set(view, value, 0);, +  }, +, +  /** Apply {@code value} to {@code view} using {@code property}. */, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +  public static <T extends View, V> void apply(T view, Property<? super T, V> setter, V value) {, +    setter.set(view, value);, +  }, +, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  @Test public void propertyAppliedToView() {, +    View view = new View(Robolectric.application);, +    assertThat(view).isEnabled();, +    ButterKnife.apply(view, PROPERTY_ENABLED, false);, +, +    assertThat(view).isDisabled();, +  }, +, +  @Test public void actionAppliedToView() {, +    View view = new View(Robolectric.application);, +    assertThat(view).isEnabled();, +, +    ButterKnife.apply(view, ACTION_DISABLE);, +, +    assertThat(view).isDisabled();, +  }, +, +  @Test public void setterAppliedToView() {, +    View view = new View(Robolectric.application);, +    assertThat(view).isEnabled();, +, +    ButterKnife.apply(view, SETTER_ENABLED, false);, +, +    assertThat(view).isDisabled();, +  }, +]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +  private final RScanner rScanner = new RScanner();, +    Id resourceId = elementToId(element, BindView.class, id);, +      String existingBindingName = builder.findExistingBindingName(resourceId);, +    builder.addField(resourceId, new FieldViewBinding(name, type, required));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind,, +        new ArrayList<>(elementToIds(element, BindViews.class, ids).values()), required));, +    Id resourceId = elementToId(element, BindAnim.class, id);, +, +    builder.addResource(new FieldAnimationBinding(resourceId, name));, +    Id resourceId = elementToId(element, BindBool.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BOOL));, +    Id resourceId = elementToId(element, BindColor.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name,, +    Id resourceId = elementToId(element, BindDimen.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name,, +    Id resourceId = elementToId(element, BindBitmap.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BITMAP));, +    Map<Integer, Id> resourceIds = elementToIds(element, BindDrawable.class, new int[] {id, tint});, +, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint)));, +    Id resourceId = elementToId(element, BindFloat.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.FLOAT));, +    Id resourceId = elementToId(element, BindFont.class, bindFont.value());, +    builder.addResource(new FieldTypefaceBinding(resourceId, name, style));, +    Id resourceId = elementToId(element, BindInt.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.INT));, +    Id resourceId = elementToId(element, BindString.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.STRING));, +    Id resourceId = elementToId(element, BindArray.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name, type));, +    Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);, +, +    for (int id : resourceIds.keySet()) {, +      if (!builder.addMethod(resourceIds.get(id), listener, method, binding)) {, +  private Id elementToId(Element element, Class<? extends Annotation> annotation, int value) {, +    JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));, +    if (tree != null) { // tree can be null if the references are compiled types and not source, +      tree.accept(rScanner);, +      return new Id(value, rScanner.rSymbol);, +    }, +    return new Id(value);, +  }, +, +  private Map<Integer, Id> elementToIds(Element element, Class<? extends Annotation> annotation,, +      int[] values) {, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +    JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));, +    if (tree != null) { // tree can be null if the references are compiled types and not source, +      for (int value : values) {, +        tree.accept(rScanner);, +        resourceIds.put(value, new Id(value, rScanner.rSymbol));, +      }, +    } else {, +      for (int value : values) {, +        resourceIds.put(value, new Id(value));, +      }, +    }, +    return resourceIds;, +  }, +, +  private static class RScanner extends TreeScanner {, +    Symbol rSymbol;, +        rSymbol = symbol;, +      } else {, +        rSymbol = null;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +  private final RScanner rScanner = new RScanner();, +    Id resourceId = elementToId(element, BindView.class, id);, +      String existingBindingName = builder.findExistingBindingName(resourceId);, +    builder.addField(resourceId, new FieldViewBinding(name, type, required));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind,, +        new ArrayList<>(elementToIds(element, BindViews.class, ids).values()), required));, +    Id resourceId = elementToId(element, BindAnim.class, id);, +, +    builder.addResource(new FieldAnimationBinding(resourceId, name));, +    Id resourceId = elementToId(element, BindBool.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BOOL));, +    Id resourceId = elementToId(element, BindColor.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name,, +    Id resourceId = elementToId(element, BindDimen.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name,, +    Id resourceId = elementToId(element, BindBitmap.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BITMAP));, +    Map<Integer, Id> resourceIds = elementToIds(element, BindDrawable.class, new int[] {id, tint});, +, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint)));, +    Id resourceId = elementToId(element, BindFloat.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.FLOAT));, +    Id resourceId = elementToId(element, BindFont.class, bindFont.value());, +    builder.addResource(new FieldTypefaceBinding(resourceId, name, style));, +    Id resourceId = elementToId(element, BindInt.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.INT));, +    Id resourceId = elementToId(element, BindString.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.STRING));, +    Id resourceId = elementToId(element, BindArray.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name, type));, +    Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);, +, +    for (int id : resourceIds.keySet()) {]
[+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java, +import butterknife.Action;, +import butterknife.ViewCollections;, +  private static final Action<View> ALPHA_FADE = new Action<View>() {, +    ViewCollections.run(headerViews, ALPHA_FADE);]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    private static <T> T[] filterNull(T[] views) {, +      int newSize = views.length;, +      for (T view : views) {, +        if (view == null) {, +          newSize -= 1;, +        }, +      }, +      if (newSize == views.length) {, +      //noinspection unchecked, +      T[] newViews = (T[]) new Object[newSize];, +      int nextIndex = 0;, +      for (T view : views) {, +        if (view != null) {, +          newViews[nextIndex++] = view;, +        }, +      }, +      return newViews;, +    }, +, +    public static <T> T[] arrayOf(T... views) {, +      return filterNull(views);, +    }, +      return new ImmutableList<T>(filterNull(views));, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    private static <T> T[] filterNull(T[] views) {, +      int newSize = views.length;, +      for (T view : views) {, +        if (view == null) {, +          newSize -= 1;, +        }, +      }, +      if (newSize == views.length) {, +      //noinspection unchecked, +      T[] newViews = (T[]) new Object[newSize];, +      int nextIndex = 0;, +      for (T view : views) {, +        if (view != null) {, +          newViews[nextIndex++] = view;, +        }, +      }, +      return newViews;, +    }, +, +    public static <T> T[] arrayOf(T... views) {, +      return filterNull(views);, +    }, +      return new ImmutableList<T>(filterNull(views));, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +import static butterknife.ButterKnife.Finder.arrayOf;, +import static butterknife.ButterKnife.Finder.listOf;, +  @Test public void listOfFiltersNull() {, +    assertThat(listOf(null, null, null)).isEmpty();, +    assertThat(listOf("One", null, null)).containsExactly("One");, +    assertThat(listOf(null, "One", null)).containsExactly("One");, +    assertThat(listOf(null, null, "One")).containsExactly("One");, +    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");, +    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");, +    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");, +  }, +, +  @Test public void arrayOfFiltersNull() {, +    assertThat(arrayOf(null, null, null)).isEmpty();, +    assertThat(arrayOf("One", null, null)).containsExactly("One");, +    assertThat(arrayOf(null, "One", null)).containsExactly("One");, +    assertThat(arrayOf(null, null, "One")).containsExactly("One");, +    assertThat(arrayOf("One", "Two", null)).containsExactly("One", "Two");, +    assertThat(arrayOf("One", null, "Two")).containsExactly("One", "Two");, +    assertThat(arrayOf(null, "One", "Two")).containsExactly("One", "Two");, +  }, +]
[+++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_LEGACY =, +  private static final ClassName UI_THREAD =, +  private static final ClassName CALL_SUPER_LEGACY =, +  private static final ClassName CALL_SUPER =, +  static final ClassName CONTEXT_COMPAT_LEGACY =, +  static final ClassName CONTEXT_COMPAT =, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useLegacyTypes) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useLegacyTypes);, +  private TypeSpec createType(int sdk, boolean debuggable, boolean useLegacyTypes) {, +      result.addMethod(createBindingConstructorForView(useLegacyTypes));, +      result.addMethod(createBindingConstructorForActivity(useLegacyTypes));, +      result.addMethod(createBindingConstructorForDialog(useLegacyTypes));, +      result.addMethod(createBindingViewDelegateConstructor(useLegacyTypes));, +    result.addMethod(createBindingConstructor(sdk, debuggable, useLegacyTypes));, +      result.addMethod(createBindingUnbindMethod(result, useLegacyTypes));, +  private MethodSpec createBindingViewDelegateConstructor(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForView(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForActivity(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForDialog(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +        addViewBinding(constructor, binding, debuggable, useLegacyTypes);, +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,, +      boolean useLegacyTypes) {, +      result.addAnnotation(useLegacyTypes ? CALL_SUPER_LEGACY : CALL_SUPER);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useLegacyTypes);, +      ViewBinding bindings, boolean useLegacyTypes) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useLegacyTypes));, +      String targetType = getTargetType(listenerClass, useLegacyTypes);, +  private static String getType(ListenerClass listenerClass, boolean useLegacyTypes) {, +    String legacyType = listenerClass.legacyType();, +    if (useLegacyTypes && !legacyType.isEmpty()) {, +      type = legacyType;, +  private static String getTargetType(ListenerClass listenerClass, boolean useLegacyTypes) {, +    String legacyTargetType = listenerClass.legacyTargetType();, +    if (useLegacyTypes && !legacyTargetType.isEmpty()) {, +      targetType = legacyTargetType;, +      boolean useLegacyTypes) {, +    addMethodBindings(result, binding, debuggable, useLegacyTypes);, +      boolean useLegacyTypes) {, +          .superclass(ClassName.bestGuess(getType(listener, useLegacyTypes)));, +        TypeName listenerClassName = bestGuess(getType(listener, useLegacyTypes));, +      String targetType = getTargetType(listener, useLegacyTypes);, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_LEGACY =, +  private static final ClassName UI_THREAD =, +  private static final ClassName CALL_SUPER_LEGACY =, +  private static final ClassName CALL_SUPER =, +  static final ClassName CONTEXT_COMPAT_LEGACY =, +  static final ClassName CONTEXT_COMPAT =, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useLegacyTypes) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useLegacyTypes);, +  private TypeSpec createType(int sdk, boolean debuggable, boolean useLegacyTypes) {, +      result.addMethod(createBindingConstructorForView(useLegacyTypes));, +      result.addMethod(createBindingConstructorForActivity(useLegacyTypes));, +      result.addMethod(createBindingConstructorForDialog(useLegacyTypes));]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip]
[+++ b/butterknife-sample/pom.xml, +    <version>5.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>5.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="JakeWharton/butterknife", +JDK="oraclejdk8", +BRANCH="master", +, +set -e, +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="JakeWharton/butterknife", +JDK="oraclejdk8", +BRANCH="master", +, +set -e, +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="JakeWharton/butterknife", +JDK="oraclejdk8", +BRANCH="master", +, +set -e, +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>]
[+++ b/gradle.properties, +VERSION_NAME=8.1.0-SNAPSHOT]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** DO NOT USE: Exposed for generated code. */, +  public interface Injector<T> {, +    void inject(Finder finder, T target, Object source);, +    void reset(T target);, +  }, +, +  static final Map<Class<?>, Injector<Object>> INJECTORS =, +      new LinkedHashMap<Class<?>, Injector<Object>>();, +  static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {, +    @Override public void inject(Finder finder, Object target, Object source) { }, +    @Override public void reset(Object target) { }, +  };, +      Injector<Object> injector = findInjectorForClass(targetClass);, +      if (injector != null) {, +        injector.reset(target);, +      throw new RuntimeException("Unable to reset views for " + target, e);, +      Injector<Object> injector = findInjectorForClass(targetClass);, +      if (injector != null) {, +        injector.inject(finder, target, source);, +      throw new RuntimeException("Unable to inject views for " + target, e);, +  private static Injector<Object> findInjectorForClass(Class<?> cls), +      throws IllegalAccessException, InstantiationException {, +    Injector<Object> injector = INJECTORS.get(cls);, +    if (injector != null) {, +      return injector;, +      return NOP_INJECTOR;, +      Class<?> injectorClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +      //noinspection unchecked, +      injector = (Injector<Object>) injectorClass.newInstance();, +      injector = findInjectorForClass(cls.getSuperclass());, +    INJECTORS.put(cls, injector);, +    return injector;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** DO NOT USE: Exposed for generated code. */, +  public interface Injector<T> {, +    void inject(Finder finder, T target, Object source);, +    void reset(T target);, +  }, +, +  static final Map<Class<?>, Injector<Object>> INJECTORS =, +      new LinkedHashMap<Class<?>, Injector<Object>>();, +  static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {, +    @Override public void inject(Finder finder, Object target, Object source) { }, +    @Override public void reset(Object target) { }, +  };, +      Injector<Object> injector = findInjectorForClass(targetClass);, +      if (injector != null) {, +        injector.reset(target);, +      throw new RuntimeException("Unable to reset views for " + target, e);, +      Injector<Object> injector = findInjectorForClass(targetClass);, +      if (injector != null) {, +        injector.inject(finder, target, source);, +      throw new RuntimeException("Unable to inject views for " + target, e);, +  private static Injector<Object> findInjectorForClass(Class<?> cls), +      throws IllegalAccessException, InstantiationException {, +    Injector<Object> injector = INJECTORS.get(cls);, +    if (injector != null) {, +      return injector;, +      return NOP_INJECTOR;, +      Class<?> injectorClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +      //noinspection unchecked, +      injector = (Injector<Object>) injectorClass.newInstance();, +      injector = findInjectorForClass(cls.getSuperclass());, +    INJECTORS.put(cls, injector);, +    return injector;, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java, +, +    builder.append("import butterknife.ButterKnife.Finder;\n");, +    if (parentInjector == null) {, +      builder.append("import butterknife.ButterKnife.Injector;\n");, +    }, +    builder.append('\n');, +, +    builder.append("public class ").append(className);, +    builder.append("<T extends ").append(targetClass).append(">");, +, +    if (parentInjector != null) {, +      builder.append(" extends ").append(parentInjector).append("<T>");, +    } else {, +      builder.append(" implements Injector<T>");, +    }, +    builder.append(" {\n");, +, +, +    builder.append("  @Override "), +        .append("public void inject(Finder finder, final T target, Object source) {\n");, +      builder.append("    super.inject(finder, target, source);\n\n");, +    builder.append("  @Override public void reset(T target) {\n");, +      builder.append("    super.reset(target);\n\n");, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** DO NOT USE: Exposed for generated code. */, +  public interface Injector<T> {, +    void inject(Finder finder, T target, Object source);, +    void reset(T target);, +  }, +, +  static final Map<Class<?>, Injector<Object>> INJECTORS =, +      new LinkedHashMap<Class<?>, Injector<Object>>();, +  static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {]
[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +    validateReturnType(method, void.class);, +    final ArgumentTransformer argumentTransformer =, +        createArgumentTransformer(method, ON_CLICK_TYPES);, +        tryInvoke(method, target, argumentTransformer.transform(v));, +    final boolean propagateReturn = validateReturnType(method, boolean.class);, +    final ArgumentTransformer argumentTransformer =, +        createArgumentTransformer(method, ON_LONG_CLICK_TYPES);, +        Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));, +        //noinspection SimplifiableConditionalExpression, +        return propagateReturn, +            ? (boolean) returnValue, +            : false;, +    validateReturnType(method, void.class);, +    final ArgumentTransformer argumentTransformer =, +        createArgumentTransformer(method, ON_ITEM_CLICK_TYPES);, +        tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));, +  /** Returns true when the return value should be propagated. Use a default otherwise. */, +  private static boolean validateReturnType(Method method, Class<?> expected) {, +    Class<?> returnType = method.getReturnType();, +    if (returnType == void.class) {, +      return false;, +    }, +    if (returnType != expected) {, +      String expectedType = "'" + expected.getName() + "'";, +      if (expected != void.class) {, +        expectedType = "'void' or " + expectedType;, +      }, +      throw new IllegalStateException(method.getDeclaringClass().getName(), +          + ".", +          + method.getName(), +          + " must have return type of ", +          + expectedType);, +    }, +    return true;, +  }, +, +  private static ArgumentTransformer createArgumentTransformer(Method method,, +      Class<?>[] callbackParameterTypes) {, +    Class<?>[] targetParameterTypes = method.getParameterTypes();, +, +    int targetParameterLength = targetParameterTypes.length;, +    if (targetParameterLength == 0) {, +      // Special case the common case of no arguments., +      return ArgumentTransformer.EMPTY;, +    }, +, +    int callbackParameterLength = callbackParameterTypes.length;, +    if (targetParameterLength > callbackParameterLength) {, +      throw new IllegalStateException(method.getDeclaringClass().getName(), +          + ".", +          + method.getName(), +          + " must have at most ", +          + callbackParameterLength, +          + " parameter(s).");, +    }, +, +    if (Arrays.equals(targetParameterTypes, callbackParameterTypes)) {, +      // Special case the common case of exact argument match., +      return ArgumentTransformer.IDENTITY;, +    }, +, +    boolean[] callbackIndexUsed = new boolean[callbackParameterLength];, +    final int[] indexMap = new int[targetParameterLength];, +    nextTarget: for (int targetIndex = 0; targetIndex < targetParameterLength; targetIndex++) {, +      Class<?> targetParameterType = targetParameterTypes[targetIndex];, +      for (int callbackIndex = 0; callbackIndex < callbackParameterLength; callbackIndex++) {, +        if (callbackIndexUsed[callbackIndex]) {, +          continue; // We have already used this callback argument., +        }, +        Class<?> callbackParameterType = callbackParameterTypes[callbackIndex];, +, +        if (/* exact match */, +            callbackParameterType.equals(targetParameterType), +            /* or subtype of view */, +            || (View.class.isAssignableFrom(callbackParameterType), +                && callbackParameterType.isAssignableFrom(targetParameterType)), +            /* or interface (like Checkable) */, +            || targetParameterType.isInterface()) {, +          indexMap[targetIndex] = callbackIndex;, +          callbackIndexUsed[callbackIndex] = true;, +          continue nextTarget; // This avoids the error handling code if loop exits normally., +        }, +      }, +, +      StringBuilder builder = new StringBuilder();, +      builder.append("Unable to match "), +          .append(method.getDeclaringClass().getName()), +          .append('.'), +          .append(method.getName()), +          .append(" method arguments.");, +      for (int i = 0; i < targetParameterLength; i++) {, +        builder.append("\n\n  Parameter #"), +            .append(i + 1), +            .append(": "), +            .append(targetParameterTypes[i].getName())]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      throw new RuntimeException("Unable to reset views for " + target, e);, +      throw new RuntimeException("Unable to inject views for " + target, e);]
[+++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestImplementation deps.support.test.rules, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestImplementation deps.support.test.rules, +++ /dev/null, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestImplementation deps.support.test.rules, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit, +  androidTestImplementation deps.truth, +  androidTestImplementation deps.support.test.runner, +  androidTestImplementation deps.support.test.rules, +++ /dev/null, +++ /dev/null, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java, +package com.example.butterknife.library;, +, +import android.support.test.rule.ActivityTestRule;, +import butterknife.ButterKnife;, +import butterknife.Unbinder;, +import com.example.butterknife.R;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +, +public final class SimpleActivityTest {, +  @Rule public final ActivityTestRule<SimpleActivity> activityRule =, +      new ActivityTestRule<>(SimpleActivity.class);, +, +  @Test public void verifyContentViewBinding() {, +    SimpleActivity activity = activityRule.getActivity();, +, +    Unbinder unbinder = ButterKnife.bind(activity);, +    verifySimpleActivityBound(activity);, +    unbinder.unbind();, +    verifySimpleActivityUnbound(activity);, +  }, +, +  protected static void verifySimpleActivityBound(SimpleActivity activity) {, +    assertThat(activity.title.getId()).isEqualTo(R.id.title);, +    assertThat(activity.subtitle.getId()).isEqualTo(R.id.subtitle);, +    assertThat(activity.hello.getId()).isEqualTo(R.id.hello);, +    assertThat(activity.listOfThings.getId()).isEqualTo(R.id.list_of_things);, +    assertThat(activity.footer.getId()).isEqualTo(R.id.footer);, +  }, +, +  protected static void verifySimpleActivityUnbound(SimpleActivity activity) {, +    assertThat(activity.title).isNull();, +    assertThat(activity.subtitle).isNull();, +    assertThat(activity.hello).isNull();, +    assertThat(activity.listOfThings).isNull();, +    assertThat(activity.footer).isNull();, +  }, +}, +++ b/build.gradle, +              'rules': 'com.android.support.test:rules:1.0.1',, +++ b/butterknife-integration-test/build.gradle, +, +    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner', +      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro', +      testProguardFile 'src/androidTest/proguard.pro', +  androidTestImplementation deps.junit]
[+++ b/gradle.properties, +VERSION_NAME=8.4.0-SNAPSHOT]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +    ARRAY("arrayFilteringNull"),, +    LIST("listFilteringNull");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +    ARRAY("arrayFilteringNull"),, +    LIST("listFilteringNull");, +++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +import static butterknife.internal.Utils.arrayFilteringNull;, +import static butterknife.internal.Utils.listFilteringNull;, +    assertThat(listFilteringNull(null, null, null)).isEmpty();, +    assertThat(listFilteringNull("One", null, null)).containsExactly("One");, +    assertThat(listFilteringNull(null, "One", null)).containsExactly("One");, +    assertThat(listFilteringNull(null, null, "One")).containsExactly("One");, +    assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");, +    assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");, +    assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");, +    assertThat(arrayFilteringNull(null, null, null)).isEmpty();, +    assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");, +    assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");, +    assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");, +    assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");, +    assertThat(arrayFilteringNull("One", null, "Two")).asList().containsExactly("One", "Two");, +    assertThat(arrayFilteringNull(null, "One", "Two")).asList().containsExactly("One", "Two");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +    ARRAY("arrayFilteringNull"),, +    LIST("listFilteringNull");, +++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +import static butterknife.internal.Utils.arrayFilteringNull;, +import static butterknife.internal.Utils.listFilteringNull;, +    assertThat(listFilteringNull(null, null, null)).isEmpty();, +    assertThat(listFilteringNull("One", null, null)).containsExactly("One");, +    assertThat(listFilteringNull(null, "One", null)).containsExactly("One");, +    assertThat(listFilteringNull(null, null, "One")).containsExactly("One");, +    assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");, +    assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");, +    assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");, +    assertThat(arrayFilteringNull(null, null, null)).isEmpty();, +    assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");, +    assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");, +    assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");, +    assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");, +    assertThat(arrayFilteringNull("One", null, "Two")).asList().containsExactly("One", "Two");, +    assertThat(arrayFilteringNull(null, "One", "Two")).asList().containsExactly("One", "Two");, +++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java, +  public static <T> T[] arrayFilteringNull(T... views) {, +  @SafeVarargs, +  public static <T> List<T> listFilteringNull(T... views) {, +    return new ImmutableList<>(arrayFilteringNull(views));, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +    ARRAY("arrayFilteringNull"),, +    LIST("listFilteringNull");, +++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java, +import static butterknife.internal.Utils.arrayFilteringNull;, +import static butterknife.internal.Utils.listFilteringNull;, +    assertThat(listFilteringNull(null, null, null)).isEmpty();, +    assertThat(listFilteringNull("One", null, null)).containsExactly("One");, +    assertThat(listFilteringNull(null, "One", null)).containsExactly("One");, +    assertThat(listFilteringNull(null, null, "One")).containsExactly("One");, +    assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");, +    assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");, +    assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");, +    assertThat(arrayFilteringNull(null, null, null)).isEmpty();, +    assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");, +    assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");, +    assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");, +    assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");, +    assertThat(arrayFilteringNull("One", null, "Two")).asList().containsExactly("One", "Two");, +    assertThat(arrayFilteringNull(null, "One", "Two")).asList().containsExactly("One", "Two");, +++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java, +  public static <T> T[] arrayFilteringNull(T... views) {, +  @SafeVarargs, +  public static <T> List<T> listFilteringNull(T... views) {, +    return new ImmutableList<>(arrayFilteringNull(views));, +  }, +, +++ b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java, +        + "    target.thing = Utils.arrayFilteringNull(\n", +        + "    target.thing = Utils.arrayFilteringNull(\n", +        + "    target.thing = Utils.arrayFilteringNull(\n", +        + "    target.thing = Utils.arrayFilteringNull(\n", +        + "    target.thing = Utils.arrayFilteringNull(\n", +        + "    target.thing = Utils.listFilteringNull(\n", +        + "    target.thing = Utils.listFilteringNull(\n", +        + "    target.thing = Utils.listFilteringNull(\n", +        + "    target.thing = Utils.listFilteringNull(\n", +        + "    target.thing = Utils.arrayFilteringNull(\n", +        + "    target.thing = Utils.arrayFilteringNull(\n"]
[+++ b/build.gradle, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +    gradlePluginPortal(), +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', +  apply plugin: 'net.ltgt.errorprone', +, +  dependencies {, +    errorprone 'com.google.errorprone:error_prone_core:2.3.1', +  }, +, +  // TODO figure out why this causes codegen to fail in android tests., +  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), +  //configurations.all { Configuration configuration ->, +  //  if (configuration.name.endsWith('nnotationProcessor')) {, +  //    configuration.dependencies.add(nullaway), +  //  }, +  //}, +  //, +  //tasks.withType(JavaCompile) {, +  //  options.compilerArgs += [, +  //      '-Xep:NullAway:ERROR',, +  //      '-XepOpt:NullAway:AnnotatedPackages=butterknife',, +  //  ], +  //}, +, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +    gradlePluginPortal(), +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', +  apply plugin: 'net.ltgt.errorprone', +, +  dependencies {, +    errorprone 'com.google.errorprone:error_prone_core:2.3.1', +  }, +, +  // TODO figure out why this causes codegen to fail in android tests., +  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), +  //configurations.all { Configuration configuration ->, +  //  if (configuration.name.endsWith('nnotationProcessor')) {, +  //    configuration.dependencies.add(nullaway), +  //  }, +  //}, +  //, +  //tasks.withType(JavaCompile) {, +  //  options.compilerArgs += [, +  //      '-Xep:NullAway:ERROR',, +  //      '-XepOpt:NullAway:AnnotatedPackages=butterknife',, +  //  ], +  //}, +, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +    gradlePluginPortal(), +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', +  apply plugin: 'net.ltgt.errorprone', +, +  dependencies {, +    errorprone 'com.google.errorprone:error_prone_core:2.3.1', +  }, +, +  // TODO figure out why this causes codegen to fail in android tests., +  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), +  //configurations.all { Configuration configuration ->, +  //  if (configuration.name.endsWith('nnotationProcessor')) {, +  //    configuration.dependencies.add(nullaway), +  //  }, +  //}, +  //, +  //tasks.withType(JavaCompile) {, +  //  options.compilerArgs += [, +  //      '-Xep:NullAway:ERROR',, +  //      '-XepOpt:NullAway:AnnotatedPackages=butterknife',, +  //  ], +  //}, +, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +    gradlePluginPortal(), +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', +  apply plugin: 'net.ltgt.errorprone', +, +  dependencies {, +    errorprone 'com.google.errorprone:error_prone_core:2.3.1', +  }, +, +  // TODO figure out why this causes codegen to fail in android tests., +  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), +  //configurations.all { Configuration configuration ->, +  //  if (configuration.name.endsWith('nnotationProcessor')) {, +  //    configuration.dependencies.add(nullaway), +  //  }, +  //}, +  //]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +package butterknife;, +, +import android.support.annotation.DimenRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified dimension resource ID whose type is explicitly defined as float., + * <p>, + * This is different than simply reading a normal dimension as a float value which, + * {@link BindDimen @BindDimen} supports. The resource must be defined as a float like, + * {@code <item name="whatever" type="float">1.1</item>}., + * <pre><code>, + * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFloat {, +  /** Float resource ID to which the field will be bound. */, +  @DimenRes int value();, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +package butterknife;, +, +import android.support.annotation.DimenRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified dimension resource ID whose type is explicitly defined as float., + * <p>, + * This is different than simply reading a normal dimension as a float value which, + * {@link BindDimen @BindDimen} supports. The resource must be defined as a float like, + * {@code <item name="whatever" type="float">1.1</item>}., + * <pre><code>, + * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFloat {, +  /** Float resource ID to which the field will be bound. */, +  @DimenRes int value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +        if (binding.requiresUtils()) {, +            constructor.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(), UTILS,, +                binding.getMethod(), binding.getId().code);, +          } else {, +            constructor.addStatement("target.$L = $T.$L(res, $L)", binding.getName(), UTILS,, +                binding.getMethod(), binding.getId().code);, +          }, +++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java, +package butterknife;, +, +import android.support.annotation.DimenRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified dimension resource ID whose type is explicitly defined as float., + * <p>, + * This is different than simply reading a normal dimension as a float value which, + * {@link BindDimen @BindDimen} supports. The resource must be defined as a float like, + * {@code <item name="whatever" type="float">1.1</item>}., + * <pre><code>, + * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFloat {, +  /** Float resource ID to which the field will be bound. */, +  @DimenRes int value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +        if (binding.requiresUtils()) {, +            constructor.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(), UTILS,, +                binding.getMethod(), binding.getId().code);, +          } else {, +            constructor.addStatement("target.$L = $T.$L(res, $L)", binding.getName(), UTILS,, +                binding.getMethod(), binding.getId().code);, +          }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.BindFloat;, +    annotations.add(BindFloat.class);, +    // Process each @BindFloat element., +    for (Element element : env.getElementsAnnotatedWith(BindFloat.class)) {, +      if (!SuperficialValidation.validateElement(element)) continue;, +      try {, +        parseResourceFloat(element, targetClassMap, erasedTargetNames);, +      } catch (Exception e) {]
[+++ b/.travis.yml, +    - tools, +    - platform-tools, +    - build-tools-23.0.3, +++ b/.travis.yml, +    - tools, +    - platform-tools, +    - build-tools-23.0.3, +++ b/build.gradle, +  buildToolsVersion = '23.0.3']
[+++ b/pom.xml, +    <compile-test.version>0.6</compile-test.version>]
[+++ b/README.md, +For the SNAPSHOT version:, +```xml, +<dependency>, +  <groupId>com.jakewharton</groupId>, +  <artifactId>butterknife</artifactId>, +  <version>7.0.2-SNAPSHOT</version>, +</dependency>, +<dependency>, +  <groupId>com.jakewharton</groupId>, +  <artifactId>butterknife-compiler</artifactId>, +  <version>7.0.2-SNAPSHOT</version>, +  <optional>true</optional>, +</dependency>, +```, +or Gradle:, +```groovy, +buildscript {, +  dependencies {, +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +  }, +}, +, +apply plugin: 'com.neenbedankt.android-apt', +, +dependencies {, +  compile 'com.jakewharton:butterknife:7.0.2-SNAPSHOT', +  apt 'com.jakewharton:butterknife-compiler:7.0.2-SNAPSHOT', +}, +```, +, +++ b/README.md, +For the SNAPSHOT version:, +```xml, +<dependency>, +  <groupId>com.jakewharton</groupId>, +  <artifactId>butterknife</artifactId>, +  <version>7.0.2-SNAPSHOT</version>, +</dependency>, +<dependency>, +  <groupId>com.jakewharton</groupId>, +  <artifactId>butterknife-compiler</artifactId>, +  <version>7.0.2-SNAPSHOT</version>, +  <optional>true</optional>, +</dependency>, +```, +or Gradle:, +```groovy, +buildscript {, +  dependencies {, +    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6', +  }, +}, +, +apply plugin: 'com.neenbedankt.android-apt', +, +dependencies {, +  compile 'com.jakewharton:butterknife:7.0.2-SNAPSHOT', +  apt 'com.jakewharton:butterknife-compiler:7.0.2-SNAPSHOT', +}, +```, +, +++ b/butterknife-compiler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.jakewharton</groupId>, +    <artifactId>butterknife-parent</artifactId>, +    <version>7.0.2-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>butterknife-compiler</artifactId>, +  <name>Butter Knife Compiler</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>]
[+++ b/.travis.yml, +    - build-tools-25.0.2, +    - android-25, +++ b/.travis.yml, +    - build-tools-25.0.2, +    - android-25, +++ b/build.gradle, +  targetSdkVersion = 25, +  compileSdkVersion = 25, +  buildToolsVersion = '25.0.2', +def supportLibraryVersion = '25.1.0', +    javapoet: 'com.squareup:javapoet:1.8.0',]
[+++ b/butterknife-sample/pom.xml, +    <version>1.1.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.1.0</version>, +++ b/butterknife/pom.xml, +    <version>1.1.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.1.0</version>, +++ b/butterknife/pom.xml, +    <version>1.1.0</version>, +++ b/pom.xml, +  <version>1.1.0</version>, +    <tag>butterknife-parent-1.1.0</tag>]
[+++ b/butterknife-sample/pom.xml, +    <version>1.2.2</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.2</version>, +++ b/butterknife/pom.xml, +    <version>1.2.2</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.2.2</version>, +++ b/butterknife/pom.xml, +    <version>1.2.2</version>, +++ b/pom.xml, +  <version>1.2.2</version>, +    <tag>butterknife-parent-1.2.2</tag>]
[+++ b/build.gradle, +    supportTestRunner: 'com.android.support.test:runner:0.5',, +    autocommon: 'com.google.auto:auto-common:0.6',, +, +, +    butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",, +    butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion", +++ b/build.gradle, +    supportTestRunner: 'com.android.support.test:runner:0.5',, +    autocommon: 'com.google.auto:auto-common:0.6',, +, +, +    butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",, +    butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion", +++ b/butterknife-compiler/build.gradle, +++ b/build.gradle, +    supportTestRunner: 'com.android.support.test:runner:0.5',, +    autocommon: 'com.google.auto:auto-common:0.6',, +, +, +    butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",, +    butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion", +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk)), +  private TypeSpec createType(int sdk) {, +    result.addMethod(createBindingConstructor(targetTypeName, sdk));, +  private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {, +      if (hasResourceBindingsNeedingResource(sdk)) {, +        constructor.addStatement("$L", binding.render(sdk));, +  private boolean hasResourceBindingsNeedingResource(int sdk) {, +      if (binding.requiresResources(sdk)) {, +++ b/build.gradle, +    supportTestRunner: 'com.android.support.test:runner:0.5',, +    autocommon: 'com.google.auto:auto-common:0.6',, +, +, +    butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",, +    butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion", +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk)), +  private TypeSpec createType(int sdk) {, +    result.addMethod(createBindingConstructor(targetTypeName, sdk));, +  private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {, +      if (hasResourceBindingsNeedingResource(sdk)) {, +        constructor.addStatement("$L", binding.render(sdk));, +  private boolean hasResourceBindingsNeedingResource(int sdk) {, +      if (binding.requiresResources(sdk)) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import java.util.Collections;, +  // TODO remove when http://b.android.com/187527 is released., +  private static final String OPTION_SDK_INT = "butterknife.minSdk";, +  private int sdk = 1;, +    String sdk = env.getOptions().get(OPTION_SDK_INT);, +    if (sdk != null) {, +      try {, +        this.sdk = Integer.parseInt(sdk);, +      } catch (NumberFormatException e) {, +        env.getMessager(), +            .printMessage(Kind.WARNING, "Unable to parse supplied minSdk option '", +                + sdk, +                + "'. Falling back to API 1 support.");, +      }, +    }, +, +  @Override public Set<String> getSupportedOptions() {, +    return Collections.singleton(OPTION_SDK_INT);, +  }, +, +      JavaFile javaFile = binding.brewJava(sdk);, +++ b/build.gradle, +    supportTestRunner: 'com.android.support.test:runner:0.5',, +    autocommon: 'com.google.auto:auto-common:0.6',, +, +, +    butterknife: "com.jakewharton:butterknife:$butterknifeLatestReleaseVersion",, +    butterknifeCompiler: "com.jakewharton:butterknife-compiler:$butterknifeLatestReleaseVersion", +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk)), +  private TypeSpec createType(int sdk) {, +    result.addMethod(createBindingConstructor(targetTypeName, sdk));, +  private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {, +      if (hasResourceBindingsNeedingResource(sdk)) {, +        constructor.addStatement("$L", binding.render(sdk));, +  private boolean hasResourceBindingsNeedingResource(int sdk) {, +      if (binding.requiresResources(sdk)) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import java.util.Collections;, +  // TODO remove when http://b.android.com/187527 is released., +  private static final String OPTION_SDK_INT = "butterknife.minSdk";, +  private int sdk = 1;, +    String sdk = env.getOptions().get(OPTION_SDK_INT);, +    if (sdk != null) {, +      try {, +        this.sdk = Integer.parseInt(sdk);]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code list} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(List<T> list, Action<? super T>... actions) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(list.get(i), i);, +      }, +    }, +  }, +, +  /** Apply {@code actions} to {@code view}. */, +  @SafeVarargs, +  public static <T extends View> void apply(T view, Action<? super T>... actions) {, +    for (Action<? super T> action : actions) {, +      action.apply(view, 0);, +    }, +  }, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code list} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(List<T> list, Action<? super T>... actions) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(list.get(i), i);, +      }, +    }, +  }, +, +  /** Apply {@code actions} to {@code view}. */, +  @SafeVarargs, +  public static <T extends View> void apply(T view, Action<? super T>... actions) {, +    for (Action<? super T> action : actions) {, +      action.apply(view, 0);, +    }, +  }, +, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +import java.util.Arrays;, +import java.util.List;, +, +import butterknife.shadow.EditModeShadowView;, +, +  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA = new ButterKnife.Action<View>() {, +    @Override public void apply(View view, int index) {, +      view.setAlpha(0f);, +    }, +  };, +  @Test public void actionsAppliedToView() {, +    View view = new View(Robolectric.application);, +    assertThat(view).isEnabled();, +    assertThat(view).hasAlpha(1f);, +, +    ButterKnife.apply(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);, +, +    assertThat(view).isDisabled();, +    assertThat(view).hasAlpha(0f);, +  }, +, +  @Test public void actionsAppliedToEveryView() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1).isEnabled();, +    assertThat(view2).isEnabled();, +    assertThat(view3).isEnabled();, +    assertThat(view1).hasAlpha(1f);, +    assertThat(view2).hasAlpha(1f);, +    assertThat(view3).hasAlpha(1f);, +, +    List<View> views = Arrays.asList(view1, view2, view3);, +    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);, +, +    assertThat(view1).isDisabled();, +    assertThat(view2).isDisabled();, +    assertThat(view3).isDisabled();, +    assertThat(view1).hasAlpha(0f);, +    assertThat(view2).hasAlpha(0f);, +    assertThat(view3).hasAlpha(0f);, +  }, +]
[+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, +  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, +    @Override public void apply(View view, int index) {, +      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);, +      alphaAnimation.setFillBefore(true);, +      alphaAnimation.setDuration(500);, +      alphaAnimation.setStartOffset(index * 100);, +      view.startAnimation(alphaAnimation);, +    }, +  };, +, +  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello }), +  List<View> headerViews;, +, +    ButterKnife.apply(headerViews, ALPHA_FADE);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, +  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, +    @Override public void apply(View view, int index) {, +      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);, +      alphaAnimation.setFillBefore(true);, +      alphaAnimation.setDuration(500);, +      alphaAnimation.setStartOffset(index * 100);, +      view.startAnimation(alphaAnimation);, +    }, +  };, +, +  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello }), +  List<View> headerViews;, +, +    ButterKnife.apply(headerViews, ALPHA_FADE);, +++ b/butterknife/pom.xml, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, +  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, +    @Override public void apply(View view, int index) {, +      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);, +      alphaAnimation.setFillBefore(true);, +      alphaAnimation.setDuration(500);, +      alphaAnimation.setStartOffset(index * 100);, +      view.startAnimation(alphaAnimation);, +    }, +  };, +, +  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello }), +  List<View> headerViews;, +, +    ButterKnife.apply(headerViews, ALPHA_FADE);, +++ b/butterknife/pom.xml, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.util.Property;, +import java.util.List;, + * Group multiple views together into a {@link List} or array., + * <pre><code>, + * {@literal @}InjectViews({R.id.first_name, R.id.middle_name, R.id.last_name}), + * List<EditText> nameViews;, + * </code></pre>, + * There are two convenience methods for working with view collections:, + * <ul>, + * <li>{@link #apply(List, Action)} &ndash; Applies an action to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a value to each view using a, + * property.</li>, + * </ul>, + * <p>, + * @see InjectViews, +    throw new AssertionError("No instances.");, +   * A means of finding a view in either an {@link Activity} or a {@link View}. Exposed for use, +   * only by generated code., +      @Override public View findOptionalView(Object source, int id) {, +      @Override public View findOptionalView(Object source, int id) {, +    public static <T extends View> T[] arrayOf(T... views) {, +      return views;, +    }, +]
[+++ b/butterknife-sample/pom.xml, +    <version>1.3.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.0</version>, +++ b/butterknife/pom.xml, +    <version>1.3.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.0</version>, +++ b/butterknife/pom.xml, +    <version>1.3.0</version>, +++ b/pom.xml, +  <version>1.3.0</version>, +    <tag>butterknife-parent-1.3.0</tag>]
[+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(METHOD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(METHOD), +@Retention(RUNTIME), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import static java.util.Collections.singletonList;, +, +      for (Method method : targetClass.getDeclaredMethods()) {, +        Unbinder unbinder = parseOnClick(target, method, source);, +        if (unbinder == null) unbinder = parseOnLongClick(target, method, source);, +, +        if (unbinder != null) {, +          unbinders.add(unbinder);, +        }, +      }, +  private static @Nullable Unbinder parseOnClick(final Object target, final Method method,, +      View source) {, +    OnClick onClick = method.getAnnotation(OnClick.class);, +    if (onClick == null) {, +      return null;, +    }, +    // TODO check is instance method, +    // TODO check visibility, +    boolean isRequired = true; // TODO actually figure out, +    final Class<?>[] parameterTypes = method.getParameterTypes();, +    // TODO validate parameter count (and types?), +, +    List<View> views = findViews(source, onClick.value(), isRequired, method.getName());, +, +    ViewCollections.set(views, ON_CLICK, new View.OnClickListener() {, +      @Override public void onClick(View v) {, +        if (parameterTypes.length == 0) {, +          uncheckedInvoke(method, target);, +        } else {, +          uncheckedInvoke(method, target, v);, +        }, +      }, +    });, +, +    return new ListenerUnbinder<>(views, ON_CLICK);, +  }, +, +  private static @Nullable Unbinder parseOnLongClick(final Object target, final Method method,, +      View source) {, +    OnLongClick onLongClick = method.getAnnotation(OnLongClick.class);, +    if (onLongClick == null) {, +      return null;, +    }, +    // TODO check is instance method, +    // TODO check visibility, +    boolean isRequired = true; // TODO actually figure out, +    final Class<?>[] parameterTypes = method.getParameterTypes();, +    // TODO validate parameter count (and types?), +    final Class<?> returnType = method.getReturnType();, +    // TODO validate return type, +, +    List<View> views = findViews(source, onLongClick.value(), isRequired, method.getName());, +, +    ViewCollections.set(views, ON_LONG_CLICK, new View.OnLongClickListener() {, +      @Override public boolean onLongClick(View v) {, +        Object returnValue;, +        if (parameterTypes.length == 0) {, +          returnValue = uncheckedInvoke(method, target);, +        } else {, +          returnValue = uncheckedInvoke(method, target, v);, +        }, +        if (returnType != void.class) {, +          return (boolean) returnValue;, +        }, +        return false;, +      }, +    });, +, +    return new ListenerUnbinder<>(views, ON_LONG_CLICK);, +  }, +, +  private static List<View> findViews(View source, int[] ids, boolean isRequired, String name) {, +    if (ids.length == 1 && ids[0] == View.NO_ID) {, +      return singletonList(source);, +    }, +, +    String who = "method '" + name + "'";, +    List<View> views = new ArrayList<>(ids.length);, +    for (int id : ids) {]
[+++ b/butterknife/build.gradle, +  androidTestAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife/build.gradle, +  androidTestAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java, +package butterknife.functional;, +, +import android.content.Context;, +import android.support.test.InstrumentationRegistry;, +import butterknife.BindArray;, +import butterknife.Unbinder;, +import butterknife.test.R;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +, +public final class BindArrayTest {, +  private final Context context = InstrumentationRegistry.getContext();, +, +  static class StringArrayTarget {, +    @BindArray(R.array.string_one_two_three) String[] actual;, +  }, +, +  @Test public void asStringArray() {, +    StringArrayTarget target = new StringArrayTarget();, +    String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);, +, +    Unbinder unbinder = new BindArrayTest$StringArrayTarget_ViewBinding(target, context);, +    assertThat(target.actual).isEqualTo(expected);, +, +    unbinder.unbind();, +    assertThat(target.actual).isEqualTo(expected);, +  }, +, +  static class IntArrayTarget {, +    @BindArray(R.array.int_one_two_three) int[] actual;, +  }, +, +  @Test public void asIntArray() {, +    IntArrayTarget target = new IntArrayTarget();, +    int[] expected = context.getResources().getIntArray(R.array.int_one_two_three);, +, +    Unbinder unbinder = new BindArrayTest$IntArrayTarget_ViewBinding(target, context);, +    assertThat(target.actual).isEqualTo(expected);, +, +    unbinder.unbind();, +    assertThat(target.actual).isEqualTo(expected);, +  }, +, +  static class CharSequenceArrayTarget {, +    @BindArray(R.array.int_one_two_three) CharSequence[] actual;, +  }, +, +  @Test public void asCharSequenceArray() {, +    CharSequenceArrayTarget target = new CharSequenceArrayTarget();, +    CharSequence[] expected = context.getResources().getTextArray(R.array.int_one_two_three);, +, +    Unbinder unbinder = new BindArrayTest$CharSequenceArrayTarget_ViewBinding(target, context);, +    assertThat(target.actual).isEqualTo(expected);, +, +    unbinder.unbind();, +    assertThat(target.actual).isEqualTo(expected);, +  }, +}, +++ b/butterknife/build.gradle, +  androidTestAnnotationProcessor project(':butterknife-compiler'), +++ b/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java, +package butterknife.functional;, +, +import android.content.Context;, +import android.support.test.InstrumentationRegistry;, +import butterknife.BindArray;, +import butterknife.Unbinder;, +import butterknife.test.R;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +, +public final class BindArrayTest {, +  private final Context context = InstrumentationRegistry.getContext();, +, +  static class StringArrayTarget {, +    @BindArray(R.array.string_one_two_three) String[] actual;, +  }, +, +  @Test public void asStringArray() {, +    StringArrayTarget target = new StringArrayTarget();, +    String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);, +, +    Unbinder unbinder = new BindArrayTest$StringArrayTarget_ViewBinding(target, context);, +    assertThat(target.actual).isEqualTo(expected);, +, +    unbinder.unbind();, +    assertThat(target.actual).isEqualTo(expected);, +  }, +, +  static class IntArrayTarget {, +    @BindArray(R.array.int_one_two_three) int[] actual;, +  }, +]
[+++ b/butterknife/src/it/generic-superclass/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>generic-superclass</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>4.10</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <version>2.1</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <version>1.0.4</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/butterknife/src/it/generic-superclass/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>generic-superclass</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>4.10</version>]
[+++ b/README.md, +View "injection" library for Android which uses annotation processing to generate boilerplate code, +for you., +, + * Eliminate `findViewById` calls by using `@InjectView` on fields., + * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,, +   setters, or properties., + * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others., +++ b/README.md, +View "injection" library for Android which uses annotation processing to generate boilerplate code, +for you., +, + * Eliminate `findViewById` calls by using `@InjectView` on fields., + * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,, +   setters, or properties., + * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others., +++ b/butterknife/pom.xml, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>butterknife.internal:butterknife.internal.*</excludePackageNames>, +        </configuration>, +      </plugin>, +++ b/README.md, +View "injection" library for Android which uses annotation processing to generate boilerplate code, +for you., +, + * Eliminate `findViewById` calls by using `@InjectView` on fields., + * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,, +   setters, or properties., + * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others., +++ b/butterknife/pom.xml, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>butterknife.internal:butterknife.internal.*</excludePackageNames>, +        </configuration>, +      </plugin>, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * View "injection" utilities. Use this class to simplify finding views and attaching listeners by, +  /** DO NOT USE: Exposed for generated code. */, +++ b/README.md, +View "injection" library for Android which uses annotation processing to generate boilerplate code, +for you., +, + * Eliminate `findViewById` calls by using `@InjectView` on fields., + * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,, +   setters, or properties., + * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others., +++ b/butterknife/pom.xml, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>butterknife.internal:butterknife.internal.*</excludePackageNames>, +        </configuration>, +      </plugin>, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * View "injection" utilities. Use this class to simplify finding views and attaching listeners by, +  /** DO NOT USE: Exposed for generated code. */, +++ b/butterknife/src/main/java/butterknife/package-info.java, +/**, + * View "injection" library for Android which uses annotation processing to generate boilerplate, + * code for you., + * <p>, + * <ul>, + * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using, + * {@link butterknife.InjectView @InjectView} on fields.</li>, + * <li>Group multiple views in a {@linkplain java.util.List list} using, + * {@link butterknife.InjectViews @InjectViews}. Operate on all of them at once with, + * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action) actions},, + * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Setter, Object) setters},, + * or {@linkplain butterknife.ButterKnife#apply(java.util.List, android.util.Property, Object) properties}.</li>, + * <li>Eliminate anonymous inner-classes for listeners by annotating methods with, + * {@link butterknife.OnClick @OnClick} and others.</li>, + * </ul>, + */, +package butterknife;, +++ b/README.md, +View "injection" library for Android which uses annotation processing to generate boilerplate code, +for you., +, + * Eliminate `findViewById` calls by using `@InjectView` on fields., + * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,, +   setters, or properties., + * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others., +++ b/butterknife/pom.xml, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>butterknife.internal:butterknife.internal.*</excludePackageNames>, +        </configuration>, +      </plugin>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.google.common.collect.ImmutableSet;, +  private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";, +, +  private boolean debuggable = true;, +    debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));, +, +    return ImmutableSet.of(OPTION_SDK_INT, OPTION_DEBUGGABLE);, +      JavaFile javaFile = binding.brewJava(sdk, debuggable);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.google.common.collect.ImmutableSet;, +  private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";, +, +  private boolean debuggable = true;, +    debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));, +]
[+++ b/.travis.yml, +  - oraclejdk7, +++ b/.travis.yml, +  - oraclejdk7, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ b/.travis.yml, +  - oraclejdk7, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:1.3.1', +++ b/.travis.yml, +  - oraclejdk7, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:1.3.1', +++ /dev/null, +++ b/.travis.yml, +  - oraclejdk7, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:1.3.1', +++ /dev/null, +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}BindView(R.id.title) TextView title;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindView {, +  /** View ID to which the field will be bound. */, +  @IdRes int[] value();, +}, +++ b/.travis.yml, +  - oraclejdk7, +++ b/README.md, + * Eliminate `findViewById` calls by using `@BindView` on fields., +  @BindView(R.id.user) EditText username;, +  @BindView(R.id.pass) EditText password;, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:1.3.1', +++ /dev/null, +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}BindView(R.id.title) TextView title;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindView {, +  /** View ID to which the field will be bound. */, +  @IdRes int[] value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.BindView;, +    types.add(BindView.class.getCanonicalName());, +    // Process each @BindView element., +    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {, +        logParsingError(element, BindView.class, e);, +    if (isInaccessibleViaGeneratedCode(BindView.class, "fields", element), +        || isBindingInWrongPackage(BindView.class, element)) {, +      error(element, "@%s must be a List or array. (%s.%s)", BindView.class.getSimpleName(),, +          BindView.class.getSimpleName(), enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +    int[] ids = element.getAnnotation(BindView.class).value();, +          BindView.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +, +    ViewInjector injector = targetClassMap.get(enclosingElement);, +    if (injector != null && injector.viewIdMapContains(id)) {, +      error(element, "Attempt to use @InjectView for an already injected ID (%d). (%s.%s)", id,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +      return;, +    }, +, +    String name = element.getSimpleName().toString();, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +      error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +    }, +, +  /** Returns the first duplicate element inside an array, null if there are no duplicates. */, +  private static Integer findDuplicate(int[] array) {, +    Set<Integer> seenElements = new LinkedHashSet<Integer>();, +, +    for (int element : array) {, +      if (!seenElements.add(element)) {, +        return element;, +      }, +    }, +, +    return null;, +  }, +, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),, +++ b/.travis.yml, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +, +    ViewInjector injector = targetClassMap.get(enclosingElement);, +    if (injector != null && injector.viewIdMapContains(id)) {, +      error(element, "Attempt to use @InjectView for an already injected ID (%d). (%s.%s)", id,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +      return;, +    }, +, +    String name = element.getSimpleName().toString();, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +      error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +    }, +, +  /** Returns the first duplicate element inside an array, null if there are no duplicates. */, +  private static Integer findDuplicate(int[] array) {, +    Set<Integer> seenElements = new LinkedHashSet<Integer>();, +, +    for (int element : array) {, +      if (!seenElements.add(element)) {, +        return element;, +      }, +    }, +, +    return null;, +  }, +, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java, +  boolean viewIdMapContains(int id) {, +    return viewIdMap.containsKey(id);, +  }, +, +++ b/.travis.yml, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +, +    ViewInjector injector = targetClassMap.get(enclosingElement);, +    if (injector != null && injector.viewIdMapContains(id)) {, +      error(element, "Attempt to use @InjectView for an already injected ID (%d). (%s.%s)", id,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +      return;, +    }, +, +    String name = element.getSimpleName().toString();, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +      error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +    }, +, +  /** Returns the first duplicate element inside an array, null if there are no duplicates. */, +  private static Integer findDuplicate(int[] array) {, +    Set<Integer> seenElements = new LinkedHashSet<Integer>();, +, +    for (int element : array) {, +      if (!seenElements.add(element)) {, +        return element;, +      }, +    }, +, +    return null;]
[+++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +, +++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    int id = element.getAnnotation(InjectView.class).value();, +    Set<Integer> seenIds = new LinkedHashSet<Integer>();, +    for (int id : ids) {, +      if (!seenIds.add(id)) {, +            annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),, +    }, +    viewInjector.addListeners(ids, listener, method, binding);, +++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    int id = element.getAnnotation(InjectView.class).value();, +    Set<Integer> seenIds = new LinkedHashSet<Integer>();, +    for (int id : ids) {, +      if (!seenIds.add(id)) {, +            annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),, +    }, +    viewInjector.addListeners(ids, listener, method, binding);, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjection.java, +  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>>, +      listenerBindings = new LinkedHashMap<ListenerClass,, +      Map<ListenerMethod, Set<ListenerBinding>>>();, +  public Map<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> getListenerBindings() {, +    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);, +    Set<ListenerBinding> set = null;, +      methods = new LinkedHashMap<ListenerMethod, Set<ListenerBinding>>();, +    } else {, +      set = methods.get(method);, +    if (set == null) {, +      set = new LinkedHashSet<ListenerBinding>();, +      methods.put(method, set);, +    set.add(binding);, +    for (Map<ListenerMethod, Set<ListenerBinding>> methodBinding : listenerBindings.values()) {, +      for (Set<ListenerBinding> set : methodBinding.values()) {, +        for (ListenerBinding binding : set) {, +    }, +++ b/.travis.yml, +jdk:, + - oraclejdk7, + - oraclejdk8, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    int id = element.getAnnotation(InjectView.class).value();, +    Set<Integer> seenIds = new LinkedHashSet<Integer>();, +    for (int id : ids) {, +      if (!seenIds.add(id)) {, +            annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),, +    }, +    viewInjector.addListeners(ids, listener, method, binding);, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjection.java, +  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>>, +      listenerBindings = new LinkedHashMap<ListenerClass,, +      Map<ListenerMethod, Set<ListenerBinding>>>();, +  public Map<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> getListenerBindings() {, +    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);, +    Set<ListenerBinding> set = null;, +      methods = new LinkedHashMap<ListenerMethod, Set<ListenerBinding>>();, +    } else {, +      set = methods.get(method);, +    if (set == null) {, +      set = new LinkedHashSet<ListenerBinding>();, +      methods.put(method, set);, +    set.add(binding);, +    for (Map<ListenerMethod, Set<ListenerBinding>> methodBinding : listenerBindings.values()) {, +      for (Set<ListenerBinding> set : methodBinding.values()) {, +        for (ListenerBinding binding : set) {, +    }, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java, +import java.util.Iterator;, +import java.util.Set;, +  void addListeners(int[] ids, ListenerClass listener, ListenerMethod method,, +    for (int id : ids) {, +    }, +    Map<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> bindings =, +    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> e, +        : bindings.entrySet()) {, +      Map<ListenerMethod, Set<ListenerBinding>> methodBindings = e.getValue();, +          Set<ListenerBinding> set = methodBindings.get(method);, +          Iterator<ListenerBinding> iterator = set.iterator();, +, +          while (iterator.hasNext()) {, +            ListenerBinding binding = iterator.next();, +            if (iterator.hasNext()) {, +              builder.append("\n").append("          ");, +            }, +          }, +++ b/.travis.yml]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    result.addMethod(createBindMethod(targetType));, +      result.addMethod(createBindToTargetMethod());, +  private MethodSpec createBindMethod(TypeName targetType) {, +  private MethodSpec createBindToTargetMethod() {, +    if (hasViewBindings()) {, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, +      } else {, +        builder.add("finder.findOptionalView(source, $L)", ids[i]);, +      }, +      result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, +      if (requiresCast(fieldBinding.getType())) {, +  private static boolean requiresCast(TypeName type) {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    result.addMethod(createBindMethod(targetType));, +      result.addMethod(createBindToTargetMethod());, +  private MethodSpec createBindMethod(TypeName targetType) {, +  private MethodSpec createBindToTargetMethod() {, +    if (hasViewBindings()) {, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, +      } else {, +        builder.add("finder.findOptionalView(source, $L)", ids[i]);, +      }, +      result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, +      if (requiresCast(fieldBinding.getType())) {, +  private static boolean requiresCast(TypeName type) {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    result.addMethod(createBindMethod(targetType));, +      result.addMethod(createBindToTargetMethod());, +  private MethodSpec createBindMethod(TypeName targetType) {, +  private MethodSpec createBindToTargetMethod() {, +    if (hasViewBindings()) {, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, +      } else {, +        builder.add("finder.findOptionalView(source, $L)", ids[i]);, +      }, +      result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, +      if (requiresCast(fieldBinding.getType())) {, +  private static boolean requiresCast(TypeName type) {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "      view = finder.findOptionalView(source, 1);\n", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    result.addMethod(createBindMethod(targetType));, +      result.addMethod(createBindToTargetMethod());, +  private MethodSpec createBindMethod(TypeName targetType) {, +  private MethodSpec createBindToTargetMethod() {, +    if (hasViewBindings()) {, +      builder.add("\n");, +      if (requiresCast(binding.getType())) {, +        builder.add("($T) ", binding.getType());, +      }, +      if (binding.isRequired()) {, +        builder.add("finder.findRequiredView(source, $L, $S)", ids[i],, +      } else {, +        builder.add("finder.findOptionalView(source, $L)", ids[i]);, +      }, +      result.addStatement("view = finder.findOptionalView(source, $L)", bindings.getId());, +      if (requiresCast(fieldBinding.getType())) {, +  private static boolean requiresCast(TypeName type) {, +    return !VIEW_TYPE.equals(type.toString());, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "      view = finder.findOptionalView(source, 1);\n", +++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java, +        + "          finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 2, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 3, \"field 'thing'\"));\n", +        + "          finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 2, \"field 'thing'\"), \n", +        + "          finder.findRequiredView(source, 3, \"field 'thing'\"));\n", +        + "          (TextView) finder.findRequiredView(source, 1, \"field 'thing'\"), \n", +        + "          (TextView) finder.findRequiredView(source, 2, \"field 'thing'\"), \n"]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PROTECTED;, +  private static final ClassName UNBINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewUnbinder");, +  private String parentUnbinder;, +  void setParentUnbinder(String parentUnbinder) {, +    this.parentUnbinder = parentUnbinder;, +  }, +, +  String getParentUnbinder() {, +    return parentUnbinder;, +  }, +, +    if (hasUnbinder()) {, +      // Create unbinding class., +      result.addType(createUnbinderClass());, +      // Now we need to provide child classes to access and override unbinder implementations., +      createUnbinderInternalAccessMethods(result);, +    }, +, +    TypeName generic = TypeVariableName.get("T");, +        .addModifiers(PUBLIC, STATIC), +        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));, +    if (parentUnbinder != null) {, +      result.superclass(ParameterizedTypeName.get(, +          ClassName.bestGuess(parentViewBinder + '.' + UnbinderBinding.UNBINDER_SIMPLE_NAME),, +          generic));, +    } else {, +      result.addSuperinterface(ParameterizedTypeName.get(UNBINDER, generic));, +      result.addField(generic, "target", PRIVATE);, +    }, +, +    result.addMethod(createUnbinderConstructor(generic));, +    if (parentUnbinder == null) {, +      result.addMethod(createUnbindInterfaceMethod());, +    }, +    result.addMethod(createUnbindMethod(result, generic));, +, +    return result.build();, +  }, +, +  private MethodSpec createUnbinderConstructor(TypeName targetType) {, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +    if (parentUnbinder != null) {, +      constructor.addStatement("super(target)");, +    } else {, +      constructor.addStatement("this.$1N = $1N", "target");, +    }, +    return constructor.build();, +  }, +, +  private MethodSpec createUnbindInterfaceMethod() {, +    return MethodSpec.methodBuilder("unbind"), +        .addModifiers(PUBLIC, FINAL), +        .addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +            "Bindings already cleared."), +        .addStatement("unbind(target)"), +        .addStatement("target = null"), +        .build();, +  }, +  private MethodSpec createUnbindMethod(TypeSpec.Builder unbinderClass, TypeName targetType) {, +    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind"), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +, +    if (parentUnbinder != null) {, +      result.addAnnotation(Override.class);, +      result.addStatement("super.unbind(target)");, +    }, +      addFieldAndUnbindStatement(unbinderClass, result, bindings);, +        result.addStatement("target.$L = null", fieldBinding.getName());, +      result.addStatement("target.$L = null", fieldCollectionBinding.getName());, +    if (unbinderBinding.getUnbinderFieldName() != null) {, +      result.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());, +    }, +  private void createUnbinderInternalAccessMethods(TypeSpec.Builder viewBindingClass) {, +    // Create type variable <U extends Unbinder<T>>., +    ClassName unbinderClassName;, +    if (parentUnbinder != null) {, +      unbinderClassName = ClassName.bestGuess(parentUnbinder);, +    } else {, +      unbinderClassName = unbinderBinding.getUnbinderClassName();, +    }, +    TypeVariableName returnType = TypeVariableName.get("U", ParameterizedTypeName.get(, +        unbinderClassName, TypeVariableName.get("T")));, +, +    // We are casting inside the access methods., +    AnnotationSpec suppressWarnign = AnnotationSpec.builder(SuppressWarnings.class), +        .addMember("value", "\"unchecked\""), +        .build();, +, +    MethodSpec.Builder createUnbinder = MethodSpec.methodBuilder("createUnbinder"), +        .addAnnotation(suppressWarnign), +        .addModifiers(PROTECTED), +        .addTypeVariable(returnType), +        .returns(returnType), +        .addParameter(TypeVariableName.get("T"), "target"), +        .addStatement("return ($T) new $T($L)", returnType, unbinderBinding.getUnbinderClassName(),]
[+++ b/build.gradle, +      'androidPlugin': '2.3.3',, +      javapoet: 'com.squareup:javapoet:1.9.0',, +      javaparser: 'com.github.javaparser:javaparser-core:3.2.8',, +      truth: 'com.google.truth:truth:0.34',, +      robolectric: 'org.robolectric:robolectric:3.4-rc2',, +          'common': 'com.google.auto:auto-common:0.8',, +++ b/build.gradle, +      'androidPlugin': '2.3.3',, +      javapoet: 'com.squareup:javapoet:1.9.0',, +      javaparser: 'com.github.javaparser:javaparser-core:3.2.8',, +      truth: 'com.google.truth:truth:0.34',, +      robolectric: 'org.robolectric:robolectric:3.4-rc2',, +          'common': 'com.google.auto:auto-common:0.8',, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +import com.github.javaparser.ast.NodeList;, +import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;, +import com.github.javaparser.ast.expr.Expression;, +import java.util.Optional;, +    for (Node node : resourceClass.getChildNodes()) {, +      if (node instanceof ClassOrInterfaceDeclaration) {, +        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);, +      ClassOrInterfaceDeclaration node) {, +    if (!supportedTypes.contains(node.getNameAsString())) {, +    String type = node.getNameAsString();, +    String fieldName = variable.getNameAsString();, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/build.gradle, +      'androidPlugin': '2.3.3',, +      javapoet: 'com.squareup:javapoet:1.9.0',, +      javaparser: 'com.github.javaparser:javaparser-core:3.2.8',, +      truth: 'com.google.truth:truth:0.34',, +      robolectric: 'org.robolectric:robolectric:3.4-rc2',, +          'common': 'com.google.auto:auto-common:0.8',, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +import com.github.javaparser.ast.NodeList;, +import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;, +import com.github.javaparser.ast.expr.Expression;, +import java.util.Optional;, +    for (Node node : resourceClass.getChildNodes()) {, +      if (node instanceof ClassOrInterfaceDeclaration) {, +        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);, +      ClassOrInterfaceDeclaration node) {, +    if (!supportedTypes.contains(node.getNameAsString())) {, +    String type = node.getNameAsString();, +    String fieldName = variable.getNameAsString();, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-integration-test/build.gradle, +++ b/build.gradle, +      'androidPlugin': '2.3.3',, +      javapoet: 'com.squareup:javapoet:1.9.0',, +      javaparser: 'com.github.javaparser:javaparser-core:3.2.8',, +      truth: 'com.google.truth:truth:0.34',, +      robolectric: 'org.robolectric:robolectric:3.4-rc2',, +          'common': 'com.google.auto:auto-common:0.8',, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +import com.github.javaparser.ast.NodeList;, +import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;, +import com.github.javaparser.ast.expr.Expression;, +import java.util.Optional;, +    for (Node node : resourceClass.getChildNodes()) {, +      if (node instanceof ClassOrInterfaceDeclaration) {, +        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);, +      ClassOrInterfaceDeclaration node) {, +    if (!supportedTypes.contains(node.getNameAsString())) {, +    String type = node.getNameAsString();, +    String fieldName = variable.getNameAsString();, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-integration-test/build.gradle, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +      'androidPlugin': '2.3.3',, +      javapoet: 'com.squareup:javapoet:1.9.0',, +      javaparser: 'com.github.javaparser:javaparser-core:3.2.8',, +      truth: 'com.google.truth:truth:0.34',, +      robolectric: 'org.robolectric:robolectric:3.4-rc2',, +          'common': 'com.google.auto:auto-common:0.8',, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +import com.github.javaparser.ast.NodeList;, +import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;, +import com.github.javaparser.ast.expr.Expression;, +import java.util.Optional;, +    for (Node node : resourceClass.getChildNodes()) {, +      if (node instanceof ClassOrInterfaceDeclaration) {, +        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);, +      ClassOrInterfaceDeclaration node) {, +    if (!supportedTypes.contains(node.getNameAsString())) {, +    String type = node.getNameAsString();, +    String fieldName = variable.getNameAsString();, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-integration-test/build.gradle, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Jun 23 16:29:33 PDT 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip, +++ b/build.gradle, +      'androidPlugin': '2.3.3',, +      javapoet: 'com.squareup:javapoet:1.9.0',, +      javaparser: 'com.github.javaparser:javaparser-core:3.2.8',, +      truth: 'com.google.truth:truth:0.34',]
[+++ b/pom.xml, +    <robolectric.version>2.1</robolectric.version>]
[+++ b/CHANGELOG.md, +Version 8.6.0 *(2017-05-16)*, +----------------------------, +, + * Plugin was ported to Kotlin and updated to support future Android Gradle plugin versions., + * Fix: Properly handle multiple library modules using Butter Knife and defining the same ID., + * Fix: Use the same classloader of the binding target to load the generated view binding class., +, +, +++ b/CHANGELOG.md, +Version 8.6.0 *(2017-05-16)*, +----------------------------, +, + * Plugin was ported to Kotlin and updated to support future Android Gradle plugin versions., + * Fix: Properly handle multiple library modules using Butter Knife and defining the same ID., + * Fix: Use the same classloader of the binding target to load the generated view binding class., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.6.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.6.0', +++ b/CHANGELOG.md, +Version 8.6.0 *(2017-05-16)*, +----------------------------, +, + * Plugin was ported to Kotlin and updated to support future Android Gradle plugin versions., + * Fix: Properly handle multiple library modules using Butter Knife and defining the same ID., + * Fix: Use the same classloader of the binding target to load the generated view binding class., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.6.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.6.0', +++ b/gradle.properties, +VERSION_NAME=8.6.0]
[+++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "ESbreW4FNMPQhV1zbFb9iBvhFWFbVHecaig3Si3+4nrJCMn9x4nqB18ZcU+Aviw67WQNcuSH4I0Hl08uknl+kzE/xKEfPLmu28bptXRCSued49aL11i2aQmRj5nqP2yxkinhtRGOQxzIo56NmFt7sIcEXODM3D5a6q7s9tlvPfw=", +    - secure: "JWEeqx0CWBqAkjcREHUg3Ei8wxqp59HZag8EidSLwmekgPJQwipwuEeXMZyPCGJCP+4ijUirtS/hRApi37BW0LYdt+XR7dI1TSZ0HFLTLqSPfWfsUcjmGpmoqVUv8FLVhC+KA42YeEhqkEaCUW92gJeAyK8swxDqGHAPT/sfKRA="]
[+++ b/README.md, +++ b/README.md, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/butterknife-sample/pom.xml, +    <version>4.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>4.0.0</version>, +++ b/butterknife/pom.xml, +    <version>4.0.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>4.0.0</version>, +++ b/butterknife/pom.xml, +    <version>4.0.0</version>, +++ b/pom.xml, +  <version>4.0.0</version>, +    <tag>butterknife-parent-4.0.0</tag>]
[+++ b/butterknife-sample/pom.xml, +    <version>3.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>3.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>3.0.2-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>3.0.2-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>3.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>3.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * You can inject an {@linkplain #inject(Activity) activity directly} or a{@linkplain #inject(View), + * view directly}, or inject an {@linkplain #inject(Object, Activity) activity into another object}, + * or a {@linkplain #inject(Object, View) view into another object}.]
[+++ b/.travis.yml, +    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., +  # Install SDK license so Android Gradle plugin can install deps., +  - mkdir "$ANDROID_HOME/licenses" || true, +  - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/.travis.yml, +    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., +  # Install SDK license so Android Gradle plugin can install deps., +  - mkdir "$ANDROID_HOME/licenses" || true, +  - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/build.gradle, +      'supportLibrary': '25.3.0',, +      'androidPlugin': '2.3.2',, +      'androidTools': '25.3.0',, +      'kotlin': '1.1.2-4',, +      'release': '8.6.0',, +      truth: 'com.google.truth:truth:0.33',, +      compiletesting: 'com.google.testing.compile:compile-testing:0.11',, +          'service': 'com.google.auto.service:auto-service:1.0-rc3',, +    google(), +      google(), +++ b/.travis.yml, +    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., +  # Install SDK license so Android Gradle plugin can install deps., +  - mkdir "$ANDROID_HOME/licenses" || true, +  - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/build.gradle, +      'supportLibrary': '25.3.0',, +      'androidPlugin': '2.3.2',, +      'androidTools': '25.3.0',, +      'kotlin': '1.1.2-4',, +      'release': '8.6.0',, +      truth: 'com.google.truth:truth:0.33',, +      compiletesting: 'com.google.testing.compile:compile-testing:0.11',, +          'service': 'com.google.auto.service:auto-service:1.0-rc3',, +    google(), +      google(), +++ b/butterknife-annotations/build.gradle, +++ b/.travis.yml, +    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., +  # Install SDK license so Android Gradle plugin can install deps., +  - mkdir "$ANDROID_HOME/licenses" || true, +  - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/build.gradle, +      'supportLibrary': '25.3.0',, +      'androidPlugin': '2.3.2',, +      'androidTools': '25.3.0',, +      'kotlin': '1.1.2-4',, +      'release': '8.6.0',, +      truth: 'com.google.truth:truth:0.33',, +      compiletesting: 'com.google.testing.compile:compile-testing:0.11',, +          'service': 'com.google.auto.service:auto-service:1.0-rc3',, +    google(), +      google(), +++ b/butterknife-annotations/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/.travis.yml, +    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., +  # Install SDK license so Android Gradle plugin can install deps., +  - mkdir "$ANDROID_HOME/licenses" || true, +  - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/build.gradle, +      'supportLibrary': '25.3.0',, +      'androidPlugin': '2.3.2',, +      'androidTools': '25.3.0',, +      'kotlin': '1.1.2-4',, +      'release': '8.6.0',, +      truth: 'com.google.truth:truth:0.33',, +      compiletesting: 'com.google.testing.compile:compile-testing:0.11',, +          'service': 'com.google.auto.service:auto-service:1.0-rc3',, +    google(), +      google(), +++ b/butterknife-annotations/build.gradle, +++ b/butterknife-gradle-plugin/build.gradle, +++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java, +import com.android.tools.lint.checks.infrastructure.LintDetectorTest;, +import com.android.tools.lint.checks.infrastructure.TestFiles;, +public final class InvalidR2UsageDetectorTest extends LintDetectorTest {, +  private static final TestFile BIND_TEST = TestFiles.java("", +      + "package sample.r2;\n", +      + "\n", +      + "import java.lang.annotation.ElementType;\n", +      + "import java.lang.annotation.Retention;\n", +      + "import java.lang.annotation.RetentionPolicy;\n", +      + "import java.lang.annotation.Target;\n", +      + "\n", +      + "@Retention(RetentionPolicy.SOURCE) @Target({ ElementType.FIELD, ElementType.METHOD })\n", +      + "public @interface BindTest {\n", +      + "  int value();\n", +      + "}\n");, +  private static final TestFile R2 = TestFiles.java("", +      + "package sample.r2;\n", +      + "\n", +      + "public final class R2 {\n", +      + "  public static final class array {\n", +      + "    public static final int res = 0x7f040001;\n", +      + "  }\n", +      + "\n", +      + "  public static final class attr {\n", +      + "    public static final int res = 0x7f040002;\n"]
[+++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java, +package com.example.butterknife.functional;, +, +import android.content.Context;, +import android.view.View;, +import androidx.test.InstrumentationRegistry;, +import butterknife.BindArray;, +import butterknife.ButterKnife;, +import butterknife.Unbinder;, +import com.example.butterknife.test.R;, +import org.junit.Test;, +, +import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;, +import static com.google.common.truth.Truth.assertThat;, +, +public final class BindArrayTest {, +  private final Context context = InstrumentationRegistry.getContext();, +  private final View tree = treeWithIds(1);, +, +  static class StringArrayTarget {, +    @BindArray(R.array.string_one_two_three) String[] actual;, +  }, +, +  @Test public void asStringArray() {, +    StringArrayTarget target = new StringArrayTarget();, +    String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);, +, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertThat(target.actual).isEqualTo(expected);, +, +    unbinder.unbind();, +    assertThat(target.actual).isEqualTo(expected);, +  }, +, +  static class IntArrayTarget {, +    @BindArray(R.array.int_one_two_three) int[] actual;, +  }, +, +  @Test public void asIntArray() {, +    IntArrayTarget target = new IntArrayTarget();, +    int[] expected = context.getResources().getIntArray(R.array.int_one_two_three);, +, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertThat(target.actual).isEqualTo(expected);, +, +    unbinder.unbind();, +    assertThat(target.actual).isEqualTo(expected);, +  }, +, +  static class CharSequenceArrayTarget {, +    @BindArray(R.array.int_one_two_three) CharSequence[] actual;, +  }, +, +  @Test public void asCharSequenceArray() {, +    CharSequenceArrayTarget target = new CharSequenceArrayTarget();, +    CharSequence[] expected = context.getResources().getTextArray(R.array.int_one_two_three);, +, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertThat(target.actual).isEqualTo(expected);, +, +    unbinder.unbind();, +    assertThat(target.actual).isEqualTo(expected);, +  }, +}, +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java, +package com.example.butterknife.functional;, +, +import android.content.Context;, +import android.view.View;, +import androidx.test.InstrumentationRegistry;, +import butterknife.BindArray;, +import butterknife.ButterKnife;, +import butterknife.Unbinder;, +import com.example.butterknife.test.R;, +import org.junit.Test;, +, +import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;, +import static com.google.common.truth.Truth.assertThat;, +, +public final class BindArrayTest {, +  private final Context context = InstrumentationRegistry.getContext();, +  private final View tree = treeWithIds(1);, +, +  static class StringArrayTarget {, +    @BindArray(R.array.string_one_two_three) String[] actual;, +  }, +, +  @Test public void asStringArray() {, +    StringArrayTarget target = new StringArrayTarget();, +    String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);, +, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertThat(target.actual).isEqualTo(expected);, +, +    unbinder.unbind();, +    assertThat(target.actual).isEqualTo(expected);, +  }]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +            + " was not found. If this view is optional add '@Optional' annotation.");]
[+++ b/butterknife-sample/pom.xml, +    <version>1.3.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.3.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.3.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.3-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/gradle.properties, +VERSION_NAME=8.1.1-SNAPSHOT]
[+++ b/CHANGELOG.md, + * Multiple injections of the same view ID only require a single find call., +++ b/CHANGELOG.md, + * Multiple injections of the same view ID only require a single find call., +++ b/butterknife/src/it/one-find-per-id/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>one-find-per-id</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>4.10</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <version>2.0-alpha-2</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <version>1.0.4</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/CHANGELOG.md, + * Multiple injections of the same view ID only require a single find call., +++ b/butterknife/src/it/one-find-per-id/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>one-find-per-id</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    @SafeVarargs, +    @SafeVarargs]
[+++ b/.travis.yml, +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +    - $HOME/.android/build-cache, +++ b/.travis.yml, +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +    - $HOME/.android/build-cache, +++ b/build.gradle, +      'kotlin': '1.1.4-3',]
[+++ b/build.gradle, +      'androidPlugin': '3.0.0-alpha8',, +++ b/build.gradle, +      'androidPlugin': '3.0.0-alpha8',, +++ b/butterknife-annotations/build.gradle, +apply plugin: 'java-library', +  api deps.support.annotations, +++ b/build.gradle, +      'androidPlugin': '3.0.0-alpha8',, +++ b/butterknife-annotations/build.gradle, +apply plugin: 'java-library', +  api deps.support.annotations, +++ b/butterknife-compiler/build.gradle, +apply plugin: 'java-library', +  implementation project(':butterknife-annotations'), +  implementation deps.auto.common, +  api deps.javapoet, +  testImplementation deps.junit, +  testImplementation deps.truth, +++ b/build.gradle, +      'androidPlugin': '3.0.0-alpha8',, +++ b/butterknife-annotations/build.gradle, +apply plugin: 'java-library', +  api deps.support.annotations, +++ b/butterknife-compiler/build.gradle, +apply plugin: 'java-library', +  implementation project(':butterknife-annotations'), +  implementation deps.auto.common, +  api deps.javapoet, +  testImplementation deps.junit, +  testImplementation deps.truth, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-library', +  implementation deps.android.gradlePlugin, +  implementation deps.javaparser, +  implementation deps.javapoet, +  implementation deps.kotlin.stdLibJre8, +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.support.annotations, +  testImplementation deps.compiletesting, +++ b/build.gradle, +      'androidPlugin': '3.0.0-alpha8',, +++ b/butterknife-annotations/build.gradle, +apply plugin: 'java-library', +  api deps.support.annotations, +++ b/butterknife-compiler/build.gradle, +apply plugin: 'java-library', +  implementation project(':butterknife-annotations'), +  implementation deps.auto.common, +  api deps.javapoet, +  testImplementation deps.junit, +  testImplementation deps.truth, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-library', +  implementation deps.android.gradlePlugin, +  implementation deps.javaparser, +  implementation deps.javapoet, +  implementation deps.kotlin.stdLibJre8, +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.support.annotations, +  testImplementation deps.compiletesting, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +      variant.outputs.all { output ->, +++ b/build.gradle, +      'androidPlugin': '3.0.0-alpha8',, +++ b/butterknife-annotations/build.gradle, +apply plugin: 'java-library', +  api deps.support.annotations, +++ b/butterknife-compiler/build.gradle, +apply plugin: 'java-library', +  implementation project(':butterknife-annotations'), +  implementation deps.auto.common, +  api deps.javapoet, +  testImplementation deps.junit, +  testImplementation deps.truth, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-library', +  implementation deps.android.gradlePlugin, +  implementation deps.javaparser, +  implementation deps.javapoet, +  implementation deps.kotlin.stdLibJre8, +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.support.annotations, +  testImplementation deps.compiletesting, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +      variant.outputs.all { output ->, +++ b/butterknife-integration-test/build.gradle, +, +  testOptions {, +    unitTests {, +      includeAndroidResources = true, +    }, +  }, +  implementation project(':butterknife'), +  testImplementation deps.junit, +  testImplementation deps.truth, +  testImplementation deps.robolectric]
[+++ b/butterknife-sample/pom.xml, +    <version>2.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>2.0.1</version>, +++ b/butterknife/pom.xml, +    <version>2.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>2.0.1</version>, +++ b/butterknife/pom.xml, +    <version>2.0.1</version>, +++ b/pom.xml, +  <version>2.0.1</version>, +    <tag>butterknife-parent-2.0.1</tag>]
[+++ b/.travis.yml, +    - sys-img-armeabi-v7a-android-18, +, +before_script:, +  # Create and start an emulator for instrumentation tests., +  - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a, +  - emulator -avd test -no-audio -no-window &, +  - android-wait-for-emulator, +  - adb shell input keyevent 82, +, +++ b/.travis.yml, +    - sys-img-armeabi-v7a-android-18, +, +before_script:, +  # Create and start an emulator for instrumentation tests., +  - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a, +  - emulator -avd test -no-audio -no-window &, +  - android-wait-for-emulator, +  - adb shell input keyevent 82, +, +++ b/butterknife-sample/build.gradle, +, +afterEvaluate {, +  tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->, +    task.doFirst {, +      logging.level = LogLevel.INFO, +    }, +    task.doLast {, +      logging.level = LogLevel.LIFECYCLE, +    }, +  }, +}, +++ b/.travis.yml, +    - sys-img-armeabi-v7a-android-18, +, +before_script:, +  # Create and start an emulator for instrumentation tests., +  - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a, +  - emulator -avd test -no-audio -no-window &, +  - android-wait-for-emulator, +  - adb shell input keyevent 82, +, +++ b/butterknife-sample/build.gradle, +, +afterEvaluate {, +  tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->, +    task.doFirst {, +      logging.level = LogLevel.INFO, +    }, +    task.doLast {, +      logging.level = LogLevel.LIFECYCLE, +    }, +  }, +}, +++ b/butterknife-sample/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java, +package com.example.butterknife;, +, +import android.test.ActivityInstrumentationTestCase2;, +, +public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {, +  public SimpleActivityTest() {, +    super(SimpleActivity.class);, +  }, +, +  public void testActivityStarts() {, +    getActivity(); // Trigger activity creation., +    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup., +  }, +}, +++ b/.travis.yml, +    - sys-img-armeabi-v7a-android-18, +, +before_script:, +  # Create and start an emulator for instrumentation tests., +  - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a, +  - emulator -avd test -no-audio -no-window &, +  - android-wait-for-emulator, +  - adb shell input keyevent 82, +, +++ b/butterknife-sample/build.gradle, +, +afterEvaluate {, +  tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->, +    task.doFirst {, +      logging.level = LogLevel.INFO, +    }, +    task.doLast {, +      logging.level = LogLevel.LIFECYCLE, +    }, +  }, +}, +++ b/butterknife-sample/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java, +package com.example.butterknife;, +, +import android.test.ActivityInstrumentationTestCase2;, +, +public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {, +  public SimpleActivityTest() {, +    super(SimpleActivity.class);, +  }]
[+++ b/butterknife-sample/pom.xml, +    <version>5.1.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.1.3-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.1.3-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.1.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>5.1.3-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/pom.xml, +          <version>3.8.0</version>]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.content.Context;, +, +      @Override protected Context getContext(Object source) {, +        return ((View) source).getContext();, +      }, +, +      @Override protected Context getContext(Object source) {, +        return (Activity) source;, +      }, +, +      @Override protected Context getContext(Object source) {, +        return ((Dialog) source).getContext();, +      }, +        String name = getContext(source).getResources().getResourceEntryName(id);, +        throw new IllegalStateException("Required view '", +            + name, +            + "' with ID ", +            + " for ", +, +    protected abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.content.Context;, +, +      @Override protected Context getContext(Object source) {, +        return ((View) source).getContext();, +      }, +, +      @Override protected Context getContext(Object source) {, +        return (Activity) source;, +      }, +, +      @Override protected Context getContext(Object source) {, +        return ((Dialog) source).getContext();, +      }, +        String name = getContext(source).getResources().getResourceEntryName(id);, +        throw new IllegalStateException("Required view '", +            + name, +            + "' with ID ", +            + " for ", +, +    protected abstract Context getContext(Object source);, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +, +  @Test public void finderThrowsNiceError() {, +    View view = new View(Robolectric.application);, +    try {, +      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");, +    } catch (IllegalStateException e) {, +      assertThat(e).hasMessage("Required view 'button1' with ID ", +          + android.R.id.button1, +          + " for yo mama was not found. If this view is optional add '@Optional' annotation.");, +    }, +  }]
[+++ b/build.gradle, +    gradlePluginPortal(), +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', +  apply plugin: 'net.ltgt.errorprone', +, +  dependencies {, +    errorprone 'com.google.errorprone:error_prone_core:2.3.1', +  }, +, +  // TODO figure out why this causes codegen to fail in android tests., +  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), +  //configurations.all { Configuration configuration ->, +  //  if (configuration.name.endsWith('nnotationProcessor')) {, +  //    configuration.dependencies.add(nullaway), +  //  }, +  //}, +  //, +  //tasks.withType(JavaCompile) {, +  //  options.compilerArgs += [, +  //      '-Xep:NullAway:ERROR',, +  //      '-XepOpt:NullAway:AnnotatedPackages=butterknife',, +  //  ], +  //}, +, +++ b/build.gradle, +    gradlePluginPortal(), +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', +  apply plugin: 'net.ltgt.errorprone', +, +  dependencies {, +    errorprone 'com.google.errorprone:error_prone_core:2.3.1', +  }, +, +  // TODO figure out why this causes codegen to fail in android tests., +  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), +  //configurations.all { Configuration configuration ->, +  //  if (configuration.name.endsWith('nnotationProcessor')) {, +  //    configuration.dependencies.add(nullaway), +  //  }, +  //}, +  //, +  //tasks.withType(JavaCompile) {, +  //  options.compilerArgs += [, +  //      '-Xep:NullAway:ERROR',, +  //      '-XepOpt:NullAway:AnnotatedPackages=butterknife',, +  //  ], +  //}, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +import javax.annotation.Nullable;, +import static java.util.Objects.requireNonNull;, +  private final @Nullable BindingSet parentBinding;, +      ImmutableList<ResourceBinding> resourceBindings, @Nullable BindingSet parentBinding) {, +      FieldViewBinding fieldBinding = requireNonNull(binding.getFieldBinding());, +        || (parentBinding != null && parentBinding.constructorNeedsView());, +    private @Nullable BindingSet parentBinding;, +    @Nullable String findExistingBindingName(Id id) {, +++ b/build.gradle, +    gradlePluginPortal(), +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16', +  apply plugin: 'net.ltgt.errorprone', +, +  dependencies {, +    errorprone 'com.google.errorprone:error_prone_core:2.3.1', +  }, +, +  // TODO figure out why this causes codegen to fail in android tests., +  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5'), +  //configurations.all { Configuration configuration ->, +  //  if (configuration.name.endsWith('nnotationProcessor')) {, +  //    configuration.dependencies.add(nullaway), +  //  }, +  //}, +  //, +  //tasks.withType(JavaCompile) {, +  //  options.compilerArgs += [, +  //      '-Xep:NullAway:ERROR',, +  //      '-XepOpt:NullAway:AnnotatedPackages=butterknife',, +  //  ], +  //}, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +import javax.annotation.Nullable;, +import static java.util.Objects.requireNonNull;, +  private final @Nullable BindingSet parentBinding;, +      ImmutableList<ResourceBinding> resourceBindings, @Nullable BindingSet parentBinding) {, +      FieldViewBinding fieldBinding = requireNonNull(binding.getFieldBinding());, +        || (parentBinding != null && parentBinding.constructorNeedsView());, +    private @Nullable BindingSet parentBinding;, +    @Nullable String findExistingBindingName(Id id) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import javax.annotation.Nullable;, +import static java.util.Objects.requireNonNull;, +@SuppressWarnings("NullAway") // TODO fix all these..., +  private @Nullable Trees trees;, +    TypeName type = TypeName.get(requireNonNull(viewType));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, requireNonNull(kind),, +    builder.addResource(new FieldResourceBinding(resourceId, name, requireNonNull(type)));, +   * Returns a method name from the {@code android.content.res.Resources} class for array resource, +  private static @Nullable FieldResourceBinding.Type getArrayResourceMethodName(Element element) {]
[+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +      if (clsName.startsWith("android.") || clsName.startsWith("java."), +          || clsName.startsWith("androidx.")) {, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +      if (clsName.startsWith("android.") || clsName.startsWith("java."), +          || clsName.startsWith("androidx.")) {, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    if (clsName.startsWith("android.") || clsName.startsWith("java."), +        || clsName.startsWith("androidx.")) {]
[+++ b/butterknife-sample/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/.travis.yml, +    - build-tools-24.0.0, +++ b/.travis.yml, +    - build-tools-24.0.0, +++ b/build.gradle, +  buildToolsVersion = '24.0.0', +    supportv4: 'com.android.support:support-v4:24.1.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.1.0',]
[+++ b/gradle.properties, +VERSION_NAME=8.2.0-SNAPSHOT]
[+++ b/butterknife-sample/pom.xml, +    <version>1.4.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.4.0</version>, +++ b/butterknife/pom.xml, +    <version>1.4.0</version>, +++ b/butterknife-sample/pom.xml, +    <version>1.4.0</version>, +++ b/butterknife/pom.xml, +    <version>1.4.0</version>, +++ b/pom.xml, +  <version>1.4.0</version>, +    <tag>butterknife-parent-1.4.0</tag>]
[+++ b/build.gradle, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +      if (clsName.startsWith("android.") || clsName.startsWith("java."), +          || clsName.startsWith("androidx.")) {, +++ b/build.gradle, +      'androidPlugin': '3.2.0-rc02',, +      'androidTools': '26.2.0-rc02',, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +      if (clsName.startsWith("android.") || clsName.startsWith("java."), +          || clsName.startsWith("androidx.")) {, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    if (clsName.startsWith("android.") || clsName.startsWith("java."), +        || clsName.startsWith("androidx.")) {]
[+++ b/CHANGELOG.md, +Version 8.5.0 *(2017-01-23)*, +----------------------------, +, + * Emit `@SuppressLint` when using `@OnTouch` to avoid a lint warning., + * Migrate lint checks from Lombok AST to JetBrains PSI., + * Annotations are no longer claimed by the processor., + * Based on the minimum SDK version (as specified by `butterknife.minSdk` until http://b.android.com/187527 is, +   released) the generated code now changes to use newer APIs when available., + * Generated classes now include single-argument overloads for `View`, `Activity`, and `Dialog` subclasses., + * Generated classes are no longer generic., + * Minimum supported SDK is now 9., +, +, +++ b/CHANGELOG.md, +Version 8.5.0 *(2017-01-23)*, +----------------------------, +, + * Emit `@SuppressLint` when using `@OnTouch` to avoid a lint warning., + * Migrate lint checks from Lombok AST to JetBrains PSI., + * Annotations are no longer claimed by the processor., + * Based on the minimum SDK version (as specified by `butterknife.minSdk` until http://b.android.com/187527 is, +   released) the generated code now changes to use newer APIs when available., + * Generated classes now include single-argument overloads for `View`, `Activity`, and `Dialog` subclasses., + * Generated classes are no longer generic., + * Minimum supported SDK is now 9., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.5.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.0', +++ b/CHANGELOG.md, +Version 8.5.0 *(2017-01-23)*, +----------------------------, +, + * Emit `@SuppressLint` when using `@OnTouch` to avoid a lint warning., + * Migrate lint checks from Lombok AST to JetBrains PSI., + * Annotations are no longer claimed by the processor., + * Based on the minimum SDK version (as specified by `butterknife.minSdk` until http://b.android.com/187527 is, +   released) the generated code now changes to use newer APIs when available., + * Generated classes now include single-argument overloads for `View`, `Activity`, and `Dialog` subclasses., + * Generated classes are no longer generic., + * Minimum supported SDK is now 9., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.5.0', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.0', +++ b/gradle.properties, +VERSION_NAME=8.5.0]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId().value;, +      fieldName = "view" + bindings.getId().value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId().value;, +      fieldName = "view" + bindings.getId().value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +    throw new UnsupportedOperationException("Please use value or code explicitly");]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    try {, +    } catch (IllegalArgumentException ignored) {, +    }, +        note(element, "@%s field with unresolved type (%s) ", +                + "must elsewhere be generated as a View or interface. (%s.%s)",, +        note(element, "@%s List or array with unresolved type (%s) ", +                + "must elsewhere be generated as a View or interface. (%s.%s)",, +    if (trees == null) return;, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    try {, +    } catch (IllegalArgumentException ignored) {, +    }, +        note(element, "@%s field with unresolved type (%s) ", +                + "must elsewhere be generated as a View or interface. (%s.%s)",, +        note(element, "@%s List or array with unresolved type (%s) ", +                + "must elsewhere be generated as a View or interface. (%s.%s)",, +    if (trees == null) return;, +, +++ b/checkstyle.xml, +    <!--<module name="EmptyBlock"/>-->]
[+++ b/butterknife-integration-test/src/androidTest/font_licenses.txt, +Copyright 2006 The Inconsolata Project Authors, +, +This Font Software is licensed under the SIL Open Font License, Version 1.1., +This license is copied below, and is also available with a FAQ at:, +http://scripts.sil.org/OFL, +, +, +-----------------------------------------------------------, +SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007, +-----------------------------------------------------------, +, +PREAMBLE, +The goals of the Open Font License (OFL) are to stimulate worldwide, +development of collaborative font projects, to support the font creation, +efforts of academic and linguistic communities, and to provide a free and, +open framework in which fonts may be shared and improved in partnership, +with others., +, +The OFL allows the licensed fonts to be used, studied, modified and, +redistributed freely as long as they are not sold by themselves. The, +fonts, including any derivative works, can be bundled, embedded, , +redistributed and/or sold with any software provided that any reserved, +names are not used by derivative works. The fonts and derivatives,, +however, cannot be released under any other type of license. The, +requirement for fonts to remain under this license does not apply, +to any document created using the fonts or their derivatives., +, +DEFINITIONS, +"Font Software" refers to the set of files released by the Copyright, +Holder(s) under this license and clearly marked as such. This may, +include source files, build scripts and documentation., +, +"Reserved Font Name" refers to any names specified as such after the, +copyright statement(s)., +, +"Original Version" refers to the collection of Font Software components as, +distributed by the Copyright Holder(s)., +, +"Modified Version" refers to any derivative made by adding to, deleting,, +or substituting -- in part or in whole -- any of the components of the, +Original Version, by changing formats or by porting the Font Software to a, +new environment., +, +"Author" refers to any designer, engineer, programmer, technical, +writer or other person who contributed to the Font Software., +, +PERMISSION & CONDITIONS, +Permission is hereby granted, free of charge, to any person obtaining, +a copy of the Font Software, to use, study, copy, merge, embed, modify,, +redistribute, and sell modified and unmodified copies of the Font, +Software, subject to the following conditions:, +, +1) Neither the Font Software nor any of its individual components,, +in Original or Modified Versions, may be sold by itself., +, +2) Original or Modified Versions of the Font Software may be bundled,, +redistributed and/or sold with any software, provided that each copy, +contains the above copyright notice and this license. These can be, +included either as stand-alone text files, human-readable headers or, +in the appropriate machine-readable metadata fields within text or, +binary files as long as those fields can be easily viewed by the user., +, +3) No Modified Version of the Font Software may use the Reserved Font, +Name(s) unless explicit written permission is granted by the corresponding, +Copyright Holder. This restriction only applies to the primary font name as, +presented to the users., +, +4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font, +Software shall not be used to promote, endorse or advertise any, +Modified Version, except to acknowledge the contribution(s) of the, +Copyright Holder(s) and the Author(s) or with their explicit written, +permission., +, +5) The Font Software, modified or unmodified, in part or in whole,, +must be distributed entirely under this license, and must not be, +distributed under any other license. The requirement for fonts to, +remain under this license does not apply to any document created, +using the Font Software., +, +TERMINATION, +This license becomes null and void if any of the above conditions are, +not met., +, +DISCLAIMER, +THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,, +EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF, +MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT, +OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE, +COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,, +INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL, +DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING, +FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM, +OTHER DEALINGS IN THE FONT SOFTWARE., +++ b/butterknife-integration-test/src/androidTest/font_licenses.txt, +Copyright 2006 The Inconsolata Project Authors, +, +This Font Software is licensed under the SIL Open Font License, Version 1.1., +This license is copied below, and is also available with a FAQ at:, +http://scripts.sil.org/OFL]
[+++ b/.travis.yml, +before_script:, +  # Create and start an emulator for instrumentation tests., +++ b/.travis.yml, +before_script:, +  # Create and start an emulator for instrumentation tests., +++ b/butterknife-integration-test/build.gradle, +++ b/.travis.yml, +before_script:, +  # Create and start an emulator for instrumentation tests., +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife/build.gradle, +++ b/.travis.yml, +before_script:, +  # Create and start an emulator for instrumentation tests., +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife/build.gradle, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/.travis.yml, +before_script:, +  # Create and start an emulator for instrumentation tests., +++ b/butterknife-integration-test/build.gradle, +++ b/butterknife/build.gradle, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.app.Dialog;, + * Injection can be performed directly on an {@linkplain #inject(Activity) activity}, a, + * {@linkplain #inject(View) view}, or a {@linkplain #inject(Dialog) dialog}. Alternate objects to, + * inject can be specified along with an {@linkplain #inject(Object, Activity) activity},, + * {@linkplain #inject(Object, View) view}, or, + * {@linkplain #inject(Object, android.app.Dialog) dialog}., +    },, +    DIALOG {, +      @Override public View findOptionalView(Object source, int id) {, +        return ((Dialog) source).findViewById(id);, +      }, +   * Inject annotated fields and methods in the specified {@link Dialog}. The current content, +   * view is used as the view root., +   *, +   * @param target Target dialog for field injection., +   */, +  public static void inject(Dialog target) {, +    inject(target, target, Finder.DIALOG);, +  }, +, +  /**, +   * Inject annotated fields and methods in the specified {@code target} using the {@code source}, +   * {@link Dialog} as the view root., +   *, +   * @param target Target class for field injection., +   * @param source Dialog on which IDs will be looked up., +   */, +  public static void inject(Object target, Dialog source) {, +    inject(target, source, Finder.DIALOG);, +  }, +, +  /**]
[+++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/pom.xml, +        <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ b/butterknife-sample/pom.xml, +        <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/pom.xml, +        <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/pom.xml, +        <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/pom.xml, +        <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/src/main/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +    android:versionCode="1", +    android:versionName="1.0", +    package="com.example.butterknife">, +, +  <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, +, +  <application, +      android:label="@string/app_name", +      android:name=".SimpleApp">, +, +    <activity, +        android:label="@string/app_name", +        android:name=".SimpleActivity">, +      <intent-filter>, +        <action android:name="android.intent.action.MAIN"/>, +        <category android:name="android.intent.category.LAUNCHER"/>, +        <category android:name="android.intent.category.DEFAULT"/>, +      </intent-filter>, +    </activity>, +  </application>, +</manifest>, +++ /dev/null, +++ b/butterknife-sample/pom.xml, +        <groupId>com.simpligility.maven.plugins</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/butterknife-sample/src/main/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +    android:versionCode="1", +    android:versionName="1.0", +    package="com.example.butterknife">, +, +  <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>, +, +  <application, +      android:label="@string/app_name", +      android:name=".SimpleApp">, +, +    <activity, +        android:label="@string/app_name", +        android:name=".SimpleActivity">, +      <intent-filter>, +        <action android:name="android.intent.action.MAIN"/>, +        <category android:name="android.intent.category.LAUNCHER"/>, +        <category android:name="android.intent.category.DEFAULT"/>, +      </intent-filter>, +    </activity>, +  </application>, +</manifest>, +++ b/butterknife-sample/src/main/res/layout/simple_activity.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android", +    android:layout_width="match_parent", +    android:layout_height="match_parent", +    android:orientation="vertical", +    android:padding="8dp">, +  <TextView, +      android:id="@+id/title", +      android:layout_width="match_parent", +      android:layout_height="wrap_content", +      android:gravity="center", +      android:textSize="50sp", +      />, +  <TextView, +      android:id="@+id/subtitle", +      android:layout_width="match_parent", +      android:layout_height="wrap_content"]
[+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java, +  @Test public void zeroBindingsBindDoesNotThrowExceptionAndCaches() {, +    assertThat(ButterKnife.BINDINGS).isEmpty();, +    assertThat(ButterKnife.BINDINGS).containsEntry(Example.class, null);, +++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java, +  @Test public void zeroBindingsBindDoesNotThrowExceptionAndCaches() {, +    assertThat(ButterKnife.BINDINGS).isEmpty();, +    assertThat(ButterKnife.BINDINGS).containsEntry(Example.class, null);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    if (bindingCtor != null || BINDINGS.containsKey(cls)) {]
[+++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.2.2', +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.2.2', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final ImmutableList<ViewBinding> viewBindings;, +  private final ImmutableList<FieldCollectionViewBinding> collectionBindings;, +  private final ImmutableList<ResourceBinding> resourceBindings;, +      ImmutableList<ViewBinding> viewBindings,, +      ImmutableList<FieldCollectionViewBinding> collectionBindings,, +      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {, +    this.viewBindings = viewBindings;, +    this.collectionBindings = collectionBindings;, +    this.resourceBindings = resourceBindings;, +      for (ViewBinding binding : viewBindings) {, +        addViewBinding(constructor, binding);, +      for (ViewBinding binding : viewBindings) {, +        if (binding.getFieldBinding() != null) {, +          result.addStatement("target.$L = null", binding.getFieldBinding().getName());, +      for (ViewBinding binding : viewBindings) {, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {, +    if (binding.isSingleFieldBinding()) {, +      FieldViewBinding fieldBinding = binding.getFieldBinding();, +        builder.add("source.findViewById($L)", binding.getId().code);, +        builder.add("(source, $L", binding.getId().code);, +    List<MemberViewBinding> requiredBindings = binding.getRequiredBindings();, +    if (requiredBindings.isEmpty()) {, +      result.addStatement("view = source.findViewById($L)", binding.getId().code);, +    } else if (!binding.isBoundToRoot()) {, +          binding.getId().code, asHumanDescription(requiredBindings));, +    addFieldBinding(result, binding);, +    addMethodBindings(result, binding);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding) {, +    FieldViewBinding fieldBinding = binding.getFieldBinding();, +            fieldBinding.getName(), UTILS, binding.getId().code,, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {, +        binding.getMethodBindings();, +    boolean needsNullChecked = binding.getRequiredBindings().isEmpty();, +    if (!binding.isBoundToRoot()) {, +      fieldName = "view" + binding.getId().value;, +          for (MethodViewBinding methodBinding : methodBindings.get(method)) {, +            builder.add("target.$L(", methodBinding.getName());, +            List<Parameter> parameters = methodBinding.getParameters();, +                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +  static String asHumanDescription(Collection<? extends MemberViewBinding> bindings) {, +    Iterator<? extends MemberViewBinding> iterator = bindings.iterator();, +    for (ViewBinding bindings : viewBindings) {, +    for (ViewBinding bindings : viewBindings) {, +    for (ViewBinding bindings : viewBindings) {, +    private final Map<Id, ViewBinding.Builder> viewIdMap = new LinkedHashMap<>();, +    private final ImmutableList.Builder<FieldCollectionViewBinding> collectionBindings =, +        ImmutableList.builder();, +    private final ImmutableList.Builder<ResourceBinding> resourceBindings = ImmutableList.builder();, +      ViewBinding.Builder viewBinding = getOrCreateViewBindings(id);, +      if (viewBinding.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {, +      viewBinding.addMethodBinding(listener, method, binding);, +    String findExistingBindingName(Id id) {, +      ViewBinding.Builder builder = viewIdMap.get(id);, +      if (builder == null) {, +        return null;, +      }, +      FieldViewBinding fieldBinding = builder.fieldBinding;, +      if (fieldBinding == null) {, +        return null;, +      }, +      return fieldBinding.getName();, +    private ViewBinding.Builder getOrCreateViewBindings(Id id) {, +      ViewBinding.Builder viewId = viewIdMap.get(id);, +        viewId = new ViewBinding.Builder(id);, +      ImmutableList.Builder<ViewBinding> viewBindings = ImmutableList.builder();, +      for (ViewBinding.Builder builder : viewIdMap.values()) {, +        viewBindings.add(builder.build());, +      }, +      return new BindingSet(targetTypeName, bindingClassName, isFinal, viewBindings.build(),, +          collectionBindings.build(), resourceBindings.build(), parentBinding);, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.2.2', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final ImmutableList<ViewBinding> viewBindings;, +  private final ImmutableList<FieldCollectionViewBinding> collectionBindings;, +  private final ImmutableList<ResourceBinding> resourceBindings;, +      ImmutableList<ViewBinding> viewBindings,, +      ImmutableList<FieldCollectionViewBinding> collectionBindings,, +      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {, +    this.viewBindings = viewBindings;, +    this.collectionBindings = collectionBindings;, +    this.resourceBindings = resourceBindings;, +      for (ViewBinding binding : viewBindings) {, +        addViewBinding(constructor, binding);, +      for (ViewBinding binding : viewBindings) {, +        if (binding.getFieldBinding() != null) {, +          result.addStatement("target.$L = null", binding.getFieldBinding().getName());, +      for (ViewBinding binding : viewBindings) {, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {, +    if (binding.isSingleFieldBinding()) {, +      FieldViewBinding fieldBinding = binding.getFieldBinding();]
[+++ b/butterknife-sample/build.gradle, +, +  buildTypes {, +    debug {, +      minifyEnabled true, +    }, +  }, +++ b/butterknife-sample/build.gradle, +, +  buildTypes {, +    debug {, +      minifyEnabled true, +    }, +  }, +++ b/butterknife/build.gradle, +, +  buildTypes {, +    release {, +      consumerProguardFiles 'proguard-rules.txt', +    }, +  }, +++ b/butterknife-sample/build.gradle, +, +  buildTypes {, +    debug {, +      minifyEnabled true, +    }, +  }, +++ b/butterknife/build.gradle, +, +  buildTypes {, +    release {, +      consumerProguardFiles 'proguard-rules.txt', +    }, +  }, +++ b/butterknife/proguard-rules.txt, +-keep class butterknife.** { *; }, +-dontwarn butterknife.internal.**, +-keep class **$$ViewBinder { *; }, +, +-keepclasseswithmembernames class * {, +    @butterknife.* <fields>;, +}, +, +-keepclasseswithmembernames class * {, +    @butterknife.* <methods>;, +}, +++ b/butterknife-sample/build.gradle, +, +  buildTypes {, +    debug {, +      minifyEnabled true, +    }, +  }, +++ b/butterknife/build.gradle, +, +  buildTypes {, +    release {, +      consumerProguardFiles 'proguard-rules.txt', +    }, +  }, +++ b/butterknife/proguard-rules.txt, +-keep class butterknife.** { *; }, +-dontwarn butterknife.internal.**, +-keep class **$$ViewBinder { *; }, +, +-keepclasseswithmembernames class * {, +    @butterknife.* <fields>;, +}, +, +-keepclasseswithmembernames class * {, +    @butterknife.* <methods>;, +}, +++ b/website/index.html]
[+++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java, +package butterknife;, +, +import android.content.Context;, +import android.support.annotation.NonNull;, +import android.support.test.InstrumentationRegistry;, +import android.util.Property;, +import android.view.View;, +import java.util.List;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +import static java.util.Arrays.asList;, +, +public class ViewCollectionsTest {, +  private static final Property<View, Boolean> PROPERTY_ENABLED =, +      new Property<View, Boolean>(Boolean.class, "enabled") {, +        @Override public Boolean get(View view) {, +          return view.isEnabled();, +        }, +, +        @Override public void set(View view, Boolean enabled) {, +          view.setEnabled(enabled);, +        }, +      };, +  private static final Setter<View, Boolean> SETTER_ENABLED =, +      new Setter<View, Boolean>() {, +        @Override public void set(@NonNull View view, Boolean value, int index) {, +          view.setEnabled(value);, +        }, +      };, +  private static final Action<View> ACTION_DISABLE = new Action<View>() {, +    @Override public void apply(@NonNull View view, int index) {, +      view.setEnabled(false);, +    }, +  };, +  private static final Action<View> ACTION_ZERO_ALPHA = new Action<View>() {, +    @Override public void apply(@NonNull View view, int index) {, +      view.setAlpha(0f);, +    }, +  };, +, +  private final Context context = InstrumentationRegistry.getContext();, +, +  @Test public void propertyAppliedToView() {, +    View view = new View(context);, +    assertThat(view.isEnabled()).isTrue();, +, +    ViewCollections.set(view, PROPERTY_ENABLED, false);, +    assertThat(view.isEnabled()).isFalse();, +  }, +, +  @Test public void propertyAppliedToEveryViewInList() {, +    View view1 = new View(context);, +    View view2 = new View(context);, +    View view3 = new View(context);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();, +, +    List<View> views = asList(view1, view2, view3);, +    ViewCollections.set(views, PROPERTY_ENABLED, false);, +, +    assertThat(view1.isEnabled()).isFalse();, +    assertThat(view2.isEnabled()).isFalse();, +    assertThat(view3.isEnabled()).isFalse();, +  }, +, +  @Test public void propertyAppliedToEveryViewInArray() {, +    View view1 = new View(context);, +    View view2 = new View(context);, +    View view3 = new View(context);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();, +, +    View[] views = new View[] { view1, view2, view3 };, +    ViewCollections.set(views, PROPERTY_ENABLED, false);, +, +    assertThat(view1.isEnabled()).isFalse();, +    assertThat(view2.isEnabled()).isFalse();, +    assertThat(view3.isEnabled()).isFalse();, +  }, +, +  @Test public void actionAppliedToView() {, +    View view = new View(context);, +    assertThat(view.isEnabled()).isTrue();, +, +    ViewCollections.run(view, ACTION_DISABLE);, +, +    assertThat(view.isEnabled()).isFalse();, +  }, +, +  @Test public void actionsAppliedToView() {, +    View view = new View(context);, +    assertThat(view.isEnabled()).isTrue();, +    assertThat(view.getAlpha()).isEqualTo(1f);, +, +    ViewCollections.run(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);, +    assertThat(view.isEnabled()).isFalse();]
[+++ b/.travis.yml, +  - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"]
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      Throwable t = e;, +      if (t instanceof InvocationTargetException) {, +        t = t.getCause();, +      throw new RuntimeException("Unable to reset views for " + target, t);, +      Throwable t = e;, +      if (t instanceof InvocationTargetException) {, +        t = t.getCause();, +      throw new RuntimeException("Unable to inject views for " + target, t);]
[+++ b/README.md, +Field and method binding for Android views which uses annotation processing to generate boilerplate, +code for you., + * Eliminate `findViewById` calls by using `@FindView` on fields., + * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,, +  @FindView(R.id.user) EditText username;, +  @FindView(R.id.pass) EditText password;, +    ButterKnife.bind(this);, +    // TODO Use fields..., +++ b/README.md, +Field and method binding for Android views which uses annotation processing to generate boilerplate, +code for you., + * Eliminate `findViewById` calls by using `@FindView` on fields., + * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,, +  @FindView(R.id.user) EditText username;, +  @FindView(R.id.pass) EditText password;, +    ButterKnife.bind(this);, +    // TODO Use fields..., +++ b/butterknife-sample/pom.xml, +    <version>7.0.0-SNAPSHOT</version>, +++ b/README.md, +Field and method binding for Android views which uses annotation processing to generate boilerplate, +code for you., + * Eliminate `findViewById` calls by using `@FindView` on fields., + * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,, +  @FindView(R.id.user) EditText username;, +  @FindView(R.id.pass) EditText password;, +    ButterKnife.bind(this);, +    // TODO Use fields..., +++ b/butterknife-sample/pom.xml, +    <version>7.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.FindView;, +import butterknife.FindViews;, +  @FindView(R.id.title) TextView title;, +  @FindView(R.id.subtitle) TextView subtitle;, +  @FindView(R.id.hello) Button hello;, +  @FindView(R.id.list_of_things) ListView listOfThings;, +  @FindView(R.id.footer) TextView footer;, +  @FindViews({ R.id.title, R.id.subtitle, R.id.hello }), +    ButterKnife.bind(this);, +    // Contrived code to use the bound fields., +    subtitle.setText("Field and method binding for Android views.");, +++ b/README.md, +Field and method binding for Android views which uses annotation processing to generate boilerplate, +code for you., + * Eliminate `findViewById` calls by using `@FindView` on fields., + * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,, +  @FindView(R.id.user) EditText username;, +  @FindView(R.id.pass) EditText password;, +    ButterKnife.bind(this);, +    // TODO Use fields..., +++ b/butterknife-sample/pom.xml, +    <version>7.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.FindView;, +import butterknife.FindViews;, +  @FindView(R.id.title) TextView title;, +  @FindView(R.id.subtitle) TextView subtitle;, +  @FindView(R.id.hello) Button hello;, +  @FindView(R.id.list_of_things) ListView listOfThings;, +  @FindView(R.id.footer) TextView footer;, +  @FindViews({ R.id.title, R.id.subtitle, R.id.hello }), +    ButterKnife.bind(this);, +    // Contrived code to use the bound fields., +    subtitle.setText("Field and method binding for Android views.");, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.FindView;, +    @FindView(R.id.word) TextView word;, +    @FindView(R.id.length) TextView length;, +    @FindView(R.id.position) TextView position;, +      ButterKnife.bind(this, view);, +++ b/README.md, +Field and method binding for Android views which uses annotation processing to generate boilerplate, +code for you., + * Eliminate `findViewById` calls by using `@FindView` on fields., + * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,, +  @FindView(R.id.user) EditText username;, +  @FindView(R.id.pass) EditText password;, +    ButterKnife.bind(this);, +    // TODO Use fields..., +++ b/butterknife-sample/pom.xml, +    <version>7.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.FindView;, +import butterknife.FindViews;, +  @FindView(R.id.title) TextView title;, +  @FindView(R.id.subtitle) TextView subtitle;, +  @FindView(R.id.hello) Button hello;, +  @FindView(R.id.list_of_things) ListView listOfThings;, +  @FindView(R.id.footer) TextView footer;, +  @FindViews({ R.id.title, R.id.subtitle, R.id.hello }), +    ButterKnife.bind(this);, +    // Contrived code to use the bound fields., +    subtitle.setText("Field and method binding for Android views.");, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.FindView;, +    @FindView(R.id.word) TextView word;, +    @FindView(R.id.length) TextView length;, +    @FindView(R.id.position) TextView position;]
[+++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java, +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java, +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +        + "    return new InnerUnbinder(target, finder, source);\n", +++ b/butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java, +        + "    return new InnerUnbinder(target, finder, source);\n", +++ b/butterknife-annotations/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion, +++ b/butterknife-compiler/build.gradle, +sourceCompatibility = rootProject.ext.sourceCompatibilityVersion, +targetCompatibility = rootProject.ext.targetCompatibilityVersion]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (bindNeedsViewLocal()) {, +      }, +    if (!bindings.requiresLocal()) {, +      // Optimize the common case where there's a single binding directly to a field., +      Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();, +      for (FieldViewBinding fieldBinding : fieldBindings) {, +        CodeBlock.Builder invoke = CodeBlock.builder(), +            .add("target.$L = finder.find", fieldBinding.getName());, +        invoke.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add("AsType");, +        }, +        invoke.add("(source, $L", bindings.getId());, +        if (fieldBinding.isRequired() || requiresCast(fieldBinding.getType())) {, +          invoke.add(", $S", asHumanDescription(fieldBindings));, +        }, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add(", $T.class", fieldBinding.getRawType());, +        }, +        result.addStatement("$L)", invoke.build());, +      }, +      return;, +    }, +, +  private boolean bindNeedsViewLocal() {, +    for (ViewBindings viewBindings : viewIdMap.values()) {, +      if (viewBindings.requiresLocal()) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (bindNeedsViewLocal()) {, +      }, +    if (!bindings.requiresLocal()) {, +      // Optimize the common case where there's a single binding directly to a field., +      Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();, +      for (FieldViewBinding fieldBinding : fieldBindings) {, +        CodeBlock.Builder invoke = CodeBlock.builder(), +            .add("target.$L = finder.find", fieldBinding.getName());, +        invoke.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add("AsType");, +        }, +        invoke.add("(source, $L", bindings.getId());, +        if (fieldBinding.isRequired() || requiresCast(fieldBinding.getType())) {, +          invoke.add(", $S", asHumanDescription(fieldBindings));, +        }, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add(", $T.class", fieldBinding.getRawType());, +        }, +        result.addStatement("$L)", invoke.build());, +      }, +      return;, +    }, +, +  private boolean bindNeedsViewLocal() {, +    for (ViewBindings viewBindings : viewIdMap.values()) {, +      if (viewBindings.requiresLocal()) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.ParameterizedTypeName;, +  public ClassName getRawType() {, +    if (type instanceof ParameterizedTypeName) {, +      return ((ParameterizedTypeName) type).rawType;, +    }, +    return (ClassName) type;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (bindNeedsViewLocal()) {, +      }, +    if (!bindings.requiresLocal()) {, +      // Optimize the common case where there's a single binding directly to a field., +      Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();, +      for (FieldViewBinding fieldBinding : fieldBindings) {, +        CodeBlock.Builder invoke = CodeBlock.builder(), +            .add("target.$L = finder.find", fieldBinding.getName());, +        invoke.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add("AsType");, +        }, +        invoke.add("(source, $L", bindings.getId());, +        if (fieldBinding.isRequired() || requiresCast(fieldBinding.getType())) {, +          invoke.add(", $S", asHumanDescription(fieldBindings));, +        }, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add(", $T.class", fieldBinding.getRawType());, +        }, +        result.addStatement("$L)", invoke.build());, +      }]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.graphics.Typeface;, +import android.support.annotation.IntDef;, +import android.support.annotation.RestrictTo;, +import static android.support.annotation.RestrictTo.Scope.LIBRARY;, +, +  @TypefaceStyle int style() default Typeface.NORMAL;, +, +  @IntDef({, +      Typeface.NORMAL,, +      Typeface.BOLD,, +      Typeface.ITALIC,, +      Typeface.BOLD_ITALIC, +  }), +  @RestrictTo(LIBRARY), +  @interface TypefaceStyle {, +  }, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.graphics.Typeface;, +import android.support.annotation.IntDef;, +import android.support.annotation.RestrictTo;, +import static android.support.annotation.RestrictTo.Scope.LIBRARY;, +, +  @TypefaceStyle int style() default Typeface.NORMAL;, +, +  @IntDef({, +      Typeface.NORMAL,, +      Typeface.BOLD,, +      Typeface.ITALIC,, +      Typeface.BOLD_ITALIC, +  }), +  @RestrictTo(LIBRARY), +  @interface TypefaceStyle {, +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.graphics.Typeface;, +import android.support.annotation.IntDef;, +import android.support.annotation.RestrictTo;, +import static android.support.annotation.RestrictTo.Scope.LIBRARY;, +, +  @TypefaceStyle int style() default Typeface.NORMAL;, +, +  @IntDef({, +      Typeface.NORMAL,, +      Typeface.BOLD,, +      Typeface.ITALIC,, +      Typeface.BOLD_ITALIC, +  }), +  @RestrictTo(LIBRARY), +  @interface TypefaceStyle {, +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.compiler.FieldTypefaceBinding.TypefaceStyles;, +    // Assemble information on the field., +    String name = element.getSimpleName().toString();, +    BindFont bindFont = element.getAnnotation(BindFont.class);, +, +    int styleValue = bindFont.style();, +    TypefaceStyles style = TypefaceStyles.fromValue(styleValue);, +    if (style == null) {, +      error(element, "@%s style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. (%s.%s)",, +          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(), name);, +      hasError = true;, +    }, +, +    QualifiedId qualifiedId = elementToQualifiedId(element, bindFont.value());, +    builder.addResource(new FieldTypefaceBinding(getId(qualifiedId), name, style));, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +import android.graphics.Typeface;, +import android.support.annotation.IntDef;, +import android.support.annotation.RestrictTo;, +import static android.support.annotation.RestrictTo.Scope.LIBRARY;, +, +  @TypefaceStyle int style() default Typeface.NORMAL;, +, +  @IntDef({, +      Typeface.NORMAL,, +      Typeface.BOLD,, +      Typeface.ITALIC,, +      Typeface.BOLD_ITALIC, +  }), +  @RestrictTo(LIBRARY), +  @interface TypefaceStyle {, +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.compiler.FieldTypefaceBinding.TypefaceStyles;, +    // Assemble information on the field., +    String name = element.getSimpleName().toString();, +    BindFont bindFont = element.getAnnotation(BindFont.class);, +, +    int styleValue = bindFont.style();, +    TypefaceStyles style = TypefaceStyles.fromValue(styleValue);, +    if (style == null) {, +      error(element, "@%s style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. (%s.%s)",, +          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(), name);, +      hasError = true;, +    }]
[+++ b/butterknife-sample/pom.xml, +    <version>6.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>6.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>6.0.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>6.0.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>6.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>6.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>]
[+++ b/build.gradle, +, +  repositories {, +    mavenCentral(), +    google(), +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +  }, +, +  dependencies {, +    classpath deps.android.gradlePlugin, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', +  }, +++ b/build.gradle, +, +  repositories {, +    mavenCentral(), +    google(), +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +  }, +, +  dependencies {, +    classpath deps.android.gradlePlugin, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk)), +  private TypeSpec createType(int sdk) {, +    result.addMethod(createBindingConstructor(sdk));, +  private MethodSpec createBindingConstructor(int sdk) {, +        addViewBinding(constructor, binding);, +        constructor.addStatement("$L", binding.render());, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {, +      if (!requiresCast && !fieldBinding.isRequired()) {, +    if (requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding);, +    addMethodBindings(result, binding);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding) {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {, +                builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)",, +                    UTILS, listenerPosition, method.name(), listenerPosition,, +                    methodBinding.getName(), i, parameter.getType());, +++ b/build.gradle, +, +  repositories {, +    mavenCentral(), +    google(), +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +  }, +, +  dependencies {, +    classpath deps.android.gradlePlugin, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk)), +  private TypeSpec createType(int sdk) {, +    result.addMethod(createBindingConstructor(sdk));, +  private MethodSpec createBindingConstructor(int sdk) {, +        addViewBinding(constructor, binding);, +        constructor.addStatement("$L", binding.render());, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {, +      if (!requiresCast && !fieldBinding.isRequired()) {, +    if (requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding);, +    addMethodBindings(result, binding);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding) {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {, +                builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)",, +                    UTILS, listenerPosition, method.name(), listenerPosition,, +                    methodBinding.getName(), i, parameter.getType());, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import java.util.Collections;, +    return Collections.singleton(OPTION_SDK_INT);, +      JavaFile javaFile = binding.brewJava(sdk);, +++ b/build.gradle, +, +  repositories {, +    mavenCentral(), +    google(), +    maven {, +      url "https://plugins.gradle.org/m2/", +    }, +  }, +, +  dependencies {, +    classpath deps.android.gradlePlugin, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2', +  }]
[+++ b/butterknife-sample/pom.xml, +    <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, +    <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, +    <version>5.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>5.0.0-SNAPSHOT</version>]
[+++ b/gradle.properties, +VERSION_NAME=9.0.0-SNAPSHOT]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_ANDROIDX =, +      ClassName.get("androidx.annotation", "UiThread");, +  private static final ClassName CALL_SUPER_ANDROIDX =, +      ClassName.get("androidx.annotation", "CallSuper");, +  static final ClassName CONTEXT_COMPAT_ANDROIDX =, +      ClassName.get("androidx.core.content", "ContextCompat");, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);, +    return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration), +  private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {, +      result.addMethod(createBindingConstructorForView(useAndroidX));, +      result.addMethod(createBindingConstructorForActivity(useAndroidX));, +      result.addMethod(createBindingConstructorForDialog(useAndroidX));, +      result.addMethod(createBindingViewDelegateConstructor(useAndroidX));, +    result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));, +      result.addMethod(createBindingUnbindMethod(result, useAndroidX));, +  private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForView(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, boolean useAndroidX) {, +      result.addAnnotation(useAndroidX ? CALL_SUPER_ANDROIDX : CALL_SUPER);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_ANDROIDX =, +      ClassName.get("androidx.annotation", "UiThread");, +  private static final ClassName CALL_SUPER_ANDROIDX =, +      ClassName.get("androidx.annotation", "CallSuper");, +  static final ClassName CONTEXT_COMPAT_ANDROIDX =, +      ClassName.get("androidx.core.content", "ContextCompat");, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);, +    return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration), +  private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {, +      result.addMethod(createBindingConstructorForView(useAndroidX));, +      result.addMethod(createBindingConstructorForActivity(useAndroidX));, +      result.addMethod(createBindingConstructorForDialog(useAndroidX));, +      result.addMethod(createBindingViewDelegateConstructor(useAndroidX));, +    result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));, +      result.addMethod(createBindingUnbindMethod(result, useAndroidX));, +  private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForView(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, boolean useAndroidX) {, +      result.addAnnotation(useAndroidX ? CALL_SUPER_ANDROIDX : CALL_SUPER);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import javax.lang.model.util.Elements;, +  private boolean useAndroidX = false;, +    useAndroidX = hasAndroidX(env.getElementUtils());, +      JavaFile javaFile = binding.brewJava(sdk, debuggable, useAndroidX);, +, +    FieldResourceBinding.Type colorStateList = useAndroidX, +        ? FieldResourceBinding.Type.COLOR_STATE_LIST_ANDROIDX, +        : FieldResourceBinding.Type.COLOR_STATE_LIST;, +    FieldResourceBinding.Type color = useAndroidX, +        ? FieldResourceBinding.Type.COLOR_ANDROIDX, +        : FieldResourceBinding.Type.COLOR;, +    builder.addResource(new FieldResourceBinding(, +        resourceId,, +        name,, +        isColorStateList ? colorStateList : color));, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint),, +        useAndroidX));, +    builder.addResource(new FieldTypefaceBinding(resourceId, name, style, useAndroidX));, +  /**, +   * Perform two lookups to see if the androidx annotation and core libraries are on the application, +   * classpath. If both aren't present butterknife will leverage support annotations and, +   * compat libraries instead., +   */, +  private static boolean hasAndroidX(Elements elementUtils) {, +    boolean annotationsPresent, +        = elementUtils.getTypeElement("androidx.annotation.NonNull") != null;, +    boolean corePresent, +        = elementUtils.getTypeElement("androidx.core.content.ContextCompat") != null;, +    return annotationsPresent && corePresent;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_ANDROIDX =, +      ClassName.get("androidx.annotation", "UiThread");, +  private static final ClassName CALL_SUPER_ANDROIDX =, +      ClassName.get("androidx.annotation", "CallSuper");, +  static final ClassName CONTEXT_COMPAT_ANDROIDX =, +      ClassName.get("androidx.core.content", "ContextCompat");, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);, +    return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration)]
[+++ b/butterknife/src/it/superclass/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>superclass</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/butterknife/src/it/superclass/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, +    xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <groupId>com.example.butterknife.tests</groupId>, +  <artifactId>superclass</artifactId>, +  <version>HEAD-SNAPSHOT</version>, +, +  <properties>, +    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, +  </properties>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.android</groupId>, +      <artifactId>android</artifactId>, +      <version>4.1.1.4</version>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.jakewharton</groupId>, +      <artifactId>butterknife</artifactId>, +      <version>@project.version@</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-compiler-plugin</artifactId>, +        <version>3.0</version>, +        <configuration>, +          <source>1.5</source>, +          <target>1.5</target>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/butterknife/src/it/superclass/src/main/java/bar/Test.java, +package bar;, +, +import android.app.Activity;, +import android.view.View;, +import butterknife.InjectView;, +import foo.BaseTest;, +, +public class Test extends BaseTest.Thing {, +  @InjectView(4) View thing4;]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java, +package butterknife.internal;, +, +public class Constants {, +, +  private Constants() { }, +, +  public static final int NO_RES_ID = -1;, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java, +package butterknife.internal;, +, +public class Constants {, +, +  private Constants() { }, +, +  public static final int NO_RES_ID = -1;, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  static final Id NO_ID = new Id(NO_RES_ID);, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name,, +        tint == NO_RES_ID ? NO_ID : resourceIds.get(tint)));, +      rScanner.reset();, +      return rScanner.resourceIds.values().iterator().next();, +      rScanner.reset();, +      if (!rScanner.resourceIds.isEmpty()) {, +        return rScanner.resourceIds;, +      } else {, +        return valuesToResourceIds(values);, +      return valuesToResourceIds(values);, +    }, +  }, +, +  private Map<Integer, Id> valuesToResourceIds(int[] values) {, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +      int value = (Integer) ((Symbol.VarSymbol) symbol).getConstantValue();, +      if (symbol.getEnclosingElement() != null, +        resourceIds.put(value, new Id(value, symbol));, +        resourceIds.put(value, new Id(value));, +, +    @Override public void visitLiteral(JCTree.JCLiteral jcLiteral) {, +      int value = (Integer) jcLiteral.value;, +      resourceIds.put(value, new Id(value));, +    }, +, +    void reset() {, +      resourceIds.clear();, +    }, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java, +package butterknife.internal;, +, +public class Constants {, +, +  private Constants() { }, +, +  public static final int NO_RES_ID = -1;, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  static final Id NO_ID = new Id(NO_RES_ID);, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name,, +        tint == NO_RES_ID ? NO_ID : resourceIds.get(tint)));, +      rScanner.reset();, +      return rScanner.resourceIds.values().iterator().next();, +      rScanner.reset();, +      if (!rScanner.resourceIds.isEmpty()) {, +        return rScanner.resourceIds;, +      } else {, +        return valuesToResourceIds(values);, +      return valuesToResourceIds(values);, +    }, +  }, +, +  private Map<Integer, Id> valuesToResourceIds(int[] values) {, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +      int value = (Integer) ((Symbol.VarSymbol) symbol).getConstantValue();, +      if (symbol.getEnclosingElement() != null, +        resourceIds.put(value, new Id(value, symbol));, +        resourceIds.put(value, new Id(value));]
[+++ b/CHANGELOG.md, +Version 8.8.1 *(2017-08-09)*, +----------------------------, +, + * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`., +, +, +++ b/CHANGELOG.md, +Version 8.8.1 *(2017-08-09)*, +----------------------------, +, + * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.1', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1', +++ b/CHANGELOG.md, +Version 8.8.1 *(2017-08-09)*, +----------------------------, +, + * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.1', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        if (requiresCast) {, +          builder.add("($T) ", fieldBinding.getType());, +        }, +++ b/CHANGELOG.md, +Version 8.8.1 *(2017-08-09)*, +----------------------------, +, + * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.8.1', +  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        if (requiresCast) {, +          builder.add("($T) ", fieldBinding.getType());, +        }, +++ b/butterknife/src/test/java/butterknife/BindViewTest.java, +  @Test public void bindingViewSubclassNonDebuggable() {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.widget.TextView;\n", +        + "import butterknife.BindView;\n", +        + "public class Test {\n", +        + "    @BindView(1) TextView thing;\n", +        + "}", +    );, +, +    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", "", +        + "package test;\n", +        + "import android.support.annotation.CallSuper;\n", +        + "import android.support.annotation.UiThread;\n", +        + "import android.view.View;\n", +        + "import android.widget.TextView;\n", +        + "import butterknife.Unbinder;\n", +        + "import java.lang.IllegalStateException;\n", +        + "import java.lang.Override;\n", +        + "public class Test_ViewBinding implements Unbinder {\n", +        + "  private Test target;\n", +        + "  @UiThread\n", +        + "  public Test_ViewBinding(Test target, View source) {\n", +        + "    this.target = target;\n", +        + "    target.thing = (TextView) source.findViewById(1);\n", +        + "  }\n", +        + "  @Override\n", +        + "  @CallSuper\n", +        + "  public void unbind() {\n", +        + "    Test target = this.target;\n", +        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n", +        + "    this.target = null;\n", +        + "    target.thing = null;\n", +        + "  }\n", +        + "}", +    );, +, +    assertAbout(javaSource()).that(source), +        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false"), +        .processedWith(new ButterKnifeProcessor()), +        .compilesWithoutWarnings(), +        .and(), +        .generatesSources(bindingSource);, +  }, +, +++ b/CHANGELOG.md, +Version 8.8.1 *(2017-08-09)*, +----------------------------, +, + * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`., +]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, +    Builder(Id id) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, +    Builder(Id id) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, +    Builder(Id id) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, +    Builder(Id id) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon May 08 12:19:25 PDT 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java, +    Builder(Id id) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon May 08 12:19:25 PDT 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip, +++ b/gradlew, +#!/usr/bin/env sh, +# Escape application args, +save ( ) {, +    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done, +    echo " ", +APP_ARGS=$(save "$@"), +, +# Collect all arguments for the java command, following the shell quoting and substitution rules, +eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS", +if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then, +exec "$JAVACMD" "$@"]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId().getIntId();, +        int tintAttributeId = binding.getTintAttributeId().getIntId();, +              binding.getName(), UTILS, binding.getId(), tintAttributeId);, +              UTILS, binding.getId());, +              UTILS, binding.getMethod(), binding.getId());, +              binding.getId());, +      fieldName = "view" + bindings.getId().getIntId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId().getIntId();, +        int tintAttributeId = binding.getTintAttributeId().getIntId();, +              binding.getName(), UTILS, binding.getId(), tintAttributeId);, +              UTILS, binding.getId());, +              UTILS, binding.getMethod(), binding.getId());, +              binding.getId());, +      fieldName = "view" + bindings.getId().getIntId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.getIntId()) {, +            VarScanner scanner =, +                new VarScanner(ids, packageName + ".R." + classTree.getSimpleName().toString());, +    private final String className;, +    private VarScanner(Map<Integer, Id> ids, String className) {, +        String resource = className + "." + jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, resource));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId().getIntId();, +        int tintAttributeId = binding.getTintAttributeId().getIntId();, +              binding.getName(), UTILS, binding.getId(), tintAttributeId);, +              UTILS, binding.getId());, +              UTILS, binding.getMethod(), binding.getId());, +              binding.getId());, +      fieldName = "view" + bindings.getId().getIntId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.getIntId()) {, +            VarScanner scanner =, +                new VarScanner(ids, packageName + ".R." + classTree.getSimpleName().toString());, +    private final String className;, +    private VarScanner(Map<Integer, Id> ids, String className) {, +        String resource = className + "." + jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, resource));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +  private final int intId;, +  private final String var;, +, +  Id(int intId) {, +    this(intId, String.valueOf(intId));, +  Id(int intId, String var) {, +    this.intId = intId;, +    this.var = var;, +    if (this == o) return true;, +    if (o == null || getClass() != o.getClass()) return false;, +, +    Id id = (Id) o;, +, +    return intId == id.intId;, +    return intId;, +    return var;, +  }, +, +  int getIntId() {, +    return intId;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      fieldName = "view" + bindings.getId().getIntId();, +        int tintAttributeId = binding.getTintAttributeId().getIntId();, +              binding.getName(), UTILS, binding.getId(), tintAttributeId);, +              UTILS, binding.getId());, +              UTILS, binding.getMethod(), binding.getId());, +              binding.getId());, +      fieldName = "view" + bindings.getId().getIntId();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (id == NO_ID.getIntId()) {, +            VarScanner scanner =, +                new VarScanner(ids, packageName + ".R." + classTree.getSimpleName().toString());, +    private final String className;, +    private VarScanner(Map<Integer, Id> ids, String className) {, +        String resource = className + "." + jcVariableDecl.getName().toString();, +        ids.put(id, new Id(id, resource));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java, +  private final int intId;, +  private final String var;, +, +  Id(int intId) {, +    this(intId, String.valueOf(intId));, +  Id(int intId, String var) {, +    this.intId = intId;, +    this.var = var;, +    if (this == o) return true;, +    if (o == null || getClass() != o.getClass()) return false;, +, +    Id id = (Id) o;, +, +    return intId == id.intId;, +    return intId;, +    return var;, +  }, +, +  int getIntId() {, +    return intId;, +++ b/butterknife-compiler/src/test/java/butterknife/RClassTest.java, +        + "    target.one = res.getInteger(test.R.integer.res);\n"]
[+++ b/.travis.yml, +    - build-tools-24.0.1, +++ b/.travis.yml, +    - build-tools-24.0.1, +++ b/build.gradle, +  buildToolsVersion = '24.0.1', +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/.travis.yml, +    - build-tools-24.0.1, +++ b/build.gradle, +  buildToolsVersion = '24.0.1', +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/.travis.yml, +    - build-tools-24.0.1, +++ b/build.gradle, +  buildToolsVersion = '24.0.1', +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, +  testCompile deps.openglApi, +++ b/.travis.yml, +    - build-tools-24.0.1, +++ b/build.gradle, +  buildToolsVersion = '24.0.1', +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, +  testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/.travis.yml, +    - build-tools-24.0.1, +++ b/build.gradle, +  buildToolsVersion = '24.0.1', +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, +  testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/butterknife/build.gradle, +  testCompile deps.openglApi, +++ b/.travis.yml, +    - build-tools-24.0.1, +++ b/build.gradle, +  buildToolsVersion = '24.0.1', +    robolectric: 'org.robolectric:robolectric:3.1.2',, +    openglApi: 'org.khronos:opengl-api:gl1.1-android-2.1_r1',, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-integration-test/build.gradle, +  testCompile deps.openglApi, +++ b/butterknife-integration-test/src/test/resources/robolectric.properties, +sdk=23, +++ b/butterknife/build.gradle, +  testCompile deps.openglApi, +++ b/butterknife/src/test/resources/robolectric.properties, +constants=butterknife.BuildConfig, +sdk=23]
[+++ b/butterknife-sample/pom.xml, +    <version>7.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>7.0.1</version>, +++ b/butterknife/pom.xml, +    <version>7.0.1</version>, +++ b/butterknife-sample/pom.xml, +    <version>7.0.1</version>, +++ b/butterknife/pom.xml, +    <version>7.0.1</version>, +++ b/pom.xml, +  <version>7.0.1</version>, +    <tag>butterknife-parent-7.0.1</tag>]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import android.content.Context;, +      if (requiresTheme()) {, +        result.addStatement("$T context = finder.getContext(source)", Context.class);, +        result.addStatement("$T res = context.getResources()", Resources.class);, +        result.addStatement("$T theme = context.getTheme()", Resources.Theme.class);, +      } else {, +      }, +        int tintAttributeId = binding.getTintAttributeId();, +        if (tintAttributeId != 0) {, +          result.addStatement("target.$L = $T.getTintedDrawable(res, theme, $L, $L)",, +              binding.getName(), UTILS, binding.getId(), tintAttributeId);, +        } else {, +          result.addStatement("target.$L = $T.getDrawable(res, theme, $L)", binding.getName(),, +              UTILS, binding.getId());, +        // TODO being themeable is poor correlation to the need to use Utils., +        if (binding.isThemeable()) {, +          result.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(),, +              UTILS, binding.getMethod(), binding.getId());, +        } else {, +, +  private boolean requiresTheme() {, +    if (!drawableBindings.isEmpty()) {, +      return true;, +    }, +    for (FieldResourceBinding resourceBinding : resourceBindings) {, +      if (resourceBinding.isThemeable()) {, +        return true;, +      }, +    }, +    return false;, +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import android.content.Context;, +      if (requiresTheme()) {, +        result.addStatement("$T context = finder.getContext(source)", Context.class);, +        result.addStatement("$T res = context.getResources()", Resources.class);, +        result.addStatement("$T theme = context.getTheme()", Resources.Theme.class);, +      } else {, +      }, +        int tintAttributeId = binding.getTintAttributeId();, +        if (tintAttributeId != 0) {, +          result.addStatement("target.$L = $T.getTintedDrawable(res, theme, $L, $L)",, +              binding.getName(), UTILS, binding.getId(), tintAttributeId);, +        } else {, +          result.addStatement("target.$L = $T.getDrawable(res, theme, $L)", binding.getName(),, +              UTILS, binding.getId());, +        // TODO being themeable is poor correlation to the need to use Utils., +        if (binding.isThemeable()) {, +          result.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(),, +              UTILS, binding.getMethod(), binding.getId());, +        } else {, +, +  private boolean requiresTheme() {, +    if (!drawableBindings.isEmpty()) {, +      return true;, +    }, +    for (FieldResourceBinding resourceBinding : resourceBindings) {, +      if (resourceBinding.isThemeable()) {, +        return true;, +      }, +    }, +    return false;, +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean", false);, +        isColorStateList ? "getColorStateList" : "getColor", true);, +        isInt ? "getDimensionPixelSize" : "getDimension", false);, +    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger", false);, +    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString", false);, +    FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName, false);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import android.content.Context;, +      if (requiresTheme()) {, +        result.addStatement("$T context = finder.getContext(source)", Context.class);, +        result.addStatement("$T res = context.getResources()", Resources.class);, +        result.addStatement("$T theme = context.getTheme()", Resources.Theme.class);, +      } else {, +      }, +        int tintAttributeId = binding.getTintAttributeId();, +        if (tintAttributeId != 0) {, +          result.addStatement("target.$L = $T.getTintedDrawable(res, theme, $L, $L)",, +              binding.getName(), UTILS, binding.getId(), tintAttributeId);, +        } else {, +          result.addStatement("target.$L = $T.getDrawable(res, theme, $L)", binding.getName(),, +              UTILS, binding.getId());, +        // TODO being themeable is poor correlation to the need to use Utils., +        if (binding.isThemeable()) {, +          result.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(),, +              UTILS, binding.getMethod(), binding.getId());, +        } else {, +, +  private boolean requiresTheme() {, +    if (!drawableBindings.isEmpty()) {, +      return true;, +    }, +    for (FieldResourceBinding resourceBinding : resourceBindings) {, +      if (resourceBinding.isThemeable()) {, +        return true;, +      }]
[+++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +package com.example.butterknife;, +, +import android.view.LayoutInflater;, +import android.view.View;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +, +import static com.example.butterknife.SimpleAdapter.ViewHolder;, +import static org.fest.assertions.api.ANDROID.assertThat;, +, +@RunWith(RobolectricTestRunner.class), +public class SimpleAdapterTest {, +  @Test public void verifyViewHolderViews() {, +    SimpleActivity activity = new SimpleActivity();, +, +    View root = LayoutInflater.from(activity).inflate(R.layout.simple_list_item, null);, +    ViewHolder holder = new ViewHolder(root);, +, +    assertThat(holder.word).hasId(R.id.word);, +    assertThat(holder.length).hasId(R.id.length);, +    assertThat(holder.position).hasId(R.id.position);, +  }, +}, +++ b/butterknife-sample/pom.xml, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.easytesting</groupId>, +      <artifactId>fest-assert-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.robolectric</groupId>, +      <artifactId>robolectric</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +package com.example.butterknife;, +, +import android.view.LayoutInflater;, +import android.view.View;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +]
[+++ b/.travis.yml, +    - build-tools-24.0.0, +    - android-24, +++ b/.travis.yml, +    - build-tools-24.0.0, +    - android-24, +++ b/build.gradle, +  targetSdkVersion = 24, +  compileSdkVersion = 24, +  buildToolsVersion = '24.0.0', +    supportv4: 'com.android.support:support-v4:24.0.0',, +    supportAnnotations: 'com.android.support:support-annotations:24.0.0',]
[+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified font resource ID., + * <pre><code>, + * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFont {, +  /** Font resource ID to which the field will be bound. */, +  /* TODO support lib 26.0.0: @FontRes */ int value();, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified font resource ID., + * <pre><code>, + * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFont {, +  /** Font resource ID to which the field will be bound. */, +  /* TODO support lib 26.0.0: @FontRes */ int value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  static final ClassName RESOURCES_COMPAT =, +      ClassName.get("android.support.v4.content.res", "ResourcesCompat");, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified font resource ID., + * <pre><code>, + * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFont {, +  /** Font resource ID to which the field will be bound. */, +  /* TODO support lib 26.0.0: @FontRes */ int value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  static final ClassName RESOURCES_COMPAT =, +      ClassName.get("android.support.v4.content.res", "ResourcesCompat");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.BindFont;, +  private static final String TYPEFACE_TYPE = "android.graphics.Typeface";, +    annotations.add(BindFont.class);, +    // Process each @BindFont element., +    for (Element element : env.getElementsAnnotatedWith(BindFont.class)) {, +      if (!SuperficialValidation.validateElement(element)) continue;, +      try {, +        parseResourceFont(element, builderMap, erasedTargetNames);, +      } catch (Exception e) {, +        logParsingError(element, BindFont.class, e);, +      }, +    }, +, +  private void parseResourceFont(Element element,, +      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {, +    boolean hasError = false;, +    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, +, +    // Verify that the target type is a Typeface., +    if (!TYPEFACE_TYPE.equals(element.asType().toString())) {, +      error(element, "@%s field type must be 'Typeface'. (%s.%s)",, +          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +    }, +, +    // Verify common generated code restrictions., +    hasError |= isInaccessibleViaGeneratedCode(BindFont.class, "fields", element);, +    hasError |= isBindingInWrongPackage(BindFont.class, element);, +, +    if (hasError) {, +      return;, +    }]
[+++ b/CHANGELOG.md, +Version 8.2.0 *(2016-07-10)*, +----------------------------, +, + * New: Support for library projects. Requires application of a Butter Knife Gradle plugin. See README for, +   details., + * New: Generated code now emits code using `R` references instead of raw integer IDs., + * Fix: `@OnPageChange` listner binding now uses the 'add'/'remove' methods on `ViewPager` instead of 'set'., +, +, +++ b/CHANGELOG.md, +Version 8.2.0 *(2016-07-10)*, +----------------------------, +, + * New: Support for library projects. Requires application of a Butter Knife Gradle plugin. See README for, +   details., + * New: Generated code now emits code using `R` references instead of raw integer IDs., + * Fix: `@OnPageChange` listner binding now uses the 'add'/'remove' methods on `ViewPager` instead of 'set'., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.2.0', +  apt 'com.jakewharton:butterknife-compiler:8.2.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.2.0', +++ b/CHANGELOG.md, +Version 8.2.0 *(2016-07-10)*, +----------------------------, +, + * New: Support for library projects. Requires application of a Butter Knife Gradle plugin. See README for, +   details., + * New: Generated code now emits code using `R` references instead of raw integer IDs., + * Fix: `@OnPageChange` listner binding now uses the 'add'/'remove' methods on `ViewPager` instead of 'set'., +, +, +++ b/README.md, +  compile 'com.jakewharton:butterknife:8.2.0', +  apt 'com.jakewharton:butterknife-compiler:8.2.0', +    classpath 'com.jakewharton:butterknife-gradle-plugin:8.2.0', +++ b/gradle.properties, +VERSION_NAME=8.2.0]
[+++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/internal/Binding.java, +/** A field or method view injection binding. */, +  /** A description of the binding in human readable form (e.g., "field 'foo'"). */, +  /** False if the {@link butterknife.Optional @Optional} annotation is present on the binding. */, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/internal/Binding.java, +/** A field or method view injection binding. */, +  /** A description of the binding in human readable form (e.g., "field 'foo'"). */, +  /** False if the {@link butterknife.Optional @Optional} annotation is present on the binding. */, +++ b/butterknife/src/main/java/butterknife/internal/FieldBinding.java, +final class FieldBinding implements Binding {, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/internal/Binding.java, +/** A field or method view injection binding. */, +  /** A description of the binding in human readable form (e.g., "field 'foo'"). */, +  /** False if the {@link butterknife.Optional @Optional} annotation is present on the binding. */, +++ b/butterknife/src/main/java/butterknife/internal/FieldBinding.java, +final class FieldBinding implements Binding {, +++ b/butterknife/src/main/java/butterknife/internal/InjectViewProcessor.java, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.util.Arrays;, +import java.util.BitSet;, +public final class InjectViewProcessor extends AbstractProcessor {, +  private static final Map<Class<?>, Listener> LISTENER_MAP =, +      new LinkedHashMap<Class<?>, Listener>();, +    Map<TypeElement, ViewInjector> targetClassMap = findAndParseTargets(env);, +    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {, +      ViewInjector viewInjector = entry.getValue();, +        JavaFileObject jfo = filer.createSourceFile(viewInjector.getFqcn(), typeElement);, +        writer.write(viewInjector.brewJava());, +  private Map<TypeElement, ViewInjector> findAndParseTargets(RoundEnvironment env) {, +    Map<TypeElement, ViewInjector> targetClassMap = new LinkedHashMap<TypeElement, ViewInjector>();, +    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {, +  private boolean isValidForGeneratedCode(Class<? extends Annotation> annotationClass,, +      String targetThing, Element element) {, +    boolean hasError = false;, +    // Verify method modifiers., +    Set<Modifier> modifiers = element.getModifiers();, +    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {, +      error(element, "@%s %s must not be private or static. (%s.%s)",, +          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)",, +          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",, +          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +    }, +, +    return hasError;, +  }, +, +  private void parseInjectView(Element element, Map<TypeElement, ViewInjector> targetClassMap,, +      Set<TypeMirror> erasedTargetTypes) {, +    boolean hasError = false;, +    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, +, +    // Verify that the target type extends from View., +    if (!isSubtypeOfType(element.asType(), VIEW_TYPE)) {, +      error(element, "@InjectView fields must extend from View (%s.%s).",, +          enclosingElement.getQualifiedName(), element.getSimpleName());]
[+++ b/butterknife-sample/res/layout/simple_activity.xml, +      android:layout_margin="10dp", +      />, +  <ListView, +      android:id="@+id/list_of_things", +      android:layout_width="match_parent", +      android:layout_height="0dp", +      android:layout_weight="1", +      android:layout_margin="10dp", +++ b/butterknife-sample/res/layout/simple_activity.xml, +      android:layout_margin="10dp", +      />, +  <ListView, +      android:id="@+id/list_of_things", +      android:layout_width="match_parent", +      android:layout_height="0dp", +      android:layout_weight="1", +      android:layout_margin="10dp", +++ b/butterknife-sample/res/layout/simple_list_item.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android", +    android:layout_width="match_parent", +    android:layout_height="match_parent", +    android:orientation="vertical">, +  <TextView, +      android:id="@+id/word", +      android:layout_width="match_parent", +      android:layout_height="wrap_content", +      />, +  <TextView, +      android:id="@+id/length", +      android:layout_width="match_parent", +      android:layout_height="wrap_content", +      />, +  <TextView, +      android:id="@+id/position", +      android:layout_width="match_parent", +      android:layout_height="wrap_content", +      />, +</LinearLayout>, +++ b/butterknife-sample/res/layout/simple_activity.xml, +      android:layout_margin="10dp", +      />, +  <ListView, +      android:id="@+id/list_of_things", +      android:layout_width="match_parent", +      android:layout_height="0dp", +      android:layout_weight="1", +      android:layout_margin="10dp", +++ b/butterknife-sample/res/layout/simple_list_item.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android", +    android:layout_width="match_parent", +    android:layout_height="match_parent", +    android:orientation="vertical">, +  <TextView, +      android:id="@+id/word", +      android:layout_width="match_parent", +      android:layout_height="wrap_content", +      />, +  <TextView, +      android:id="@+id/length", +      android:layout_width="match_parent", +      android:layout_height="wrap_content", +      />, +  <TextView, +      android:id="@+id/position", +      android:layout_width="match_parent", +      android:layout_height="wrap_content", +      />, +</LinearLayout>, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.widget.ListView;, +  @InjectView(R.id.list_of_things) ListView listOfThings;, +    listOfThings.setAdapter(new SimpleAdapter(this));, +++ b/butterknife-sample/res/layout/simple_activity.xml, +      android:layout_margin="10dp", +      />, +  <ListView, +      android:id="@+id/list_of_things", +      android:layout_width="match_parent", +      android:layout_height="0dp", +      android:layout_weight="1", +      android:layout_margin="10dp", +++ b/butterknife-sample/res/layout/simple_list_item.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android", +    android:layout_width="match_parent", +    android:layout_height="match_parent", +    android:orientation="vertical">, +  <TextView, +      android:id="@+id/word", +      android:layout_width="match_parent", +      android:layout_height="wrap_content", +      />, +  <TextView, +      android:id="@+id/length"]
[+++ b/CHANGELOG.md, +Version 5.0.0 *(In Development)*, +--------------------------------, +, + * New: `@InjectViews` annotation groups multiple IDs into a `List` or array., + * New: `ButterKnife.apply` method applies a `Property` or `ButterKnife.Action` to views in a list., + * Fix: Support for generic types which are declared with an upper-bound., + * Fix: Use less sophisticated method injection inspection in the annotation processor. The previous, +   method caused problems with some Eclipse configurations., +, +, +++ b/CHANGELOG.md, +Version 5.0.0 *(In Development)*, +--------------------------------, +, + * New: `@InjectViews` annotation groups multiple IDs into a `List` or array., + * New: `ButterKnife.apply` method applies a `Property` or `ButterKnife.Action` to views in a list., + * Fix: Support for generic types which are declared with an upper-bound., + * Fix: Use less sophisticated method injection inspection in the annotation processor. The previous, +   method caused problems with some Eclipse configurations., +, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +            + " was not found. If thie view is optional add '@Optional' annotation.");]
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");, +++ b/butterknife/src/main/java/butterknife/internal/Utils.java, +  @SuppressWarnings("unchecked") // That's the point., +  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {, +      return (T) value;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");, +++ b/butterknife/src/main/java/butterknife/internal/Utils.java, +  @SuppressWarnings("unchecked") // That's the point., +  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {, +      return (T) value;, +++ b/butterknife/src/test/java/butterknife/OnClickTest.java, +        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n", +        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n", +        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");, +++ b/butterknife/src/main/java/butterknife/internal/Utils.java, +  @SuppressWarnings("unchecked") // That's the point., +  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {, +      return (T) value;, +++ b/butterknife/src/test/java/butterknife/OnClickTest.java, +        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n", +        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n", +        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n", +++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java, +        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n", +        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");, +++ b/butterknife/src/main/java/butterknife/internal/Utils.java, +  @SuppressWarnings("unchecked") // That's the point., +  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {, +      return (T) value;, +++ b/butterknife/src/test/java/butterknife/OnClickTest.java, +        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n", +        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n", +        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n", +++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java, +        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n", +        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n", +++ /dev/null]
