[+++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking how to use EventBus in a specific scenario, +* Your app crashes/misbehaves and you are not sure why, +, +The perfect Issue Report, +------------------------, +A couple of simple steps can save time for everyone., +, +Check before reporting:, +, +* It's not a support inquiry, +* You have read the docs, +* You searched the web and stackoverflow, +* You searched existing issues to avoid duplicates, +, +Reporting bugs:, +, + * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?, + * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug., +, +Requesting features:, +, + * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy., +, +A Note on Pull Requests, +=======================, +Pull requests (and issue) may queue up up a bit. Usually, pull requests and issues are checked when new releases are planned., +, +For bigger pull requests, it's a good idea to check with the maintainer upfront about the idea and the implementation outline., +, +Thanks for reading!, +===================, +It's your contributions and feedback that makes maintaining this library fun., +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking how to use EventBus in a specific scenario, +* Your app crashes/misbehaves and you are not sure why, +, +The perfect Issue Report, +------------------------, +A couple of simple steps can save time for everyone., +, +Check before reporting:, +, +* It's not a support inquiry, +* You have read the docs, +* You searched the web and stackoverflow, +* You searched existing issues to avoid duplicates, +, +Reporting bugs:, +, + * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?, + * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug., +, +Requesting features:, +, + * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy., +, +A Note on Pull Requests, +=======================, +Pull requests (and issue) may queue up up a bit. Usually, pull requests and issues are checked when new releases are planned., +, +For bigger pull requests, it's a good idea to check with the maintainer upfront about the idea and the implementation outline., +, +Thanks for reading!, +===================, +It's your contributions and feedback that makes maintaining this library fun., +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/.travis.yml, +    - build-tools-21.1.2]
[+++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * Copyright (C) 2012-2015 Markus Junginger, greenrobot (http://greenrobot.de), + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +    private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<>();, +        subscriptionsByEventType = new HashMap<>();, +        typesBySubscriber = new HashMap<>();, +        stickyEvents = new ConcurrentHashMap<>();, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes,, +                builder.strictMethodVerification, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +        synchronized (this) {, +                subscribe(subscriber, subscriberMethod);, +            }, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +            subscriptions = new CopyOnWriteArrayList<>();, +            if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +            subscribedEvents = new ArrayList<>();, +        if (subscriberMethod.sticky) {, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#POSTING}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +            case POSTING:, +            case MAIN:, +            case BACKGROUND:, +            case ASYNC:, +    private static List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {, +                eventTypes = new ArrayList<>();, +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +]
[+++ b/COMPARISON.md, +        <th>Asynchronous event delivery</th>, +++ b/COMPARISON.md, +        <th>Asynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/COMPARISON.md, +        <th>Asynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    public static String TAG = "Event";, +, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +        register(subscriber, false, 0);, +    }, +    /**, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!, +     */, +    public void register(Object subscriber, int priority) {, +        register(subscriber, false, priority);, +    }, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber) {, +        register(subscriber, true, 0);, +    }, +, +    /**, +     * Like {@link #register(Object, int)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber, int priority) {, +        register(subscriber, true, priority);, +    }, +, +    private synchronized void register(Object subscriber, boolean sticky, int priority) {, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +            subscribe(subscriber, subscriberMethod, sticky, priority);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);, +            if (i == size || newSubscription.priority > subscriptions.get(i).priority) {, +        if (sticky) {, +    private void unubscribeByEventType(Object subscriber, Class<?> eventType) {, +                unubscribeByEventType(subscriber, eventType);, +     * {@link #register(Object, int)}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access. This can be {@link #registerSticky(Object)} or, +     * {@link #getStickyEvent(Class)}., +++ b/COMPARISON.md, +        <th>Asynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    public static String TAG = "Event";, +, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +        register(subscriber, false, 0);, +    }, +    /**, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!, +     */, +    public void register(Object subscriber, int priority) {, +        register(subscriber, false, priority);, +    }, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber) {, +        register(subscriber, true, 0);, +    }, +, +    /**, +     * Like {@link #register(Object, int)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */]
[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, +                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, +                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import java.util.logging.Level;, +    private final Logger logger;, +        logger = builder.initLogger();, +            logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());, +                logger.log(Level.FINE, "No subscribers registered for event " + eventClass);, +                logger.log(Level.SEVERE, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                logger.log(Level.SEVERE, "Initial event " + exEvent.causingEvent + " caused exception in ", +                logger.log(Level.SEVERE, "Could not dispatch event: " + event.getClass() + " to subscribing class ", +    /**, +     * For internal use only., +     */, +    public Logger getLogger() {, +        return logger;, +    }, +, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, +                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import java.util.logging.Level;, +    private final Logger logger;, +        logger = builder.initLogger();, +            logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());, +                logger.log(Level.FINE, "No subscribers registered for event " + eventClass);, +                logger.log(Level.SEVERE, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                logger.log(Level.SEVERE, "Initial event " + exEvent.causingEvent + " caused exception in ", +                logger.log(Level.SEVERE, "Could not dispatch event: " + event.getClass() + " to subscribing class ", +    /**, +     * For internal use only., +     */, +    public Logger getLogger() {, +        return logger;, +    }, +, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +    Logger logger;, +     * <p/>, +    public EventBusBuilder logger(Logger logger) {, +        this.logger = logger;, +    Logger initLogger() {, +        if (logger != null) {, +            return logger;, +        } else {, +            return Logger.AndroidLogger.isAndroidLogAvailable() ? new Logger.AndroidLogger("EventBus") :, +                    new Logger.SystemOutLogger();, +        }, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, +                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import java.util.logging.Level;, +    private final Logger logger;, +        logger = builder.initLogger();, +            logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());, +                logger.log(Level.FINE, "No subscribers registered for event " + eventClass);, +                logger.log(Level.SEVERE, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                logger.log(Level.SEVERE, "Initial event " + exEvent.causingEvent + " caused exception in ", +                logger.log(Level.SEVERE, "Could not dispatch event: " + event.getClass() + " to subscribing class ", +    /**, +     * For internal use only., +     */, +    public Logger getLogger() {, +        return logger;, +    }, +, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +    Logger logger;, +     * <p/>, +    public EventBusBuilder logger(Logger logger) {, +        this.logger = logger;, +    Logger initLogger() {, +        if (logger != null) {, +            return logger;, +        } else {, +            return Logger.AndroidLogger.isAndroidLogAvailable() ? new Logger.AndroidLogger("EventBus") :, +                    new Logger.SystemOutLogger();, +        }, +++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +package org.greenrobot.eventbus;, +, +import android.util.Log;, +, +import java.util.logging.Level;, +, +public interface Logger {, +, +    void log(Level level, String msg);, +]
[+++ b/EventBus/.gitignore, +/gradle.properties, +++ b/EventBus/.gitignore, +/gradle.properties, +++ b/EventBus/build.gradle, +apply plugin: 'maven', +apply plugin: 'signing', +group = 'de.greenrobot', +version = '2.1.0-beta-1', +def isSnapshot = version.endsWith('-SNAPSHOT'), +def sonatypeRepositoryUrl, +if(isSnapshot) {, +	sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/", +} else {, +	sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/", +}, +, +    compile('com.google.android:android:4.1.1.4'), +    compile('com.google.android:android-test:4.1.1.4'), +javadoc {, +    title = "EventBus ${version} API", +	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2013 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>', +}, +, +, +signing {, +    sign configurations.archives, +}, +, +uploadArchives {, +    repositories {, +        mavenDeployer {, +            // if(! isSnapshot) {, +                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }, +            // }, +, +            repository(url: sonatypeRepositoryUrl) {, +              authentication(userName: sonatypeUsername, password: sonatypePassword), +            }, +, +            pom.project {, +               name 'EventBus', +               packaging 'jar', +               description 'EventBus is an Android optimized publish/subscribe event bus.', +               url 'https://plus.google.com/b/114381455741141514652/communities/114594359857596138845/stream/2f784373-19d9-4a0d-840f-787794a410bc', +, +               scm {, +                   url 'https://github.com/greenrobot/EventBus', +                   connection 'scm:git@github.com:greenrobot/EventBus.git', +                   developerConnection 'scm:git@github.com:greenrobot/EventBus.git', +               }, +, +               licenses {, +                   license {, +                       name 'The Apache Software License, Version 2.0', +                       url 'http://www.apache.org/licenses/LICENSE-2.0.txt', +                       distribution 'repo', +                   }, +               }, +, +               developers {, +                   developer {, +                       id 'greenrobot', +                       name 'greenrobot', +                   }, +               }, +               , +               issueManagement {, +                   system 'GitHub Issues', +                   url 'https://github.com/greenrobot/EventBus/issues', +               }, +               , +               organization {, +                   name 'greenrobot', +                   url 'http://greenrobot.de', +               }, +           }, +        }, +    }, +}, +++ b/EventBus/.gitignore, +/gradle.properties, +++ b/EventBus/build.gradle, +apply plugin: 'maven', +apply plugin: 'signing', +group = 'de.greenrobot', +version = '2.1.0-beta-1', +def isSnapshot = version.endsWith('-SNAPSHOT'), +def sonatypeRepositoryUrl, +if(isSnapshot) {, +	sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/", +} else {, +	sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/", +}, +, +    compile('com.google.android:android:4.1.1.4'), +    compile('com.google.android:android-test:4.1.1.4'), +javadoc {, +    title = "EventBus ${version} API", +	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2013 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>']
[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    private final boolean ignoreGeneratedIndex;, +    SubscriberMethodFinder(boolean strictMethodVerification, boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        if (!ignoreGeneratedIndex && INDEX != null && !forceReflection) {, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    private final boolean ignoreGeneratedIndex;, +    SubscriberMethodFinder(boolean strictMethodVerification, boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        if (!ignoreGeneratedIndex && INDEX != null && !forceReflection) {, +++ b/EventBusPerformance/res/layout/activity_setuptests.xml, +                android:id="@+id/checkBoxEventBusIgnoreGeneratedIndex", +                android:layout_width="wrap_content", +                android:layout_height="wrap_content", +                android:onClick="checkEventBus", +                android:layout_marginLeft="48dp", +                android:text="@string/test_eventBusEventIgnoreGeneratedIndex" />, +, +            <CheckBox, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    private final boolean ignoreGeneratedIndex;, +    SubscriberMethodFinder(boolean strictMethodVerification, boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;]
[+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java, +        if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {, +            SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();, +            Class<?> methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);, +++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java, +        if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {, +            SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();, +            Class<?> methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);, +++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java, +    public SubscriberInfo getSuperSubscriberInfo() {, +        if(superSubscriberInfoClass == null) {, +            return null;, +        }, +        try {, +            return superSubscriberInfoClass.newInstance();, +        } catch (InstantiationException | IllegalAccessException e) {, +            throw new RuntimeException(e);, +        }, +++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java, +        if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {, +            SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();, +            Class<?> methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);, +++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java, +    public SubscriberInfo getSuperSubscriberInfo() {, +        if(superSubscriberInfoClass == null) {, +            return null;, +        }, +        try {, +            return superSubscriberInfoClass.newInstance();, +        } catch (InstantiationException | IllegalAccessException e) {, +            throw new RuntimeException(e);, +        }, +++ b/EventBus/src/org/greenrobot/eventbus/meta/SubscriberInfo.java, +    SubscriberInfo getSuperSubscriberInfo();]
[+++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +    static final Class[] TEST_CLASSES_EVENTBUS = { TestEventBus.Post.class,//, +            TestEventBus.RegisterOneByOne.class,//, +            TestEventBus.RegisterAll.class //, +    };, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +    static final Class[] TEST_CLASSES_EVENTBUS = { TestEventBus.Post.class,//, +            TestEventBus.RegisterOneByOne.class,//, +            TestEventBus.RegisterAll.class //, +    };, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/TestEventBus.java, +import android.os.SystemClock;, +    public static class RegisterAll extends TestEventBus {, +        public RegisterAll(Context context, TestParams params) {, +            primaryResultCount = params.getSubscriberCount();, +        }, +, +        @Override, +        public String getDisplayName() {, +            return "EventBus Register Subscribers";, +        }, +    }, +, +    public static class RegisterOneByOne extends TestEventBus {, +        public RegisterOneByOne(Context context, TestParams params) {, +            super(context, params);, +        }, +, +        public void runTest() {, +            long time = 0;, +            for (Object subscriber : super.subscribers) {, +                long beforeRegister = System.nanoTime();, +                super.eventBus.register(subscriber);, +                long timeRegister = System.nanoTime() - beforeRegister;, +                time += timeRegister;, +                super.eventBus.unregister(subscriber);, +                if (canceled) {, +                    return;, +                }, +            }, +, +            primaryResultMillis = time / 1000000;, +            primaryResultCount = params.getSubscriberCount();]
[+++ b/EventBusPerformance/res/values/strings.xml, +        <item>MAIN_ORDERED</item>, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>MAIN_ORDERED</item>, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java, +        textViewResult = findViewById(R.id.textViewResult);, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>MAIN_ORDERED</item>, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java, +        textViewResult = findViewById(R.id.textViewResult);, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java, +        Spinner spinnerRun = findViewById(R.id.spinnerTestToRun);, +        Spinner spinnerThread = findViewById(R.id.spinnerThread);, +        CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);, +        Spinner spinnerThread = findViewById(R.id.spinnerThread);, +        EditText editTextEvent = findViewById(R.id.editTextEvent);, +        EditText editTextSubscriber = findViewById(R.id.editTextSubscribe);, +        Spinner spinnerTestToRun = findViewById(R.id.spinnerTestToRun);, +        final CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);, +        final CheckBox checkBoxOtto = findViewById(R.id.checkBoxOtto);, +        final CheckBox checkBoxBroadcast = findViewById(R.id.checkBoxBroadcast);, +        final CheckBox checkBoxLocalBroadcast = findViewById(R.id.checkBoxLocalBroadcast);, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>MAIN_ORDERED</item>, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java, +        textViewResult = findViewById(R.id.textViewResult);, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java, +        Spinner spinnerRun = findViewById(R.id.spinnerTestToRun);, +        Spinner spinnerThread = findViewById(R.id.spinnerThread);, +        CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);, +        Spinner spinnerThread = findViewById(R.id.spinnerThread);, +        EditText editTextEvent = findViewById(R.id.editTextEvent);, +        EditText editTextSubscriber = findViewById(R.id.editTextSubscribe);, +        Spinner spinnerTestToRun = findViewById(R.id.spinnerTestToRun);, +        final CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);, +        final CheckBox checkBoxOtto = findViewById(R.id.checkBoxOtto);, +        final CheckBox checkBoxBroadcast = findViewById(R.id.checkBoxBroadcast);, +        final CheckBox checkBoxLocalBroadcast = findViewById(R.id.checkBoxLocalBroadcast);, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/testsubject/PerfTestEventBus.java, +            case MAIN_ORDERED:, +                return SubscribeClassEventBusMainOrdered.class;, +    public class SubscribeClassEventBusMainOrdered {, +        @Subscribe(threadMode = ThreadMode.MAIN_ORDERED), +        public void onEvent(TestEvent event) {, +            eventsReceivedCount.incrementAndGet();, +        }, +, +        public void dummy() {, +        }, +, +        public void dummy2() {, +        }, +, +        public void dummy3() {, +        }, +, +        public void dummy4() {, +        }, +, +        public void dummy5() {, +        }, +    }, +]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers receive events until the call of {@link #unregister(Object)}. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {, +        protected PostingThreadState initialValue() {, +            return new PostingThreadState();, +     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor, +     * abstract)., +    public static void skipMethodVerificationFor(Class<?> clazz) {, +        SubscriberMethodFinder.skipMethodVerificationFor(clazz);, +        SubscriberMethodFinder.clearSkipMethodVerifications();, +        register(subscriber, defaultMethodName, false, 0);, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!]
[+++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +, +# Eclipse project files, +.settings/, +, +# Misc, +.DS_Store, +++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +, +# Eclipse project files, +.settings/, +, +# Misc, +.DS_Store, +++ b/.travis.yml, +    - build-tools-23.0.1, +++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +, +# Eclipse project files, +.settings/, +, +# Misc, +.DS_Store, +++ b/.travis.yml, +    - build-tools-23.0.1, +++ b/EventBusPerformance/build.gradle, +        jcenter(), +        classpath 'com.android.tools.build:gradle:1.3.1', +    jcenter(), +    buildToolsVersion '23.0.1', +++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +]
[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private HandlerPoster mainThreadPoster;, +        mainThreadPoster = new HandlerPoster(Looper.getMainLooper(), 10);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private HandlerPoster mainThreadPoster;, +        mainThreadPoster = new HandlerPoster(Looper.getMainLooper(), 10);, +++ b/EventBus/src/de/greenrobot/event/HandlerPoster.java, +/*, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event;, +, +import android.os.Handler;, +import android.os.Looper;, +import android.os.Message;, +import android.os.SystemClock;, +, +final class HandlerPoster extends Handler {, +, +    private final PendingPostQueue queue;, +    private final int maxMillisInsideHandleMessage;, +    private boolean handlerActive;, +, +    HandlerPoster(Looper looper, int maxMillisInsideHandleMessage) {, +        super(looper);, +        this.maxMillisInsideHandleMessage = maxMillisInsideHandleMessage;, +        queue = new PendingPostQueue();, +    }, +, +    void enqueue(Subscription subscription, Object event) {, +        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);, +        synchronized (this) {, +            queue.enqueue(pendingPost);, +            if (!handlerActive) {, +                handlerActive = true;, +                if (!sendMessage(obtainMessage())) {, +                    throw new EventBusException("Could not send handler message");, +                }, +            }, +        }, +    }, +, +    @Override, +    public void handleMessage(Message msg) {, +        boolean rescheduled = false;, +        try {, +            long started = SystemClock.uptimeMillis();, +            while (true) {, +                PendingPost pendingPost = queue.poll();, +                if (pendingPost == null) {, +                    synchronized (this) {, +                        // Check again, this time in synchronized, +                        pendingPost = queue.poll();, +                        if (pendingPost == null) {, +                            handlerActive = false;, +                            return;, +                        }, +                    }, +                }, +                EventBus.invokeSubscriber(pendingPost);, +                long timeInMethod = SystemClock.uptimeMillis() - started;, +                if (timeInMethod >= maxMillisInsideHandleMessage) {, +                    if (!sendMessage(obtainMessage())) {, +                        throw new EventBusException("Could not send handler message");, +                    }, +                    rescheduled = true;, +                    return;, +                }, +            }, +        } finally {, +            handlerActive = rescheduled;, +        }, +    }, +}, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private HandlerPoster mainThreadPoster;, +        mainThreadPoster = new HandlerPoster(Looper.getMainLooper(), 10);, +++ b/EventBus/src/de/greenrobot/event/HandlerPoster.java, +/*, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software]
[+++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +, +# Eclipse project files, +.settings/, +, +# Misc, +.DS_Store, +++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +, +# Eclipse project files, +.settings/, +, +# Misc, +.DS_Store, +++ b/.travis.yml, +sudo: false, +    - build-tools-21.1.2, +++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +, +# Eclipse project files, +.settings/, +, +# Misc, +.DS_Store, +++ b/.travis.yml, +sudo: false, +    - build-tools-21.1.2, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking how to use EventBus in a specific scenario, +* Your app crashes/misbehaves and you are not sure why, +, +The perfect Issue Report, +------------------------, +A couple of simple steps can save time for everyone.]
[+++ b/EventBus/.gitignore, +/release, +++ b/EventBus/.gitignore, +/release, +++ b/EventBus/mybuild.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project name="greenrobot EventBus" default="build-jar">, +, +	<target name="build-jar" description="Depends on Eclipse to have everything compiled into bin/">, +		<mkdir dir="release" />, +		<jar jarfile="release/eventbus.jar">, +			<fileset dir="bin/classes">, +				<include name="de/greenrobot/**" />, +			</fileset>, +		</jar>, +	</target>, +, +</project>]
[+++ b/EventBusTest/AndroidManifest.xml, +    xmlns:tools="http://schemas.android.com/tools", +    package="org.greenrobot.eventbus">, +        android:label="EventBus Test", +        tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">, +++ b/EventBusTest/AndroidManifest.xml, +    xmlns:tools="http://schemas.android.com/tools", +    package="org.greenrobot.eventbus">, +        android:label="EventBus Test", +        tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">, +++ b/EventBusTest/build.gradle, +        minSdkVersion 8, +        targetSdkVersion 25, +        versionCode 1, +        versionName "1.0", +]
[+++ b/.travis.yml, +    - build-tools-23.0.1, +++ b/.travis.yml, +    - build-tools-23.0.1, +++ b/EventBusPerformance/build.gradle, +    buildToolsVersion '23.0.1', +++ b/.travis.yml, +    - build-tools-23.0.1, +++ b/EventBusPerformance/build.gradle, +    buildToolsVersion '23.0.1', +++ b/EventBusTest/build.gradle, +    buildToolsVersion '23.0.1']
[+++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking how to use EventBus in a specific scenario, +* Your app crashes/misbehaves and you are not sure why, +, +The perfect Issue Report, +------------------------, +A couple of simple steps can save time for everyone., +, +Check before reporting:, +, +* It's not a support inquiry, +* You have read the docs, +* You searched the web and stackoverflow, +* You searched existing issues to avoid duplicates, +, +Reporting bugs:, +, + * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?, + * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug., +, +Requesting features:, +, + * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy., +, +A Note on Pull Requests, +=======================, +Pull requests (and issue) may queue up up a bit. Usually, pull requests and issues are checked when new releases are planned., +, +For bigger pull requests, it's a good idea to check with the maintainer upfront about the idea and the implementation outline., +, +Thanks for reading!, +===================, +It's your contributions and feedback that makes maintaining this library fun., +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking how to use EventBus in a specific scenario, +* Your app crashes/misbehaves and you are not sure why, +, +The perfect Issue Report, +------------------------, +A couple of simple steps can save time for everyone., +, +Check before reporting:, +, +* It's not a support inquiry, +* You have read the docs, +* You searched the web and stackoverflow, +* You searched existing issues to avoid duplicates, +, +Reporting bugs:, +, + * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?, + * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug., +, +Requesting features:, +, + * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy., +, +A Note on Pull Requests, +=======================, +Pull requests (and issue) may queue up up a bit. Usually, pull requests and issues are checked when new releases are planned., +, +For bigger pull requests, it's a good idea to check with the maintainer upfront about the idea and the implementation outline., +, +Thanks for reading!, +===================, +It's your contributions and feedback that makes maintaining this library fun., +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +, +            pom.artifactId = 'eventbus']
[+++ b/EventBusTest/AndroidManifest.xml]
[+++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    public static String TAG = "Event";, +    private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();, +, +        subscriptionsByEventType = new HashMap<Class<?>, CopyOnWriteArrayList<Subscription>>();, +        typesBySubscriber = new HashMap<Object, List<Class<?>>>();, +        stickyEvents = new ConcurrentHashMap<Class<?>, Object>();, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +, +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +        register(subscriber, false, 0);, +, +    /**, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!, +     */, +    public void register(Object subscriber, int priority) {, +        register(subscriber, false, priority);, +    }, +, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber) {, +        register(subscriber, true, 0);, +    }, +, +    /**, +     * Like {@link #register(Object, int)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber, int priority) {, +        register(subscriber, true, priority);, +    }, +, +    private synchronized void register(Object subscriber, boolean sticky, int priority) {, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +        for (SubscriberMethod subscriberMethod : subscriberMethods) {, +            subscribe(subscriber, subscriberMethod, sticky, priority);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);, +            subscriptions = new CopyOnWriteArrayList<Subscription>();, +        // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again), +        // subscriberMethod.method.setAccessible(true);, +, +            if (i == size || newSubscription.priority > subscriptions.get(i).priority) {, +            subscribedEvents = new ArrayList<Class<?>>();, +        if (sticky) {, +     * {@link #register(Object, int)}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#PostThread}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.PostThread) {, +     * event of an event's type is kept in memory for future access. This can be {@link #registerSticky(Object)} or, +     * {@link #getStickyEvent(Class)}., +            case PostThread:, +            case MainThread:, +            case BackgroundThread:, +            case Async:, +    private List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {, +                eventTypes = new ArrayList<Class<?>>();, +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    public static String TAG = "Event";, +    private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();, +, +        subscriptionsByEventType = new HashMap<Class<?>, CopyOnWriteArrayList<Subscription>>();, +        typesBySubscriber = new HashMap<Object, List<Class<?>>>();]
[+++ b/EventBusTestJava/build.gradle, +    compile(project(':EventBus')) {, +        exclude group: "com.google.android" // Does not seem to work..., +    }, +++ b/EventBusTestJava/build.gradle, +    compile(project(':EventBus')) {, +        exclude group: "com.google.android" // Does not seem to work..., +    }, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java, +/*, + * Copyright (C) 2012-2017 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus;, +, +import org.junit.Before;, +, +import java.util.List;, +import java.util.concurrent.CopyOnWriteArrayList;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +/**, + * @author Markus Junginger, greenrobot, + */, +public abstract class AbstractEventBusTest {, +    /** Activates long(er) running tests e.g. testing multi-threading more thoroughly.  */, +    protected static final boolean LONG_TESTS = false;, +, +    protected EventBus eventBus;, +, +    protected final AtomicInteger eventCount = new AtomicInteger();, +    protected final List<Object> eventsReceived;, +, +    protected volatile Object lastEvent;, +    protected volatile Thread lastThread;, +, +    public AbstractEventBusTest() {, +        this(false);, +    }, +, +    public AbstractEventBusTest(boolean collectEventsReceived) {, +        if (collectEventsReceived) {, +            eventsReceived = new CopyOnWriteArrayList<Object>();, +        } else {, +            eventsReceived = null;, +        }, +    }, +, +    @Before, +    public void setUpBase() throws Exception {, +        EventBus.clearCaches();, +        eventBus = new EventBus();, +    }, +, +    protected void waitForEventCount(int expectedCount, int maxMillis) {, +        for (int i = 0; i < maxMillis; i++) {, +            int currentCount = eventCount.get();, +            if (currentCount == expectedCount) {, +                break;, +            } else if (currentCount > expectedCount) {, +                fail("Current count (" + currentCount + ") is already higher than expected count (" + expectedCount, +                        + ")");, +            } else {, +                try {, +                    Thread.sleep(1);, +                } catch (InterruptedException e) {, +                    throw new RuntimeException(e);, +                }, +            }, +        }, +        assertEquals(expectedCount, eventCount.get());, +    }, +, +    protected void trackEvent(Object event) {, +        lastEvent = event;, +        lastThread = Thread.currentThread();, +        if (eventsReceived != null) {, +            eventsReceived.add(event);, +        }, +        // Must the the last one because we wait for this, +        eventCount.incrementAndGet();, +    }]
[+++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.PerfTestEventBus;, +    static final Class[] TEST_CLASSES_EVENTBUS = { PerfTestEventBus.Post.class,//, +            PerfTestEventBus.RegisterOneByOne.class,//, +            PerfTestEventBus.RegisterAll.class, //, +            PerfTestEventBus.RegisterFirstTime.class };, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.PerfTestEventBus;, +    static final Class[] TEST_CLASSES_EVENTBUS = { PerfTestEventBus.Post.class,//, +            PerfTestEventBus.RegisterOneByOne.class,//, +            PerfTestEventBus.RegisterAll.class, //, +            PerfTestEventBus.RegisterFirstTime.class };, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java, +package de.greenrobot.eventperf.testsubject;, +, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +, +import android.content.Context;, +import de.greenrobot.event.EventBus;, +import de.greenrobot.eventperf.Test;, +import de.greenrobot.eventperf.TestEvent;, +import de.greenrobot.eventperf.TestParams;, +, +public abstract class PerfTestEventBus extends Test {, +, +    private final EventBus eventBus;, +    private final ArrayList<Object> subscribers;, +    private final Class<?> subscriberClass;, +    private final int eventCount;, +    private final int expectedEventCount;, +, +    public PerfTestEventBus(Context context, TestParams params) {, +        super(context, params);, +        eventBus = new EventBus();, +        subscribers = new ArrayList<Object>();, +        eventCount = params.getEventCount();, +        expectedEventCount = eventCount * params.getSubscriberCount();, +        subscriberClass = getSubscriberClassForThreadMode();, +    }, +, +    @Override, +    public void prepareTest() {, +        try {, +            Constructor<?> constructor = subscriberClass.getConstructor(PerfTestEventBus.class);, +            for (int i = 0; i < params.getSubscriberCount(); i++) {, +                Object subscriber = constructor.newInstance(this);, +                subscribers.add(subscriber);, +            }, +        } catch (Exception e) {, +            throw new RuntimeException(e);, +        }, +    }, +, +    private Class<?> getSubscriberClassForThreadMode() {, +        switch (params.getThreadMode()) {, +        case MainThread:, +            return SubscribeClassEventBusMain.class;, +        case BackgroundThread:, +            return SubscribeClassEventBusBackground.class;, +        case Async:, +            return SubscriberClassEventBusAsync.class;, +        case PostThread:, +            return SubscribeClassEventBusDefault.class;, +        default:, +            throw new RuntimeException("Unknown: " + params.getThreadMode());, +        }, +    }, +, +    public static class Post extends PerfTestEventBus {, +        public Post(Context context, TestParams params) {, +            super(context, params);, +        }, +, +        @Override, +        public void prepareTest() {, +            super.prepareTest();, +            super.registerSubscribers();, +        }, +, +        public void runTest() {, +            long timeStart = System.nanoTime();, +            for (int i = 0; i < super.eventCount; i++) {, +                super.eventBus.post(new TestEvent());, +                if (canceled) {, +                    break;, +                }, +            }, +            long timeAfterPosting = System.nanoTime();, +            waitForReceivedEventCount(super.expectedEventCount);, +            long timeAllReceived = System.nanoTime();, +, +            primaryResultMicros = (timeAfterPosting - timeStart) / 1000;, +            primaryResultCount = super.expectedEventCount;, +            long deliveredMicros = (timeAllReceived - timeStart) / 1000;, +            int deliveryRate = (int) (primaryResultCount / (deliveredMicros / 1000000d));, +            otherTestResults = "Post and delivery time: " + deliveredMicros + " micros<br/>" + //, +                    "Post and delivery rate: " + deliveryRate + "/s";, +        }]
[+++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    public static String TAG = "Event";, +, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +        register(subscriber, false, 0);, +    }, +    /**, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!, +     */, +    public void register(Object subscriber, int priority) {, +        register(subscriber, false, priority);, +    }, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber) {, +        register(subscriber, true, 0);, +    }, +, +    /**, +     * Like {@link #register(Object, int)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber, int priority) {, +        register(subscriber, true, priority);, +    }, +, +    private synchronized void register(Object subscriber, boolean sticky, int priority) {, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +            subscribe(subscriber, subscriberMethod, sticky, priority);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);, +            if (i == size || newSubscription.priority > subscriptions.get(i).priority) {, +        if (sticky) {, +     * {@link #register(Object, int)}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#PostThread}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.PostThread) {, +     * event of an event's type is kept in memory for future access. This can be {@link #registerSticky(Object)} or, +     * {@link #getStickyEvent(Class)}., +            case PostThread:, +            case MainThread:, +            case BackgroundThread:, +            case Async:, +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    public static String TAG = "Event";, +, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +        register(subscriber, false, 0);, +    }, +    /**, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!, +     */, +    public void register(Object subscriber, int priority) {, +        register(subscriber, false, priority);, +    }, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with]
[+++ b/.travis.yml, +sudo: false]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +                        TypeMirror typeMirror = param.asType();, +                        String skipReason = null;, +                        if (!(typeMirror instanceof DeclaredType) ||, +                                !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {, +                            skipReason = "event type is not a standard class e.g. generics";, +                        }, +                        if (skipReason == null) {, +                            TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();, +                                skipReason = "event type is not public";, +                            }, +                        }, +                        if (skipReason != null) {, +                                String msg = "Falling back to reflection because " + skipReason;, +                                if (!subscriberClass.equals(skipCandidate)) {, +                                    msg += " (found in super class for " + skipCandidate + ")";, +                                messager.printMessage(Diagnostic.Kind.NOTE, msg, method);, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +                        TypeMirror typeMirror = param.asType();, +                        String skipReason = null;, +                        if (!(typeMirror instanceof DeclaredType) ||, +                                !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {, +                            skipReason = "event type is not a standard class e.g. generics";, +                        }, +                        if (skipReason == null) {, +                            TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();, +                                skipReason = "event type is not public";, +                            }, +                        }, +                        if (skipReason != null) {, +                                String msg = "Falling back to reflection because " + skipReason;, +                                if (!subscriberClass.equals(skipCandidate)) {, +                                    msg += " (found in super class for " + skipCandidate + ")";, +                                messager.printMessage(Diagnostic.Kind.NOTE, msg, method);, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusGenericsTest.java, +    public class GenericEventSubscriber<T> {, +    public class FullGenericEventSubscriber<T> {, +        @Subscribe, +        public void onGenericEvent(T event) {, +            trackEvent(event);, +        }, +    }, +, +    public class GenericNumberEventSubscriber<T extends Number> {, +        @Subscribe, +        public void onGenericEvent(T event) {, +            trackEvent(event);, +        }, +    }, +, +    public class GenericFloatEventSubscriber extends GenericNumberEventSubscriber<Float> {, +    }, +, +        GenericEventSubscriber<IntTestEvent> genericSubscriber = new GenericEventSubscriber<IntTestEvent>();, +, +    @Test, +    public void testGenericEventAndSubscriber_TypeErasure() {, +        FullGenericEventSubscriber<IntTestEvent> genericSubscriber = new FullGenericEventSubscriber<IntTestEvent>();, +        eventBus.register(genericSubscriber);, +        eventBus.post(new IntTestEvent(42));, +        eventBus.post("Type erasure!");, +        assertEventCount(2);, +    }, +, +    @Test, +    public void testGenericEventAndSubscriber_BaseType() {, +        GenericNumberEventSubscriber<Float> genericSubscriber = new GenericNumberEventSubscriber<>();, +        eventBus.register(genericSubscriber);, +        eventBus.post(new Float(42));, +        eventBus.post(new Double(23));, +        assertEventCount(2);, +        eventBus.post("Not the same base type");, +        assertEventCount(2);, +    }, +, +    @Test, +    public void testGenericEventAndSubscriber_Subclass() {, +        GenericFloatEventSubscriber genericSubscriber = new GenericFloatEventSubscriber();, +        eventBus.register(genericSubscriber);, +        eventBus.post(new Float(42));, +        eventBus.post(new Double(77));, +        assertEventCount(2);, +        eventBus.post("Not the same base type");, +        assertEventCount(2);, +    }]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java, +/*, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.util;, +, +import java.lang.reflect.Constructor;, +import java.util.concurrent.Executor;, +import java.util.concurrent.Executors;, +, +import de.greenrobot.event.EventBus;, +, +import android.util.Log;, +, +/**, + * Executes an {@link RunnableEx} using a thread pool. Thrown exceptions are propagated by posting failure events of any, + * given type (default is {@link ThrowableFailureEvent})., + * , + * @author Markus, + */, +public class AsyncExecutor {, +, +    public static class Builder {, +        private Executor threadPool;, +        private Class<?> failureEventType;, +        private EventBus eventBus;, +, +        private Builder() {, +        }, +, +        public Builder threadPool(Executor threadPool) {, +            this.threadPool = threadPool;, +            return this;, +        }, +, +        public Builder failureEventType(Class<?> failureEventType) {, +            this.failureEventType = failureEventType;, +            return this;, +        }, +, +        public Builder eventBus(EventBus eventBus) {, +            this.eventBus = eventBus;, +            return this;, +        }, +, +        public AsyncExecutor build() {, +            if (eventBus == null) {, +                eventBus = EventBus.getDefault();, +            }, +            if (threadPool == null) {, +                threadPool = Executors.newCachedThreadPool();, +            }, +            if (failureEventType == null) {, +                failureEventType = ThrowableFailureEvent.class;, +            }, +            return new AsyncExecutor(threadPool, eventBus, failureEventType);, +        }, +    }, +, +    /** Like {@link Runnable}, but the run method may throw an exception. */, +    public interface RunnableEx {, +        void run() throws Exception;, +    }, +, +    public static Builder builder() {, +        return new Builder();, +    }, +, +    public static AsyncExecutor create() {, +        return new Builder().build();, +    }, +, +    private final Executor threadPool;, +    private final Constructor<?> failureEventConstructor;, +    private final EventBus eventBus;, +, +    private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEventType) {, +        this.threadPool = threadPool;, +        this.eventBus = eventBus;, +        try {, +            failureEventConstructor = failureEventType.getConstructor(Throwable.class);, +        } catch (NoSuchMethodException e) {, +            throw new RuntimeException(]
[+++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, +    buildToolsVersion '21.1.2', +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, +    buildToolsVersion '21.1.2', +++ b/EventBusTest/build.gradle, +    buildToolsVersion '21.1.2', +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, +    buildToolsVersion '21.1.2', +++ b/EventBusTest/build.gradle, +    buildToolsVersion '21.1.2', +++ b/gradle/wrapper/gradle-wrapper.jar]
[+++ b/EventBusPerformance/res/layout/activity_runtests.xml, +            android:textSize="16sp" />, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +            android:textSize="16sp" />, +++ b/EventBusPerformance/res/layout/activity_setuptests.xml, +                android:text="@string/test_broadcast", +                android:visibility="gone" />, +                android:text="@string/test_localBroadcast", +                android:visibility="gone" />]
[+++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/build.gradle, +        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex", +++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/build.gradle, +        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="app_name">EventBus Performance</string>, +++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/build.gradle, +        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="app_name">EventBus Performance</string>, +++ /dev/null, +++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/build.gradle, +        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="app_name">EventBus Performance</string>, +++ /dev/null, +++ /dev/null, +++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/build.gradle, +        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="app_name">EventBus Performance</string>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/build.gradle, +        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="app_name">EventBus Performance</string>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/build.gradle, +        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="app_name">EventBus Performance</string>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBusPerformance/AndroidManifest.xml, +    package="org.greenrobot.eventbusperf", +    android:versionCode="1", +    android:versionName="2.0.0" >, +            android:name="org.greenrobot.eventbusperf.TestSetupActivity", +            android:name="org.greenrobot.eventbusperf.TestRunnerActivity", +++ b/EventBusPerformance/build.gradle, +        eventBusIndex "org.greenrobot.eventbusperf.MyEventBusIndex", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="app_name">EventBus Performance</string>, +++ /dev/null]
[+++ b/.gitignore, +.gradle, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers receive events until the call of {@link #unregister(Object)}. By default, subscribers will handle events, + * in methods named "onEvent"., +    private final ThreadLocal<List<Object>> currentThreadEventQueue = new ThreadLocal<List<Object>>() {, +        protected List<Object> initialValue() {, +            return new ArrayList<Object>();, +        }, +    };, +, +    private final ThreadLocal<BooleanWrapper> currentThreadIsPosting = new ThreadLocal<BooleanWrapper>() {, +        @Override, +        protected BooleanWrapper initialValue() {, +            return new BooleanWrapper();, +     * exclude subscriber classes from this check., +    public static void skipMethodNameVerificationFor(Class<?> clazz) {, +        SubscriberMethodFinder.skipMethodNameVerificationFor(clazz);, +        SubscriberMethodFinder.clearSkipMethodNameVerifications();, +        register(subscriber, defaultMethodName, false);, +     * Like {@link #register(Object)}, but allows to define a custom method name for event handler methods., +        register(subscriber, methodName, false);, +        register(subscriber, defaultMethodName, true);, +     * Like {@link #registerSticky(Object)}, but allows to define a custom method name for event handler methods., +        register(subscriber, methodName, true);, +    private void register(Object subscriber, String methodName, boolean sticky) {, +            subscribe(subscriber, subscriberMethod, sticky);, +     * Like {@link #register(Object)}, but only registers the subscriber for the given event types., +     * Like {@link #register(Object, String)}, but only registers the subscriber for the given event types., +    public synchronized void register(Object subscriber, String methodName, Class<?> eventType,, +            Class<?>... moreEventTypes) {, +     * Like {@link #registerSticky(Object)}, but only registers the subscriber for the given event types., +     * Like {@link #registerSticky(Object, String)}, but only registers the subscriber for the given event types., +    public synchronized void registerSticky(Object subscriber, String methodName, Class<?> eventType,, +            Class<?>... moreEventTypes) {, +                subscribe(subscriber, subscriberMethod, sticky);, +                        subscribe(subscriber, subscriberMethod, sticky);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        subscriberMethod.method.setAccessible(true);, +        subscriptions.add(newSubscription);, +    /** Unregisters the given subscriber for the given event classes. */]
[+++ b/EventBusPerformance/build.gradle, +buildscript {, +    repositories {, +        mavenCentral(), +    }, +, +    dependencies {, +        classpath 'com.android.tools.build:gradle:0.13.3', +    }, +}, +, +apply plugin: 'com.android.application', +, +repositories {, +    mavenCentral(), +}, +, +dependencies {, +    compile project(':EventBus'), +    compile 'com.squareup:otto:1.3.5', +}, +, +android {, +    buildToolsVersion '20.0.0', +    compileSdkVersion 19, +, +    sourceSets {, +        main {, +            manifest.srcFile 'AndroidManifest.xml', +            java.srcDirs = ['src'], +            res.srcDirs = ['res'], +        }, +, +    }, +, +}, +++ b/EventBusPerformance/build.gradle, +buildscript {, +    repositories {, +        mavenCentral(), +    }, +, +    dependencies {, +        classpath 'com.android.tools.build:gradle:0.13.3', +    }, +}, +, +apply plugin: 'com.android.application', +, +repositories {, +    mavenCentral(), +}, +, +dependencies {, +    compile project(':EventBus'), +    compile 'com.squareup:otto:1.3.5', +}, +, +android {, +    buildToolsVersion '20.0.0', +    compileSdkVersion 19, +, +    sourceSets {, +        main {, +            manifest.srcFile 'AndroidManifest.xml', +            java.srcDirs = ['src'], +            res.srcDirs = ['res'], +        }, +, +    }, +, +}, +++ /dev/null, +++ b/EventBusPerformance/build.gradle, +buildscript {, +    repositories {, +        mavenCentral(), +    }, +, +    dependencies {, +        classpath 'com.android.tools.build:gradle:0.13.3', +    }, +}, +, +apply plugin: 'com.android.application', +, +repositories {, +    mavenCentral(), +}, +, +dependencies {, +    compile project(':EventBus'), +    compile 'com.squareup:otto:1.3.5', +}, +, +android {, +    buildToolsVersion '20.0.0', +    compileSdkVersion 19, +, +    sourceSets {]
[+++ /dev/null, +++ /dev/null, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.TestEventBus;, +++ /dev/null, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.TestEventBus;, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/TestEventBus.java, +package de.greenrobot.eventperf.testsubject;, +, +import java.lang.reflect.Constructor;, +import java.util.ArrayList;, +, +import android.content.Context;, +import de.greenrobot.event.EventBus;, +import de.greenrobot.eventperf.Test;, +import de.greenrobot.eventperf.TestEvent;, +import de.greenrobot.eventperf.TestParams;, +, +public abstract class TestEventBus extends Test {, +, +    private final EventBus eventBus;, +    private final ArrayList<Object> subscribers;, +    Class<?> subscriberClass;, +    private final int iterations;, +    private int expectedEventCount;, +, +    public TestEventBus(Context context, TestParams params) {, +        super(context, params);, +        eventBus = new EventBus();, +        subscribers = new ArrayList<Object>();, +        iterations = params.getIterations();, +        expectedEventCount = iterations * params.getSubscriberCount();, +    }, +, +    @Override, +    public void prepareTest() {, +        subscriberClass = getSubscriberClassForThreadMode();, +        try {, +            Constructor<?> constructor = subscriberClass.getConstructor(TestEventBus.class);, +            for (int i = 0; i < params.getSubscriberCount(); i++) {, +                Object subscriber = constructor.newInstance(this);, +                subscribers.add(subscriber);, +            }, +        } catch (Exception e) {, +            throw new RuntimeException(e);, +        }, +    }, +, +    private Class<?> getSubscriberClassForThreadMode() {, +        switch (params.getThreadMode()) {, +        case MainThread:, +            return SubscribeClassEventBusMain.class;, +        case BackgroundThread:, +            return SubscribeClassEventBusBackground.class;, +        case Async:, +            return SubscriberClassEventBusAsync.class;, +        case PostThread:, +            return SubscribeClassEventBusDefault.class;, +        default:, +            throw new RuntimeException("Unknown: " + params.getThreadMode());, +        }, +    }, +, +    public static class Post extends TestEventBus {, +        public Post(Context context, TestParams params) {, +            super(context, params);, +        }, +, +        @Override, +        public void prepareTest() {, +            super.prepareTest();, +            super.registerSubscribers();, +        }, +, +        public void runTest() {, +            long timeStart = System.currentTimeMillis();, +            for (int i = 0; i < super.iterations; i++) {, +                super.eventBus.post(new TestEvent());, +                if (canceled) {, +                    break;, +                }, +            }, +            long timeAfterPosting = System.currentTimeMillis();, +            waitForReceivedEventCount(super.expectedEventCount);, +            long timeAllReceived = System.currentTimeMillis();, +, +            primaryResultMillis = timeAfterPosting - timeStart;, +            primaryResultCount = super.expectedEventCount;, +            long deliveredMillis = timeAllReceived - timeStart;, +            int deliveryRate = (int) (primaryResultCount / (deliveredMillis / 1000d));, +            otherTestResults = "Post and delivery time: " + deliveredMillis + " ms<br/>" + //, +                    "Post and delivery rate: " + deliveryRate + "/s";, +        }, +, +        @Override, +        public String getDisplayName() {, +            return "EventBus Post Events";, +        }, +    }]
[+++ b/.travis.yml, +    - build-tools-25.0.3, +++ b/.travis.yml, +    - build-tools-25.0.3, +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, +    - build-tools-25.0.3, +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, +    - build-tools-25.0.3, +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/build.gradle, +    gradleVersion = '3.5', +++ b/.travis.yml, +    - build-tools-25.0.3, +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/build.gradle, +    gradleVersion = '3.5', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/.travis.yml, +    - build-tools-25.0.3, +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.2', +    buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/build.gradle, +    gradleVersion = '3.5', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri May 26 21:49:46 CEST 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip]
[+++ b/.travis.yml, +    - extra-android-m2repository]
[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    private static final String ON_EVENT_METHOD_NAME = "onEvent";, +    /*, +     * In newer class files, compilers may add methods. Those are called bridge or synthetic methods., +     * EventBus must ignore both. There modifiers are not public but defined in the Java class file format:, +     * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1, +     */, +    private static final int BRIDGE = 0x40;, +    private static final int SYNTHETIC = 0x1000;, +    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {, +                if (methodName.startsWith(ON_EVENT_METHOD_NAME)) {, +                    if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {, +                        if (parameterTypes.length == 1) {, +                            String modifierString = methodName.substring(ON_EVENT_METHOD_NAME.length());, +                            if (modifierString.length() == 0) {, +                            } else if (modifierString.equals("MainThread")) {, +                                threadMode = ThreadMode.MainThread;, +                            } else if (modifierString.equals("BackgroundThread")) {, +                                threadMode = ThreadMode.BackgroundThread;, +                            } else if (modifierString.equals("Async")) {, +                                threadMode = ThreadMode.Async;, +                            } else {, +                                if (skipMethodVerificationForClasses.containsKey(clazz)) {, +                                    continue;, +                                } else {, +                                    throw new EventBusException("Illegal onEvent method, check for typos: " + method);, +                            }, +                            Class<?> eventType = parameterTypes[0];, +                    } else if (!skipMethodVerificationForClasses.containsKey(clazz)) {, +                        Log.d(EventBus.TAG, "Skipping method (not public, static or abstract): " + clazz + ".", +                                + methodName);, +                }, +            }, +            throw new EventBusException("Subscriber " + subscriberClass + " has no public methods called ", +                    + ON_EVENT_METHOD_NAME);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    private static final String ON_EVENT_METHOD_NAME = "onEvent";, +    /*, +     * In newer class files, compilers may add methods. Those are called bridge or synthetic methods., +     * EventBus must ignore both. There modifiers are not public but defined in the Java class file format:, +     * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1, +     */, +    private static final int BRIDGE = 0x40;, +    private static final int SYNTHETIC = 0x1000;, +    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {, +                if (methodName.startsWith(ON_EVENT_METHOD_NAME)) {, +                    if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {, +                        if (parameterTypes.length == 1) {, +                            String modifierString = methodName.substring(ON_EVENT_METHOD_NAME.length());, +                            if (modifierString.length() == 0) {, +                            } else if (modifierString.equals("MainThread")) {, +                                threadMode = ThreadMode.MainThread;, +                            } else if (modifierString.equals("BackgroundThread")) {, +                                threadMode = ThreadMode.BackgroundThread;, +                            } else if (modifierString.equals("Async")) {, +                                threadMode = ThreadMode.Async;, +                            } else {, +                                if (skipMethodVerificationForClasses.containsKey(clazz)) {, +                                    continue;, +                                } else {, +                                    throw new EventBusException("Illegal onEvent method, check for typos: " + method);, +                            }, +                            Class<?> eventType = parameterTypes[0];, +                    } else if (!skipMethodVerificationForClasses.containsKey(clazz)) {, +                        Log.d(EventBus.TAG, "Skipping method (not public, static or abstract): " + clazz + ".", +                                + methodName);, +                }, +            }, +            throw new EventBusException("Subscriber " + subscriberClass + " has no public methods called ", +                    + ON_EVENT_METHOD_NAME);, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    private static final String ON_EVENT_METHOD_NAME = "onEvent";, +    /*, +     * In newer class files, compilers may add methods. Those are called bridge or synthetic methods., +     * EventBus must ignore both. There modifiers are not public but defined in the Java class file format:, +     * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1, +     */, +    private static final int BRIDGE = 0x40;, +    private static final int SYNTHETIC = 0x1000;]
[+++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/EventBus/src/org/greenrobot/eventbus/MainThreadSupport.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/EventBus/src/org/greenrobot/eventbus/MainThreadSupport.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/EventBus/src/org/greenrobot/eventbus/Poster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org)]
[+++ b/.travis.yml, +    - android-25]
[+++ b/EventBusPerformance/res/layout/activity_runtests.xml, +        android:background="#88666666", +        android:padding="15dp", +        android:text="@string/testIsRunningText", +        android:textColor="#ffffff", +        android:textSize="30sp", +        android:textStyle="bold" />, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +        android:background="#88666666", +        android:padding="15dp", +        android:text="@string/testIsRunningText", +        android:textColor="#ffffff", +        android:textSize="30sp", +        android:textStyle="bold" />, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestEventBus.java, +            int deliveryRate = (int) (primaryResultCount / (deliveredMillis / 1000d));, +                    "Post and delivery rate: " + deliveryRate + "/s";, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +        android:background="#88666666", +        android:padding="15dp", +        android:text="@string/testIsRunningText", +        android:textColor="#ffffff", +        android:textSize="30sp", +        android:textStyle="bold" />, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestEventBus.java, +            int deliveryRate = (int) (primaryResultCount / (deliveredMillis / 1000d));, +                    "Post and delivery rate: " + deliveryRate + "/s";, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunner.java, +            // Clean up and let the main thread calm down, +            System.gc();, +            try {, +                Thread.sleep(200);, +                System.gc();, +                Thread.sleep(200);, +            } catch (InterruptedException e) {, +            }, +, +                boolean isLastEvent = idx == tests.size() - 1;, +                controlBus.post(new TestFinishedEvent(test, isLastEvent));, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +        android:background="#88666666", +        android:padding="15dp", +        android:text="@string/testIsRunningText", +        android:textColor="#ffffff", +        android:textSize="30sp", +        android:textStyle="bold" />, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestEventBus.java, +            int deliveryRate = (int) (primaryResultCount / (deliveredMillis / 1000d));, +                    "Post and delivery rate: " + deliveryRate + "/s";, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunner.java, +            // Clean up and let the main thread calm down, +            System.gc();, +            try {, +                Thread.sleep(200);, +                System.gc();, +                Thread.sleep(200);, +            } catch (InterruptedException e) {, +            }, +, +                boolean isLastEvent = idx == tests.size() - 1;, +                controlBus.post(new TestFinishedEvent(test, isLastEvent));, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +                ((int) test.getPrimaryResultRate()) + "/s<br/>";]
[+++ b/.travis.yml, +  - oraclejdk7, +, +before_script:, +  - chmod +x gradlew]
[+++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.3', +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.3', +++ b/EventBusTest/AndroidManifest.xml, +    <instrumentation, +        android:name="android.test.InstrumentationTestRunner", +        android:targetPackage="de.greenrobot.event.test" />, +        <uses-library android:name="android.test.runner" />, +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.3', +++ b/EventBusTest/AndroidManifest.xml, +    <instrumentation, +        android:name="android.test.InstrumentationTestRunner", +        android:targetPackage="de.greenrobot.event.test" />, +        <uses-library android:name="android.test.runner" />, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.3']
[+++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);]
[+++ b/.travis.yml, +language: java, +jdk:, +  - openjdk6, +++ b/.travis.yml, +language: java, +jdk:, +  - openjdk6, +++ b/EventBus/build.gradle, +    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&, +    project.hasProperty('signing.secretKeyRingFile')) {, +    } else {, +        println "Signing information missing/incomplete for ${project.name}", +    }, +            // We must check if authentication info is available, +            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +            } else {, +                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}", +            }, +++ b/.travis.yml, +language: java, +jdk:, +  - openjdk6, +++ b/EventBus/build.gradle, +    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&, +    project.hasProperty('signing.secretKeyRingFile')) {, +    } else {, +        println "Signing information missing/incomplete for ${project.name}", +    }, +            // We must check if authentication info is available, +            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +            } else {, +                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}", +            }, +++ b/build.gradle, +++ b/.travis.yml, +language: java, +jdk:, +  - openjdk6, +++ b/EventBus/build.gradle, +    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&, +    project.hasProperty('signing.secretKeyRingFile')) {, +    } else {, +        println "Signing information missing/incomplete for ${project.name}", +    }, +            // We must check if authentication info is available, +            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +            } else {, +                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}", +            }, +++ b/build.gradle, +++ b/settings.gradle, +include 'EventBus']
[+++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#POSTING}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +            case POSTING:, +            case MAIN:, +            case BACKGROUND:, +            case ASYNC:, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#POSTING}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +            case POSTING:, +            case MAIN:, +            case BACKGROUND:]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus;, +, +import android.app.Activity;, +import android.support.test.annotation.UiThreadTest;, +import android.support.test.rule.UiThreadTestRule;, +import android.util.Log;, +, +import org.junit.Rule;, +import org.junit.Test;, +, +, +import static org.junit.Assert.assertEquals;, +, +/**, + * @author Markus Junginger, greenrobot, + */, +// Do not extend from AbstractAndroidEventBusTest, because it asserts test may not be in main thread, +public class EventBusAndroidActivityTest extends AbstractEventBusTest {, +, +    public static class WithIndex extends EventBusBasicTest {, +        @Test, +        public void dummy() {, +        }, +, +    }, +, +    @Rule, +    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();, +, +    @Test, +    @UiThreadTest, +    public void testRegisterAndPost() {, +        // Use an activity to test real life performance, +        TestActivity testActivity = new TestActivity();, +        String event = "Hello";, +, +        long start = System.currentTimeMillis();, +        eventBus.register(testActivity);, +        long time = System.currentTimeMillis() - start;, +        Log.d(EventBus.TAG, "Registered in " + time + "ms");, +, +        eventBus.post(event);, +, +        assertEquals(event, testActivity.lastStringEvent);, +    }, +, +    public static class TestActivity extends Activity {, +        public String lastStringEvent;, +, +        @Subscribe, +        public void onEvent(String event) {, +            lastStringEvent = event;, +        }, +    }, +, +}, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus;, +, +import android.app.Activity;, +import android.support.test.annotation.UiThreadTest;, +import android.support.test.rule.UiThreadTestRule;, +import android.util.Log;, +, +import org.junit.Rule;, +import org.junit.Test;, +, +, +import static org.junit.Assert.assertEquals;]
[+++ b/.travis.yml, +    - build-tools-23.0.2, +++ b/.travis.yml, +    - build-tools-23.0.2, +++ b/EventBusPerformance/build.gradle, +    buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, +    - build-tools-23.0.2, +++ b/EventBusPerformance/build.gradle, +    buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, +    buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, +    - build-tools-23.0.2, +++ b/EventBusPerformance/build.gradle, +    buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, +    buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/javadoc-style/stylesheet.css, +/* Javadoc style sheet */, +/*, +Overall document style, +*/, +, +@import url('resources/fonts/dejavu.css');, +, +body {, +    background-color:#ffffff;, +    color:#353833;, +    font-family:'DejaVu Sans', Arial, Helvetica, sans-serif;, +    font-size:14px;, +    margin:0;, +}, +a:link, a:visited {, +    text-decoration:none;, +    color:#4A6782;, +}, +a:hover, a:focus {, +    text-decoration:none;, +    color:#bb7a2a;, +}, +a:active {, +    text-decoration:none;, +    color:#4A6782;, +}, +a[name] {, +    color:#353833;, +}, +a[name]:hover {, +    text-decoration:none;, +    color:#353833;, +}, +pre {, +    font-family:'DejaVu Sans Mono', monospace;, +    font-size:14px;, +}, +h1 {, +    font-size:20px;, +}, +h2 {, +    font-size:18px;, +}, +h3 {, +    font-size:16px;, +    font-style:italic;, +}, +h4 {, +    font-size:13px;, +}, +h5 {, +    font-size:12px;, +}, +h6 {, +    font-size:11px;, +}, +ul {, +    list-style-type:disc;, +}, +code, tt {, +    font-family:'DejaVu Sans Mono', monospace;, +    font-size:14px;, +    padding-top:4px;, +    margin-top:8px;, +    line-height:1.4em;, +}, +dt code {, +    font-family:'DejaVu Sans Mono', monospace;, +    font-size:14px;, +    padding-top:4px;, +}, +table tr td dt code {, +    font-family:'DejaVu Sans Mono', monospace;, +    font-size:14px;, +    vertical-align:top;, +    padding-top:4px;, +}, +sup {, +    font-size:8px;, +}, +/*]
[+++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#POSTING}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +            case POSTING:, +            case MAIN:, +            case BACKGROUND:, +            case ASYNC:, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#POSTING}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +            case POSTING:, +            case MAIN:, +            case BACKGROUND:]
[+++ b/.travis.yml, +sudo: false, +    - build-tools-21.1.2, +++ b/.travis.yml, +sudo: false, +    - build-tools-21.1.2, +++ b/COMPARISON.md, +        <th>Asynchronous event delivery</th>, +++ b/.travis.yml, +sudo: false, +    - build-tools-21.1.2, +++ b/COMPARISON.md, +        <th>Asynchronous event delivery</th>, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking how to use EventBus in a specific scenario, +* Your app crashes/misbehaves and you are not sure why, +, +The perfect Issue Report, +------------------------, +A couple of simple steps can save time for everyone., +, +Check before reporting:, +, +* It's not a support inquiry, +* You have read the docs, +* You searched the web and stackoverflow, +* You searched existing issues to avoid duplicates, +, +Reporting bugs:, +, + * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?, + * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug., +, +Requesting features:, +, + * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy., +, +A Note on Pull Requests, +=======================, +Pull requests (and issue) may queue up up a bit. Usually, pull requests and issues are checked when new releases are planned., +, +For bigger pull requests, it's a good idea to check with the maintainer upfront about the idea and the implementation outline., +, +Thanks for reading!, +===================, +It's your contributions and feedback that makes maintaining this library fun., +++ b/.travis.yml, +sudo: false, +    - build-tools-21.1.2, +++ b/COMPARISON.md, +        <th>Asynchronous event delivery</th>, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking how to use EventBus in a specific scenario, +* Your app crashes/misbehaves and you are not sure why, +, +The perfect Issue Report, +------------------------, +A couple of simple steps can save time for everyone., +, +Check before reporting:, +, +* It's not a support inquiry, +* You have read the docs, +* You searched the web and stackoverflow, +* You searched existing issues to avoid duplicates, +, +Reporting bugs:, +, + * Please investigate if is the bug is really caused by the library. Isolate the issue: what's the minimal code to reproduce the bug?, + * Bonus steps to gain extra karma points: once you isolated and identified the issue, you can prepare an push request. Submit an unit test causing the bug, and ideally a fix for the bug., +, +Requesting features:, +, + * Ask yourself: is the feature useful for a majority users? One of our major goals is to keep the API simple and concise. We do not want to cover all possible use cases, but those that make 80% of users happy., +, +A Note on Pull Requests]
[+++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ /dev/null]
[+++ b/EventBusTest/build.gradle, +    androidTestCompile project(':EventBusTestJava'), +++ b/EventBusTest/build.gradle, +    androidTestCompile project(':EventBusTestJava'), +++ b/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus;, +, +import android.annotation.SuppressLint;, +import android.os.Handler;, +import android.os.Looper;, +import android.os.Message;, +import android.support.test.runner.AndroidJUnit4;, +, +import org.junit.Before;, +import org.junit.runner.RunWith;, +, +, +import static org.junit.Assert.assertFalse;, +, +/**, + * @author Markus Junginger, greenrobot, + */, +@RunWith(AndroidJUnit4.class), +public abstract class AbstractAndroidEventBusTest extends AbstractEventBusTest {, +    private EventPostHandler mainPoster;, +, +    public AbstractAndroidEventBusTest() {, +        this(false);, +    }, +, +    public AbstractAndroidEventBusTest(boolean collectEventsReceived) {, +        super(collectEventsReceived);, +    }, +, +    @Before, +    public void setUpAndroid() throws Exception {, +        mainPoster = new EventPostHandler(Looper.getMainLooper());, +        assertFalse(Looper.getMainLooper().getThread().equals(Thread.currentThread()));, +    }, +, +    protected void postInMainThread(Object event) {, +        mainPoster.post(event);, +    }, +, +    @SuppressLint("HandlerLeak"), +    class EventPostHandler extends Handler {, +        public EventPostHandler(Looper looper) {, +            super(looper);, +        }, +, +        @Override, +        public void handleMessage(Message msg) {, +            eventBus.post(msg.obj);, +        }, +, +        void post(Object event) {, +            sendMessage(obtainMessage(0, event));, +        }, +, +    }, +, +}, +++ b/EventBusTest/build.gradle, +    androidTestCompile project(':EventBusTestJava'), +++ b/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus;, +, +import android.annotation.SuppressLint;, +import android.os.Handler;, +import android.os.Looper;]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java, +        TestBackgroundPoster backgroundPoster = new TestBackgroundPoster(eventBus);, +        backgroundPoster.start();, +, +, +        backgroundPoster.shutdown();, +        backgroundPoster.join();]
[+++ b/EventBusAnnotationProcessor/res/META-INF/services/javax.annotation.processing.Processor, +org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor, +++ b/EventBusAnnotationProcessor/res/META-INF/services/javax.annotation.processing.Processor, +org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor, +++ /dev/null, +++ b/EventBusAnnotationProcessor/res/META-INF/services/javax.annotation.processing.Processor, +org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor, +++ /dev/null, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +package org.greenrobot.eventbus.annotationprocessor;, +, +import org.greenrobot.eventbus.Subscribe;, +import org.greenrobot.eventbus.ThreadMode;, +, +import java.io.BufferedWriter;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import javax.annotation.processing.AbstractProcessor;, +import javax.annotation.processing.Messager;, +import javax.annotation.processing.RoundEnvironment;, +import javax.annotation.processing.SupportedAnnotationTypes;, +import javax.lang.model.SourceVersion;, +import javax.lang.model.element.Element;, +import javax.lang.model.element.ExecutableElement;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.PackageElement;, +import javax.lang.model.element.TypeElement;, +import javax.lang.model.element.VariableElement;, +import javax.lang.model.type.DeclaredType;, +import javax.lang.model.type.TypeKind;, +import javax.lang.model.type.TypeMirror;, +import javax.tools.Diagnostic;, +import javax.tools.JavaFileObject;, +, +@SupportedAnnotationTypes("org.greenrobot.eventbus.Subscribe"), +public class EventBusAnnotationProcessor extends AbstractProcessor {, +    public static final String INFO_CLASS_POSTFIX = "_EventBusInfo";, +, +    /** Found subscriber methods for a class (without superclasses). */, +    private final Map<TypeElement, List<ExecutableElement>> methodsByClass = new HashMap<>();, +    private final Map<TypeElement, String> infoByClass = new HashMap<>();, +    private final Set<TypeElement> classesToSkip = new HashSet<>();, +, +    private boolean writerRoundDone;, +    private int round;, +, +    @Override, +    public SourceVersion getSupportedSourceVersion() {, +        return SourceVersion.latest();, +    }, +, +    @Override, +    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment env) {, +        Messager messager = processingEnv.getMessager();, +        try {, +            round++;, +            messager.printMessage(Diagnostic.Kind.NOTE, "Processing round " + round + ", new annotations: " +, +                    !annotations.isEmpty() + ", processingOver: " + env.processingOver());, +            if (env.processingOver()) {, +                if (!annotations.isEmpty()) {, +                    messager.printMessage(Diagnostic.Kind.ERROR,, +                            "Unexpected processing state: annotations still available after processing over");, +                    return false;, +                }, +            }, +            if (annotations.isEmpty()) {, +                return false;, +            }, +, +            if (writerRoundDone) {, +                messager.printMessage(Diagnostic.Kind.ERROR,, +                        "Unexpected processing state: annotations still available after writing.");, +            }, +            collectSubscribers(annotations, env, messager);, +            checkForSubscribersToSkip(messager);, +, +            if (!methodsByClass.isEmpty()) {, +                createInfoFiles();, +                String index = processingEnv.getOptions().get("eventBusIndex");, +                if (index != null) {, +                    createInfoIndexFile(index);, +                }, +            } else {, +                messager.printMessage(Diagnostic.Kind.WARNING, "No @Subscribe annotations found");, +            }, +            writerRoundDone = true;, +        } catch (RuntimeException e) {, +            // IntelliJ does not handle exceptions nicely, so log and print a message, +            e.printStackTrace();, +            messager.printMessage(Diagnostic.Kind.ERROR, "Unexpected error in EventBusAnnotationProcessor: " + e);, +        }, +        return true;, +    }, +]
[+++ b/EventBus/.gitignore, +/build, +/.gradle, +++ b/EventBus/.gitignore, +/build, +/.gradle, +++ b/EventBus/build.gradle, +apply plugin: 'java', +, +repositories {, +    mavenCentral(), +}, +, +dependencies {, +    compile('com.google.android:android:1.6_r2'), +}, +, +sourceSets {, +    main {, +        java {, +            srcDir 'src', +        }, +, +    }, +}]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +            String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);, +            if (index == null) {, +                messager.printMessage(Diagnostic.Kind.ERROR, "No option " + OPTION_EVENT_BUS_INDEX +, +                        " passed to annotation processor");, +                return false;, +            }, +            int lastPeriod = index.lastIndexOf('.');, +            String indexPackage = lastPeriod != -1 ? index.substring(0, lastPeriod) : null;, +, +            checkForSubscribersToSkip(messager, indexPackage);, +    private void checkForSubscribersToSkip(Messager messager, String myPackage) {, +                if (!isVisible(myPackage, subscriberClass)) {, +                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) param.asType()).asElement();, +                        if (!isVisible(myPackage, eventTypeElement)) {]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Nov 08 10:08:52 CET 2014, +distributionBase=GRADLE_USER_HOME, +distributionPath=wrapper/dists, +zipStoreBase=GRADLE_USER_HOME, +zipStorePath=wrapper/dists, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-all.zip, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Nov 08 10:08:52 CET 2014, +distributionBase=GRADLE_USER_HOME, +distributionPath=wrapper/dists, +zipStoreBase=GRADLE_USER_HOME, +zipStorePath=wrapper/dists, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-all.zip, +++ b/gradlew, +#!/usr/bin/env bash, +, +##############################################################################, +##, +##  Gradle start up script for UN*X, +##, +##############################################################################, +, +# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +DEFAULT_JVM_OPTS="", +, +APP_NAME="Gradle", +APP_BASE_NAME=`basename "$0"`, +, +# Use the maximum available, or set MAX_FD != -1 to use that value., +MAX_FD="maximum", +, +warn ( ) {, +    echo "$*", +}, +, +die ( ) {, +    echo, +    echo "$*", +    echo, +    exit 1, +}, +, +# OS specific support (must be 'true' or 'false')., +cygwin=false, +msys=false, +darwin=false, +case "`uname`" in, +  CYGWIN* ), +    cygwin=true, +    ;;, +  Darwin* ), +    darwin=true, +    ;;, +  MINGW* ), +    msys=true, +    ;;, +esac, +, +# For Cygwin, ensure paths are in UNIX format before anything is touched., +if $cygwin ; then, +    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`, +fi, +, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, +    ls=`ls -ld "$PRG"`, +    link=`expr "$ls" : '.*-> \(.*\)$'`, +    if expr "$link" : '/.*' > /dev/null; then, +        PRG="$link", +    else, +        PRG=`dirname "$PRG"`"/$link", +    fi, +done, +SAVED="`pwd`", +cd "`dirname \"$PRG\"`/" >&-, +APP_HOME="`pwd -P`", +cd "$SAVED" >&-, +, +CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar, +, +# Determine the Java command to use to start the JVM., +if [ -n "$JAVA_HOME" ] ; then, +    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then, +        # IBM's JDK on AIX uses strange locations for the executables, +        JAVACMD="$JAVA_HOME/jre/sh/java", +    else, +        JAVACMD="$JAVA_HOME/bin/java", +    fi, +    if [ ! -x "$JAVACMD" ] ; then, +        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME, +, +Please set the JAVA_HOME variable in your environment to match the, +location of your Java installation."]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusAndroidOrderTestWithIndex.java, +package org.greenrobot.eventbus.indexed;, +, +import org.greenrobot.eventbus.EventBusAndroidOrderTest;, +, +public class EventBusAndroidOrderTestWithIndex extends EventBusAndroidOrderTest {, +, +    @Override, +    public void setUp() throws Exception {, +        eventBus = Indexed.build();, +        super.setUp();, +    }, +, +}]
[+++ b/EventBusPerformance/AndroidManifest.xml, +    android:versionCode="3", +    android:versionName="1.1.0" >, +            android:process="de.greenrobot.eventperf.benchmark" >, +++ b/EventBusPerformance/AndroidManifest.xml, +    android:versionCode="3", +    android:versionName="1.1.0" >, +            android:process="de.greenrobot.eventperf.benchmark" >, +++ b/EventBusPerformance/res/layout/activity_setuptests.xml, +                android:layout_marginLeft="48dp", +                android:id="@+id/checkBoxEventBusEventHierarchy", +                android:layout_width="wrap_content", +                android:layout_height="wrap_content", +                android:checked="true", +                android:onClick="checkEventBus", +                android:layout_marginLeft="48dp", +                android:text="@string/test_eventBusEventHierarchy" />, +, +            <CheckBox, +                android:layout_marginTop="16dp", +++ b/EventBusPerformance/AndroidManifest.xml, +    android:versionCode="3", +    android:versionName="1.1.0" >, +            android:process="de.greenrobot.eventperf.benchmark" >, +++ b/EventBusPerformance/res/layout/activity_setuptests.xml, +                android:layout_marginLeft="48dp", +                android:id="@+id/checkBoxEventBusEventHierarchy", +                android:layout_width="wrap_content", +                android:layout_height="wrap_content", +                android:checked="true", +                android:onClick="checkEventBus", +                android:layout_marginLeft="48dp", +                android:text="@string/test_eventBusEventHierarchy" />, +, +            <CheckBox, +                android:layout_marginTop="16dp", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="test_eventBusEventHierarchy">Event Inheritance</string>, +++ b/EventBusPerformance/AndroidManifest.xml, +    android:versionCode="3", +    android:versionName="1.1.0" >, +            android:process="de.greenrobot.eventperf.benchmark" >, +++ b/EventBusPerformance/res/layout/activity_setuptests.xml, +                android:layout_marginLeft="48dp", +                android:id="@+id/checkBoxEventBusEventHierarchy", +                android:layout_width="wrap_content", +                android:layout_height="wrap_content", +                android:checked="true", +                android:onClick="checkEventBus", +                android:layout_marginLeft="48dp", +                android:text="@string/test_eventBusEventHierarchy" />, +, +            <CheckBox, +                android:layout_marginTop="16dp", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="test_eventBusEventHierarchy">Event Inheritance</string>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java, +    private boolean eventInheritance;, +    public boolean isEventInheritance() {, +        return eventInheritance;, +    }, +, +    public void setEventInheritance(boolean eventInheritance) {, +        this.eventInheritance = eventInheritance;, +    }, +, +++ b/EventBusPerformance/AndroidManifest.xml, +    android:versionCode="3", +    android:versionName="1.1.0" >, +            android:process="de.greenrobot.eventperf.benchmark" >, +++ b/EventBusPerformance/res/layout/activity_setuptests.xml, +                android:layout_marginLeft="48dp", +                android:id="@+id/checkBoxEventBusEventHierarchy", +                android:layout_width="wrap_content", +                android:layout_height="wrap_content", +                android:checked="true", +                android:onClick="checkEventBus", +                android:layout_marginLeft="48dp", +                android:text="@string/test_eventBusEventHierarchy" />, +, +            <CheckBox, +                android:layout_marginTop="16dp", +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="test_eventBusEventHierarchy">Event Inheritance</string>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestParams.java, +    private boolean eventInheritance;, +    public boolean isEventInheritance() {, +        return eventInheritance;, +    }, +, +    public void setEventInheritance(boolean eventInheritance) {, +        this.eventInheritance = eventInheritance;, +    }, +, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.PerfTestOtto;, +, +import java.util.ArrayList;, +        params.setEventInheritance(((CheckBox) findViewById(R.id.checkBoxEventBusEventHierarchy)).isChecked());, +]
[+++ b/.travis.yml, +#  - echo no | android create avd --force -n test -t android-10 --abi armeabi, +#  - emulator -avd test -no-skin -no-audio -no-window &, +#  - android-wait-for-emulator, +#  - adb shell input keyevent 82 &, +, +# Currently connectedCheck fails, so don't run unit test on Emulator for now. Issue:, +# com.android.builder.testing.ConnectedDevice > hasTests[test(AVD) - 2.3.3] FAILED, +# No tests found., +, +script:, +    - TERM=dumb ./gradlew check]
[+++ b/EventBus/.classpath, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +++ b/EventBus/.classpath, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +++ b/EventBus/build.gradle, +version = '2.0.2', +            exclude 'de/greenrobot/event/util/**', +            // We must check if authentication info is available, +            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/.classpath, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +++ b/EventBus/build.gradle, +version = '2.0.2', +            exclude 'de/greenrobot/event/util/**', +            // We must check if authentication info is available, +            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +            Log.d(TAG, "No subscribers registered for event " + eventClass);, +++ b/EventBus/.classpath, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +++ b/EventBus/build.gradle, +version = '2.0.2', +            exclude 'de/greenrobot/event/util/**', +            // We must check if authentication info is available, +            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +            Log.d(TAG, "No subscribers registered for event " + eventClass);, +++ b/EventBusPerformance/.classpath, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +++ b/EventBus/.classpath, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +++ b/EventBus/build.gradle, +version = '2.0.2', +            exclude 'de/greenrobot/event/util/**', +            // We must check if authentication info is available, +            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +            Log.d(TAG, "No subscribers registered for event " + eventClass);, +++ b/EventBusPerformance/.classpath, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +++ b/EventBusTest/.classpath, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>]
[+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import android.os.Looper;, +    // @Nullable, +    private final MainThreadSupport mainThreadSupport;, +    // @Nullable, +        mainThreadSupport = builder.mainThreadSupport != null ? builder.mainThreadSupport :, +                Logger.AndroidLogger.isAndroidLogAvailable() ?, +                        new MainThreadSupport.AndroidHandlerMainThreadSupport(Looper.getMainLooper()) : null;, +        mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;, +            postToSubscription(newSubscription, stickyEvent, isMainThread());, +    /**, +     * Checks if the current thread is running in the main thread., +     * If there is no main thread support (e.g. non-Android), "true" is always returned. In that case MAIN thread, +     * subscribers are always called in posting thread, and BACKGROUND subscribers are always called from a background, +     * poster., +     */, +    private boolean isMainThread() {, +        return mainThreadSupport != null? mainThreadSupport.isMainThread(): true;, +    }, +, +            postingState.isMainThread = isMainThread();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import android.os.Looper;, +    // @Nullable, +    private final MainThreadSupport mainThreadSupport;, +    // @Nullable, +        mainThreadSupport = builder.mainThreadSupport != null ? builder.mainThreadSupport :, +                Logger.AndroidLogger.isAndroidLogAvailable() ?, +                        new MainThreadSupport.AndroidHandlerMainThreadSupport(Looper.getMainLooper()) : null;, +        mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;, +            postToSubscription(newSubscription, stickyEvent, isMainThread());, +    /**, +     * Checks if the current thread is running in the main thread., +     * If there is no main thread support (e.g. non-Android), "true" is always returned. In that case MAIN thread, +     * subscribers are always called in posting thread, and BACKGROUND subscribers are always called from a background, +     * poster., +     */, +    private boolean isMainThread() {, +        return mainThreadSupport != null? mainThreadSupport.isMainThread(): true;, +    }, +, +            postingState.isMainThread = isMainThread();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +    MainThreadSupport mainThreadSupport;, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import android.os.Looper;, +    // @Nullable, +    private final MainThreadSupport mainThreadSupport;, +    // @Nullable, +        mainThreadSupport = builder.mainThreadSupport != null ? builder.mainThreadSupport :, +                Logger.AndroidLogger.isAndroidLogAvailable() ?, +                        new MainThreadSupport.AndroidHandlerMainThreadSupport(Looper.getMainLooper()) : null;, +        mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;, +            postToSubscription(newSubscription, stickyEvent, isMainThread());, +    /**, +     * Checks if the current thread is running in the main thread., +     * If there is no main thread support (e.g. non-Android), "true" is always returned. In that case MAIN thread, +     * subscribers are always called in posting thread, and BACKGROUND subscribers are always called from a background, +     * poster., +     */, +    private boolean isMainThread() {, +        return mainThreadSupport != null? mainThreadSupport.isMainThread(): true;, +    }, +, +            postingState.isMainThread = isMainThread();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +    MainThreadSupport mainThreadSupport;, +++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java, +public class HandlerPoster extends Handler implements Poster {, +    protected HandlerPoster(EventBus eventBus, Looper looper, int maxMillisInsideHandleMessage) {, +        super(looper);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import android.os.Looper;, +    // @Nullable, +    private final MainThreadSupport mainThreadSupport;, +    // @Nullable, +        mainThreadSupport = builder.mainThreadSupport != null ? builder.mainThreadSupport :, +                Logger.AndroidLogger.isAndroidLogAvailable() ?, +                        new MainThreadSupport.AndroidHandlerMainThreadSupport(Looper.getMainLooper()) : null;, +        mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;, +            postToSubscription(newSubscription, stickyEvent, isMainThread());, +    /**, +     * Checks if the current thread is running in the main thread., +     * If there is no main thread support (e.g. non-Android), "true" is always returned. In that case MAIN thread, +     * subscribers are always called in posting thread, and BACKGROUND subscribers are always called from a background, +     * poster., +     */, +    private boolean isMainThread() {, +        return mainThreadSupport != null? mainThreadSupport.isMainThread(): true;, +    }, +, +            postingState.isMainThread = isMainThread();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +    MainThreadSupport mainThreadSupport;, +++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java, +public class HandlerPoster extends Handler implements Poster {, +    protected HandlerPoster(EventBus eventBus, Looper looper, int maxMillisInsideHandleMessage) {, +        super(looper);, +++ b/EventBus/src/org/greenrobot/eventbus/MainThreadSupport.java, +package org.greenrobot.eventbus;]
[+++ b/EventBusTest/AndroidManifest.xml, +    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>, +++ b/EventBusTest/AndroidManifest.xml, +    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>, +++ b/EventBusTest/src/de/greenrobot/greenbus/test/EventBusBasicTest.java, +import android.os.Debug;, +        //Debug.startMethodTracing("testPostMultipleTimes" + count);, +        //Debug.stopMethodTracing();]
[+++ b/.travis.yml, +language: android, +before_script: chmod +x gradlew #before_script, +before_install: chmod +x gradlew #before_install, +, +android:, +  components:, +    - build-tools-21.0.2, +    - android-10]
[+++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.2.1', +++ b/build.gradle, +    gradleVersion = '2.14.1', +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.2.1', +++ b/build.gradle, +    gradleVersion = '2.14.1', +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Nov 04 17:33:28 SGT 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Nov 04 17:33:28 SGT 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip, +++ b/gradlew, +cd "`dirname \"$PRG\"`/" >/dev/null, +cd "$SAVED" >/dev/null, +    JAVACMD=`cygpath --unix "$JAVACMD"`, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Nov 04 17:33:28 SGT 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip, +++ b/gradlew, +cd "`dirname \"$PRG\"`/" >/dev/null, +cd "$SAVED" >/dev/null, +    JAVACMD=`cygpath --unix "$JAVACMD"`, +++ b/gradlew.bat]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidMultithreadedTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import android.os.Looper;, +import android.support.test.runner.AndroidJUnit4;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.junit.Assert.assertNotSame;, +import static org.junit.Assert.assertSame;, +, +@RunWith(AndroidJUnit4.class), +public class EventBusAndroidMultithreadedTest extends EventBusMultithreadedTest {, +, +    @Test, +    public void testSubscribeUnSubscribeAndPostMixedEventType() throws InterruptedException {, +        List<SubscribeUnsubscribeThread> threads = new ArrayList<SubscribeUnsubscribeThread>();, +, +        // Debug.startMethodTracing("testSubscribeUnSubscribeAndPostMixedEventType");, +        for (int i = 0; i < 5; i++) {, +            SubscribeUnsubscribeThread thread = new SubscribeUnsubscribeThread();, +            thread.start();, +            threads.add(thread);, +        }, +        // This test takes a bit longer, so just use fraction the regular count, +        runThreadsMixedEventType(COUNT / 4, 5);, +        for (SubscribeUnsubscribeThread thread : threads) {, +            thread.shutdown();, +        }, +        for (SubscribeUnsubscribeThread thread : threads) {, +            thread.join();, +        }, +        // Debug.stopMethodTracing();, +    }, +, +    public class SubscribeUnsubscribeThread extends Thread {, +        boolean running = true;, +, +        public void shutdown() {, +            running = false;, +        }, +, +        @Override, +        public void run() {, +            try {, +                while (running) {, +                    eventBus.register(this);, +                    double random = Math.random();, +                    if (random > 0.6d) {, +                        Thread.sleep(0, (int) (1000000 * Math.random()));, +                    } else if (random > 0.3d) {, +                        Thread.yield();, +                    }, +                    eventBus.unregister(this);, +                }, +            } catch (InterruptedException e) {, +                throw new RuntimeException(e);, +            }, +        }, +, +        @Subscribe(threadMode = ThreadMode.MAIN), +        public void onEventMainThread(String event) {, +            assertSame(Looper.getMainLooper(), Looper.myLooper());, +        }, +, +        @Subscribe(threadMode = ThreadMode.BACKGROUND), +        public void onEventBackgroundThread(Integer event) {, +            assertNotSame(Looper.getMainLooper(), Looper.myLooper());, +        }, +, +        @Subscribe, +        public void onEvent(Object event) {, +            assertNotSame(Looper.getMainLooper(), Looper.myLooper());, +        }, +, +        @Subscribe(threadMode = ThreadMode.ASYNC), +        public void onEventAsync(Object event) {, +            assertNotSame(Looper.getMainLooper(), Looper.myLooper());, +        }, +    }, +]
[+++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, +                EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, +                EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import org.greenrobot.eventbus.log.AndroidLog;, +import org.greenrobot.eventbus.log.EBLog;, +import org.greenrobot.eventbus.log.SystemOutLog;, +import org.greenrobot.eventbus.util.AndroidMTCalculator;, +import org.greenrobot.eventbus.util.MainThreadCalculator;, +import org.greenrobot.eventbus.util.NonAndroidMTCalculator;, +    private final Poster mainThreadPoster;, +    private final MainThreadCalculator mtCalculator;, +        if (builder.logTarget == null) {, +            EBLog.setLogTarget(builder.nonAndroidEnvironment ? new SystemOutLog() : new AndroidLog(TAG));, +        } else {, +            EBLog.setLogTarget(builder.logTarget);, +        }, +        mainThreadPoster = (builder.nonAndroidEnvironment ? new SyncPoster(this) : new HandlerPoster(this, 10));, +        mtCalculator = (builder.nonAndroidEnvironment ? new NonAndroidMTCalculator() : new AndroidMTCalculator());, +            postToSubscription(newSubscription, stickyEvent, mtCalculator.isMainThread());, +            EBLog.w("Subscriber to unregister was not registered before: " + subscriber.getClass());, +            postingState.isMainThread = mtCalculator.isMainThread();, +                EBLog.d("No subscribers registered for event " + eventClass);, +                EBLog.e("SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                EBLog.e("Initial event " + exEvent.causingEvent + " caused exception in ", +                EBLog.e("Could not dispatch event: " + event.getClass() + " to subscribing class ", +        final List<Object> eventQueue = new ArrayList<>();, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, +                EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import org.greenrobot.eventbus.log.AndroidLog;, +import org.greenrobot.eventbus.log.EBLog;, +import org.greenrobot.eventbus.log.SystemOutLog;, +import org.greenrobot.eventbus.util.AndroidMTCalculator;, +import org.greenrobot.eventbus.util.MainThreadCalculator;, +import org.greenrobot.eventbus.util.NonAndroidMTCalculator;, +    private final Poster mainThreadPoster;, +    private final MainThreadCalculator mtCalculator;, +        if (builder.logTarget == null) {, +            EBLog.setLogTarget(builder.nonAndroidEnvironment ? new SystemOutLog() : new AndroidLog(TAG));, +        } else {, +            EBLog.setLogTarget(builder.logTarget);, +        }, +        mainThreadPoster = (builder.nonAndroidEnvironment ? new SyncPoster(this) : new HandlerPoster(this, 10));, +        mtCalculator = (builder.nonAndroidEnvironment ? new NonAndroidMTCalculator() : new AndroidMTCalculator());, +            postToSubscription(newSubscription, stickyEvent, mtCalculator.isMainThread());, +            EBLog.w("Subscriber to unregister was not registered before: " + subscriber.getClass());, +            postingState.isMainThread = mtCalculator.isMainThread();, +                EBLog.d("No subscribers registered for event " + eventClass);, +                EBLog.e("SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                EBLog.e("Initial event " + exEvent.causingEvent + " caused exception in ", +                EBLog.e("Could not dispatch event: " + event.getClass() + " to subscribing class ", +        final List<Object> eventQueue = new ArrayList<>();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import org.greenrobot.eventbus.log.GenericLog;, +, +    GenericLog logTarget;, +    boolean nonAndroidEnvironment;, +     * Set a specific log handler for all EventBus logging., +     *, +     * By default all logging is via {@link android.util.Log} but if you want to use EventBus, +     * outside the Android environment then you will need to provide another log target., +     */, +    public EventBusBuilder logger(GenericLog logTarget) {, +        this.logTarget = logTarget;, +        return this;, +    }, +, +    public EventBusBuilder nonAndroidEnvironment(boolean nonAndroidEnvironment) {, +        this.nonAndroidEnvironment = nonAndroidEnvironment;, +        return this;, +    }, +, +    /**, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, +                EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import org.greenrobot.eventbus.log.AndroidLog;, +import org.greenrobot.eventbus.log.EBLog;, +import org.greenrobot.eventbus.log.SystemOutLog;, +import org.greenrobot.eventbus.util.AndroidMTCalculator;]
[+++ /dev/null, +++ /dev/null, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java, +/*, + * Copyright (C) 2013 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.test;, +, +import java.util.concurrent.CountDownLatch;, +, +import android.test.UiThreadTest;, +import de.greenrobot.event.EventBusException;, +, +/**, + * @author Markus Junginger, greenrobot, + */, +public class EventBusCancelEventDeliveryTest extends AbstractEventBusTest {, +, +    private Throwable failed;, +, +    public void testCancel() {, +        Subscriber canceler = new Subscriber(true);, +        eventBus.register(new Subscriber(false));, +        eventBus.register(canceler, 1);, +        eventBus.register(new Subscriber(false));, +        eventBus.post("42");, +        assertEquals(1, eventCount.intValue());, +, +        eventBus.unregister(canceler);, +        eventBus.post("42");, +        assertEquals(1 + 2, eventCount.intValue());, +    }, +, +    public void testCancelInBetween() {, +        Subscriber canceler = new Subscriber(true);, +        eventBus.register(canceler, 2);, +        eventBus.register(new Subscriber(false), 1);, +        eventBus.register(new Subscriber(false), 3);, +        eventBus.post("42");, +        assertEquals(2, eventCount.intValue());, +    }, +, +    public void testCancelOutsideEventHandler() {, +        try {, +            eventBus.cancelEventDelivery(this);, +            fail("Should have thrown");, +        } catch (EventBusException e) {, +            // Expected, +        }, +    }, +, +    public void testCancelWrongEvent() {, +        eventBus.register(new SubscriberCancelOtherEvent());, +        eventBus.post("42");, +        assertEquals(0, eventCount.intValue());, +        assertNotNull(failed);, +    }, +, +    @UiThreadTest, +    public void testCancelInMainThread() {, +        SubscriberMainThread subscriber = new SubscriberMainThread();, +        eventBus.register(subscriber);, +        eventBus.post("42");, +        awaitLatch(subscriber.done, 10);, +        assertEquals(0, eventCount.intValue());, +        assertNotNull(failed);, +    }, +, +    class Subscriber {, +        private boolean cancel;, +, +        public Subscriber(boolean cancel) {, +            this.cancel = cancel;, +        }, +, +        public void onEvent(String event) {, +            trackEvent(event);, +            if (cancel) {, +                eventBus.cancelEventDelivery(event);, +            }, +        }, +    }, +, +    class SubscriberCancelOtherEvent {, +        public void onEvent(String event) {, +            try {, +                eventBus.cancelEventDelivery(this);, +            } catch (EventBusException e) {]
[+++ b/CHANGELOG.md, +### V2.3.0 (2014-11-??) Feature release: EventBusBuilder and performance fix, +* New EventBusBuilder to configure EventBus instances (including the getDefault() instance, #124), +* Added configuration to disable "No subscribers registered for event" logs (EventBusBuilder, #107, #117), +* Added configuration to disable sending SubscriberExceptionEvent and NoSubscriberEvent (EventBusBuilder), +* Added configuration to fail fast when subscribers throw a exception (EventBusBuilder, #55), +* Added configuration to use an existing thread pool (EventBusBuilder, #115), +* Fixed performance regression sneaked into V2.2.x affecting (first time) registration of subscribers, +* Improved README.md and extracted an extended HOWTO.md and CHANGELOG.md from it, +* Various small code improvements (for example #120), +* Ignore compiler generated methods (#76), +++ b/CHANGELOG.md, +### V2.3.0 (2014-11-??) Feature release: EventBusBuilder and performance fix, +* New EventBusBuilder to configure EventBus instances (including the getDefault() instance, #124), +* Added configuration to disable "No subscribers registered for event" logs (EventBusBuilder, #107, #117), +* Added configuration to disable sending SubscriberExceptionEvent and NoSubscriberEvent (EventBusBuilder), +* Added configuration to fail fast when subscribers throw a exception (EventBusBuilder, #55), +* Added configuration to use an existing thread pool (EventBusBuilder, #115), +* Fixed performance regression sneaked into V2.2.x affecting (first time) registration of subscribers, +* Improved README.md and extracted an extended HOWTO.md and CHANGELOG.md from it, +* Various small code improvements (for example #120), +* Ignore compiler generated methods (#76), +++ b/EventBus/build.gradle, +version = '2.3.0-SNAPSHOT', +	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2014 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>', +               description 'EventBus is a publish/subscribe event bus optimized for Android .', +               url 'https://github.com/greenrobot/EventBus', +++ b/CHANGELOG.md, +### V2.3.0 (2014-11-??) Feature release: EventBusBuilder and performance fix, +* New EventBusBuilder to configure EventBus instances (including the getDefault() instance, #124), +* Added configuration to disable "No subscribers registered for event" logs (EventBusBuilder, #107, #117), +* Added configuration to disable sending SubscriberExceptionEvent and NoSubscriberEvent (EventBusBuilder), +* Added configuration to fail fast when subscribers throw a exception (EventBusBuilder, #55), +* Added configuration to use an existing thread pool (EventBusBuilder, #115), +* Fixed performance regression sneaked into V2.2.x affecting (first time) registration of subscribers, +* Improved README.md and extracted an extended HOWTO.md and CHANGELOG.md from it, +* Various small code improvements (for example #120), +* Ignore compiler generated methods (#76), +++ b/EventBus/build.gradle, +version = '2.3.0-SNAPSHOT', +	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2014 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>', +               description 'EventBus is a publish/subscribe event bus optimized for Android .', +               url 'https://github.com/greenrobot/EventBus', +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    /**, +     * Fails fast if an subscriber throws an exception (default: false)., +     * <p/>, +     * Tip: Use this with BuildConfig.DEBUG to let the app crash in DEBUG mode (only). This way, you won't miss, +     * exceptions during development., +     */, +++ b/CHANGELOG.md, +### V2.3.0 (2014-11-??) Feature release: EventBusBuilder and performance fix, +* New EventBusBuilder to configure EventBus instances (including the getDefault() instance, #124), +* Added configuration to disable "No subscribers registered for event" logs (EventBusBuilder, #107, #117), +* Added configuration to disable sending SubscriberExceptionEvent and NoSubscriberEvent (EventBusBuilder), +* Added configuration to fail fast when subscribers throw a exception (EventBusBuilder, #55), +* Added configuration to use an existing thread pool (EventBusBuilder, #115), +* Fixed performance regression sneaked into V2.2.x affecting (first time) registration of subscribers, +* Improved README.md and extracted an extended HOWTO.md and CHANGELOG.md from it, +* Various small code improvements (for example #120), +* Ignore compiler generated methods (#76), +++ b/EventBus/build.gradle, +version = '2.3.0-SNAPSHOT', +	options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2014 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>', +               description 'EventBus is a publish/subscribe event bus optimized for Android .', +               url 'https://github.com/greenrobot/EventBus', +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    /**, +     * Fails fast if an subscriber throws an exception (default: false)., +     * <p/>, +     * Tip: Use this with BuildConfig.DEBUG to let the app crash in DEBUG mode (only). This way, you won't miss, +     * exceptions during development., +     */, +++ b/EventBusTest/AndroidManifest.xml, +    package="de.greenrobot.event.testapp"]
[+++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3-SNAPSHOT', +    deployerJars, +    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4', +    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2', +            // exclude 'de/greenrobot/event/util/**', +            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') , +                && project.hasProperty('preferedPassword')) {, +                configuration = configurations.deployerJars, +                repository(url: preferedRepo) {, +                    authentication(userName: preferedUsername, password: preferedPassword), +                }, +            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3-SNAPSHOT', +    deployerJars, +    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4', +    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2', +            // exclude 'de/greenrobot/event/util/**', +            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') , +                && project.hasProperty('preferedPassword')) {, +                configuration = configurations.deployerJars, +                repository(url: preferedRepo) {, +                    authentication(userName: preferedUsername, password: preferedPassword), +                }, +            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java, +import android.app.Activity;, +            return buildForScope(null);, +        }, +, +        public AsyncExecutor buildForActivityScope(Activity activity) {, +            return buildForScope(activity.getClass());, +        }, +        , +        public AsyncExecutor buildForScope(Object executionContext) {, +            return new AsyncExecutor(threadPool, eventBus, failureEventType, executionContext);, +    private Object scope;, +    private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEventType, Object scope) {, +        this.scope = scope;, +                    if (e instanceof HasExecutionScope) {, +                        ((HasExecutionScope) e).setExecutionScope(scope);, +                    }, +++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3-SNAPSHOT', +    deployerJars, +    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4', +    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2', +            // exclude 'de/greenrobot/event/util/**', +            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') , +                && project.hasProperty('preferedPassword')) {, +                configuration = configurations.deployerJars, +                repository(url: preferedRepo) {, +                    authentication(userName: preferedUsername, password: preferedPassword), +                }, +            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java, +import android.app.Activity;, +            return buildForScope(null);, +        }, +, +        public AsyncExecutor buildForActivityScope(Activity activity) {, +            return buildForScope(activity.getClass());, +        }, +        , +        public AsyncExecutor buildForScope(Object executionContext) {, +            return new AsyncExecutor(threadPool, eventBus, failureEventType, executionContext);, +    private Object scope;, +    private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEventType, Object scope) {, +        this.scope = scope;, +                    if (e instanceof HasExecutionScope) {, +                        ((HasExecutionScope) e).setExecutionScope(scope);, +                    }, +++ b/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java, +        private Object executionScope;, +            if (!isInExecutionScope(executionScope, event)) {, +                return;, +            }, +        public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog,, +                Bundle argumentsForErrorDialog) {, +            fragment.executionScope = executionScope;, +        private Object executionScope;, +            if (!isInExecutionScope(executionScope, event)) {, +                return;, +            }, +        public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {, +            fragment.executionScope = executionScope;, +    /** Scope is limited to the activity's class. */]
[+++ b/.travis.yml, +    - build-tools-22.0.1, +++ b/.travis.yml, +    - build-tools-22.0.1, +++ /dev/null, +++ b/.travis.yml, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/.travis.yml, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +                unsubscribeByEventType(subscriber, eventType);, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/.travis.yml, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +                unsubscribeByEventType(subscriber, eventType);, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +, +++ b/.travis.yml, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/.gitignore, +gradle.properties]
[+++ b/EventBusPerformance/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, +	<classpathentry kind="src" path="src"/>, +	<classpathentry kind="src" path="gen"/>, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry kind="output" path="bin/classes"/>, +</classpath>, +++ b/EventBusPerformance/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, +	<classpathentry kind="src" path="src"/>, +	<classpathentry kind="src" path="gen"/>, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry kind="output" path="bin/classes"/>, +</classpath>, +++ b/EventBusPerformance/.gitignore, +/bin, +/gen, +++ b/EventBusPerformance/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, +	<classpathentry kind="src" path="src"/>, +	<classpathentry kind="src" path="gen"/>, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry kind="output" path="bin/classes"/>, +</classpath>, +++ b/EventBusPerformance/.gitignore, +/bin, +/gen, +++ b/EventBusPerformance/.project, +<?xml version="1.0" encoding="UTF-8"?>, +<projectDescription>, +	<name>EventBusPerformance</name>, +	<comment></comment>, +	<projects>, +	</projects>, +	<buildSpec>, +		<buildCommand>, +			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>org.eclipse.jdt.core.javabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>com.android.ide.eclipse.adt.ApkBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +	</buildSpec>, +	<natures>, +		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>, +		<nature>org.eclipse.jdt.core.javanature</nature>, +	</natures>, +</projectDescription>, +++ b/EventBusPerformance/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, +	<classpathentry kind="src" path="src"/>, +	<classpathentry kind="src" path="gen"/>, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>, +	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry kind="output" path="bin/classes"/>, +</classpath>, +++ b/EventBusPerformance/.gitignore, +/bin, +/gen, +++ b/EventBusPerformance/.project, +<?xml version="1.0" encoding="UTF-8"?>, +<projectDescription>, +	<name>EventBusPerformance</name>, +	<comment></comment>, +	<projects>, +	</projects>, +	<buildSpec>, +		<buildCommand>, +			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>org.eclipse.jdt.core.javabuilder</name>, +			<arguments>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/.travis.yml, +# http://docs.travis-ci.com/user/languages/android/, +, +before_script:, +  - chmod +x gradlew, +  - echo no | android create avd --force -n test -t android-10 --abi armeabi-v7a, +  - emulator -avd test -no-skin -no-audio -no-window &, +  - android-wait-for-emulator, +  - adb shell input keyevent 82 &]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +    /**, +     * Subscriber classes should be skipped if their class or any involved event class are not visible to the index., +     */, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +    /**, +     * Subscriber classes should be skipped if their class or any involved event class are not visible to the index., +     */, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java, +    public class PublicClassWithPublicAndPrivateEvent {, +        @Subscribe, +        public void onEvent(String any) {, +            trackEvent(any);, +        }, +, +        @Subscribe, +        public void onEvent(PrivateEvent any) {, +            trackEvent(any);, +        }, +    }, +, +    public void testSubscriberClassWithPublicAndPrivateEvent() {, +        eventBus.register(new PublicClassWithPublicAndPrivateEvent());, +, +        eventBus.post("Hello");, +        assertEquals("Hello", lastEvent);, +        assertEquals(1, eventsReceived.size());, +, +        PrivateEvent privateEvent = new PrivateEvent();, +        eventBus.post(privateEvent);, +        assertEquals(privateEvent, lastEvent);, +        assertEquals(2, eventsReceived.size());, +    }, +, +    @Test]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java, +        assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java, +        assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java, +        assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java, +        assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java, +        assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java]
[+++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java, +import org.greenrobot.eventbus.EventBusJavaTestsIndex;, +        // TODO ut: remove index of this module once all tests moved to Java module, +        return EventBus.builder(), +                .addIndex(new EventBusTestsIndex()), +                .addIndex(new EventBusJavaTestsIndex()), +                .build();, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java, +import org.greenrobot.eventbus.EventBusJavaTestsIndex;, +        // TODO ut: remove index of this module once all tests moved to Java module, +        return EventBus.builder(), +                .addIndex(new EventBusTestsIndex()), +                .addIndex(new EventBusJavaTestsIndex()), +                .build();, +++ b/EventBusTestJava/build.gradle, +buildscript {, +    repositories {, +        maven { url "https://plugins.gradle.org/m2/" }, +    }, +, +    dependencies {, +        classpath "net.ltgt.gradle:gradle-apt-plugin:0.12", +    }, +}, +, +apply plugin: 'net.ltgt.apt-idea', +    apt project(':EventBusAnnotationProcessor'), +tasks.withType(JavaCompile) {, +    options.compilerArgs += [ "-AeventBusIndex=org.greenrobot.eventbus.EventBusJavaTestsIndex" ], +}]
[+++ b/EventBusAnnotationProcessor/build.gradle, +group = 'org.greenrobot', +version = '3.0.0-rc', +    compile 'de.greenrobot:java-common:2.3.1', +++ b/EventBusAnnotationProcessor/build.gradle, +group = 'org.greenrobot', +version = '3.0.0-rc', +    compile 'de.greenrobot:java-common:2.3.1', +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import de.greenrobot.common.ListMap;, +, +    private final ListMap<TypeElement, ExecutableElement> methodsByClass = new ListMap<>();, +                        TypeElement classElement = (TypeElement) method.getEnclosingElement();, +                        methodsByClass.putElement(classElement, method);, +        for (TypeElement skipCandidate : methodsByClass.keySet()) {, +        for (TypeElement subscriberTypeElement : methodsByClass.keySet()) {]
[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +    public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +    public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.meta.SubscriberInfo;, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +    public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.meta.SubscriberInfo;, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ b/EventBus/src/de/greenrobot/event/meta/AbstractSubscriberInfo.java, +/*, + * Copyright (C) 2012-2015 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.meta;, +, +import java.lang.reflect.Method;, +, +import de.greenrobot.event.EventBusException;, +import de.greenrobot.event.SubscriberMethod;, +import de.greenrobot.event.ThreadMode;, +, +/** Base class for generated subscriber meta info classes created by annotation processing. */, +public abstract class AbstractSubscriberInfo implements SubscriberInfo {, +    private final Class subscriberClass;, +    private final Class<? extends SubscriberInfo> superSubscriberInfoClass;, +    private final boolean shouldCheckSuperclass;, +, +    protected AbstractSubscriberInfo(Class subscriberClass, Class<? extends SubscriberInfo> superSubscriberInfoClass,, +                                     boolean shouldCheckSuperclass) {, +        this.subscriberClass = subscriberClass;, +        this.superSubscriberInfoClass = superSubscriberInfoClass;, +        this.shouldCheckSuperclass = shouldCheckSuperclass;, +    }, +, +    @Override, +    public Class getSubscriberClass() {, +        return subscriberClass;, +    }, +, +    @Override, +    public Class<? extends SubscriberInfo> getSuperSubscriberInfoClass() {, +        return superSubscriberInfoClass;, +    }, +, +    @Override, +    public boolean shouldCheckSuperclass() {, +        return shouldCheckSuperclass;, +    }, +]
[+++ b/EventBus/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17" />, +++ b/EventBus/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17" />, +++ b/EventBus/project.properties, +target=android-17, +++ b/EventBus/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17" />, +++ b/EventBus/project.properties, +target=android-17, +++ b/EventBusPerformance/AndroidManifest.xml, +        android:targetSdkVersion="17" />, +++ b/EventBus/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17" />, +++ b/EventBus/project.properties, +target=android-17, +++ b/EventBusPerformance/AndroidManifest.xml, +        android:targetSdkVersion="17" />, +++ b/EventBusPerformance/project.properties, +target=android-17, +++ b/EventBus/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17" />, +++ b/EventBus/project.properties, +target=android-17, +++ b/EventBusPerformance/AndroidManifest.xml, +        android:targetSdkVersion="17" />, +++ b/EventBusPerformance/project.properties, +target=android-17, +++ b/EventBusTest/project.properties, +target=android-17]
[+++ b/EventBusPerformance/AndroidManifest.xml, +            android:label="@string/app_name", +            android:process="test.runner" >, +++ b/EventBusPerformance/AndroidManifest.xml, +            android:label="@string/app_name", +            android:process="test.runner" >, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +        android:background="#88333333", +        android:text="@string/testIsRunning", +        android:layout_height="wrap_content", +        android:layout_above="@+id/buttonKillProcess", +        android:layout_alignWithParentIfMissing="true", +        android:text="@string/buttonCancel" />, +, +    <Button, +        android:id="@+id/buttonKillProcess", +        android:layout_width="fill_parent", +        android:layout_height="wrap_content", +        android:layout_alignParentBottom="true", +        android:layout_margin="16dp", +        android:onClick="onClickKillProcess", +        android:text="@string/buttonKillProcess", +        android:visibility="gone" />, +++ b/EventBusPerformance/AndroidManifest.xml, +            android:label="@string/app_name", +            android:process="test.runner" >, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +        android:background="#88333333", +        android:text="@string/testIsRunning", +        android:layout_height="wrap_content", +        android:layout_above="@+id/buttonKillProcess", +        android:layout_alignWithParentIfMissing="true", +        android:text="@string/buttonCancel" />, +, +    <Button, +        android:id="@+id/buttonKillProcess", +        android:layout_width="fill_parent", +        android:layout_height="wrap_content", +        android:layout_alignParentBottom="true", +        android:layout_margin="16dp", +        android:onClick="onClickKillProcess", +        android:text="@string/buttonKillProcess", +        android:visibility="gone" />, +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="testIsRunning">Test Is \nRunning!</string>, +    <string name="buttonCancel">Cancel</string>, +    <string name="buttonKillProcess">Kill Process</string>, +++ b/EventBusPerformance/AndroidManifest.xml, +            android:label="@string/app_name", +            android:process="test.runner" >, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +        android:background="#88333333", +        android:text="@string/testIsRunning", +        android:layout_height="wrap_content", +        android:layout_above="@+id/buttonKillProcess", +        android:layout_alignWithParentIfMissing="true", +        android:text="@string/buttonCancel" />, +, +    <Button, +        android:id="@+id/buttonKillProcess", +        android:layout_width="fill_parent", +        android:layout_height="wrap_content", +        android:layout_alignParentBottom="true", +        android:layout_margin="16dp", +        android:onClick="onClickKillProcess", +        android:text="@string/buttonKillProcess", +        android:visibility="gone" />, +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="testIsRunning">Test Is \nRunning!</string>, +    <string name="buttonCancel">Cancel</string>, +    <string name="buttonKillProcess">Kill Process</string>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunner.java, +                Thread.sleep(300);, +                Thread.sleep(300);, +++ b/EventBusPerformance/AndroidManifest.xml, +            android:label="@string/app_name", +            android:process="test.runner" >, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +        android:background="#88333333", +        android:text="@string/testIsRunning", +        android:layout_height="wrap_content", +        android:layout_above="@+id/buttonKillProcess", +        android:layout_alignWithParentIfMissing="true", +        android:text="@string/buttonCancel" />, +, +    <Button, +        android:id="@+id/buttonKillProcess", +        android:layout_width="fill_parent", +        android:layout_height="wrap_content", +        android:layout_alignParentBottom="true", +        android:layout_margin="16dp", +        android:onClick="onClickKillProcess", +        android:text="@string/buttonKillProcess", +        android:visibility="gone" />, +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="testIsRunning">Test Is \nRunning!</string>, +    <string name="buttonCancel">Cancel</string>, +    <string name="buttonKillProcess">Kill Process</string>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunner.java, +                Thread.sleep(300);]
[+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +        logger = builder.getLogger();, +        mainThreadSupport = builder.getMainThreadSupport();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +        logger = builder.getLogger();, +        mainThreadSupport = builder.getMainThreadSupport();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import android.os.Looper;, +, +    Logger getLogger() {, +            // also check main looper to see if we have "good" Android classes (not Stubs etc.), +            return Logger.AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null, +                    ? new Logger.AndroidLogger("EventBus") :, +, +    MainThreadSupport getMainThreadSupport() {, +        if (mainThreadSupport != null) {, +            return mainThreadSupport;, +        } else if (Logger.AndroidLogger.isAndroidLogAvailable()) {, +            Object looperOrNull = getAndroidMainLooperOrNull();, +            return looperOrNull == null ? null :, +                    new MainThreadSupport.AndroidHandlerMainThreadSupport((Looper) looperOrNull);, +        } else {, +            return null;, +        }, +    }, +, +    Object getAndroidMainLooperOrNull() {, +        try {, +            return Looper.getMainLooper();, +        } catch (RuntimeException e) {, +            // Not really a functional Android (e.g. "Stub!" maven dependencies), +            return null;, +        }, +    }, +]
[+++ b/EventBusTest/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="8" />, +++ b/EventBusTest/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="8" />, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:1.5.0', +    androidTestCompile 'com.android.support.test:runner:0.4.1', +    buildToolsVersion '23.0.2', +        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner", +, +apt {, +    arguments {, +        eventBusIndex "org.greenrobot.eventbus.EventBusTestsIndex", +    }, +}, +, +++ b/EventBusTest/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="8" />, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:1.5.0', +    androidTestCompile 'com.android.support.test:runner:0.4.1', +    buildToolsVersion '23.0.2', +        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner", +, +apt {, +    arguments {, +        eventBusIndex "org.greenrobot.eventbus.EventBusTestsIndex", +    }, +}, +, +++ b/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java, +import android.annotation.SuppressLint;, +import android.os.Handler;, +import android.os.Looper;, +import android.os.Message;, +import android.support.test.runner.AndroidJUnit4;, +import de.greenrobot.event.EventBus;, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.runner.RunWith;, +, +import static org.junit.Assert.*;, +@RunWith(AndroidJUnit4.class), +@Ignore("Base class"), +public class AbstractEventBusTest {, +    @Before, +    public void setUpBase() throws Exception {, +++ b/EventBusTest/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="8" />, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:1.5.0', +    androidTestCompile 'com.android.support.test:runner:0.4.1', +    buildToolsVersion '23.0.2', +        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner", +, +apt {, +    arguments {, +        eventBusIndex "org.greenrobot.eventbus.EventBusTestsIndex", +    }, +}, +, +++ b/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java, +import android.annotation.SuppressLint;, +import android.os.Handler;, +import android.os.Looper;, +import android.os.Message;, +import android.support.test.runner.AndroidJUnit4;, +import de.greenrobot.event.EventBus;, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.runner.RunWith;, +, +import static org.junit.Assert.*;, +@RunWith(AndroidJUnit4.class), +@Ignore("Base class"), +public class AbstractEventBusTest {, +    @Before, +    public void setUpBase() throws Exception {, +++ b/EventBusTest/src/de/greenrobot/event/test/ClassMapPerfTest.java, +++ b/EventBusTest/AndroidManifest.xml, +    <uses-sdk android:minSdkVersion="8" />, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:1.5.0', +    androidTestCompile 'com.android.support.test:runner:0.4.1', +    buildToolsVersion '23.0.2', +        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner", +, +apt {, +    arguments {, +        eventBusIndex "org.greenrobot.eventbus.EventBusTestsIndex", +    }, +}, +, +++ b/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java, +import android.annotation.SuppressLint;, +import android.os.Handler;, +import android.os.Looper;, +import android.os.Message;, +import android.support.test.runner.AndroidJUnit4;, +import de.greenrobot.event.EventBus;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/.travis.yml, +  - oraclejdk8]
[+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java, +    protected void log(String msg, Throwable e) {, +        eventBus.getLogger().log(Level.FINE, msg, e);, +    }, +]
[+++ b/build.gradle, +    gradleVersion = '3.4.1', +++ b/build.gradle, +    gradleVersion = '3.4.1', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +    gradleVersion = '3.4.1', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Apr 10 10:49:50 CEST 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip, +++ b/build.gradle, +    gradleVersion = '3.4.1', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Apr 10 10:49:50 CEST 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip, +++ b/gradlew, +#!/usr/bin/env sh, +# Escape application args, +save ( ) {, +    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done, +    echo " ", +APP_ARGS=$(save "$@"), +# Collect all arguments for the java command, following the shell quoting and substitution rules, +eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS", +, +# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong, +if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then, +  cd "$(dirname "$0")", +fi, +, +exec "$JAVACMD" "$@", +++ b/build.gradle, +    gradleVersion = '3.4.1', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Apr 10 10:49:50 CEST 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip, +++ b/gradlew, +#!/usr/bin/env sh, +# Escape application args, +save ( ) {, +    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done, +    echo " ", +APP_ARGS=$(save "$@"), +# Collect all arguments for the java command, following the shell quoting and substitution rules, +eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS", +, +# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong, +if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then, +  cd "$(dirname "$0")", +fi, +, +exec "$JAVACMD" "$@", +++ b/gradlew.bat]
[+++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    public static String TAG = "Event";, +, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +        register(subscriber, false, 0);, +    }, +    /**, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!, +     */, +    public void register(Object subscriber, int priority) {, +        register(subscriber, false, priority);, +    }, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber) {, +        register(subscriber, true, 0);, +    }, +, +    /**, +     * Like {@link #register(Object, int)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    public void registerSticky(Object subscriber, int priority) {, +        register(subscriber, true, priority);, +    }, +, +    private synchronized void register(Object subscriber, boolean sticky, int priority) {, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +            subscribe(subscriber, subscriberMethod, sticky, priority);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);, +            if (i == size || newSubscription.priority > subscriptions.get(i).priority) {, +        if (sticky) {, +     * {@link #register(Object, int)}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#PostThread}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.PostThread) {, +     * event of an event's type is kept in memory for future access. This can be {@link #registerSticky(Object)} or, +     * {@link #getStickyEvent(Class)}., +            case PostThread:, +            case MainThread:, +            case BackgroundThread:, +            case Async:, +++ b/COMPARISON.md, +        <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, +            pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    public static String TAG = "Event";, +, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +        register(subscriber, false, 0);, +    }, +    /**, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!, +     */, +    public void register(Object subscriber, int priority) {, +        register(subscriber, false, priority);, +    }, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with]
[+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +import org.junit.Ignore;, +, +    @Override, +    @Ignore, +    public void testEventClassHierarchy() {, +        // TODO fix test in super, then remove this, +    }, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +import org.junit.Ignore;, +, +    @Override, +    @Ignore, +    public void testEventClassHierarchy() {, +        // TODO fix test in super, then remove this, +    }, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassTest.java, +import org.junit.Ignore;, +, +    @Override, +    @Ignore, +    public void testEventClassHierarchy() {, +        // TODO fix test in super, then remove this, +    }]
[+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassTest extends EventBusInheritanceDisabledTest {, +, +    int countMyEventOverwritten;, +, +    @Subscribe, +    public void onEvent(MyEvent event) {, +        countMyEventOverwritten++;, +    }, +, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassTest extends EventBusInheritanceDisabledTest {, +, +    int countMyEventOverwritten;, +, +    @Subscribe, +    public void onEvent(MyEvent event) {, +        countMyEventOverwritten++;, +    }, +, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java, +        EventBusInheritanceDisabledSubclassTest, +                subscriber = new EventBusInheritanceDisabledSubclassTest();, +        EventBusInheritanceDisabledSubclassNoMethod, +                subscriber = new EventBusInheritanceDisabledSubclassNoMethod();, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassTest extends EventBusInheritanceDisabledTest {, +, +    int countMyEventOverwritten;, +, +    @Subscribe, +    public void onEvent(MyEvent event) {, +        countMyEventOverwritten++;, +    }, +, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java, +        EventBusInheritanceDisabledSubclassTest, +                subscriber = new EventBusInheritanceDisabledSubclassTest();, +        EventBusInheritanceDisabledSubclassNoMethod, +                subscriber = new EventBusInheritanceDisabledSubclassNoMethod();, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassNoMethodTest.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceSubclassNoMethodTest extends EventBusInheritanceTest {, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassTest extends EventBusInheritanceDisabledTest {, +, +    int countMyEventOverwritten;, +, +    @Subscribe, +    public void onEvent(MyEvent event) {, +        countMyEventOverwritten++;, +    }]
[+++ /dev/null, +++ /dev/null, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberLegalTest.java, +/*, + * Copyright (C) 2013 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.test;, +, +import de.greenrobot.event.EventBusException;, +, +/**, + * @author Markus Junginger, greenrobot, + */, +public class EventBusSubscriberLegalTest extends AbstractEventBusTest {, +, +    public void testSubscriberLegal() {, +        eventBus.register(this);, +        eventBus.post("42");, +        eventBus.unregister(this);, +        assertEquals(1, eventCount.intValue());, +    }, +, +    public void testSubscriberNotPublic() {, +        try {, +            eventBus.register(new NotPublic());, +            fail("Registration of ilegal subscriber successful");, +        } catch (EventBusException e) {, +            // Expected, +        }, +    }, +, +    public void testSubscriberStatic() {, +        try {, +            eventBus.register(new Static());, +            fail("Registration of ilegal subscriber successful");, +        } catch (EventBusException e) {, +            // Expected, +        }, +    }, +, +    public void testSubscriberLegalAbstract() {, +        eventBus.register(new Abstract() {, +, +            @Override, +            public void onEvent(String event) {, +                trackEvent(event);, +            }, +, +        });, +, +        eventBus.post("42");, +        assertEquals(1, eventCount.intValue());, +    }, +, +    public void onEvent(String event) {, +        trackEvent(event);, +    }, +, +    static class NotPublic {, +        void onEvent(String event) {, +        }, +    }, +, +    static abstract class Abstract {, +        public abstract void onEvent(String event);, +    }, +, +    static class Static {, +        public static void onEvent(String event) {, +        }, +    }, +, +}]
[+++ b/EventBusTest/AndroidManifest.xml]
[+++ b/build.gradle, +, +task wrapper(type: Wrapper) {, +    gradleVersion = '2.10', +}, +++ b/build.gradle, +, +task wrapper(type: Wrapper) {, +    gradleVersion = '2.10', +}, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +, +task wrapper(type: Wrapper) {, +    gradleVersion = '2.10', +}, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Feb 01 22:19:59 CET 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip]
[+++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, +        mavenCentral(), +        classpath 'com.android.tools.build:gradle:1.1.0', +    mavenCentral(), +    buildToolsVersion '21.1.2', +++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, +        mavenCentral(), +        classpath 'com.android.tools.build:gradle:1.1.0', +    mavenCentral(), +    buildToolsVersion '21.1.2', +++ b/EventBusTest/build.gradle, +        mavenCentral(), +        classpath 'com.android.tools.build:gradle:1.1.0', +    mavenCentral(), +    buildToolsVersion '21.1.2', +++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.travis.yml, +    - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, +        mavenCentral(), +        classpath 'com.android.tools.build:gradle:1.1.0', +    mavenCentral(), +    buildToolsVersion '21.1.2', +++ b/EventBusTest/build.gradle, +        mavenCentral(), +        classpath 'com.android.tools.build:gradle:1.1.0', +    mavenCentral(), +    buildToolsVersion '21.1.2', +++ b/HOWTO.md, +Note: this can be done only once before the default EventBus instance is used the first time. This ensures consistent behavior in your app. Your Application class is a good place to configure the default EventBus instance before its used.]
[+++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBusPerformance/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBusPerformance/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBusTest/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>]
[+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import org.greenrobot.eventbus.android.AndroidLogger;, +            return AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null, +                    ? new AndroidLogger("EventBus") :, +        } else if (AndroidLogger.isAndroidLogAvailable()) {, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import org.greenrobot.eventbus.android.AndroidLogger;, +            return AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null, +                    ? new AndroidLogger("EventBus") :, +        } else if (AndroidLogger.isAndroidLogAvailable()) {, +++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import org.greenrobot.eventbus.android.AndroidLogger;, +            return AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null, +                    ? new AndroidLogger("EventBus") :, +        } else if (AndroidLogger.isAndroidLogAvailable()) {, +++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +++ b/EventBus/src/org/greenrobot/eventbus/android/AndroidLogger.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus.android;, +, +import android.util.Log;, +, +import org.greenrobot.eventbus.Logger;, +, +import java.util.logging.Level;, +, +public class AndroidLogger implements Logger {, +, +    private static final boolean ANDROID_LOG_AVAILABLE;, +, +    static {, +        boolean android = false;, +        try {, +            android = Class.forName("android.util.Log") != null;, +        } catch (ClassNotFoundException e) {, +            // OK, +        }, +        ANDROID_LOG_AVAILABLE = android;, +    }, +, +    public static boolean isAndroidLogAvailable() {, +        return ANDROID_LOG_AVAILABLE;, +    }, +, +, +    private final String tag;, +, +    public AndroidLogger(String tag) {, +        this.tag = tag;, +    }, +, +    public void log(Level level, String msg) {, +        if (level != Level.OFF) {, +            Log.println(mapLevel(level), tag, msg);, +        }, +    }, +, +    public void log(Level level, String msg, Throwable th) {, +        if (level != Level.OFF) {, +            // That's how Log does it internally, +            Log.println(mapLevel(level), tag, msg + "\n" + Log.getStackTraceString(th));, +        }, +    }, +, +    private int mapLevel(Level level) {, +        int value = level.intValue();, +        if (value < 800) { // below INFO, +            if (value < 500) { // below FINE, +                return Log.VERBOSE;, +            } else {, +                return Log.DEBUG;, +            }, +        } else if (value < 900) { // below WARNING, +            return Log.INFO;, +        } else if (value < 1000) { // below ERROR, +            return Log.WARN;, +        } else {, +            return Log.ERROR;, +        }, +    }, +}]
[+++ b/.travis.yml, +before_script: chmod +x gradlew]
[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private boolean subscribed;, +    private boolean logSubscriberExceptions;, +, +        logSubscriberExceptions = true;, +    }, +, +    /**, +     * Before registering any subscribers, use this method to configure if EventBus should log exceptions thrown by, +     * subscribers (default: true)., +     */, +    public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {, +        if (subscribed) {, +            throw new EventBusException("This method must be called before any registration");, +        }, +        this.logSubscriberExceptions = logSubscriberExceptions;, +        subscribed = true;, +            if (event instanceof SubscriberExceptionEvent) {, +                // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log, +                Log.e(TAG, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                        + " threw an exception", cause);, +                SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;, +                Log.e(TAG, "Initial event " + exEvent.causingEvent + " caused exception in ", +                        + exEvent.causingSubscriber, exEvent.throwable);, +            } else {, +                if (logSubscriberExceptions) {, +                }, +                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(cause, event, subscription.subscriber);, +                post(exEvent);, +    // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course..., +    /* public */interface PostCallback {, +        void onPostCompleted(List<SubscriberExceptionEvent> exceptionEvents);, +    }, +, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private boolean subscribed;, +    private boolean logSubscriberExceptions;, +, +        logSubscriberExceptions = true;, +    }, +, +    /**, +     * Before registering any subscribers, use this method to configure if EventBus should log exceptions thrown by, +     * subscribers (default: true)., +     */, +    public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {, +        if (subscribed) {, +            throw new EventBusException("This method must be called before any registration");, +        }, +        this.logSubscriberExceptions = logSubscriberExceptions;, +        subscribed = true;, +            if (event instanceof SubscriberExceptionEvent) {, +                // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log, +                Log.e(TAG, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                        + " threw an exception", cause);, +                SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;, +                Log.e(TAG, "Initial event " + exEvent.causingEvent + " caused exception in ", +                        + exEvent.causingSubscriber, exEvent.throwable);, +            } else {, +                if (logSubscriberExceptions) {, +                }, +                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(cause, event, subscription.subscriber);, +                post(exEvent);, +    // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course..., +    /* public */interface PostCallback {, +        void onPostCompleted(List<SubscriberExceptionEvent> exceptionEvents);, +    }, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberExceptionEvent.java, +/*, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event;, +, +/**, + * TODO Implement a consistent exception handling. One part of this could be posting this class as event when the, + * background thread or async poster step on an exception., + * , + * @author Markus, + */, +public final class SubscriberExceptionEvent {, +    public final Throwable throwable;, +    public final Object causingEvent;, +    public final Object causingSubscriber;, +]
[+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java, +/*, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.test;, +, +import junit.framework.TestCase;, +import android.app.Activity;, +import android.os.Debug;, +import android.util.Log;, +import de.greenrobot.event.EventBus;, +, +/**, + * @author Markus Junginger, greenrobot, + */, +public class EventBusBasicTest extends TestCase {, +, +    private EventBus eventBus;, +    private String lastStringEvent;, +    private int countStringEvent;, +    private int countIntEvent;, +    private int lastIntEvent;, +    private int countMyEventExtended;, +    private int countMyEvent;, +, +    protected void setUp() throws Exception {, +        super.setUp();, +        eventBus = new EventBus();, +    }, +, +    public void testRegisterForEventTypeAndPost() {, +        // Use an activity to test real life performance, +        TestActivity testActivity = new TestActivity();, +        String event = "Hello";, +, +        long start = System.currentTimeMillis();, +        eventBus.register(testActivity, String.class);, +        long time = System.currentTimeMillis() - start;, +        Log.d(EventBus.TAG, "Registered for event class in " + time + "ms");, +, +        eventBus.post(event);, +, +        assertEquals(event, testActivity.lastStringEvent);, +    }, +, +    public void testRegisterAndPost() {, +        // Use an activity to test real life performance, +        TestActivity testActivity = new TestActivity();, +        String event = "Hello";, +, +        long start = System.currentTimeMillis();, +        eventBus.register(testActivity);, +        long time = System.currentTimeMillis() - start;, +        Log.d(EventBus.TAG, "Registered in " + time + "ms");, +, +        eventBus.post(event);, +, +        assertEquals(event, testActivity.lastStringEvent);, +    }, +, +    public void testPostWithoutSubscriber() {, +        eventBus.post("Hello");, +    }, +, +    public void testUnregisterWithoutRegister() {, +        // Results in a warning without throwing, +        eventBus.unregister(this);, +        eventBus.unregister(this, String.class);, +    }, +, +    public void testRegisterTwice() {, +        eventBus.register(this, String.class);, +        try {, +            eventBus.register(this, String.class);, +            fail("Did not throw");, +        } catch (RuntimeException expected) {, +            // OK, +        }, +    }, +, +    public void testPostWithTwoSubscriber() {, +        EventBusBasicTest test2 = new EventBusBasicTest();, +        eventBus.register(this, String.class);, +        eventBus.register(test2, String.class);, +        String event = "Hello";, +        eventBus.post(event);, +        assertEquals(event, lastStringEvent);, +        assertEquals(event, test2.lastStringEvent);]
[+++ b/EventBusTest/AndroidManifest.xml, +        android:allowBackup="false", +        android:label="EventBus Test" >, +++ b/EventBusTest/AndroidManifest.xml, +        android:allowBackup="false", +        android:label="EventBus Test" >, +++ b/EventBusTest/build.gradle, +buildscript {, +    repositories {, +        mavenCentral(), +    }, +, +    dependencies {, +        classpath 'com.android.tools.build:gradle:0.13.3', +    }, +}, +, +apply plugin: 'com.android.application', +, +dependencies {, +    androidTestCompile project(':EventBus'), +}, +, +android {, +    buildToolsVersion '20.0.0', +    compileSdkVersion 19, +, +    sourceSets {, +        main {, +            manifest.srcFile 'AndroidManifest.xml', +        }, +, +        androidTest {, +            java.srcDirs = ['src'], +        }, +    }, +, +    defaultConfig {, +        testApplicationId "de.greenrobot.event.test", +        testInstrumentationRunner "android.test.InstrumentationTestRunner", +    }, +}, +++ b/EventBusTest/AndroidManifest.xml, +        android:allowBackup="false", +        android:label="EventBus Test" >, +++ b/EventBusTest/build.gradle, +buildscript {, +    repositories {, +        mavenCentral(), +    }, +, +    dependencies {, +        classpath 'com.android.tools.build:gradle:0.13.3', +    }, +}, +, +apply plugin: 'com.android.application', +, +dependencies {, +    androidTestCompile project(':EventBus'), +}, +, +android {, +    buildToolsVersion '20.0.0', +    compileSdkVersion 19, +, +    sourceSets {, +        main {, +            manifest.srcFile 'AndroidManifest.xml', +        }, +, +        androidTest {, +            java.srcDirs = ['src'], +        }, +    }, +, +    defaultConfig {, +        testApplicationId "de.greenrobot.event.test", +        testInstrumentationRunner "android.test.InstrumentationTestRunner", +    }, +}, +++ /dev/null, +++ b/EventBusTest/AndroidManifest.xml, +        android:allowBackup="false", +        android:label="EventBus Test" >, +++ b/EventBusTest/build.gradle, +buildscript {, +    repositories {, +        mavenCentral(), +    }, +, +    dependencies {, +        classpath 'com.android.tools.build:gradle:0.13.3', +    }, +}, +, +apply plugin: 'com.android.application', +, +dependencies {, +    androidTestCompile project(':EventBus')]
[+++ b/EventBusPerformance/AndroidManifest.xml, +    android:versionCode="2", +    android:versionName="1.0.1" >, +++ b/EventBusPerformance/AndroidManifest.xml, +    android:versionCode="2", +    android:versionName="1.0.1" >, +++ b/EventBusPerformance/libs/eventbus.jar]
[+++ b/.travis.yml, +before_install: chmod +x gradlew]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0-beta2.jar, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0-beta2.jar, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java, +import org.greenrobot.eventbus.SubscriberInJar;, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0-beta2.jar, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java, +import org.greenrobot.eventbus.SubscriberInJar;, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java, +import org.greenrobot.eventbus.EventBus;, +import org.greenrobot.eventbus.InJarIndex;, +        eventBus = EventBus.builder().addIndex(new InJarIndex()).build();, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0-beta2.jar, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java, +import org.greenrobot.eventbus.SubscriberInJar;, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java, +import org.greenrobot.eventbus.EventBus;, +import org.greenrobot.eventbus.InJarIndex;, +        eventBus = EventBus.builder().addIndex(new InJarIndex()).build();, +++ b/EventBusTestSubscriberInJar/build.gradle, +, +compileJava {, +    options.compilerArgs << '-AeventBusIndex=org.greenrobot.eventbus.InJarIndex', +    options.fork = true, +}]
[+++ b/.travis.yml, +  - echo no | android create avd --force -n test -t android-10 --abi armeabi]
[+++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +]
[+++ b/build.gradle, +    gradleVersion = '2.14', +++ b/build.gradle, +    gradleVersion = '2.14', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +    gradleVersion = '2.14', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Tue Jul 12 16:09:12 SGT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-all.zip, +++ b/build.gradle, +    gradleVersion = '2.14', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Tue Jul 12 16:09:12 SGT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-all.zip, +++ b/gradlew, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, +    ls=`ls -ld "$PRG"`, +    link=`expr "$ls" : '.*-> \(.*\)$'`, +    if expr "$link" : '/.*' > /dev/null; then, +        PRG="$link", +    else, +        PRG=`dirname "$PRG"`"/$link", +    fi, +done, +SAVED="`pwd`", +cd "`dirname \"$PRG\"`/" >/dev/null, +APP_HOME="`pwd -P`", +cd "$SAVED" >/dev/null, +# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +DEFAULT_JVM_OPTS="", +, +nonstop=false, +  NONSTOP* ), +    nonstop=true, +    ;;, +if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then, +++ b/build.gradle, +    gradleVersion = '2.14', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Tue Jul 12 16:09:12 SGT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-all.zip, +++ b/gradlew, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, +    ls=`ls -ld "$PRG"`, +    link=`expr "$ls" : '.*-> \(.*\)$'`, +    if expr "$link" : '/.*' > /dev/null; then, +        PRG="$link", +    else, +        PRG=`dirname "$PRG"`"/$link", +    fi, +done, +SAVED="`pwd`", +cd "`dirname \"$PRG\"`/" >/dev/null, +APP_HOME="`pwd -P`", +cd "$SAVED" >/dev/null, +# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +DEFAULT_JVM_OPTS="", +, +nonstop=false, +  NONSTOP* ), +    nonstop=true, +    ;;, +if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then, +++ b/gradlew.bat, +@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +set DEFAULT_JVM_OPTS=, +, +@rem Get command-line arguments, handling Windows variants]
[+++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusException.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusException.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusException.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/NoSubscriberEvent.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusException.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/NoSubscriberEvent.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/PendingPost.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBusException.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/HandlerPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/NoSubscriberEvent.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/PendingPost.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/PendingPostQueue.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,]
[+++ b/.travis.yml, +    - build-tools-26.0.3, +    - android-26, +++ b/.travis.yml, +    - build-tools-26.0.3, +    - android-26, +++ b/EventBusTest/build.gradle, +    // Trying to repro bug:, +//    androidTestAnnotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.0', +    buildToolsVersion '26.0.3' // When updating, don't forget to adjust .travis.yml, +    compileSdkVersion 26, +        targetSdkVersion 26]
[+++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java, +        } catch (InstantiationException e) {, +            throw new RuntimeException(e);, +        } catch (IllegalAccessException e) {]
[+++ b/.gitignore, +.gradle, +++ b/.gitignore, +.gradle, +++ b/EventBus/build.gradle, +version = '2.0.1', +            exclude 'de/greenrobot/event/util/**', +++ b/.gitignore, +.gradle, +++ b/EventBus/build.gradle, +version = '2.0.1', +            exclude 'de/greenrobot/event/util/**', +++ b/README.md, +Add EventBus to your project, +----------------------------, +Starting with version 2.0.1, EventBus is pushed to [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22) repository, so you can simply add a dependency (group ID "de.greenrobot" and arifact ID "eventbus"). If you do not use Maven or Gradle, download the jar from [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22) and copy it into the libs folder of your Android project., +, +### V2.0.1 (2013-02-25) Bug fix release, Gradle and Maven Central, +* Fixed #15: removeStickyEvent(...) does not remove event the first time, +* Introduced Gradle build scripts for main project, +* Maven artifacts are pushed to Maven Central starting with this version, +* Added Travis CI, +]
[+++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, +    ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, +    ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, +    ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, +    ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +++ /dev/null, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +import de.greenrobot.event.Subscribe;, +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, +    ThreadMode threadMode() default ThreadMode.PostThread;]
[+++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers, no unregister</item>, +        <item>Register Subscribers, 1. time</item>, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers, no unregister</item>, +        <item>Register Subscribers, 1. time</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers, no unregister</item>, +        <item>Register Subscribers, 1. time</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +            TestEventBus.RegisterAll.class, //, +            TestEventBus.RegisterFirstTime.class, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers, no unregister</item>, +        <item>Register Subscribers, 1. time</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +            TestEventBus.RegisterAll.class, //, +            TestEventBus.RegisterFirstTime.class, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/TestEventBus.java, +import java.lang.reflect.Method;, +        protected Method clearCachesMethod;, +, +                if (clearCachesMethod != null) {, +                    try {, +                        clearCachesMethod.invoke(null);, +                    } catch (Exception e) {, +                        throw new RuntimeException(e);, +                    }, +                }, +    public static class RegisterFirstTime extends RegisterOneByOne {, +, +        public RegisterFirstTime(Context context, TestParams params) {, +            super(context, params);, +            try {, +                Class<?> clazz = Class.forName("de.greenrobot.event.SubscriberMethodFinder");, +                clearCachesMethod = clazz.getDeclaredMethod("clearCaches");, +                clearCachesMethod.setAccessible(true);, +            } catch (Exception e) {, +                throw new RuntimeException(e);, +            }, +        }, +        , +        @Override, +        public String getDisplayName() {, +            return "EventBus Register, first time";, +        }, +, +    }, +]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.lang.model.type.TypeVariable;, +@SupportedOptions(value = {"eventBusIndex", "verbose"}), +    public static final String OPTION_VERBOSE = "verbose";, +    private boolean verbose;, +            verbose = Boolean.parseBoolean(processingEnv.getOptions().get(OPTION_VERBOSE));, +            if (verbose) {, +            }, +                        VariableElement param = method.getParameters().get(0);, +                        TypeMirror typeMirror = getParamTypeMirror(param, messager);, +                            skipReason = "event type cannot be processed";, +                                messager.printMessage(Diagnostic.Kind.NOTE, msg, param);, +    private TypeMirror getParamTypeMirror(VariableElement param, Messager messager) {, +        TypeMirror typeMirror = param.asType();, +        // Check for generic type, +        if (typeMirror instanceof TypeVariable) {, +            TypeMirror upperBound = ((TypeVariable) typeMirror).getUpperBound();, +            if (upperBound instanceof DeclaredType) {, +                if (messager != null) {, +                    messager.printMessage(Diagnostic.Kind.NOTE, "Using upper bound type " + upperBound +, +                            " for generic parameter", param);, +                }, +                typeMirror = upperBound;, +            }, +        }, +        return typeMirror;, +    }, +, +            TypeMirror paramType = getParamTypeMirror(parameters.get(0), null);, +            if (verbose) {, +            }]
[+++ b/.travis.yml, +    - tools]
[+++ b/.travis.yml, +    - build-tools-25.0.2, +++ b/.travis.yml, +    - build-tools-25.0.2, +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.1', +    buildToolsVersion '25.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, +    - build-tools-25.0.2, +++ b/EventBusPerformance/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.1', +    buildToolsVersion '25.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, +        classpath 'com.android.tools.build:gradle:2.3.1', +    androidTestCompile 'com.android.support.test:runner:0.5', +    androidTestCompile 'com.android.support.test:rules:0.5', +    buildToolsVersion '25.0.0' // When updating, don't forget to adjust .travis.yml, +    compileSdkVersion 25]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java, +package org.greenrobot.eventbus;, +, +import android.os.Handler;, +import android.os.Looper;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +, +import static org.junit.Assert.assertEquals;, +, +public class EventBusAndroidOrderTest extends AbstractAndroidEventBusTest {, +, +    private TestBackgroundPoster backgroundPoster;, +    private Handler handler;, +, +    @Before, +    public void setUp() throws Exception {, +        handler = new Handler(Looper.getMainLooper());, +        backgroundPoster = new TestBackgroundPoster(eventBus);, +        backgroundPoster.start();, +    }, +, +    @After, +    public void tearDown() throws Exception {, +        backgroundPoster.shutdown();, +        backgroundPoster.join();, +    }, +, +    @Test, +    public void backgroundAndMainUnordered() {, +        eventBus.register(this);, +, +        handler.post(new Runnable() {, +            @Override, +            public void run() {, +                // post from non-main thread, +                backgroundPoster.post("non-main");, +                // post from main thread, +                eventBus.post("main");, +            }, +        });, +, +        waitForEventCount(2, 1000);, +, +        // observe that event from *main* thread is posted FIRST, +        // NOT in posting order, +        assertEquals("non-main", lastEvent);, +    }, +, +    @Test, +    public void backgroundAndMainOrdered() {, +        eventBus.register(this);, +, +        handler.post(new Runnable() {, +            @Override, +            public void run() {, +                // post from non-main thread, +                backgroundPoster.post(new OrderedEvent("non-main"));, +                // post from main thread, +                eventBus.post(new OrderedEvent("main"));, +            }, +        });, +, +        waitForEventCount(2, 1000);, +, +        // observe that event from *main* thread is posted LAST, +        // IN posting order, +        assertEquals("main", ((OrderedEvent) lastEvent).thread);, +    }, +, +    @Subscribe(threadMode = ThreadMode.MAIN), +    public void onEvent(String event) {, +        trackEvent(event);, +    }, +, +    @Subscribe(threadMode = ThreadMode.MAIN_ORDERED), +    public void onEvent(OrderedEvent event) {, +        trackEvent(event);, +    }, +, +    static class OrderedEvent {, +        String thread;, +, +        OrderedEvent(String thread) {, +            this.thread = thread;, +        }, +    }, +, +}, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java, +package org.greenrobot.eventbus;, +, +import android.os.Handler;, +import android.os.Looper;, +, +import org.junit.After;, +import org.junit.Before;]
[+++ b/build.gradle, +    gradleVersion = '4.1', +    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL, +++ b/build.gradle, +    gradleVersion = '4.1', +    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +    gradleVersion = '4.1', +    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip, +++ b/build.gradle, +    gradleVersion = '4.1', +    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip, +++ b/gradlew]
[+++ b/.gitignore, +*.iml, +.idea, +++ b/.gitignore, +*.iml, +.idea, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3']
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import android.support.test.runner.AndroidJUnit4;, +import android.test.UiThreadTest;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +@RunWith(AndroidJUnit4.class), +public class EventBusAndroidCancelEventDeliveryTest extends EventBusCancelEventDeliveryTest {, +, +    @UiThreadTest, +    @Test, +    public void testCancelInMainThread() {, +        SubscriberMainThread subscriber = new SubscriberMainThread();, +        eventBus.register(subscriber);, +        eventBus.post("42");, +        awaitLatch(subscriber.done, 10);, +        assertEquals(0, eventCount.intValue());, +        assertNotNull(failed);, +    }, +, +}, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.greenrobot.eventbus;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import android.support.test.runner.AndroidJUnit4;, +import android.test.UiThreadTest;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +@RunWith(AndroidJUnit4.class), +public class EventBusAndroidCancelEventDeliveryTest extends EventBusCancelEventDeliveryTest {, +, +    @UiThreadTest, +    @Test, +    public void testCancelInMainThread() {, +        SubscriberMainThread subscriber = new SubscriberMainThread();, +        eventBus.register(subscriber);, +        eventBus.post("42");, +        awaitLatch(subscriber.done, 10);, +        assertEquals(0, eventCount.intValue());, +        assertNotNull(failed);, +    }, +, +}, +++ /dev/null, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java]
[+++ b/COMPARISON.md, +        <th>Aynchronous event delivery</th>, +++ b/COMPARISON.md, +        <th>Aynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '3.0.0-beta1', +++ b/COMPARISON.md, +        <th>Aynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '3.0.0-beta1', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +                unsubscribeByEventType(subscriber, eventType);, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/COMPARISON.md, +        <th>Aynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '3.0.0-beta1', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +                unsubscribeByEventType(subscriber, eventType);, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +, +++ b/COMPARISON.md, +        <th>Aynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '3.0.0-beta1', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";]
[+++ b/.gitignore, +, +local.properties]
[+++ b/EventBusPerformance/res/layout/activity_runtests.xml, +            android:layout_height="wrap_content", +            android:textSize="20sp" />, +, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +            android:layout_height="wrap_content", +            android:textSize="20sp" />, +, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/Test.java, +    protected String otherTestResults;, +    public long getPrimaryResultMillis() {, +        return primaryResultMillis;, +    public double getPrimaryResultRate() {, +        return primaryResultCount / (primaryResultMillis / 1000d);, +    }, +, +    public String getOtherTestResults() {, +        return otherTestResults;, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +            android:layout_height="wrap_content", +            android:textSize="20sp" />, +, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/Test.java, +    protected String otherTestResults;, +    public long getPrimaryResultMillis() {, +        return primaryResultMillis;, +    public double getPrimaryResultRate() {, +        return primaryResultCount / (primaryResultMillis / 1000d);, +    }, +, +    public String getOtherTestResults() {, +        return otherTestResults;, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestEventBus.java, +            long timeStart = System.currentTimeMillis();, +            primaryResultMillis = timeAfterPosting - timeStart;, +            primaryResultCount = super.expectedEventCount;, +            long deliveredMillis = timeAllReceived - timeStart;, +            int deliveryRate = (int) (super.iterations / (deliveredMillis / 1000d));, +            otherTestResults = "Post and delivery time: " + deliveredMillis + " ms<br/>" + //, +                    "Post and delivery rate: " + deliveryRate + "/second";, +        }, +, +        @Override, +        public String getDisplayName() {, +            return "EventBus Post Events";, +        public void onEventAsync(TestEvent event) {, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, +            android:layout_height="wrap_content", +            android:textSize="20sp" />, +, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/Test.java, +    protected String otherTestResults;, +    public long getPrimaryResultMillis() {, +        return primaryResultMillis;, +    public double getPrimaryResultRate() {, +        return primaryResultCount / (primaryResultMillis / 1000d);, +    }, +, +    public String getOtherTestResults() {, +        return otherTestResults;, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestEventBus.java, +            long timeStart = System.currentTimeMillis();, +            primaryResultMillis = timeAfterPosting - timeStart;, +            primaryResultCount = super.expectedEventCount;, +            long deliveredMillis = timeAllReceived - timeStart;, +            int deliveryRate = (int) (super.iterations / (deliveredMillis / 1000d));, +            otherTestResults = "Post and delivery time: " + deliveredMillis + " ms<br/>" + //, +                    "Post and delivery rate: " + deliveryRate + "/second";, +        }, +, +        @Override, +        public String getDisplayName() {, +            return "EventBus Post Events";, +        public void onEventAsync(TestEvent event) {, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +import android.text.Html;, +import android.text.SpannableString;, +        Test test = event.test;, +        String text = "<b>" + test.getDisplayName() + "</b><br/>" + //, +                test.getPrimaryResultMillis() + " ms<br/>" + //, +                ((int) test.getPrimaryResultRate()) + " per second<br/>";, +        if (test.getOtherTestResults() != null) {, +            text += test.getOtherTestResults();, +        }, +        text += "<br/>----------------<br/>";, +        textView.append(Html.fromHtml(text));]
[+++ b/.travis.yml, +    - build-tools-22.0.1]
[+++ b/EventBusPerformance/AndroidManifest.xml, +        android:minSdkVersion="7", +    <uses-feature, +        android:name="android.hardware.touchscreen", +        android:required="false" />, +, +++ b/EventBusPerformance/AndroidManifest.xml, +        android:minSdkVersion="7", +    <uses-feature, +        android:name="android.hardware.touchscreen", +        android:required="false" />, +, +++ b/EventBusPerformance/project.properties, +target=android-7, +++ b/EventBusPerformance/AndroidManifest.xml, +        android:minSdkVersion="7", +    <uses-feature, +        android:name="android.hardware.touchscreen", +        android:required="false" />, +, +++ b/EventBusPerformance/project.properties, +target=android-7, +++ b/EventBusPerformance/res/values/strings.xml, +    <string name="app_name">Event Performance</string>]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +    public static final String OPTION_EVENT_BUS_INDEX = "eventBusIndex";, +                // Nor now, we just use a single index and skip individual files: createInfoFiles();, +, +                String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);, +                } else {, +                    messager.printMessage(Diagnostic.Kind.ERROR, "No option " + OPTION_EVENT_BUS_INDEX +, +                            " passed to annotation processor.");, +    // Currently unused in favor of single index files, +        for (Map.Entry<TypeElement, List<ExecutableElement>> entry : methodsByClass.entrySet()) {, +        for (Map.Entry<TypeElement, List<ExecutableElement>> entry : methodsByClass.entrySet()) {, +            if (classesToSkip.contains(subscriberTypeElement)) {, +                continue;, +            }, +]
